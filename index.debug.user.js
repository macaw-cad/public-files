// ==UserScript==
// @name        competenceframework-devops-wiki-validate-tampermonkey
// @namespace   https://macaw.nl/
// @version     1.0.0
// @author      Serge van den Oever <serge.van.den.oever@macaw.nl>
// @source      https://github.com/Trim21/webpack-userscript-template
// @match       https://dev.azure.com/*
// @require     file://C:\P\competenceframework\packages\devops-wiki-validate-tampermonkey\dist\index.debug.user.js
// @grant       GM.xmlHttpRequest
// @run-at      document-end
// ==/UserScript==


/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/esprima/dist/esprima.js":
/*!**********************************************!*\
  !*** ./node_modules/esprima/dist/esprima.js ***!
  \**********************************************/
/***/ (function(module) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n  /* istanbul ignore next */\n  if (true) module.exports = factory();else {}\n})(this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n      // The require function\n\n      /******/\n\n      function __nested_webpack_require_646__(moduleId) {\n        /******/\n        // Check if module is in cache\n\n        /* istanbul ignore if */\n\n        /******/\n        if (installedModules[moduleId])\n          /******/\n          return installedModules[moduleId].exports;\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n        var module = installedModules[moduleId] = {\n          /******/\n          exports: {},\n\n          /******/\n          id: moduleId,\n\n          /******/\n          loaded: false\n          /******/\n\n        };\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_646__);\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.loaded = true;\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __nested_webpack_require_646__.m = modules;\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __nested_webpack_require_646__.c = installedModules;\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n      __nested_webpack_require_646__.p = \"\";\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __nested_webpack_require_646__(0);\n      /******/\n    }\n    /************************************************************************/\n\n    /******/\n    ([\n    /* 0 */\n\n    /***/\n    function (module, exports, __nested_webpack_require_2253__) {\n      \"use strict\";\n      /*\n        Copyright JS Foundation and other contributors, https://js.foundation/\n      \t  Redistribution and use in source and binary forms, with or without\n        modification, are permitted provided that the following conditions are met:\n      \t    * Redistributions of source code must retain the above copyright\n            notice, this list of conditions and the following disclaimer.\n          * Redistributions in binary form must reproduce the above copyright\n            notice, this list of conditions and the following disclaimer in the\n            documentation and/or other materials provided with the distribution.\n      \t  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n        ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n        DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n        (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n        LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n        ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n        (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n        THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n      */\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var comment_handler_1 = __nested_webpack_require_2253__(1);\n\n      var jsx_parser_1 = __nested_webpack_require_2253__(3);\n\n      var parser_1 = __nested_webpack_require_2253__(8);\n\n      var tokenizer_1 = __nested_webpack_require_2253__(15);\n\n      function parse(code, options, delegate) {\n        var commentHandler = null;\n\n        var proxyDelegate = function (node, metadata) {\n          if (delegate) {\n            delegate(node, metadata);\n          }\n\n          if (commentHandler) {\n            commentHandler.visit(node, metadata);\n          }\n        };\n\n        var parserDelegate = typeof delegate === 'function' ? proxyDelegate : null;\n        var collectComment = false;\n\n        if (options) {\n          collectComment = typeof options.comment === 'boolean' && options.comment;\n          var attachComment = typeof options.attachComment === 'boolean' && options.attachComment;\n\n          if (collectComment || attachComment) {\n            commentHandler = new comment_handler_1.CommentHandler();\n            commentHandler.attach = attachComment;\n            options.comment = true;\n            parserDelegate = proxyDelegate;\n          }\n        }\n\n        var isModule = false;\n\n        if (options && typeof options.sourceType === 'string') {\n          isModule = options.sourceType === 'module';\n        }\n\n        var parser;\n\n        if (options && typeof options.jsx === 'boolean' && options.jsx) {\n          parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);\n        } else {\n          parser = new parser_1.Parser(code, options, parserDelegate);\n        }\n\n        var program = isModule ? parser.parseModule() : parser.parseScript();\n        var ast = program;\n\n        if (collectComment && commentHandler) {\n          ast.comments = commentHandler.comments;\n        }\n\n        if (parser.config.tokens) {\n          ast.tokens = parser.tokens;\n        }\n\n        if (parser.config.tolerant) {\n          ast.errors = parser.errorHandler.errors;\n        }\n\n        return ast;\n      }\n\n      exports.parse = parse;\n\n      function parseModule(code, options, delegate) {\n        var parsingOptions = options || {};\n        parsingOptions.sourceType = 'module';\n        return parse(code, parsingOptions, delegate);\n      }\n\n      exports.parseModule = parseModule;\n\n      function parseScript(code, options, delegate) {\n        var parsingOptions = options || {};\n        parsingOptions.sourceType = 'script';\n        return parse(code, parsingOptions, delegate);\n      }\n\n      exports.parseScript = parseScript;\n\n      function tokenize(code, options, delegate) {\n        var tokenizer = new tokenizer_1.Tokenizer(code, options);\n        var tokens;\n        tokens = [];\n\n        try {\n          while (true) {\n            var token = tokenizer.getNextToken();\n\n            if (!token) {\n              break;\n            }\n\n            if (delegate) {\n              token = delegate(token);\n            }\n\n            tokens.push(token);\n          }\n        } catch (e) {\n          tokenizer.errorHandler.tolerate(e);\n        }\n\n        if (tokenizer.errorHandler.tolerant) {\n          tokens.errors = tokenizer.errors();\n        }\n\n        return tokens;\n      }\n\n      exports.tokenize = tokenize;\n\n      var syntax_1 = __nested_webpack_require_2253__(2);\n\n      exports.Syntax = syntax_1.Syntax; // Sync with *.json manifests.\n\n      exports.version = '4.0.1';\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports, __nested_webpack_require_7272__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var syntax_1 = __nested_webpack_require_7272__(2);\n\n      var CommentHandler = function () {\n        function CommentHandler() {\n          this.attach = false;\n          this.comments = [];\n          this.stack = [];\n          this.leading = [];\n          this.trailing = [];\n        }\n\n        CommentHandler.prototype.insertInnerComments = function (node, metadata) {\n          //  innnerComments for properties empty block\n          //  `function a() {/** comments **\\/}`\n          if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {\n            var innerComments = [];\n\n            for (var i = this.leading.length - 1; i >= 0; --i) {\n              var entry = this.leading[i];\n\n              if (metadata.end.offset >= entry.start) {\n                innerComments.unshift(entry.comment);\n                this.leading.splice(i, 1);\n                this.trailing.splice(i, 1);\n              }\n            }\n\n            if (innerComments.length) {\n              node.innerComments = innerComments;\n            }\n          }\n        };\n\n        CommentHandler.prototype.findTrailingComments = function (metadata) {\n          var trailingComments = [];\n\n          if (this.trailing.length > 0) {\n            for (var i = this.trailing.length - 1; i >= 0; --i) {\n              var entry_1 = this.trailing[i];\n\n              if (entry_1.start >= metadata.end.offset) {\n                trailingComments.unshift(entry_1.comment);\n              }\n            }\n\n            this.trailing.length = 0;\n            return trailingComments;\n          }\n\n          var entry = this.stack[this.stack.length - 1];\n\n          if (entry && entry.node.trailingComments) {\n            var firstComment = entry.node.trailingComments[0];\n\n            if (firstComment && firstComment.range[0] >= metadata.end.offset) {\n              trailingComments = entry.node.trailingComments;\n              delete entry.node.trailingComments;\n            }\n          }\n\n          return trailingComments;\n        };\n\n        CommentHandler.prototype.findLeadingComments = function (metadata) {\n          var leadingComments = [];\n          var target;\n\n          while (this.stack.length > 0) {\n            var entry = this.stack[this.stack.length - 1];\n\n            if (entry && entry.start >= metadata.start.offset) {\n              target = entry.node;\n              this.stack.pop();\n            } else {\n              break;\n            }\n          }\n\n          if (target) {\n            var count = target.leadingComments ? target.leadingComments.length : 0;\n\n            for (var i = count - 1; i >= 0; --i) {\n              var comment = target.leadingComments[i];\n\n              if (comment.range[1] <= metadata.start.offset) {\n                leadingComments.unshift(comment);\n                target.leadingComments.splice(i, 1);\n              }\n            }\n\n            if (target.leadingComments && target.leadingComments.length === 0) {\n              delete target.leadingComments;\n            }\n\n            return leadingComments;\n          }\n\n          for (var i = this.leading.length - 1; i >= 0; --i) {\n            var entry = this.leading[i];\n\n            if (entry.start <= metadata.start.offset) {\n              leadingComments.unshift(entry.comment);\n              this.leading.splice(i, 1);\n            }\n          }\n\n          return leadingComments;\n        };\n\n        CommentHandler.prototype.visitNode = function (node, metadata) {\n          if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {\n            return;\n          }\n\n          this.insertInnerComments(node, metadata);\n          var trailingComments = this.findTrailingComments(metadata);\n          var leadingComments = this.findLeadingComments(metadata);\n\n          if (leadingComments.length > 0) {\n            node.leadingComments = leadingComments;\n          }\n\n          if (trailingComments.length > 0) {\n            node.trailingComments = trailingComments;\n          }\n\n          this.stack.push({\n            node: node,\n            start: metadata.start.offset\n          });\n        };\n\n        CommentHandler.prototype.visitComment = function (node, metadata) {\n          var type = node.type[0] === 'L' ? 'Line' : 'Block';\n          var comment = {\n            type: type,\n            value: node.value\n          };\n\n          if (node.range) {\n            comment.range = node.range;\n          }\n\n          if (node.loc) {\n            comment.loc = node.loc;\n          }\n\n          this.comments.push(comment);\n\n          if (this.attach) {\n            var entry = {\n              comment: {\n                type: type,\n                value: node.value,\n                range: [metadata.start.offset, metadata.end.offset]\n              },\n              start: metadata.start.offset\n            };\n\n            if (node.loc) {\n              entry.comment.loc = node.loc;\n            }\n\n            node.type = type;\n            this.leading.push(entry);\n            this.trailing.push(entry);\n          }\n        };\n\n        CommentHandler.prototype.visit = function (node, metadata) {\n          if (node.type === 'LineComment') {\n            this.visitComment(node, metadata);\n          } else if (node.type === 'BlockComment') {\n            this.visitComment(node, metadata);\n          } else if (this.attach) {\n            this.visitNode(node, metadata);\n          }\n        };\n\n        return CommentHandler;\n      }();\n\n      exports.CommentHandler = CommentHandler;\n      /***/\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        AssignmentPattern: 'AssignmentPattern',\n        ArrayExpression: 'ArrayExpression',\n        ArrayPattern: 'ArrayPattern',\n        ArrowFunctionExpression: 'ArrowFunctionExpression',\n        AwaitExpression: 'AwaitExpression',\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ClassBody: 'ClassBody',\n        ClassDeclaration: 'ClassDeclaration',\n        ClassExpression: 'ClassExpression',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExportAllDeclaration: 'ExportAllDeclaration',\n        ExportDefaultDeclaration: 'ExportDefaultDeclaration',\n        ExportNamedDeclaration: 'ExportNamedDeclaration',\n        ExportSpecifier: 'ExportSpecifier',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForOfStatement: 'ForOfStatement',\n        ForInStatement: 'ForInStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        ImportDeclaration: 'ImportDeclaration',\n        ImportDefaultSpecifier: 'ImportDefaultSpecifier',\n        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\n        ImportSpecifier: 'ImportSpecifier',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        MetaProperty: 'MetaProperty',\n        MethodDefinition: 'MethodDefinition',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        ObjectPattern: 'ObjectPattern',\n        Program: 'Program',\n        Property: 'Property',\n        RestElement: 'RestElement',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SpreadElement: 'SpreadElement',\n        Super: 'Super',\n        SwitchCase: 'SwitchCase',\n        SwitchStatement: 'SwitchStatement',\n        TaggedTemplateExpression: 'TaggedTemplateExpression',\n        TemplateElement: 'TemplateElement',\n        TemplateLiteral: 'TemplateLiteral',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement',\n        YieldExpression: 'YieldExpression'\n      };\n      /***/\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports, __nested_webpack_require_16100__) {\n      \"use strict\";\n      /* istanbul ignore next */\n\n      var __extends = this && this.__extends || function () {\n        var extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return function (d, b) {\n          extendStatics(d, b);\n\n          function __() {\n            this.constructor = d;\n          }\n\n          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n      }();\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var character_1 = __nested_webpack_require_16100__(4);\n\n      var JSXNode = __nested_webpack_require_16100__(5);\n\n      var jsx_syntax_1 = __nested_webpack_require_16100__(6);\n\n      var Node = __nested_webpack_require_16100__(7);\n\n      var parser_1 = __nested_webpack_require_16100__(8);\n\n      var token_1 = __nested_webpack_require_16100__(13);\n\n      var xhtml_entities_1 = __nested_webpack_require_16100__(14);\n\n      token_1.TokenName[100\n      /* Identifier */\n      ] = 'JSXIdentifier';\n      token_1.TokenName[101\n      /* Text */\n      ] = 'JSXText'; // Fully qualified element name, e.g. <svg:path> returns \"svg:path\"\n\n      function getQualifiedElementName(elementName) {\n        var qualifiedName;\n\n        switch (elementName.type) {\n          case jsx_syntax_1.JSXSyntax.JSXIdentifier:\n            var id = elementName;\n            qualifiedName = id.name;\n            break;\n\n          case jsx_syntax_1.JSXSyntax.JSXNamespacedName:\n            var ns = elementName;\n            qualifiedName = getQualifiedElementName(ns.namespace) + ':' + getQualifiedElementName(ns.name);\n            break;\n\n          case jsx_syntax_1.JSXSyntax.JSXMemberExpression:\n            var expr = elementName;\n            qualifiedName = getQualifiedElementName(expr.object) + '.' + getQualifiedElementName(expr.property);\n            break;\n\n          /* istanbul ignore next */\n\n          default:\n            break;\n        }\n\n        return qualifiedName;\n      }\n\n      var JSXParser = function (_super) {\n        __extends(JSXParser, _super);\n\n        function JSXParser(code, options, delegate) {\n          return _super.call(this, code, options, delegate) || this;\n        }\n\n        JSXParser.prototype.parsePrimaryExpression = function () {\n          return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);\n        };\n\n        JSXParser.prototype.startJSX = function () {\n          // Unwind the scanner before the lookahead token.\n          this.scanner.index = this.startMarker.index;\n          this.scanner.lineNumber = this.startMarker.line;\n          this.scanner.lineStart = this.startMarker.index - this.startMarker.column;\n        };\n\n        JSXParser.prototype.finishJSX = function () {\n          // Prime the next lookahead.\n          this.nextToken();\n        };\n\n        JSXParser.prototype.reenterJSX = function () {\n          this.startJSX();\n          this.expectJSX('}'); // Pop the closing '}' added from the lookahead.\n\n          if (this.config.tokens) {\n            this.tokens.pop();\n          }\n        };\n\n        JSXParser.prototype.createJSXNode = function () {\n          this.collectComments();\n          return {\n            index: this.scanner.index,\n            line: this.scanner.lineNumber,\n            column: this.scanner.index - this.scanner.lineStart\n          };\n        };\n\n        JSXParser.prototype.createJSXChildNode = function () {\n          return {\n            index: this.scanner.index,\n            line: this.scanner.lineNumber,\n            column: this.scanner.index - this.scanner.lineStart\n          };\n        };\n\n        JSXParser.prototype.scanXHTMLEntity = function (quote) {\n          var result = '&';\n          var valid = true;\n          var terminated = false;\n          var numeric = false;\n          var hex = false;\n\n          while (!this.scanner.eof() && valid && !terminated) {\n            var ch = this.scanner.source[this.scanner.index];\n\n            if (ch === quote) {\n              break;\n            }\n\n            terminated = ch === ';';\n            result += ch;\n            ++this.scanner.index;\n\n            if (!terminated) {\n              switch (result.length) {\n                case 2:\n                  // e.g. '&#123;'\n                  numeric = ch === '#';\n                  break;\n\n                case 3:\n                  if (numeric) {\n                    // e.g. '&#x41;'\n                    hex = ch === 'x';\n                    valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));\n                    numeric = numeric && !hex;\n                  }\n\n                  break;\n\n                default:\n                  valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));\n                  valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));\n                  break;\n              }\n            }\n          }\n\n          if (valid && terminated && result.length > 2) {\n            // e.g. '&#x41;' becomes just '#x41'\n            var str = result.substr(1, result.length - 2);\n\n            if (numeric && str.length > 1) {\n              result = String.fromCharCode(parseInt(str.substr(1), 10));\n            } else if (hex && str.length > 2) {\n              result = String.fromCharCode(parseInt('0' + str.substr(1), 16));\n            } else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {\n              result = xhtml_entities_1.XHTMLEntities[str];\n            }\n          }\n\n          return result;\n        }; // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.\n\n\n        JSXParser.prototype.lexJSX = function () {\n          var cp = this.scanner.source.charCodeAt(this.scanner.index); // < > / : = { }\n\n          if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {\n            var value = this.scanner.source[this.scanner.index++];\n            return {\n              type: 7\n              /* Punctuator */\n              ,\n              value: value,\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: this.scanner.index - 1,\n              end: this.scanner.index\n            };\n          } // \" '\n\n\n          if (cp === 34 || cp === 39) {\n            var start = this.scanner.index;\n            var quote = this.scanner.source[this.scanner.index++];\n            var str = '';\n\n            while (!this.scanner.eof()) {\n              var ch = this.scanner.source[this.scanner.index++];\n\n              if (ch === quote) {\n                break;\n              } else if (ch === '&') {\n                str += this.scanXHTMLEntity(quote);\n              } else {\n                str += ch;\n              }\n            }\n\n            return {\n              type: 8\n              /* StringLiteral */\n              ,\n              value: str,\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: start,\n              end: this.scanner.index\n            };\n          } // ... or .\n\n\n          if (cp === 46) {\n            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);\n            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);\n            var value = n1 === 46 && n2 === 46 ? '...' : '.';\n            var start = this.scanner.index;\n            this.scanner.index += value.length;\n            return {\n              type: 7\n              /* Punctuator */\n              ,\n              value: value,\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: start,\n              end: this.scanner.index\n            };\n          } // `\n\n\n          if (cp === 96) {\n            // Only placeholder, since it will be rescanned as a real assignment expression.\n            return {\n              type: 10\n              /* Template */\n              ,\n              value: '',\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: this.scanner.index,\n              end: this.scanner.index\n            };\n          } // Identifer can not contain backslash (char code 92).\n\n\n          if (character_1.Character.isIdentifierStart(cp) && cp !== 92) {\n            var start = this.scanner.index;\n            ++this.scanner.index;\n\n            while (!this.scanner.eof()) {\n              var ch = this.scanner.source.charCodeAt(this.scanner.index);\n\n              if (character_1.Character.isIdentifierPart(ch) && ch !== 92) {\n                ++this.scanner.index;\n              } else if (ch === 45) {\n                // Hyphen (char code 45) can be part of an identifier.\n                ++this.scanner.index;\n              } else {\n                break;\n              }\n            }\n\n            var id = this.scanner.source.slice(start, this.scanner.index);\n            return {\n              type: 100\n              /* Identifier */\n              ,\n              value: id,\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: start,\n              end: this.scanner.index\n            };\n          }\n\n          return this.scanner.lex();\n        };\n\n        JSXParser.prototype.nextJSXToken = function () {\n          this.collectComments();\n          this.startMarker.index = this.scanner.index;\n          this.startMarker.line = this.scanner.lineNumber;\n          this.startMarker.column = this.scanner.index - this.scanner.lineStart;\n          var token = this.lexJSX();\n          this.lastMarker.index = this.scanner.index;\n          this.lastMarker.line = this.scanner.lineNumber;\n          this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n\n          if (this.config.tokens) {\n            this.tokens.push(this.convertToken(token));\n          }\n\n          return token;\n        };\n\n        JSXParser.prototype.nextJSXText = function () {\n          this.startMarker.index = this.scanner.index;\n          this.startMarker.line = this.scanner.lineNumber;\n          this.startMarker.column = this.scanner.index - this.scanner.lineStart;\n          var start = this.scanner.index;\n          var text = '';\n\n          while (!this.scanner.eof()) {\n            var ch = this.scanner.source[this.scanner.index];\n\n            if (ch === '{' || ch === '<') {\n              break;\n            }\n\n            ++this.scanner.index;\n            text += ch;\n\n            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n              ++this.scanner.lineNumber;\n\n              if (ch === '\\r' && this.scanner.source[this.scanner.index] === '\\n') {\n                ++this.scanner.index;\n              }\n\n              this.scanner.lineStart = this.scanner.index;\n            }\n          }\n\n          this.lastMarker.index = this.scanner.index;\n          this.lastMarker.line = this.scanner.lineNumber;\n          this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n          var token = {\n            type: 101\n            /* Text */\n            ,\n            value: text,\n            lineNumber: this.scanner.lineNumber,\n            lineStart: this.scanner.lineStart,\n            start: start,\n            end: this.scanner.index\n          };\n\n          if (text.length > 0 && this.config.tokens) {\n            this.tokens.push(this.convertToken(token));\n          }\n\n          return token;\n        };\n\n        JSXParser.prototype.peekJSXToken = function () {\n          var state = this.scanner.saveState();\n          this.scanner.scanComments();\n          var next = this.lexJSX();\n          this.scanner.restoreState(state);\n          return next;\n        }; // Expect the next JSX token to match the specified punctuator.\n        // If not, an exception will be thrown.\n\n\n        JSXParser.prototype.expectJSX = function (value) {\n          var token = this.nextJSXToken();\n\n          if (token.type !== 7\n          /* Punctuator */\n          || token.value !== value) {\n            this.throwUnexpectedToken(token);\n          }\n        }; // Return true if the next JSX token matches the specified punctuator.\n\n\n        JSXParser.prototype.matchJSX = function (value) {\n          var next = this.peekJSXToken();\n          return next.type === 7\n          /* Punctuator */\n          && next.value === value;\n        };\n\n        JSXParser.prototype.parseJSXIdentifier = function () {\n          var node = this.createJSXNode();\n          var token = this.nextJSXToken();\n\n          if (token.type !== 100\n          /* Identifier */\n          ) {\n            this.throwUnexpectedToken(token);\n          }\n\n          return this.finalize(node, new JSXNode.JSXIdentifier(token.value));\n        };\n\n        JSXParser.prototype.parseJSXElementName = function () {\n          var node = this.createJSXNode();\n          var elementName = this.parseJSXIdentifier();\n\n          if (this.matchJSX(':')) {\n            var namespace = elementName;\n            this.expectJSX(':');\n            var name_1 = this.parseJSXIdentifier();\n            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));\n          } else if (this.matchJSX('.')) {\n            while (this.matchJSX('.')) {\n              var object = elementName;\n              this.expectJSX('.');\n              var property = this.parseJSXIdentifier();\n              elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));\n            }\n          }\n\n          return elementName;\n        };\n\n        JSXParser.prototype.parseJSXAttributeName = function () {\n          var node = this.createJSXNode();\n          var attributeName;\n          var identifier = this.parseJSXIdentifier();\n\n          if (this.matchJSX(':')) {\n            var namespace = identifier;\n            this.expectJSX(':');\n            var name_2 = this.parseJSXIdentifier();\n            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));\n          } else {\n            attributeName = identifier;\n          }\n\n          return attributeName;\n        };\n\n        JSXParser.prototype.parseJSXStringLiteralAttribute = function () {\n          var node = this.createJSXNode();\n          var token = this.nextJSXToken();\n\n          if (token.type !== 8\n          /* StringLiteral */\n          ) {\n            this.throwUnexpectedToken(token);\n          }\n\n          var raw = this.getTokenRaw(token);\n          return this.finalize(node, new Node.Literal(token.value, raw));\n        };\n\n        JSXParser.prototype.parseJSXExpressionAttribute = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('{');\n          this.finishJSX();\n\n          if (this.match('}')) {\n            this.tolerateError('JSX attributes must only be assigned a non-empty expression');\n          }\n\n          var expression = this.parseAssignmentExpression();\n          this.reenterJSX();\n          return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n        };\n\n        JSXParser.prototype.parseJSXAttributeValue = function () {\n          return this.matchJSX('{') ? this.parseJSXExpressionAttribute() : this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();\n        };\n\n        JSXParser.prototype.parseJSXNameValueAttribute = function () {\n          var node = this.createJSXNode();\n          var name = this.parseJSXAttributeName();\n          var value = null;\n\n          if (this.matchJSX('=')) {\n            this.expectJSX('=');\n            value = this.parseJSXAttributeValue();\n          }\n\n          return this.finalize(node, new JSXNode.JSXAttribute(name, value));\n        };\n\n        JSXParser.prototype.parseJSXSpreadAttribute = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('{');\n          this.expectJSX('...');\n          this.finishJSX();\n          var argument = this.parseAssignmentExpression();\n          this.reenterJSX();\n          return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));\n        };\n\n        JSXParser.prototype.parseJSXAttributes = function () {\n          var attributes = [];\n\n          while (!this.matchJSX('/') && !this.matchJSX('>')) {\n            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() : this.parseJSXNameValueAttribute();\n            attributes.push(attribute);\n          }\n\n          return attributes;\n        };\n\n        JSXParser.prototype.parseJSXOpeningElement = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('<');\n          var name = this.parseJSXElementName();\n          var attributes = this.parseJSXAttributes();\n          var selfClosing = this.matchJSX('/');\n\n          if (selfClosing) {\n            this.expectJSX('/');\n          }\n\n          this.expectJSX('>');\n          return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n        };\n\n        JSXParser.prototype.parseJSXBoundaryElement = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('<');\n\n          if (this.matchJSX('/')) {\n            this.expectJSX('/');\n            var name_3 = this.parseJSXElementName();\n            this.expectJSX('>');\n            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));\n          }\n\n          var name = this.parseJSXElementName();\n          var attributes = this.parseJSXAttributes();\n          var selfClosing = this.matchJSX('/');\n\n          if (selfClosing) {\n            this.expectJSX('/');\n          }\n\n          this.expectJSX('>');\n          return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n        };\n\n        JSXParser.prototype.parseJSXEmptyExpression = function () {\n          var node = this.createJSXChildNode();\n          this.collectComments();\n          this.lastMarker.index = this.scanner.index;\n          this.lastMarker.line = this.scanner.lineNumber;\n          this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n          return this.finalize(node, new JSXNode.JSXEmptyExpression());\n        };\n\n        JSXParser.prototype.parseJSXExpressionContainer = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('{');\n          var expression;\n\n          if (this.matchJSX('}')) {\n            expression = this.parseJSXEmptyExpression();\n            this.expectJSX('}');\n          } else {\n            this.finishJSX();\n            expression = this.parseAssignmentExpression();\n            this.reenterJSX();\n          }\n\n          return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n        };\n\n        JSXParser.prototype.parseJSXChildren = function () {\n          var children = [];\n\n          while (!this.scanner.eof()) {\n            var node = this.createJSXChildNode();\n            var token = this.nextJSXText();\n\n            if (token.start < token.end) {\n              var raw = this.getTokenRaw(token);\n              var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));\n              children.push(child);\n            }\n\n            if (this.scanner.source[this.scanner.index] === '{') {\n              var container = this.parseJSXExpressionContainer();\n              children.push(container);\n            } else {\n              break;\n            }\n          }\n\n          return children;\n        };\n\n        JSXParser.prototype.parseComplexJSXElement = function (el) {\n          var stack = [];\n\n          while (!this.scanner.eof()) {\n            el.children = el.children.concat(this.parseJSXChildren());\n            var node = this.createJSXChildNode();\n            var element = this.parseJSXBoundaryElement();\n\n            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {\n              var opening = element;\n\n              if (opening.selfClosing) {\n                var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));\n                el.children.push(child);\n              } else {\n                stack.push(el);\n                el = {\n                  node: node,\n                  opening: opening,\n                  closing: null,\n                  children: []\n                };\n              }\n            }\n\n            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {\n              el.closing = element;\n              var open_1 = getQualifiedElementName(el.opening.name);\n              var close_1 = getQualifiedElementName(el.closing.name);\n\n              if (open_1 !== close_1) {\n                this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);\n              }\n\n              if (stack.length > 0) {\n                var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));\n                el = stack[stack.length - 1];\n                el.children.push(child);\n                stack.pop();\n              } else {\n                break;\n              }\n            }\n          }\n\n          return el;\n        };\n\n        JSXParser.prototype.parseJSXElement = function () {\n          var node = this.createJSXNode();\n          var opening = this.parseJSXOpeningElement();\n          var children = [];\n          var closing = null;\n\n          if (!opening.selfClosing) {\n            var el = this.parseComplexJSXElement({\n              node: node,\n              opening: opening,\n              closing: closing,\n              children: children\n            });\n            children = el.children;\n            closing = el.closing;\n          }\n\n          return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));\n        };\n\n        JSXParser.prototype.parseJSXRoot = function () {\n          // Pop the opening '<' added from the lookahead.\n          if (this.config.tokens) {\n            this.tokens.pop();\n          }\n\n          this.startJSX();\n          var element = this.parseJSXElement();\n          this.finishJSX();\n          return element;\n        };\n\n        JSXParser.prototype.isStartOfExpression = function () {\n          return _super.prototype.isStartOfExpression.call(this) || this.match('<');\n        };\n\n        return JSXParser;\n      }(parser_1.Parser);\n\n      exports.JSXParser = JSXParser;\n      /***/\n    },\n    /* 4 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      }); // See also tools/generate-unicode-regex.js.\n\n      var Regex = {\n        // Unicode v8.0.0 NonAsciiIdentifierStart:\n        NonAsciiIdentifierStart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\n        // Unicode v8.0.0 NonAsciiIdentifierPart:\n        NonAsciiIdentifierPart: /[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/\n      };\n      exports.Character = {\n        /* tslint:disable:no-bitwise */\n        fromCodePoint: function (cp) {\n          return cp < 0x10000 ? String.fromCharCode(cp) : String.fromCharCode(0xD800 + (cp - 0x10000 >> 10)) + String.fromCharCode(0xDC00 + (cp - 0x10000 & 1023));\n        },\n        // https://tc39.github.io/ecma262/#sec-white-space\n        isWhiteSpace: function (cp) {\n          return cp === 0x20 || cp === 0x09 || cp === 0x0B || cp === 0x0C || cp === 0xA0 || cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0;\n        },\n        // https://tc39.github.io/ecma262/#sec-line-terminators\n        isLineTerminator: function (cp) {\n          return cp === 0x0A || cp === 0x0D || cp === 0x2028 || cp === 0x2029;\n        },\n        // https://tc39.github.io/ecma262/#sec-names-and-keywords\n        isIdentifierStart: function (cp) {\n          return cp === 0x24 || cp === 0x5F || cp >= 0x41 && cp <= 0x5A || cp >= 0x61 && cp <= 0x7A || cp === 0x5C || cp >= 0x80 && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp));\n        },\n        isIdentifierPart: function (cp) {\n          return cp === 0x24 || cp === 0x5F || cp >= 0x41 && cp <= 0x5A || cp >= 0x61 && cp <= 0x7A || cp >= 0x30 && cp <= 0x39 || cp === 0x5C || cp >= 0x80 && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp));\n        },\n        // https://tc39.github.io/ecma262/#sec-literals-numeric-literals\n        isDecimalDigit: function (cp) {\n          return cp >= 0x30 && cp <= 0x39; // 0..9\n        },\n        isHexDigit: function (cp) {\n          return cp >= 0x30 && cp <= 0x39 || cp >= 0x41 && cp <= 0x46 || cp >= 0x61 && cp <= 0x66; // a..f\n        },\n        isOctalDigit: function (cp) {\n          return cp >= 0x30 && cp <= 0x37; // 0..7\n        }\n      };\n      /***/\n    },\n    /* 5 */\n\n    /***/\n    function (module, exports, __nested_webpack_require_55631__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var jsx_syntax_1 = __nested_webpack_require_55631__(6);\n      /* tslint:disable:max-classes-per-file */\n\n\n      var JSXClosingElement = function () {\n        function JSXClosingElement(name) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;\n          this.name = name;\n        }\n\n        return JSXClosingElement;\n      }();\n\n      exports.JSXClosingElement = JSXClosingElement;\n\n      var JSXElement = function () {\n        function JSXElement(openingElement, children, closingElement) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXElement;\n          this.openingElement = openingElement;\n          this.children = children;\n          this.closingElement = closingElement;\n        }\n\n        return JSXElement;\n      }();\n\n      exports.JSXElement = JSXElement;\n\n      var JSXEmptyExpression = function () {\n        function JSXEmptyExpression() {\n          this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;\n        }\n\n        return JSXEmptyExpression;\n      }();\n\n      exports.JSXEmptyExpression = JSXEmptyExpression;\n\n      var JSXExpressionContainer = function () {\n        function JSXExpressionContainer(expression) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;\n          this.expression = expression;\n        }\n\n        return JSXExpressionContainer;\n      }();\n\n      exports.JSXExpressionContainer = JSXExpressionContainer;\n\n      var JSXIdentifier = function () {\n        function JSXIdentifier(name) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;\n          this.name = name;\n        }\n\n        return JSXIdentifier;\n      }();\n\n      exports.JSXIdentifier = JSXIdentifier;\n\n      var JSXMemberExpression = function () {\n        function JSXMemberExpression(object, property) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;\n          this.object = object;\n          this.property = property;\n        }\n\n        return JSXMemberExpression;\n      }();\n\n      exports.JSXMemberExpression = JSXMemberExpression;\n\n      var JSXAttribute = function () {\n        function JSXAttribute(name, value) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;\n          this.name = name;\n          this.value = value;\n        }\n\n        return JSXAttribute;\n      }();\n\n      exports.JSXAttribute = JSXAttribute;\n\n      var JSXNamespacedName = function () {\n        function JSXNamespacedName(namespace, name) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;\n          this.namespace = namespace;\n          this.name = name;\n        }\n\n        return JSXNamespacedName;\n      }();\n\n      exports.JSXNamespacedName = JSXNamespacedName;\n\n      var JSXOpeningElement = function () {\n        function JSXOpeningElement(name, selfClosing, attributes) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;\n          this.name = name;\n          this.selfClosing = selfClosing;\n          this.attributes = attributes;\n        }\n\n        return JSXOpeningElement;\n      }();\n\n      exports.JSXOpeningElement = JSXOpeningElement;\n\n      var JSXSpreadAttribute = function () {\n        function JSXSpreadAttribute(argument) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;\n          this.argument = argument;\n        }\n\n        return JSXSpreadAttribute;\n      }();\n\n      exports.JSXSpreadAttribute = JSXSpreadAttribute;\n\n      var JSXText = function () {\n        function JSXText(value, raw) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXText;\n          this.value = value;\n          this.raw = raw;\n        }\n\n        return JSXText;\n      }();\n\n      exports.JSXText = JSXText;\n      /***/\n    },\n    /* 6 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.JSXSyntax = {\n        JSXAttribute: 'JSXAttribute',\n        JSXClosingElement: 'JSXClosingElement',\n        JSXElement: 'JSXElement',\n        JSXEmptyExpression: 'JSXEmptyExpression',\n        JSXExpressionContainer: 'JSXExpressionContainer',\n        JSXIdentifier: 'JSXIdentifier',\n        JSXMemberExpression: 'JSXMemberExpression',\n        JSXNamespacedName: 'JSXNamespacedName',\n        JSXOpeningElement: 'JSXOpeningElement',\n        JSXSpreadAttribute: 'JSXSpreadAttribute',\n        JSXText: 'JSXText'\n      };\n      /***/\n    },\n    /* 7 */\n\n    /***/\n    function (module, exports, __nested_webpack_require_60144__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var syntax_1 = __nested_webpack_require_60144__(2);\n      /* tslint:disable:max-classes-per-file */\n\n\n      var ArrayExpression = function () {\n        function ArrayExpression(elements) {\n          this.type = syntax_1.Syntax.ArrayExpression;\n          this.elements = elements;\n        }\n\n        return ArrayExpression;\n      }();\n\n      exports.ArrayExpression = ArrayExpression;\n\n      var ArrayPattern = function () {\n        function ArrayPattern(elements) {\n          this.type = syntax_1.Syntax.ArrayPattern;\n          this.elements = elements;\n        }\n\n        return ArrayPattern;\n      }();\n\n      exports.ArrayPattern = ArrayPattern;\n\n      var ArrowFunctionExpression = function () {\n        function ArrowFunctionExpression(params, body, expression) {\n          this.type = syntax_1.Syntax.ArrowFunctionExpression;\n          this.id = null;\n          this.params = params;\n          this.body = body;\n          this.generator = false;\n          this.expression = expression;\n          this.async = false;\n        }\n\n        return ArrowFunctionExpression;\n      }();\n\n      exports.ArrowFunctionExpression = ArrowFunctionExpression;\n\n      var AssignmentExpression = function () {\n        function AssignmentExpression(operator, left, right) {\n          this.type = syntax_1.Syntax.AssignmentExpression;\n          this.operator = operator;\n          this.left = left;\n          this.right = right;\n        }\n\n        return AssignmentExpression;\n      }();\n\n      exports.AssignmentExpression = AssignmentExpression;\n\n      var AssignmentPattern = function () {\n        function AssignmentPattern(left, right) {\n          this.type = syntax_1.Syntax.AssignmentPattern;\n          this.left = left;\n          this.right = right;\n        }\n\n        return AssignmentPattern;\n      }();\n\n      exports.AssignmentPattern = AssignmentPattern;\n\n      var AsyncArrowFunctionExpression = function () {\n        function AsyncArrowFunctionExpression(params, body, expression) {\n          this.type = syntax_1.Syntax.ArrowFunctionExpression;\n          this.id = null;\n          this.params = params;\n          this.body = body;\n          this.generator = false;\n          this.expression = expression;\n          this.async = true;\n        }\n\n        return AsyncArrowFunctionExpression;\n      }();\n\n      exports.AsyncArrowFunctionExpression = AsyncArrowFunctionExpression;\n\n      var AsyncFunctionDeclaration = function () {\n        function AsyncFunctionDeclaration(id, params, body) {\n          this.type = syntax_1.Syntax.FunctionDeclaration;\n          this.id = id;\n          this.params = params;\n          this.body = body;\n          this.generator = false;\n          this.expression = false;\n          this.async = true;\n        }\n\n        return AsyncFunctionDeclaration;\n      }();\n\n      exports.AsyncFunctionDeclaration = AsyncFunctionDeclaration;\n\n      var AsyncFunctionExpression = function () {\n        function AsyncFunctionExpression(id, params, body) {\n          this.type = syntax_1.Syntax.FunctionExpression;\n          this.id = id;\n          this.params = params;\n          this.body = body;\n          this.generator = false;\n          this.expression = false;\n          this.async = true;\n        }\n\n        return AsyncFunctionExpression;\n      }();\n\n      exports.AsyncFunctionExpression = AsyncFunctionExpression;\n\n      var AwaitExpression = function () {\n        function AwaitExpression(argument) {\n          this.type = syntax_1.Syntax.AwaitExpression;\n          this.argument = argument;\n        }\n\n        return AwaitExpression;\n      }();\n\n      exports.AwaitExpression = AwaitExpression;\n\n      var BinaryExpression = function () {\n        function BinaryExpression(operator, left, right) {\n          var logical = operator === '||' || operator === '&&';\n          this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;\n          this.operator = operator;\n          this.left = left;\n          this.right = right;\n        }\n\n        return BinaryExpression;\n      }();\n\n      exports.BinaryExpression = BinaryExpression;\n\n      var BlockStatement = function () {\n        function BlockStatement(body) {\n          this.type = syntax_1.Syntax.BlockStatement;\n          this.body = body;\n        }\n\n        return BlockStatement;\n      }();\n\n      exports.BlockStatement = BlockStatement;\n\n      var BreakStatement = function () {\n        function BreakStatement(label) {\n          this.type = syntax_1.Syntax.BreakStatement;\n          this.label = label;\n        }\n\n        return BreakStatement;\n      }();\n\n      exports.BreakStatement = BreakStatement;\n\n      var CallExpression = function () {\n        function CallExpression(callee, args) {\n          this.type = syntax_1.Syntax.CallExpression;\n          this.callee = callee;\n          this.arguments = args;\n        }\n\n        return CallExpression;\n      }();\n\n      exports.CallExpression = CallExpression;\n\n      var CatchClause = function () {\n        function CatchClause(param, body) {\n          this.type = syntax_1.Syntax.CatchClause;\n          this.param = param;\n          this.body = body;\n        }\n\n        return CatchClause;\n      }();\n\n      exports.CatchClause = CatchClause;\n\n      var ClassBody = function () {\n        function ClassBody(body) {\n          this.type = syntax_1.Syntax.ClassBody;\n          this.body = body;\n        }\n\n        return ClassBody;\n      }();\n\n      exports.ClassBody = ClassBody;\n\n      var ClassDeclaration = function () {\n        function ClassDeclaration(id, superClass, body) {\n          this.type = syntax_1.Syntax.ClassDeclaration;\n          this.id = id;\n          this.superClass = superClass;\n          this.body = body;\n        }\n\n        return ClassDeclaration;\n      }();\n\n      exports.ClassDeclaration = ClassDeclaration;\n\n      var ClassExpression = function () {\n        function ClassExpression(id, superClass, body) {\n          this.type = syntax_1.Syntax.ClassExpression;\n          this.id = id;\n          this.superClass = superClass;\n          this.body = body;\n        }\n\n        return ClassExpression;\n      }();\n\n      exports.ClassExpression = ClassExpression;\n\n      var ComputedMemberExpression = function () {\n        function ComputedMemberExpression(object, property) {\n          this.type = syntax_1.Syntax.MemberExpression;\n          this.computed = true;\n          this.object = object;\n          this.property = property;\n        }\n\n        return ComputedMemberExpression;\n      }();\n\n      exports.ComputedMemberExpression = ComputedMemberExpression;\n\n      var ConditionalExpression = function () {\n        function ConditionalExpression(test, consequent, alternate) {\n          this.type = syntax_1.Syntax.ConditionalExpression;\n          this.test = test;\n          this.consequent = consequent;\n          this.alternate = alternate;\n        }\n\n        return ConditionalExpression;\n      }();\n\n      exports.ConditionalExpression = ConditionalExpression;\n\n      var ContinueStatement = function () {\n        function ContinueStatement(label) {\n          this.type = syntax_1.Syntax.ContinueStatement;\n          this.label = label;\n        }\n\n        return ContinueStatement;\n      }();\n\n      exports.ContinueStatement = ContinueStatement;\n\n      var DebuggerStatement = function () {\n        function DebuggerStatement() {\n          this.type = syntax_1.Syntax.DebuggerStatement;\n        }\n\n        return DebuggerStatement;\n      }();\n\n      exports.DebuggerStatement = DebuggerStatement;\n\n      var Directive = function () {\n        function Directive(expression, directive) {\n          this.type = syntax_1.Syntax.ExpressionStatement;\n          this.expression = expression;\n          this.directive = directive;\n        }\n\n        return Directive;\n      }();\n\n      exports.Directive = Directive;\n\n      var DoWhileStatement = function () {\n        function DoWhileStatement(body, test) {\n          this.type = syntax_1.Syntax.DoWhileStatement;\n          this.body = body;\n          this.test = test;\n        }\n\n        return DoWhileStatement;\n      }();\n\n      exports.DoWhileStatement = DoWhileStatement;\n\n      var EmptyStatement = function () {\n        function EmptyStatement() {\n          this.type = syntax_1.Syntax.EmptyStatement;\n        }\n\n        return EmptyStatement;\n      }();\n\n      exports.EmptyStatement = EmptyStatement;\n\n      var ExportAllDeclaration = function () {\n        function ExportAllDeclaration(source) {\n          this.type = syntax_1.Syntax.ExportAllDeclaration;\n          this.source = source;\n        }\n\n        return ExportAllDeclaration;\n      }();\n\n      exports.ExportAllDeclaration = ExportAllDeclaration;\n\n      var ExportDefaultDeclaration = function () {\n        function ExportDefaultDeclaration(declaration) {\n          this.type = syntax_1.Syntax.ExportDefaultDeclaration;\n          this.declaration = declaration;\n        }\n\n        return ExportDefaultDeclaration;\n      }();\n\n      exports.ExportDefaultDeclaration = ExportDefaultDeclaration;\n\n      var ExportNamedDeclaration = function () {\n        function ExportNamedDeclaration(declaration, specifiers, source) {\n          this.type = syntax_1.Syntax.ExportNamedDeclaration;\n          this.declaration = declaration;\n          this.specifiers = specifiers;\n          this.source = source;\n        }\n\n        return ExportNamedDeclaration;\n      }();\n\n      exports.ExportNamedDeclaration = ExportNamedDeclaration;\n\n      var ExportSpecifier = function () {\n        function ExportSpecifier(local, exported) {\n          this.type = syntax_1.Syntax.ExportSpecifier;\n          this.exported = exported;\n          this.local = local;\n        }\n\n        return ExportSpecifier;\n      }();\n\n      exports.ExportSpecifier = ExportSpecifier;\n\n      var ExpressionStatement = function () {\n        function ExpressionStatement(expression) {\n          this.type = syntax_1.Syntax.ExpressionStatement;\n          this.expression = expression;\n        }\n\n        return ExpressionStatement;\n      }();\n\n      exports.ExpressionStatement = ExpressionStatement;\n\n      var ForInStatement = function () {\n        function ForInStatement(left, right, body) {\n          this.type = syntax_1.Syntax.ForInStatement;\n          this.left = left;\n          this.right = right;\n          this.body = body;\n          this.each = false;\n        }\n\n        return ForInStatement;\n      }();\n\n      exports.ForInStatement = ForInStatement;\n\n      var ForOfStatement = function () {\n        function ForOfStatement(left, right, body) {\n          this.type = syntax_1.Syntax.ForOfStatement;\n          this.left = left;\n          this.right = right;\n          this.body = body;\n        }\n\n        return ForOfStatement;\n      }();\n\n      exports.ForOfStatement = ForOfStatement;\n\n      var ForStatement = function () {\n        function ForStatement(init, test, update, body) {\n          this.type = syntax_1.Syntax.ForStatement;\n          this.init = init;\n          this.test = test;\n          this.update = update;\n          this.body = body;\n        }\n\n        return ForStatement;\n      }();\n\n      exports.ForStatement = ForStatement;\n\n      var FunctionDeclaration = function () {\n        function FunctionDeclaration(id, params, body, generator) {\n          this.type = syntax_1.Syntax.FunctionDeclaration;\n          this.id = id;\n          this.params = params;\n          this.body = body;\n          this.generator = generator;\n          this.expression = false;\n          this.async = false;\n        }\n\n        return FunctionDeclaration;\n      }();\n\n      exports.FunctionDeclaration = FunctionDeclaration;\n\n      var FunctionExpression = function () {\n        function FunctionExpression(id, params, body, generator) {\n          this.type = syntax_1.Syntax.FunctionExpression;\n          this.id = id;\n          this.params = params;\n          this.body = body;\n          this.generator = generator;\n          this.expression = false;\n          this.async = false;\n        }\n\n        return FunctionExpression;\n      }();\n\n      exports.FunctionExpression = FunctionExpression;\n\n      var Identifier = function () {\n        function Identifier(name) {\n          this.type = syntax_1.Syntax.Identifier;\n          this.name = name;\n        }\n\n        return Identifier;\n      }();\n\n      exports.Identifier = Identifier;\n\n      var IfStatement = function () {\n        function IfStatement(test, consequent, alternate) {\n          this.type = syntax_1.Syntax.IfStatement;\n          this.test = test;\n          this.consequent = consequent;\n          this.alternate = alternate;\n        }\n\n        return IfStatement;\n      }();\n\n      exports.IfStatement = IfStatement;\n\n      var ImportDeclaration = function () {\n        function ImportDeclaration(specifiers, source) {\n          this.type = syntax_1.Syntax.ImportDeclaration;\n          this.specifiers = specifiers;\n          this.source = source;\n        }\n\n        return ImportDeclaration;\n      }();\n\n      exports.ImportDeclaration = ImportDeclaration;\n\n      var ImportDefaultSpecifier = function () {\n        function ImportDefaultSpecifier(local) {\n          this.type = syntax_1.Syntax.ImportDefaultSpecifier;\n          this.local = local;\n        }\n\n        return ImportDefaultSpecifier;\n      }();\n\n      exports.ImportDefaultSpecifier = ImportDefaultSpecifier;\n\n      var ImportNamespaceSpecifier = function () {\n        function ImportNamespaceSpecifier(local) {\n          this.type = syntax_1.Syntax.ImportNamespaceSpecifier;\n          this.local = local;\n        }\n\n        return ImportNamespaceSpecifier;\n      }();\n\n      exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;\n\n      var ImportSpecifier = function () {\n        function ImportSpecifier(local, imported) {\n          this.type = syntax_1.Syntax.ImportSpecifier;\n          this.local = local;\n          this.imported = imported;\n        }\n\n        return ImportSpecifier;\n      }();\n\n      exports.ImportSpecifier = ImportSpecifier;\n\n      var LabeledStatement = function () {\n        function LabeledStatement(label, body) {\n          this.type = syntax_1.Syntax.LabeledStatement;\n          this.label = label;\n          this.body = body;\n        }\n\n        return LabeledStatement;\n      }();\n\n      exports.LabeledStatement = LabeledStatement;\n\n      var Literal = function () {\n        function Literal(value, raw) {\n          this.type = syntax_1.Syntax.Literal;\n          this.value = value;\n          this.raw = raw;\n        }\n\n        return Literal;\n      }();\n\n      exports.Literal = Literal;\n\n      var MetaProperty = function () {\n        function MetaProperty(meta, property) {\n          this.type = syntax_1.Syntax.MetaProperty;\n          this.meta = meta;\n          this.property = property;\n        }\n\n        return MetaProperty;\n      }();\n\n      exports.MetaProperty = MetaProperty;\n\n      var MethodDefinition = function () {\n        function MethodDefinition(key, computed, value, kind, isStatic) {\n          this.type = syntax_1.Syntax.MethodDefinition;\n          this.key = key;\n          this.computed = computed;\n          this.value = value;\n          this.kind = kind;\n          this.static = isStatic;\n        }\n\n        return MethodDefinition;\n      }();\n\n      exports.MethodDefinition = MethodDefinition;\n\n      var Module = function () {\n        function Module(body) {\n          this.type = syntax_1.Syntax.Program;\n          this.body = body;\n          this.sourceType = 'module';\n        }\n\n        return Module;\n      }();\n\n      exports.Module = Module;\n\n      var NewExpression = function () {\n        function NewExpression(callee, args) {\n          this.type = syntax_1.Syntax.NewExpression;\n          this.callee = callee;\n          this.arguments = args;\n        }\n\n        return NewExpression;\n      }();\n\n      exports.NewExpression = NewExpression;\n\n      var ObjectExpression = function () {\n        function ObjectExpression(properties) {\n          this.type = syntax_1.Syntax.ObjectExpression;\n          this.properties = properties;\n        }\n\n        return ObjectExpression;\n      }();\n\n      exports.ObjectExpression = ObjectExpression;\n\n      var ObjectPattern = function () {\n        function ObjectPattern(properties) {\n          this.type = syntax_1.Syntax.ObjectPattern;\n          this.properties = properties;\n        }\n\n        return ObjectPattern;\n      }();\n\n      exports.ObjectPattern = ObjectPattern;\n\n      var Property = function () {\n        function Property(kind, key, computed, value, method, shorthand) {\n          this.type = syntax_1.Syntax.Property;\n          this.key = key;\n          this.computed = computed;\n          this.value = value;\n          this.kind = kind;\n          this.method = method;\n          this.shorthand = shorthand;\n        }\n\n        return Property;\n      }();\n\n      exports.Property = Property;\n\n      var RegexLiteral = function () {\n        function RegexLiteral(value, raw, pattern, flags) {\n          this.type = syntax_1.Syntax.Literal;\n          this.value = value;\n          this.raw = raw;\n          this.regex = {\n            pattern: pattern,\n            flags: flags\n          };\n        }\n\n        return RegexLiteral;\n      }();\n\n      exports.RegexLiteral = RegexLiteral;\n\n      var RestElement = function () {\n        function RestElement(argument) {\n          this.type = syntax_1.Syntax.RestElement;\n          this.argument = argument;\n        }\n\n        return RestElement;\n      }();\n\n      exports.RestElement = RestElement;\n\n      var ReturnStatement = function () {\n        function ReturnStatement(argument) {\n          this.type = syntax_1.Syntax.ReturnStatement;\n          this.argument = argument;\n        }\n\n        return ReturnStatement;\n      }();\n\n      exports.ReturnStatement = ReturnStatement;\n\n      var Script = function () {\n        function Script(body) {\n          this.type = syntax_1.Syntax.Program;\n          this.body = body;\n          this.sourceType = 'script';\n        }\n\n        return Script;\n      }();\n\n      exports.Script = Script;\n\n      var SequenceExpression = function () {\n        function SequenceExpression(expressions) {\n          this.type = syntax_1.Syntax.SequenceExpression;\n          this.expressions = expressions;\n        }\n\n        return SequenceExpression;\n      }();\n\n      exports.SequenceExpression = SequenceExpression;\n\n      var SpreadElement = function () {\n        function SpreadElement(argument) {\n          this.type = syntax_1.Syntax.SpreadElement;\n          this.argument = argument;\n        }\n\n        return SpreadElement;\n      }();\n\n      exports.SpreadElement = SpreadElement;\n\n      var StaticMemberExpression = function () {\n        function StaticMemberExpression(object, property) {\n          this.type = syntax_1.Syntax.MemberExpression;\n          this.computed = false;\n          this.object = object;\n          this.property = property;\n        }\n\n        return StaticMemberExpression;\n      }();\n\n      exports.StaticMemberExpression = StaticMemberExpression;\n\n      var Super = function () {\n        function Super() {\n          this.type = syntax_1.Syntax.Super;\n        }\n\n        return Super;\n      }();\n\n      exports.Super = Super;\n\n      var SwitchCase = function () {\n        function SwitchCase(test, consequent) {\n          this.type = syntax_1.Syntax.SwitchCase;\n          this.test = test;\n          this.consequent = consequent;\n        }\n\n        return SwitchCase;\n      }();\n\n      exports.SwitchCase = SwitchCase;\n\n      var SwitchStatement = function () {\n        function SwitchStatement(discriminant, cases) {\n          this.type = syntax_1.Syntax.SwitchStatement;\n          this.discriminant = discriminant;\n          this.cases = cases;\n        }\n\n        return SwitchStatement;\n      }();\n\n      exports.SwitchStatement = SwitchStatement;\n\n      var TaggedTemplateExpression = function () {\n        function TaggedTemplateExpression(tag, quasi) {\n          this.type = syntax_1.Syntax.TaggedTemplateExpression;\n          this.tag = tag;\n          this.quasi = quasi;\n        }\n\n        return TaggedTemplateExpression;\n      }();\n\n      exports.TaggedTemplateExpression = TaggedTemplateExpression;\n\n      var TemplateElement = function () {\n        function TemplateElement(value, tail) {\n          this.type = syntax_1.Syntax.TemplateElement;\n          this.value = value;\n          this.tail = tail;\n        }\n\n        return TemplateElement;\n      }();\n\n      exports.TemplateElement = TemplateElement;\n\n      var TemplateLiteral = function () {\n        function TemplateLiteral(quasis, expressions) {\n          this.type = syntax_1.Syntax.TemplateLiteral;\n          this.quasis = quasis;\n          this.expressions = expressions;\n        }\n\n        return TemplateLiteral;\n      }();\n\n      exports.TemplateLiteral = TemplateLiteral;\n\n      var ThisExpression = function () {\n        function ThisExpression() {\n          this.type = syntax_1.Syntax.ThisExpression;\n        }\n\n        return ThisExpression;\n      }();\n\n      exports.ThisExpression = ThisExpression;\n\n      var ThrowStatement = function () {\n        function ThrowStatement(argument) {\n          this.type = syntax_1.Syntax.ThrowStatement;\n          this.argument = argument;\n        }\n\n        return ThrowStatement;\n      }();\n\n      exports.ThrowStatement = ThrowStatement;\n\n      var TryStatement = function () {\n        function TryStatement(block, handler, finalizer) {\n          this.type = syntax_1.Syntax.TryStatement;\n          this.block = block;\n          this.handler = handler;\n          this.finalizer = finalizer;\n        }\n\n        return TryStatement;\n      }();\n\n      exports.TryStatement = TryStatement;\n\n      var UnaryExpression = function () {\n        function UnaryExpression(operator, argument) {\n          this.type = syntax_1.Syntax.UnaryExpression;\n          this.operator = operator;\n          this.argument = argument;\n          this.prefix = true;\n        }\n\n        return UnaryExpression;\n      }();\n\n      exports.UnaryExpression = UnaryExpression;\n\n      var UpdateExpression = function () {\n        function UpdateExpression(operator, argument, prefix) {\n          this.type = syntax_1.Syntax.UpdateExpression;\n          this.operator = operator;\n          this.argument = argument;\n          this.prefix = prefix;\n        }\n\n        return UpdateExpression;\n      }();\n\n      exports.UpdateExpression = UpdateExpression;\n\n      var VariableDeclaration = function () {\n        function VariableDeclaration(declarations, kind) {\n          this.type = syntax_1.Syntax.VariableDeclaration;\n          this.declarations = declarations;\n          this.kind = kind;\n        }\n\n        return VariableDeclaration;\n      }();\n\n      exports.VariableDeclaration = VariableDeclaration;\n\n      var VariableDeclarator = function () {\n        function VariableDeclarator(id, init) {\n          this.type = syntax_1.Syntax.VariableDeclarator;\n          this.id = id;\n          this.init = init;\n        }\n\n        return VariableDeclarator;\n      }();\n\n      exports.VariableDeclarator = VariableDeclarator;\n\n      var WhileStatement = function () {\n        function WhileStatement(test, body) {\n          this.type = syntax_1.Syntax.WhileStatement;\n          this.test = test;\n          this.body = body;\n        }\n\n        return WhileStatement;\n      }();\n\n      exports.WhileStatement = WhileStatement;\n\n      var WithStatement = function () {\n        function WithStatement(object, body) {\n          this.type = syntax_1.Syntax.WithStatement;\n          this.object = object;\n          this.body = body;\n        }\n\n        return WithStatement;\n      }();\n\n      exports.WithStatement = WithStatement;\n\n      var YieldExpression = function () {\n        function YieldExpression(argument, delegate) {\n          this.type = syntax_1.Syntax.YieldExpression;\n          this.argument = argument;\n          this.delegate = delegate;\n        }\n\n        return YieldExpression;\n      }();\n\n      exports.YieldExpression = YieldExpression;\n      /***/\n    },\n    /* 8 */\n\n    /***/\n    function (module, exports, __nested_webpack_require_84347__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var assert_1 = __nested_webpack_require_84347__(9);\n\n      var error_handler_1 = __nested_webpack_require_84347__(10);\n\n      var messages_1 = __nested_webpack_require_84347__(11);\n\n      var Node = __nested_webpack_require_84347__(7);\n\n      var scanner_1 = __nested_webpack_require_84347__(12);\n\n      var syntax_1 = __nested_webpack_require_84347__(2);\n\n      var token_1 = __nested_webpack_require_84347__(13);\n\n      var ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';\n\n      var Parser = function () {\n        function Parser(code, options, delegate) {\n          if (options === void 0) {\n            options = {};\n          }\n\n          this.config = {\n            range: typeof options.range === 'boolean' && options.range,\n            loc: typeof options.loc === 'boolean' && options.loc,\n            source: null,\n            tokens: typeof options.tokens === 'boolean' && options.tokens,\n            comment: typeof options.comment === 'boolean' && options.comment,\n            tolerant: typeof options.tolerant === 'boolean' && options.tolerant\n          };\n\n          if (this.config.loc && options.source && options.source !== null) {\n            this.config.source = String(options.source);\n          }\n\n          this.delegate = delegate;\n          this.errorHandler = new error_handler_1.ErrorHandler();\n          this.errorHandler.tolerant = this.config.tolerant;\n          this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n          this.scanner.trackComment = this.config.comment;\n          this.operatorPrecedence = {\n            ')': 0,\n            ';': 0,\n            ',': 0,\n            '=': 0,\n            ']': 0,\n            '||': 1,\n            '&&': 2,\n            '|': 3,\n            '^': 4,\n            '&': 5,\n            '==': 6,\n            '!=': 6,\n            '===': 6,\n            '!==': 6,\n            '<': 7,\n            '>': 7,\n            '<=': 7,\n            '>=': 7,\n            '<<': 8,\n            '>>': 8,\n            '>>>': 8,\n            '+': 9,\n            '-': 9,\n            '*': 11,\n            '/': 11,\n            '%': 11\n          };\n          this.lookahead = {\n            type: 2\n            /* EOF */\n            ,\n            value: '',\n            lineNumber: this.scanner.lineNumber,\n            lineStart: 0,\n            start: 0,\n            end: 0\n          };\n          this.hasLineTerminator = false;\n          this.context = {\n            isModule: false,\n            await: false,\n            allowIn: true,\n            allowStrictDirective: true,\n            allowYield: true,\n            firstCoverInitializedNameError: null,\n            isAssignmentTarget: false,\n            isBindingElement: false,\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false,\n            labelSet: {},\n            strict: false\n          };\n          this.tokens = [];\n          this.startMarker = {\n            index: 0,\n            line: this.scanner.lineNumber,\n            column: 0\n          };\n          this.lastMarker = {\n            index: 0,\n            line: this.scanner.lineNumber,\n            column: 0\n          };\n          this.nextToken();\n          this.lastMarker = {\n            index: this.scanner.index,\n            line: this.scanner.lineNumber,\n            column: this.scanner.index - this.scanner.lineStart\n          };\n        }\n\n        Parser.prototype.throwError = function (messageFormat) {\n          var values = [];\n\n          for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n          }\n\n          var args = Array.prototype.slice.call(arguments, 1);\n          var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n            assert_1.assert(idx < args.length, 'Message reference must be in range');\n            return args[idx];\n          });\n          var index = this.lastMarker.index;\n          var line = this.lastMarker.line;\n          var column = this.lastMarker.column + 1;\n          throw this.errorHandler.createError(index, line, column, msg);\n        };\n\n        Parser.prototype.tolerateError = function (messageFormat) {\n          var values = [];\n\n          for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n          }\n\n          var args = Array.prototype.slice.call(arguments, 1);\n          var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n            assert_1.assert(idx < args.length, 'Message reference must be in range');\n            return args[idx];\n          });\n          var index = this.lastMarker.index;\n          var line = this.scanner.lineNumber;\n          var column = this.lastMarker.column + 1;\n          this.errorHandler.tolerateError(index, line, column, msg);\n        }; // Throw an exception because of the token.\n\n\n        Parser.prototype.unexpectedTokenError = function (token, message) {\n          var msg = message || messages_1.Messages.UnexpectedToken;\n          var value;\n\n          if (token) {\n            if (!message) {\n              msg = token.type === 2\n              /* EOF */\n              ? messages_1.Messages.UnexpectedEOS : token.type === 3\n              /* Identifier */\n              ? messages_1.Messages.UnexpectedIdentifier : token.type === 6\n              /* NumericLiteral */\n              ? messages_1.Messages.UnexpectedNumber : token.type === 8\n              /* StringLiteral */\n              ? messages_1.Messages.UnexpectedString : token.type === 10\n              /* Template */\n              ? messages_1.Messages.UnexpectedTemplate : messages_1.Messages.UnexpectedToken;\n\n              if (token.type === 4\n              /* Keyword */\n              ) {\n                if (this.scanner.isFutureReservedWord(token.value)) {\n                  msg = messages_1.Messages.UnexpectedReserved;\n                } else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {\n                  msg = messages_1.Messages.StrictReservedWord;\n                }\n              }\n            }\n\n            value = token.value;\n          } else {\n            value = 'ILLEGAL';\n          }\n\n          msg = msg.replace('%0', value);\n\n          if (token && typeof token.lineNumber === 'number') {\n            var index = token.start;\n            var line = token.lineNumber;\n            var lastMarkerLineStart = this.lastMarker.index - this.lastMarker.column;\n            var column = token.start - lastMarkerLineStart + 1;\n            return this.errorHandler.createError(index, line, column, msg);\n          } else {\n            var index = this.lastMarker.index;\n            var line = this.lastMarker.line;\n            var column = this.lastMarker.column + 1;\n            return this.errorHandler.createError(index, line, column, msg);\n          }\n        };\n\n        Parser.prototype.throwUnexpectedToken = function (token, message) {\n          throw this.unexpectedTokenError(token, message);\n        };\n\n        Parser.prototype.tolerateUnexpectedToken = function (token, message) {\n          this.errorHandler.tolerate(this.unexpectedTokenError(token, message));\n        };\n\n        Parser.prototype.collectComments = function () {\n          if (!this.config.comment) {\n            this.scanner.scanComments();\n          } else {\n            var comments = this.scanner.scanComments();\n\n            if (comments.length > 0 && this.delegate) {\n              for (var i = 0; i < comments.length; ++i) {\n                var e = comments[i];\n                var node = void 0;\n                node = {\n                  type: e.multiLine ? 'BlockComment' : 'LineComment',\n                  value: this.scanner.source.slice(e.slice[0], e.slice[1])\n                };\n\n                if (this.config.range) {\n                  node.range = e.range;\n                }\n\n                if (this.config.loc) {\n                  node.loc = e.loc;\n                }\n\n                var metadata = {\n                  start: {\n                    line: e.loc.start.line,\n                    column: e.loc.start.column,\n                    offset: e.range[0]\n                  },\n                  end: {\n                    line: e.loc.end.line,\n                    column: e.loc.end.column,\n                    offset: e.range[1]\n                  }\n                };\n                this.delegate(node, metadata);\n              }\n            }\n          }\n        }; // From internal representation to an external structure\n\n\n        Parser.prototype.getTokenRaw = function (token) {\n          return this.scanner.source.slice(token.start, token.end);\n        };\n\n        Parser.prototype.convertToken = function (token) {\n          var t = {\n            type: token_1.TokenName[token.type],\n            value: this.getTokenRaw(token)\n          };\n\n          if (this.config.range) {\n            t.range = [token.start, token.end];\n          }\n\n          if (this.config.loc) {\n            t.loc = {\n              start: {\n                line: this.startMarker.line,\n                column: this.startMarker.column\n              },\n              end: {\n                line: this.scanner.lineNumber,\n                column: this.scanner.index - this.scanner.lineStart\n              }\n            };\n          }\n\n          if (token.type === 9\n          /* RegularExpression */\n          ) {\n            var pattern = token.pattern;\n            var flags = token.flags;\n            t.regex = {\n              pattern: pattern,\n              flags: flags\n            };\n          }\n\n          return t;\n        };\n\n        Parser.prototype.nextToken = function () {\n          var token = this.lookahead;\n          this.lastMarker.index = this.scanner.index;\n          this.lastMarker.line = this.scanner.lineNumber;\n          this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n          this.collectComments();\n\n          if (this.scanner.index !== this.startMarker.index) {\n            this.startMarker.index = this.scanner.index;\n            this.startMarker.line = this.scanner.lineNumber;\n            this.startMarker.column = this.scanner.index - this.scanner.lineStart;\n          }\n\n          var next = this.scanner.lex();\n          this.hasLineTerminator = token.lineNumber !== next.lineNumber;\n\n          if (next && this.context.strict && next.type === 3\n          /* Identifier */\n          ) {\n            if (this.scanner.isStrictModeReservedWord(next.value)) {\n              next.type = 4\n              /* Keyword */\n              ;\n            }\n          }\n\n          this.lookahead = next;\n\n          if (this.config.tokens && next.type !== 2\n          /* EOF */\n          ) {\n            this.tokens.push(this.convertToken(next));\n          }\n\n          return token;\n        };\n\n        Parser.prototype.nextRegexToken = function () {\n          this.collectComments();\n          var token = this.scanner.scanRegExp();\n\n          if (this.config.tokens) {\n            // Pop the previous token, '/' or '/='\n            // This is added from the lookahead token.\n            this.tokens.pop();\n            this.tokens.push(this.convertToken(token));\n          } // Prime the next lookahead.\n\n\n          this.lookahead = token;\n          this.nextToken();\n          return token;\n        };\n\n        Parser.prototype.createNode = function () {\n          return {\n            index: this.startMarker.index,\n            line: this.startMarker.line,\n            column: this.startMarker.column\n          };\n        };\n\n        Parser.prototype.startNode = function (token, lastLineStart) {\n          if (lastLineStart === void 0) {\n            lastLineStart = 0;\n          }\n\n          var column = token.start - token.lineStart;\n          var line = token.lineNumber;\n\n          if (column < 0) {\n            column += lastLineStart;\n            line--;\n          }\n\n          return {\n            index: token.start,\n            line: line,\n            column: column\n          };\n        };\n\n        Parser.prototype.finalize = function (marker, node) {\n          if (this.config.range) {\n            node.range = [marker.index, this.lastMarker.index];\n          }\n\n          if (this.config.loc) {\n            node.loc = {\n              start: {\n                line: marker.line,\n                column: marker.column\n              },\n              end: {\n                line: this.lastMarker.line,\n                column: this.lastMarker.column\n              }\n            };\n\n            if (this.config.source) {\n              node.loc.source = this.config.source;\n            }\n          }\n\n          if (this.delegate) {\n            var metadata = {\n              start: {\n                line: marker.line,\n                column: marker.column,\n                offset: marker.index\n              },\n              end: {\n                line: this.lastMarker.line,\n                column: this.lastMarker.column,\n                offset: this.lastMarker.index\n              }\n            };\n            this.delegate(node, metadata);\n          }\n\n          return node;\n        }; // Expect the next token to match the specified punctuator.\n        // If not, an exception will be thrown.\n\n\n        Parser.prototype.expect = function (value) {\n          var token = this.nextToken();\n\n          if (token.type !== 7\n          /* Punctuator */\n          || token.value !== value) {\n            this.throwUnexpectedToken(token);\n          }\n        }; // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().\n\n\n        Parser.prototype.expectCommaSeparator = function () {\n          if (this.config.tolerant) {\n            var token = this.lookahead;\n\n            if (token.type === 7\n            /* Punctuator */\n            && token.value === ',') {\n              this.nextToken();\n            } else if (token.type === 7\n            /* Punctuator */\n            && token.value === ';') {\n              this.nextToken();\n              this.tolerateUnexpectedToken(token);\n            } else {\n              this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);\n            }\n          } else {\n            this.expect(',');\n          }\n        }; // Expect the next token to match the specified keyword.\n        // If not, an exception will be thrown.\n\n\n        Parser.prototype.expectKeyword = function (keyword) {\n          var token = this.nextToken();\n\n          if (token.type !== 4\n          /* Keyword */\n          || token.value !== keyword) {\n            this.throwUnexpectedToken(token);\n          }\n        }; // Return true if the next token matches the specified punctuator.\n\n\n        Parser.prototype.match = function (value) {\n          return this.lookahead.type === 7\n          /* Punctuator */\n          && this.lookahead.value === value;\n        }; // Return true if the next token matches the specified keyword\n\n\n        Parser.prototype.matchKeyword = function (keyword) {\n          return this.lookahead.type === 4\n          /* Keyword */\n          && this.lookahead.value === keyword;\n        }; // Return true if the next token matches the specified contextual keyword\n        // (where an identifier is sometimes a keyword depending on the context)\n\n\n        Parser.prototype.matchContextualKeyword = function (keyword) {\n          return this.lookahead.type === 3\n          /* Identifier */\n          && this.lookahead.value === keyword;\n        }; // Return true if the next token is an assignment operator\n\n\n        Parser.prototype.matchAssign = function () {\n          if (this.lookahead.type !== 7\n          /* Punctuator */\n          ) {\n            return false;\n          }\n\n          var op = this.lookahead.value;\n          return op === '=' || op === '*=' || op === '**=' || op === '/=' || op === '%=' || op === '+=' || op === '-=' || op === '<<=' || op === '>>=' || op === '>>>=' || op === '&=' || op === '^=' || op === '|=';\n        }; // Cover grammar support.\n        //\n        // When an assignment expression position starts with an left parenthesis, the determination of the type\n        // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)\n        // or the first comma. This situation also defers the determination of all the expressions nested in the pair.\n        //\n        // There are three productions that can be parsed in a parentheses pair that needs to be determined\n        // after the outermost pair is closed. They are:\n        //\n        //   1. AssignmentExpression\n        //   2. BindingElements\n        //   3. AssignmentTargets\n        //\n        // In order to avoid exponential backtracking, we use two flags to denote if the production can be\n        // binding element or assignment target.\n        //\n        // The three productions have the relationship:\n        //\n        //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression\n        //\n        // with a single exception that CoverInitializedName when used directly in an Expression, generates\n        // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the\n        // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.\n        //\n        // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not\n        // effect the current flags. This means the production the parser parses is only used as an expression. Therefore\n        // the CoverInitializedName check is conducted.\n        //\n        // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates\n        // the flags outside of the parser. This means the production the parser parses is used as a part of a potential\n        // pattern. The CoverInitializedName check is deferred.\n\n\n        Parser.prototype.isolateCoverGrammar = function (parseFunction) {\n          var previousIsBindingElement = this.context.isBindingElement;\n          var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n          var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n          this.context.isBindingElement = true;\n          this.context.isAssignmentTarget = true;\n          this.context.firstCoverInitializedNameError = null;\n          var result = parseFunction.call(this);\n\n          if (this.context.firstCoverInitializedNameError !== null) {\n            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);\n          }\n\n          this.context.isBindingElement = previousIsBindingElement;\n          this.context.isAssignmentTarget = previousIsAssignmentTarget;\n          this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;\n          return result;\n        };\n\n        Parser.prototype.inheritCoverGrammar = function (parseFunction) {\n          var previousIsBindingElement = this.context.isBindingElement;\n          var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n          var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n          this.context.isBindingElement = true;\n          this.context.isAssignmentTarget = true;\n          this.context.firstCoverInitializedNameError = null;\n          var result = parseFunction.call(this);\n          this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;\n          this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;\n          this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;\n          return result;\n        };\n\n        Parser.prototype.consumeSemicolon = function () {\n          if (this.match(';')) {\n            this.nextToken();\n          } else if (!this.hasLineTerminator) {\n            if (this.lookahead.type !== 2\n            /* EOF */\n            && !this.match('}')) {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n\n            this.lastMarker.index = this.startMarker.index;\n            this.lastMarker.line = this.startMarker.line;\n            this.lastMarker.column = this.startMarker.column;\n          }\n        }; // https://tc39.github.io/ecma262/#sec-primary-expression\n\n\n        Parser.prototype.parsePrimaryExpression = function () {\n          var node = this.createNode();\n          var expr;\n          var token, raw;\n\n          switch (this.lookahead.type) {\n            case 3\n            /* Identifier */\n            :\n              if ((this.context.isModule || this.context.await) && this.lookahead.value === 'await') {\n                this.tolerateUnexpectedToken(this.lookahead);\n              }\n\n              expr = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node, new Node.Identifier(this.nextToken().value));\n              break;\n\n            case 6\n            /* NumericLiteral */\n            :\n            case 8\n            /* StringLiteral */\n            :\n              if (this.context.strict && this.lookahead.octal) {\n                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);\n              }\n\n              this.context.isAssignmentTarget = false;\n              this.context.isBindingElement = false;\n              token = this.nextToken();\n              raw = this.getTokenRaw(token);\n              expr = this.finalize(node, new Node.Literal(token.value, raw));\n              break;\n\n            case 1\n            /* BooleanLiteral */\n            :\n              this.context.isAssignmentTarget = false;\n              this.context.isBindingElement = false;\n              token = this.nextToken();\n              raw = this.getTokenRaw(token);\n              expr = this.finalize(node, new Node.Literal(token.value === 'true', raw));\n              break;\n\n            case 5\n            /* NullLiteral */\n            :\n              this.context.isAssignmentTarget = false;\n              this.context.isBindingElement = false;\n              token = this.nextToken();\n              raw = this.getTokenRaw(token);\n              expr = this.finalize(node, new Node.Literal(null, raw));\n              break;\n\n            case 10\n            /* Template */\n            :\n              expr = this.parseTemplateLiteral();\n              break;\n\n            case 7\n            /* Punctuator */\n            :\n              switch (this.lookahead.value) {\n                case '(':\n                  this.context.isBindingElement = false;\n                  expr = this.inheritCoverGrammar(this.parseGroupExpression);\n                  break;\n\n                case '[':\n                  expr = this.inheritCoverGrammar(this.parseArrayInitializer);\n                  break;\n\n                case '{':\n                  expr = this.inheritCoverGrammar(this.parseObjectInitializer);\n                  break;\n\n                case '/':\n                case '/=':\n                  this.context.isAssignmentTarget = false;\n                  this.context.isBindingElement = false;\n                  this.scanner.index = this.startMarker.index;\n                  token = this.nextRegexToken();\n                  raw = this.getTokenRaw(token);\n                  expr = this.finalize(node, new Node.RegexLiteral(token.regex, raw, token.pattern, token.flags));\n                  break;\n\n                default:\n                  expr = this.throwUnexpectedToken(this.nextToken());\n              }\n\n              break;\n\n            case 4\n            /* Keyword */\n            :\n              if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {\n                expr = this.parseIdentifierName();\n              } else if (!this.context.strict && this.matchKeyword('let')) {\n                expr = this.finalize(node, new Node.Identifier(this.nextToken().value));\n              } else {\n                this.context.isAssignmentTarget = false;\n                this.context.isBindingElement = false;\n\n                if (this.matchKeyword('function')) {\n                  expr = this.parseFunctionExpression();\n                } else if (this.matchKeyword('this')) {\n                  this.nextToken();\n                  expr = this.finalize(node, new Node.ThisExpression());\n                } else if (this.matchKeyword('class')) {\n                  expr = this.parseClassExpression();\n                } else {\n                  expr = this.throwUnexpectedToken(this.nextToken());\n                }\n              }\n\n              break;\n\n            default:\n              expr = this.throwUnexpectedToken(this.nextToken());\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-array-initializer\n\n\n        Parser.prototype.parseSpreadElement = function () {\n          var node = this.createNode();\n          this.expect('...');\n          var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);\n          return this.finalize(node, new Node.SpreadElement(arg));\n        };\n\n        Parser.prototype.parseArrayInitializer = function () {\n          var node = this.createNode();\n          var elements = [];\n          this.expect('[');\n\n          while (!this.match(']')) {\n            if (this.match(',')) {\n              this.nextToken();\n              elements.push(null);\n            } else if (this.match('...')) {\n              var element = this.parseSpreadElement();\n\n              if (!this.match(']')) {\n                this.context.isAssignmentTarget = false;\n                this.context.isBindingElement = false;\n                this.expect(',');\n              }\n\n              elements.push(element);\n            } else {\n              elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n\n              if (!this.match(']')) {\n                this.expect(',');\n              }\n            }\n          }\n\n          this.expect(']');\n          return this.finalize(node, new Node.ArrayExpression(elements));\n        }; // https://tc39.github.io/ecma262/#sec-object-initializer\n\n\n        Parser.prototype.parsePropertyMethod = function (params) {\n          this.context.isAssignmentTarget = false;\n          this.context.isBindingElement = false;\n          var previousStrict = this.context.strict;\n          var previousAllowStrictDirective = this.context.allowStrictDirective;\n          this.context.allowStrictDirective = params.simple;\n          var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);\n\n          if (this.context.strict && params.firstRestricted) {\n            this.tolerateUnexpectedToken(params.firstRestricted, params.message);\n          }\n\n          if (this.context.strict && params.stricted) {\n            this.tolerateUnexpectedToken(params.stricted, params.message);\n          }\n\n          this.context.strict = previousStrict;\n          this.context.allowStrictDirective = previousAllowStrictDirective;\n          return body;\n        };\n\n        Parser.prototype.parsePropertyMethodFunction = function () {\n          var isGenerator = false;\n          var node = this.createNode();\n          var previousAllowYield = this.context.allowYield;\n          this.context.allowYield = true;\n          var params = this.parseFormalParameters();\n          var method = this.parsePropertyMethod(params);\n          this.context.allowYield = previousAllowYield;\n          return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n        };\n\n        Parser.prototype.parsePropertyMethodAsyncFunction = function () {\n          var node = this.createNode();\n          var previousAllowYield = this.context.allowYield;\n          var previousAwait = this.context.await;\n          this.context.allowYield = false;\n          this.context.await = true;\n          var params = this.parseFormalParameters();\n          var method = this.parsePropertyMethod(params);\n          this.context.allowYield = previousAllowYield;\n          this.context.await = previousAwait;\n          return this.finalize(node, new Node.AsyncFunctionExpression(null, params.params, method));\n        };\n\n        Parser.prototype.parseObjectPropertyKey = function () {\n          var node = this.createNode();\n          var token = this.nextToken();\n          var key;\n\n          switch (token.type) {\n            case 8\n            /* StringLiteral */\n            :\n            case 6\n            /* NumericLiteral */\n            :\n              if (this.context.strict && token.octal) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);\n              }\n\n              var raw = this.getTokenRaw(token);\n              key = this.finalize(node, new Node.Literal(token.value, raw));\n              break;\n\n            case 3\n            /* Identifier */\n            :\n            case 1\n            /* BooleanLiteral */\n            :\n            case 5\n            /* NullLiteral */\n            :\n            case 4\n            /* Keyword */\n            :\n              key = this.finalize(node, new Node.Identifier(token.value));\n              break;\n\n            case 7\n            /* Punctuator */\n            :\n              if (token.value === '[') {\n                key = this.isolateCoverGrammar(this.parseAssignmentExpression);\n                this.expect(']');\n              } else {\n                key = this.throwUnexpectedToken(token);\n              }\n\n              break;\n\n            default:\n              key = this.throwUnexpectedToken(token);\n          }\n\n          return key;\n        };\n\n        Parser.prototype.isPropertyKey = function (key, value) {\n          return key.type === syntax_1.Syntax.Identifier && key.name === value || key.type === syntax_1.Syntax.Literal && key.value === value;\n        };\n\n        Parser.prototype.parseObjectProperty = function (hasProto) {\n          var node = this.createNode();\n          var token = this.lookahead;\n          var kind;\n          var key = null;\n          var value = null;\n          var computed = false;\n          var method = false;\n          var shorthand = false;\n          var isAsync = false;\n\n          if (token.type === 3\n          /* Identifier */\n          ) {\n            var id = token.value;\n            this.nextToken();\n            computed = this.match('[');\n            isAsync = !this.hasLineTerminator && id === 'async' && !this.match(':') && !this.match('(') && !this.match('*') && !this.match(',');\n            key = isAsync ? this.parseObjectPropertyKey() : this.finalize(node, new Node.Identifier(id));\n          } else if (this.match('*')) {\n            this.nextToken();\n          } else {\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n          }\n\n          var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n\n          if (token.type === 3\n          /* Identifier */\n          && !isAsync && token.value === 'get' && lookaheadPropertyKey) {\n            kind = 'get';\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            this.context.allowYield = false;\n            value = this.parseGetterMethod();\n          } else if (token.type === 3\n          /* Identifier */\n          && !isAsync && token.value === 'set' && lookaheadPropertyKey) {\n            kind = 'set';\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            value = this.parseSetterMethod();\n          } else if (token.type === 7\n          /* Punctuator */\n          && token.value === '*' && lookaheadPropertyKey) {\n            kind = 'init';\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            value = this.parseGeneratorMethod();\n            method = true;\n          } else {\n            if (!key) {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n\n            kind = 'init';\n\n            if (this.match(':') && !isAsync) {\n              if (!computed && this.isPropertyKey(key, '__proto__')) {\n                if (hasProto.value) {\n                  this.tolerateError(messages_1.Messages.DuplicateProtoProperty);\n                }\n\n                hasProto.value = true;\n              }\n\n              this.nextToken();\n              value = this.inheritCoverGrammar(this.parseAssignmentExpression);\n            } else if (this.match('(')) {\n              value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();\n              method = true;\n            } else if (token.type === 3\n            /* Identifier */\n            ) {\n              var id = this.finalize(node, new Node.Identifier(token.value));\n\n              if (this.match('=')) {\n                this.context.firstCoverInitializedNameError = this.lookahead;\n                this.nextToken();\n                shorthand = true;\n                var init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n                value = this.finalize(node, new Node.AssignmentPattern(id, init));\n              } else {\n                shorthand = true;\n                value = id;\n              }\n            } else {\n              this.throwUnexpectedToken(this.nextToken());\n            }\n          }\n\n          return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));\n        };\n\n        Parser.prototype.parseObjectInitializer = function () {\n          var node = this.createNode();\n          this.expect('{');\n          var properties = [];\n          var hasProto = {\n            value: false\n          };\n\n          while (!this.match('}')) {\n            properties.push(this.parseObjectProperty(hasProto));\n\n            if (!this.match('}')) {\n              this.expectCommaSeparator();\n            }\n          }\n\n          this.expect('}');\n          return this.finalize(node, new Node.ObjectExpression(properties));\n        }; // https://tc39.github.io/ecma262/#sec-template-literals\n\n\n        Parser.prototype.parseTemplateHead = function () {\n          assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');\n          var node = this.createNode();\n          var token = this.nextToken();\n          var raw = token.value;\n          var cooked = token.cooked;\n          return this.finalize(node, new Node.TemplateElement({\n            raw: raw,\n            cooked: cooked\n          }, token.tail));\n        };\n\n        Parser.prototype.parseTemplateElement = function () {\n          if (this.lookahead.type !== 10\n          /* Template */\n          ) {\n            this.throwUnexpectedToken();\n          }\n\n          var node = this.createNode();\n          var token = this.nextToken();\n          var raw = token.value;\n          var cooked = token.cooked;\n          return this.finalize(node, new Node.TemplateElement({\n            raw: raw,\n            cooked: cooked\n          }, token.tail));\n        };\n\n        Parser.prototype.parseTemplateLiteral = function () {\n          var node = this.createNode();\n          var expressions = [];\n          var quasis = [];\n          var quasi = this.parseTemplateHead();\n          quasis.push(quasi);\n\n          while (!quasi.tail) {\n            expressions.push(this.parseExpression());\n            quasi = this.parseTemplateElement();\n            quasis.push(quasi);\n          }\n\n          return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));\n        }; // https://tc39.github.io/ecma262/#sec-grouping-operator\n\n\n        Parser.prototype.reinterpretExpressionAsPattern = function (expr) {\n          switch (expr.type) {\n            case syntax_1.Syntax.Identifier:\n            case syntax_1.Syntax.MemberExpression:\n            case syntax_1.Syntax.RestElement:\n            case syntax_1.Syntax.AssignmentPattern:\n              break;\n\n            case syntax_1.Syntax.SpreadElement:\n              expr.type = syntax_1.Syntax.RestElement;\n              this.reinterpretExpressionAsPattern(expr.argument);\n              break;\n\n            case syntax_1.Syntax.ArrayExpression:\n              expr.type = syntax_1.Syntax.ArrayPattern;\n\n              for (var i = 0; i < expr.elements.length; i++) {\n                if (expr.elements[i] !== null) {\n                  this.reinterpretExpressionAsPattern(expr.elements[i]);\n                }\n              }\n\n              break;\n\n            case syntax_1.Syntax.ObjectExpression:\n              expr.type = syntax_1.Syntax.ObjectPattern;\n\n              for (var i = 0; i < expr.properties.length; i++) {\n                this.reinterpretExpressionAsPattern(expr.properties[i].value);\n              }\n\n              break;\n\n            case syntax_1.Syntax.AssignmentExpression:\n              expr.type = syntax_1.Syntax.AssignmentPattern;\n              delete expr.operator;\n              this.reinterpretExpressionAsPattern(expr.left);\n              break;\n\n            default:\n              // Allow other node type for tolerant parsing.\n              break;\n          }\n        };\n\n        Parser.prototype.parseGroupExpression = function () {\n          var expr;\n          this.expect('(');\n\n          if (this.match(')')) {\n            this.nextToken();\n\n            if (!this.match('=>')) {\n              this.expect('=>');\n            }\n\n            expr = {\n              type: ArrowParameterPlaceHolder,\n              params: [],\n              async: false\n            };\n          } else {\n            var startToken = this.lookahead;\n            var params = [];\n\n            if (this.match('...')) {\n              expr = this.parseRestElement(params);\n              this.expect(')');\n\n              if (!this.match('=>')) {\n                this.expect('=>');\n              }\n\n              expr = {\n                type: ArrowParameterPlaceHolder,\n                params: [expr],\n                async: false\n              };\n            } else {\n              var arrow = false;\n              this.context.isBindingElement = true;\n              expr = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\n              if (this.match(',')) {\n                var expressions = [];\n                this.context.isAssignmentTarget = false;\n                expressions.push(expr);\n\n                while (this.lookahead.type !== 2\n                /* EOF */\n                ) {\n                  if (!this.match(',')) {\n                    break;\n                  }\n\n                  this.nextToken();\n\n                  if (this.match(')')) {\n                    this.nextToken();\n\n                    for (var i = 0; i < expressions.length; i++) {\n                      this.reinterpretExpressionAsPattern(expressions[i]);\n                    }\n\n                    arrow = true;\n                    expr = {\n                      type: ArrowParameterPlaceHolder,\n                      params: expressions,\n                      async: false\n                    };\n                  } else if (this.match('...')) {\n                    if (!this.context.isBindingElement) {\n                      this.throwUnexpectedToken(this.lookahead);\n                    }\n\n                    expressions.push(this.parseRestElement(params));\n                    this.expect(')');\n\n                    if (!this.match('=>')) {\n                      this.expect('=>');\n                    }\n\n                    this.context.isBindingElement = false;\n\n                    for (var i = 0; i < expressions.length; i++) {\n                      this.reinterpretExpressionAsPattern(expressions[i]);\n                    }\n\n                    arrow = true;\n                    expr = {\n                      type: ArrowParameterPlaceHolder,\n                      params: expressions,\n                      async: false\n                    };\n                  } else {\n                    expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n                  }\n\n                  if (arrow) {\n                    break;\n                  }\n                }\n\n                if (!arrow) {\n                  expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n                }\n              }\n\n              if (!arrow) {\n                this.expect(')');\n\n                if (this.match('=>')) {\n                  if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {\n                    arrow = true;\n                    expr = {\n                      type: ArrowParameterPlaceHolder,\n                      params: [expr],\n                      async: false\n                    };\n                  }\n\n                  if (!arrow) {\n                    if (!this.context.isBindingElement) {\n                      this.throwUnexpectedToken(this.lookahead);\n                    }\n\n                    if (expr.type === syntax_1.Syntax.SequenceExpression) {\n                      for (var i = 0; i < expr.expressions.length; i++) {\n                        this.reinterpretExpressionAsPattern(expr.expressions[i]);\n                      }\n                    } else {\n                      this.reinterpretExpressionAsPattern(expr);\n                    }\n\n                    var parameters = expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr];\n                    expr = {\n                      type: ArrowParameterPlaceHolder,\n                      params: parameters,\n                      async: false\n                    };\n                  }\n                }\n\n                this.context.isBindingElement = false;\n              }\n            }\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions\n\n\n        Parser.prototype.parseArguments = function () {\n          this.expect('(');\n          var args = [];\n\n          if (!this.match(')')) {\n            while (true) {\n              var expr = this.match('...') ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAssignmentExpression);\n              args.push(expr);\n\n              if (this.match(')')) {\n                break;\n              }\n\n              this.expectCommaSeparator();\n\n              if (this.match(')')) {\n                break;\n              }\n            }\n          }\n\n          this.expect(')');\n          return args;\n        };\n\n        Parser.prototype.isIdentifierName = function (token) {\n          return token.type === 3\n          /* Identifier */\n          || token.type === 4\n          /* Keyword */\n          || token.type === 1\n          /* BooleanLiteral */\n          || token.type === 5\n          /* NullLiteral */\n          ;\n        };\n\n        Parser.prototype.parseIdentifierName = function () {\n          var node = this.createNode();\n          var token = this.nextToken();\n\n          if (!this.isIdentifierName(token)) {\n            this.throwUnexpectedToken(token);\n          }\n\n          return this.finalize(node, new Node.Identifier(token.value));\n        };\n\n        Parser.prototype.parseNewExpression = function () {\n          var node = this.createNode();\n          var id = this.parseIdentifierName();\n          assert_1.assert(id.name === 'new', 'New expression must start with `new`');\n          var expr;\n\n          if (this.match('.')) {\n            this.nextToken();\n\n            if (this.lookahead.type === 3\n            /* Identifier */\n            && this.context.inFunctionBody && this.lookahead.value === 'target') {\n              var property = this.parseIdentifierName();\n              expr = new Node.MetaProperty(id, property);\n            } else {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n          } else {\n            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);\n            var args = this.match('(') ? this.parseArguments() : [];\n            expr = new Node.NewExpression(callee, args);\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n          }\n\n          return this.finalize(node, expr);\n        };\n\n        Parser.prototype.parseAsyncArgument = function () {\n          var arg = this.parseAssignmentExpression();\n          this.context.firstCoverInitializedNameError = null;\n          return arg;\n        };\n\n        Parser.prototype.parseAsyncArguments = function () {\n          this.expect('(');\n          var args = [];\n\n          if (!this.match(')')) {\n            while (true) {\n              var expr = this.match('...') ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAsyncArgument);\n              args.push(expr);\n\n              if (this.match(')')) {\n                break;\n              }\n\n              this.expectCommaSeparator();\n\n              if (this.match(')')) {\n                break;\n              }\n            }\n          }\n\n          this.expect(')');\n          return args;\n        };\n\n        Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {\n          var startToken = this.lookahead;\n          var maybeAsync = this.matchContextualKeyword('async');\n          var previousAllowIn = this.context.allowIn;\n          this.context.allowIn = true;\n          var expr;\n\n          if (this.matchKeyword('super') && this.context.inFunctionBody) {\n            expr = this.createNode();\n            this.nextToken();\n            expr = this.finalize(expr, new Node.Super());\n\n            if (!this.match('(') && !this.match('.') && !this.match('[')) {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n          } else {\n            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n          }\n\n          while (true) {\n            if (this.match('.')) {\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = true;\n              this.expect('.');\n              var property = this.parseIdentifierName();\n              expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));\n            } else if (this.match('(')) {\n              var asyncArrow = maybeAsync && startToken.lineNumber === this.lookahead.lineNumber;\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = false;\n              var args = asyncArrow ? this.parseAsyncArguments() : this.parseArguments();\n              expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));\n\n              if (asyncArrow && this.match('=>')) {\n                for (var i = 0; i < args.length; ++i) {\n                  this.reinterpretExpressionAsPattern(args[i]);\n                }\n\n                expr = {\n                  type: ArrowParameterPlaceHolder,\n                  params: args,\n                  async: true\n                };\n              }\n            } else if (this.match('[')) {\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = true;\n              this.expect('[');\n              var property = this.isolateCoverGrammar(this.parseExpression);\n              this.expect(']');\n              expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));\n            } else if (this.lookahead.type === 10\n            /* Template */\n            && this.lookahead.head) {\n              var quasi = this.parseTemplateLiteral();\n              expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));\n            } else {\n              break;\n            }\n          }\n\n          this.context.allowIn = previousAllowIn;\n          return expr;\n        };\n\n        Parser.prototype.parseSuper = function () {\n          var node = this.createNode();\n          this.expectKeyword('super');\n\n          if (!this.match('[') && !this.match('.')) {\n            this.throwUnexpectedToken(this.lookahead);\n          }\n\n          return this.finalize(node, new Node.Super());\n        };\n\n        Parser.prototype.parseLeftHandSideExpression = function () {\n          assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');\n          var node = this.startNode(this.lookahead);\n          var expr = this.matchKeyword('super') && this.context.inFunctionBody ? this.parseSuper() : this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n\n          while (true) {\n            if (this.match('[')) {\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = true;\n              this.expect('[');\n              var property = this.isolateCoverGrammar(this.parseExpression);\n              this.expect(']');\n              expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));\n            } else if (this.match('.')) {\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = true;\n              this.expect('.');\n              var property = this.parseIdentifierName();\n              expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));\n            } else if (this.lookahead.type === 10\n            /* Template */\n            && this.lookahead.head) {\n              var quasi = this.parseTemplateLiteral();\n              expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));\n            } else {\n              break;\n            }\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-update-expressions\n\n\n        Parser.prototype.parseUpdateExpression = function () {\n          var expr;\n          var startToken = this.lookahead;\n\n          if (this.match('++') || this.match('--')) {\n            var node = this.startNode(startToken);\n            var token = this.nextToken();\n            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\n            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n              this.tolerateError(messages_1.Messages.StrictLHSPrefix);\n            }\n\n            if (!this.context.isAssignmentTarget) {\n              this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n            }\n\n            var prefix = true;\n            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n          } else {\n            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\n            if (!this.hasLineTerminator && this.lookahead.type === 7\n            /* Punctuator */\n            ) {\n              if (this.match('++') || this.match('--')) {\n                if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n                  this.tolerateError(messages_1.Messages.StrictLHSPostfix);\n                }\n\n                if (!this.context.isAssignmentTarget) {\n                  this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n                }\n\n                this.context.isAssignmentTarget = false;\n                this.context.isBindingElement = false;\n                var operator = this.nextToken().value;\n                var prefix = false;\n                expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));\n              }\n            }\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-unary-operators\n\n\n        Parser.prototype.parseAwaitExpression = function () {\n          var node = this.createNode();\n          this.nextToken();\n          var argument = this.parseUnaryExpression();\n          return this.finalize(node, new Node.AwaitExpression(argument));\n        };\n\n        Parser.prototype.parseUnaryExpression = function () {\n          var expr;\n\n          if (this.match('+') || this.match('-') || this.match('~') || this.match('!') || this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {\n            var node = this.startNode(this.lookahead);\n            var token = this.nextToken();\n            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));\n\n            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {\n              this.tolerateError(messages_1.Messages.StrictDelete);\n            }\n\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n          } else if (this.context.await && this.matchContextualKeyword('await')) {\n            expr = this.parseAwaitExpression();\n          } else {\n            expr = this.parseUpdateExpression();\n          }\n\n          return expr;\n        };\n\n        Parser.prototype.parseExponentiationExpression = function () {\n          var startToken = this.lookahead;\n          var expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\n          if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {\n            this.nextToken();\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n            var left = expr;\n            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-exp-operator\n        // https://tc39.github.io/ecma262/#sec-multiplicative-operators\n        // https://tc39.github.io/ecma262/#sec-additive-operators\n        // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators\n        // https://tc39.github.io/ecma262/#sec-relational-operators\n        // https://tc39.github.io/ecma262/#sec-equality-operators\n        // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators\n        // https://tc39.github.io/ecma262/#sec-binary-logical-operators\n\n\n        Parser.prototype.binaryPrecedence = function (token) {\n          var op = token.value;\n          var precedence;\n\n          if (token.type === 7\n          /* Punctuator */\n          ) {\n            precedence = this.operatorPrecedence[op] || 0;\n          } else if (token.type === 4\n          /* Keyword */\n          ) {\n            precedence = op === 'instanceof' || this.context.allowIn && op === 'in' ? 7 : 0;\n          } else {\n            precedence = 0;\n          }\n\n          return precedence;\n        };\n\n        Parser.prototype.parseBinaryExpression = function () {\n          var startToken = this.lookahead;\n          var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);\n          var token = this.lookahead;\n          var prec = this.binaryPrecedence(token);\n\n          if (prec > 0) {\n            this.nextToken();\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n            var markers = [startToken, this.lookahead];\n            var left = expr;\n            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n            var stack = [left, token.value, right];\n            var precedences = [prec];\n\n            while (true) {\n              prec = this.binaryPrecedence(this.lookahead);\n\n              if (prec <= 0) {\n                break;\n              } // Reduce: make a binary expression from the three topmost entries.\n\n\n              while (stack.length > 2 && prec <= precedences[precedences.length - 1]) {\n                right = stack.pop();\n                var operator = stack.pop();\n                precedences.pop();\n                left = stack.pop();\n                markers.pop();\n                var node = this.startNode(markers[markers.length - 1]);\n                stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));\n              } // Shift.\n\n\n              stack.push(this.nextToken().value);\n              precedences.push(prec);\n              markers.push(this.lookahead);\n              stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));\n            } // Final reduce to clean-up the stack.\n\n\n            var i = stack.length - 1;\n            expr = stack[i];\n            var lastMarker = markers.pop();\n\n            while (i > 1) {\n              var marker = markers.pop();\n              var lastLineStart = lastMarker && lastMarker.lineStart;\n              var node = this.startNode(marker, lastLineStart);\n              var operator = stack[i - 1];\n              expr = this.finalize(node, new Node.BinaryExpression(operator, stack[i - 2], expr));\n              i -= 2;\n              lastMarker = marker;\n            }\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-conditional-operator\n\n\n        Parser.prototype.parseConditionalExpression = function () {\n          var startToken = this.lookahead;\n          var expr = this.inheritCoverGrammar(this.parseBinaryExpression);\n\n          if (this.match('?')) {\n            this.nextToken();\n            var previousAllowIn = this.context.allowIn;\n            this.context.allowIn = true;\n            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);\n            this.context.allowIn = previousAllowIn;\n            this.expect(':');\n            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);\n            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-assignment-operators\n\n\n        Parser.prototype.checkPatternParam = function (options, param) {\n          switch (param.type) {\n            case syntax_1.Syntax.Identifier:\n              this.validateParam(options, param, param.name);\n              break;\n\n            case syntax_1.Syntax.RestElement:\n              this.checkPatternParam(options, param.argument);\n              break;\n\n            case syntax_1.Syntax.AssignmentPattern:\n              this.checkPatternParam(options, param.left);\n              break;\n\n            case syntax_1.Syntax.ArrayPattern:\n              for (var i = 0; i < param.elements.length; i++) {\n                if (param.elements[i] !== null) {\n                  this.checkPatternParam(options, param.elements[i]);\n                }\n              }\n\n              break;\n\n            case syntax_1.Syntax.ObjectPattern:\n              for (var i = 0; i < param.properties.length; i++) {\n                this.checkPatternParam(options, param.properties[i].value);\n              }\n\n              break;\n\n            default:\n              break;\n          }\n\n          options.simple = options.simple && param instanceof Node.Identifier;\n        };\n\n        Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {\n          var params = [expr];\n          var options;\n          var asyncArrow = false;\n\n          switch (expr.type) {\n            case syntax_1.Syntax.Identifier:\n              break;\n\n            case ArrowParameterPlaceHolder:\n              params = expr.params;\n              asyncArrow = expr.async;\n              break;\n\n            default:\n              return null;\n          }\n\n          options = {\n            simple: true,\n            paramSet: {}\n          };\n\n          for (var i = 0; i < params.length; ++i) {\n            var param = params[i];\n\n            if (param.type === syntax_1.Syntax.AssignmentPattern) {\n              if (param.right.type === syntax_1.Syntax.YieldExpression) {\n                if (param.right.argument) {\n                  this.throwUnexpectedToken(this.lookahead);\n                }\n\n                param.right.type = syntax_1.Syntax.Identifier;\n                param.right.name = 'yield';\n                delete param.right.argument;\n                delete param.right.delegate;\n              }\n            } else if (asyncArrow && param.type === syntax_1.Syntax.Identifier && param.name === 'await') {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n\n            this.checkPatternParam(options, param);\n            params[i] = param;\n          }\n\n          if (this.context.strict || !this.context.allowYield) {\n            for (var i = 0; i < params.length; ++i) {\n              var param = params[i];\n\n              if (param.type === syntax_1.Syntax.YieldExpression) {\n                this.throwUnexpectedToken(this.lookahead);\n              }\n            }\n          }\n\n          if (options.message === messages_1.Messages.StrictParamDupe) {\n            var token = this.context.strict ? options.stricted : options.firstRestricted;\n            this.throwUnexpectedToken(token, options.message);\n          }\n\n          return {\n            simple: options.simple,\n            params: params,\n            stricted: options.stricted,\n            firstRestricted: options.firstRestricted,\n            message: options.message\n          };\n        };\n\n        Parser.prototype.parseAssignmentExpression = function () {\n          var expr;\n\n          if (!this.context.allowYield && this.matchKeyword('yield')) {\n            expr = this.parseYieldExpression();\n          } else {\n            var startToken = this.lookahead;\n            var token = startToken;\n            expr = this.parseConditionalExpression();\n\n            if (token.type === 3\n            /* Identifier */\n            && token.lineNumber === this.lookahead.lineNumber && token.value === 'async') {\n              if (this.lookahead.type === 3\n              /* Identifier */\n              || this.matchKeyword('yield')) {\n                var arg = this.parsePrimaryExpression();\n                this.reinterpretExpressionAsPattern(arg);\n                expr = {\n                  type: ArrowParameterPlaceHolder,\n                  params: [arg],\n                  async: true\n                };\n              }\n            }\n\n            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {\n              // https://tc39.github.io/ecma262/#sec-arrow-function-definitions\n              this.context.isAssignmentTarget = false;\n              this.context.isBindingElement = false;\n              var isAsync = expr.async;\n              var list = this.reinterpretAsCoverFormalsList(expr);\n\n              if (list) {\n                if (this.hasLineTerminator) {\n                  this.tolerateUnexpectedToken(this.lookahead);\n                }\n\n                this.context.firstCoverInitializedNameError = null;\n                var previousStrict = this.context.strict;\n                var previousAllowStrictDirective = this.context.allowStrictDirective;\n                this.context.allowStrictDirective = list.simple;\n                var previousAllowYield = this.context.allowYield;\n                var previousAwait = this.context.await;\n                this.context.allowYield = true;\n                this.context.await = isAsync;\n                var node = this.startNode(startToken);\n                this.expect('=>');\n                var body = void 0;\n\n                if (this.match('{')) {\n                  var previousAllowIn = this.context.allowIn;\n                  this.context.allowIn = true;\n                  body = this.parseFunctionSourceElements();\n                  this.context.allowIn = previousAllowIn;\n                } else {\n                  body = this.isolateCoverGrammar(this.parseAssignmentExpression);\n                }\n\n                var expression = body.type !== syntax_1.Syntax.BlockStatement;\n\n                if (this.context.strict && list.firstRestricted) {\n                  this.throwUnexpectedToken(list.firstRestricted, list.message);\n                }\n\n                if (this.context.strict && list.stricted) {\n                  this.tolerateUnexpectedToken(list.stricted, list.message);\n                }\n\n                expr = isAsync ? this.finalize(node, new Node.AsyncArrowFunctionExpression(list.params, body, expression)) : this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));\n                this.context.strict = previousStrict;\n                this.context.allowStrictDirective = previousAllowStrictDirective;\n                this.context.allowYield = previousAllowYield;\n                this.context.await = previousAwait;\n              }\n            } else {\n              if (this.matchAssign()) {\n                if (!this.context.isAssignmentTarget) {\n                  this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n                }\n\n                if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {\n                  var id = expr;\n\n                  if (this.scanner.isRestrictedWord(id.name)) {\n                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);\n                  }\n\n                  if (this.scanner.isStrictModeReservedWord(id.name)) {\n                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n                  }\n                }\n\n                if (!this.match('=')) {\n                  this.context.isAssignmentTarget = false;\n                  this.context.isBindingElement = false;\n                } else {\n                  this.reinterpretExpressionAsPattern(expr);\n                }\n\n                token = this.nextToken();\n                var operator = token.value;\n                var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n                expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(operator, expr, right));\n                this.context.firstCoverInitializedNameError = null;\n              }\n            }\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-comma-operator\n\n\n        Parser.prototype.parseExpression = function () {\n          var startToken = this.lookahead;\n          var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\n          if (this.match(',')) {\n            var expressions = [];\n            expressions.push(expr);\n\n            while (this.lookahead.type !== 2\n            /* EOF */\n            ) {\n              if (!this.match(',')) {\n                break;\n              }\n\n              this.nextToken();\n              expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n            }\n\n            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-block\n\n\n        Parser.prototype.parseStatementListItem = function () {\n          var statement;\n          this.context.isAssignmentTarget = true;\n          this.context.isBindingElement = true;\n\n          if (this.lookahead.type === 4\n          /* Keyword */\n          ) {\n            switch (this.lookahead.value) {\n              case 'export':\n                if (!this.context.isModule) {\n                  this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);\n                }\n\n                statement = this.parseExportDeclaration();\n                break;\n\n              case 'import':\n                if (!this.context.isModule) {\n                  this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);\n                }\n\n                statement = this.parseImportDeclaration();\n                break;\n\n              case 'const':\n                statement = this.parseLexicalDeclaration({\n                  inFor: false\n                });\n                break;\n\n              case 'function':\n                statement = this.parseFunctionDeclaration();\n                break;\n\n              case 'class':\n                statement = this.parseClassDeclaration();\n                break;\n\n              case 'let':\n                statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({\n                  inFor: false\n                }) : this.parseStatement();\n                break;\n\n              default:\n                statement = this.parseStatement();\n                break;\n            }\n          } else {\n            statement = this.parseStatement();\n          }\n\n          return statement;\n        };\n\n        Parser.prototype.parseBlock = function () {\n          var node = this.createNode();\n          this.expect('{');\n          var block = [];\n\n          while (true) {\n            if (this.match('}')) {\n              break;\n            }\n\n            block.push(this.parseStatementListItem());\n          }\n\n          this.expect('}');\n          return this.finalize(node, new Node.BlockStatement(block));\n        }; // https://tc39.github.io/ecma262/#sec-let-and-const-declarations\n\n\n        Parser.prototype.parseLexicalBinding = function (kind, options) {\n          var node = this.createNode();\n          var params = [];\n          var id = this.parsePattern(params, kind);\n\n          if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n            if (this.scanner.isRestrictedWord(id.name)) {\n              this.tolerateError(messages_1.Messages.StrictVarName);\n            }\n          }\n\n          var init = null;\n\n          if (kind === 'const') {\n            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {\n              if (this.match('=')) {\n                this.nextToken();\n                init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n              } else {\n                this.throwError(messages_1.Messages.DeclarationMissingInitializer, 'const');\n              }\n            }\n          } else if (!options.inFor && id.type !== syntax_1.Syntax.Identifier || this.match('=')) {\n            this.expect('=');\n            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n          }\n\n          return this.finalize(node, new Node.VariableDeclarator(id, init));\n        };\n\n        Parser.prototype.parseBindingList = function (kind, options) {\n          var list = [this.parseLexicalBinding(kind, options)];\n\n          while (this.match(',')) {\n            this.nextToken();\n            list.push(this.parseLexicalBinding(kind, options));\n          }\n\n          return list;\n        };\n\n        Parser.prototype.isLexicalDeclaration = function () {\n          var state = this.scanner.saveState();\n          this.scanner.scanComments();\n          var next = this.scanner.lex();\n          this.scanner.restoreState(state);\n          return next.type === 3\n          /* Identifier */\n          || next.type === 7\n          /* Punctuator */\n          && next.value === '[' || next.type === 7\n          /* Punctuator */\n          && next.value === '{' || next.type === 4\n          /* Keyword */\n          && next.value === 'let' || next.type === 4\n          /* Keyword */\n          && next.value === 'yield';\n        };\n\n        Parser.prototype.parseLexicalDeclaration = function (options) {\n          var node = this.createNode();\n          var kind = this.nextToken().value;\n          assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');\n          var declarations = this.parseBindingList(kind, options);\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.VariableDeclaration(declarations, kind));\n        }; // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns\n\n\n        Parser.prototype.parseBindingRestElement = function (params, kind) {\n          var node = this.createNode();\n          this.expect('...');\n          var arg = this.parsePattern(params, kind);\n          return this.finalize(node, new Node.RestElement(arg));\n        };\n\n        Parser.prototype.parseArrayPattern = function (params, kind) {\n          var node = this.createNode();\n          this.expect('[');\n          var elements = [];\n\n          while (!this.match(']')) {\n            if (this.match(',')) {\n              this.nextToken();\n              elements.push(null);\n            } else {\n              if (this.match('...')) {\n                elements.push(this.parseBindingRestElement(params, kind));\n                break;\n              } else {\n                elements.push(this.parsePatternWithDefault(params, kind));\n              }\n\n              if (!this.match(']')) {\n                this.expect(',');\n              }\n            }\n          }\n\n          this.expect(']');\n          return this.finalize(node, new Node.ArrayPattern(elements));\n        };\n\n        Parser.prototype.parsePropertyPattern = function (params, kind) {\n          var node = this.createNode();\n          var computed = false;\n          var shorthand = false;\n          var method = false;\n          var key;\n          var value;\n\n          if (this.lookahead.type === 3\n          /* Identifier */\n          ) {\n            var keyToken = this.lookahead;\n            key = this.parseVariableIdentifier();\n            var init = this.finalize(node, new Node.Identifier(keyToken.value));\n\n            if (this.match('=')) {\n              params.push(keyToken);\n              shorthand = true;\n              this.nextToken();\n              var expr = this.parseAssignmentExpression();\n              value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));\n            } else if (!this.match(':')) {\n              params.push(keyToken);\n              shorthand = true;\n              value = init;\n            } else {\n              this.expect(':');\n              value = this.parsePatternWithDefault(params, kind);\n            }\n          } else {\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            this.expect(':');\n            value = this.parsePatternWithDefault(params, kind);\n          }\n\n          return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));\n        };\n\n        Parser.prototype.parseObjectPattern = function (params, kind) {\n          var node = this.createNode();\n          var properties = [];\n          this.expect('{');\n\n          while (!this.match('}')) {\n            properties.push(this.parsePropertyPattern(params, kind));\n\n            if (!this.match('}')) {\n              this.expect(',');\n            }\n          }\n\n          this.expect('}');\n          return this.finalize(node, new Node.ObjectPattern(properties));\n        };\n\n        Parser.prototype.parsePattern = function (params, kind) {\n          var pattern;\n\n          if (this.match('[')) {\n            pattern = this.parseArrayPattern(params, kind);\n          } else if (this.match('{')) {\n            pattern = this.parseObjectPattern(params, kind);\n          } else {\n            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {\n              this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.LetInLexicalBinding);\n            }\n\n            params.push(this.lookahead);\n            pattern = this.parseVariableIdentifier(kind);\n          }\n\n          return pattern;\n        };\n\n        Parser.prototype.parsePatternWithDefault = function (params, kind) {\n          var startToken = this.lookahead;\n          var pattern = this.parsePattern(params, kind);\n\n          if (this.match('=')) {\n            this.nextToken();\n            var previousAllowYield = this.context.allowYield;\n            this.context.allowYield = true;\n            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n            this.context.allowYield = previousAllowYield;\n            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));\n          }\n\n          return pattern;\n        }; // https://tc39.github.io/ecma262/#sec-variable-statement\n\n\n        Parser.prototype.parseVariableIdentifier = function (kind) {\n          var node = this.createNode();\n          var token = this.nextToken();\n\n          if (token.type === 4\n          /* Keyword */\n          && token.value === 'yield') {\n            if (this.context.strict) {\n              this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n            } else if (!this.context.allowYield) {\n              this.throwUnexpectedToken(token);\n            }\n          } else if (token.type !== 3\n          /* Identifier */\n          ) {\n            if (this.context.strict && token.type === 4\n            /* Keyword */\n            && this.scanner.isStrictModeReservedWord(token.value)) {\n              this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n            } else {\n              if (this.context.strict || token.value !== 'let' || kind !== 'var') {\n                this.throwUnexpectedToken(token);\n              }\n            }\n          } else if ((this.context.isModule || this.context.await) && token.type === 3\n          /* Identifier */\n          && token.value === 'await') {\n            this.tolerateUnexpectedToken(token);\n          }\n\n          return this.finalize(node, new Node.Identifier(token.value));\n        };\n\n        Parser.prototype.parseVariableDeclaration = function (options) {\n          var node = this.createNode();\n          var params = [];\n          var id = this.parsePattern(params, 'var');\n\n          if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n            if (this.scanner.isRestrictedWord(id.name)) {\n              this.tolerateError(messages_1.Messages.StrictVarName);\n            }\n          }\n\n          var init = null;\n\n          if (this.match('=')) {\n            this.nextToken();\n            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n          } else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {\n            this.expect('=');\n          }\n\n          return this.finalize(node, new Node.VariableDeclarator(id, init));\n        };\n\n        Parser.prototype.parseVariableDeclarationList = function (options) {\n          var opt = {\n            inFor: options.inFor\n          };\n          var list = [];\n          list.push(this.parseVariableDeclaration(opt));\n\n          while (this.match(',')) {\n            this.nextToken();\n            list.push(this.parseVariableDeclaration(opt));\n          }\n\n          return list;\n        };\n\n        Parser.prototype.parseVariableStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('var');\n          var declarations = this.parseVariableDeclarationList({\n            inFor: false\n          });\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));\n        }; // https://tc39.github.io/ecma262/#sec-empty-statement\n\n\n        Parser.prototype.parseEmptyStatement = function () {\n          var node = this.createNode();\n          this.expect(';');\n          return this.finalize(node, new Node.EmptyStatement());\n        }; // https://tc39.github.io/ecma262/#sec-expression-statement\n\n\n        Parser.prototype.parseExpressionStatement = function () {\n          var node = this.createNode();\n          var expr = this.parseExpression();\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.ExpressionStatement(expr));\n        }; // https://tc39.github.io/ecma262/#sec-if-statement\n\n\n        Parser.prototype.parseIfClause = function () {\n          if (this.context.strict && this.matchKeyword('function')) {\n            this.tolerateError(messages_1.Messages.StrictFunction);\n          }\n\n          return this.parseStatement();\n        };\n\n        Parser.prototype.parseIfStatement = function () {\n          var node = this.createNode();\n          var consequent;\n          var alternate = null;\n          this.expectKeyword('if');\n          this.expect('(');\n          var test = this.parseExpression();\n\n          if (!this.match(')') && this.config.tolerant) {\n            this.tolerateUnexpectedToken(this.nextToken());\n            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());\n          } else {\n            this.expect(')');\n            consequent = this.parseIfClause();\n\n            if (this.matchKeyword('else')) {\n              this.nextToken();\n              alternate = this.parseIfClause();\n            }\n          }\n\n          return this.finalize(node, new Node.IfStatement(test, consequent, alternate));\n        }; // https://tc39.github.io/ecma262/#sec-do-while-statement\n\n\n        Parser.prototype.parseDoWhileStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('do');\n          var previousInIteration = this.context.inIteration;\n          this.context.inIteration = true;\n          var body = this.parseStatement();\n          this.context.inIteration = previousInIteration;\n          this.expectKeyword('while');\n          this.expect('(');\n          var test = this.parseExpression();\n\n          if (!this.match(')') && this.config.tolerant) {\n            this.tolerateUnexpectedToken(this.nextToken());\n          } else {\n            this.expect(')');\n\n            if (this.match(';')) {\n              this.nextToken();\n            }\n          }\n\n          return this.finalize(node, new Node.DoWhileStatement(body, test));\n        }; // https://tc39.github.io/ecma262/#sec-while-statement\n\n\n        Parser.prototype.parseWhileStatement = function () {\n          var node = this.createNode();\n          var body;\n          this.expectKeyword('while');\n          this.expect('(');\n          var test = this.parseExpression();\n\n          if (!this.match(')') && this.config.tolerant) {\n            this.tolerateUnexpectedToken(this.nextToken());\n            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n          } else {\n            this.expect(')');\n            var previousInIteration = this.context.inIteration;\n            this.context.inIteration = true;\n            body = this.parseStatement();\n            this.context.inIteration = previousInIteration;\n          }\n\n          return this.finalize(node, new Node.WhileStatement(test, body));\n        }; // https://tc39.github.io/ecma262/#sec-for-statement\n        // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements\n\n\n        Parser.prototype.parseForStatement = function () {\n          var init = null;\n          var test = null;\n          var update = null;\n          var forIn = true;\n          var left, right;\n          var node = this.createNode();\n          this.expectKeyword('for');\n          this.expect('(');\n\n          if (this.match(';')) {\n            this.nextToken();\n          } else {\n            if (this.matchKeyword('var')) {\n              init = this.createNode();\n              this.nextToken();\n              var previousAllowIn = this.context.allowIn;\n              this.context.allowIn = false;\n              var declarations = this.parseVariableDeclarationList({\n                inFor: true\n              });\n              this.context.allowIn = previousAllowIn;\n\n              if (declarations.length === 1 && this.matchKeyword('in')) {\n                var decl = declarations[0];\n\n                if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {\n                  this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');\n                }\n\n                init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n                this.nextToken();\n                left = init;\n                right = this.parseExpression();\n                init = null;\n              } else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n                init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n                this.nextToken();\n                left = init;\n                right = this.parseAssignmentExpression();\n                init = null;\n                forIn = false;\n              } else {\n                init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n                this.expect(';');\n              }\n            } else if (this.matchKeyword('const') || this.matchKeyword('let')) {\n              init = this.createNode();\n              var kind = this.nextToken().value;\n\n              if (!this.context.strict && this.lookahead.value === 'in') {\n                init = this.finalize(init, new Node.Identifier(kind));\n                this.nextToken();\n                left = init;\n                right = this.parseExpression();\n                init = null;\n              } else {\n                var previousAllowIn = this.context.allowIn;\n                this.context.allowIn = false;\n                var declarations = this.parseBindingList(kind, {\n                  inFor: true\n                });\n                this.context.allowIn = previousAllowIn;\n\n                if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {\n                  init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n                  this.nextToken();\n                  left = init;\n                  right = this.parseExpression();\n                  init = null;\n                } else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n                  init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n                  this.nextToken();\n                  left = init;\n                  right = this.parseAssignmentExpression();\n                  init = null;\n                  forIn = false;\n                } else {\n                  this.consumeSemicolon();\n                  init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n                }\n              }\n            } else {\n              var initStartToken = this.lookahead;\n              var previousAllowIn = this.context.allowIn;\n              this.context.allowIn = false;\n              init = this.inheritCoverGrammar(this.parseAssignmentExpression);\n              this.context.allowIn = previousAllowIn;\n\n              if (this.matchKeyword('in')) {\n                if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n                  this.tolerateError(messages_1.Messages.InvalidLHSInForIn);\n                }\n\n                this.nextToken();\n                this.reinterpretExpressionAsPattern(init);\n                left = init;\n                right = this.parseExpression();\n                init = null;\n              } else if (this.matchContextualKeyword('of')) {\n                if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n                  this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);\n                }\n\n                this.nextToken();\n                this.reinterpretExpressionAsPattern(init);\n                left = init;\n                right = this.parseAssignmentExpression();\n                init = null;\n                forIn = false;\n              } else {\n                if (this.match(',')) {\n                  var initSeq = [init];\n\n                  while (this.match(',')) {\n                    this.nextToken();\n                    initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n                  }\n\n                  init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));\n                }\n\n                this.expect(';');\n              }\n            }\n          }\n\n          if (typeof left === 'undefined') {\n            if (!this.match(';')) {\n              test = this.parseExpression();\n            }\n\n            this.expect(';');\n\n            if (!this.match(')')) {\n              update = this.parseExpression();\n            }\n          }\n\n          var body;\n\n          if (!this.match(')') && this.config.tolerant) {\n            this.tolerateUnexpectedToken(this.nextToken());\n            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n          } else {\n            this.expect(')');\n            var previousInIteration = this.context.inIteration;\n            this.context.inIteration = true;\n            body = this.isolateCoverGrammar(this.parseStatement);\n            this.context.inIteration = previousInIteration;\n          }\n\n          return typeof left === 'undefined' ? this.finalize(node, new Node.ForStatement(init, test, update, body)) : forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) : this.finalize(node, new Node.ForOfStatement(left, right, body));\n        }; // https://tc39.github.io/ecma262/#sec-continue-statement\n\n\n        Parser.prototype.parseContinueStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('continue');\n          var label = null;\n\n          if (this.lookahead.type === 3\n          /* Identifier */\n          && !this.hasLineTerminator) {\n            var id = this.parseVariableIdentifier();\n            label = id;\n            var key = '$' + id.name;\n\n            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n              this.throwError(messages_1.Messages.UnknownLabel, id.name);\n            }\n          }\n\n          this.consumeSemicolon();\n\n          if (label === null && !this.context.inIteration) {\n            this.throwError(messages_1.Messages.IllegalContinue);\n          }\n\n          return this.finalize(node, new Node.ContinueStatement(label));\n        }; // https://tc39.github.io/ecma262/#sec-break-statement\n\n\n        Parser.prototype.parseBreakStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('break');\n          var label = null;\n\n          if (this.lookahead.type === 3\n          /* Identifier */\n          && !this.hasLineTerminator) {\n            var id = this.parseVariableIdentifier();\n            var key = '$' + id.name;\n\n            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n              this.throwError(messages_1.Messages.UnknownLabel, id.name);\n            }\n\n            label = id;\n          }\n\n          this.consumeSemicolon();\n\n          if (label === null && !this.context.inIteration && !this.context.inSwitch) {\n            this.throwError(messages_1.Messages.IllegalBreak);\n          }\n\n          return this.finalize(node, new Node.BreakStatement(label));\n        }; // https://tc39.github.io/ecma262/#sec-return-statement\n\n\n        Parser.prototype.parseReturnStatement = function () {\n          if (!this.context.inFunctionBody) {\n            this.tolerateError(messages_1.Messages.IllegalReturn);\n          }\n\n          var node = this.createNode();\n          this.expectKeyword('return');\n          var hasArgument = !this.match(';') && !this.match('}') && !this.hasLineTerminator && this.lookahead.type !== 2\n          /* EOF */\n          || this.lookahead.type === 8\n          /* StringLiteral */\n          || this.lookahead.type === 10\n          /* Template */\n          ;\n          var argument = hasArgument ? this.parseExpression() : null;\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.ReturnStatement(argument));\n        }; // https://tc39.github.io/ecma262/#sec-with-statement\n\n\n        Parser.prototype.parseWithStatement = function () {\n          if (this.context.strict) {\n            this.tolerateError(messages_1.Messages.StrictModeWith);\n          }\n\n          var node = this.createNode();\n          var body;\n          this.expectKeyword('with');\n          this.expect('(');\n          var object = this.parseExpression();\n\n          if (!this.match(')') && this.config.tolerant) {\n            this.tolerateUnexpectedToken(this.nextToken());\n            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n          } else {\n            this.expect(')');\n            body = this.parseStatement();\n          }\n\n          return this.finalize(node, new Node.WithStatement(object, body));\n        }; // https://tc39.github.io/ecma262/#sec-switch-statement\n\n\n        Parser.prototype.parseSwitchCase = function () {\n          var node = this.createNode();\n          var test;\n\n          if (this.matchKeyword('default')) {\n            this.nextToken();\n            test = null;\n          } else {\n            this.expectKeyword('case');\n            test = this.parseExpression();\n          }\n\n          this.expect(':');\n          var consequent = [];\n\n          while (true) {\n            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {\n              break;\n            }\n\n            consequent.push(this.parseStatementListItem());\n          }\n\n          return this.finalize(node, new Node.SwitchCase(test, consequent));\n        };\n\n        Parser.prototype.parseSwitchStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('switch');\n          this.expect('(');\n          var discriminant = this.parseExpression();\n          this.expect(')');\n          var previousInSwitch = this.context.inSwitch;\n          this.context.inSwitch = true;\n          var cases = [];\n          var defaultFound = false;\n          this.expect('{');\n\n          while (true) {\n            if (this.match('}')) {\n              break;\n            }\n\n            var clause = this.parseSwitchCase();\n\n            if (clause.test === null) {\n              if (defaultFound) {\n                this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);\n              }\n\n              defaultFound = true;\n            }\n\n            cases.push(clause);\n          }\n\n          this.expect('}');\n          this.context.inSwitch = previousInSwitch;\n          return this.finalize(node, new Node.SwitchStatement(discriminant, cases));\n        }; // https://tc39.github.io/ecma262/#sec-labelled-statements\n\n\n        Parser.prototype.parseLabelledStatement = function () {\n          var node = this.createNode();\n          var expr = this.parseExpression();\n          var statement;\n\n          if (expr.type === syntax_1.Syntax.Identifier && this.match(':')) {\n            this.nextToken();\n            var id = expr;\n            var key = '$' + id.name;\n\n            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n              this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);\n            }\n\n            this.context.labelSet[key] = true;\n            var body = void 0;\n\n            if (this.matchKeyword('class')) {\n              this.tolerateUnexpectedToken(this.lookahead);\n              body = this.parseClassDeclaration();\n            } else if (this.matchKeyword('function')) {\n              var token = this.lookahead;\n              var declaration = this.parseFunctionDeclaration();\n\n              if (this.context.strict) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunction);\n              } else if (declaration.generator) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.GeneratorInLegacyContext);\n              }\n\n              body = declaration;\n            } else {\n              body = this.parseStatement();\n            }\n\n            delete this.context.labelSet[key];\n            statement = new Node.LabeledStatement(id, body);\n          } else {\n            this.consumeSemicolon();\n            statement = new Node.ExpressionStatement(expr);\n          }\n\n          return this.finalize(node, statement);\n        }; // https://tc39.github.io/ecma262/#sec-throw-statement\n\n\n        Parser.prototype.parseThrowStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('throw');\n\n          if (this.hasLineTerminator) {\n            this.throwError(messages_1.Messages.NewlineAfterThrow);\n          }\n\n          var argument = this.parseExpression();\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.ThrowStatement(argument));\n        }; // https://tc39.github.io/ecma262/#sec-try-statement\n\n\n        Parser.prototype.parseCatchClause = function () {\n          var node = this.createNode();\n          this.expectKeyword('catch');\n          this.expect('(');\n\n          if (this.match(')')) {\n            this.throwUnexpectedToken(this.lookahead);\n          }\n\n          var params = [];\n          var param = this.parsePattern(params);\n          var paramMap = {};\n\n          for (var i = 0; i < params.length; i++) {\n            var key = '$' + params[i].value;\n\n            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {\n              this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);\n            }\n\n            paramMap[key] = true;\n          }\n\n          if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {\n            if (this.scanner.isRestrictedWord(param.name)) {\n              this.tolerateError(messages_1.Messages.StrictCatchVariable);\n            }\n          }\n\n          this.expect(')');\n          var body = this.parseBlock();\n          return this.finalize(node, new Node.CatchClause(param, body));\n        };\n\n        Parser.prototype.parseFinallyClause = function () {\n          this.expectKeyword('finally');\n          return this.parseBlock();\n        };\n\n        Parser.prototype.parseTryStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('try');\n          var block = this.parseBlock();\n          var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;\n          var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;\n\n          if (!handler && !finalizer) {\n            this.throwError(messages_1.Messages.NoCatchOrFinally);\n          }\n\n          return this.finalize(node, new Node.TryStatement(block, handler, finalizer));\n        }; // https://tc39.github.io/ecma262/#sec-debugger-statement\n\n\n        Parser.prototype.parseDebuggerStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('debugger');\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.DebuggerStatement());\n        }; // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations\n\n\n        Parser.prototype.parseStatement = function () {\n          var statement;\n\n          switch (this.lookahead.type) {\n            case 1\n            /* BooleanLiteral */\n            :\n            case 5\n            /* NullLiteral */\n            :\n            case 6\n            /* NumericLiteral */\n            :\n            case 8\n            /* StringLiteral */\n            :\n            case 10\n            /* Template */\n            :\n            case 9\n            /* RegularExpression */\n            :\n              statement = this.parseExpressionStatement();\n              break;\n\n            case 7\n            /* Punctuator */\n            :\n              var value = this.lookahead.value;\n\n              if (value === '{') {\n                statement = this.parseBlock();\n              } else if (value === '(') {\n                statement = this.parseExpressionStatement();\n              } else if (value === ';') {\n                statement = this.parseEmptyStatement();\n              } else {\n                statement = this.parseExpressionStatement();\n              }\n\n              break;\n\n            case 3\n            /* Identifier */\n            :\n              statement = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();\n              break;\n\n            case 4\n            /* Keyword */\n            :\n              switch (this.lookahead.value) {\n                case 'break':\n                  statement = this.parseBreakStatement();\n                  break;\n\n                case 'continue':\n                  statement = this.parseContinueStatement();\n                  break;\n\n                case 'debugger':\n                  statement = this.parseDebuggerStatement();\n                  break;\n\n                case 'do':\n                  statement = this.parseDoWhileStatement();\n                  break;\n\n                case 'for':\n                  statement = this.parseForStatement();\n                  break;\n\n                case 'function':\n                  statement = this.parseFunctionDeclaration();\n                  break;\n\n                case 'if':\n                  statement = this.parseIfStatement();\n                  break;\n\n                case 'return':\n                  statement = this.parseReturnStatement();\n                  break;\n\n                case 'switch':\n                  statement = this.parseSwitchStatement();\n                  break;\n\n                case 'throw':\n                  statement = this.parseThrowStatement();\n                  break;\n\n                case 'try':\n                  statement = this.parseTryStatement();\n                  break;\n\n                case 'var':\n                  statement = this.parseVariableStatement();\n                  break;\n\n                case 'while':\n                  statement = this.parseWhileStatement();\n                  break;\n\n                case 'with':\n                  statement = this.parseWithStatement();\n                  break;\n\n                default:\n                  statement = this.parseExpressionStatement();\n                  break;\n              }\n\n              break;\n\n            default:\n              statement = this.throwUnexpectedToken(this.lookahead);\n          }\n\n          return statement;\n        }; // https://tc39.github.io/ecma262/#sec-function-definitions\n\n\n        Parser.prototype.parseFunctionSourceElements = function () {\n          var node = this.createNode();\n          this.expect('{');\n          var body = this.parseDirectivePrologues();\n          var previousLabelSet = this.context.labelSet;\n          var previousInIteration = this.context.inIteration;\n          var previousInSwitch = this.context.inSwitch;\n          var previousInFunctionBody = this.context.inFunctionBody;\n          this.context.labelSet = {};\n          this.context.inIteration = false;\n          this.context.inSwitch = false;\n          this.context.inFunctionBody = true;\n\n          while (this.lookahead.type !== 2\n          /* EOF */\n          ) {\n            if (this.match('}')) {\n              break;\n            }\n\n            body.push(this.parseStatementListItem());\n          }\n\n          this.expect('}');\n          this.context.labelSet = previousLabelSet;\n          this.context.inIteration = previousInIteration;\n          this.context.inSwitch = previousInSwitch;\n          this.context.inFunctionBody = previousInFunctionBody;\n          return this.finalize(node, new Node.BlockStatement(body));\n        };\n\n        Parser.prototype.validateParam = function (options, param, name) {\n          var key = '$' + name;\n\n          if (this.context.strict) {\n            if (this.scanner.isRestrictedWord(name)) {\n              options.stricted = param;\n              options.message = messages_1.Messages.StrictParamName;\n            }\n\n            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n              options.stricted = param;\n              options.message = messages_1.Messages.StrictParamDupe;\n            }\n          } else if (!options.firstRestricted) {\n            if (this.scanner.isRestrictedWord(name)) {\n              options.firstRestricted = param;\n              options.message = messages_1.Messages.StrictParamName;\n            } else if (this.scanner.isStrictModeReservedWord(name)) {\n              options.firstRestricted = param;\n              options.message = messages_1.Messages.StrictReservedWord;\n            } else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n              options.stricted = param;\n              options.message = messages_1.Messages.StrictParamDupe;\n            }\n          }\n          /* istanbul ignore next */\n\n\n          if (typeof Object.defineProperty === 'function') {\n            Object.defineProperty(options.paramSet, key, {\n              value: true,\n              enumerable: true,\n              writable: true,\n              configurable: true\n            });\n          } else {\n            options.paramSet[key] = true;\n          }\n        };\n\n        Parser.prototype.parseRestElement = function (params) {\n          var node = this.createNode();\n          this.expect('...');\n          var arg = this.parsePattern(params);\n\n          if (this.match('=')) {\n            this.throwError(messages_1.Messages.DefaultRestParameter);\n          }\n\n          if (!this.match(')')) {\n            this.throwError(messages_1.Messages.ParameterAfterRestParameter);\n          }\n\n          return this.finalize(node, new Node.RestElement(arg));\n        };\n\n        Parser.prototype.parseFormalParameter = function (options) {\n          var params = [];\n          var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);\n\n          for (var i = 0; i < params.length; i++) {\n            this.validateParam(options, params[i], params[i].value);\n          }\n\n          options.simple = options.simple && param instanceof Node.Identifier;\n          options.params.push(param);\n        };\n\n        Parser.prototype.parseFormalParameters = function (firstRestricted) {\n          var options;\n          options = {\n            simple: true,\n            params: [],\n            firstRestricted: firstRestricted\n          };\n          this.expect('(');\n\n          if (!this.match(')')) {\n            options.paramSet = {};\n\n            while (this.lookahead.type !== 2\n            /* EOF */\n            ) {\n              this.parseFormalParameter(options);\n\n              if (this.match(')')) {\n                break;\n              }\n\n              this.expect(',');\n\n              if (this.match(')')) {\n                break;\n              }\n            }\n          }\n\n          this.expect(')');\n          return {\n            simple: options.simple,\n            params: options.params,\n            stricted: options.stricted,\n            firstRestricted: options.firstRestricted,\n            message: options.message\n          };\n        };\n\n        Parser.prototype.matchAsyncFunction = function () {\n          var match = this.matchContextualKeyword('async');\n\n          if (match) {\n            var state = this.scanner.saveState();\n            this.scanner.scanComments();\n            var next = this.scanner.lex();\n            this.scanner.restoreState(state);\n            match = state.lineNumber === next.lineNumber && next.type === 4\n            /* Keyword */\n            && next.value === 'function';\n          }\n\n          return match;\n        };\n\n        Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {\n          var node = this.createNode();\n          var isAsync = this.matchContextualKeyword('async');\n\n          if (isAsync) {\n            this.nextToken();\n          }\n\n          this.expectKeyword('function');\n          var isGenerator = isAsync ? false : this.match('*');\n\n          if (isGenerator) {\n            this.nextToken();\n          }\n\n          var message;\n          var id = null;\n          var firstRestricted = null;\n\n          if (!identifierIsOptional || !this.match('(')) {\n            var token = this.lookahead;\n            id = this.parseVariableIdentifier();\n\n            if (this.context.strict) {\n              if (this.scanner.isRestrictedWord(token.value)) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n              }\n            } else {\n              if (this.scanner.isRestrictedWord(token.value)) {\n                firstRestricted = token;\n                message = messages_1.Messages.StrictFunctionName;\n              } else if (this.scanner.isStrictModeReservedWord(token.value)) {\n                firstRestricted = token;\n                message = messages_1.Messages.StrictReservedWord;\n              }\n            }\n          }\n\n          var previousAllowAwait = this.context.await;\n          var previousAllowYield = this.context.allowYield;\n          this.context.await = isAsync;\n          this.context.allowYield = !isGenerator;\n          var formalParameters = this.parseFormalParameters(firstRestricted);\n          var params = formalParameters.params;\n          var stricted = formalParameters.stricted;\n          firstRestricted = formalParameters.firstRestricted;\n\n          if (formalParameters.message) {\n            message = formalParameters.message;\n          }\n\n          var previousStrict = this.context.strict;\n          var previousAllowStrictDirective = this.context.allowStrictDirective;\n          this.context.allowStrictDirective = formalParameters.simple;\n          var body = this.parseFunctionSourceElements();\n\n          if (this.context.strict && firstRestricted) {\n            this.throwUnexpectedToken(firstRestricted, message);\n          }\n\n          if (this.context.strict && stricted) {\n            this.tolerateUnexpectedToken(stricted, message);\n          }\n\n          this.context.strict = previousStrict;\n          this.context.allowStrictDirective = previousAllowStrictDirective;\n          this.context.await = previousAllowAwait;\n          this.context.allowYield = previousAllowYield;\n          return isAsync ? this.finalize(node, new Node.AsyncFunctionDeclaration(id, params, body)) : this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));\n        };\n\n        Parser.prototype.parseFunctionExpression = function () {\n          var node = this.createNode();\n          var isAsync = this.matchContextualKeyword('async');\n\n          if (isAsync) {\n            this.nextToken();\n          }\n\n          this.expectKeyword('function');\n          var isGenerator = isAsync ? false : this.match('*');\n\n          if (isGenerator) {\n            this.nextToken();\n          }\n\n          var message;\n          var id = null;\n          var firstRestricted;\n          var previousAllowAwait = this.context.await;\n          var previousAllowYield = this.context.allowYield;\n          this.context.await = isAsync;\n          this.context.allowYield = !isGenerator;\n\n          if (!this.match('(')) {\n            var token = this.lookahead;\n            id = !this.context.strict && !isGenerator && this.matchKeyword('yield') ? this.parseIdentifierName() : this.parseVariableIdentifier();\n\n            if (this.context.strict) {\n              if (this.scanner.isRestrictedWord(token.value)) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n              }\n            } else {\n              if (this.scanner.isRestrictedWord(token.value)) {\n                firstRestricted = token;\n                message = messages_1.Messages.StrictFunctionName;\n              } else if (this.scanner.isStrictModeReservedWord(token.value)) {\n                firstRestricted = token;\n                message = messages_1.Messages.StrictReservedWord;\n              }\n            }\n          }\n\n          var formalParameters = this.parseFormalParameters(firstRestricted);\n          var params = formalParameters.params;\n          var stricted = formalParameters.stricted;\n          firstRestricted = formalParameters.firstRestricted;\n\n          if (formalParameters.message) {\n            message = formalParameters.message;\n          }\n\n          var previousStrict = this.context.strict;\n          var previousAllowStrictDirective = this.context.allowStrictDirective;\n          this.context.allowStrictDirective = formalParameters.simple;\n          var body = this.parseFunctionSourceElements();\n\n          if (this.context.strict && firstRestricted) {\n            this.throwUnexpectedToken(firstRestricted, message);\n          }\n\n          if (this.context.strict && stricted) {\n            this.tolerateUnexpectedToken(stricted, message);\n          }\n\n          this.context.strict = previousStrict;\n          this.context.allowStrictDirective = previousAllowStrictDirective;\n          this.context.await = previousAllowAwait;\n          this.context.allowYield = previousAllowYield;\n          return isAsync ? this.finalize(node, new Node.AsyncFunctionExpression(id, params, body)) : this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));\n        }; // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive\n\n\n        Parser.prototype.parseDirective = function () {\n          var token = this.lookahead;\n          var node = this.createNode();\n          var expr = this.parseExpression();\n          var directive = expr.type === syntax_1.Syntax.Literal ? this.getTokenRaw(token).slice(1, -1) : null;\n          this.consumeSemicolon();\n          return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));\n        };\n\n        Parser.prototype.parseDirectivePrologues = function () {\n          var firstRestricted = null;\n          var body = [];\n\n          while (true) {\n            var token = this.lookahead;\n\n            if (token.type !== 8\n            /* StringLiteral */\n            ) {\n              break;\n            }\n\n            var statement = this.parseDirective();\n            body.push(statement);\n            var directive = statement.directive;\n\n            if (typeof directive !== 'string') {\n              break;\n            }\n\n            if (directive === 'use strict') {\n              this.context.strict = true;\n\n              if (firstRestricted) {\n                this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);\n              }\n\n              if (!this.context.allowStrictDirective) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.IllegalLanguageModeDirective);\n              }\n            } else {\n              if (!firstRestricted && token.octal) {\n                firstRestricted = token;\n              }\n            }\n          }\n\n          return body;\n        }; // https://tc39.github.io/ecma262/#sec-method-definitions\n\n\n        Parser.prototype.qualifiedPropertyName = function (token) {\n          switch (token.type) {\n            case 3\n            /* Identifier */\n            :\n            case 8\n            /* StringLiteral */\n            :\n            case 1\n            /* BooleanLiteral */\n            :\n            case 5\n            /* NullLiteral */\n            :\n            case 6\n            /* NumericLiteral */\n            :\n            case 4\n            /* Keyword */\n            :\n              return true;\n\n            case 7\n            /* Punctuator */\n            :\n              return token.value === '[';\n\n            default:\n              break;\n          }\n\n          return false;\n        };\n\n        Parser.prototype.parseGetterMethod = function () {\n          var node = this.createNode();\n          var isGenerator = false;\n          var previousAllowYield = this.context.allowYield;\n          this.context.allowYield = !isGenerator;\n          var formalParameters = this.parseFormalParameters();\n\n          if (formalParameters.params.length > 0) {\n            this.tolerateError(messages_1.Messages.BadGetterArity);\n          }\n\n          var method = this.parsePropertyMethod(formalParameters);\n          this.context.allowYield = previousAllowYield;\n          return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));\n        };\n\n        Parser.prototype.parseSetterMethod = function () {\n          var node = this.createNode();\n          var isGenerator = false;\n          var previousAllowYield = this.context.allowYield;\n          this.context.allowYield = !isGenerator;\n          var formalParameters = this.parseFormalParameters();\n\n          if (formalParameters.params.length !== 1) {\n            this.tolerateError(messages_1.Messages.BadSetterArity);\n          } else if (formalParameters.params[0] instanceof Node.RestElement) {\n            this.tolerateError(messages_1.Messages.BadSetterRestParameter);\n          }\n\n          var method = this.parsePropertyMethod(formalParameters);\n          this.context.allowYield = previousAllowYield;\n          return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));\n        };\n\n        Parser.prototype.parseGeneratorMethod = function () {\n          var node = this.createNode();\n          var isGenerator = true;\n          var previousAllowYield = this.context.allowYield;\n          this.context.allowYield = true;\n          var params = this.parseFormalParameters();\n          this.context.allowYield = false;\n          var method = this.parsePropertyMethod(params);\n          this.context.allowYield = previousAllowYield;\n          return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n        }; // https://tc39.github.io/ecma262/#sec-generator-function-definitions\n\n\n        Parser.prototype.isStartOfExpression = function () {\n          var start = true;\n          var value = this.lookahead.value;\n\n          switch (this.lookahead.type) {\n            case 7\n            /* Punctuator */\n            :\n              start = value === '[' || value === '(' || value === '{' || value === '+' || value === '-' || value === '!' || value === '~' || value === '++' || value === '--' || value === '/' || value === '/='; // regular expression literal\n\n              break;\n\n            case 4\n            /* Keyword */\n            :\n              start = value === 'class' || value === 'delete' || value === 'function' || value === 'let' || value === 'new' || value === 'super' || value === 'this' || value === 'typeof' || value === 'void' || value === 'yield';\n              break;\n\n            default:\n              break;\n          }\n\n          return start;\n        };\n\n        Parser.prototype.parseYieldExpression = function () {\n          var node = this.createNode();\n          this.expectKeyword('yield');\n          var argument = null;\n          var delegate = false;\n\n          if (!this.hasLineTerminator) {\n            var previousAllowYield = this.context.allowYield;\n            this.context.allowYield = false;\n            delegate = this.match('*');\n\n            if (delegate) {\n              this.nextToken();\n              argument = this.parseAssignmentExpression();\n            } else if (this.isStartOfExpression()) {\n              argument = this.parseAssignmentExpression();\n            }\n\n            this.context.allowYield = previousAllowYield;\n          }\n\n          return this.finalize(node, new Node.YieldExpression(argument, delegate));\n        }; // https://tc39.github.io/ecma262/#sec-class-definitions\n\n\n        Parser.prototype.parseClassElement = function (hasConstructor) {\n          var token = this.lookahead;\n          var node = this.createNode();\n          var kind = '';\n          var key = null;\n          var value = null;\n          var computed = false;\n          var method = false;\n          var isStatic = false;\n          var isAsync = false;\n\n          if (this.match('*')) {\n            this.nextToken();\n          } else {\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            var id = key;\n\n            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {\n              token = this.lookahead;\n              isStatic = true;\n              computed = this.match('[');\n\n              if (this.match('*')) {\n                this.nextToken();\n              } else {\n                key = this.parseObjectPropertyKey();\n              }\n            }\n\n            if (token.type === 3\n            /* Identifier */\n            && !this.hasLineTerminator && token.value === 'async') {\n              var punctuator = this.lookahead.value;\n\n              if (punctuator !== ':' && punctuator !== '(' && punctuator !== '*') {\n                isAsync = true;\n                token = this.lookahead;\n                key = this.parseObjectPropertyKey();\n\n                if (token.type === 3\n                /* Identifier */\n                && token.value === 'constructor') {\n                  this.tolerateUnexpectedToken(token, messages_1.Messages.ConstructorIsAsync);\n                }\n              }\n            }\n          }\n\n          var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n\n          if (token.type === 3\n          /* Identifier */\n          ) {\n            if (token.value === 'get' && lookaheadPropertyKey) {\n              kind = 'get';\n              computed = this.match('[');\n              key = this.parseObjectPropertyKey();\n              this.context.allowYield = false;\n              value = this.parseGetterMethod();\n            } else if (token.value === 'set' && lookaheadPropertyKey) {\n              kind = 'set';\n              computed = this.match('[');\n              key = this.parseObjectPropertyKey();\n              value = this.parseSetterMethod();\n            }\n          } else if (token.type === 7\n          /* Punctuator */\n          && token.value === '*' && lookaheadPropertyKey) {\n            kind = 'init';\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            value = this.parseGeneratorMethod();\n            method = true;\n          }\n\n          if (!kind && key && this.match('(')) {\n            kind = 'init';\n            value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();\n            method = true;\n          }\n\n          if (!kind) {\n            this.throwUnexpectedToken(this.lookahead);\n          }\n\n          if (kind === 'init') {\n            kind = 'method';\n          }\n\n          if (!computed) {\n            if (isStatic && this.isPropertyKey(key, 'prototype')) {\n              this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);\n            }\n\n            if (!isStatic && this.isPropertyKey(key, 'constructor')) {\n              if (kind !== 'method' || !method || value && value.generator) {\n                this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);\n              }\n\n              if (hasConstructor.value) {\n                this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);\n              } else {\n                hasConstructor.value = true;\n              }\n\n              kind = 'constructor';\n            }\n          }\n\n          return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));\n        };\n\n        Parser.prototype.parseClassElementList = function () {\n          var body = [];\n          var hasConstructor = {\n            value: false\n          };\n          this.expect('{');\n\n          while (!this.match('}')) {\n            if (this.match(';')) {\n              this.nextToken();\n            } else {\n              body.push(this.parseClassElement(hasConstructor));\n            }\n          }\n\n          this.expect('}');\n          return body;\n        };\n\n        Parser.prototype.parseClassBody = function () {\n          var node = this.createNode();\n          var elementList = this.parseClassElementList();\n          return this.finalize(node, new Node.ClassBody(elementList));\n        };\n\n        Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {\n          var node = this.createNode();\n          var previousStrict = this.context.strict;\n          this.context.strict = true;\n          this.expectKeyword('class');\n          var id = identifierIsOptional && this.lookahead.type !== 3\n          /* Identifier */\n          ? null : this.parseVariableIdentifier();\n          var superClass = null;\n\n          if (this.matchKeyword('extends')) {\n            this.nextToken();\n            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n          }\n\n          var classBody = this.parseClassBody();\n          this.context.strict = previousStrict;\n          return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));\n        };\n\n        Parser.prototype.parseClassExpression = function () {\n          var node = this.createNode();\n          var previousStrict = this.context.strict;\n          this.context.strict = true;\n          this.expectKeyword('class');\n          var id = this.lookahead.type === 3\n          /* Identifier */\n          ? this.parseVariableIdentifier() : null;\n          var superClass = null;\n\n          if (this.matchKeyword('extends')) {\n            this.nextToken();\n            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n          }\n\n          var classBody = this.parseClassBody();\n          this.context.strict = previousStrict;\n          return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));\n        }; // https://tc39.github.io/ecma262/#sec-scripts\n        // https://tc39.github.io/ecma262/#sec-modules\n\n\n        Parser.prototype.parseModule = function () {\n          this.context.strict = true;\n          this.context.isModule = true;\n          this.scanner.isModule = true;\n          var node = this.createNode();\n          var body = this.parseDirectivePrologues();\n\n          while (this.lookahead.type !== 2\n          /* EOF */\n          ) {\n            body.push(this.parseStatementListItem());\n          }\n\n          return this.finalize(node, new Node.Module(body));\n        };\n\n        Parser.prototype.parseScript = function () {\n          var node = this.createNode();\n          var body = this.parseDirectivePrologues();\n\n          while (this.lookahead.type !== 2\n          /* EOF */\n          ) {\n            body.push(this.parseStatementListItem());\n          }\n\n          return this.finalize(node, new Node.Script(body));\n        }; // https://tc39.github.io/ecma262/#sec-imports\n\n\n        Parser.prototype.parseModuleSpecifier = function () {\n          var node = this.createNode();\n\n          if (this.lookahead.type !== 8\n          /* StringLiteral */\n          ) {\n            this.throwError(messages_1.Messages.InvalidModuleSpecifier);\n          }\n\n          var token = this.nextToken();\n          var raw = this.getTokenRaw(token);\n          return this.finalize(node, new Node.Literal(token.value, raw));\n        }; // import {<foo as bar>} ...;\n\n\n        Parser.prototype.parseImportSpecifier = function () {\n          var node = this.createNode();\n          var imported;\n          var local;\n\n          if (this.lookahead.type === 3\n          /* Identifier */\n          ) {\n            imported = this.parseVariableIdentifier();\n            local = imported;\n\n            if (this.matchContextualKeyword('as')) {\n              this.nextToken();\n              local = this.parseVariableIdentifier();\n            }\n          } else {\n            imported = this.parseIdentifierName();\n            local = imported;\n\n            if (this.matchContextualKeyword('as')) {\n              this.nextToken();\n              local = this.parseVariableIdentifier();\n            } else {\n              this.throwUnexpectedToken(this.nextToken());\n            }\n          }\n\n          return this.finalize(node, new Node.ImportSpecifier(local, imported));\n        }; // {foo, bar as bas}\n\n\n        Parser.prototype.parseNamedImports = function () {\n          this.expect('{');\n          var specifiers = [];\n\n          while (!this.match('}')) {\n            specifiers.push(this.parseImportSpecifier());\n\n            if (!this.match('}')) {\n              this.expect(',');\n            }\n          }\n\n          this.expect('}');\n          return specifiers;\n        }; // import <foo> ...;\n\n\n        Parser.prototype.parseImportDefaultSpecifier = function () {\n          var node = this.createNode();\n          var local = this.parseIdentifierName();\n          return this.finalize(node, new Node.ImportDefaultSpecifier(local));\n        }; // import <* as foo> ...;\n\n\n        Parser.prototype.parseImportNamespaceSpecifier = function () {\n          var node = this.createNode();\n          this.expect('*');\n\n          if (!this.matchContextualKeyword('as')) {\n            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);\n          }\n\n          this.nextToken();\n          var local = this.parseIdentifierName();\n          return this.finalize(node, new Node.ImportNamespaceSpecifier(local));\n        };\n\n        Parser.prototype.parseImportDeclaration = function () {\n          if (this.context.inFunctionBody) {\n            this.throwError(messages_1.Messages.IllegalImportDeclaration);\n          }\n\n          var node = this.createNode();\n          this.expectKeyword('import');\n          var src;\n          var specifiers = [];\n\n          if (this.lookahead.type === 8\n          /* StringLiteral */\n          ) {\n            // import 'foo';\n            src = this.parseModuleSpecifier();\n          } else {\n            if (this.match('{')) {\n              // import {bar}\n              specifiers = specifiers.concat(this.parseNamedImports());\n            } else if (this.match('*')) {\n              // import * as foo\n              specifiers.push(this.parseImportNamespaceSpecifier());\n            } else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {\n              // import foo\n              specifiers.push(this.parseImportDefaultSpecifier());\n\n              if (this.match(',')) {\n                this.nextToken();\n\n                if (this.match('*')) {\n                  // import foo, * as foo\n                  specifiers.push(this.parseImportNamespaceSpecifier());\n                } else if (this.match('{')) {\n                  // import foo, {bar}\n                  specifiers = specifiers.concat(this.parseNamedImports());\n                } else {\n                  this.throwUnexpectedToken(this.lookahead);\n                }\n              }\n            } else {\n              this.throwUnexpectedToken(this.nextToken());\n            }\n\n            if (!this.matchContextualKeyword('from')) {\n              var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n              this.throwError(message, this.lookahead.value);\n            }\n\n            this.nextToken();\n            src = this.parseModuleSpecifier();\n          }\n\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.ImportDeclaration(specifiers, src));\n        }; // https://tc39.github.io/ecma262/#sec-exports\n\n\n        Parser.prototype.parseExportSpecifier = function () {\n          var node = this.createNode();\n          var local = this.parseIdentifierName();\n          var exported = local;\n\n          if (this.matchContextualKeyword('as')) {\n            this.nextToken();\n            exported = this.parseIdentifierName();\n          }\n\n          return this.finalize(node, new Node.ExportSpecifier(local, exported));\n        };\n\n        Parser.prototype.parseExportDeclaration = function () {\n          if (this.context.inFunctionBody) {\n            this.throwError(messages_1.Messages.IllegalExportDeclaration);\n          }\n\n          var node = this.createNode();\n          this.expectKeyword('export');\n          var exportDeclaration;\n\n          if (this.matchKeyword('default')) {\n            // export default ...\n            this.nextToken();\n\n            if (this.matchKeyword('function')) {\n              // export default function foo () {}\n              // export default function () {}\n              var declaration = this.parseFunctionDeclaration(true);\n              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n            } else if (this.matchKeyword('class')) {\n              // export default class foo {}\n              var declaration = this.parseClassDeclaration(true);\n              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n            } else if (this.matchContextualKeyword('async')) {\n              // export default async function f () {}\n              // export default async function () {}\n              // export default async x => x\n              var declaration = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();\n              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n            } else {\n              if (this.matchContextualKeyword('from')) {\n                this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);\n              } // export default {};\n              // export default [];\n              // export default (1 + 2);\n\n\n              var declaration = this.match('{') ? this.parseObjectInitializer() : this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();\n              this.consumeSemicolon();\n              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n            }\n          } else if (this.match('*')) {\n            // export * from 'foo';\n            this.nextToken();\n\n            if (!this.matchContextualKeyword('from')) {\n              var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n              this.throwError(message, this.lookahead.value);\n            }\n\n            this.nextToken();\n            var src = this.parseModuleSpecifier();\n            this.consumeSemicolon();\n            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));\n          } else if (this.lookahead.type === 4\n          /* Keyword */\n          ) {\n            // export var f = 1;\n            var declaration = void 0;\n\n            switch (this.lookahead.value) {\n              case 'let':\n              case 'const':\n                declaration = this.parseLexicalDeclaration({\n                  inFor: false\n                });\n                break;\n\n              case 'var':\n              case 'class':\n              case 'function':\n                declaration = this.parseStatementListItem();\n                break;\n\n              default:\n                this.throwUnexpectedToken(this.lookahead);\n            }\n\n            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\n          } else if (this.matchAsyncFunction()) {\n            var declaration = this.parseFunctionDeclaration();\n            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\n          } else {\n            var specifiers = [];\n            var source = null;\n            var isExportFromIdentifier = false;\n            this.expect('{');\n\n            while (!this.match('}')) {\n              isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');\n              specifiers.push(this.parseExportSpecifier());\n\n              if (!this.match('}')) {\n                this.expect(',');\n              }\n            }\n\n            this.expect('}');\n\n            if (this.matchContextualKeyword('from')) {\n              // export {default} from 'foo';\n              // export {foo} from 'foo';\n              this.nextToken();\n              source = this.parseModuleSpecifier();\n              this.consumeSemicolon();\n            } else if (isExportFromIdentifier) {\n              // export {default}; // missing fromClause\n              var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n              this.throwError(message, this.lookahead.value);\n            } else {\n              // export {foo};\n              this.consumeSemicolon();\n            }\n\n            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));\n          }\n\n          return exportDeclaration;\n        };\n\n        return Parser;\n      }();\n\n      exports.Parser = Parser;\n      /***/\n    },\n    /* 9 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\"; // Ensure the condition is true, otherwise throw an error.\n      // This is only to have a better contract semantic, i.e. another safety net\n      // to catch a logic error. The condition shall be fulfilled in normal case.\n      // Do NOT use this to enforce a certain condition on any user input.\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      function assert(condition, message) {\n        /* istanbul ignore if */\n        if (!condition) {\n          throw new Error('ASSERT: ' + message);\n        }\n      }\n\n      exports.assert = assert;\n      /***/\n    },\n    /* 10 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n      /* tslint:disable:max-classes-per-file */\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var ErrorHandler = function () {\n        function ErrorHandler() {\n          this.errors = [];\n          this.tolerant = false;\n        }\n\n        ErrorHandler.prototype.recordError = function (error) {\n          this.errors.push(error);\n        };\n\n        ErrorHandler.prototype.tolerate = function (error) {\n          if (this.tolerant) {\n            this.recordError(error);\n          } else {\n            throw error;\n          }\n        };\n\n        ErrorHandler.prototype.constructError = function (msg, column) {\n          var error = new Error(msg);\n\n          try {\n            throw error;\n          } catch (base) {\n            /* istanbul ignore else */\n            if (Object.create && Object.defineProperty) {\n              error = Object.create(base);\n              Object.defineProperty(error, 'column', {\n                value: column\n              });\n            }\n          }\n          /* istanbul ignore next */\n\n\n          return error;\n        };\n\n        ErrorHandler.prototype.createError = function (index, line, col, description) {\n          var msg = 'Line ' + line + ': ' + description;\n          var error = this.constructError(msg, col);\n          error.index = index;\n          error.lineNumber = line;\n          error.description = description;\n          return error;\n        };\n\n        ErrorHandler.prototype.throwError = function (index, line, col, description) {\n          throw this.createError(index, line, col, description);\n        };\n\n        ErrorHandler.prototype.tolerateError = function (index, line, col, description) {\n          var error = this.createError(index, line, col, description);\n\n          if (this.tolerant) {\n            this.recordError(error);\n          } else {\n            throw error;\n          }\n        };\n\n        return ErrorHandler;\n      }();\n\n      exports.ErrorHandler = ErrorHandler;\n      /***/\n    },\n    /* 11 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      }); // Error messages should be identical to V8.\n\n      exports.Messages = {\n        BadGetterArity: 'Getter must not have any formal parameters',\n        BadSetterArity: 'Setter must have exactly one formal parameter',\n        BadSetterRestParameter: 'Setter function argument must not be a rest parameter',\n        ConstructorIsAsync: 'Class constructor may not be an async method',\n        ConstructorSpecialMethod: 'Class constructor may not be an accessor',\n        DeclarationMissingInitializer: 'Missing initializer in %0 declaration',\n        DefaultRestParameter: 'Unexpected token =',\n        DuplicateBinding: 'Duplicate binding %0',\n        DuplicateConstructor: 'A class may only have one constructor',\n        DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',\n        ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer',\n        GeneratorInLegacyContext: 'Generator declarations are not allowed in legacy contexts',\n        IllegalBreak: 'Illegal break statement',\n        IllegalContinue: 'Illegal continue statement',\n        IllegalExportDeclaration: 'Unexpected token',\n        IllegalImportDeclaration: 'Unexpected token',\n        IllegalLanguageModeDirective: 'Illegal \\'use strict\\' directive in function with non-simple parameter list',\n        IllegalReturn: 'Illegal return statement',\n        InvalidEscapedReservedWord: 'Keyword must not contain escaped characters',\n        InvalidHexEscapeSequence: 'Invalid hexadecimal escape sequence',\n        InvalidLHSInAssignment: 'Invalid left-hand side in assignment',\n        InvalidLHSInForIn: 'Invalid left-hand side in for-in',\n        InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',\n        InvalidModuleSpecifier: 'Unexpected token',\n        InvalidRegExp: 'Invalid regular expression',\n        LetInLexicalBinding: 'let is disallowed as a lexically bound name',\n        MissingFromClause: 'Unexpected token',\n        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n        NewlineAfterThrow: 'Illegal newline after throw',\n        NoAsAfterImportNamespace: 'Unexpected token',\n        NoCatchOrFinally: 'Missing catch or finally after try',\n        ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',\n        Redeclaration: '%0 \\'%1\\' has already been declared',\n        StaticPrototype: 'Classes may not have static property named prototype',\n        StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',\n        StrictDelete: 'Delete of an unqualified identifier in strict mode.',\n        StrictFunction: 'In strict mode code, functions can only be declared at top level or inside a block',\n        StrictFunctionName: 'Function name may not be eval or arguments in strict mode',\n        StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',\n        StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictModeWith: 'Strict mode code may not include a with statement',\n        StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',\n        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n        StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',\n        StrictReservedWord: 'Use of future reserved word in strict mode',\n        StrictVarName: 'Variable name may not be eval or arguments in strict mode',\n        TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',\n        UnexpectedEOS: 'Unexpected end of input',\n        UnexpectedIdentifier: 'Unexpected identifier',\n        UnexpectedNumber: 'Unexpected number',\n        UnexpectedReserved: 'Unexpected reserved word',\n        UnexpectedString: 'Unexpected string',\n        UnexpectedTemplate: 'Unexpected quasi %0',\n        UnexpectedToken: 'Unexpected token %0',\n        UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',\n        UnknownLabel: 'Undefined label \\'%0\\'',\n        UnterminatedRegExp: 'Invalid regular expression: missing /'\n      };\n      /***/\n    },\n    /* 12 */\n\n    /***/\n    function (module, exports, __nested_webpack_require_228499__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var assert_1 = __nested_webpack_require_228499__(9);\n\n      var character_1 = __nested_webpack_require_228499__(4);\n\n      var messages_1 = __nested_webpack_require_228499__(11);\n\n      function hexValue(ch) {\n        return '0123456789abcdef'.indexOf(ch.toLowerCase());\n      }\n\n      function octalValue(ch) {\n        return '01234567'.indexOf(ch);\n      }\n\n      var Scanner = function () {\n        function Scanner(code, handler) {\n          this.source = code;\n          this.errorHandler = handler;\n          this.trackComment = false;\n          this.isModule = false;\n          this.length = code.length;\n          this.index = 0;\n          this.lineNumber = code.length > 0 ? 1 : 0;\n          this.lineStart = 0;\n          this.curlyStack = [];\n        }\n\n        Scanner.prototype.saveState = function () {\n          return {\n            index: this.index,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart\n          };\n        };\n\n        Scanner.prototype.restoreState = function (state) {\n          this.index = state.index;\n          this.lineNumber = state.lineNumber;\n          this.lineStart = state.lineStart;\n        };\n\n        Scanner.prototype.eof = function () {\n          return this.index >= this.length;\n        };\n\n        Scanner.prototype.throwUnexpectedToken = function (message) {\n          if (message === void 0) {\n            message = messages_1.Messages.UnexpectedTokenIllegal;\n          }\n\n          return this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\n        };\n\n        Scanner.prototype.tolerateUnexpectedToken = function (message) {\n          if (message === void 0) {\n            message = messages_1.Messages.UnexpectedTokenIllegal;\n          }\n\n          this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\n        }; // https://tc39.github.io/ecma262/#sec-comments\n\n\n        Scanner.prototype.skipSingleLineComment = function (offset) {\n          var comments = [];\n          var start, loc;\n\n          if (this.trackComment) {\n            comments = [];\n            start = this.index - offset;\n            loc = {\n              start: {\n                line: this.lineNumber,\n                column: this.index - this.lineStart - offset\n              },\n              end: {}\n            };\n          }\n\n          while (!this.eof()) {\n            var ch = this.source.charCodeAt(this.index);\n            ++this.index;\n\n            if (character_1.Character.isLineTerminator(ch)) {\n              if (this.trackComment) {\n                loc.end = {\n                  line: this.lineNumber,\n                  column: this.index - this.lineStart - 1\n                };\n                var entry = {\n                  multiLine: false,\n                  slice: [start + offset, this.index - 1],\n                  range: [start, this.index - 1],\n                  loc: loc\n                };\n                comments.push(entry);\n              }\n\n              if (ch === 13 && this.source.charCodeAt(this.index) === 10) {\n                ++this.index;\n              }\n\n              ++this.lineNumber;\n              this.lineStart = this.index;\n              return comments;\n            }\n          }\n\n          if (this.trackComment) {\n            loc.end = {\n              line: this.lineNumber,\n              column: this.index - this.lineStart\n            };\n            var entry = {\n              multiLine: false,\n              slice: [start + offset, this.index],\n              range: [start, this.index],\n              loc: loc\n            };\n            comments.push(entry);\n          }\n\n          return comments;\n        };\n\n        Scanner.prototype.skipMultiLineComment = function () {\n          var comments = [];\n          var start, loc;\n\n          if (this.trackComment) {\n            comments = [];\n            start = this.index - 2;\n            loc = {\n              start: {\n                line: this.lineNumber,\n                column: this.index - this.lineStart - 2\n              },\n              end: {}\n            };\n          }\n\n          while (!this.eof()) {\n            var ch = this.source.charCodeAt(this.index);\n\n            if (character_1.Character.isLineTerminator(ch)) {\n              if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {\n                ++this.index;\n              }\n\n              ++this.lineNumber;\n              ++this.index;\n              this.lineStart = this.index;\n            } else if (ch === 0x2A) {\n              // Block comment ends with '*/'.\n              if (this.source.charCodeAt(this.index + 1) === 0x2F) {\n                this.index += 2;\n\n                if (this.trackComment) {\n                  loc.end = {\n                    line: this.lineNumber,\n                    column: this.index - this.lineStart\n                  };\n                  var entry = {\n                    multiLine: true,\n                    slice: [start + 2, this.index - 2],\n                    range: [start, this.index],\n                    loc: loc\n                  };\n                  comments.push(entry);\n                }\n\n                return comments;\n              }\n\n              ++this.index;\n            } else {\n              ++this.index;\n            }\n          } // Ran off the end of the file - the whole thing is a comment\n\n\n          if (this.trackComment) {\n            loc.end = {\n              line: this.lineNumber,\n              column: this.index - this.lineStart\n            };\n            var entry = {\n              multiLine: true,\n              slice: [start + 2, this.index],\n              range: [start, this.index],\n              loc: loc\n            };\n            comments.push(entry);\n          }\n\n          this.tolerateUnexpectedToken();\n          return comments;\n        };\n\n        Scanner.prototype.scanComments = function () {\n          var comments;\n\n          if (this.trackComment) {\n            comments = [];\n          }\n\n          var start = this.index === 0;\n\n          while (!this.eof()) {\n            var ch = this.source.charCodeAt(this.index);\n\n            if (character_1.Character.isWhiteSpace(ch)) {\n              ++this.index;\n            } else if (character_1.Character.isLineTerminator(ch)) {\n              ++this.index;\n\n              if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {\n                ++this.index;\n              }\n\n              ++this.lineNumber;\n              this.lineStart = this.index;\n              start = true;\n            } else if (ch === 0x2F) {\n              ch = this.source.charCodeAt(this.index + 1);\n\n              if (ch === 0x2F) {\n                this.index += 2;\n                var comment = this.skipSingleLineComment(2);\n\n                if (this.trackComment) {\n                  comments = comments.concat(comment);\n                }\n\n                start = true;\n              } else if (ch === 0x2A) {\n                this.index += 2;\n                var comment = this.skipMultiLineComment();\n\n                if (this.trackComment) {\n                  comments = comments.concat(comment);\n                }\n              } else {\n                break;\n              }\n            } else if (start && ch === 0x2D) {\n              // U+003E is '>'\n              if (this.source.charCodeAt(this.index + 1) === 0x2D && this.source.charCodeAt(this.index + 2) === 0x3E) {\n                // '-->' is a single-line comment\n                this.index += 3;\n                var comment = this.skipSingleLineComment(3);\n\n                if (this.trackComment) {\n                  comments = comments.concat(comment);\n                }\n              } else {\n                break;\n              }\n            } else if (ch === 0x3C && !this.isModule) {\n              if (this.source.slice(this.index + 1, this.index + 4) === '!--') {\n                this.index += 4; // `<!--`\n\n                var comment = this.skipSingleLineComment(4);\n\n                if (this.trackComment) {\n                  comments = comments.concat(comment);\n                }\n              } else {\n                break;\n              }\n            } else {\n              break;\n            }\n          }\n\n          return comments;\n        }; // https://tc39.github.io/ecma262/#sec-future-reserved-words\n\n\n        Scanner.prototype.isFutureReservedWord = function (id) {\n          switch (id) {\n            case 'enum':\n            case 'export':\n            case 'import':\n            case 'super':\n              return true;\n\n            default:\n              return false;\n          }\n        };\n\n        Scanner.prototype.isStrictModeReservedWord = function (id) {\n          switch (id) {\n            case 'implements':\n            case 'interface':\n            case 'package':\n            case 'private':\n            case 'protected':\n            case 'public':\n            case 'static':\n            case 'yield':\n            case 'let':\n              return true;\n\n            default:\n              return false;\n          }\n        };\n\n        Scanner.prototype.isRestrictedWord = function (id) {\n          return id === 'eval' || id === 'arguments';\n        }; // https://tc39.github.io/ecma262/#sec-keywords\n\n\n        Scanner.prototype.isKeyword = function (id) {\n          switch (id.length) {\n            case 2:\n              return id === 'if' || id === 'in' || id === 'do';\n\n            case 3:\n              return id === 'var' || id === 'for' || id === 'new' || id === 'try' || id === 'let';\n\n            case 4:\n              return id === 'this' || id === 'else' || id === 'case' || id === 'void' || id === 'with' || id === 'enum';\n\n            case 5:\n              return id === 'while' || id === 'break' || id === 'catch' || id === 'throw' || id === 'const' || id === 'yield' || id === 'class' || id === 'super';\n\n            case 6:\n              return id === 'return' || id === 'typeof' || id === 'delete' || id === 'switch' || id === 'export' || id === 'import';\n\n            case 7:\n              return id === 'default' || id === 'finally' || id === 'extends';\n\n            case 8:\n              return id === 'function' || id === 'continue' || id === 'debugger';\n\n            case 10:\n              return id === 'instanceof';\n\n            default:\n              return false;\n          }\n        };\n\n        Scanner.prototype.codePointAt = function (i) {\n          var cp = this.source.charCodeAt(i);\n\n          if (cp >= 0xD800 && cp <= 0xDBFF) {\n            var second = this.source.charCodeAt(i + 1);\n\n            if (second >= 0xDC00 && second <= 0xDFFF) {\n              var first = cp;\n              cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n            }\n          }\n\n          return cp;\n        };\n\n        Scanner.prototype.scanHexEscape = function (prefix) {\n          var len = prefix === 'u' ? 4 : 2;\n          var code = 0;\n\n          for (var i = 0; i < len; ++i) {\n            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n              code = code * 16 + hexValue(this.source[this.index++]);\n            } else {\n              return null;\n            }\n          }\n\n          return String.fromCharCode(code);\n        };\n\n        Scanner.prototype.scanUnicodeCodePointEscape = function () {\n          var ch = this.source[this.index];\n          var code = 0; // At least, one hex digit is required.\n\n          if (ch === '}') {\n            this.throwUnexpectedToken();\n          }\n\n          while (!this.eof()) {\n            ch = this.source[this.index++];\n\n            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {\n              break;\n            }\n\n            code = code * 16 + hexValue(ch);\n          }\n\n          if (code > 0x10FFFF || ch !== '}') {\n            this.throwUnexpectedToken();\n          }\n\n          return character_1.Character.fromCodePoint(code);\n        };\n\n        Scanner.prototype.getIdentifier = function () {\n          var start = this.index++;\n\n          while (!this.eof()) {\n            var ch = this.source.charCodeAt(this.index);\n\n            if (ch === 0x5C) {\n              // Blackslash (U+005C) marks Unicode escape sequence.\n              this.index = start;\n              return this.getComplexIdentifier();\n            } else if (ch >= 0xD800 && ch < 0xDFFF) {\n              // Need to handle surrogate pairs.\n              this.index = start;\n              return this.getComplexIdentifier();\n            }\n\n            if (character_1.Character.isIdentifierPart(ch)) {\n              ++this.index;\n            } else {\n              break;\n            }\n          }\n\n          return this.source.slice(start, this.index);\n        };\n\n        Scanner.prototype.getComplexIdentifier = function () {\n          var cp = this.codePointAt(this.index);\n          var id = character_1.Character.fromCodePoint(cp);\n          this.index += id.length; // '\\u' (U+005C, U+0075) denotes an escaped character.\n\n          var ch;\n\n          if (cp === 0x5C) {\n            if (this.source.charCodeAt(this.index) !== 0x75) {\n              this.throwUnexpectedToken();\n            }\n\n            ++this.index;\n\n            if (this.source[this.index] === '{') {\n              ++this.index;\n              ch = this.scanUnicodeCodePointEscape();\n            } else {\n              ch = this.scanHexEscape('u');\n\n              if (ch === null || ch === '\\\\' || !character_1.Character.isIdentifierStart(ch.charCodeAt(0))) {\n                this.throwUnexpectedToken();\n              }\n            }\n\n            id = ch;\n          }\n\n          while (!this.eof()) {\n            cp = this.codePointAt(this.index);\n\n            if (!character_1.Character.isIdentifierPart(cp)) {\n              break;\n            }\n\n            ch = character_1.Character.fromCodePoint(cp);\n            id += ch;\n            this.index += ch.length; // '\\u' (U+005C, U+0075) denotes an escaped character.\n\n            if (cp === 0x5C) {\n              id = id.substr(0, id.length - 1);\n\n              if (this.source.charCodeAt(this.index) !== 0x75) {\n                this.throwUnexpectedToken();\n              }\n\n              ++this.index;\n\n              if (this.source[this.index] === '{') {\n                ++this.index;\n                ch = this.scanUnicodeCodePointEscape();\n              } else {\n                ch = this.scanHexEscape('u');\n\n                if (ch === null || ch === '\\\\' || !character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {\n                  this.throwUnexpectedToken();\n                }\n              }\n\n              id += ch;\n            }\n          }\n\n          return id;\n        };\n\n        Scanner.prototype.octalToDecimal = function (ch) {\n          // \\0 is not octal escape sequence\n          var octal = ch !== '0';\n          var code = octalValue(ch);\n\n          if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n            octal = true;\n            code = code * 8 + octalValue(this.source[this.index++]); // 3 digits are only allowed when string starts\n            // with 0, 1, 2, 3\n\n            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n              code = code * 8 + octalValue(this.source[this.index++]);\n            }\n          }\n\n          return {\n            code: code,\n            octal: octal\n          };\n        }; // https://tc39.github.io/ecma262/#sec-names-and-keywords\n\n\n        Scanner.prototype.scanIdentifier = function () {\n          var type;\n          var start = this.index; // Backslash (U+005C) starts an escaped character.\n\n          var id = this.source.charCodeAt(start) === 0x5C ? this.getComplexIdentifier() : this.getIdentifier(); // There is no keyword or literal with only one character.\n          // Thus, it must be an identifier.\n\n          if (id.length === 1) {\n            type = 3\n            /* Identifier */\n            ;\n          } else if (this.isKeyword(id)) {\n            type = 4\n            /* Keyword */\n            ;\n          } else if (id === 'null') {\n            type = 5\n            /* NullLiteral */\n            ;\n          } else if (id === 'true' || id === 'false') {\n            type = 1\n            /* BooleanLiteral */\n            ;\n          } else {\n            type = 3\n            /* Identifier */\n            ;\n          }\n\n          if (type !== 3\n          /* Identifier */\n          && start + id.length !== this.index) {\n            var restore = this.index;\n            this.index = start;\n            this.tolerateUnexpectedToken(messages_1.Messages.InvalidEscapedReservedWord);\n            this.index = restore;\n          }\n\n          return {\n            type: type,\n            value: id,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        }; // https://tc39.github.io/ecma262/#sec-punctuators\n\n\n        Scanner.prototype.scanPunctuator = function () {\n          var start = this.index; // Check for most common single-character punctuators.\n\n          var str = this.source[this.index];\n\n          switch (str) {\n            case '(':\n            case '{':\n              if (str === '{') {\n                this.curlyStack.push('{');\n              }\n\n              ++this.index;\n              break;\n\n            case '.':\n              ++this.index;\n\n              if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {\n                // Spread operator: ...\n                this.index += 2;\n                str = '...';\n              }\n\n              break;\n\n            case '}':\n              ++this.index;\n              this.curlyStack.pop();\n              break;\n\n            case ')':\n            case ';':\n            case ',':\n            case '[':\n            case ']':\n            case ':':\n            case '?':\n            case '~':\n              ++this.index;\n              break;\n\n            default:\n              // 4-character punctuator.\n              str = this.source.substr(this.index, 4);\n\n              if (str === '>>>=') {\n                this.index += 4;\n              } else {\n                // 3-character punctuators.\n                str = str.substr(0, 3);\n\n                if (str === '===' || str === '!==' || str === '>>>' || str === '<<=' || str === '>>=' || str === '**=') {\n                  this.index += 3;\n                } else {\n                  // 2-character punctuators.\n                  str = str.substr(0, 2);\n\n                  if (str === '&&' || str === '||' || str === '==' || str === '!=' || str === '+=' || str === '-=' || str === '*=' || str === '/=' || str === '++' || str === '--' || str === '<<' || str === '>>' || str === '&=' || str === '|=' || str === '^=' || str === '%=' || str === '<=' || str === '>=' || str === '=>' || str === '**') {\n                    this.index += 2;\n                  } else {\n                    // 1-character punctuators.\n                    str = this.source[this.index];\n\n                    if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {\n                      ++this.index;\n                    }\n                  }\n                }\n              }\n\n          }\n\n          if (this.index === start) {\n            this.throwUnexpectedToken();\n          }\n\n          return {\n            type: 7\n            /* Punctuator */\n            ,\n            value: str,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        }; // https://tc39.github.io/ecma262/#sec-literals-numeric-literals\n\n\n        Scanner.prototype.scanHexLiteral = function (start) {\n          var num = '';\n\n          while (!this.eof()) {\n            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n              break;\n            }\n\n            num += this.source[this.index++];\n          }\n\n          if (num.length === 0) {\n            this.throwUnexpectedToken();\n          }\n\n          if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n            this.throwUnexpectedToken();\n          }\n\n          return {\n            type: 6\n            /* NumericLiteral */\n            ,\n            value: parseInt('0x' + num, 16),\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n\n        Scanner.prototype.scanBinaryLiteral = function (start) {\n          var num = '';\n          var ch;\n\n          while (!this.eof()) {\n            ch = this.source[this.index];\n\n            if (ch !== '0' && ch !== '1') {\n              break;\n            }\n\n            num += this.source[this.index++];\n          }\n\n          if (num.length === 0) {\n            // only 0b or 0B\n            this.throwUnexpectedToken();\n          }\n\n          if (!this.eof()) {\n            ch = this.source.charCodeAt(this.index);\n            /* istanbul ignore else */\n\n            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {\n              this.throwUnexpectedToken();\n            }\n          }\n\n          return {\n            type: 6\n            /* NumericLiteral */\n            ,\n            value: parseInt(num, 2),\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n\n        Scanner.prototype.scanOctalLiteral = function (prefix, start) {\n          var num = '';\n          var octal = false;\n\n          if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {\n            octal = true;\n            num = '0' + this.source[this.index++];\n          } else {\n            ++this.index;\n          }\n\n          while (!this.eof()) {\n            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n              break;\n            }\n\n            num += this.source[this.index++];\n          }\n\n          if (!octal && num.length === 0) {\n            // only 0o or 0O\n            this.throwUnexpectedToken();\n          }\n\n          if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n            this.throwUnexpectedToken();\n          }\n\n          return {\n            type: 6\n            /* NumericLiteral */\n            ,\n            value: parseInt(num, 8),\n            octal: octal,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n\n        Scanner.prototype.isImplicitOctalLiteral = function () {\n          // Implicit octal, unless there is a non-octal digit.\n          // (Annex B.1.1 on Numeric Literals)\n          for (var i = this.index + 1; i < this.length; ++i) {\n            var ch = this.source[i];\n\n            if (ch === '8' || ch === '9') {\n              return false;\n            }\n\n            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n              return true;\n            }\n          }\n\n          return true;\n        };\n\n        Scanner.prototype.scanNumericLiteral = function () {\n          var start = this.index;\n          var ch = this.source[start];\n          assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || ch === '.', 'Numeric literal must start with a decimal digit or a decimal point');\n          var num = '';\n\n          if (ch !== '.') {\n            num = this.source[this.index++];\n            ch = this.source[this.index]; // Hex number starts with '0x'.\n            // Octal number starts with '0'.\n            // Octal number in ES6 starts with '0o'.\n            // Binary number in ES6 starts with '0b'.\n\n            if (num === '0') {\n              if (ch === 'x' || ch === 'X') {\n                ++this.index;\n                return this.scanHexLiteral(start);\n              }\n\n              if (ch === 'b' || ch === 'B') {\n                ++this.index;\n                return this.scanBinaryLiteral(start);\n              }\n\n              if (ch === 'o' || ch === 'O') {\n                return this.scanOctalLiteral(ch, start);\n              }\n\n              if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n                if (this.isImplicitOctalLiteral()) {\n                  return this.scanOctalLiteral(ch, start);\n                }\n              }\n            }\n\n            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n              num += this.source[this.index++];\n            }\n\n            ch = this.source[this.index];\n          }\n\n          if (ch === '.') {\n            num += this.source[this.index++];\n\n            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n              num += this.source[this.index++];\n            }\n\n            ch = this.source[this.index];\n          }\n\n          if (ch === 'e' || ch === 'E') {\n            num += this.source[this.index++];\n            ch = this.source[this.index];\n\n            if (ch === '+' || ch === '-') {\n              num += this.source[this.index++];\n            }\n\n            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n              while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n                num += this.source[this.index++];\n              }\n            } else {\n              this.throwUnexpectedToken();\n            }\n          }\n\n          if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n            this.throwUnexpectedToken();\n          }\n\n          return {\n            type: 6\n            /* NumericLiteral */\n            ,\n            value: parseFloat(num),\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        }; // https://tc39.github.io/ecma262/#sec-literals-string-literals\n\n\n        Scanner.prototype.scanStringLiteral = function () {\n          var start = this.index;\n          var quote = this.source[start];\n          assert_1.assert(quote === '\\'' || quote === '\"', 'String literal must starts with a quote');\n          ++this.index;\n          var octal = false;\n          var str = '';\n\n          while (!this.eof()) {\n            var ch = this.source[this.index++];\n\n            if (ch === quote) {\n              quote = '';\n              break;\n            } else if (ch === '\\\\') {\n              ch = this.source[this.index++];\n\n              if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n                switch (ch) {\n                  case 'u':\n                    if (this.source[this.index] === '{') {\n                      ++this.index;\n                      str += this.scanUnicodeCodePointEscape();\n                    } else {\n                      var unescaped_1 = this.scanHexEscape(ch);\n\n                      if (unescaped_1 === null) {\n                        this.throwUnexpectedToken();\n                      }\n\n                      str += unescaped_1;\n                    }\n\n                    break;\n\n                  case 'x':\n                    var unescaped = this.scanHexEscape(ch);\n\n                    if (unescaped === null) {\n                      this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);\n                    }\n\n                    str += unescaped;\n                    break;\n\n                  case 'n':\n                    str += '\\n';\n                    break;\n\n                  case 'r':\n                    str += '\\r';\n                    break;\n\n                  case 't':\n                    str += '\\t';\n                    break;\n\n                  case 'b':\n                    str += '\\b';\n                    break;\n\n                  case 'f':\n                    str += '\\f';\n                    break;\n\n                  case 'v':\n                    str += '\\x0B';\n                    break;\n\n                  case '8':\n                  case '9':\n                    str += ch;\n                    this.tolerateUnexpectedToken();\n                    break;\n\n                  default:\n                    if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n                      var octToDec = this.octalToDecimal(ch);\n                      octal = octToDec.octal || octal;\n                      str += String.fromCharCode(octToDec.code);\n                    } else {\n                      str += ch;\n                    }\n\n                    break;\n                }\n              } else {\n                ++this.lineNumber;\n\n                if (ch === '\\r' && this.source[this.index] === '\\n') {\n                  ++this.index;\n                }\n\n                this.lineStart = this.index;\n              }\n            } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n              break;\n            } else {\n              str += ch;\n            }\n          }\n\n          if (quote !== '') {\n            this.index = start;\n            this.throwUnexpectedToken();\n          }\n\n          return {\n            type: 8\n            /* StringLiteral */\n            ,\n            value: str,\n            octal: octal,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        }; // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components\n\n\n        Scanner.prototype.scanTemplate = function () {\n          var cooked = '';\n          var terminated = false;\n          var start = this.index;\n          var head = this.source[start] === '`';\n          var tail = false;\n          var rawOffset = 2;\n          ++this.index;\n\n          while (!this.eof()) {\n            var ch = this.source[this.index++];\n\n            if (ch === '`') {\n              rawOffset = 1;\n              tail = true;\n              terminated = true;\n              break;\n            } else if (ch === '$') {\n              if (this.source[this.index] === '{') {\n                this.curlyStack.push('${');\n                ++this.index;\n                terminated = true;\n                break;\n              }\n\n              cooked += ch;\n            } else if (ch === '\\\\') {\n              ch = this.source[this.index++];\n\n              if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n                switch (ch) {\n                  case 'n':\n                    cooked += '\\n';\n                    break;\n\n                  case 'r':\n                    cooked += '\\r';\n                    break;\n\n                  case 't':\n                    cooked += '\\t';\n                    break;\n\n                  case 'u':\n                    if (this.source[this.index] === '{') {\n                      ++this.index;\n                      cooked += this.scanUnicodeCodePointEscape();\n                    } else {\n                      var restore = this.index;\n                      var unescaped_2 = this.scanHexEscape(ch);\n\n                      if (unescaped_2 !== null) {\n                        cooked += unescaped_2;\n                      } else {\n                        this.index = restore;\n                        cooked += ch;\n                      }\n                    }\n\n                    break;\n\n                  case 'x':\n                    var unescaped = this.scanHexEscape(ch);\n\n                    if (unescaped === null) {\n                      this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);\n                    }\n\n                    cooked += unescaped;\n                    break;\n\n                  case 'b':\n                    cooked += '\\b';\n                    break;\n\n                  case 'f':\n                    cooked += '\\f';\n                    break;\n\n                  case 'v':\n                    cooked += '\\v';\n                    break;\n\n                  default:\n                    if (ch === '0') {\n                      if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n                        // Illegal: \\01 \\02 and so on\n                        this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n                      }\n\n                      cooked += '\\0';\n                    } else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n                      // Illegal: \\1 \\2\n                      this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n                    } else {\n                      cooked += ch;\n                    }\n\n                    break;\n                }\n              } else {\n                ++this.lineNumber;\n\n                if (ch === '\\r' && this.source[this.index] === '\\n') {\n                  ++this.index;\n                }\n\n                this.lineStart = this.index;\n              }\n            } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n              ++this.lineNumber;\n\n              if (ch === '\\r' && this.source[this.index] === '\\n') {\n                ++this.index;\n              }\n\n              this.lineStart = this.index;\n              cooked += '\\n';\n            } else {\n              cooked += ch;\n            }\n          }\n\n          if (!terminated) {\n            this.throwUnexpectedToken();\n          }\n\n          if (!head) {\n            this.curlyStack.pop();\n          }\n\n          return {\n            type: 10\n            /* Template */\n            ,\n            value: this.source.slice(start + 1, this.index - rawOffset),\n            cooked: cooked,\n            head: head,\n            tail: tail,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        }; // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals\n\n\n        Scanner.prototype.testRegExp = function (pattern, flags) {\n          // The BMP character to use as a replacement for astral symbols when\n          // translating an ES6 \"u\"-flagged pattern to an ES5-compatible\n          // approximation.\n          // Note: replacing with '\\uFFFF' enables false positives in unlikely\n          // scenarios. For example, `[\\u{1044f}-\\u{10440}]` is an invalid\n          // pattern that would not be detected by this substitution.\n          var astralSubstitute = '\\uFFFF';\n          var tmp = pattern;\n          var self = this;\n\n          if (flags.indexOf('u') >= 0) {\n            tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}|\\\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {\n              var codePoint = parseInt($1 || $2, 16);\n\n              if (codePoint > 0x10FFFF) {\n                self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n              }\n\n              if (codePoint <= 0xFFFF) {\n                return String.fromCharCode(codePoint);\n              }\n\n              return astralSubstitute;\n            }).replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, astralSubstitute);\n          } // First, detect invalid regular expressions.\n\n\n          try {\n            RegExp(tmp);\n          } catch (e) {\n            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n          } // Return a regular expression object for this pattern-flag pair, or\n          // `null` in case the current environment doesn't support the flags it\n          // uses.\n\n\n          try {\n            return new RegExp(pattern, flags);\n          } catch (exception) {\n            /* istanbul ignore next */\n            return null;\n          }\n        };\n\n        Scanner.prototype.scanRegExpBody = function () {\n          var ch = this.source[this.index];\n          assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');\n          var str = this.source[this.index++];\n          var classMarker = false;\n          var terminated = false;\n\n          while (!this.eof()) {\n            ch = this.source[this.index++];\n            str += ch;\n\n            if (ch === '\\\\') {\n              ch = this.source[this.index++]; // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals\n\n              if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n              }\n\n              str += ch;\n            } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n              this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n            } else if (classMarker) {\n              if (ch === ']') {\n                classMarker = false;\n              }\n            } else {\n              if (ch === '/') {\n                terminated = true;\n                break;\n              } else if (ch === '[') {\n                classMarker = true;\n              }\n            }\n          }\n\n          if (!terminated) {\n            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n          } // Exclude leading and trailing slash.\n\n\n          return str.substr(1, str.length - 2);\n        };\n\n        Scanner.prototype.scanRegExpFlags = function () {\n          var str = '';\n          var flags = '';\n\n          while (!this.eof()) {\n            var ch = this.source[this.index];\n\n            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {\n              break;\n            }\n\n            ++this.index;\n\n            if (ch === '\\\\' && !this.eof()) {\n              ch = this.source[this.index];\n\n              if (ch === 'u') {\n                ++this.index;\n                var restore = this.index;\n                var char = this.scanHexEscape('u');\n\n                if (char !== null) {\n                  flags += char;\n\n                  for (str += '\\\\u'; restore < this.index; ++restore) {\n                    str += this.source[restore];\n                  }\n                } else {\n                  this.index = restore;\n                  flags += 'u';\n                  str += '\\\\u';\n                }\n\n                this.tolerateUnexpectedToken();\n              } else {\n                str += '\\\\';\n                this.tolerateUnexpectedToken();\n              }\n            } else {\n              flags += ch;\n              str += ch;\n            }\n          }\n\n          return flags;\n        };\n\n        Scanner.prototype.scanRegExp = function () {\n          var start = this.index;\n          var pattern = this.scanRegExpBody();\n          var flags = this.scanRegExpFlags();\n          var value = this.testRegExp(pattern, flags);\n          return {\n            type: 9\n            /* RegularExpression */\n            ,\n            value: '',\n            pattern: pattern,\n            flags: flags,\n            regex: value,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n\n        Scanner.prototype.lex = function () {\n          if (this.eof()) {\n            return {\n              type: 2\n              /* EOF */\n              ,\n              value: '',\n              lineNumber: this.lineNumber,\n              lineStart: this.lineStart,\n              start: this.index,\n              end: this.index\n            };\n          }\n\n          var cp = this.source.charCodeAt(this.index);\n\n          if (character_1.Character.isIdentifierStart(cp)) {\n            return this.scanIdentifier();\n          } // Very common: ( and ) and ;\n\n\n          if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {\n            return this.scanPunctuator();\n          } // String literal starts with single quote (U+0027) or double quote (U+0022).\n\n\n          if (cp === 0x27 || cp === 0x22) {\n            return this.scanStringLiteral();\n          } // Dot (.) U+002E can also start a floating-point number, hence the need\n          // to check the next character.\n\n\n          if (cp === 0x2E) {\n            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {\n              return this.scanNumericLiteral();\n            }\n\n            return this.scanPunctuator();\n          }\n\n          if (character_1.Character.isDecimalDigit(cp)) {\n            return this.scanNumericLiteral();\n          } // Template literals start with ` (U+0060) for template head\n          // or } (U+007D) for template middle or template tail.\n\n\n          if (cp === 0x60 || cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${') {\n            return this.scanTemplate();\n          } // Possible identifier start in a surrogate pair.\n\n\n          if (cp >= 0xD800 && cp < 0xDFFF) {\n            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {\n              return this.scanIdentifier();\n            }\n          }\n\n          return this.scanPunctuator();\n        };\n\n        return Scanner;\n      }();\n\n      exports.Scanner = Scanner;\n      /***/\n    },\n    /* 13 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.TokenName = {};\n      exports.TokenName[1\n      /* BooleanLiteral */\n      ] = 'Boolean';\n      exports.TokenName[2\n      /* EOF */\n      ] = '<end>';\n      exports.TokenName[3\n      /* Identifier */\n      ] = 'Identifier';\n      exports.TokenName[4\n      /* Keyword */\n      ] = 'Keyword';\n      exports.TokenName[5\n      /* NullLiteral */\n      ] = 'Null';\n      exports.TokenName[6\n      /* NumericLiteral */\n      ] = 'Numeric';\n      exports.TokenName[7\n      /* Punctuator */\n      ] = 'Punctuator';\n      exports.TokenName[8\n      /* StringLiteral */\n      ] = 'String';\n      exports.TokenName[9\n      /* RegularExpression */\n      ] = 'RegularExpression';\n      exports.TokenName[10\n      /* Template */\n      ] = 'Template';\n      /***/\n    },\n    /* 14 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\"; // Generated by generate-xhtml-entities.js. DO NOT MODIFY!\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.XHTMLEntities = {\n        quot: '\\u0022',\n        amp: '\\u0026',\n        apos: '\\u0027',\n        gt: '\\u003E',\n        nbsp: '\\u00A0',\n        iexcl: '\\u00A1',\n        cent: '\\u00A2',\n        pound: '\\u00A3',\n        curren: '\\u00A4',\n        yen: '\\u00A5',\n        brvbar: '\\u00A6',\n        sect: '\\u00A7',\n        uml: '\\u00A8',\n        copy: '\\u00A9',\n        ordf: '\\u00AA',\n        laquo: '\\u00AB',\n        not: '\\u00AC',\n        shy: '\\u00AD',\n        reg: '\\u00AE',\n        macr: '\\u00AF',\n        deg: '\\u00B0',\n        plusmn: '\\u00B1',\n        sup2: '\\u00B2',\n        sup3: '\\u00B3',\n        acute: '\\u00B4',\n        micro: '\\u00B5',\n        para: '\\u00B6',\n        middot: '\\u00B7',\n        cedil: '\\u00B8',\n        sup1: '\\u00B9',\n        ordm: '\\u00BA',\n        raquo: '\\u00BB',\n        frac14: '\\u00BC',\n        frac12: '\\u00BD',\n        frac34: '\\u00BE',\n        iquest: '\\u00BF',\n        Agrave: '\\u00C0',\n        Aacute: '\\u00C1',\n        Acirc: '\\u00C2',\n        Atilde: '\\u00C3',\n        Auml: '\\u00C4',\n        Aring: '\\u00C5',\n        AElig: '\\u00C6',\n        Ccedil: '\\u00C7',\n        Egrave: '\\u00C8',\n        Eacute: '\\u00C9',\n        Ecirc: '\\u00CA',\n        Euml: '\\u00CB',\n        Igrave: '\\u00CC',\n        Iacute: '\\u00CD',\n        Icirc: '\\u00CE',\n        Iuml: '\\u00CF',\n        ETH: '\\u00D0',\n        Ntilde: '\\u00D1',\n        Ograve: '\\u00D2',\n        Oacute: '\\u00D3',\n        Ocirc: '\\u00D4',\n        Otilde: '\\u00D5',\n        Ouml: '\\u00D6',\n        times: '\\u00D7',\n        Oslash: '\\u00D8',\n        Ugrave: '\\u00D9',\n        Uacute: '\\u00DA',\n        Ucirc: '\\u00DB',\n        Uuml: '\\u00DC',\n        Yacute: '\\u00DD',\n        THORN: '\\u00DE',\n        szlig: '\\u00DF',\n        agrave: '\\u00E0',\n        aacute: '\\u00E1',\n        acirc: '\\u00E2',\n        atilde: '\\u00E3',\n        auml: '\\u00E4',\n        aring: '\\u00E5',\n        aelig: '\\u00E6',\n        ccedil: '\\u00E7',\n        egrave: '\\u00E8',\n        eacute: '\\u00E9',\n        ecirc: '\\u00EA',\n        euml: '\\u00EB',\n        igrave: '\\u00EC',\n        iacute: '\\u00ED',\n        icirc: '\\u00EE',\n        iuml: '\\u00EF',\n        eth: '\\u00F0',\n        ntilde: '\\u00F1',\n        ograve: '\\u00F2',\n        oacute: '\\u00F3',\n        ocirc: '\\u00F4',\n        otilde: '\\u00F5',\n        ouml: '\\u00F6',\n        divide: '\\u00F7',\n        oslash: '\\u00F8',\n        ugrave: '\\u00F9',\n        uacute: '\\u00FA',\n        ucirc: '\\u00FB',\n        uuml: '\\u00FC',\n        yacute: '\\u00FD',\n        thorn: '\\u00FE',\n        yuml: '\\u00FF',\n        OElig: '\\u0152',\n        oelig: '\\u0153',\n        Scaron: '\\u0160',\n        scaron: '\\u0161',\n        Yuml: '\\u0178',\n        fnof: '\\u0192',\n        circ: '\\u02C6',\n        tilde: '\\u02DC',\n        Alpha: '\\u0391',\n        Beta: '\\u0392',\n        Gamma: '\\u0393',\n        Delta: '\\u0394',\n        Epsilon: '\\u0395',\n        Zeta: '\\u0396',\n        Eta: '\\u0397',\n        Theta: '\\u0398',\n        Iota: '\\u0399',\n        Kappa: '\\u039A',\n        Lambda: '\\u039B',\n        Mu: '\\u039C',\n        Nu: '\\u039D',\n        Xi: '\\u039E',\n        Omicron: '\\u039F',\n        Pi: '\\u03A0',\n        Rho: '\\u03A1',\n        Sigma: '\\u03A3',\n        Tau: '\\u03A4',\n        Upsilon: '\\u03A5',\n        Phi: '\\u03A6',\n        Chi: '\\u03A7',\n        Psi: '\\u03A8',\n        Omega: '\\u03A9',\n        alpha: '\\u03B1',\n        beta: '\\u03B2',\n        gamma: '\\u03B3',\n        delta: '\\u03B4',\n        epsilon: '\\u03B5',\n        zeta: '\\u03B6',\n        eta: '\\u03B7',\n        theta: '\\u03B8',\n        iota: '\\u03B9',\n        kappa: '\\u03BA',\n        lambda: '\\u03BB',\n        mu: '\\u03BC',\n        nu: '\\u03BD',\n        xi: '\\u03BE',\n        omicron: '\\u03BF',\n        pi: '\\u03C0',\n        rho: '\\u03C1',\n        sigmaf: '\\u03C2',\n        sigma: '\\u03C3',\n        tau: '\\u03C4',\n        upsilon: '\\u03C5',\n        phi: '\\u03C6',\n        chi: '\\u03C7',\n        psi: '\\u03C8',\n        omega: '\\u03C9',\n        thetasym: '\\u03D1',\n        upsih: '\\u03D2',\n        piv: '\\u03D6',\n        ensp: '\\u2002',\n        emsp: '\\u2003',\n        thinsp: '\\u2009',\n        zwnj: '\\u200C',\n        zwj: '\\u200D',\n        lrm: '\\u200E',\n        rlm: '\\u200F',\n        ndash: '\\u2013',\n        mdash: '\\u2014',\n        lsquo: '\\u2018',\n        rsquo: '\\u2019',\n        sbquo: '\\u201A',\n        ldquo: '\\u201C',\n        rdquo: '\\u201D',\n        bdquo: '\\u201E',\n        dagger: '\\u2020',\n        Dagger: '\\u2021',\n        bull: '\\u2022',\n        hellip: '\\u2026',\n        permil: '\\u2030',\n        prime: '\\u2032',\n        Prime: '\\u2033',\n        lsaquo: '\\u2039',\n        rsaquo: '\\u203A',\n        oline: '\\u203E',\n        frasl: '\\u2044',\n        euro: '\\u20AC',\n        image: '\\u2111',\n        weierp: '\\u2118',\n        real: '\\u211C',\n        trade: '\\u2122',\n        alefsym: '\\u2135',\n        larr: '\\u2190',\n        uarr: '\\u2191',\n        rarr: '\\u2192',\n        darr: '\\u2193',\n        harr: '\\u2194',\n        crarr: '\\u21B5',\n        lArr: '\\u21D0',\n        uArr: '\\u21D1',\n        rArr: '\\u21D2',\n        dArr: '\\u21D3',\n        hArr: '\\u21D4',\n        forall: '\\u2200',\n        part: '\\u2202',\n        exist: '\\u2203',\n        empty: '\\u2205',\n        nabla: '\\u2207',\n        isin: '\\u2208',\n        notin: '\\u2209',\n        ni: '\\u220B',\n        prod: '\\u220F',\n        sum: '\\u2211',\n        minus: '\\u2212',\n        lowast: '\\u2217',\n        radic: '\\u221A',\n        prop: '\\u221D',\n        infin: '\\u221E',\n        ang: '\\u2220',\n        and: '\\u2227',\n        or: '\\u2228',\n        cap: '\\u2229',\n        cup: '\\u222A',\n        int: '\\u222B',\n        there4: '\\u2234',\n        sim: '\\u223C',\n        cong: '\\u2245',\n        asymp: '\\u2248',\n        ne: '\\u2260',\n        equiv: '\\u2261',\n        le: '\\u2264',\n        ge: '\\u2265',\n        sub: '\\u2282',\n        sup: '\\u2283',\n        nsub: '\\u2284',\n        sube: '\\u2286',\n        supe: '\\u2287',\n        oplus: '\\u2295',\n        otimes: '\\u2297',\n        perp: '\\u22A5',\n        sdot: '\\u22C5',\n        lceil: '\\u2308',\n        rceil: '\\u2309',\n        lfloor: '\\u230A',\n        rfloor: '\\u230B',\n        loz: '\\u25CA',\n        spades: '\\u2660',\n        clubs: '\\u2663',\n        hearts: '\\u2665',\n        diams: '\\u2666',\n        lang: '\\u27E8',\n        rang: '\\u27E9'\n      };\n      /***/\n    },\n    /* 15 */\n\n    /***/\n    function (module, exports, __nested_webpack_require_277271__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var error_handler_1 = __nested_webpack_require_277271__(10);\n\n      var scanner_1 = __nested_webpack_require_277271__(12);\n\n      var token_1 = __nested_webpack_require_277271__(13);\n\n      var Reader = function () {\n        function Reader() {\n          this.values = [];\n          this.curly = this.paren = -1;\n        } // A function following one of those tokens is an expression.\n\n\n        Reader.prototype.beforeFunctionExpression = function (t) {\n          return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new', 'return', 'case', 'delete', 'throw', 'void', // assignment operators\n          '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=', '&=', '|=', '^=', ',', // binary/unary operators\n          '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&', '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=', '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;\n        }; // Determine if forward slash (/) is an operator or part of a regular expression\n        // https://github.com/mozilla/sweet.js/wiki/design\n\n\n        Reader.prototype.isRegexStart = function () {\n          var previous = this.values[this.values.length - 1];\n          var regex = previous !== null;\n\n          switch (previous) {\n            case 'this':\n            case ']':\n              regex = false;\n              break;\n\n            case ')':\n              var keyword = this.values[this.paren - 1];\n              regex = keyword === 'if' || keyword === 'while' || keyword === 'for' || keyword === 'with';\n              break;\n\n            case '}':\n              // Dividing a function by anything makes little sense,\n              // but we have to check for that.\n              regex = false;\n\n              if (this.values[this.curly - 3] === 'function') {\n                // Anonymous function, e.g. function(){} /42\n                var check = this.values[this.curly - 4];\n                regex = check ? !this.beforeFunctionExpression(check) : false;\n              } else if (this.values[this.curly - 4] === 'function') {\n                // Named function, e.g. function f(){} /42/\n                var check = this.values[this.curly - 5];\n                regex = check ? !this.beforeFunctionExpression(check) : true;\n              }\n\n              break;\n\n            default:\n              break;\n          }\n\n          return regex;\n        };\n\n        Reader.prototype.push = function (token) {\n          if (token.type === 7\n          /* Punctuator */\n          || token.type === 4\n          /* Keyword */\n          ) {\n            if (token.value === '{') {\n              this.curly = this.values.length;\n            } else if (token.value === '(') {\n              this.paren = this.values.length;\n            }\n\n            this.values.push(token.value);\n          } else {\n            this.values.push(null);\n          }\n        };\n\n        return Reader;\n      }();\n\n      var Tokenizer = function () {\n        function Tokenizer(code, config) {\n          this.errorHandler = new error_handler_1.ErrorHandler();\n          this.errorHandler.tolerant = config ? typeof config.tolerant === 'boolean' && config.tolerant : false;\n          this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n          this.scanner.trackComment = config ? typeof config.comment === 'boolean' && config.comment : false;\n          this.trackRange = config ? typeof config.range === 'boolean' && config.range : false;\n          this.trackLoc = config ? typeof config.loc === 'boolean' && config.loc : false;\n          this.buffer = [];\n          this.reader = new Reader();\n        }\n\n        Tokenizer.prototype.errors = function () {\n          return this.errorHandler.errors;\n        };\n\n        Tokenizer.prototype.getNextToken = function () {\n          if (this.buffer.length === 0) {\n            var comments = this.scanner.scanComments();\n\n            if (this.scanner.trackComment) {\n              for (var i = 0; i < comments.length; ++i) {\n                var e = comments[i];\n                var value = this.scanner.source.slice(e.slice[0], e.slice[1]);\n                var comment = {\n                  type: e.multiLine ? 'BlockComment' : 'LineComment',\n                  value: value\n                };\n\n                if (this.trackRange) {\n                  comment.range = e.range;\n                }\n\n                if (this.trackLoc) {\n                  comment.loc = e.loc;\n                }\n\n                this.buffer.push(comment);\n              }\n            }\n\n            if (!this.scanner.eof()) {\n              var loc = void 0;\n\n              if (this.trackLoc) {\n                loc = {\n                  start: {\n                    line: this.scanner.lineNumber,\n                    column: this.scanner.index - this.scanner.lineStart\n                  },\n                  end: {}\n                };\n              }\n\n              var startRegex = this.scanner.source[this.scanner.index] === '/' && this.reader.isRegexStart();\n              var token = startRegex ? this.scanner.scanRegExp() : this.scanner.lex();\n              this.reader.push(token);\n              var entry = {\n                type: token_1.TokenName[token.type],\n                value: this.scanner.source.slice(token.start, token.end)\n              };\n\n              if (this.trackRange) {\n                entry.range = [token.start, token.end];\n              }\n\n              if (this.trackLoc) {\n                loc.end = {\n                  line: this.scanner.lineNumber,\n                  column: this.scanner.index - this.scanner.lineStart\n                };\n                entry.loc = loc;\n              }\n\n              if (token.type === 9\n              /* RegularExpression */\n              ) {\n                var pattern = token.pattern;\n                var flags = token.flags;\n                entry.regex = {\n                  pattern: pattern,\n                  flags: flags\n                };\n              }\n\n              this.buffer.push(entry);\n            }\n          }\n\n          return this.buffer.shift();\n        };\n\n        return Tokenizer;\n      }();\n\n      exports.Tokenizer = Tokenizer;\n      /***/\n    }\n    /******/\n    ])\n  );\n});\n\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/esprima/dist/esprima.js\n");

/***/ }),

/***/ "./node_modules/front-matter/index.js":
/*!********************************************!*\
  !*** ./node_modules/front-matter/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var parser = __webpack_require__(/*! js-yaml */ \"./node_modules/js-yaml/index.js\");\n\nvar optionalByteOrderMark = '\\\\ufeff?';\nvar platform = typeof process !== 'undefined' ? process.platform : '';\nvar pattern = '^(' + optionalByteOrderMark + '(= yaml =|---)' + '$([\\\\s\\\\S]*?)' + '^(?:\\\\2|\\\\.\\\\.\\\\.)\\\\s*' + '$' + (platform === 'win32' ? '\\\\r?' : '') + '(?:\\\\n)?)'; // NOTE: If this pattern uses the 'g' flag the `regex` variable definition will\n// need to be moved down into the functions that use it.\n\nvar regex = new RegExp(pattern, 'm');\nmodule.exports = extractor;\nmodule.exports.test = test;\n\nfunction extractor(string, options) {\n  string = string || '';\n  var defaultOptions = {\n    allowUnsafe: false\n  };\n  options = options instanceof Object ? { ...defaultOptions,\n    ...options\n  } : defaultOptions;\n  options.allowUnsafe = Boolean(options.allowUnsafe);\n  var lines = string.split(/(\\r?\\n)/);\n\n  if (lines[0] && /= yaml =|---/.test(lines[0])) {\n    return parse(string, options.allowUnsafe);\n  } else {\n    return {\n      attributes: {},\n      body: string,\n      bodyBegin: 1\n    };\n  }\n}\n\nfunction computeLocation(match, body) {\n  var line = 1;\n  var pos = body.indexOf('\\n');\n  var offset = match.index + match[0].length;\n\n  while (pos !== -1) {\n    if (pos >= offset) {\n      return line;\n    }\n\n    line++;\n    pos = body.indexOf('\\n', pos + 1);\n  }\n\n  return line;\n}\n\nfunction parse(string, allowUnsafe) {\n  var match = regex.exec(string);\n\n  if (!match) {\n    return {\n      attributes: {},\n      body: string,\n      bodyBegin: 1\n    };\n  }\n\n  var loader = allowUnsafe ? parser.load : parser.safeLoad;\n  var yaml = match[match.length - 1].replace(/^\\s+|\\s+$/g, '');\n  var attributes = loader(yaml) || {};\n  var body = string.replace(match[0], '');\n  var line = computeLocation(match, string);\n  return {\n    attributes: attributes,\n    body: body,\n    bodyBegin: line,\n    frontmatter: yaml\n  };\n}\n\nfunction test(string) {\n  string = string || '';\n  return regex.test(string);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZnJvbnQtbWF0dGVyL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQyxnREFBRCxDQUFwQjs7QUFDQSxJQUFJQyxxQkFBcUIsR0FBRyxVQUE1QjtBQUNBLElBQUlDLFFBQVEsR0FBRyxPQUFPQyxPQUFQLEtBQW1CLFdBQW5CLEdBQWlDQSxPQUFPLENBQUNELFFBQXpDLEdBQW9ELEVBQW5FO0FBQ0EsSUFBSUUsT0FBTyxHQUFHLE9BQ1pILHFCQURZLEdBRVosZ0JBRlksR0FHWixlQUhZLEdBSVosd0JBSlksR0FLWixHQUxZLElBTVhDLFFBQVEsS0FBSyxPQUFiLEdBQXVCLE1BQXZCLEdBQWdDLEVBTnJCLElBT1osV0FQRixDLENBUUE7QUFDQTs7QUFDQSxJQUFJRyxLQUFLLEdBQUcsSUFBSUMsTUFBSixDQUFXRixPQUFYLEVBQW9CLEdBQXBCLENBQVo7QUFFQUcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCQyxTQUFqQjtBQUNBRixtQkFBQSxHQUFzQkcsSUFBdEI7O0FBRUEsU0FBU0QsU0FBVCxDQUFvQkUsTUFBcEIsRUFBNEJDLE9BQTVCLEVBQXFDO0FBQ25DRCxFQUFBQSxNQUFNLEdBQUdBLE1BQU0sSUFBSSxFQUFuQjtBQUNBLE1BQUlFLGNBQWMsR0FBRztBQUFFQyxJQUFBQSxXQUFXLEVBQUU7QUFBZixHQUFyQjtBQUNBRixFQUFBQSxPQUFPLEdBQUdBLE9BQU8sWUFBWUcsTUFBbkIsR0FBNEIsRUFBRSxHQUFHRixjQUFMO0FBQXFCLE9BQUdEO0FBQXhCLEdBQTVCLEdBQWdFQyxjQUExRTtBQUNBRCxFQUFBQSxPQUFPLENBQUNFLFdBQVIsR0FBc0JFLE9BQU8sQ0FBQ0osT0FBTyxDQUFDRSxXQUFULENBQTdCO0FBQ0EsTUFBSUcsS0FBSyxHQUFHTixNQUFNLENBQUNPLEtBQVAsQ0FBYSxTQUFiLENBQVo7O0FBQ0EsTUFBSUQsS0FBSyxDQUFDLENBQUQsQ0FBTCxJQUFZLGVBQWVQLElBQWYsQ0FBb0JPLEtBQUssQ0FBQyxDQUFELENBQXpCLENBQWhCLEVBQStDO0FBQzdDLFdBQU9FLEtBQUssQ0FBQ1IsTUFBRCxFQUFTQyxPQUFPLENBQUNFLFdBQWpCLENBQVo7QUFDRCxHQUZELE1BRU87QUFDTCxXQUFPO0FBQ0xNLE1BQUFBLFVBQVUsRUFBRSxFQURQO0FBRUxDLE1BQUFBLElBQUksRUFBRVYsTUFGRDtBQUdMVyxNQUFBQSxTQUFTLEVBQUU7QUFITixLQUFQO0FBS0Q7QUFDRjs7QUFFRCxTQUFTQyxlQUFULENBQTBCQyxLQUExQixFQUFpQ0gsSUFBakMsRUFBdUM7QUFDckMsTUFBSUksSUFBSSxHQUFHLENBQVg7QUFDQSxNQUFJQyxHQUFHLEdBQUdMLElBQUksQ0FBQ00sT0FBTCxDQUFhLElBQWIsQ0FBVjtBQUNBLE1BQUlDLE1BQU0sR0FBR0osS0FBSyxDQUFDSyxLQUFOLEdBQWNMLEtBQUssQ0FBQyxDQUFELENBQUwsQ0FBU00sTUFBcEM7O0FBRUEsU0FBT0osR0FBRyxLQUFLLENBQUMsQ0FBaEIsRUFBbUI7QUFDakIsUUFBSUEsR0FBRyxJQUFJRSxNQUFYLEVBQW1CO0FBQ2pCLGFBQU9ILElBQVA7QUFDRDs7QUFDREEsSUFBQUEsSUFBSTtBQUNKQyxJQUFBQSxHQUFHLEdBQUdMLElBQUksQ0FBQ00sT0FBTCxDQUFhLElBQWIsRUFBbUJELEdBQUcsR0FBRyxDQUF6QixDQUFOO0FBQ0Q7O0FBRUQsU0FBT0QsSUFBUDtBQUNEOztBQUVELFNBQVNOLEtBQVQsQ0FBZ0JSLE1BQWhCLEVBQXdCRyxXQUF4QixFQUFxQztBQUNuQyxNQUFJVSxLQUFLLEdBQUduQixLQUFLLENBQUMwQixJQUFOLENBQVdwQixNQUFYLENBQVo7O0FBQ0EsTUFBSSxDQUFDYSxLQUFMLEVBQVk7QUFDVixXQUFPO0FBQ0xKLE1BQUFBLFVBQVUsRUFBRSxFQURQO0FBRUxDLE1BQUFBLElBQUksRUFBRVYsTUFGRDtBQUdMVyxNQUFBQSxTQUFTLEVBQUU7QUFITixLQUFQO0FBS0Q7O0FBRUQsTUFBSVUsTUFBTSxHQUFHbEIsV0FBVyxHQUFHZixNQUFNLENBQUNrQyxJQUFWLEdBQWlCbEMsTUFBTSxDQUFDbUMsUUFBaEQ7QUFDQSxNQUFJQyxJQUFJLEdBQUdYLEtBQUssQ0FBQ0EsS0FBSyxDQUFDTSxNQUFOLEdBQWUsQ0FBaEIsQ0FBTCxDQUF3Qk0sT0FBeEIsQ0FBZ0MsWUFBaEMsRUFBOEMsRUFBOUMsQ0FBWDtBQUNBLE1BQUloQixVQUFVLEdBQUdZLE1BQU0sQ0FBQ0csSUFBRCxDQUFOLElBQWdCLEVBQWpDO0FBQ0EsTUFBSWQsSUFBSSxHQUFHVixNQUFNLENBQUN5QixPQUFQLENBQWVaLEtBQUssQ0FBQyxDQUFELENBQXBCLEVBQXlCLEVBQXpCLENBQVg7QUFDQSxNQUFJQyxJQUFJLEdBQUdGLGVBQWUsQ0FBQ0MsS0FBRCxFQUFRYixNQUFSLENBQTFCO0FBRUEsU0FBTztBQUNMUyxJQUFBQSxVQUFVLEVBQUVBLFVBRFA7QUFFTEMsSUFBQUEsSUFBSSxFQUFFQSxJQUZEO0FBR0xDLElBQUFBLFNBQVMsRUFBRUcsSUFITjtBQUlMWSxJQUFBQSxXQUFXLEVBQUVGO0FBSlIsR0FBUDtBQU1EOztBQUVELFNBQVN6QixJQUFULENBQWVDLE1BQWYsRUFBdUI7QUFDckJBLEVBQUFBLE1BQU0sR0FBR0EsTUFBTSxJQUFJLEVBQW5CO0FBRUEsU0FBT04sS0FBSyxDQUFDSyxJQUFOLENBQVdDLE1BQVgsQ0FBUDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4vbm9kZV9tb2R1bGVzL2Zyb250LW1hdHRlci9pbmRleC5qcz8zZTgwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBwYXJzZXIgPSByZXF1aXJlKCdqcy15YW1sJylcbnZhciBvcHRpb25hbEJ5dGVPcmRlck1hcmsgPSAnXFxcXHVmZWZmPydcbnZhciBwbGF0Zm9ybSA9IHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyA/IHByb2Nlc3MucGxhdGZvcm0gOiAnJ1xudmFyIHBhdHRlcm4gPSAnXignICtcbiAgb3B0aW9uYWxCeXRlT3JkZXJNYXJrICtcbiAgJyg9IHlhbWwgPXwtLS0pJyArXG4gICckKFtcXFxcc1xcXFxTXSo/KScgK1xuICAnXig/OlxcXFwyfFxcXFwuXFxcXC5cXFxcLilcXFxccyonICtcbiAgJyQnICtcbiAgKHBsYXRmb3JtID09PSAnd2luMzInID8gJ1xcXFxyPycgOiAnJykgK1xuICAnKD86XFxcXG4pPyknXG4vLyBOT1RFOiBJZiB0aGlzIHBhdHRlcm4gdXNlcyB0aGUgJ2cnIGZsYWcgdGhlIGByZWdleGAgdmFyaWFibGUgZGVmaW5pdGlvbiB3aWxsXG4vLyBuZWVkIHRvIGJlIG1vdmVkIGRvd24gaW50byB0aGUgZnVuY3Rpb25zIHRoYXQgdXNlIGl0LlxudmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChwYXR0ZXJuLCAnbScpXG5cbm1vZHVsZS5leHBvcnRzID0gZXh0cmFjdG9yXG5tb2R1bGUuZXhwb3J0cy50ZXN0ID0gdGVzdFxuXG5mdW5jdGlvbiBleHRyYWN0b3IgKHN0cmluZywgb3B0aW9ucykge1xuICBzdHJpbmcgPSBzdHJpbmcgfHwgJydcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0geyBhbGxvd1Vuc2FmZTogZmFsc2UgfVxuICBvcHRpb25zID0gb3B0aW9ucyBpbnN0YW5jZW9mIE9iamVjdCA/IHsgLi4uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnMgfSA6IGRlZmF1bHRPcHRpb25zXG4gIG9wdGlvbnMuYWxsb3dVbnNhZmUgPSBCb29sZWFuKG9wdGlvbnMuYWxsb3dVbnNhZmUpXG4gIHZhciBsaW5lcyA9IHN0cmluZy5zcGxpdCgvKFxccj9cXG4pLylcbiAgaWYgKGxpbmVzWzBdICYmIC89IHlhbWwgPXwtLS0vLnRlc3QobGluZXNbMF0pKSB7XG4gICAgcmV0dXJuIHBhcnNlKHN0cmluZywgb3B0aW9ucy5hbGxvd1Vuc2FmZSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgYXR0cmlidXRlczoge30sXG4gICAgICBib2R5OiBzdHJpbmcsXG4gICAgICBib2R5QmVnaW46IDFcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcHV0ZUxvY2F0aW9uIChtYXRjaCwgYm9keSkge1xuICB2YXIgbGluZSA9IDFcbiAgdmFyIHBvcyA9IGJvZHkuaW5kZXhPZignXFxuJylcbiAgdmFyIG9mZnNldCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoXG5cbiAgd2hpbGUgKHBvcyAhPT0gLTEpIHtcbiAgICBpZiAocG9zID49IG9mZnNldCkge1xuICAgICAgcmV0dXJuIGxpbmVcbiAgICB9XG4gICAgbGluZSsrXG4gICAgcG9zID0gYm9keS5pbmRleE9mKCdcXG4nLCBwb3MgKyAxKVxuICB9XG5cbiAgcmV0dXJuIGxpbmVcbn1cblxuZnVuY3Rpb24gcGFyc2UgKHN0cmluZywgYWxsb3dVbnNhZmUpIHtcbiAgdmFyIG1hdGNoID0gcmVnZXguZXhlYyhzdHJpbmcpXG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYXR0cmlidXRlczoge30sXG4gICAgICBib2R5OiBzdHJpbmcsXG4gICAgICBib2R5QmVnaW46IDFcbiAgICB9XG4gIH1cblxuICB2YXIgbG9hZGVyID0gYWxsb3dVbnNhZmUgPyBwYXJzZXIubG9hZCA6IHBhcnNlci5zYWZlTG9hZFxuICB2YXIgeWFtbCA9IG1hdGNoW21hdGNoLmxlbmd0aCAtIDFdLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxuICB2YXIgYXR0cmlidXRlcyA9IGxvYWRlcih5YW1sKSB8fCB7fVxuICB2YXIgYm9keSA9IHN0cmluZy5yZXBsYWNlKG1hdGNoWzBdLCAnJylcbiAgdmFyIGxpbmUgPSBjb21wdXRlTG9jYXRpb24obWF0Y2gsIHN0cmluZylcblxuICByZXR1cm4ge1xuICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMsXG4gICAgYm9keTogYm9keSxcbiAgICBib2R5QmVnaW46IGxpbmUsXG4gICAgZnJvbnRtYXR0ZXI6IHlhbWxcbiAgfVxufVxuXG5mdW5jdGlvbiB0ZXN0IChzdHJpbmcpIHtcbiAgc3RyaW5nID0gc3RyaW5nIHx8ICcnXG5cbiAgcmV0dXJuIHJlZ2V4LnRlc3Qoc3RyaW5nKVxufVxuIl0sIm5hbWVzIjpbInBhcnNlciIsInJlcXVpcmUiLCJvcHRpb25hbEJ5dGVPcmRlck1hcmsiLCJwbGF0Zm9ybSIsInByb2Nlc3MiLCJwYXR0ZXJuIiwicmVnZXgiLCJSZWdFeHAiLCJtb2R1bGUiLCJleHBvcnRzIiwiZXh0cmFjdG9yIiwidGVzdCIsInN0cmluZyIsIm9wdGlvbnMiLCJkZWZhdWx0T3B0aW9ucyIsImFsbG93VW5zYWZlIiwiT2JqZWN0IiwiQm9vbGVhbiIsImxpbmVzIiwic3BsaXQiLCJwYXJzZSIsImF0dHJpYnV0ZXMiLCJib2R5IiwiYm9keUJlZ2luIiwiY29tcHV0ZUxvY2F0aW9uIiwibWF0Y2giLCJsaW5lIiwicG9zIiwiaW5kZXhPZiIsIm9mZnNldCIsImluZGV4IiwibGVuZ3RoIiwiZXhlYyIsImxvYWRlciIsImxvYWQiLCJzYWZlTG9hZCIsInlhbWwiLCJyZXBsYWNlIiwiZnJvbnRtYXR0ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/front-matter/index.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/index.js":
/*!***************************************!*\
  !*** ./node_modules/js-yaml/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar yaml = __webpack_require__(/*! ./lib/js-yaml.js */ \"./node_modules/js-yaml/lib/js-yaml.js\");\n\nmodule.exports = yaml;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanMteWFtbC9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFHYixJQUFJQSxJQUFJLEdBQUdDLG1CQUFPLENBQUMsK0RBQUQsQ0FBbEI7O0FBR0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkgsSUFBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi9ub2RlX21vZHVsZXMvanMteWFtbC9pbmRleC5qcz82NTFlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuXG52YXIgeWFtbCA9IHJlcXVpcmUoJy4vbGliL2pzLXlhbWwuanMnKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IHlhbWw7XG4iXSwibmFtZXMiOlsieWFtbCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/index.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml.js":
/*!*********************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar loader = __webpack_require__(/*! ./js-yaml/loader */ \"./node_modules/js-yaml/lib/js-yaml/loader.js\");\n\nvar dumper = __webpack_require__(/*! ./js-yaml/dumper */ \"./node_modules/js-yaml/lib/js-yaml/dumper.js\");\n\nfunction deprecated(name) {\n  return function () {\n    throw new Error('Function ' + name + ' is deprecated and cannot be used.');\n  };\n}\n\nmodule.exports.Type = __webpack_require__(/*! ./js-yaml/type */ \"./node_modules/js-yaml/lib/js-yaml/type.js\");\nmodule.exports.Schema = __webpack_require__(/*! ./js-yaml/schema */ \"./node_modules/js-yaml/lib/js-yaml/schema.js\");\nmodule.exports.FAILSAFE_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/failsafe */ \"./node_modules/js-yaml/lib/js-yaml/schema/failsafe.js\");\nmodule.exports.JSON_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/json */ \"./node_modules/js-yaml/lib/js-yaml/schema/json.js\");\nmodule.exports.CORE_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/core */ \"./node_modules/js-yaml/lib/js-yaml/schema/core.js\");\nmodule.exports.DEFAULT_SAFE_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/default_safe */ \"./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js\");\nmodule.exports.DEFAULT_FULL_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/default_full */ \"./node_modules/js-yaml/lib/js-yaml/schema/default_full.js\");\nmodule.exports.load = loader.load;\nmodule.exports.loadAll = loader.loadAll;\nmodule.exports.safeLoad = loader.safeLoad;\nmodule.exports.safeLoadAll = loader.safeLoadAll;\nmodule.exports.dump = dumper.dump;\nmodule.exports.safeDump = dumper.safeDump;\nmodule.exports.YAMLException = __webpack_require__(/*! ./js-yaml/exception */ \"./node_modules/js-yaml/lib/js-yaml/exception.js\"); // Deprecated schema names from JS-YAML 2.0.x\n\nmodule.exports.MINIMAL_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/failsafe */ \"./node_modules/js-yaml/lib/js-yaml/schema/failsafe.js\");\nmodule.exports.SAFE_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/default_safe */ \"./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js\");\nmodule.exports.DEFAULT_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/default_full */ \"./node_modules/js-yaml/lib/js-yaml/schema/default_full.js\"); // Deprecated functions from JS-YAML 1.x.x\n\nmodule.exports.scan = deprecated('scan');\nmodule.exports.parse = deprecated('parse');\nmodule.exports.compose = deprecated('compose');\nmodule.exports.addConstructor = deprecated('addConstructor');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFHYixJQUFJQSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsc0VBQUQsQ0FBcEI7O0FBQ0EsSUFBSUMsTUFBTSxHQUFHRCxtQkFBTyxDQUFDLHNFQUFELENBQXBCOztBQUdBLFNBQVNFLFVBQVQsQ0FBb0JDLElBQXBCLEVBQTBCO0FBQ3hCLFNBQU8sWUFBWTtBQUNqQixVQUFNLElBQUlDLEtBQUosQ0FBVSxjQUFjRCxJQUFkLEdBQXFCLG9DQUEvQixDQUFOO0FBQ0QsR0FGRDtBQUdEOztBQUdERSw2R0FBQTtBQUNBQSxtSEFBQTtBQUNBQSw4SUFBQTtBQUNBQSxrSUFBQTtBQUNBQSxrSUFBQTtBQUNBQSwwSkFBQTtBQUNBQSwwSkFBQTtBQUNBQSxtQkFBQSxHQUFxQ04sTUFBTSxDQUFDZSxJQUE1QztBQUNBVCxzQkFBQSxHQUFxQ04sTUFBTSxDQUFDZ0IsT0FBNUM7QUFDQVYsdUJBQUEsR0FBcUNOLE1BQU0sQ0FBQ2lCLFFBQTVDO0FBQ0FYLDBCQUFBLEdBQXFDTixNQUFNLENBQUNrQixXQUE1QztBQUNBWixtQkFBQSxHQUFxQ0osTUFBTSxDQUFDaUIsSUFBNUM7QUFDQWIsdUJBQUEsR0FBcUNKLE1BQU0sQ0FBQ2tCLFFBQTVDO0FBQ0FkLGdJQUFBLEMsQ0FFQTs7QUFDQUEsNklBQUE7QUFDQUEsa0pBQUE7QUFDQUEscUpBQUEsQyxDQUVBOztBQUNBQSxtQkFBQSxHQUFnQ0gsVUFBVSxDQUFDLE1BQUQsQ0FBMUM7QUFDQUcsb0JBQUEsR0FBZ0NILFVBQVUsQ0FBQyxPQUFELENBQTFDO0FBQ0FHLHNCQUFBLEdBQWdDSCxVQUFVLENBQUMsU0FBRCxDQUExQztBQUNBRyw2QkFBQSxHQUFnQ0gsVUFBVSxDQUFDLGdCQUFELENBQTFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4vbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwuanM/MWQ0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cblxudmFyIGxvYWRlciA9IHJlcXVpcmUoJy4vanMteWFtbC9sb2FkZXInKTtcbnZhciBkdW1wZXIgPSByZXF1aXJlKCcuL2pzLXlhbWwvZHVtcGVyJyk7XG5cblxuZnVuY3Rpb24gZGVwcmVjYXRlZChuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGdW5jdGlvbiAnICsgbmFtZSArICcgaXMgZGVwcmVjYXRlZCBhbmQgY2Fubm90IGJlIHVzZWQuJyk7XG4gIH07XG59XG5cblxubW9kdWxlLmV4cG9ydHMuVHlwZSAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vanMteWFtbC90eXBlJyk7XG5tb2R1bGUuZXhwb3J0cy5TY2hlbWEgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9qcy15YW1sL3NjaGVtYScpO1xubW9kdWxlLmV4cG9ydHMuRkFJTFNBRkVfU0NIRU1BICAgICA9IHJlcXVpcmUoJy4vanMteWFtbC9zY2hlbWEvZmFpbHNhZmUnKTtcbm1vZHVsZS5leHBvcnRzLkpTT05fU0NIRU1BICAgICAgICAgPSByZXF1aXJlKCcuL2pzLXlhbWwvc2NoZW1hL2pzb24nKTtcbm1vZHVsZS5leHBvcnRzLkNPUkVfU0NIRU1BICAgICAgICAgPSByZXF1aXJlKCcuL2pzLXlhbWwvc2NoZW1hL2NvcmUnKTtcbm1vZHVsZS5leHBvcnRzLkRFRkFVTFRfU0FGRV9TQ0hFTUEgPSByZXF1aXJlKCcuL2pzLXlhbWwvc2NoZW1hL2RlZmF1bHRfc2FmZScpO1xubW9kdWxlLmV4cG9ydHMuREVGQVVMVF9GVUxMX1NDSEVNQSA9IHJlcXVpcmUoJy4vanMteWFtbC9zY2hlbWEvZGVmYXVsdF9mdWxsJyk7XG5tb2R1bGUuZXhwb3J0cy5sb2FkICAgICAgICAgICAgICAgID0gbG9hZGVyLmxvYWQ7XG5tb2R1bGUuZXhwb3J0cy5sb2FkQWxsICAgICAgICAgICAgID0gbG9hZGVyLmxvYWRBbGw7XG5tb2R1bGUuZXhwb3J0cy5zYWZlTG9hZCAgICAgICAgICAgID0gbG9hZGVyLnNhZmVMb2FkO1xubW9kdWxlLmV4cG9ydHMuc2FmZUxvYWRBbGwgICAgICAgICA9IGxvYWRlci5zYWZlTG9hZEFsbDtcbm1vZHVsZS5leHBvcnRzLmR1bXAgICAgICAgICAgICAgICAgPSBkdW1wZXIuZHVtcDtcbm1vZHVsZS5leHBvcnRzLnNhZmVEdW1wICAgICAgICAgICAgPSBkdW1wZXIuc2FmZUR1bXA7XG5tb2R1bGUuZXhwb3J0cy5ZQU1MRXhjZXB0aW9uICAgICAgID0gcmVxdWlyZSgnLi9qcy15YW1sL2V4Y2VwdGlvbicpO1xuXG4vLyBEZXByZWNhdGVkIHNjaGVtYSBuYW1lcyBmcm9tIEpTLVlBTUwgMi4wLnhcbm1vZHVsZS5leHBvcnRzLk1JTklNQUxfU0NIRU1BID0gcmVxdWlyZSgnLi9qcy15YW1sL3NjaGVtYS9mYWlsc2FmZScpO1xubW9kdWxlLmV4cG9ydHMuU0FGRV9TQ0hFTUEgICAgPSByZXF1aXJlKCcuL2pzLXlhbWwvc2NoZW1hL2RlZmF1bHRfc2FmZScpO1xubW9kdWxlLmV4cG9ydHMuREVGQVVMVF9TQ0hFTUEgPSByZXF1aXJlKCcuL2pzLXlhbWwvc2NoZW1hL2RlZmF1bHRfZnVsbCcpO1xuXG4vLyBEZXByZWNhdGVkIGZ1bmN0aW9ucyBmcm9tIEpTLVlBTUwgMS54Lnhcbm1vZHVsZS5leHBvcnRzLnNjYW4gICAgICAgICAgID0gZGVwcmVjYXRlZCgnc2NhbicpO1xubW9kdWxlLmV4cG9ydHMucGFyc2UgICAgICAgICAgPSBkZXByZWNhdGVkKCdwYXJzZScpO1xubW9kdWxlLmV4cG9ydHMuY29tcG9zZSAgICAgICAgPSBkZXByZWNhdGVkKCdjb21wb3NlJyk7XG5tb2R1bGUuZXhwb3J0cy5hZGRDb25zdHJ1Y3RvciA9IGRlcHJlY2F0ZWQoJ2FkZENvbnN0cnVjdG9yJyk7XG4iXSwibmFtZXMiOlsibG9hZGVyIiwicmVxdWlyZSIsImR1bXBlciIsImRlcHJlY2F0ZWQiLCJuYW1lIiwiRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiVHlwZSIsIlNjaGVtYSIsIkZBSUxTQUZFX1NDSEVNQSIsIkpTT05fU0NIRU1BIiwiQ09SRV9TQ0hFTUEiLCJERUZBVUxUX1NBRkVfU0NIRU1BIiwiREVGQVVMVF9GVUxMX1NDSEVNQSIsImxvYWQiLCJsb2FkQWxsIiwic2FmZUxvYWQiLCJzYWZlTG9hZEFsbCIsImR1bXAiLCJzYWZlRHVtcCIsIllBTUxFeGNlcHRpb24iLCJNSU5JTUFMX1NDSEVNQSIsIlNBRkVfU0NIRU1BIiwiREVGQVVMVF9TQ0hFTUEiLCJzY2FuIiwicGFyc2UiLCJjb21wb3NlIiwiYWRkQ29uc3RydWN0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/common.js":
/*!****************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/common.js ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nfunction isNothing(subject) {\n  return typeof subject === 'undefined' || subject === null;\n}\n\nfunction isObject(subject) {\n  return typeof subject === 'object' && subject !== null;\n}\n\nfunction toArray(sequence) {\n  if (Array.isArray(sequence)) return sequence;else if (isNothing(sequence)) return [];\n  return [sequence];\n}\n\nfunction extend(target, source) {\n  var index, length, key, sourceKeys;\n\n  if (source) {\n    sourceKeys = Object.keys(source);\n\n    for (index = 0, length = sourceKeys.length; index < length; index += 1) {\n      key = sourceKeys[index];\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction repeat(string, count) {\n  var result = '',\n      cycle;\n\n  for (cycle = 0; cycle < count; cycle += 1) {\n    result += string;\n  }\n\n  return result;\n}\n\nfunction isNegativeZero(number) {\n  return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;\n}\n\nmodule.exports.isNothing = isNothing;\nmodule.exports.isObject = isObject;\nmodule.exports.toArray = toArray;\nmodule.exports.repeat = repeat;\nmodule.exports.isNegativeZero = isNegativeZero;\nmodule.exports.extend = extend;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9jb21tb24uanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBR2IsU0FBU0EsU0FBVCxDQUFtQkMsT0FBbkIsRUFBNEI7QUFDMUIsU0FBUSxPQUFPQSxPQUFQLEtBQW1CLFdBQXBCLElBQXFDQSxPQUFPLEtBQUssSUFBeEQ7QUFDRDs7QUFHRCxTQUFTQyxRQUFULENBQWtCRCxPQUFsQixFQUEyQjtBQUN6QixTQUFRLE9BQU9BLE9BQVAsS0FBbUIsUUFBcEIsSUFBa0NBLE9BQU8sS0FBSyxJQUFyRDtBQUNEOztBQUdELFNBQVNFLE9BQVQsQ0FBaUJDLFFBQWpCLEVBQTJCO0FBQ3pCLE1BQUlDLEtBQUssQ0FBQ0MsT0FBTixDQUFjRixRQUFkLENBQUosRUFBNkIsT0FBT0EsUUFBUCxDQUE3QixLQUNLLElBQUlKLFNBQVMsQ0FBQ0ksUUFBRCxDQUFiLEVBQXlCLE9BQU8sRUFBUDtBQUU5QixTQUFPLENBQUVBLFFBQUYsQ0FBUDtBQUNEOztBQUdELFNBQVNHLE1BQVQsQ0FBZ0JDLE1BQWhCLEVBQXdCQyxNQUF4QixFQUFnQztBQUM5QixNQUFJQyxLQUFKLEVBQVdDLE1BQVgsRUFBbUJDLEdBQW5CLEVBQXdCQyxVQUF4Qjs7QUFFQSxNQUFJSixNQUFKLEVBQVk7QUFDVkksSUFBQUEsVUFBVSxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWU4sTUFBWixDQUFiOztBQUVBLFNBQUtDLEtBQUssR0FBRyxDQUFSLEVBQVdDLE1BQU0sR0FBR0UsVUFBVSxDQUFDRixNQUFwQyxFQUE0Q0QsS0FBSyxHQUFHQyxNQUFwRCxFQUE0REQsS0FBSyxJQUFJLENBQXJFLEVBQXdFO0FBQ3RFRSxNQUFBQSxHQUFHLEdBQUdDLFVBQVUsQ0FBQ0gsS0FBRCxDQUFoQjtBQUNBRixNQUFBQSxNQUFNLENBQUNJLEdBQUQsQ0FBTixHQUFjSCxNQUFNLENBQUNHLEdBQUQsQ0FBcEI7QUFDRDtBQUNGOztBQUVELFNBQU9KLE1BQVA7QUFDRDs7QUFHRCxTQUFTUSxNQUFULENBQWdCQyxNQUFoQixFQUF3QkMsS0FBeEIsRUFBK0I7QUFDN0IsTUFBSUMsTUFBTSxHQUFHLEVBQWI7QUFBQSxNQUFpQkMsS0FBakI7O0FBRUEsT0FBS0EsS0FBSyxHQUFHLENBQWIsRUFBZ0JBLEtBQUssR0FBR0YsS0FBeEIsRUFBK0JFLEtBQUssSUFBSSxDQUF4QyxFQUEyQztBQUN6Q0QsSUFBQUEsTUFBTSxJQUFJRixNQUFWO0FBQ0Q7O0FBRUQsU0FBT0UsTUFBUDtBQUNEOztBQUdELFNBQVNFLGNBQVQsQ0FBd0JDLE1BQXhCLEVBQWdDO0FBQzlCLFNBQVFBLE1BQU0sS0FBSyxDQUFaLElBQW1CQyxNQUFNLENBQUNDLGlCQUFQLEtBQTZCLElBQUlGLE1BQTNEO0FBQ0Q7O0FBR0RHLHdCQUFBLEdBQWdDekIsU0FBaEM7QUFDQXlCLHVCQUFBLEdBQWdDdkIsUUFBaEM7QUFDQXVCLHNCQUFBLEdBQWdDdEIsT0FBaEM7QUFDQXNCLHFCQUFBLEdBQWdDVCxNQUFoQztBQUNBUyw2QkFBQSxHQUFnQ0osY0FBaEM7QUFDQUkscUJBQUEsR0FBZ0NsQixNQUFoQyIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL2NvbW1vbi5qcz82MzY2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuXG5mdW5jdGlvbiBpc05vdGhpbmcoc3ViamVjdCkge1xuICByZXR1cm4gKHR5cGVvZiBzdWJqZWN0ID09PSAndW5kZWZpbmVkJykgfHwgKHN1YmplY3QgPT09IG51bGwpO1xufVxuXG5cbmZ1bmN0aW9uIGlzT2JqZWN0KHN1YmplY3QpIHtcbiAgcmV0dXJuICh0eXBlb2Ygc3ViamVjdCA9PT0gJ29iamVjdCcpICYmIChzdWJqZWN0ICE9PSBudWxsKTtcbn1cblxuXG5mdW5jdGlvbiB0b0FycmF5KHNlcXVlbmNlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHNlcXVlbmNlKSkgcmV0dXJuIHNlcXVlbmNlO1xuICBlbHNlIGlmIChpc05vdGhpbmcoc2VxdWVuY2UpKSByZXR1cm4gW107XG5cbiAgcmV0dXJuIFsgc2VxdWVuY2UgXTtcbn1cblxuXG5mdW5jdGlvbiBleHRlbmQodGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIGluZGV4LCBsZW5ndGgsIGtleSwgc291cmNlS2V5cztcblxuICBpZiAoc291cmNlKSB7XG4gICAgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gc291cmNlS2V5cy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgICBrZXkgPSBzb3VyY2VLZXlzW2luZGV4XTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuXG5mdW5jdGlvbiByZXBlYXQoc3RyaW5nLCBjb3VudCkge1xuICB2YXIgcmVzdWx0ID0gJycsIGN5Y2xlO1xuXG4gIGZvciAoY3ljbGUgPSAwOyBjeWNsZSA8IGNvdW50OyBjeWNsZSArPSAxKSB7XG4gICAgcmVzdWx0ICs9IHN0cmluZztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cblxuZnVuY3Rpb24gaXNOZWdhdGl2ZVplcm8obnVtYmVyKSB7XG4gIHJldHVybiAobnVtYmVyID09PSAwKSAmJiAoTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZID09PSAxIC8gbnVtYmVyKTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cy5pc05vdGhpbmcgICAgICA9IGlzTm90aGluZztcbm1vZHVsZS5leHBvcnRzLmlzT2JqZWN0ICAgICAgID0gaXNPYmplY3Q7XG5tb2R1bGUuZXhwb3J0cy50b0FycmF5ICAgICAgICA9IHRvQXJyYXk7XG5tb2R1bGUuZXhwb3J0cy5yZXBlYXQgICAgICAgICA9IHJlcGVhdDtcbm1vZHVsZS5leHBvcnRzLmlzTmVnYXRpdmVaZXJvID0gaXNOZWdhdGl2ZVplcm87XG5tb2R1bGUuZXhwb3J0cy5leHRlbmQgICAgICAgICA9IGV4dGVuZDtcbiJdLCJuYW1lcyI6WyJpc05vdGhpbmciLCJzdWJqZWN0IiwiaXNPYmplY3QiLCJ0b0FycmF5Iiwic2VxdWVuY2UiLCJBcnJheSIsImlzQXJyYXkiLCJleHRlbmQiLCJ0YXJnZXQiLCJzb3VyY2UiLCJpbmRleCIsImxlbmd0aCIsImtleSIsInNvdXJjZUtleXMiLCJPYmplY3QiLCJrZXlzIiwicmVwZWF0Iiwic3RyaW5nIiwiY291bnQiLCJyZXN1bHQiLCJjeWNsZSIsImlzTmVnYXRpdmVaZXJvIiwibnVtYmVyIiwiTnVtYmVyIiwiTkVHQVRJVkVfSU5GSU5JVFkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/common.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/dumper.js":
/*!****************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/dumper.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/*eslint-disable no-use-before-define*/\n\nvar common = __webpack_require__(/*! ./common */ \"./node_modules/js-yaml/lib/js-yaml/common.js\");\n\nvar YAMLException = __webpack_require__(/*! ./exception */ \"./node_modules/js-yaml/lib/js-yaml/exception.js\");\n\nvar DEFAULT_FULL_SCHEMA = __webpack_require__(/*! ./schema/default_full */ \"./node_modules/js-yaml/lib/js-yaml/schema/default_full.js\");\n\nvar DEFAULT_SAFE_SCHEMA = __webpack_require__(/*! ./schema/default_safe */ \"./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js\");\n\nvar _toString = Object.prototype.toString;\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar CHAR_TAB = 0x09;\n/* Tab */\n\nvar CHAR_LINE_FEED = 0x0A;\n/* LF */\n\nvar CHAR_CARRIAGE_RETURN = 0x0D;\n/* CR */\n\nvar CHAR_SPACE = 0x20;\n/* Space */\n\nvar CHAR_EXCLAMATION = 0x21;\n/* ! */\n\nvar CHAR_DOUBLE_QUOTE = 0x22;\n/* \" */\n\nvar CHAR_SHARP = 0x23;\n/* # */\n\nvar CHAR_PERCENT = 0x25;\n/* % */\n\nvar CHAR_AMPERSAND = 0x26;\n/* & */\n\nvar CHAR_SINGLE_QUOTE = 0x27;\n/* ' */\n\nvar CHAR_ASTERISK = 0x2A;\n/* * */\n\nvar CHAR_COMMA = 0x2C;\n/* , */\n\nvar CHAR_MINUS = 0x2D;\n/* - */\n\nvar CHAR_COLON = 0x3A;\n/* : */\n\nvar CHAR_EQUALS = 0x3D;\n/* = */\n\nvar CHAR_GREATER_THAN = 0x3E;\n/* > */\n\nvar CHAR_QUESTION = 0x3F;\n/* ? */\n\nvar CHAR_COMMERCIAL_AT = 0x40;\n/* @ */\n\nvar CHAR_LEFT_SQUARE_BRACKET = 0x5B;\n/* [ */\n\nvar CHAR_RIGHT_SQUARE_BRACKET = 0x5D;\n/* ] */\n\nvar CHAR_GRAVE_ACCENT = 0x60;\n/* ` */\n\nvar CHAR_LEFT_CURLY_BRACKET = 0x7B;\n/* { */\n\nvar CHAR_VERTICAL_LINE = 0x7C;\n/* | */\n\nvar CHAR_RIGHT_CURLY_BRACKET = 0x7D;\n/* } */\n\nvar ESCAPE_SEQUENCES = {};\nESCAPE_SEQUENCES[0x00] = '\\\\0';\nESCAPE_SEQUENCES[0x07] = '\\\\a';\nESCAPE_SEQUENCES[0x08] = '\\\\b';\nESCAPE_SEQUENCES[0x09] = '\\\\t';\nESCAPE_SEQUENCES[0x0A] = '\\\\n';\nESCAPE_SEQUENCES[0x0B] = '\\\\v';\nESCAPE_SEQUENCES[0x0C] = '\\\\f';\nESCAPE_SEQUENCES[0x0D] = '\\\\r';\nESCAPE_SEQUENCES[0x1B] = '\\\\e';\nESCAPE_SEQUENCES[0x22] = '\\\\\"';\nESCAPE_SEQUENCES[0x5C] = '\\\\\\\\';\nESCAPE_SEQUENCES[0x85] = '\\\\N';\nESCAPE_SEQUENCES[0xA0] = '\\\\_';\nESCAPE_SEQUENCES[0x2028] = '\\\\L';\nESCAPE_SEQUENCES[0x2029] = '\\\\P';\nvar DEPRECATED_BOOLEANS_SYNTAX = ['y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON', 'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'];\n\nfunction compileStyleMap(schema, map) {\n  var result, keys, index, length, tag, style, type;\n  if (map === null) return {};\n  result = {};\n  keys = Object.keys(map);\n\n  for (index = 0, length = keys.length; index < length; index += 1) {\n    tag = keys[index];\n    style = String(map[tag]);\n\n    if (tag.slice(0, 2) === '!!') {\n      tag = 'tag:yaml.org,2002:' + tag.slice(2);\n    }\n\n    type = schema.compiledTypeMap['fallback'][tag];\n\n    if (type && _hasOwnProperty.call(type.styleAliases, style)) {\n      style = type.styleAliases[style];\n    }\n\n    result[tag] = style;\n  }\n\n  return result;\n}\n\nfunction encodeHex(character) {\n  var string, handle, length;\n  string = character.toString(16).toUpperCase();\n\n  if (character <= 0xFF) {\n    handle = 'x';\n    length = 2;\n  } else if (character <= 0xFFFF) {\n    handle = 'u';\n    length = 4;\n  } else if (character <= 0xFFFFFFFF) {\n    handle = 'U';\n    length = 8;\n  } else {\n    throw new YAMLException('code point within a string may not be greater than 0xFFFFFFFF');\n  }\n\n  return '\\\\' + handle + common.repeat('0', length - string.length) + string;\n}\n\nfunction State(options) {\n  this.schema = options['schema'] || DEFAULT_FULL_SCHEMA;\n  this.indent = Math.max(1, options['indent'] || 2);\n  this.noArrayIndent = options['noArrayIndent'] || false;\n  this.skipInvalid = options['skipInvalid'] || false;\n  this.flowLevel = common.isNothing(options['flowLevel']) ? -1 : options['flowLevel'];\n  this.styleMap = compileStyleMap(this.schema, options['styles'] || null);\n  this.sortKeys = options['sortKeys'] || false;\n  this.lineWidth = options['lineWidth'] || 80;\n  this.noRefs = options['noRefs'] || false;\n  this.noCompatMode = options['noCompatMode'] || false;\n  this.condenseFlow = options['condenseFlow'] || false;\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.explicitTypes = this.schema.compiledExplicit;\n  this.tag = null;\n  this.result = '';\n  this.duplicates = [];\n  this.usedDuplicates = null;\n} // Indents every line in a string. Empty lines (\\n only) are not indented.\n\n\nfunction indentString(string, spaces) {\n  var ind = common.repeat(' ', spaces),\n      position = 0,\n      next = -1,\n      result = '',\n      line,\n      length = string.length;\n\n  while (position < length) {\n    next = string.indexOf('\\n', position);\n\n    if (next === -1) {\n      line = string.slice(position);\n      position = length;\n    } else {\n      line = string.slice(position, next + 1);\n      position = next + 1;\n    }\n\n    if (line.length && line !== '\\n') result += ind;\n    result += line;\n  }\n\n  return result;\n}\n\nfunction generateNextLine(state, level) {\n  return '\\n' + common.repeat(' ', state.indent * level);\n}\n\nfunction testImplicitResolving(state, str) {\n  var index, length, type;\n\n  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {\n    type = state.implicitTypes[index];\n\n    if (type.resolve(str)) {\n      return true;\n    }\n  }\n\n  return false;\n} // [33] s-white ::= s-space | s-tab\n\n\nfunction isWhitespace(c) {\n  return c === CHAR_SPACE || c === CHAR_TAB;\n} // Returns true if the character can be printed without escaping.\n// From YAML 1.2: \"any allowed characters known to be non-printable\n// should also be escaped. [However,] This isn’t mandatory\"\n// Derived from nb-char - \\t - #x85 - #xA0 - #x2028 - #x2029.\n\n\nfunction isPrintable(c) {\n  return 0x00020 <= c && c <= 0x00007E || 0x000A1 <= c && c <= 0x00D7FF && c !== 0x2028 && c !== 0x2029 || 0x0E000 <= c && c <= 0x00FFFD && c !== 0xFEFF\n  /* BOM */\n  || 0x10000 <= c && c <= 0x10FFFF;\n} // [34] ns-char ::= nb-char - s-white\n// [27] nb-char ::= c-printable - b-char - c-byte-order-mark\n// [26] b-char  ::= b-line-feed | b-carriage-return\n// [24] b-line-feed       ::=     #xA    /* LF */\n// [25] b-carriage-return ::=     #xD    /* CR */\n// [3]  c-byte-order-mark ::=     #xFEFF\n\n\nfunction isNsChar(c) {\n  return isPrintable(c) && !isWhitespace(c) // byte-order-mark\n  && c !== 0xFEFF // b-char\n  && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;\n} // Simplified test for values allowed after the first character in plain style.\n\n\nfunction isPlainSafe(c, prev) {\n  // Uses a subset of nb-char - c-flow-indicator - \":\" - \"#\"\n  // where nb-char ::= c-printable - b-char - c-byte-order-mark.\n  return isPrintable(c) && c !== 0xFEFF // - c-flow-indicator\n  && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET // - \":\" - \"#\"\n  // /* An ns-char preceding */ \"#\"\n  && c !== CHAR_COLON && (c !== CHAR_SHARP || prev && isNsChar(prev));\n} // Simplified test for values allowed as the first character in plain style.\n\n\nfunction isPlainSafeFirst(c) {\n  // Uses a subset of ns-char - c-indicator\n  // where ns-char = nb-char - s-white.\n  return isPrintable(c) && c !== 0xFEFF && !isWhitespace(c) // - s-white\n  // - (c-indicator ::=\n  // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”\n  && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET // | “#” | “&” | “*” | “!” | “|” | “=” | “>” | “'” | “\"”\n  && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE // | “%” | “@” | “`”)\n  && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;\n} // Determines whether block indentation indicator is required.\n\n\nfunction needIndentIndicator(string) {\n  var leadingSpaceRe = /^\\n* /;\n  return leadingSpaceRe.test(string);\n}\n\nvar STYLE_PLAIN = 1,\n    STYLE_SINGLE = 2,\n    STYLE_LITERAL = 3,\n    STYLE_FOLDED = 4,\n    STYLE_DOUBLE = 5; // Determines which scalar styles are possible and returns the preferred style.\n// lineWidth = -1 => no limit.\n// Pre-conditions: str.length > 0.\n// Post-conditions:\n//    STYLE_PLAIN or STYLE_SINGLE => no \\n are in the string.\n//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).\n//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).\n\nfunction chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType) {\n  var i;\n  var char, prev_char;\n  var hasLineBreak = false;\n  var hasFoldableLine = false; // only checked if shouldTrackWidth\n\n  var shouldTrackWidth = lineWidth !== -1;\n  var previousLineBreak = -1; // count the first line correctly\n\n  var plain = isPlainSafeFirst(string.charCodeAt(0)) && !isWhitespace(string.charCodeAt(string.length - 1));\n\n  if (singleLineOnly) {\n    // Case: no block styles.\n    // Check for disallowed characters to rule out plain and single.\n    for (i = 0; i < string.length; i++) {\n      char = string.charCodeAt(i);\n\n      if (!isPrintable(char)) {\n        return STYLE_DOUBLE;\n      }\n\n      prev_char = i > 0 ? string.charCodeAt(i - 1) : null;\n      plain = plain && isPlainSafe(char, prev_char);\n    }\n  } else {\n    // Case: block styles permitted.\n    for (i = 0; i < string.length; i++) {\n      char = string.charCodeAt(i);\n\n      if (char === CHAR_LINE_FEED) {\n        hasLineBreak = true; // Check if any line can be folded.\n\n        if (shouldTrackWidth) {\n          hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.\n          i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';\n          previousLineBreak = i;\n        }\n      } else if (!isPrintable(char)) {\n        return STYLE_DOUBLE;\n      }\n\n      prev_char = i > 0 ? string.charCodeAt(i - 1) : null;\n      plain = plain && isPlainSafe(char, prev_char);\n    } // in case the end is missing a \\n\n\n\n    hasFoldableLine = hasFoldableLine || shouldTrackWidth && i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';\n  } // Although every style can represent \\n without escaping, prefer block styles\n  // for multiline, since they're more readable and they don't add empty lines.\n  // Also prefer folding a super-long line.\n\n\n  if (!hasLineBreak && !hasFoldableLine) {\n    // Strings interpretable as another type have to be quoted;\n    // e.g. the string 'true' vs. the boolean true.\n    return plain && !testAmbiguousType(string) ? STYLE_PLAIN : STYLE_SINGLE;\n  } // Edge case: block indentation indicator can only have one digit.\n\n\n  if (indentPerLevel > 9 && needIndentIndicator(string)) {\n    return STYLE_DOUBLE;\n  } // At this point we know block styles are valid.\n  // Prefer literal style unless we want to fold.\n\n\n  return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;\n} // Note: line breaking/folding is implemented for only the folded style.\n// NB. We drop the last trailing newline (if any) of a returned block scalar\n//  since the dumper adds its own newline. This always works:\n//    • No ending newline => unaffected; already using strip \"-\" chomping.\n//    • Ending newline    => removed then restored.\n//  Importantly, this keeps the \"+\" chomp indicator from gaining an extra line.\n\n\nfunction writeScalar(state, string, level, iskey) {\n  state.dump = function () {\n    if (string.length === 0) {\n      return \"''\";\n    }\n\n    if (!state.noCompatMode && DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1) {\n      return \"'\" + string + \"'\";\n    }\n\n    var indent = state.indent * Math.max(1, level); // no 0-indent scalars\n    // As indentation gets deeper, let the width decrease monotonically\n    // to the lower bound min(state.lineWidth, 40).\n    // Note that this implies\n    //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.\n    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.\n    // This behaves better than a constant minimum width which disallows narrower options,\n    // or an indent threshold which causes the width to suddenly increase.\n\n    var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent); // Without knowing if keys are implicit/explicit, assume implicit for safety.\n\n    var singleLineOnly = iskey // No block styles in flow mode.\n    || state.flowLevel > -1 && level >= state.flowLevel;\n\n    function testAmbiguity(string) {\n      return testImplicitResolving(state, string);\n    }\n\n    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity)) {\n      case STYLE_PLAIN:\n        return string;\n\n      case STYLE_SINGLE:\n        return \"'\" + string.replace(/'/g, \"''\") + \"'\";\n\n      case STYLE_LITERAL:\n        return '|' + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));\n\n      case STYLE_FOLDED:\n        return '>' + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));\n\n      case STYLE_DOUBLE:\n        return '\"' + escapeString(string, lineWidth) + '\"';\n\n      default:\n        throw new YAMLException('impossible error: invalid scalar style');\n    }\n  }();\n} // Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.\n\n\nfunction blockHeader(string, indentPerLevel) {\n  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : ''; // note the special case: the string '\\n' counts as a \"trailing\" empty line.\n\n  var clip = string[string.length - 1] === '\\n';\n  var keep = clip && (string[string.length - 2] === '\\n' || string === '\\n');\n  var chomp = keep ? '+' : clip ? '' : '-';\n  return indentIndicator + chomp + '\\n';\n} // (See the note for writeScalar.)\n\n\nfunction dropEndingNewline(string) {\n  return string[string.length - 1] === '\\n' ? string.slice(0, -1) : string;\n} // Note: a long line without a suitable break point will exceed the width limit.\n// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.\n\n\nfunction foldString(string, width) {\n  // In folded style, $k$ consecutive newlines output as $k+1$ newlines—\n  // unless they're before or after a more-indented line, or at the very\n  // beginning or end, in which case $k$ maps to $k$.\n  // Therefore, parse each chunk as newline(s) followed by a content line.\n  var lineRe = /(\\n+)([^\\n]*)/g; // first line (possibly an empty line)\n\n  var result = function () {\n    var nextLF = string.indexOf('\\n');\n    nextLF = nextLF !== -1 ? nextLF : string.length;\n    lineRe.lastIndex = nextLF;\n    return foldLine(string.slice(0, nextLF), width);\n  }(); // If we haven't reached the first content line yet, don't add an extra \\n.\n\n\n  var prevMoreIndented = string[0] === '\\n' || string[0] === ' ';\n  var moreIndented; // rest of the lines\n\n  var match;\n\n  while (match = lineRe.exec(string)) {\n    var prefix = match[1],\n        line = match[2];\n    moreIndented = line[0] === ' ';\n    result += prefix + (!prevMoreIndented && !moreIndented && line !== '' ? '\\n' : '') + foldLine(line, width);\n    prevMoreIndented = moreIndented;\n  }\n\n  return result;\n} // Greedy line breaking.\n// Picks the longest line under the limit each time,\n// otherwise settles for the shortest line over the limit.\n// NB. More-indented lines *cannot* be folded, as that would add an extra \\n.\n\n\nfunction foldLine(line, width) {\n  if (line === '' || line[0] === ' ') return line; // Since a more-indented line adds a \\n, breaks can't be followed by a space.\n\n  var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.\n\n  var match; // start is an inclusive index. end, curr, and next are exclusive.\n\n  var start = 0,\n      end,\n      curr = 0,\n      next = 0;\n  var result = ''; // Invariants: 0 <= start <= length-1.\n  //   0 <= curr <= next <= max(0, length-2). curr - start <= width.\n  // Inside the loop:\n  //   A match implies length >= 2, so curr and next are <= length-2.\n\n  while (match = breakRe.exec(line)) {\n    next = match.index; // maintain invariant: curr - start <= width\n\n    if (next - start > width) {\n      end = curr > start ? curr : next; // derive end <= length-2\n\n      result += '\\n' + line.slice(start, end); // skip the space that was output as \\n\n\n      start = end + 1; // derive start <= length-1\n    }\n\n    curr = next;\n  } // By the invariants, start <= length-1, so there is something left over.\n  // It is either the whole string or a part starting from non-whitespace.\n\n\n  result += '\\n'; // Insert a break if the remainder is too long and there is a break available.\n\n  if (line.length - start > width && curr > start) {\n    result += line.slice(start, curr) + '\\n' + line.slice(curr + 1);\n  } else {\n    result += line.slice(start);\n  }\n\n  return result.slice(1); // drop extra \\n joiner\n} // Escapes a double-quoted string.\n\n\nfunction escapeString(string) {\n  var result = '';\n  var char, nextChar;\n  var escapeSeq;\n\n  for (var i = 0; i < string.length; i++) {\n    char = string.charCodeAt(i); // Check for surrogate pairs (reference Unicode 3.0 section \"3.7 Surrogates\").\n\n    if (char >= 0xD800 && char <= 0xDBFF\n    /* high surrogate */\n    ) {\n      nextChar = string.charCodeAt(i + 1);\n\n      if (nextChar >= 0xDC00 && nextChar <= 0xDFFF\n      /* low surrogate */\n      ) {\n        // Combine the surrogate pair and store it escaped.\n        result += encodeHex((char - 0xD800) * 0x400 + nextChar - 0xDC00 + 0x10000); // Advance index one extra since we already used that char here.\n\n        i++;\n        continue;\n      }\n    }\n\n    escapeSeq = ESCAPE_SEQUENCES[char];\n    result += !escapeSeq && isPrintable(char) ? string[i] : escapeSeq || encodeHex(char);\n  }\n\n  return result;\n}\n\nfunction writeFlowSequence(state, level, object) {\n  var _result = '',\n      _tag = state.tag,\n      index,\n      length;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    // Write only valid elements.\n    if (writeNode(state, level, object[index], false, false)) {\n      if (index !== 0) _result += ',' + (!state.condenseFlow ? ' ' : '');\n      _result += state.dump;\n    }\n  }\n\n  state.tag = _tag;\n  state.dump = '[' + _result + ']';\n}\n\nfunction writeBlockSequence(state, level, object, compact) {\n  var _result = '',\n      _tag = state.tag,\n      index,\n      length;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    // Write only valid elements.\n    if (writeNode(state, level + 1, object[index], true, true)) {\n      if (!compact || index !== 0) {\n        _result += generateNextLine(state, level);\n      }\n\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        _result += '-';\n      } else {\n        _result += '- ';\n      }\n\n      _result += state.dump;\n    }\n  }\n\n  state.tag = _tag;\n  state.dump = _result || '[]'; // Empty sequence if no valid values.\n}\n\nfunction writeFlowMapping(state, level, object) {\n  var _result = '',\n      _tag = state.tag,\n      objectKeyList = Object.keys(object),\n      index,\n      length,\n      objectKey,\n      objectValue,\n      pairBuffer;\n\n  for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n    pairBuffer = '';\n    if (index !== 0) pairBuffer += ', ';\n    if (state.condenseFlow) pairBuffer += '\"';\n    objectKey = objectKeyList[index];\n    objectValue = object[objectKey];\n\n    if (!writeNode(state, level, objectKey, false, false)) {\n      continue; // Skip this pair because of invalid key;\n    }\n\n    if (state.dump.length > 1024) pairBuffer += '? ';\n    pairBuffer += state.dump + (state.condenseFlow ? '\"' : '') + ':' + (state.condenseFlow ? '' : ' ');\n\n    if (!writeNode(state, level, objectValue, false, false)) {\n      continue; // Skip this pair because of invalid value.\n    }\n\n    pairBuffer += state.dump; // Both key and value are valid.\n\n    _result += pairBuffer;\n  }\n\n  state.tag = _tag;\n  state.dump = '{' + _result + '}';\n}\n\nfunction writeBlockMapping(state, level, object, compact) {\n  var _result = '',\n      _tag = state.tag,\n      objectKeyList = Object.keys(object),\n      index,\n      length,\n      objectKey,\n      objectValue,\n      explicitPair,\n      pairBuffer; // Allow sorting keys so that the output file is deterministic\n\n  if (state.sortKeys === true) {\n    // Default sorting\n    objectKeyList.sort();\n  } else if (typeof state.sortKeys === 'function') {\n    // Custom sort function\n    objectKeyList.sort(state.sortKeys);\n  } else if (state.sortKeys) {\n    // Something is wrong\n    throw new YAMLException('sortKeys must be a boolean or a function');\n  }\n\n  for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n    pairBuffer = '';\n\n    if (!compact || index !== 0) {\n      pairBuffer += generateNextLine(state, level);\n    }\n\n    objectKey = objectKeyList[index];\n    objectValue = object[objectKey];\n\n    if (!writeNode(state, level + 1, objectKey, true, true, true)) {\n      continue; // Skip this pair because of invalid key.\n    }\n\n    explicitPair = state.tag !== null && state.tag !== '?' || state.dump && state.dump.length > 1024;\n\n    if (explicitPair) {\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        pairBuffer += '?';\n      } else {\n        pairBuffer += '? ';\n      }\n    }\n\n    pairBuffer += state.dump;\n\n    if (explicitPair) {\n      pairBuffer += generateNextLine(state, level);\n    }\n\n    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {\n      continue; // Skip this pair because of invalid value.\n    }\n\n    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n      pairBuffer += ':';\n    } else {\n      pairBuffer += ': ';\n    }\n\n    pairBuffer += state.dump; // Both key and value are valid.\n\n    _result += pairBuffer;\n  }\n\n  state.tag = _tag;\n  state.dump = _result || '{}'; // Empty mapping if no valid pairs.\n}\n\nfunction detectType(state, object, explicit) {\n  var _result, typeList, index, length, type, style;\n\n  typeList = explicit ? state.explicitTypes : state.implicitTypes;\n\n  for (index = 0, length = typeList.length; index < length; index += 1) {\n    type = typeList[index];\n\n    if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === 'object' && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {\n      state.tag = explicit ? type.tag : '?';\n\n      if (type.represent) {\n        style = state.styleMap[type.tag] || type.defaultStyle;\n\n        if (_toString.call(type.represent) === '[object Function]') {\n          _result = type.represent(object, style);\n        } else if (_hasOwnProperty.call(type.represent, style)) {\n          _result = type.represent[style](object, style);\n        } else {\n          throw new YAMLException('!<' + type.tag + '> tag resolver accepts not \"' + style + '\" style');\n        }\n\n        state.dump = _result;\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n} // Serializes `object` and writes it to global `result`.\n// Returns true on success, or false on invalid object.\n//\n\n\nfunction writeNode(state, level, object, block, compact, iskey) {\n  state.tag = null;\n  state.dump = object;\n\n  if (!detectType(state, object, false)) {\n    detectType(state, object, true);\n  }\n\n  var type = _toString.call(state.dump);\n\n  if (block) {\n    block = state.flowLevel < 0 || state.flowLevel > level;\n  }\n\n  var objectOrArray = type === '[object Object]' || type === '[object Array]',\n      duplicateIndex,\n      duplicate;\n\n  if (objectOrArray) {\n    duplicateIndex = state.duplicates.indexOf(object);\n    duplicate = duplicateIndex !== -1;\n  }\n\n  if (state.tag !== null && state.tag !== '?' || duplicate || state.indent !== 2 && level > 0) {\n    compact = false;\n  }\n\n  if (duplicate && state.usedDuplicates[duplicateIndex]) {\n    state.dump = '*ref_' + duplicateIndex;\n  } else {\n    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {\n      state.usedDuplicates[duplicateIndex] = true;\n    }\n\n    if (type === '[object Object]') {\n      if (block && Object.keys(state.dump).length !== 0) {\n        writeBlockMapping(state, level, state.dump, compact);\n\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + state.dump;\n        }\n      } else {\n        writeFlowMapping(state, level, state.dump);\n\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n        }\n      }\n    } else if (type === '[object Array]') {\n      var arrayLevel = state.noArrayIndent && level > 0 ? level - 1 : level;\n\n      if (block && state.dump.length !== 0) {\n        writeBlockSequence(state, arrayLevel, state.dump, compact);\n\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + state.dump;\n        }\n      } else {\n        writeFlowSequence(state, arrayLevel, state.dump);\n\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n        }\n      }\n    } else if (type === '[object String]') {\n      if (state.tag !== '?') {\n        writeScalar(state, state.dump, level, iskey);\n      }\n    } else {\n      if (state.skipInvalid) return false;\n      throw new YAMLException('unacceptable kind of an object to dump ' + type);\n    }\n\n    if (state.tag !== null && state.tag !== '?') {\n      state.dump = '!<' + state.tag + '> ' + state.dump;\n    }\n  }\n\n  return true;\n}\n\nfunction getDuplicateReferences(object, state) {\n  var objects = [],\n      duplicatesIndexes = [],\n      index,\n      length;\n  inspectNode(object, objects, duplicatesIndexes);\n\n  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {\n    state.duplicates.push(objects[duplicatesIndexes[index]]);\n  }\n\n  state.usedDuplicates = new Array(length);\n}\n\nfunction inspectNode(object, objects, duplicatesIndexes) {\n  var objectKeyList, index, length;\n\n  if (object !== null && typeof object === 'object') {\n    index = objects.indexOf(object);\n\n    if (index !== -1) {\n      if (duplicatesIndexes.indexOf(index) === -1) {\n        duplicatesIndexes.push(index);\n      }\n    } else {\n      objects.push(object);\n\n      if (Array.isArray(object)) {\n        for (index = 0, length = object.length; index < length; index += 1) {\n          inspectNode(object[index], objects, duplicatesIndexes);\n        }\n      } else {\n        objectKeyList = Object.keys(object);\n\n        for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);\n        }\n      }\n    }\n  }\n}\n\nfunction dump(input, options) {\n  options = options || {};\n  var state = new State(options);\n  if (!state.noRefs) getDuplicateReferences(input, state);\n  if (writeNode(state, 0, input, true, true)) return state.dump + '\\n';\n  return '';\n}\n\nfunction safeDump(input, options) {\n  return dump(input, common.extend({\n    schema: DEFAULT_SAFE_SCHEMA\n  }, options));\n}\n\nmodule.exports.dump = dump;\nmodule.exports.safeDump = safeDump;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9kdW1wZXIuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYjs7QUFFQSxJQUFJQSxNQUFNLEdBQWdCQyxtQkFBTyxDQUFDLDhEQUFELENBQWpDOztBQUNBLElBQUlDLGFBQWEsR0FBU0QsbUJBQU8sQ0FBQyxvRUFBRCxDQUFqQzs7QUFDQSxJQUFJRSxtQkFBbUIsR0FBR0YsbUJBQU8sQ0FBQyx3RkFBRCxDQUFqQzs7QUFDQSxJQUFJRyxtQkFBbUIsR0FBR0gsbUJBQU8sQ0FBQyx3RkFBRCxDQUFqQzs7QUFFQSxJQUFJSSxTQUFTLEdBQVNDLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFBdkM7QUFDQSxJQUFJQyxlQUFlLEdBQUdILE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkcsY0FBdkM7QUFFQSxJQUFJQyxRQUFRLEdBQW9CLElBQWhDO0FBQXNDOztBQUN0QyxJQUFJQyxjQUFjLEdBQWMsSUFBaEM7QUFBc0M7O0FBQ3RDLElBQUlDLG9CQUFvQixHQUFRLElBQWhDO0FBQXNDOztBQUN0QyxJQUFJQyxVQUFVLEdBQWtCLElBQWhDO0FBQXNDOztBQUN0QyxJQUFJQyxnQkFBZ0IsR0FBWSxJQUFoQztBQUFzQzs7QUFDdEMsSUFBSUMsaUJBQWlCLEdBQVcsSUFBaEM7QUFBc0M7O0FBQ3RDLElBQUlDLFVBQVUsR0FBa0IsSUFBaEM7QUFBc0M7O0FBQ3RDLElBQUlDLFlBQVksR0FBZ0IsSUFBaEM7QUFBc0M7O0FBQ3RDLElBQUlDLGNBQWMsR0FBYyxJQUFoQztBQUFzQzs7QUFDdEMsSUFBSUMsaUJBQWlCLEdBQVcsSUFBaEM7QUFBc0M7O0FBQ3RDLElBQUlDLGFBQWEsR0FBZSxJQUFoQztBQUFzQzs7QUFDdEMsSUFBSUMsVUFBVSxHQUFrQixJQUFoQztBQUFzQzs7QUFDdEMsSUFBSUMsVUFBVSxHQUFrQixJQUFoQztBQUFzQzs7QUFDdEMsSUFBSUMsVUFBVSxHQUFrQixJQUFoQztBQUFzQzs7QUFDdEMsSUFBSUMs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QUFYO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Y7QUFDRjs7QUFFRCxTQUFTekQsSUFBVCxDQUFjOEQsS0FBZCxFQUFxQjdILE9BQXJCLEVBQThCO0FBQzVCQSxFQUFBQSxPQUFPLEdBQUdBLE9BQU8sSUFBSSxFQUFyQjtBQUVBLE1BQUk0QixLQUFLLEdBQUcsSUFBSTdCLEtBQUosQ0FBVUMsT0FBVixDQUFaO0FBRUEsTUFBSSxDQUFDNEIsS0FBSyxDQUFDakIsTUFBWCxFQUFtQjJHLHNCQUFzQixDQUFDTyxLQUFELEVBQVFqRyxLQUFSLENBQXRCO0FBRW5CLE1BQUltRSxTQUFTLENBQUNuRSxLQUFELEVBQVEsQ0FBUixFQUFXaUcsS0FBWCxFQUFrQixJQUFsQixFQUF3QixJQUF4QixDQUFiLEVBQTRDLE9BQU9qRyxLQUFLLENBQUNtQyxJQUFOLEdBQWEsSUFBcEI7QUFFNUMsU0FBTyxFQUFQO0FBQ0Q7O0FBRUQsU0FBUytELFFBQVQsQ0FBa0JELEtBQWxCLEVBQXlCN0gsT0FBekIsRUFBa0M7QUFDaEMsU0FBTytELElBQUksQ0FBQzhELEtBQUQsRUFBUXhMLE1BQU0sQ0FBQzBMLE1BQVAsQ0FBYztBQUFFcEosSUFBQUEsTUFBTSxFQUFFbEM7QUFBVixHQUFkLEVBQStDdUQsT0FBL0MsQ0FBUixDQUFYO0FBQ0Q7O0FBRURnSSxtQkFBQSxHQUEwQmpFLElBQTFCO0FBQ0FpRSx1QkFBQSxHQUEwQkYsUUFBMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9kdW1wZXIuanM/NWNmZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tdXNlLWJlZm9yZS1kZWZpbmUqL1xuXG52YXIgY29tbW9uICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG52YXIgWUFNTEV4Y2VwdGlvbiAgICAgICA9IHJlcXVpcmUoJy4vZXhjZXB0aW9uJyk7XG52YXIgREVGQVVMVF9GVUxMX1NDSEVNQSA9IHJlcXVpcmUoJy4vc2NoZW1hL2RlZmF1bHRfZnVsbCcpO1xudmFyIERFRkFVTFRfU0FGRV9TQ0hFTUEgPSByZXF1aXJlKCcuL3NjaGVtYS9kZWZhdWx0X3NhZmUnKTtcblxudmFyIF90b1N0cmluZyAgICAgICA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgX2hhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIENIQVJfVEFCICAgICAgICAgICAgICAgICAgPSAweDA5OyAvKiBUYWIgKi9cbnZhciBDSEFSX0xJTkVfRkVFRCAgICAgICAgICAgID0gMHgwQTsgLyogTEYgKi9cbnZhciBDSEFSX0NBUlJJQUdFX1JFVFVSTiAgICAgID0gMHgwRDsgLyogQ1IgKi9cbnZhciBDSEFSX1NQQUNFICAgICAgICAgICAgICAgID0gMHgyMDsgLyogU3BhY2UgKi9cbnZhciBDSEFSX0VYQ0xBTUFUSU9OICAgICAgICAgID0gMHgyMTsgLyogISAqL1xudmFyIENIQVJfRE9VQkxFX1FVT1RFICAgICAgICAgPSAweDIyOyAvKiBcIiAqL1xudmFyIENIQVJfU0hBUlAgICAgICAgICAgICAgICAgPSAweDIzOyAvKiAjICovXG52YXIgQ0hBUl9QRVJDRU5UICAgICAgICAgICAgICA9IDB4MjU7IC8qICUgKi9cbnZhciBDSEFSX0FNUEVSU0FORCAgICAgICAgICAgID0gMHgyNjsgLyogJiAqL1xudmFyIENIQVJfU0lOR0xFX1FVT1RFICAgICAgICAgPSAweDI3OyAvKiAnICovXG52YXIgQ0hBUl9BU1RFUklTSyAgICAgICAgICAgICA9IDB4MkE7IC8qICogKi9cbnZhciBDSEFSX0NPTU1BICAgICAgICAgICAgICAgID0gMHgyQzsgLyogLCAqL1xudmFyIENIQVJfTUlOVVMgICAgICAgICAgICAgICAgPSAweDJEOyAvKiAtICovXG52YXIgQ0hBUl9DT0xPTiAgICAgICAgICAgICAgICA9IDB4M0E7IC8qIDogKi9cbnZhciBDSEFSX0VRVUFMUyAgICAgICAgICAgICAgID0gMHgzRDsgLyogPSAqL1xudmFyIENIQVJfR1JFQVRFUl9USEFOICAgICAgICAgPSAweDNFOyAvKiA+ICovXG52YXIgQ0hBUl9RVUVTVElPTiAgICAgICAgICAgICA9IDB4M0Y7IC8qID8gKi9cbnZhciBDSEFSX0NPTU1FUkNJQUxfQVQgICAgICAgID0gMHg0MDsgLyogQCAqL1xudmFyIENIQVJfTEVGVF9TUVVBUkVfQlJBQ0tFVCAgPSAweDVCOyAvKiBbICovXG52YXIgQ0hBUl9SSUdIVF9TUVVBUkVfQlJBQ0tFVCA9IDB4NUQ7IC8qIF0gKi9cbnZhciBDSEFSX0dSQVZFX0FDQ0VOVCAgICAgICAgID0gMHg2MDsgLyogYCAqL1xudmFyIENIQVJfTEVGVF9DVVJMWV9CUkFDS0VUICAgPSAweDdCOyAvKiB7ICovXG52YXIgQ0hBUl9WRVJUSUNBTF9MSU5FICAgICAgICA9IDB4N0M7IC8qIHwgKi9cbnZhciBDSEFSX1JJR0hUX0NVUkxZX0JSQUNLRVQgID0gMHg3RDsgLyogfSAqL1xuXG52YXIgRVNDQVBFX1NFUVVFTkNFUyA9IHt9O1xuXG5FU0NBUEVfU0VRVUVOQ0VTWzB4MDBdICAgPSAnXFxcXDAnO1xuRVNDQVBFX1NFUVVFTkNFU1sweDA3XSAgID0gJ1xcXFxhJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgwOF0gICA9ICdcXFxcYic7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MDldICAgPSAnXFxcXHQnO1xuRVNDQVBFX1NFUVVFTkNFU1sweDBBXSAgID0gJ1xcXFxuJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgwQl0gICA9ICdcXFxcdic7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MENdICAgPSAnXFxcXGYnO1xuRVNDQVBFX1NFUVVFTkNFU1sweDBEXSAgID0gJ1xcXFxyJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgxQl0gICA9ICdcXFxcZSc7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MjJdICAgPSAnXFxcXFwiJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHg1Q10gICA9ICdcXFxcXFxcXCc7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4ODVdICAgPSAnXFxcXE4nO1xuRVNDQVBFX1NFUVVFTkNFU1sweEEwXSAgID0gJ1xcXFxfJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgyMDI4XSA9ICdcXFxcTCc7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MjAyOV0gPSAnXFxcXFAnO1xuXG52YXIgREVQUkVDQVRFRF9CT09MRUFOU19TWU5UQVggPSBbXG4gICd5JywgJ1knLCAneWVzJywgJ1llcycsICdZRVMnLCAnb24nLCAnT24nLCAnT04nLFxuICAnbicsICdOJywgJ25vJywgJ05vJywgJ05PJywgJ29mZicsICdPZmYnLCAnT0ZGJ1xuXTtcblxuZnVuY3Rpb24gY29tcGlsZVN0eWxlTWFwKHNjaGVtYSwgbWFwKSB7XG4gIHZhciByZXN1bHQsIGtleXMsIGluZGV4LCBsZW5ndGgsIHRhZywgc3R5bGUsIHR5cGU7XG5cbiAgaWYgKG1hcCA9PT0gbnVsbCkgcmV0dXJuIHt9O1xuXG4gIHJlc3VsdCA9IHt9O1xuICBrZXlzID0gT2JqZWN0LmtleXMobWFwKTtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgdGFnID0ga2V5c1tpbmRleF07XG4gICAgc3R5bGUgPSBTdHJpbmcobWFwW3RhZ10pO1xuXG4gICAgaWYgKHRhZy5zbGljZSgwLCAyKSA9PT0gJyEhJykge1xuICAgICAgdGFnID0gJ3RhZzp5YW1sLm9yZywyMDAyOicgKyB0YWcuc2xpY2UoMik7XG4gICAgfVxuICAgIHR5cGUgPSBzY2hlbWEuY29tcGlsZWRUeXBlTWFwWydmYWxsYmFjayddW3RhZ107XG5cbiAgICBpZiAodHlwZSAmJiBfaGFzT3duUHJvcGVydHkuY2FsbCh0eXBlLnN0eWxlQWxpYXNlcywgc3R5bGUpKSB7XG4gICAgICBzdHlsZSA9IHR5cGUuc3R5bGVBbGlhc2VzW3N0eWxlXTtcbiAgICB9XG5cbiAgICByZXN1bHRbdGFnXSA9IHN0eWxlO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZW5jb2RlSGV4KGNoYXJhY3Rlcikge1xuICB2YXIgc3RyaW5nLCBoYW5kbGUsIGxlbmd0aDtcblxuICBzdHJpbmcgPSBjaGFyYWN0ZXIudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG5cbiAgaWYgKGNoYXJhY3RlciA8PSAweEZGKSB7XG4gICAgaGFuZGxlID0gJ3gnO1xuICAgIGxlbmd0aCA9IDI7XG4gIH0gZWxzZSBpZiAoY2hhcmFjdGVyIDw9IDB4RkZGRikge1xuICAgIGhhbmRsZSA9ICd1JztcbiAgICBsZW5ndGggPSA0O1xuICB9IGVsc2UgaWYgKGNoYXJhY3RlciA8PSAweEZGRkZGRkZGKSB7XG4gICAgaGFuZGxlID0gJ1UnO1xuICAgIGxlbmd0aCA9IDg7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFlBTUxFeGNlcHRpb24oJ2NvZGUgcG9pbnQgd2l0aGluIGEgc3RyaW5nIG1heSBub3QgYmUgZ3JlYXRlciB0aGFuIDB4RkZGRkZGRkYnKTtcbiAgfVxuXG4gIHJldHVybiAnXFxcXCcgKyBoYW5kbGUgKyBjb21tb24ucmVwZWF0KCcwJywgbGVuZ3RoIC0gc3RyaW5nLmxlbmd0aCkgKyBzdHJpbmc7XG59XG5cbmZ1bmN0aW9uIFN0YXRlKG9wdGlvbnMpIHtcbiAgdGhpcy5zY2hlbWEgICAgICAgID0gb3B0aW9uc1snc2NoZW1hJ10gfHwgREVGQVVMVF9GVUxMX1NDSEVNQTtcbiAgdGhpcy5pbmRlbnQgICAgICAgID0gTWF0aC5tYXgoMSwgKG9wdGlvbnNbJ2luZGVudCddIHx8IDIpKTtcbiAgdGhpcy5ub0FycmF5SW5kZW50ID0gb3B0aW9uc1snbm9BcnJheUluZGVudCddIHx8IGZhbHNlO1xuICB0aGlzLnNraXBJbnZhbGlkICAgPSBvcHRpb25zWydza2lwSW52YWxpZCddIHx8IGZhbHNlO1xuICB0aGlzLmZsb3dMZXZlbCAgICAgPSAoY29tbW9uLmlzTm90aGluZyhvcHRpb25zWydmbG93TGV2ZWwnXSkgPyAtMSA6IG9wdGlvbnNbJ2Zsb3dMZXZlbCddKTtcbiAgdGhpcy5zdHlsZU1hcCAgICAgID0gY29tcGlsZVN0eWxlTWFwKHRoaXMuc2NoZW1hLCBvcHRpb25zWydzdHlsZXMnXSB8fCBudWxsKTtcbiAgdGhpcy5zb3J0S2V5cyAgICAgID0gb3B0aW9uc1snc29ydEtleXMnXSB8fCBmYWxzZTtcbiAgdGhpcy5saW5lV2lkdGggICAgID0gb3B0aW9uc1snbGluZVdpZHRoJ10gfHwgODA7XG4gIHRoaXMubm9SZWZzICAgICAgICA9IG9wdGlvbnNbJ25vUmVmcyddIHx8IGZhbHNlO1xuICB0aGlzLm5vQ29tcGF0TW9kZSAgPSBvcHRpb25zWydub0NvbXBhdE1vZGUnXSB8fCBmYWxzZTtcbiAgdGhpcy5jb25kZW5zZUZsb3cgID0gb3B0aW9uc1snY29uZGVuc2VGbG93J10gfHwgZmFsc2U7XG5cbiAgdGhpcy5pbXBsaWNpdFR5cGVzID0gdGhpcy5zY2hlbWEuY29tcGlsZWRJbXBsaWNpdDtcbiAgdGhpcy5leHBsaWNpdFR5cGVzID0gdGhpcy5zY2hlbWEuY29tcGlsZWRFeHBsaWNpdDtcblxuICB0aGlzLnRhZyA9IG51bGw7XG4gIHRoaXMucmVzdWx0ID0gJyc7XG5cbiAgdGhpcy5kdXBsaWNhdGVzID0gW107XG4gIHRoaXMudXNlZER1cGxpY2F0ZXMgPSBudWxsO1xufVxuXG4vLyBJbmRlbnRzIGV2ZXJ5IGxpbmUgaW4gYSBzdHJpbmcuIEVtcHR5IGxpbmVzIChcXG4gb25seSkgYXJlIG5vdCBpbmRlbnRlZC5cbmZ1bmN0aW9uIGluZGVudFN0cmluZyhzdHJpbmcsIHNwYWNlcykge1xuICB2YXIgaW5kID0gY29tbW9uLnJlcGVhdCgnICcsIHNwYWNlcyksXG4gICAgICBwb3NpdGlvbiA9IDAsXG4gICAgICBuZXh0ID0gLTEsXG4gICAgICByZXN1bHQgPSAnJyxcbiAgICAgIGxpbmUsXG4gICAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuXG4gIHdoaWxlIChwb3NpdGlvbiA8IGxlbmd0aCkge1xuICAgIG5leHQgPSBzdHJpbmcuaW5kZXhPZignXFxuJywgcG9zaXRpb24pO1xuICAgIGlmIChuZXh0ID09PSAtMSkge1xuICAgICAgbGluZSA9IHN0cmluZy5zbGljZShwb3NpdGlvbik7XG4gICAgICBwb3NpdGlvbiA9IGxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGluZSA9IHN0cmluZy5zbGljZShwb3NpdGlvbiwgbmV4dCArIDEpO1xuICAgICAgcG9zaXRpb24gPSBuZXh0ICsgMTtcbiAgICB9XG5cbiAgICBpZiAobGluZS5sZW5ndGggJiYgbGluZSAhPT0gJ1xcbicpIHJlc3VsdCArPSBpbmQ7XG5cbiAgICByZXN1bHQgKz0gbGluZTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlTmV4dExpbmUoc3RhdGUsIGxldmVsKSB7XG4gIHJldHVybiAnXFxuJyArIGNvbW1vbi5yZXBlYXQoJyAnLCBzdGF0ZS5pbmRlbnQgKiBsZXZlbCk7XG59XG5cbmZ1bmN0aW9uIHRlc3RJbXBsaWNpdFJlc29sdmluZyhzdGF0ZSwgc3RyKSB7XG4gIHZhciBpbmRleCwgbGVuZ3RoLCB0eXBlO1xuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBzdGF0ZS5pbXBsaWNpdFR5cGVzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICB0eXBlID0gc3RhdGUuaW1wbGljaXRUeXBlc1tpbmRleF07XG5cbiAgICBpZiAodHlwZS5yZXNvbHZlKHN0cikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLy8gWzMzXSBzLXdoaXRlIDo6PSBzLXNwYWNlIHwgcy10YWJcbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZShjKSB7XG4gIHJldHVybiBjID09PSBDSEFSX1NQQUNFIHx8IGMgPT09IENIQVJfVEFCO1xufVxuXG4vLyBSZXR1cm5zIHRydWUgaWYgdGhlIGNoYXJhY3RlciBjYW4gYmUgcHJpbnRlZCB3aXRob3V0IGVzY2FwaW5nLlxuLy8gRnJvbSBZQU1MIDEuMjogXCJhbnkgYWxsb3dlZCBjaGFyYWN0ZXJzIGtub3duIHRvIGJlIG5vbi1wcmludGFibGVcbi8vIHNob3VsZCBhbHNvIGJlIGVzY2FwZWQuIFtIb3dldmVyLF0gVGhpcyBpc27igJl0IG1hbmRhdG9yeVwiXG4vLyBEZXJpdmVkIGZyb20gbmItY2hhciAtIFxcdCAtICN4ODUgLSAjeEEwIC0gI3gyMDI4IC0gI3gyMDI5LlxuZnVuY3Rpb24gaXNQcmludGFibGUoYykge1xuICByZXR1cm4gICgweDAwMDIwIDw9IGMgJiYgYyA8PSAweDAwMDA3RSlcbiAgICAgIHx8ICgoMHgwMDBBMSA8PSBjICYmIGMgPD0gMHgwMEQ3RkYpICYmIGMgIT09IDB4MjAyOCAmJiBjICE9PSAweDIwMjkpXG4gICAgICB8fCAoKDB4MEUwMDAgPD0gYyAmJiBjIDw9IDB4MDBGRkZEKSAmJiBjICE9PSAweEZFRkYgLyogQk9NICovKVxuICAgICAgfHwgICgweDEwMDAwIDw9IGMgJiYgYyA8PSAweDEwRkZGRik7XG59XG5cbi8vIFszNF0gbnMtY2hhciA6Oj0gbmItY2hhciAtIHMtd2hpdGVcbi8vIFsyN10gbmItY2hhciA6Oj0gYy1wcmludGFibGUgLSBiLWNoYXIgLSBjLWJ5dGUtb3JkZXItbWFya1xuLy8gWzI2XSBiLWNoYXIgIDo6PSBiLWxpbmUtZmVlZCB8IGItY2FycmlhZ2UtcmV0dXJuXG4vLyBbMjRdIGItbGluZS1mZWVkICAgICAgIDo6PSAgICAgI3hBICAgIC8qIExGICovXG4vLyBbMjVdIGItY2FycmlhZ2UtcmV0dXJuIDo6PSAgICAgI3hEICAgIC8qIENSICovXG4vLyBbM10gIGMtYnl0ZS1vcmRlci1tYXJrIDo6PSAgICAgI3hGRUZGXG5mdW5jdGlvbiBpc05zQ2hhcihjKSB7XG4gIHJldHVybiBpc1ByaW50YWJsZShjKSAmJiAhaXNXaGl0ZXNwYWNlKGMpXG4gICAgLy8gYnl0ZS1vcmRlci1tYXJrXG4gICAgJiYgYyAhPT0gMHhGRUZGXG4gICAgLy8gYi1jaGFyXG4gICAgJiYgYyAhPT0gQ0hBUl9DQVJSSUFHRV9SRVRVUk5cbiAgICAmJiBjICE9PSBDSEFSX0xJTkVfRkVFRDtcbn1cblxuLy8gU2ltcGxpZmllZCB0ZXN0IGZvciB2YWx1ZXMgYWxsb3dlZCBhZnRlciB0aGUgZmlyc3QgY2hhcmFjdGVyIGluIHBsYWluIHN0eWxlLlxuZnVuY3Rpb24gaXNQbGFpblNhZmUoYywgcHJldikge1xuICAvLyBVc2VzIGEgc3Vic2V0IG9mIG5iLWNoYXIgLSBjLWZsb3ctaW5kaWNhdG9yIC0gXCI6XCIgLSBcIiNcIlxuICAvLyB3aGVyZSBuYi1jaGFyIDo6PSBjLXByaW50YWJsZSAtIGItY2hhciAtIGMtYnl0ZS1vcmRlci1tYXJrLlxuICByZXR1cm4gaXNQcmludGFibGUoYykgJiYgYyAhPT0gMHhGRUZGXG4gICAgLy8gLSBjLWZsb3ctaW5kaWNhdG9yXG4gICAgJiYgYyAhPT0gQ0hBUl9DT01NQVxuICAgICYmIGMgIT09IENIQVJfTEVGVF9TUVVBUkVfQlJBQ0tFVFxuICAgICYmIGMgIT09IENIQVJfUklHSFRfU1FVQVJFX0JSQUNLRVRcbiAgICAmJiBjICE9PSBDSEFSX0xFRlRfQ1VSTFlfQlJBQ0tFVFxuICAgICYmIGMgIT09IENIQVJfUklHSFRfQ1VSTFlfQlJBQ0tFVFxuICAgIC8vIC0gXCI6XCIgLSBcIiNcIlxuICAgIC8vIC8qIEFuIG5zLWNoYXIgcHJlY2VkaW5nICovIFwiI1wiXG4gICAgJiYgYyAhPT0gQ0hBUl9DT0xPTlxuICAgICYmICgoYyAhPT0gQ0hBUl9TSEFSUCkgfHwgKHByZXYgJiYgaXNOc0NoYXIocHJldikpKTtcbn1cblxuLy8gU2ltcGxpZmllZCB0ZXN0IGZvciB2YWx1ZXMgYWxsb3dlZCBhcyB0aGUgZmlyc3QgY2hhcmFjdGVyIGluIHBsYWluIHN0eWxlLlxuZnVuY3Rpb24gaXNQbGFpblNhZmVGaXJzdChjKSB7XG4gIC8vIFVzZXMgYSBzdWJzZXQgb2YgbnMtY2hhciAtIGMtaW5kaWNhdG9yXG4gIC8vIHdoZXJlIG5zLWNoYXIgPSBuYi1jaGFyIC0gcy13aGl0ZS5cbiAgcmV0dXJuIGlzUHJpbnRhYmxlKGMpICYmIGMgIT09IDB4RkVGRlxuICAgICYmICFpc1doaXRlc3BhY2UoYykgLy8gLSBzLXdoaXRlXG4gICAgLy8gLSAoYy1pbmRpY2F0b3IgOjo9XG4gICAgLy8g4oCcLeKAnSB8IOKAnD/igJ0gfCDigJw64oCdIHwg4oCcLOKAnSB8IOKAnFvigJ0gfCDigJxd4oCdIHwg4oCce+KAnSB8IOKAnH3igJ1cbiAgICAmJiBjICE9PSBDSEFSX01JTlVTXG4gICAgJiYgYyAhPT0gQ0hBUl9RVUVTVElPTlxuICAgICYmIGMgIT09IENIQVJfQ09MT05cbiAgICAmJiBjICE9PSBDSEFSX0NPTU1BXG4gICAgJiYgYyAhPT0gQ0hBUl9MRUZUX1NRVUFSRV9CUkFDS0VUXG4gICAgJiYgYyAhPT0gQ0hBUl9SSUdIVF9TUVVBUkVfQlJBQ0tFVFxuICAgICYmIGMgIT09IENIQVJfTEVGVF9DVVJMWV9CUkFDS0VUXG4gICAgJiYgYyAhPT0gQ0hBUl9SSUdIVF9DVVJMWV9CUkFDS0VUXG4gICAgLy8gfCDigJwj4oCdIHwg4oCcJuKAnSB8IOKAnCrigJ0gfCDigJwh4oCdIHwg4oCcfOKAnSB8IOKAnD3igJ0gfCDigJw+4oCdIHwg4oCcJ+KAnSB8IOKAnFwi4oCdXG4gICAgJiYgYyAhPT0gQ0hBUl9TSEFSUFxuICAgICYmIGMgIT09IENIQVJfQU1QRVJTQU5EXG4gICAgJiYgYyAhPT0gQ0hBUl9BU1RFUklTS1xuICAgICYmIGMgIT09IENIQVJfRVhDTEFNQVRJT05cbiAgICAmJiBjICE9PSBDSEFSX1ZFUlRJQ0FMX0xJTkVcbiAgICAmJiBjICE9PSBDSEFSX0VRVUFMU1xuICAgICYmIGMgIT09IENIQVJfR1JFQVRFUl9USEFOXG4gICAgJiYgYyAhPT0gQ0hBUl9TSU5HTEVfUVVPVEVcbiAgICAmJiBjICE9PSBDSEFSX0RPVUJMRV9RVU9URVxuICAgIC8vIHwg4oCcJeKAnSB8IOKAnEDigJ0gfCDigJxg4oCdKVxuICAgICYmIGMgIT09IENIQVJfUEVSQ0VOVFxuICAgICYmIGMgIT09IENIQVJfQ09NTUVSQ0lBTF9BVFxuICAgICYmIGMgIT09IENIQVJfR1JBVkVfQUNDRU5UO1xufVxuXG4vLyBEZXRlcm1pbmVzIHdoZXRoZXIgYmxvY2sgaW5kZW50YXRpb24gaW5kaWNhdG9yIGlzIHJlcXVpcmVkLlxuZnVuY3Rpb24gbmVlZEluZGVudEluZGljYXRvcihzdHJpbmcpIHtcbiAgdmFyIGxlYWRpbmdTcGFjZVJlID0gL15cXG4qIC87XG4gIHJldHVybiBsZWFkaW5nU3BhY2VSZS50ZXN0KHN0cmluZyk7XG59XG5cbnZhciBTVFlMRV9QTEFJTiAgID0gMSxcbiAgICBTVFlMRV9TSU5HTEUgID0gMixcbiAgICBTVFlMRV9MSVRFUkFMID0gMyxcbiAgICBTVFlMRV9GT0xERUQgID0gNCxcbiAgICBTVFlMRV9ET1VCTEUgID0gNTtcblxuLy8gRGV0ZXJtaW5lcyB3aGljaCBzY2FsYXIgc3R5bGVzIGFyZSBwb3NzaWJsZSBhbmQgcmV0dXJucyB0aGUgcHJlZmVycmVkIHN0eWxlLlxuLy8gbGluZVdpZHRoID0gLTEgPT4gbm8gbGltaXQuXG4vLyBQcmUtY29uZGl0aW9uczogc3RyLmxlbmd0aCA+IDAuXG4vLyBQb3N0LWNvbmRpdGlvbnM6XG4vLyAgICBTVFlMRV9QTEFJTiBvciBTVFlMRV9TSU5HTEUgPT4gbm8gXFxuIGFyZSBpbiB0aGUgc3RyaW5nLlxuLy8gICAgU1RZTEVfTElURVJBTCA9PiBubyBsaW5lcyBhcmUgc3VpdGFibGUgZm9yIGZvbGRpbmcgKG9yIGxpbmVXaWR0aCBpcyAtMSkuXG4vLyAgICBTVFlMRV9GT0xERUQgPT4gYSBsaW5lID4gbGluZVdpZHRoIGFuZCBjYW4gYmUgZm9sZGVkIChhbmQgbGluZVdpZHRoICE9IC0xKS5cbmZ1bmN0aW9uIGNob29zZVNjYWxhclN0eWxlKHN0cmluZywgc2luZ2xlTGluZU9ubHksIGluZGVudFBlckxldmVsLCBsaW5lV2lkdGgsIHRlc3RBbWJpZ3VvdXNUeXBlKSB7XG4gIHZhciBpO1xuICB2YXIgY2hhciwgcHJldl9jaGFyO1xuICB2YXIgaGFzTGluZUJyZWFrID0gZmFsc2U7XG4gIHZhciBoYXNGb2xkYWJsZUxpbmUgPSBmYWxzZTsgLy8gb25seSBjaGVja2VkIGlmIHNob3VsZFRyYWNrV2lkdGhcbiAgdmFyIHNob3VsZFRyYWNrV2lkdGggPSBsaW5lV2lkdGggIT09IC0xO1xuICB2YXIgcHJldmlvdXNMaW5lQnJlYWsgPSAtMTsgLy8gY291bnQgdGhlIGZpcnN0IGxpbmUgY29ycmVjdGx5XG4gIHZhciBwbGFpbiA9IGlzUGxhaW5TYWZlRmlyc3Qoc3RyaW5nLmNoYXJDb2RlQXQoMCkpXG4gICAgICAgICAgJiYgIWlzV2hpdGVzcGFjZShzdHJpbmcuY2hhckNvZGVBdChzdHJpbmcubGVuZ3RoIC0gMSkpO1xuXG4gIGlmIChzaW5nbGVMaW5lT25seSkge1xuICAgIC8vIENhc2U6IG5vIGJsb2NrIHN0eWxlcy5cbiAgICAvLyBDaGVjayBmb3IgZGlzYWxsb3dlZCBjaGFyYWN0ZXJzIHRvIHJ1bGUgb3V0IHBsYWluIGFuZCBzaW5nbGUuXG4gICAgZm9yIChpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7IGkrKykge1xuICAgICAgY2hhciA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgaWYgKCFpc1ByaW50YWJsZShjaGFyKSkge1xuICAgICAgICByZXR1cm4gU1RZTEVfRE9VQkxFO1xuICAgICAgfVxuICAgICAgcHJldl9jaGFyID0gaSA+IDAgPyBzdHJpbmcuY2hhckNvZGVBdChpIC0gMSkgOiBudWxsO1xuICAgICAgcGxhaW4gPSBwbGFpbiAmJiBpc1BsYWluU2FmZShjaGFyLCBwcmV2X2NoYXIpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBDYXNlOiBibG9jayBzdHlsZXMgcGVybWl0dGVkLlxuICAgIGZvciAoaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoYXIgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcbiAgICAgIGlmIChjaGFyID09PSBDSEFSX0xJTkVfRkVFRCkge1xuICAgICAgICBoYXNMaW5lQnJlYWsgPSB0cnVlO1xuICAgICAgICAvLyBDaGVjayBpZiBhbnkgbGluZSBjYW4gYmUgZm9sZGVkLlxuICAgICAgICBpZiAoc2hvdWxkVHJhY2tXaWR0aCkge1xuICAgICAgICAgIGhhc0ZvbGRhYmxlTGluZSA9IGhhc0ZvbGRhYmxlTGluZSB8fFxuICAgICAgICAgICAgLy8gRm9sZGFibGUgbGluZSA9IHRvbyBsb25nLCBhbmQgbm90IG1vcmUtaW5kZW50ZWQuXG4gICAgICAgICAgICAoaSAtIHByZXZpb3VzTGluZUJyZWFrIC0gMSA+IGxpbmVXaWR0aCAmJlxuICAgICAgICAgICAgIHN0cmluZ1twcmV2aW91c0xpbmVCcmVhayArIDFdICE9PSAnICcpO1xuICAgICAgICAgIHByZXZpb3VzTGluZUJyZWFrID0gaTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghaXNQcmludGFibGUoY2hhcikpIHtcbiAgICAgICAgcmV0dXJuIFNUWUxFX0RPVUJMRTtcbiAgICAgIH1cbiAgICAgIHByZXZfY2hhciA9IGkgPiAwID8gc3RyaW5nLmNoYXJDb2RlQXQoaSAtIDEpIDogbnVsbDtcbiAgICAgIHBsYWluID0gcGxhaW4gJiYgaXNQbGFpblNhZmUoY2hhciwgcHJldl9jaGFyKTtcbiAgICB9XG4gICAgLy8gaW4gY2FzZSB0aGUgZW5kIGlzIG1pc3NpbmcgYSBcXG5cbiAgICBoYXNGb2xkYWJsZUxpbmUgPSBoYXNGb2xkYWJsZUxpbmUgfHwgKHNob3VsZFRyYWNrV2lkdGggJiZcbiAgICAgIChpIC0gcHJldmlvdXNMaW5lQnJlYWsgLSAxID4gbGluZVdpZHRoICYmXG4gICAgICAgc3RyaW5nW3ByZXZpb3VzTGluZUJyZWFrICsgMV0gIT09ICcgJykpO1xuICB9XG4gIC8vIEFsdGhvdWdoIGV2ZXJ5IHN0eWxlIGNhbiByZXByZXNlbnQgXFxuIHdpdGhvdXQgZXNjYXBpbmcsIHByZWZlciBibG9jayBzdHlsZXNcbiAgLy8gZm9yIG11bHRpbGluZSwgc2luY2UgdGhleSdyZSBtb3JlIHJlYWRhYmxlIGFuZCB0aGV5IGRvbid0IGFkZCBlbXB0eSBsaW5lcy5cbiAgLy8gQWxzbyBwcmVmZXIgZm9sZGluZyBhIHN1cGVyLWxvbmcgbGluZS5cbiAgaWYgKCFoYXNMaW5lQnJlYWsgJiYgIWhhc0ZvbGRhYmxlTGluZSkge1xuICAgIC8vIFN0cmluZ3MgaW50ZXJwcmV0YWJsZSBhcyBhbm90aGVyIHR5cGUgaGF2ZSB0byBiZSBxdW90ZWQ7XG4gICAgLy8gZS5nLiB0aGUgc3RyaW5nICd0cnVlJyB2cy4gdGhlIGJvb2xlYW4gdHJ1ZS5cbiAgICByZXR1cm4gcGxhaW4gJiYgIXRlc3RBbWJpZ3VvdXNUeXBlKHN0cmluZylcbiAgICAgID8gU1RZTEVfUExBSU4gOiBTVFlMRV9TSU5HTEU7XG4gIH1cbiAgLy8gRWRnZSBjYXNlOiBibG9jayBpbmRlbnRhdGlvbiBpbmRpY2F0b3IgY2FuIG9ubHkgaGF2ZSBvbmUgZGlnaXQuXG4gIGlmIChpbmRlbnRQZXJMZXZlbCA+IDkgJiYgbmVlZEluZGVudEluZGljYXRvcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIFNUWUxFX0RPVUJMRTtcbiAgfVxuICAvLyBBdCB0aGlzIHBvaW50IHdlIGtub3cgYmxvY2sgc3R5bGVzIGFyZSB2YWxpZC5cbiAgLy8gUHJlZmVyIGxpdGVyYWwgc3R5bGUgdW5sZXNzIHdlIHdhbnQgdG8gZm9sZC5cbiAgcmV0dXJuIGhhc0ZvbGRhYmxlTGluZSA/IFNUWUxFX0ZPTERFRCA6IFNUWUxFX0xJVEVSQUw7XG59XG5cbi8vIE5vdGU6IGxpbmUgYnJlYWtpbmcvZm9sZGluZyBpcyBpbXBsZW1lbnRlZCBmb3Igb25seSB0aGUgZm9sZGVkIHN0eWxlLlxuLy8gTkIuIFdlIGRyb3AgdGhlIGxhc3QgdHJhaWxpbmcgbmV3bGluZSAoaWYgYW55KSBvZiBhIHJldHVybmVkIGJsb2NrIHNjYWxhclxuLy8gIHNpbmNlIHRoZSBkdW1wZXIgYWRkcyBpdHMgb3duIG5ld2xpbmUuIFRoaXMgYWx3YXlzIHdvcmtzOlxuLy8gICAg4oCiIE5vIGVuZGluZyBuZXdsaW5lID0+IHVuYWZmZWN0ZWQ7IGFscmVhZHkgdXNpbmcgc3RyaXAgXCItXCIgY2hvbXBpbmcuXG4vLyAgICDigKIgRW5kaW5nIG5ld2xpbmUgICAgPT4gcmVtb3ZlZCB0aGVuIHJlc3RvcmVkLlxuLy8gIEltcG9ydGFudGx5LCB0aGlzIGtlZXBzIHRoZSBcIitcIiBjaG9tcCBpbmRpY2F0b3IgZnJvbSBnYWluaW5nIGFuIGV4dHJhIGxpbmUuXG5mdW5jdGlvbiB3cml0ZVNjYWxhcihzdGF0ZSwgc3RyaW5nLCBsZXZlbCwgaXNrZXkpIHtcbiAgc3RhdGUuZHVtcCA9IChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHN0cmluZy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBcIicnXCI7XG4gICAgfVxuICAgIGlmICghc3RhdGUubm9Db21wYXRNb2RlICYmXG4gICAgICAgIERFUFJFQ0FURURfQk9PTEVBTlNfU1lOVEFYLmluZGV4T2Yoc3RyaW5nKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBcIidcIiArIHN0cmluZyArIFwiJ1wiO1xuICAgIH1cblxuICAgIHZhciBpbmRlbnQgPSBzdGF0ZS5pbmRlbnQgKiBNYXRoLm1heCgxLCBsZXZlbCk7IC8vIG5vIDAtaW5kZW50IHNjYWxhcnNcbiAgICAvLyBBcyBpbmRlbnRhdGlvbiBnZXRzIGRlZXBlciwgbGV0IHRoZSB3aWR0aCBkZWNyZWFzZSBtb25vdG9uaWNhbGx5XG4gICAgLy8gdG8gdGhlIGxvd2VyIGJvdW5kIG1pbihzdGF0ZS5saW5lV2lkdGgsIDQwKS5cbiAgICAvLyBOb3RlIHRoYXQgdGhpcyBpbXBsaWVzXG4gICAgLy8gIHN0YXRlLmxpbmVXaWR0aCDiiaQgNDAgKyBzdGF0ZS5pbmRlbnQ6IHdpZHRoIGlzIGZpeGVkIGF0IHRoZSBsb3dlciBib3VuZC5cbiAgICAvLyAgc3RhdGUubGluZVdpZHRoID4gNDAgKyBzdGF0ZS5pbmRlbnQ6IHdpZHRoIGRlY3JlYXNlcyB1bnRpbCB0aGUgbG93ZXIgYm91bmQuXG4gICAgLy8gVGhpcyBiZWhhdmVzIGJldHRlciB0aGFuIGEgY29uc3RhbnQgbWluaW11bSB3aWR0aCB3aGljaCBkaXNhbGxvd3MgbmFycm93ZXIgb3B0aW9ucyxcbiAgICAvLyBvciBhbiBpbmRlbnQgdGhyZXNob2xkIHdoaWNoIGNhdXNlcyB0aGUgd2lkdGggdG8gc3VkZGVubHkgaW5jcmVhc2UuXG4gICAgdmFyIGxpbmVXaWR0aCA9IHN0YXRlLmxpbmVXaWR0aCA9PT0gLTFcbiAgICAgID8gLTEgOiBNYXRoLm1heChNYXRoLm1pbihzdGF0ZS5saW5lV2lkdGgsIDQwKSwgc3RhdGUubGluZVdpZHRoIC0gaW5kZW50KTtcblxuICAgIC8vIFdpdGhvdXQga25vd2luZyBpZiBrZXlzIGFyZSBpbXBsaWNpdC9leHBsaWNpdCwgYXNzdW1lIGltcGxpY2l0IGZvciBzYWZldHkuXG4gICAgdmFyIHNpbmdsZUxpbmVPbmx5ID0gaXNrZXlcbiAgICAgIC8vIE5vIGJsb2NrIHN0eWxlcyBpbiBmbG93IG1vZGUuXG4gICAgICB8fCAoc3RhdGUuZmxvd0xldmVsID4gLTEgJiYgbGV2ZWwgPj0gc3RhdGUuZmxvd0xldmVsKTtcbiAgICBmdW5jdGlvbiB0ZXN0QW1iaWd1aXR5KHN0cmluZykge1xuICAgICAgcmV0dXJuIHRlc3RJbXBsaWNpdFJlc29sdmluZyhzdGF0ZSwgc3RyaW5nKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGNob29zZVNjYWxhclN0eWxlKHN0cmluZywgc2luZ2xlTGluZU9ubHksIHN0YXRlLmluZGVudCwgbGluZVdpZHRoLCB0ZXN0QW1iaWd1aXR5KSkge1xuICAgICAgY2FzZSBTVFlMRV9QTEFJTjpcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIGNhc2UgU1RZTEVfU0lOR0xFOlxuICAgICAgICByZXR1cm4gXCInXCIgKyBzdHJpbmcucmVwbGFjZSgvJy9nLCBcIicnXCIpICsgXCInXCI7XG4gICAgICBjYXNlIFNUWUxFX0xJVEVSQUw6XG4gICAgICAgIHJldHVybiAnfCcgKyBibG9ja0hlYWRlcihzdHJpbmcsIHN0YXRlLmluZGVudClcbiAgICAgICAgICArIGRyb3BFbmRpbmdOZXdsaW5lKGluZGVudFN0cmluZyhzdHJpbmcsIGluZGVudCkpO1xuICAgICAgY2FzZSBTVFlMRV9GT0xERUQ6XG4gICAgICAgIHJldHVybiAnPicgKyBibG9ja0hlYWRlcihzdHJpbmcsIHN0YXRlLmluZGVudClcbiAgICAgICAgICArIGRyb3BFbmRpbmdOZXdsaW5lKGluZGVudFN0cmluZyhmb2xkU3RyaW5nKHN0cmluZywgbGluZVdpZHRoKSwgaW5kZW50KSk7XG4gICAgICBjYXNlIFNUWUxFX0RPVUJMRTpcbiAgICAgICAgcmV0dXJuICdcIicgKyBlc2NhcGVTdHJpbmcoc3RyaW5nLCBsaW5lV2lkdGgpICsgJ1wiJztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCdpbXBvc3NpYmxlIGVycm9yOiBpbnZhbGlkIHNjYWxhciBzdHlsZScpO1xuICAgIH1cbiAgfSgpKTtcbn1cblxuLy8gUHJlLWNvbmRpdGlvbnM6IHN0cmluZyBpcyB2YWxpZCBmb3IgYSBibG9jayBzY2FsYXIsIDEgPD0gaW5kZW50UGVyTGV2ZWwgPD0gOS5cbmZ1bmN0aW9uIGJsb2NrSGVhZGVyKHN0cmluZywgaW5kZW50UGVyTGV2ZWwpIHtcbiAgdmFyIGluZGVudEluZGljYXRvciA9IG5lZWRJbmRlbnRJbmRpY2F0b3Ioc3RyaW5nKSA/IFN0cmluZyhpbmRlbnRQZXJMZXZlbCkgOiAnJztcblxuICAvLyBub3RlIHRoZSBzcGVjaWFsIGNhc2U6IHRoZSBzdHJpbmcgJ1xcbicgY291bnRzIGFzIGEgXCJ0cmFpbGluZ1wiIGVtcHR5IGxpbmUuXG4gIHZhciBjbGlwID0gICAgICAgICAgc3RyaW5nW3N0cmluZy5sZW5ndGggLSAxXSA9PT0gJ1xcbic7XG4gIHZhciBrZWVwID0gY2xpcCAmJiAoc3RyaW5nW3N0cmluZy5sZW5ndGggLSAyXSA9PT0gJ1xcbicgfHwgc3RyaW5nID09PSAnXFxuJyk7XG4gIHZhciBjaG9tcCA9IGtlZXAgPyAnKycgOiAoY2xpcCA/ICcnIDogJy0nKTtcblxuICByZXR1cm4gaW5kZW50SW5kaWNhdG9yICsgY2hvbXAgKyAnXFxuJztcbn1cblxuLy8gKFNlZSB0aGUgbm90ZSBmb3Igd3JpdGVTY2FsYXIuKVxuZnVuY3Rpb24gZHJvcEVuZGluZ05ld2xpbmUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmdbc3RyaW5nLmxlbmd0aCAtIDFdID09PSAnXFxuJyA/IHN0cmluZy5zbGljZSgwLCAtMSkgOiBzdHJpbmc7XG59XG5cbi8vIE5vdGU6IGEgbG9uZyBsaW5lIHdpdGhvdXQgYSBzdWl0YWJsZSBicmVhayBwb2ludCB3aWxsIGV4Y2VlZCB0aGUgd2lkdGggbGltaXQuXG4vLyBQcmUtY29uZGl0aW9uczogZXZlcnkgY2hhciBpbiBzdHIgaXNQcmludGFibGUsIHN0ci5sZW5ndGggPiAwLCB3aWR0aCA+IDAuXG5mdW5jdGlvbiBmb2xkU3RyaW5nKHN0cmluZywgd2lkdGgpIHtcbiAgLy8gSW4gZm9sZGVkIHN0eWxlLCAkayQgY29uc2VjdXRpdmUgbmV3bGluZXMgb3V0cHV0IGFzICRrKzEkIG5ld2xpbmVz4oCUXG4gIC8vIHVubGVzcyB0aGV5J3JlIGJlZm9yZSBvciBhZnRlciBhIG1vcmUtaW5kZW50ZWQgbGluZSwgb3IgYXQgdGhlIHZlcnlcbiAgLy8gYmVnaW5uaW5nIG9yIGVuZCwgaW4gd2hpY2ggY2FzZSAkayQgbWFwcyB0byAkayQuXG4gIC8vIFRoZXJlZm9yZSwgcGFyc2UgZWFjaCBjaHVuayBhcyBuZXdsaW5lKHMpIGZvbGxvd2VkIGJ5IGEgY29udGVudCBsaW5lLlxuICB2YXIgbGluZVJlID0gLyhcXG4rKShbXlxcbl0qKS9nO1xuXG4gIC8vIGZpcnN0IGxpbmUgKHBvc3NpYmx5IGFuIGVtcHR5IGxpbmUpXG4gIHZhciByZXN1bHQgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBuZXh0TEYgPSBzdHJpbmcuaW5kZXhPZignXFxuJyk7XG4gICAgbmV4dExGID0gbmV4dExGICE9PSAtMSA/IG5leHRMRiA6IHN0cmluZy5sZW5ndGg7XG4gICAgbGluZVJlLmxhc3RJbmRleCA9IG5leHRMRjtcbiAgICByZXR1cm4gZm9sZExpbmUoc3RyaW5nLnNsaWNlKDAsIG5leHRMRiksIHdpZHRoKTtcbiAgfSgpKTtcbiAgLy8gSWYgd2UgaGF2ZW4ndCByZWFjaGVkIHRoZSBmaXJzdCBjb250ZW50IGxpbmUgeWV0LCBkb24ndCBhZGQgYW4gZXh0cmEgXFxuLlxuICB2YXIgcHJldk1vcmVJbmRlbnRlZCA9IHN0cmluZ1swXSA9PT0gJ1xcbicgfHwgc3RyaW5nWzBdID09PSAnICc7XG4gIHZhciBtb3JlSW5kZW50ZWQ7XG5cbiAgLy8gcmVzdCBvZiB0aGUgbGluZXNcbiAgdmFyIG1hdGNoO1xuICB3aGlsZSAoKG1hdGNoID0gbGluZVJlLmV4ZWMoc3RyaW5nKSkpIHtcbiAgICB2YXIgcHJlZml4ID0gbWF0Y2hbMV0sIGxpbmUgPSBtYXRjaFsyXTtcbiAgICBtb3JlSW5kZW50ZWQgPSAobGluZVswXSA9PT0gJyAnKTtcbiAgICByZXN1bHQgKz0gcHJlZml4XG4gICAgICArICghcHJldk1vcmVJbmRlbnRlZCAmJiAhbW9yZUluZGVudGVkICYmIGxpbmUgIT09ICcnXG4gICAgICAgID8gJ1xcbicgOiAnJylcbiAgICAgICsgZm9sZExpbmUobGluZSwgd2lkdGgpO1xuICAgIHByZXZNb3JlSW5kZW50ZWQgPSBtb3JlSW5kZW50ZWQ7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyBHcmVlZHkgbGluZSBicmVha2luZy5cbi8vIFBpY2tzIHRoZSBsb25nZXN0IGxpbmUgdW5kZXIgdGhlIGxpbWl0IGVhY2ggdGltZSxcbi8vIG90aGVyd2lzZSBzZXR0bGVzIGZvciB0aGUgc2hvcnRlc3QgbGluZSBvdmVyIHRoZSBsaW1pdC5cbi8vIE5CLiBNb3JlLWluZGVudGVkIGxpbmVzICpjYW5ub3QqIGJlIGZvbGRlZCwgYXMgdGhhdCB3b3VsZCBhZGQgYW4gZXh0cmEgXFxuLlxuZnVuY3Rpb24gZm9sZExpbmUobGluZSwgd2lkdGgpIHtcbiAgaWYgKGxpbmUgPT09ICcnIHx8IGxpbmVbMF0gPT09ICcgJykgcmV0dXJuIGxpbmU7XG5cbiAgLy8gU2luY2UgYSBtb3JlLWluZGVudGVkIGxpbmUgYWRkcyBhIFxcbiwgYnJlYWtzIGNhbid0IGJlIGZvbGxvd2VkIGJ5IGEgc3BhY2UuXG4gIHZhciBicmVha1JlID0gLyBbXiBdL2c7IC8vIG5vdGU6IHRoZSBtYXRjaCBpbmRleCB3aWxsIGFsd2F5cyBiZSA8PSBsZW5ndGgtMi5cbiAgdmFyIG1hdGNoO1xuICAvLyBzdGFydCBpcyBhbiBpbmNsdXNpdmUgaW5kZXguIGVuZCwgY3VyciwgYW5kIG5leHQgYXJlIGV4Y2x1c2l2ZS5cbiAgdmFyIHN0YXJ0ID0gMCwgZW5kLCBjdXJyID0gMCwgbmV4dCA9IDA7XG4gIHZhciByZXN1bHQgPSAnJztcblxuICAvLyBJbnZhcmlhbnRzOiAwIDw9IHN0YXJ0IDw9IGxlbmd0aC0xLlxuICAvLyAgIDAgPD0gY3VyciA8PSBuZXh0IDw9IG1heCgwLCBsZW5ndGgtMikuIGN1cnIgLSBzdGFydCA8PSB3aWR0aC5cbiAgLy8gSW5zaWRlIHRoZSBsb29wOlxuICAvLyAgIEEgbWF0Y2ggaW1wbGllcyBsZW5ndGggPj0gMiwgc28gY3VyciBhbmQgbmV4dCBhcmUgPD0gbGVuZ3RoLTIuXG4gIHdoaWxlICgobWF0Y2ggPSBicmVha1JlLmV4ZWMobGluZSkpKSB7XG4gICAgbmV4dCA9IG1hdGNoLmluZGV4O1xuICAgIC8vIG1haW50YWluIGludmFyaWFudDogY3VyciAtIHN0YXJ0IDw9IHdpZHRoXG4gICAgaWYgKG5leHQgLSBzdGFydCA+IHdpZHRoKSB7XG4gICAgICBlbmQgPSAoY3VyciA+IHN0YXJ0KSA/IGN1cnIgOiBuZXh0OyAvLyBkZXJpdmUgZW5kIDw9IGxlbmd0aC0yXG4gICAgICByZXN1bHQgKz0gJ1xcbicgKyBsaW5lLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgICAgLy8gc2tpcCB0aGUgc3BhY2UgdGhhdCB3YXMgb3V0cHV0IGFzIFxcblxuICAgICAgc3RhcnQgPSBlbmQgKyAxOyAgICAgICAgICAgICAgICAgICAgLy8gZGVyaXZlIHN0YXJ0IDw9IGxlbmd0aC0xXG4gICAgfVxuICAgIGN1cnIgPSBuZXh0O1xuICB9XG5cbiAgLy8gQnkgdGhlIGludmFyaWFudHMsIHN0YXJ0IDw9IGxlbmd0aC0xLCBzbyB0aGVyZSBpcyBzb21ldGhpbmcgbGVmdCBvdmVyLlxuICAvLyBJdCBpcyBlaXRoZXIgdGhlIHdob2xlIHN0cmluZyBvciBhIHBhcnQgc3RhcnRpbmcgZnJvbSBub24td2hpdGVzcGFjZS5cbiAgcmVzdWx0ICs9ICdcXG4nO1xuICAvLyBJbnNlcnQgYSBicmVhayBpZiB0aGUgcmVtYWluZGVyIGlzIHRvbyBsb25nIGFuZCB0aGVyZSBpcyBhIGJyZWFrIGF2YWlsYWJsZS5cbiAgaWYgKGxpbmUubGVuZ3RoIC0gc3RhcnQgPiB3aWR0aCAmJiBjdXJyID4gc3RhcnQpIHtcbiAgICByZXN1bHQgKz0gbGluZS5zbGljZShzdGFydCwgY3VycikgKyAnXFxuJyArIGxpbmUuc2xpY2UoY3VyciArIDEpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCArPSBsaW5lLnNsaWNlKHN0YXJ0KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQuc2xpY2UoMSk7IC8vIGRyb3AgZXh0cmEgXFxuIGpvaW5lclxufVxuXG4vLyBFc2NhcGVzIGEgZG91YmxlLXF1b3RlZCBzdHJpbmcuXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcoc3RyaW5nKSB7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgdmFyIGNoYXIsIG5leHRDaGFyO1xuICB2YXIgZXNjYXBlU2VxO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hhciA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICAgIC8vIENoZWNrIGZvciBzdXJyb2dhdGUgcGFpcnMgKHJlZmVyZW5jZSBVbmljb2RlIDMuMCBzZWN0aW9uIFwiMy43IFN1cnJvZ2F0ZXNcIikuXG4gICAgaWYgKGNoYXIgPj0gMHhEODAwICYmIGNoYXIgPD0gMHhEQkZGLyogaGlnaCBzdXJyb2dhdGUgKi8pIHtcbiAgICAgIG5leHRDaGFyID0gc3RyaW5nLmNoYXJDb2RlQXQoaSArIDEpO1xuICAgICAgaWYgKG5leHRDaGFyID49IDB4REMwMCAmJiBuZXh0Q2hhciA8PSAweERGRkYvKiBsb3cgc3Vycm9nYXRlICovKSB7XG4gICAgICAgIC8vIENvbWJpbmUgdGhlIHN1cnJvZ2F0ZSBwYWlyIGFuZCBzdG9yZSBpdCBlc2NhcGVkLlxuICAgICAgICByZXN1bHQgKz0gZW5jb2RlSGV4KChjaGFyIC0gMHhEODAwKSAqIDB4NDAwICsgbmV4dENoYXIgLSAweERDMDAgKyAweDEwMDAwKTtcbiAgICAgICAgLy8gQWR2YW5jZSBpbmRleCBvbmUgZXh0cmEgc2luY2Ugd2UgYWxyZWFkeSB1c2VkIHRoYXQgY2hhciBoZXJlLlxuICAgICAgICBpKys7IGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBlc2NhcGVTZXEgPSBFU0NBUEVfU0VRVUVOQ0VTW2NoYXJdO1xuICAgIHJlc3VsdCArPSAhZXNjYXBlU2VxICYmIGlzUHJpbnRhYmxlKGNoYXIpXG4gICAgICA/IHN0cmluZ1tpXVxuICAgICAgOiBlc2NhcGVTZXEgfHwgZW5jb2RlSGV4KGNoYXIpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG93U2VxdWVuY2Uoc3RhdGUsIGxldmVsLCBvYmplY3QpIHtcbiAgdmFyIF9yZXN1bHQgPSAnJyxcbiAgICAgIF90YWcgICAgPSBzdGF0ZS50YWcsXG4gICAgICBpbmRleCxcbiAgICAgIGxlbmd0aDtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICAvLyBXcml0ZSBvbmx5IHZhbGlkIGVsZW1lbnRzLlxuICAgIGlmICh3cml0ZU5vZGUoc3RhdGUsIGxldmVsLCBvYmplY3RbaW5kZXhdLCBmYWxzZSwgZmFsc2UpKSB7XG4gICAgICBpZiAoaW5kZXggIT09IDApIF9yZXN1bHQgKz0gJywnICsgKCFzdGF0ZS5jb25kZW5zZUZsb3cgPyAnICcgOiAnJyk7XG4gICAgICBfcmVzdWx0ICs9IHN0YXRlLmR1bXA7XG4gICAgfVxuICB9XG5cbiAgc3RhdGUudGFnID0gX3RhZztcbiAgc3RhdGUuZHVtcCA9ICdbJyArIF9yZXN1bHQgKyAnXSc7XG59XG5cbmZ1bmN0aW9uIHdyaXRlQmxvY2tTZXF1ZW5jZShzdGF0ZSwgbGV2ZWwsIG9iamVjdCwgY29tcGFjdCkge1xuICB2YXIgX3Jlc3VsdCA9ICcnLFxuICAgICAgX3RhZyAgICA9IHN0YXRlLnRhZyxcbiAgICAgIGluZGV4LFxuICAgICAgbGVuZ3RoO1xuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBvYmplY3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIC8vIFdyaXRlIG9ubHkgdmFsaWQgZWxlbWVudHMuXG4gICAgaWYgKHdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwgKyAxLCBvYmplY3RbaW5kZXhdLCB0cnVlLCB0cnVlKSkge1xuICAgICAgaWYgKCFjb21wYWN0IHx8IGluZGV4ICE9PSAwKSB7XG4gICAgICAgIF9yZXN1bHQgKz0gZ2VuZXJhdGVOZXh0TGluZShzdGF0ZSwgbGV2ZWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUuZHVtcCAmJiBDSEFSX0xJTkVfRkVFRCA9PT0gc3RhdGUuZHVtcC5jaGFyQ29kZUF0KDApKSB7XG4gICAgICAgIF9yZXN1bHQgKz0gJy0nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3Jlc3VsdCArPSAnLSAnO1xuICAgICAgfVxuXG4gICAgICBfcmVzdWx0ICs9IHN0YXRlLmR1bXA7XG4gICAgfVxuICB9XG5cbiAgc3RhdGUudGFnID0gX3RhZztcbiAgc3RhdGUuZHVtcCA9IF9yZXN1bHQgfHwgJ1tdJzsgLy8gRW1wdHkgc2VxdWVuY2UgaWYgbm8gdmFsaWQgdmFsdWVzLlxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb3dNYXBwaW5nKHN0YXRlLCBsZXZlbCwgb2JqZWN0KSB7XG4gIHZhciBfcmVzdWx0ICAgICAgID0gJycsXG4gICAgICBfdGFnICAgICAgICAgID0gc3RhdGUudGFnLFxuICAgICAgb2JqZWN0S2V5TGlzdCA9IE9iamVjdC5rZXlzKG9iamVjdCksXG4gICAgICBpbmRleCxcbiAgICAgIGxlbmd0aCxcbiAgICAgIG9iamVjdEtleSxcbiAgICAgIG9iamVjdFZhbHVlLFxuICAgICAgcGFpckJ1ZmZlcjtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0S2V5TGlzdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG5cbiAgICBwYWlyQnVmZmVyID0gJyc7XG4gICAgaWYgKGluZGV4ICE9PSAwKSBwYWlyQnVmZmVyICs9ICcsICc7XG5cbiAgICBpZiAoc3RhdGUuY29uZGVuc2VGbG93KSBwYWlyQnVmZmVyICs9ICdcIic7XG5cbiAgICBvYmplY3RLZXkgPSBvYmplY3RLZXlMaXN0W2luZGV4XTtcbiAgICBvYmplY3RWYWx1ZSA9IG9iamVjdFtvYmplY3RLZXldO1xuXG4gICAgaWYgKCF3cml0ZU5vZGUoc3RhdGUsIGxldmVsLCBvYmplY3RLZXksIGZhbHNlLCBmYWxzZSkpIHtcbiAgICAgIGNvbnRpbnVlOyAvLyBTa2lwIHRoaXMgcGFpciBiZWNhdXNlIG9mIGludmFsaWQga2V5O1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5kdW1wLmxlbmd0aCA+IDEwMjQpIHBhaXJCdWZmZXIgKz0gJz8gJztcblxuICAgIHBhaXJCdWZmZXIgKz0gc3RhdGUuZHVtcCArIChzdGF0ZS5jb25kZW5zZUZsb3cgPyAnXCInIDogJycpICsgJzonICsgKHN0YXRlLmNvbmRlbnNlRmxvdyA/ICcnIDogJyAnKTtcblxuICAgIGlmICghd3JpdGVOb2RlKHN0YXRlLCBsZXZlbCwgb2JqZWN0VmFsdWUsIGZhbHNlLCBmYWxzZSkpIHtcbiAgICAgIGNvbnRpbnVlOyAvLyBTa2lwIHRoaXMgcGFpciBiZWNhdXNlIG9mIGludmFsaWQgdmFsdWUuXG4gICAgfVxuXG4gICAgcGFpckJ1ZmZlciArPSBzdGF0ZS5kdW1wO1xuXG4gICAgLy8gQm90aCBrZXkgYW5kIHZhbHVlIGFyZSB2YWxpZC5cbiAgICBfcmVzdWx0ICs9IHBhaXJCdWZmZXI7XG4gIH1cblxuICBzdGF0ZS50YWcgPSBfdGFnO1xuICBzdGF0ZS5kdW1wID0gJ3snICsgX3Jlc3VsdCArICd9Jztcbn1cblxuZnVuY3Rpb24gd3JpdGVCbG9ja01hcHBpbmcoc3RhdGUsIGxldmVsLCBvYmplY3QsIGNvbXBhY3QpIHtcbiAgdmFyIF9yZXN1bHQgICAgICAgPSAnJyxcbiAgICAgIF90YWcgICAgICAgICAgPSBzdGF0ZS50YWcsXG4gICAgICBvYmplY3RLZXlMaXN0ID0gT2JqZWN0LmtleXMob2JqZWN0KSxcbiAgICAgIGluZGV4LFxuICAgICAgbGVuZ3RoLFxuICAgICAgb2JqZWN0S2V5LFxuICAgICAgb2JqZWN0VmFsdWUsXG4gICAgICBleHBsaWNpdFBhaXIsXG4gICAgICBwYWlyQnVmZmVyO1xuXG4gIC8vIEFsbG93IHNvcnRpbmcga2V5cyBzbyB0aGF0IHRoZSBvdXRwdXQgZmlsZSBpcyBkZXRlcm1pbmlzdGljXG4gIGlmIChzdGF0ZS5zb3J0S2V5cyA9PT0gdHJ1ZSkge1xuICAgIC8vIERlZmF1bHQgc29ydGluZ1xuICAgIG9iamVjdEtleUxpc3Quc29ydCgpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBzdGF0ZS5zb3J0S2V5cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIEN1c3RvbSBzb3J0IGZ1bmN0aW9uXG4gICAgb2JqZWN0S2V5TGlzdC5zb3J0KHN0YXRlLnNvcnRLZXlzKTtcbiAgfSBlbHNlIGlmIChzdGF0ZS5zb3J0S2V5cykge1xuICAgIC8vIFNvbWV0aGluZyBpcyB3cm9uZ1xuICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCdzb3J0S2V5cyBtdXN0IGJlIGEgYm9vbGVhbiBvciBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0S2V5TGlzdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgcGFpckJ1ZmZlciA9ICcnO1xuXG4gICAgaWYgKCFjb21wYWN0IHx8IGluZGV4ICE9PSAwKSB7XG4gICAgICBwYWlyQnVmZmVyICs9IGdlbmVyYXRlTmV4dExpbmUoc3RhdGUsIGxldmVsKTtcbiAgICB9XG5cbiAgICBvYmplY3RLZXkgPSBvYmplY3RLZXlMaXN0W2luZGV4XTtcbiAgICBvYmplY3RWYWx1ZSA9IG9iamVjdFtvYmplY3RLZXldO1xuXG4gICAgaWYgKCF3cml0ZU5vZGUoc3RhdGUsIGxldmVsICsgMSwgb2JqZWN0S2V5LCB0cnVlLCB0cnVlLCB0cnVlKSkge1xuICAgICAgY29udGludWU7IC8vIFNraXAgdGhpcyBwYWlyIGJlY2F1c2Ugb2YgaW52YWxpZCBrZXkuXG4gICAgfVxuXG4gICAgZXhwbGljaXRQYWlyID0gKHN0YXRlLnRhZyAhPT0gbnVsbCAmJiBzdGF0ZS50YWcgIT09ICc/JykgfHxcbiAgICAgICAgICAgICAgICAgICAoc3RhdGUuZHVtcCAmJiBzdGF0ZS5kdW1wLmxlbmd0aCA+IDEwMjQpO1xuXG4gICAgaWYgKGV4cGxpY2l0UGFpcikge1xuICAgICAgaWYgKHN0YXRlLmR1bXAgJiYgQ0hBUl9MSU5FX0ZFRUQgPT09IHN0YXRlLmR1bXAuY2hhckNvZGVBdCgwKSkge1xuICAgICAgICBwYWlyQnVmZmVyICs9ICc/JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhaXJCdWZmZXIgKz0gJz8gJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYWlyQnVmZmVyICs9IHN0YXRlLmR1bXA7XG5cbiAgICBpZiAoZXhwbGljaXRQYWlyKSB7XG4gICAgICBwYWlyQnVmZmVyICs9IGdlbmVyYXRlTmV4dExpbmUoc3RhdGUsIGxldmVsKTtcbiAgICB9XG5cbiAgICBpZiAoIXdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwgKyAxLCBvYmplY3RWYWx1ZSwgdHJ1ZSwgZXhwbGljaXRQYWlyKSkge1xuICAgICAgY29udGludWU7IC8vIFNraXAgdGhpcyBwYWlyIGJlY2F1c2Ugb2YgaW52YWxpZCB2YWx1ZS5cbiAgICB9XG5cbiAgICBpZiAoc3RhdGUuZHVtcCAmJiBDSEFSX0xJTkVfRkVFRCA9PT0gc3RhdGUuZHVtcC5jaGFyQ29kZUF0KDApKSB7XG4gICAgICBwYWlyQnVmZmVyICs9ICc6JztcbiAgICB9IGVsc2Uge1xuICAgICAgcGFpckJ1ZmZlciArPSAnOiAnO1xuICAgIH1cblxuICAgIHBhaXJCdWZmZXIgKz0gc3RhdGUuZHVtcDtcblxuICAgIC8vIEJvdGgga2V5IGFuZCB2YWx1ZSBhcmUgdmFsaWQuXG4gICAgX3Jlc3VsdCArPSBwYWlyQnVmZmVyO1xuICB9XG5cbiAgc3RhdGUudGFnID0gX3RhZztcbiAgc3RhdGUuZHVtcCA9IF9yZXN1bHQgfHwgJ3t9JzsgLy8gRW1wdHkgbWFwcGluZyBpZiBubyB2YWxpZCBwYWlycy5cbn1cblxuZnVuY3Rpb24gZGV0ZWN0VHlwZShzdGF0ZSwgb2JqZWN0LCBleHBsaWNpdCkge1xuICB2YXIgX3Jlc3VsdCwgdHlwZUxpc3QsIGluZGV4LCBsZW5ndGgsIHR5cGUsIHN0eWxlO1xuXG4gIHR5cGVMaXN0ID0gZXhwbGljaXQgPyBzdGF0ZS5leHBsaWNpdFR5cGVzIDogc3RhdGUuaW1wbGljaXRUeXBlcztcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gdHlwZUxpc3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHR5cGUgPSB0eXBlTGlzdFtpbmRleF07XG5cbiAgICBpZiAoKHR5cGUuaW5zdGFuY2VPZiAgfHwgdHlwZS5wcmVkaWNhdGUpICYmXG4gICAgICAgICghdHlwZS5pbnN0YW5jZU9mIHx8ICgodHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcpICYmIChvYmplY3QgaW5zdGFuY2VvZiB0eXBlLmluc3RhbmNlT2YpKSkgJiZcbiAgICAgICAgKCF0eXBlLnByZWRpY2F0ZSAgfHwgdHlwZS5wcmVkaWNhdGUob2JqZWN0KSkpIHtcblxuICAgICAgc3RhdGUudGFnID0gZXhwbGljaXQgPyB0eXBlLnRhZyA6ICc/JztcblxuICAgICAgaWYgKHR5cGUucmVwcmVzZW50KSB7XG4gICAgICAgIHN0eWxlID0gc3RhdGUuc3R5bGVNYXBbdHlwZS50YWddIHx8IHR5cGUuZGVmYXVsdFN0eWxlO1xuXG4gICAgICAgIGlmIChfdG9TdHJpbmcuY2FsbCh0eXBlLnJlcHJlc2VudCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXScpIHtcbiAgICAgICAgICBfcmVzdWx0ID0gdHlwZS5yZXByZXNlbnQob2JqZWN0LCBzdHlsZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoX2hhc093blByb3BlcnR5LmNhbGwodHlwZS5yZXByZXNlbnQsIHN0eWxlKSkge1xuICAgICAgICAgIF9yZXN1bHQgPSB0eXBlLnJlcHJlc2VudFtzdHlsZV0ob2JqZWN0LCBzdHlsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFlBTUxFeGNlcHRpb24oJyE8JyArIHR5cGUudGFnICsgJz4gdGFnIHJlc29sdmVyIGFjY2VwdHMgbm90IFwiJyArIHN0eWxlICsgJ1wiIHN0eWxlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZS5kdW1wID0gX3Jlc3VsdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTZXJpYWxpemVzIGBvYmplY3RgIGFuZCB3cml0ZXMgaXQgdG8gZ2xvYmFsIGByZXN1bHRgLlxuLy8gUmV0dXJucyB0cnVlIG9uIHN1Y2Nlc3MsIG9yIGZhbHNlIG9uIGludmFsaWQgb2JqZWN0LlxuLy9cbmZ1bmN0aW9uIHdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwsIG9iamVjdCwgYmxvY2ssIGNvbXBhY3QsIGlza2V5KSB7XG4gIHN0YXRlLnRhZyA9IG51bGw7XG4gIHN0YXRlLmR1bXAgPSBvYmplY3Q7XG5cbiAgaWYgKCFkZXRlY3RUeXBlKHN0YXRlLCBvYmplY3QsIGZhbHNlKSkge1xuICAgIGRldGVjdFR5cGUoc3RhdGUsIG9iamVjdCwgdHJ1ZSk7XG4gIH1cblxuICB2YXIgdHlwZSA9IF90b1N0cmluZy5jYWxsKHN0YXRlLmR1bXApO1xuXG4gIGlmIChibG9jaykge1xuICAgIGJsb2NrID0gKHN0YXRlLmZsb3dMZXZlbCA8IDAgfHwgc3RhdGUuZmxvd0xldmVsID4gbGV2ZWwpO1xuICB9XG5cbiAgdmFyIG9iamVjdE9yQXJyYXkgPSB0eXBlID09PSAnW29iamVjdCBPYmplY3RdJyB8fCB0eXBlID09PSAnW29iamVjdCBBcnJheV0nLFxuICAgICAgZHVwbGljYXRlSW5kZXgsXG4gICAgICBkdXBsaWNhdGU7XG5cbiAgaWYgKG9iamVjdE9yQXJyYXkpIHtcbiAgICBkdXBsaWNhdGVJbmRleCA9IHN0YXRlLmR1cGxpY2F0ZXMuaW5kZXhPZihvYmplY3QpO1xuICAgIGR1cGxpY2F0ZSA9IGR1cGxpY2F0ZUluZGV4ICE9PSAtMTtcbiAgfVxuXG4gIGlmICgoc3RhdGUudGFnICE9PSBudWxsICYmIHN0YXRlLnRhZyAhPT0gJz8nKSB8fCBkdXBsaWNhdGUgfHwgKHN0YXRlLmluZGVudCAhPT0gMiAmJiBsZXZlbCA+IDApKSB7XG4gICAgY29tcGFjdCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKGR1cGxpY2F0ZSAmJiBzdGF0ZS51c2VkRHVwbGljYXRlc1tkdXBsaWNhdGVJbmRleF0pIHtcbiAgICBzdGF0ZS5kdW1wID0gJypyZWZfJyArIGR1cGxpY2F0ZUluZGV4O1xuICB9IGVsc2Uge1xuICAgIGlmIChvYmplY3RPckFycmF5ICYmIGR1cGxpY2F0ZSAmJiAhc3RhdGUudXNlZER1cGxpY2F0ZXNbZHVwbGljYXRlSW5kZXhdKSB7XG4gICAgICBzdGF0ZS51c2VkRHVwbGljYXRlc1tkdXBsaWNhdGVJbmRleF0gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAgIGlmIChibG9jayAmJiAoT2JqZWN0LmtleXMoc3RhdGUuZHVtcCkubGVuZ3RoICE9PSAwKSkge1xuICAgICAgICB3cml0ZUJsb2NrTWFwcGluZyhzdGF0ZSwgbGV2ZWwsIHN0YXRlLmR1bXAsIGNvbXBhY3QpO1xuICAgICAgICBpZiAoZHVwbGljYXRlKSB7XG4gICAgICAgICAgc3RhdGUuZHVtcCA9ICcmcmVmXycgKyBkdXBsaWNhdGVJbmRleCArIHN0YXRlLmR1bXA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdyaXRlRmxvd01hcHBpbmcoc3RhdGUsIGxldmVsLCBzdGF0ZS5kdW1wKTtcbiAgICAgICAgaWYgKGR1cGxpY2F0ZSkge1xuICAgICAgICAgIHN0YXRlLmR1bXAgPSAnJnJlZl8nICsgZHVwbGljYXRlSW5kZXggKyAnICcgKyBzdGF0ZS5kdW1wO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICB2YXIgYXJyYXlMZXZlbCA9IChzdGF0ZS5ub0FycmF5SW5kZW50ICYmIChsZXZlbCA+IDApKSA/IGxldmVsIC0gMSA6IGxldmVsO1xuICAgICAgaWYgKGJsb2NrICYmIChzdGF0ZS5kdW1wLmxlbmd0aCAhPT0gMCkpIHtcbiAgICAgICAgd3JpdGVCbG9ja1NlcXVlbmNlKHN0YXRlLCBhcnJheUxldmVsLCBzdGF0ZS5kdW1wLCBjb21wYWN0KTtcbiAgICAgICAgaWYgKGR1cGxpY2F0ZSkge1xuICAgICAgICAgIHN0YXRlLmR1bXAgPSAnJnJlZl8nICsgZHVwbGljYXRlSW5kZXggKyBzdGF0ZS5kdW1wO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3cml0ZUZsb3dTZXF1ZW5jZShzdGF0ZSwgYXJyYXlMZXZlbCwgc3RhdGUuZHVtcCk7XG4gICAgICAgIGlmIChkdXBsaWNhdGUpIHtcbiAgICAgICAgICBzdGF0ZS5kdW1wID0gJyZyZWZfJyArIGR1cGxpY2F0ZUluZGV4ICsgJyAnICsgc3RhdGUuZHVtcDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1tvYmplY3QgU3RyaW5nXScpIHtcbiAgICAgIGlmIChzdGF0ZS50YWcgIT09ICc/Jykge1xuICAgICAgICB3cml0ZVNjYWxhcihzdGF0ZSwgc3RhdGUuZHVtcCwgbGV2ZWwsIGlza2V5KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHN0YXRlLnNraXBJbnZhbGlkKSByZXR1cm4gZmFsc2U7XG4gICAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbigndW5hY2NlcHRhYmxlIGtpbmQgb2YgYW4gb2JqZWN0IHRvIGR1bXAgJyArIHR5cGUpO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS50YWcgIT09IG51bGwgJiYgc3RhdGUudGFnICE9PSAnPycpIHtcbiAgICAgIHN0YXRlLmR1bXAgPSAnITwnICsgc3RhdGUudGFnICsgJz4gJyArIHN0YXRlLmR1bXA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGdldER1cGxpY2F0ZVJlZmVyZW5jZXMob2JqZWN0LCBzdGF0ZSkge1xuICB2YXIgb2JqZWN0cyA9IFtdLFxuICAgICAgZHVwbGljYXRlc0luZGV4ZXMgPSBbXSxcbiAgICAgIGluZGV4LFxuICAgICAgbGVuZ3RoO1xuXG4gIGluc3BlY3ROb2RlKG9iamVjdCwgb2JqZWN0cywgZHVwbGljYXRlc0luZGV4ZXMpO1xuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBkdXBsaWNhdGVzSW5kZXhlcy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgc3RhdGUuZHVwbGljYXRlcy5wdXNoKG9iamVjdHNbZHVwbGljYXRlc0luZGV4ZXNbaW5kZXhdXSk7XG4gIH1cbiAgc3RhdGUudXNlZER1cGxpY2F0ZXMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gaW5zcGVjdE5vZGUob2JqZWN0LCBvYmplY3RzLCBkdXBsaWNhdGVzSW5kZXhlcykge1xuICB2YXIgb2JqZWN0S2V5TGlzdCxcbiAgICAgIGluZGV4LFxuICAgICAgbGVuZ3RoO1xuXG4gIGlmIChvYmplY3QgIT09IG51bGwgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcpIHtcbiAgICBpbmRleCA9IG9iamVjdHMuaW5kZXhPZihvYmplY3QpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIGlmIChkdXBsaWNhdGVzSW5kZXhlcy5pbmRleE9mKGluZGV4KSA9PT0gLTEpIHtcbiAgICAgICAgZHVwbGljYXRlc0luZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9iamVjdHMucHVzaChvYmplY3QpO1xuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBvYmplY3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgICAgICAgIGluc3BlY3ROb2RlKG9iamVjdFtpbmRleF0sIG9iamVjdHMsIGR1cGxpY2F0ZXNJbmRleGVzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0S2V5TGlzdCA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdEtleUxpc3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgICAgICAgIGluc3BlY3ROb2RlKG9iamVjdFtvYmplY3RLZXlMaXN0W2luZGV4XV0sIG9iamVjdHMsIGR1cGxpY2F0ZXNJbmRleGVzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkdW1wKGlucHV0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHZhciBzdGF0ZSA9IG5ldyBTdGF0ZShvcHRpb25zKTtcblxuICBpZiAoIXN0YXRlLm5vUmVmcykgZ2V0RHVwbGljYXRlUmVmZXJlbmNlcyhpbnB1dCwgc3RhdGUpO1xuXG4gIGlmICh3cml0ZU5vZGUoc3RhdGUsIDAsIGlucHV0LCB0cnVlLCB0cnVlKSkgcmV0dXJuIHN0YXRlLmR1bXAgKyAnXFxuJztcblxuICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIHNhZmVEdW1wKGlucHV0LCBvcHRpb25zKSB7XG4gIHJldHVybiBkdW1wKGlucHV0LCBjb21tb24uZXh0ZW5kKHsgc2NoZW1hOiBERUZBVUxUX1NBRkVfU0NIRU1BIH0sIG9wdGlvbnMpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZHVtcCAgICAgPSBkdW1wO1xubW9kdWxlLmV4cG9ydHMuc2FmZUR1bXAgPSBzYWZlRHVtcDtcbiJdLCJuYW1lcyI6WyJjb21tb24iLCJyZXF1aXJlIiwiWUFNTEV4Y2VwdGlvbiIsIkRFRkFVTFRfRlVMTF9TQ0hFTUEiLCJERUZBVUxUX1NBRkVfU0NIRU1BIiwiX3RvU3RyaW5nIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJfaGFzT3duUHJvcGVydHkiLCJoYXNPd25Qcm9wZXJ0eSIsIkNIQVJfVEFCIiwiQ0hBUl9MSU5FX0ZFRUQiLCJDSEFSX0NBUlJJQUdFX1JFVFVSTiIsIkNIQVJfU1BBQ0UiLCJDSEFSX0VYQ0xBTUFUSU9OIiwiQ0hBUl9ET1VCTEVfUVVPVEUiLCJDSEFSX1NIQVJQIiwiQ0hBUl9QRVJDRU5UIiwiQ0hBUl9BTVBFUlNBTkQiLCJDSEFSX1NJTkdMRV9RVU9URSIsIkNIQVJfQVNURVJJU0siLCJDSEFSX0NPTU1BIiwiQ0hBUl9NSU5VUyIsIkNIQVJfQ09MT04iLCJDSEFSX0VRVUFMUyIsIkNIQVJfR1JFQVRFUl9USEFOIiwiQ0hBUl9RVUVTVElPTiIsIkNIQVJfQ09NTUVSQ0lBTF9BVCIsIkNIQVJfTEVGVF9TUVVBUkVfQlJBQ0tFVCIsIkNIQVJfUklHSFRfU1FVQVJFX0JSQUNLRVQiLCJDSEFSX0dSQVZFX0FDQ0VOVCIsIkNIQVJfTEVGVF9DVVJMWV9CUkFDS0VUIiwiQ0hBUl9WRVJUSUNBTF9MSU5FIiwiQ0hBUl9SSUdIVF9DVVJMWV9CUkFDS0VUIiwiRVNDQVBFX1NFUVVFTkNFUyIsIkRFUFJFQ0FURURfQk9PTEVBTlNfU1lOVEFYIiwiY29tcGlsZVN0eWxlTWFwIiwic2NoZW1hIiwibWFwIiwicmVzdWx0Iiwia2V5cyIsImluZGV4IiwibGVuZ3RoIiwidGFnIiwic3R5bGUiLCJ0eXBlIiwiU3RyaW5nIiwic2xpY2UiLCJjb21waWxlZFR5cGVNYXAiLCJjYWxsIiwic3R5bGVBbGlhc2VzIiwiZW5jb2RlSGV4IiwiY2hhcmFjdGVyIiwic3RyaW5nIiwiaGFuZGxlIiwidG9VcHBlckNhc2UiLCJyZXBlYXQiLCJTdGF0ZSIsIm9wdGlvbnMiLCJpbmRlbnQiLCJNYXRoIiwibWF4Iiwibm9BcnJheUluZGVudCIsInNraXBJbnZhbGlkIiwiZmxvd0xldmVsIiwiaXNOb3RoaW5nIiwic3R5bGVNYXAiLCJzb3J0S2V5cyIsImxpbmVXaWR0aCIsIm5vUmVmcyIsIm5vQ29tcGF0TW9kZSIsImNvbmRlbnNlRmxvdyIsImltcGxpY2l0VHlwZXMiLCJjb21waWxlZEltcGxpY2l0IiwiZXhwbGljaXRUeXBlcyIsImNvbXBpbGVkRXhwbGljaXQiLCJkdXBsaWNhdGVzIiwidXNlZER1cGxpY2F0ZXMiLCJpbmRlbnRTdHJpbmciLCJzcGFjZXMiLCJpbmQiLCJwb3NpdGlvbiIsIm5leHQiLCJsaW5lIiwiaW5kZXhPZiIsImdlbmVyYXRlTmV4dExpbmUiLCJzdGF0ZSIsImxldmVsIiwidGVzdEltcGxpY2l0UmVzb2x2aW5nIiwic3RyIiwicmVzb2x2ZSIsImlzV2hpdGVzcGFjZSIsImMiLCJpc1ByaW50YWJsZSIsImlzTnNDaGFyIiwiaXNQbGFpblNhZmUiLCJwcmV2IiwiaXNQbGFpblNhZmVGaXJzdCIsIm5lZWRJbmRlbnRJbmRpY2F0b3IiLCJsZWFkaW5nU3BhY2VSZSIsInRlc3QiLCJTVFlMRV9QTEFJTiIsIlNUWUxFX1NJTkdMRSIsIlNUWUxFX0xJVEVSQUwiLCJTVFlMRV9GT0xERUQiLCJTVFlMRV9ET1VCTEUiLCJjaG9vc2VTY2FsYXJTdHlsZSIsInNpbmdsZUxpbmVPbmx5IiwiaW5kZW50UGVyTGV2ZWwiLCJ0ZXN0QW1iaWd1b3VzVHlwZSIsImkiLCJjaGFyIiwicHJldl9jaGFyIiwiaGFzTGluZUJyZWFrIiwiaGFzRm9sZGFibGVMaW5lIiwic2hvdWxkVHJhY2tXaWR0aCIsInByZXZpb3VzTGluZUJyZWFrIiwicGxhaW4iLCJjaGFyQ29kZUF0Iiwid3JpdGVTY2FsYXIiLCJpc2tleSIsImR1bXAiLCJtaW4iLCJ0ZXN0QW1iaWd1aXR5IiwicmVwbGFjZSIsImJsb2NrSGVhZGVyIiwiZHJvcEVuZGluZ05ld2xpbmUiLCJmb2xkU3RyaW5nIiwiZXNjYXBlU3RyaW5nIiwiaW5kZW50SW5kaWNhdG9yIiwiY2xpcCIsImtlZXAiLCJjaG9tcCIsIndpZHRoIiwibGluZVJlIiwibmV4dExGIiwibGFzdEluZGV4IiwiZm9sZExpbmUiLCJwcmV2TW9yZUluZGVudGVkIiwibW9yZUluZGVudGVkIiwibWF0Y2giLCJleGVjIiwicHJlZml4IiwiYnJlYWtSZSIsInN0YXJ0IiwiZW5kIiwiY3VyciIsIm5leHRDaGFyIiwiZXNjYXBlU2VxIiwid3JpdGVGbG93U2VxdWVuY2UiLCJvYmplY3QiLCJfcmVzdWx0IiwiX3RhZyIsIndyaXRlTm9kZSIsIndyaXRlQmxvY2tTZXF1ZW5jZSIsImNvbXBhY3QiLCJ3cml0ZUZsb3dNYXBwaW5nIiwib2JqZWN0S2V5TGlzdCIsIm9iamVjdEtleSIsIm9iamVjdFZhbHVlIiwicGFpckJ1ZmZlciIsIndyaXRlQmxvY2tNYXBwaW5nIiwiZXhwbGljaXRQYWlyIiwic29ydCIsImRldGVjdFR5cGUiLCJleHBsaWNpdCIsInR5cGVMaXN0IiwiaW5zdGFuY2VPZiIsInByZWRpY2F0ZSIsInJlcHJlc2VudCIsImRlZmF1bHRTdHlsZSIsImJsb2NrIiwib2JqZWN0T3JBcnJheSIsImR1cGxpY2F0ZUluZGV4IiwiZHVwbGljYXRlIiwiYXJyYXlMZXZlbCIsImdldER1cGxpY2F0ZVJlZmVyZW5jZXMiLCJvYmplY3RzIiwiZHVwbGljYXRlc0luZGV4ZXMiLCJpbnNwZWN0Tm9kZSIsInB1c2giLCJBcnJheSIsImlzQXJyYXkiLCJpbnB1dCIsInNhZmVEdW1wIiwiZXh0ZW5kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/dumper.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/exception.js":
/*!*******************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/exception.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";
eval("// YAML error class. http://stackoverflow.com/questions/8458984\n//\n\n\nfunction YAMLException(reason, mark) {\n  // Super constructor\n  Error.call(this);\n  this.name = 'YAMLException';\n  this.reason = reason;\n  this.mark = mark;\n  this.message = (this.reason || '(unknown reason)') + (this.mark ? ' ' + this.mark.toString() : ''); // Include stack trace in error object\n\n  if (Error.captureStackTrace) {\n    // Chrome and NodeJS\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    // FF, IE 10+ and Safari 6+. Fallback for others\n    this.stack = new Error().stack || '';\n  }\n} // Inherit from Error\n\n\nYAMLException.prototype = Object.create(Error.prototype);\nYAMLException.prototype.constructor = YAMLException;\n\nYAMLException.prototype.toString = function toString(compact) {\n  var result = this.name + ': ';\n  result += this.reason || '(unknown reason)';\n\n  if (!compact && this.mark) {\n    result += ' ' + this.mark.toString();\n  }\n\n  return result;\n};\n\nmodule.exports = YAMLException;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9leGNlcHRpb24uanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNhOztBQUViLFNBQVNBLGFBQVQsQ0FBdUJDLE1BQXZCLEVBQStCQyxJQUEvQixFQUFxQztBQUNuQztBQUNBQyxFQUFBQSxLQUFLLENBQUNDLElBQU4sQ0FBVyxJQUFYO0FBRUEsT0FBS0MsSUFBTCxHQUFZLGVBQVo7QUFDQSxPQUFLSixNQUFMLEdBQWNBLE1BQWQ7QUFDQSxPQUFLQyxJQUFMLEdBQVlBLElBQVo7QUFDQSxPQUFLSSxPQUFMLEdBQWUsQ0FBQyxLQUFLTCxNQUFMLElBQWUsa0JBQWhCLEtBQXVDLEtBQUtDLElBQUwsR0FBWSxNQUFNLEtBQUtBLElBQUwsQ0FBVUssUUFBVixFQUFsQixHQUF5QyxFQUFoRixDQUFmLENBUG1DLENBU25DOztBQUNBLE1BQUlKLEtBQUssQ0FBQ0ssaUJBQVYsRUFBNkI7QUFDM0I7QUFDQUwsSUFBQUEsS0FBSyxDQUFDSyxpQkFBTixDQUF3QixJQUF4QixFQUE4QixLQUFLQyxXQUFuQztBQUNELEdBSEQsTUFHTztBQUNMO0FBQ0EsU0FBS0MsS0FBTCxHQUFjLElBQUlQLEtBQUosRUFBRCxDQUFjTyxLQUFkLElBQXVCLEVBQXBDO0FBQ0Q7QUFDRixDLENBR0Q7OztBQUNBVixhQUFhLENBQUNXLFNBQWQsR0FBMEJDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjVixLQUFLLENBQUNRLFNBQXBCLENBQTFCO0FBQ0FYLGFBQWEsQ0FBQ1csU0FBZCxDQUF3QkYsV0FBeEIsR0FBc0NULGFBQXRDOztBQUdBQSxhQUFhLENBQUNXLFNBQWQsQ0FBd0JKLFFBQXhCLEdBQW1DLFNBQVNBLFFBQVQsQ0FBa0JPLE9BQWxCLEVBQTJCO0FBQzVELE1BQUlDLE1BQU0sR0FBRyxLQUFLVixJQUFMLEdBQVksSUFBekI7QUFFQVUsRUFBQUEsTUFBTSxJQUFJLEtBQUtkLE1BQUwsSUFBZSxrQkFBekI7O0FBRUEsTUFBSSxDQUFDYSxPQUFELElBQVksS0FBS1osSUFBckIsRUFBMkI7QUFDekJhLElBQUFBLE1BQU0sSUFBSSxNQUFNLEtBQUtiLElBQUwsQ0FBVUssUUFBVixFQUFoQjtBQUNEOztBQUVELFNBQU9RLE1BQVA7QUFDRCxDQVZEOztBQWFBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJqQixhQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL2V4Y2VwdGlvbi5qcz9jM2VhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFlBTUwgZXJyb3IgY2xhc3MuIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvODQ1ODk4NFxuLy9cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gWUFNTEV4Y2VwdGlvbihyZWFzb24sIG1hcmspIHtcbiAgLy8gU3VwZXIgY29uc3RydWN0b3JcbiAgRXJyb3IuY2FsbCh0aGlzKTtcblxuICB0aGlzLm5hbWUgPSAnWUFNTEV4Y2VwdGlvbic7XG4gIHRoaXMucmVhc29uID0gcmVhc29uO1xuICB0aGlzLm1hcmsgPSBtYXJrO1xuICB0aGlzLm1lc3NhZ2UgPSAodGhpcy5yZWFzb24gfHwgJyh1bmtub3duIHJlYXNvbiknKSArICh0aGlzLm1hcmsgPyAnICcgKyB0aGlzLm1hcmsudG9TdHJpbmcoKSA6ICcnKTtcblxuICAvLyBJbmNsdWRlIHN0YWNrIHRyYWNlIGluIGVycm9yIG9iamVjdFxuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAvLyBDaHJvbWUgYW5kIE5vZGVKU1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB9IGVsc2Uge1xuICAgIC8vIEZGLCBJRSAxMCsgYW5kIFNhZmFyaSA2Ky4gRmFsbGJhY2sgZm9yIG90aGVyc1xuICAgIHRoaXMuc3RhY2sgPSAobmV3IEVycm9yKCkpLnN0YWNrIHx8ICcnO1xuICB9XG59XG5cblxuLy8gSW5oZXJpdCBmcm9tIEVycm9yXG5ZQU1MRXhjZXB0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbllBTUxFeGNlcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gWUFNTEV4Y2VwdGlvbjtcblxuXG5ZQU1MRXhjZXB0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKGNvbXBhY3QpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMubmFtZSArICc6ICc7XG5cbiAgcmVzdWx0ICs9IHRoaXMucmVhc29uIHx8ICcodW5rbm93biByZWFzb24pJztcblxuICBpZiAoIWNvbXBhY3QgJiYgdGhpcy5tYXJrKSB7XG4gICAgcmVzdWx0ICs9ICcgJyArIHRoaXMubWFyay50b1N0cmluZygpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBZQU1MRXhjZXB0aW9uO1xuIl0sIm5hbWVzIjpbIllBTUxFeGNlcHRpb24iLCJyZWFzb24iLCJtYXJrIiwiRXJyb3IiLCJjYWxsIiwibmFtZSIsIm1lc3NhZ2UiLCJ0b1N0cmluZyIsImNhcHR1cmVTdGFja1RyYWNlIiwiY29uc3RydWN0b3IiLCJzdGFjayIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbXBhY3QiLCJyZXN1bHQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/exception.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/loader.js":
/*!****************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/loader.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/*eslint-disable max-len,no-use-before-define*/\n\nvar common = __webpack_require__(/*! ./common */ \"./node_modules/js-yaml/lib/js-yaml/common.js\");\n\nvar YAMLException = __webpack_require__(/*! ./exception */ \"./node_modules/js-yaml/lib/js-yaml/exception.js\");\n\nvar Mark = __webpack_require__(/*! ./mark */ \"./node_modules/js-yaml/lib/js-yaml/mark.js\");\n\nvar DEFAULT_SAFE_SCHEMA = __webpack_require__(/*! ./schema/default_safe */ \"./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js\");\n\nvar DEFAULT_FULL_SCHEMA = __webpack_require__(/*! ./schema/default_full */ \"./node_modules/js-yaml/lib/js-yaml/schema/default_full.js\");\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar CONTEXT_FLOW_IN = 1;\nvar CONTEXT_FLOW_OUT = 2;\nvar CONTEXT_BLOCK_IN = 3;\nvar CONTEXT_BLOCK_OUT = 4;\nvar CHOMPING_CLIP = 1;\nvar CHOMPING_STRIP = 2;\nvar CHOMPING_KEEP = 3;\nvar PATTERN_NON_PRINTABLE = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x84\\x86-\\x9F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nvar PATTERN_NON_ASCII_LINE_BREAKS = /[\\x85\\u2028\\u2029]/;\nvar PATTERN_FLOW_INDICATORS = /[,\\[\\]\\{\\}]/;\nvar PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\\-]+!)$/i;\nvar PATTERN_TAG_URI = /^(?:!|[^,\\[\\]\\{\\}])(?:%[0-9a-f]{2}|[0-9a-z\\-#;\\/\\?:@&=\\+\\$,_\\.!~\\*'\\(\\)\\[\\]])*$/i;\n\nfunction _class(obj) {\n  return Object.prototype.toString.call(obj);\n}\n\nfunction is_EOL(c) {\n  return c === 0x0A\n  /* LF */\n  || c === 0x0D\n  /* CR */\n  ;\n}\n\nfunction is_WHITE_SPACE(c) {\n  return c === 0x09\n  /* Tab */\n  || c === 0x20\n  /* Space */\n  ;\n}\n\nfunction is_WS_OR_EOL(c) {\n  return c === 0x09\n  /* Tab */\n  || c === 0x20\n  /* Space */\n  || c === 0x0A\n  /* LF */\n  || c === 0x0D\n  /* CR */\n  ;\n}\n\nfunction is_FLOW_INDICATOR(c) {\n  return c === 0x2C\n  /* , */\n  || c === 0x5B\n  /* [ */\n  || c === 0x5D\n  /* ] */\n  || c === 0x7B\n  /* { */\n  || c === 0x7D\n  /* } */\n  ;\n}\n\nfunction fromHexCode(c) {\n  var lc;\n\n  if (0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  ) {\n    return c - 0x30;\n  }\n  /*eslint-disable no-bitwise*/\n\n\n  lc = c | 0x20;\n\n  if (0x61\n  /* a */\n  <= lc && lc <= 0x66\n  /* f */\n  ) {\n    return lc - 0x61 + 10;\n  }\n\n  return -1;\n}\n\nfunction escapedHexLen(c) {\n  if (c === 0x78\n  /* x */\n  ) {\n    return 2;\n  }\n\n  if (c === 0x75\n  /* u */\n  ) {\n    return 4;\n  }\n\n  if (c === 0x55\n  /* U */\n  ) {\n    return 8;\n  }\n\n  return 0;\n}\n\nfunction fromDecimalCode(c) {\n  if (0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  ) {\n    return c - 0x30;\n  }\n\n  return -1;\n}\n\nfunction simpleEscapeSequence(c) {\n  /* eslint-disable indent */\n  return c === 0x30\n  /* 0 */\n  ? '\\x00' : c === 0x61\n  /* a */\n  ? '\\x07' : c === 0x62\n  /* b */\n  ? '\\x08' : c === 0x74\n  /* t */\n  ? '\\x09' : c === 0x09\n  /* Tab */\n  ? '\\x09' : c === 0x6E\n  /* n */\n  ? '\\x0A' : c === 0x76\n  /* v */\n  ? '\\x0B' : c === 0x66\n  /* f */\n  ? '\\x0C' : c === 0x72\n  /* r */\n  ? '\\x0D' : c === 0x65\n  /* e */\n  ? '\\x1B' : c === 0x20\n  /* Space */\n  ? ' ' : c === 0x22\n  /* \" */\n  ? '\\x22' : c === 0x2F\n  /* / */\n  ? '/' : c === 0x5C\n  /* \\ */\n  ? '\\x5C' : c === 0x4E\n  /* N */\n  ? '\\x85' : c === 0x5F\n  /* _ */\n  ? '\\xA0' : c === 0x4C\n  /* L */\n  ? '\\u2028' : c === 0x50\n  /* P */\n  ? '\\u2029' : '';\n}\n\nfunction charFromCodepoint(c) {\n  if (c <= 0xFFFF) {\n    return String.fromCharCode(c);\n  } // Encode UTF-16 surrogate pair\n  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF\n\n\n  return String.fromCharCode((c - 0x010000 >> 10) + 0xD800, (c - 0x010000 & 0x03FF) + 0xDC00);\n}\n\nvar simpleEscapeCheck = new Array(256); // integer, for fast access\n\nvar simpleEscapeMap = new Array(256);\n\nfor (var i = 0; i < 256; i++) {\n  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;\n  simpleEscapeMap[i] = simpleEscapeSequence(i);\n}\n\nfunction State(input, options) {\n  this.input = input;\n  this.filename = options['filename'] || null;\n  this.schema = options['schema'] || DEFAULT_FULL_SCHEMA;\n  this.onWarning = options['onWarning'] || null;\n  this.legacy = options['legacy'] || false;\n  this.json = options['json'] || false;\n  this.listener = options['listener'] || null;\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.typeMap = this.schema.compiledTypeMap;\n  this.length = input.length;\n  this.position = 0;\n  this.line = 0;\n  this.lineStart = 0;\n  this.lineIndent = 0;\n  this.documents = [];\n  /*\n  this.version;\n  this.checkLineBreaks;\n  this.tagMap;\n  this.anchorMap;\n  this.tag;\n  this.anchor;\n  this.kind;\n  this.result;*/\n}\n\nfunction generateError(state, message) {\n  return new YAMLException(message, new Mark(state.filename, state.input, state.position, state.line, state.position - state.lineStart));\n}\n\nfunction throwError(state, message) {\n  throw generateError(state, message);\n}\n\nfunction throwWarning(state, message) {\n  if (state.onWarning) {\n    state.onWarning.call(null, generateError(state, message));\n  }\n}\n\nvar directiveHandlers = {\n  YAML: function handleYamlDirective(state, name, args) {\n    var match, major, minor;\n\n    if (state.version !== null) {\n      throwError(state, 'duplication of %YAML directive');\n    }\n\n    if (args.length !== 1) {\n      throwError(state, 'YAML directive accepts exactly one argument');\n    }\n\n    match = /^([0-9]+)\\.([0-9]+)$/.exec(args[0]);\n\n    if (match === null) {\n      throwError(state, 'ill-formed argument of the YAML directive');\n    }\n\n    major = parseInt(match[1], 10);\n    minor = parseInt(match[2], 10);\n\n    if (major !== 1) {\n      throwError(state, 'unacceptable YAML version of the document');\n    }\n\n    state.version = args[0];\n    state.checkLineBreaks = minor < 2;\n\n    if (minor !== 1 && minor !== 2) {\n      throwWarning(state, 'unsupported YAML version of the document');\n    }\n  },\n  TAG: function handleTagDirective(state, name, args) {\n    var handle, prefix;\n\n    if (args.length !== 2) {\n      throwError(state, 'TAG directive accepts exactly two arguments');\n    }\n\n    handle = args[0];\n    prefix = args[1];\n\n    if (!PATTERN_TAG_HANDLE.test(handle)) {\n      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');\n    }\n\n    if (_hasOwnProperty.call(state.tagMap, handle)) {\n      throwError(state, 'there is a previously declared suffix for \"' + handle + '\" tag handle');\n    }\n\n    if (!PATTERN_TAG_URI.test(prefix)) {\n      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');\n    }\n\n    state.tagMap[handle] = prefix;\n  }\n};\n\nfunction captureSegment(state, start, end, checkJson) {\n  var _position, _length, _character, _result;\n\n  if (start < end) {\n    _result = state.input.slice(start, end);\n\n    if (checkJson) {\n      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {\n        _character = _result.charCodeAt(_position);\n\n        if (!(_character === 0x09 || 0x20 <= _character && _character <= 0x10FFFF)) {\n          throwError(state, 'expected valid JSON character');\n        }\n      }\n    } else if (PATTERN_NON_PRINTABLE.test(_result)) {\n      throwError(state, 'the stream contains non-printable characters');\n    }\n\n    state.result += _result;\n  }\n}\n\nfunction mergeMappings(state, destination, source, overridableKeys) {\n  var sourceKeys, key, index, quantity;\n\n  if (!common.isObject(source)) {\n    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');\n  }\n\n  sourceKeys = Object.keys(source);\n\n  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {\n    key = sourceKeys[index];\n\n    if (!_hasOwnProperty.call(destination, key)) {\n      destination[key] = source[key];\n      overridableKeys[key] = true;\n    }\n  }\n}\n\nfunction storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {\n  var index, quantity; // The output is a plain object here, so keys can only be strings.\n  // We need to convert keyNode to a string, but doing so can hang the process\n  // (deeply nested arrays that explode exponentially using aliases).\n\n  if (Array.isArray(keyNode)) {\n    keyNode = Array.prototype.slice.call(keyNode);\n\n    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {\n      if (Array.isArray(keyNode[index])) {\n        throwError(state, 'nested arrays are not supported inside keys');\n      }\n\n      if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {\n        keyNode[index] = '[object Object]';\n      }\n    }\n  } // Avoid code execution in load() via toString property\n  // (still use its own toString for arrays, timestamps,\n  // and whatever user schema extensions happen to have @@toStringTag)\n\n\n  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {\n    keyNode = '[object Object]';\n  }\n\n  keyNode = String(keyNode);\n\n  if (_result === null) {\n    _result = {};\n  }\n\n  if (keyTag === 'tag:yaml.org,2002:merge') {\n    if (Array.isArray(valueNode)) {\n      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {\n        mergeMappings(state, _result, valueNode[index], overridableKeys);\n      }\n    } else {\n      mergeMappings(state, _result, valueNode, overridableKeys);\n    }\n  } else {\n    if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {\n      state.line = startLine || state.line;\n      state.position = startPos || state.position;\n      throwError(state, 'duplicated mapping key');\n    }\n\n    _result[keyNode] = valueNode;\n    delete overridableKeys[keyNode];\n  }\n\n  return _result;\n}\n\nfunction readLineBreak(state) {\n  var ch;\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x0A\n  /* LF */\n  ) {\n    state.position++;\n  } else if (ch === 0x0D\n  /* CR */\n  ) {\n    state.position++;\n\n    if (state.input.charCodeAt(state.position) === 0x0A\n    /* LF */\n    ) {\n      state.position++;\n    }\n  } else {\n    throwError(state, 'a line break is expected');\n  }\n\n  state.line += 1;\n  state.lineStart = state.position;\n}\n\nfunction skipSeparationSpace(state, allowComments, checkIndent) {\n  var lineBreaks = 0,\n      ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    while (is_WHITE_SPACE(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (allowComments && ch === 0x23\n    /* # */\n    ) {\n      do {\n        ch = state.input.charCodeAt(++state.position);\n      } while (ch !== 0x0A\n      /* LF */\n      && ch !== 0x0D\n      /* CR */\n      && ch !== 0);\n    }\n\n    if (is_EOL(ch)) {\n      readLineBreak(state);\n      ch = state.input.charCodeAt(state.position);\n      lineBreaks++;\n      state.lineIndent = 0;\n\n      while (ch === 0x20\n      /* Space */\n      ) {\n        state.lineIndent++;\n        ch = state.input.charCodeAt(++state.position);\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {\n    throwWarning(state, 'deficient indentation');\n  }\n\n  return lineBreaks;\n}\n\nfunction testDocumentSeparator(state) {\n  var _position = state.position,\n      ch;\n  ch = state.input.charCodeAt(_position); // Condition state.position === state.lineStart is tested\n  // in parent on each call, for efficiency. No needs to test here again.\n\n  if ((ch === 0x2D\n  /* - */\n  || ch === 0x2E\n  /* . */\n  ) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {\n    _position += 3;\n    ch = state.input.charCodeAt(_position);\n\n    if (ch === 0 || is_WS_OR_EOL(ch)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction writeFoldedLines(state, count) {\n  if (count === 1) {\n    state.result += ' ';\n  } else if (count > 1) {\n    state.result += common.repeat('\\n', count - 1);\n  }\n}\n\nfunction readPlainScalar(state, nodeIndent, withinFlowCollection) {\n  var preceding,\n      following,\n      captureStart,\n      captureEnd,\n      hasPendingContent,\n      _line,\n      _lineStart,\n      _lineIndent,\n      _kind = state.kind,\n      _result = state.result,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 0x23\n  /* # */\n  || ch === 0x26\n  /* & */\n  || ch === 0x2A\n  /* * */\n  || ch === 0x21\n  /* ! */\n  || ch === 0x7C\n  /* | */\n  || ch === 0x3E\n  /* > */\n  || ch === 0x27\n  /* ' */\n  || ch === 0x22\n  /* \" */\n  || ch === 0x25\n  /* % */\n  || ch === 0x40\n  /* @ */\n  || ch === 0x60\n  /* ` */\n  ) {\n    return false;\n  }\n\n  if (ch === 0x3F\n  /* ? */\n  || ch === 0x2D\n  /* - */\n  ) {\n    following = state.input.charCodeAt(state.position + 1);\n\n    if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {\n      return false;\n    }\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  captureStart = captureEnd = state.position;\n  hasPendingContent = false;\n\n  while (ch !== 0) {\n    if (ch === 0x3A\n    /* : */\n    ) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {\n        break;\n      }\n    } else if (ch === 0x23\n    /* # */\n    ) {\n      preceding = state.input.charCodeAt(state.position - 1);\n\n      if (is_WS_OR_EOL(preceding)) {\n        break;\n      }\n    } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {\n      break;\n    } else if (is_EOL(ch)) {\n      _line = state.line;\n      _lineStart = state.lineStart;\n      _lineIndent = state.lineIndent;\n      skipSeparationSpace(state, false, -1);\n\n      if (state.lineIndent >= nodeIndent) {\n        hasPendingContent = true;\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      } else {\n        state.position = captureEnd;\n        state.line = _line;\n        state.lineStart = _lineStart;\n        state.lineIndent = _lineIndent;\n        break;\n      }\n    }\n\n    if (hasPendingContent) {\n      captureSegment(state, captureStart, captureEnd, false);\n      writeFoldedLines(state, state.line - _line);\n      captureStart = captureEnd = state.position;\n      hasPendingContent = false;\n    }\n\n    if (!is_WHITE_SPACE(ch)) {\n      captureEnd = state.position + 1;\n    }\n\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  captureSegment(state, captureStart, captureEnd, false);\n\n  if (state.result) {\n    return true;\n  }\n\n  state.kind = _kind;\n  state.result = _result;\n  return false;\n}\n\nfunction readSingleQuotedScalar(state, nodeIndent) {\n  var ch, captureStart, captureEnd;\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x27\n  /* ' */\n  ) {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x27\n    /* ' */\n    ) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n\n      if (ch === 0x27\n      /* ' */\n      ) {\n        captureStart = state.position;\n        state.position++;\n        captureEnd = state.position;\n      } else {\n        return true;\n      }\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a single quoted scalar');\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a single quoted scalar');\n}\n\nfunction readDoubleQuotedScalar(state, nodeIndent) {\n  var captureStart, captureEnd, hexLength, hexResult, tmp, ch;\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x22\n  /* \" */\n  ) {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x22\n    /* \" */\n    ) {\n      captureSegment(state, captureStart, state.position, true);\n      state.position++;\n      return true;\n    } else if (ch === 0x5C\n    /* \\ */\n    ) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n\n      if (is_EOL(ch)) {\n        skipSeparationSpace(state, false, nodeIndent); // TODO: rework to inline fn with no type cast?\n      } else if (ch < 256 && simpleEscapeCheck[ch]) {\n        state.result += simpleEscapeMap[ch];\n        state.position++;\n      } else if ((tmp = escapedHexLen(ch)) > 0) {\n        hexLength = tmp;\n        hexResult = 0;\n\n        for (; hexLength > 0; hexLength--) {\n          ch = state.input.charCodeAt(++state.position);\n\n          if ((tmp = fromHexCode(ch)) >= 0) {\n            hexResult = (hexResult << 4) + tmp;\n          } else {\n            throwError(state, 'expected hexadecimal character');\n          }\n        }\n\n        state.result += charFromCodepoint(hexResult);\n        state.position++;\n      } else {\n        throwError(state, 'unknown escape sequence');\n      }\n\n      captureStart = captureEnd = state.position;\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a double quoted scalar');\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a double quoted scalar');\n}\n\nfunction readFlowCollection(state, nodeIndent) {\n  var readNext = true,\n      _line,\n      _tag = state.tag,\n      _result,\n      _anchor = state.anchor,\n      following,\n      terminator,\n      isPair,\n      isExplicitPair,\n      isMapping,\n      overridableKeys = {},\n      keyNode,\n      keyTag,\n      valueNode,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x5B\n  /* [ */\n  ) {\n    terminator = 0x5D;\n    /* ] */\n\n    isMapping = false;\n    _result = [];\n  } else if (ch === 0x7B\n  /* { */\n  ) {\n    terminator = 0x7D;\n    /* } */\n\n    isMapping = true;\n    _result = {};\n  } else {\n    return false;\n  }\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  while (ch !== 0) {\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === terminator) {\n      state.position++;\n      state.tag = _tag;\n      state.anchor = _anchor;\n      state.kind = isMapping ? 'mapping' : 'sequence';\n      state.result = _result;\n      return true;\n    } else if (!readNext) {\n      throwError(state, 'missed comma between flow collection entries');\n    }\n\n    keyTag = keyNode = valueNode = null;\n    isPair = isExplicitPair = false;\n\n    if (ch === 0x3F\n    /* ? */\n    ) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following)) {\n        isPair = isExplicitPair = true;\n        state.position++;\n        skipSeparationSpace(state, true, nodeIndent);\n      }\n    }\n\n    _line = state.line;\n    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n    keyTag = state.tag;\n    keyNode = state.result;\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n\n    if ((isExplicitPair || state.line === _line) && ch === 0x3A\n    /* : */\n    ) {\n      isPair = true;\n      ch = state.input.charCodeAt(++state.position);\n      skipSeparationSpace(state, true, nodeIndent);\n      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n      valueNode = state.result;\n    }\n\n    if (isMapping) {\n      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);\n    } else if (isPair) {\n      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));\n    } else {\n      _result.push(keyNode);\n    }\n\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === 0x2C\n    /* , */\n    ) {\n      readNext = true;\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      readNext = false;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a flow collection');\n}\n\nfunction readBlockScalar(state, nodeIndent) {\n  var captureStart,\n      folding,\n      chomping = CHOMPING_CLIP,\n      didReadContent = false,\n      detectedIndent = false,\n      textIndent = nodeIndent,\n      emptyLines = 0,\n      atMoreIndented = false,\n      tmp,\n      ch;\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x7C\n  /* | */\n  ) {\n    folding = false;\n  } else if (ch === 0x3E\n  /* > */\n  ) {\n    folding = true;\n  } else {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n\n  while (ch !== 0) {\n    ch = state.input.charCodeAt(++state.position);\n\n    if (ch === 0x2B\n    /* + */\n    || ch === 0x2D\n    /* - */\n    ) {\n      if (CHOMPING_CLIP === chomping) {\n        chomping = ch === 0x2B\n        /* + */\n        ? CHOMPING_KEEP : CHOMPING_STRIP;\n      } else {\n        throwError(state, 'repeat of a chomping mode identifier');\n      }\n    } else if ((tmp = fromDecimalCode(ch)) >= 0) {\n      if (tmp === 0) {\n        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');\n      } else if (!detectedIndent) {\n        textIndent = nodeIndent + tmp - 1;\n        detectedIndent = true;\n      } else {\n        throwError(state, 'repeat of an indentation width identifier');\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (is_WHITE_SPACE(ch)) {\n    do {\n      ch = state.input.charCodeAt(++state.position);\n    } while (is_WHITE_SPACE(ch));\n\n    if (ch === 0x23\n    /* # */\n    ) {\n      do {\n        ch = state.input.charCodeAt(++state.position);\n      } while (!is_EOL(ch) && ch !== 0);\n    }\n  }\n\n  while (ch !== 0) {\n    readLineBreak(state);\n    state.lineIndent = 0;\n    ch = state.input.charCodeAt(state.position);\n\n    while ((!detectedIndent || state.lineIndent < textIndent) && ch === 0x20\n    /* Space */\n    ) {\n      state.lineIndent++;\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (!detectedIndent && state.lineIndent > textIndent) {\n      textIndent = state.lineIndent;\n    }\n\n    if (is_EOL(ch)) {\n      emptyLines++;\n      continue;\n    } // End of the scalar.\n\n\n    if (state.lineIndent < textIndent) {\n      // Perform the chomping.\n      if (chomping === CHOMPING_KEEP) {\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n      } else if (chomping === CHOMPING_CLIP) {\n        if (didReadContent) {\n          // i.e. only if the scalar is not empty.\n          state.result += '\\n';\n        }\n      } // Break this `while` cycle and go to the funciton's epilogue.\n\n\n      break;\n    } // Folded style: use fancy rules to handle line breaks.\n\n\n    if (folding) {\n      // Lines starting with white space characters (more-indented lines) are not folded.\n      if (is_WHITE_SPACE(ch)) {\n        atMoreIndented = true; // except for the first content line (cf. Example 8.1)\n\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines); // End of more-indented block.\n      } else if (atMoreIndented) {\n        atMoreIndented = false;\n        state.result += common.repeat('\\n', emptyLines + 1); // Just one line break - perceive as the same line.\n      } else if (emptyLines === 0) {\n        if (didReadContent) {\n          // i.e. only if we have already read some scalar content.\n          state.result += ' ';\n        } // Several line breaks - perceive as different lines.\n\n      } else {\n        state.result += common.repeat('\\n', emptyLines);\n      } // Literal style: just add exact number of line breaks between content lines.\n\n    } else {\n      // Keep all line breaks except the header line break.\n      state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n    }\n\n    didReadContent = true;\n    detectedIndent = true;\n    emptyLines = 0;\n    captureStart = state.position;\n\n    while (!is_EOL(ch) && ch !== 0) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    captureSegment(state, captureStart, state.position, false);\n  }\n\n  return true;\n}\n\nfunction readBlockSequence(state, nodeIndent) {\n  var _line,\n      _tag = state.tag,\n      _anchor = state.anchor,\n      _result = [],\n      following,\n      detected = false,\n      ch;\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    if (ch !== 0x2D\n    /* - */\n    ) {\n      break;\n    }\n\n    following = state.input.charCodeAt(state.position + 1);\n\n    if (!is_WS_OR_EOL(following)) {\n      break;\n    }\n\n    detected = true;\n    state.position++;\n\n    if (skipSeparationSpace(state, true, -1)) {\n      if (state.lineIndent <= nodeIndent) {\n        _result.push(null);\n\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      }\n    }\n\n    _line = state.line;\n    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);\n\n    _result.push(state.result);\n\n    skipSeparationSpace(state, true, -1);\n    ch = state.input.charCodeAt(state.position);\n\n    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {\n      throwError(state, 'bad indentation of a sequence entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'sequence';\n    state.result = _result;\n    return true;\n  }\n\n  return false;\n}\n\nfunction readBlockMapping(state, nodeIndent, flowIndent) {\n  var following,\n      allowCompact,\n      _line,\n      _pos,\n      _tag = state.tag,\n      _anchor = state.anchor,\n      _result = {},\n      overridableKeys = {},\n      keyTag = null,\n      keyNode = null,\n      valueNode = null,\n      atExplicitKey = false,\n      detected = false,\n      ch;\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    following = state.input.charCodeAt(state.position + 1);\n    _line = state.line; // Save the current line.\n\n    _pos = state.position; //\n    // Explicit notation case. There are two separate blocks:\n    // first for the key (denoted by \"?\") and second for the value (denoted by \":\")\n    //\n\n    if ((ch === 0x3F\n    /* ? */\n    || ch === 0x3A\n    /* : */\n    ) && is_WS_OR_EOL(following)) {\n      if (ch === 0x3F\n      /* ? */\n      ) {\n        if (atExplicitKey) {\n          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);\n          keyTag = keyNode = valueNode = null;\n        }\n\n        detected = true;\n        atExplicitKey = true;\n        allowCompact = true;\n      } else if (atExplicitKey) {\n        // i.e. 0x3A/* : */ === character after the explicit key.\n        atExplicitKey = false;\n        allowCompact = true;\n      } else {\n        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');\n      }\n\n      state.position += 1;\n      ch = following; //\n      // Implicit notation case. Flow-style node as the key first, then \":\", and the value.\n      //\n    } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {\n      if (state.line === _line) {\n        ch = state.input.charCodeAt(state.position);\n\n        while (is_WHITE_SPACE(ch)) {\n          ch = state.input.charCodeAt(++state.position);\n        }\n\n        if (ch === 0x3A\n        /* : */\n        ) {\n          ch = state.input.charCodeAt(++state.position);\n\n          if (!is_WS_OR_EOL(ch)) {\n            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');\n          }\n\n          if (atExplicitKey) {\n            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);\n            keyTag = keyNode = valueNode = null;\n          }\n\n          detected = true;\n          atExplicitKey = false;\n          allowCompact = false;\n          keyTag = state.tag;\n          keyNode = state.result;\n        } else if (detected) {\n          throwError(state, 'can not read an implicit mapping pair; a colon is missed');\n        } else {\n          state.tag = _tag;\n          state.anchor = _anchor;\n          return true; // Keep the result of `composeNode`.\n        }\n      } else if (detected) {\n        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');\n      } else {\n        state.tag = _tag;\n        state.anchor = _anchor;\n        return true; // Keep the result of `composeNode`.\n      }\n    } else {\n      break; // Reading is done. Go to the epilogue.\n    } //\n    // Common reading code for both explicit and implicit notations.\n    //\n\n\n    if (state.line === _line || state.lineIndent > nodeIndent) {\n      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {\n        if (atExplicitKey) {\n          keyNode = state.result;\n        } else {\n          valueNode = state.result;\n        }\n      }\n\n      if (!atExplicitKey) {\n        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);\n        keyTag = keyNode = valueNode = null;\n      }\n\n      skipSeparationSpace(state, true, -1);\n      ch = state.input.charCodeAt(state.position);\n    }\n\n    if (state.lineIndent > nodeIndent && ch !== 0) {\n      throwError(state, 'bad indentation of a mapping entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  } //\n  // Epilogue.\n  //\n  // Special case: last mapping's node contains only the key in explicit notation.\n\n\n  if (atExplicitKey) {\n    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);\n  } // Expose the resulting mapping.\n\n\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'mapping';\n    state.result = _result;\n  }\n\n  return detected;\n}\n\nfunction readTagProperty(state) {\n  var _position,\n      isVerbatim = false,\n      isNamed = false,\n      tagHandle,\n      tagName,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x21\n  /* ! */\n  ) return false;\n\n  if (state.tag !== null) {\n    throwError(state, 'duplication of a tag property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  if (ch === 0x3C\n  /* < */\n  ) {\n    isVerbatim = true;\n    ch = state.input.charCodeAt(++state.position);\n  } else if (ch === 0x21\n  /* ! */\n  ) {\n    isNamed = true;\n    tagHandle = '!!';\n    ch = state.input.charCodeAt(++state.position);\n  } else {\n    tagHandle = '!';\n  }\n\n  _position = state.position;\n\n  if (isVerbatim) {\n    do {\n      ch = state.input.charCodeAt(++state.position);\n    } while (ch !== 0 && ch !== 0x3E\n    /* > */\n    );\n\n    if (state.position < state.length) {\n      tagName = state.input.slice(_position, state.position);\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      throwError(state, 'unexpected end of the stream within a verbatim tag');\n    }\n  } else {\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n      if (ch === 0x21\n      /* ! */\n      ) {\n        if (!isNamed) {\n          tagHandle = state.input.slice(_position - 1, state.position + 1);\n\n          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {\n            throwError(state, 'named tag handle cannot contain such characters');\n          }\n\n          isNamed = true;\n          _position = state.position + 1;\n        } else {\n          throwError(state, 'tag suffix cannot contain exclamation marks');\n        }\n      }\n\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    tagName = state.input.slice(_position, state.position);\n\n    if (PATTERN_FLOW_INDICATORS.test(tagName)) {\n      throwError(state, 'tag suffix cannot contain flow indicator characters');\n    }\n  }\n\n  if (tagName && !PATTERN_TAG_URI.test(tagName)) {\n    throwError(state, 'tag name cannot contain such characters: ' + tagName);\n  }\n\n  if (isVerbatim) {\n    state.tag = tagName;\n  } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {\n    state.tag = state.tagMap[tagHandle] + tagName;\n  } else if (tagHandle === '!') {\n    state.tag = '!' + tagName;\n  } else if (tagHandle === '!!') {\n    state.tag = 'tag:yaml.org,2002:' + tagName;\n  } else {\n    throwError(state, 'undeclared tag handle \"' + tagHandle + '\"');\n  }\n\n  return true;\n}\n\nfunction readAnchorProperty(state) {\n  var _position, ch;\n\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x26\n  /* & */\n  ) return false;\n\n  if (state.anchor !== null) {\n    throwError(state, 'duplication of an anchor property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state, 'name of an anchor node must contain at least one character');\n  }\n\n  state.anchor = state.input.slice(_position, state.position);\n  return true;\n}\n\nfunction readAlias(state) {\n  var _position, alias, ch;\n\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x2A\n  /* * */\n  ) return false;\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state, 'name of an alias node must contain at least one character');\n  }\n\n  alias = state.input.slice(_position, state.position);\n\n  if (!_hasOwnProperty.call(state.anchorMap, alias)) {\n    throwError(state, 'unidentified alias \"' + alias + '\"');\n  }\n\n  state.result = state.anchorMap[alias];\n  skipSeparationSpace(state, true, -1);\n  return true;\n}\n\nfunction composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {\n  var allowBlockStyles,\n      allowBlockScalars,\n      allowBlockCollections,\n      indentStatus = 1,\n      // 1: this>parent, 0: this=parent, -1: this<parent\n  atNewLine = false,\n      hasContent = false,\n      typeIndex,\n      typeQuantity,\n      type,\n      flowIndent,\n      blockIndent;\n\n  if (state.listener !== null) {\n    state.listener('open', state);\n  }\n\n  state.tag = null;\n  state.anchor = null;\n  state.kind = null;\n  state.result = null;\n  allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;\n\n  if (allowToSeek) {\n    if (skipSeparationSpace(state, true, -1)) {\n      atNewLine = true;\n\n      if (state.lineIndent > parentIndent) {\n        indentStatus = 1;\n      } else if (state.lineIndent === parentIndent) {\n        indentStatus = 0;\n      } else if (state.lineIndent < parentIndent) {\n        indentStatus = -1;\n      }\n    }\n  }\n\n  if (indentStatus === 1) {\n    while (readTagProperty(state) || readAnchorProperty(state)) {\n      if (skipSeparationSpace(state, true, -1)) {\n        atNewLine = true;\n        allowBlockCollections = allowBlockStyles;\n\n        if (state.lineIndent > parentIndent) {\n          indentStatus = 1;\n        } else if (state.lineIndent === parentIndent) {\n          indentStatus = 0;\n        } else if (state.lineIndent < parentIndent) {\n          indentStatus = -1;\n        }\n      } else {\n        allowBlockCollections = false;\n      }\n    }\n  }\n\n  if (allowBlockCollections) {\n    allowBlockCollections = atNewLine || allowCompact;\n  }\n\n  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {\n    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {\n      flowIndent = parentIndent;\n    } else {\n      flowIndent = parentIndent + 1;\n    }\n\n    blockIndent = state.position - state.lineStart;\n\n    if (indentStatus === 1) {\n      if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {\n        hasContent = true;\n      } else {\n        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {\n          hasContent = true;\n        } else if (readAlias(state)) {\n          hasContent = true;\n\n          if (state.tag !== null || state.anchor !== null) {\n            throwError(state, 'alias node should not have any properties');\n          }\n        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {\n          hasContent = true;\n\n          if (state.tag === null) {\n            state.tag = '?';\n          }\n        }\n\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    } else if (indentStatus === 0) {\n      // Special case: block sequences are allowed to have same indentation level as the parent.\n      // http://www.yaml.org/spec/1.2/spec.html#id2799784\n      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);\n    }\n  }\n\n  if (state.tag !== null && state.tag !== '!') {\n    if (state.tag === '?') {\n      // Implicit resolving is not allowed for non-scalar types, and '?'\n      // non-specific tag is only automatically assigned to plain scalars.\n      //\n      // We only need to check kind conformity in case user explicitly assigns '?'\n      // tag, for example like this: \"!<?> [0]\"\n      //\n      if (state.result !== null && state.kind !== 'scalar') {\n        throwError(state, 'unacceptable node kind for !<?> tag; it should be \"scalar\", not \"' + state.kind + '\"');\n      }\n\n      for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {\n        type = state.implicitTypes[typeIndex];\n\n        if (type.resolve(state.result)) {\n          // `state.result` updated in resolver if matched\n          state.result = type.construct(state.result);\n          state.tag = type.tag;\n\n          if (state.anchor !== null) {\n            state.anchorMap[state.anchor] = state.result;\n          }\n\n          break;\n        }\n      }\n    } else if (_hasOwnProperty.call(state.typeMap[state.kind || 'fallback'], state.tag)) {\n      type = state.typeMap[state.kind || 'fallback'][state.tag];\n\n      if (state.result !== null && type.kind !== state.kind) {\n        throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be \"' + type.kind + '\", not \"' + state.kind + '\"');\n      }\n\n      if (!type.resolve(state.result)) {\n        // `state.result` updated in resolver if matched\n        throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');\n      } else {\n        state.result = type.construct(state.result);\n\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    } else {\n      throwError(state, 'unknown tag !<' + state.tag + '>');\n    }\n  }\n\n  if (state.listener !== null) {\n    state.listener('close', state);\n  }\n\n  return state.tag !== null || state.anchor !== null || hasContent;\n}\n\nfunction readDocument(state) {\n  var documentStart = state.position,\n      _position,\n      directiveName,\n      directiveArgs,\n      hasDirectives = false,\n      ch;\n\n  state.version = null;\n  state.checkLineBreaks = state.legacy;\n  state.tagMap = {};\n  state.anchorMap = {};\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    skipSeparationSpace(state, true, -1);\n    ch = state.input.charCodeAt(state.position);\n\n    if (state.lineIndent > 0 || ch !== 0x25\n    /* % */\n    ) {\n      break;\n    }\n\n    hasDirectives = true;\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    directiveName = state.input.slice(_position, state.position);\n    directiveArgs = [];\n\n    if (directiveName.length < 1) {\n      throwError(state, 'directive name must not be less than one character in length');\n    }\n\n    while (ch !== 0) {\n      while (is_WHITE_SPACE(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      if (ch === 0x23\n      /* # */\n      ) {\n        do {\n          ch = state.input.charCodeAt(++state.position);\n        } while (ch !== 0 && !is_EOL(ch));\n\n        break;\n      }\n\n      if (is_EOL(ch)) break;\n      _position = state.position;\n\n      while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      directiveArgs.push(state.input.slice(_position, state.position));\n    }\n\n    if (ch !== 0) readLineBreak(state);\n\n    if (_hasOwnProperty.call(directiveHandlers, directiveName)) {\n      directiveHandlers[directiveName](state, directiveName, directiveArgs);\n    } else {\n      throwWarning(state, 'unknown document directive \"' + directiveName + '\"');\n    }\n  }\n\n  skipSeparationSpace(state, true, -1);\n\n  if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 0x2D\n  /* - */\n  && state.input.charCodeAt(state.position + 1) === 0x2D\n  /* - */\n  && state.input.charCodeAt(state.position + 2) === 0x2D\n  /* - */\n  ) {\n    state.position += 3;\n    skipSeparationSpace(state, true, -1);\n  } else if (hasDirectives) {\n    throwError(state, 'directives end mark is expected');\n  }\n\n  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);\n  skipSeparationSpace(state, true, -1);\n\n  if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {\n    throwWarning(state, 'non-ASCII line breaks are interpreted as content');\n  }\n\n  state.documents.push(state.result);\n\n  if (state.position === state.lineStart && testDocumentSeparator(state)) {\n    if (state.input.charCodeAt(state.position) === 0x2E\n    /* . */\n    ) {\n      state.position += 3;\n      skipSeparationSpace(state, true, -1);\n    }\n\n    return;\n  }\n\n  if (state.position < state.length - 1) {\n    throwError(state, 'end of the stream or a document separator is expected');\n  } else {\n    return;\n  }\n}\n\nfunction loadDocuments(input, options) {\n  input = String(input);\n  options = options || {};\n\n  if (input.length !== 0) {\n    // Add tailing `\\n` if not exists\n    if (input.charCodeAt(input.length - 1) !== 0x0A\n    /* LF */\n    && input.charCodeAt(input.length - 1) !== 0x0D\n    /* CR */\n    ) {\n      input += '\\n';\n    } // Strip BOM\n\n\n    if (input.charCodeAt(0) === 0xFEFF) {\n      input = input.slice(1);\n    }\n  }\n\n  var state = new State(input, options);\n  var nullpos = input.indexOf('\\0');\n\n  if (nullpos !== -1) {\n    state.position = nullpos;\n    throwError(state, 'null byte is not allowed in input');\n  } // Use 0 as string terminator. That significantly simplifies bounds check.\n\n\n  state.input += '\\0';\n\n  while (state.input.charCodeAt(state.position) === 0x20\n  /* Space */\n  ) {\n    state.lineIndent += 1;\n    state.position += 1;\n  }\n\n  while (state.position < state.length - 1) {\n    readDocument(state);\n  }\n\n  return state.documents;\n}\n\nfunction loadAll(input, iterator, options) {\n  if (iterator !== null && typeof iterator === 'object' && typeof options === 'undefined') {\n    options = iterator;\n    iterator = null;\n  }\n\n  var documents = loadDocuments(input, options);\n\n  if (typeof iterator !== 'function') {\n    return documents;\n  }\n\n  for (var index = 0, length = documents.length; index < length; index += 1) {\n    iterator(documents[index]);\n  }\n}\n\nfunction load(input, options) {\n  var documents = loadDocuments(input, options);\n\n  if (documents.length === 0) {\n    /*eslint-disable no-undefined*/\n    return undefined;\n  } else if (documents.length === 1) {\n    return documents[0];\n  }\n\n  throw new YAMLException('expected a single document in the stream, but found more');\n}\n\nfunction safeLoadAll(input, iterator, options) {\n  if (typeof iterator === 'object' && iterator !== null && typeof options === 'undefined') {\n    options = iterator;\n    iterator = null;\n  }\n\n  return loadAll(input, iterator, common.extend({\n    schema: DEFAULT_SAFE_SCHEMA\n  }, options));\n}\n\nfunction safeLoad(input, options) {\n  return load(input, common.extend({\n    schema: DEFAULT_SAFE_SCHEMA\n  }, options));\n}\n\nmodule.exports.loadAll = loadAll;\nmodule.exports.load = load;\nmodule.exports.safeLoadAll = safeLoadAll;\nmodule.exports.safeLoad = safeLoad;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/loader.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/mark.js":
/*!**************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/mark.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar common = __webpack_require__(/*! ./common */ \"./node_modules/js-yaml/lib/js-yaml/common.js\");\n\nfunction Mark(name, buffer, position, line, column) {\n  this.name = name;\n  this.buffer = buffer;\n  this.position = position;\n  this.line = line;\n  this.column = column;\n}\n\nMark.prototype.getSnippet = function getSnippet(indent, maxLength) {\n  var head, start, tail, end, snippet;\n  if (!this.buffer) return null;\n  indent = indent || 4;\n  maxLength = maxLength || 75;\n  head = '';\n  start = this.position;\n\n  while (start > 0 && '\\x00\\r\\n\\x85\\u2028\\u2029'.indexOf(this.buffer.charAt(start - 1)) === -1) {\n    start -= 1;\n\n    if (this.position - start > maxLength / 2 - 1) {\n      head = ' ... ';\n      start += 5;\n      break;\n    }\n  }\n\n  tail = '';\n  end = this.position;\n\n  while (end < this.buffer.length && '\\x00\\r\\n\\x85\\u2028\\u2029'.indexOf(this.buffer.charAt(end)) === -1) {\n    end += 1;\n\n    if (end - this.position > maxLength / 2 - 1) {\n      tail = ' ... ';\n      end -= 5;\n      break;\n    }\n  }\n\n  snippet = this.buffer.slice(start, end);\n  return common.repeat(' ', indent) + head + snippet + tail + '\\n' + common.repeat(' ', indent + this.position - start + head.length) + '^';\n};\n\nMark.prototype.toString = function toString(compact) {\n  var snippet,\n      where = '';\n\n  if (this.name) {\n    where += 'in \"' + this.name + '\" ';\n  }\n\n  where += 'at line ' + (this.line + 1) + ', column ' + (this.column + 1);\n\n  if (!compact) {\n    snippet = this.getSnippet();\n\n    if (snippet) {\n      where += ':\\n' + snippet;\n    }\n  }\n\n  return where;\n};\n\nmodule.exports = Mark;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9tYXJrLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUdiLElBQUlBLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQyw4REFBRCxDQUFwQjs7QUFHQSxTQUFTQyxJQUFULENBQWNDLElBQWQsRUFBb0JDLE1BQXBCLEVBQTRCQyxRQUE1QixFQUFzQ0MsSUFBdEMsRUFBNENDLE1BQTVDLEVBQW9EO0FBQ2xELE9BQUtKLElBQUwsR0FBZ0JBLElBQWhCO0FBQ0EsT0FBS0MsTUFBTCxHQUFnQkEsTUFBaEI7QUFDQSxPQUFLQyxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLE9BQUtDLElBQUwsR0FBZ0JBLElBQWhCO0FBQ0EsT0FBS0MsTUFBTCxHQUFnQkEsTUFBaEI7QUFDRDs7QUFHREwsSUFBSSxDQUFDTSxTQUFMLENBQWVDLFVBQWYsR0FBNEIsU0FBU0EsVUFBVCxDQUFvQkMsTUFBcEIsRUFBNEJDLFNBQTVCLEVBQXVDO0FBQ2pFLE1BQUlDLElBQUosRUFBVUMsS0FBVixFQUFpQkMsSUFBakIsRUFBdUJDLEdBQXZCLEVBQTRCQyxPQUE1QjtBQUVBLE1BQUksQ0FBQyxLQUFLWixNQUFWLEVBQWtCLE9BQU8sSUFBUDtBQUVsQk0sRUFBQUEsTUFBTSxHQUFHQSxNQUFNLElBQUksQ0FBbkI7QUFDQUMsRUFBQUEsU0FBUyxHQUFHQSxTQUFTLElBQUksRUFBekI7QUFFQUMsRUFBQUEsSUFBSSxHQUFHLEVBQVA7QUFDQUMsRUFBQUEsS0FBSyxHQUFHLEtBQUtSLFFBQWI7O0FBRUEsU0FBT1EsS0FBSyxHQUFHLENBQVIsSUFBYSwyQkFBMkJJLE9BQTNCLENBQW1DLEtBQUtiLE1BQUwsQ0FBWWMsTUFBWixDQUFtQkwsS0FBSyxHQUFHLENBQTNCLENBQW5DLE1BQXNFLENBQUMsQ0FBM0YsRUFBOEY7QUFDNUZBLElBQUFBLEtBQUssSUFBSSxDQUFUOztBQUNBLFFBQUksS0FBS1IsUUFBTCxHQUFnQlEsS0FBaEIsR0FBeUJGLFNBQVMsR0FBRyxDQUFaLEdBQWdCLENBQTdDLEVBQWlEO0FBQy9DQyxNQUFBQSxJQUFJLEdBQUcsT0FBUDtBQUNBQyxNQUFBQSxLQUFLLElBQUksQ0FBVDtBQUNBO0FBQ0Q7QUFDRjs7QUFFREMsRUFBQUEsSUFBSSxHQUFHLEVBQVA7QUFDQUMsRUFBQUEsR0FBRyxHQUFHLEtBQUtWLFFBQVg7O0FBRUEsU0FBT1UsR0FBRyxHQUFHLEtBQUtYLE1BQUwsQ0FBWWUsTUFBbEIsSUFBNEIsMkJBQTJCRixPQUEzQixDQUFtQyxLQUFLYixNQUFMLENBQVljLE1BQVosQ0FBbUJILEdBQW5CLENBQW5DLE1BQWdFLENBQUMsQ0FBcEcsRUFBdUc7QUFDckdBLElBQUFBLEdBQUcsSUFBSSxDQUFQOztBQUNBLFFBQUlBLEdBQUcsR0FBRyxLQUFLVixRQUFYLEdBQXVCTSxTQUFTLEdBQUcsQ0FBWixHQUFnQixDQUEzQyxFQUErQztBQUM3Q0csTUFBQUEsSUFBSSxHQUFHLE9BQVA7QUFDQUMsTUFBQUEsR0FBRyxJQUFJLENBQVA7QUFDQTtBQUNEO0FBQ0Y7O0FBRURDLEVBQUFBLE9BQU8sR0FBRyxLQUFLWixNQUFMLENBQVlnQixLQUFaLENBQWtCUCxLQUFsQixFQUF5QkUsR0FBekIsQ0FBVjtBQUVBLFNBQU9mLE1BQU0sQ0FBQ3FCLE1BQVAsQ0FBYyxHQUFkLEVBQW1CWCxNQUFuQixJQUE2QkUsSUFBN0IsR0FBb0NJLE9BQXBDLEdBQThDRixJQUE5QyxHQUFxRCxJQUFyRCxHQUNBZCxNQUFNLENBQUNxQixNQUFQLENBQWMsR0FBZCxFQUFtQlgsTUFBTSxHQUFHLEtBQUtMLFFBQWQsR0FBeUJRLEtBQXpCLEdBQWlDRCxJQUFJLENBQUNPLE1BQXpELENBREEsR0FDbUUsR0FEMUU7QUFFRCxDQXBDRDs7QUF1Q0FqQixJQUFJLENBQUNNLFNBQUwsQ0FBZWMsUUFBZixHQUEwQixTQUFTQSxRQUFULENBQWtCQyxPQUFsQixFQUEyQjtBQUNuRCxNQUFJUCxPQUFKO0FBQUEsTUFBYVEsS0FBSyxHQUFHLEVBQXJCOztBQUVBLE1BQUksS0FBS3JCLElBQVQsRUFBZTtBQUNicUIsSUFBQUEsS0FBSyxJQUFJLFNBQVMsS0FBS3JCLElBQWQsR0FBcUIsSUFBOUI7QUFDRDs7QUFFRHFCLEVBQUFBLEtBQUssSUFBSSxjQUFjLEtBQUtsQixJQUFMLEdBQVksQ0FBMUIsSUFBK0IsV0FBL0IsSUFBOEMsS0FBS0MsTUFBTCxHQUFjLENBQTVELENBQVQ7O0FBRUEsTUFBSSxDQUFDZ0IsT0FBTCxFQUFjO0FBQ1pQLElBQUFBLE9BQU8sR0FBRyxLQUFLUCxVQUFMLEVBQVY7O0FBRUEsUUFBSU8sT0FBSixFQUFhO0FBQ1hRLE1BQUFBLEtBQUssSUFBSSxRQUFRUixPQUFqQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBT1EsS0FBUDtBQUNELENBbEJEOztBQXFCQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCeEIsSUFBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9tYXJrLmpzP2I0ZGUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xuXG5cbmZ1bmN0aW9uIE1hcmsobmFtZSwgYnVmZmVyLCBwb3NpdGlvbiwgbGluZSwgY29sdW1uKSB7XG4gIHRoaXMubmFtZSAgICAgPSBuYW1lO1xuICB0aGlzLmJ1ZmZlciAgID0gYnVmZmVyO1xuICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG4gIHRoaXMubGluZSAgICAgPSBsaW5lO1xuICB0aGlzLmNvbHVtbiAgID0gY29sdW1uO1xufVxuXG5cbk1hcmsucHJvdG90eXBlLmdldFNuaXBwZXQgPSBmdW5jdGlvbiBnZXRTbmlwcGV0KGluZGVudCwgbWF4TGVuZ3RoKSB7XG4gIHZhciBoZWFkLCBzdGFydCwgdGFpbCwgZW5kLCBzbmlwcGV0O1xuXG4gIGlmICghdGhpcy5idWZmZXIpIHJldHVybiBudWxsO1xuXG4gIGluZGVudCA9IGluZGVudCB8fCA0O1xuICBtYXhMZW5ndGggPSBtYXhMZW5ndGggfHwgNzU7XG5cbiAgaGVhZCA9ICcnO1xuICBzdGFydCA9IHRoaXMucG9zaXRpb247XG5cbiAgd2hpbGUgKHN0YXJ0ID4gMCAmJiAnXFx4MDBcXHJcXG5cXHg4NVxcdTIwMjhcXHUyMDI5Jy5pbmRleE9mKHRoaXMuYnVmZmVyLmNoYXJBdChzdGFydCAtIDEpKSA9PT0gLTEpIHtcbiAgICBzdGFydCAtPSAxO1xuICAgIGlmICh0aGlzLnBvc2l0aW9uIC0gc3RhcnQgPiAobWF4TGVuZ3RoIC8gMiAtIDEpKSB7XG4gICAgICBoZWFkID0gJyAuLi4gJztcbiAgICAgIHN0YXJ0ICs9IDU7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB0YWlsID0gJyc7XG4gIGVuZCA9IHRoaXMucG9zaXRpb247XG5cbiAgd2hpbGUgKGVuZCA8IHRoaXMuYnVmZmVyLmxlbmd0aCAmJiAnXFx4MDBcXHJcXG5cXHg4NVxcdTIwMjhcXHUyMDI5Jy5pbmRleE9mKHRoaXMuYnVmZmVyLmNoYXJBdChlbmQpKSA9PT0gLTEpIHtcbiAgICBlbmQgKz0gMTtcbiAgICBpZiAoZW5kIC0gdGhpcy5wb3NpdGlvbiA+IChtYXhMZW5ndGggLyAyIC0gMSkpIHtcbiAgICAgIHRhaWwgPSAnIC4uLiAnO1xuICAgICAgZW5kIC09IDU7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBzbmlwcGV0ID0gdGhpcy5idWZmZXIuc2xpY2Uoc3RhcnQsIGVuZCk7XG5cbiAgcmV0dXJuIGNvbW1vbi5yZXBlYXQoJyAnLCBpbmRlbnQpICsgaGVhZCArIHNuaXBwZXQgKyB0YWlsICsgJ1xcbicgK1xuICAgICAgICAgY29tbW9uLnJlcGVhdCgnICcsIGluZGVudCArIHRoaXMucG9zaXRpb24gLSBzdGFydCArIGhlYWQubGVuZ3RoKSArICdeJztcbn07XG5cblxuTWFyay5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhjb21wYWN0KSB7XG4gIHZhciBzbmlwcGV0LCB3aGVyZSA9ICcnO1xuXG4gIGlmICh0aGlzLm5hbWUpIHtcbiAgICB3aGVyZSArPSAnaW4gXCInICsgdGhpcy5uYW1lICsgJ1wiICc7XG4gIH1cblxuICB3aGVyZSArPSAnYXQgbGluZSAnICsgKHRoaXMubGluZSArIDEpICsgJywgY29sdW1uICcgKyAodGhpcy5jb2x1bW4gKyAxKTtcblxuICBpZiAoIWNvbXBhY3QpIHtcbiAgICBzbmlwcGV0ID0gdGhpcy5nZXRTbmlwcGV0KCk7XG5cbiAgICBpZiAoc25pcHBldCkge1xuICAgICAgd2hlcmUgKz0gJzpcXG4nICsgc25pcHBldDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gd2hlcmU7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gTWFyaztcbiJdLCJuYW1lcyI6WyJjb21tb24iLCJyZXF1aXJlIiwiTWFyayIsIm5hbWUiLCJidWZmZXIiLCJwb3NpdGlvbiIsImxpbmUiLCJjb2x1bW4iLCJwcm90b3R5cGUiLCJnZXRTbmlwcGV0IiwiaW5kZW50IiwibWF4TGVuZ3RoIiwiaGVhZCIsInN0YXJ0IiwidGFpbCIsImVuZCIsInNuaXBwZXQiLCJpbmRleE9mIiwiY2hhckF0IiwibGVuZ3RoIiwic2xpY2UiLCJyZXBlYXQiLCJ0b1N0cmluZyIsImNvbXBhY3QiLCJ3aGVyZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/mark.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/schema.js":
/*!****************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/schema.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/*eslint-disable max-len*/\n\nvar common = __webpack_require__(/*! ./common */ \"./node_modules/js-yaml/lib/js-yaml/common.js\");\n\nvar YAMLException = __webpack_require__(/*! ./exception */ \"./node_modules/js-yaml/lib/js-yaml/exception.js\");\n\nvar Type = __webpack_require__(/*! ./type */ \"./node_modules/js-yaml/lib/js-yaml/type.js\");\n\nfunction compileList(schema, name, result) {\n  var exclude = [];\n  schema.include.forEach(function (includedSchema) {\n    result = compileList(includedSchema, name, result);\n  });\n  schema[name].forEach(function (currentType) {\n    result.forEach(function (previousType, previousIndex) {\n      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {\n        exclude.push(previousIndex);\n      }\n    });\n    result.push(currentType);\n  });\n  return result.filter(function (type, index) {\n    return exclude.indexOf(index) === -1;\n  });\n}\n\nfunction\n  /* lists... */\ncompileMap() {\n  var result = {\n    scalar: {},\n    sequence: {},\n    mapping: {},\n    fallback: {}\n  },\n      index,\n      length;\n\n  function collectType(type) {\n    result[type.kind][type.tag] = result['fallback'][type.tag] = type;\n  }\n\n  for (index = 0, length = arguments.length; index < length; index += 1) {\n    arguments[index].forEach(collectType);\n  }\n\n  return result;\n}\n\nfunction Schema(definition) {\n  this.include = definition.include || [];\n  this.implicit = definition.implicit || [];\n  this.explicit = definition.explicit || [];\n  this.implicit.forEach(function (type) {\n    if (type.loadKind && type.loadKind !== 'scalar') {\n      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');\n    }\n  });\n  this.compiledImplicit = compileList(this, 'implicit', []);\n  this.compiledExplicit = compileList(this, 'explicit', []);\n  this.compiledTypeMap = compileMap(this.compiledImplicit, this.compiledExplicit);\n}\n\nSchema.DEFAULT = null;\n\nSchema.create = function createSchema() {\n  var schemas, types;\n\n  switch (arguments.length) {\n    case 1:\n      schemas = Schema.DEFAULT;\n      types = arguments[0];\n      break;\n\n    case 2:\n      schemas = arguments[0];\n      types = arguments[1];\n      break;\n\n    default:\n      throw new YAMLException('Wrong number of arguments for Schema.create function');\n  }\n\n  schemas = common.toArray(schemas);\n  types = common.toArray(types);\n\n  if (!schemas.every(function (schema) {\n    return schema instanceof Schema;\n  })) {\n    throw new YAMLException('Specified list of super schemas (or a single Schema object) contains a non-Schema object.');\n  }\n\n  if (!types.every(function (type) {\n    return type instanceof Type;\n  })) {\n    throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n  }\n\n  return new Schema({\n    include: schemas,\n    explicit: types\n  });\n};\n\nmodule.exports = Schema;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/schema.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/schema/core.js":
/*!*********************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/schema/core.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Standard YAML's Core schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2804923\n//\n// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.\n// So, Core schema has no distinctions from JSON schema is JS-YAML.\n\n\nvar Schema = __webpack_require__(/*! ../schema */ \"./node_modules/js-yaml/lib/js-yaml/schema.js\");\n\nmodule.exports = new Schema({\n  include: [__webpack_require__(/*! ./json */ \"./node_modules/js-yaml/lib/js-yaml/schema/json.js\")]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9zY2hlbWEvY29yZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR2E7O0FBR2IsSUFBSUEsTUFBTSxHQUFHQyxtQkFBTyxDQUFDLCtEQUFELENBQXBCOztBQUdBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsSUFBSUgsTUFBSixDQUFXO0FBQzFCSSxFQUFBQSxPQUFPLEVBQUUsQ0FDUEgsbUJBQU8sQ0FBQyxpRUFBRCxDQURBO0FBRGlCLENBQVgsQ0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9zY2hlbWEvY29yZS5qcz80NTI4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFN0YW5kYXJkIFlBTUwncyBDb3JlIHNjaGVtYS5cbi8vIGh0dHA6Ly93d3cueWFtbC5vcmcvc3BlYy8xLjIvc3BlYy5odG1sI2lkMjgwNDkyM1xuLy9cbi8vIE5PVEU6IEpTLVlBTUwgZG9lcyBub3Qgc3VwcG9ydCBzY2hlbWEtc3BlY2lmaWMgdGFnIHJlc29sdXRpb24gcmVzdHJpY3Rpb25zLlxuLy8gU28sIENvcmUgc2NoZW1hIGhhcyBubyBkaXN0aW5jdGlvbnMgZnJvbSBKU09OIHNjaGVtYSBpcyBKUy1ZQU1MLlxuXG5cbid1c2Ugc3RyaWN0JztcblxuXG52YXIgU2NoZW1hID0gcmVxdWlyZSgnLi4vc2NoZW1hJyk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgU2NoZW1hKHtcbiAgaW5jbHVkZTogW1xuICAgIHJlcXVpcmUoJy4vanNvbicpXG4gIF1cbn0pO1xuIl0sIm5hbWVzIjpbIlNjaGVtYSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW5jbHVkZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/schema/core.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/schema/default_full.js":
/*!*****************************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/schema/default_full.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// JS-YAML's default schema for `load` function.\n// It is not described in the YAML specification.\n//\n// This schema is based on JS-YAML's default safe schema and includes\n// JavaScript-specific types: !!js/undefined, !!js/regexp and !!js/function.\n//\n// Also this schema is used as default base schema at `Schema.create` function.\n\n\nvar Schema = __webpack_require__(/*! ../schema */ \"./node_modules/js-yaml/lib/js-yaml/schema.js\");\n\nmodule.exports = Schema.DEFAULT = new Schema({\n  include: [__webpack_require__(/*! ./default_safe */ \"./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js\")],\n  explicit: [__webpack_require__(/*! ../type/js/undefined */ \"./node_modules/js-yaml/lib/js-yaml/type/js/undefined.js\"), __webpack_require__(/*! ../type/js/regexp */ \"./node_modules/js-yaml/lib/js-yaml/type/js/regexp.js\"), __webpack_require__(/*! ../type/js/function */ \"./node_modules/js-yaml/lib/js-yaml/type/js/function.js\")]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9zY2hlbWEvZGVmYXVsdF9mdWxsLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR2E7O0FBR2IsSUFBSUEsTUFBTSxHQUFHQyxtQkFBTyxDQUFDLCtEQUFELENBQXBCOztBQUdBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJILE1BQU0sQ0FBQ0ksT0FBUCxHQUFpQixJQUFJSixNQUFKLENBQVc7QUFDM0NLLEVBQUFBLE9BQU8sRUFBRSxDQUNQSixtQkFBTyxDQUFDLGlGQUFELENBREEsQ0FEa0M7QUFJM0NLLEVBQUFBLFFBQVEsRUFBRSxDQUNSTCxtQkFBTyxDQUFDLHFGQUFELENBREMsRUFFUkEsbUJBQU8sQ0FBQywrRUFBRCxDQUZDLEVBR1JBLG1CQUFPLENBQUMsbUZBQUQsQ0FIQztBQUppQyxDQUFYLENBQWxDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4vbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvc2NoZW1hL2RlZmF1bHRfZnVsbC5qcz81NmQzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEpTLVlBTUwncyBkZWZhdWx0IHNjaGVtYSBmb3IgYGxvYWRgIGZ1bmN0aW9uLlxuLy8gSXQgaXMgbm90IGRlc2NyaWJlZCBpbiB0aGUgWUFNTCBzcGVjaWZpY2F0aW9uLlxuLy9cbi8vIFRoaXMgc2NoZW1hIGlzIGJhc2VkIG9uIEpTLVlBTUwncyBkZWZhdWx0IHNhZmUgc2NoZW1hIGFuZCBpbmNsdWRlc1xuLy8gSmF2YVNjcmlwdC1zcGVjaWZpYyB0eXBlczogISFqcy91bmRlZmluZWQsICEhanMvcmVnZXhwIGFuZCAhIWpzL2Z1bmN0aW9uLlxuLy9cbi8vIEFsc28gdGhpcyBzY2hlbWEgaXMgdXNlZCBhcyBkZWZhdWx0IGJhc2Ugc2NoZW1hIGF0IGBTY2hlbWEuY3JlYXRlYCBmdW5jdGlvbi5cblxuXG4ndXNlIHN0cmljdCc7XG5cblxudmFyIFNjaGVtYSA9IHJlcXVpcmUoJy4uL3NjaGVtYScpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gU2NoZW1hLkRFRkFVTFQgPSBuZXcgU2NoZW1hKHtcbiAgaW5jbHVkZTogW1xuICAgIHJlcXVpcmUoJy4vZGVmYXVsdF9zYWZlJylcbiAgXSxcbiAgZXhwbGljaXQ6IFtcbiAgICByZXF1aXJlKCcuLi90eXBlL2pzL3VuZGVmaW5lZCcpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvanMvcmVnZXhwJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9qcy9mdW5jdGlvbicpXG4gIF1cbn0pO1xuIl0sIm5hbWVzIjpbIlNjaGVtYSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiREVGQVVMVCIsImluY2x1ZGUiLCJleHBsaWNpdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/schema/default_full.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js":
/*!*****************************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// JS-YAML's default schema for `safeLoad` function.\n// It is not described in the YAML specification.\n//\n// This schema is based on standard YAML's Core schema and includes most of\n// extra types described at YAML tag repository. (http://yaml.org/type/)\n\n\nvar Schema = __webpack_require__(/*! ../schema */ \"./node_modules/js-yaml/lib/js-yaml/schema.js\");\n\nmodule.exports = new Schema({\n  include: [__webpack_require__(/*! ./core */ \"./node_modules/js-yaml/lib/js-yaml/schema/core.js\")],\n  implicit: [__webpack_require__(/*! ../type/timestamp */ \"./node_modules/js-yaml/lib/js-yaml/type/timestamp.js\"), __webpack_require__(/*! ../type/merge */ \"./node_modules/js-yaml/lib/js-yaml/type/merge.js\")],\n  explicit: [__webpack_require__(/*! ../type/binary */ \"./node_modules/js-yaml/lib/js-yaml/type/binary.js\"), __webpack_require__(/*! ../type/omap */ \"./node_modules/js-yaml/lib/js-yaml/type/omap.js\"), __webpack_require__(/*! ../type/pairs */ \"./node_modules/js-yaml/lib/js-yaml/type/pairs.js\"), __webpack_require__(/*! ../type/set */ \"./node_modules/js-yaml/lib/js-yaml/type/set.js\")]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9zY2hlbWEvZGVmYXVsdF9zYWZlLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHYTs7QUFHYixJQUFJQSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsK0RBQUQsQ0FBcEI7O0FBR0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixJQUFJSCxNQUFKLENBQVc7QUFDMUJJLEVBQUFBLE9BQU8sRUFBRSxDQUNQSCxtQkFBTyxDQUFDLGlFQUFELENBREEsQ0FEaUI7QUFJMUJJLEVBQUFBLFFBQVEsRUFBRSxDQUNSSixtQkFBTyxDQUFDLCtFQUFELENBREMsRUFFUkEsbUJBQU8sQ0FBQyx1RUFBRCxDQUZDLENBSmdCO0FBUTFCSyxFQUFBQSxRQUFRLEVBQUUsQ0FDUkwsbUJBQU8sQ0FBQyx5RUFBRCxDQURDLEVBRVJBLG1CQUFPLENBQUMscUVBQUQsQ0FGQyxFQUdSQSxtQkFBTyxDQUFDLHVFQUFELENBSEMsRUFJUkEsbUJBQU8sQ0FBQyxtRUFBRCxDQUpDO0FBUmdCLENBQVgsQ0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9zY2hlbWEvZGVmYXVsdF9zYWZlLmpzPzY3NzEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSlMtWUFNTCdzIGRlZmF1bHQgc2NoZW1hIGZvciBgc2FmZUxvYWRgIGZ1bmN0aW9uLlxuLy8gSXQgaXMgbm90IGRlc2NyaWJlZCBpbiB0aGUgWUFNTCBzcGVjaWZpY2F0aW9uLlxuLy9cbi8vIFRoaXMgc2NoZW1hIGlzIGJhc2VkIG9uIHN0YW5kYXJkIFlBTUwncyBDb3JlIHNjaGVtYSBhbmQgaW5jbHVkZXMgbW9zdCBvZlxuLy8gZXh0cmEgdHlwZXMgZGVzY3JpYmVkIGF0IFlBTUwgdGFnIHJlcG9zaXRvcnkuIChodHRwOi8veWFtbC5vcmcvdHlwZS8pXG5cblxuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBTY2hlbWEgPSByZXF1aXJlKCcuLi9zY2hlbWEnKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBTY2hlbWEoe1xuICBpbmNsdWRlOiBbXG4gICAgcmVxdWlyZSgnLi9jb3JlJylcbiAgXSxcbiAgaW1wbGljaXQ6IFtcbiAgICByZXF1aXJlKCcuLi90eXBlL3RpbWVzdGFtcCcpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvbWVyZ2UnKVxuICBdLFxuICBleHBsaWNpdDogW1xuICAgIHJlcXVpcmUoJy4uL3R5cGUvYmluYXJ5JyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9vbWFwJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9wYWlycycpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvc2V0JylcbiAgXVxufSk7XG4iXSwibmFtZXMiOlsiU2NoZW1hIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbmNsdWRlIiwiaW1wbGljaXQiLCJleHBsaWNpdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/schema/failsafe.js":
/*!*************************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/schema/failsafe.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Standard YAML's Failsafe schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2802346\n\n\nvar Schema = __webpack_require__(/*! ../schema */ \"./node_modules/js-yaml/lib/js-yaml/schema.js\");\n\nmodule.exports = new Schema({\n  explicit: [__webpack_require__(/*! ../type/str */ \"./node_modules/js-yaml/lib/js-yaml/type/str.js\"), __webpack_require__(/*! ../type/seq */ \"./node_modules/js-yaml/lib/js-yaml/type/seq.js\"), __webpack_require__(/*! ../type/map */ \"./node_modules/js-yaml/lib/js-yaml/type/map.js\")]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9zY2hlbWEvZmFpbHNhZmUuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUdhOztBQUdiLElBQUlBLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQywrREFBRCxDQUFwQjs7QUFHQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLElBQUlILE1BQUosQ0FBVztBQUMxQkksRUFBQUEsUUFBUSxFQUFFLENBQ1JILG1CQUFPLENBQUMsbUVBQUQsQ0FEQyxFQUVSQSxtQkFBTyxDQUFDLG1FQUFELENBRkMsRUFHUkEsbUJBQU8sQ0FBQyxtRUFBRCxDQUhDO0FBRGdCLENBQVgsQ0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9zY2hlbWEvZmFpbHNhZmUuanM/ZDk4OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTdGFuZGFyZCBZQU1MJ3MgRmFpbHNhZmUgc2NoZW1hLlxuLy8gaHR0cDovL3d3dy55YW1sLm9yZy9zcGVjLzEuMi9zcGVjLmh0bWwjaWQyODAyMzQ2XG5cblxuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBTY2hlbWEgPSByZXF1aXJlKCcuLi9zY2hlbWEnKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBTY2hlbWEoe1xuICBleHBsaWNpdDogW1xuICAgIHJlcXVpcmUoJy4uL3R5cGUvc3RyJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9zZXEnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL21hcCcpXG4gIF1cbn0pO1xuIl0sIm5hbWVzIjpbIlNjaGVtYSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZXhwbGljaXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/schema/failsafe.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/schema/json.js":
/*!*********************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/schema/json.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Standard YAML's JSON schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2803231\n//\n// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.\n// So, this schema is not such strict as defined in the YAML specification.\n// It allows numbers in binary notaion, use `Null` and `NULL` as `null`, etc.\n\n\nvar Schema = __webpack_require__(/*! ../schema */ \"./node_modules/js-yaml/lib/js-yaml/schema.js\");\n\nmodule.exports = new Schema({\n  include: [__webpack_require__(/*! ./failsafe */ \"./node_modules/js-yaml/lib/js-yaml/schema/failsafe.js\")],\n  implicit: [__webpack_require__(/*! ../type/null */ \"./node_modules/js-yaml/lib/js-yaml/type/null.js\"), __webpack_require__(/*! ../type/bool */ \"./node_modules/js-yaml/lib/js-yaml/type/bool.js\"), __webpack_require__(/*! ../type/int */ \"./node_modules/js-yaml/lib/js-yaml/type/int.js\"), __webpack_require__(/*! ../type/float */ \"./node_modules/js-yaml/lib/js-yaml/type/float.js\")]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9zY2hlbWEvanNvbi5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHYTs7QUFHYixJQUFJQSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsK0RBQUQsQ0FBcEI7O0FBR0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixJQUFJSCxNQUFKLENBQVc7QUFDMUJJLEVBQUFBLE9BQU8sRUFBRSxDQUNQSCxtQkFBTyxDQUFDLHlFQUFELENBREEsQ0FEaUI7QUFJMUJJLEVBQUFBLFFBQVEsRUFBRSxDQUNSSixtQkFBTyxDQUFDLHFFQUFELENBREMsRUFFUkEsbUJBQU8sQ0FBQyxxRUFBRCxDQUZDLEVBR1JBLG1CQUFPLENBQUMsbUVBQUQsQ0FIQyxFQUlSQSxtQkFBTyxDQUFDLHVFQUFELENBSkM7QUFKZ0IsQ0FBWCxDQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3NjaGVtYS9qc29uLmpzP2Y5NTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU3RhbmRhcmQgWUFNTCdzIEpTT04gc2NoZW1hLlxuLy8gaHR0cDovL3d3dy55YW1sLm9yZy9zcGVjLzEuMi9zcGVjLmh0bWwjaWQyODAzMjMxXG4vL1xuLy8gTk9URTogSlMtWUFNTCBkb2VzIG5vdCBzdXBwb3J0IHNjaGVtYS1zcGVjaWZpYyB0YWcgcmVzb2x1dGlvbiByZXN0cmljdGlvbnMuXG4vLyBTbywgdGhpcyBzY2hlbWEgaXMgbm90IHN1Y2ggc3RyaWN0IGFzIGRlZmluZWQgaW4gdGhlIFlBTUwgc3BlY2lmaWNhdGlvbi5cbi8vIEl0IGFsbG93cyBudW1iZXJzIGluIGJpbmFyeSBub3RhaW9uLCB1c2UgYE51bGxgIGFuZCBgTlVMTGAgYXMgYG51bGxgLCBldGMuXG5cblxuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBTY2hlbWEgPSByZXF1aXJlKCcuLi9zY2hlbWEnKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBTY2hlbWEoe1xuICBpbmNsdWRlOiBbXG4gICAgcmVxdWlyZSgnLi9mYWlsc2FmZScpXG4gIF0sXG4gIGltcGxpY2l0OiBbXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9udWxsJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9ib29sJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9pbnQnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL2Zsb2F0JylcbiAgXVxufSk7XG4iXSwibmFtZXMiOlsiU2NoZW1hIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbmNsdWRlIiwiaW1wbGljaXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/schema/json.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type.js":
/*!**************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/type.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar YAMLException = __webpack_require__(/*! ./exception */ \"./node_modules/js-yaml/lib/js-yaml/exception.js\");\n\nvar TYPE_CONSTRUCTOR_OPTIONS = ['kind', 'resolve', 'construct', 'instanceOf', 'predicate', 'represent', 'defaultStyle', 'styleAliases'];\nvar YAML_NODE_KINDS = ['scalar', 'sequence', 'mapping'];\n\nfunction compileStyleAliases(map) {\n  var result = {};\n\n  if (map !== null) {\n    Object.keys(map).forEach(function (style) {\n      map[style].forEach(function (alias) {\n        result[String(alias)] = style;\n      });\n    });\n  }\n\n  return result;\n}\n\nfunction Type(tag, options) {\n  options = options || {};\n  Object.keys(options).forEach(function (name) {\n    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {\n      throw new YAMLException('Unknown option \"' + name + '\" is met in definition of \"' + tag + '\" YAML type.');\n    }\n  }); // TODO: Add tag format check.\n\n  this.tag = tag;\n  this.kind = options['kind'] || null;\n\n  this.resolve = options['resolve'] || function () {\n    return true;\n  };\n\n  this.construct = options['construct'] || function (data) {\n    return data;\n  };\n\n  this.instanceOf = options['instanceOf'] || null;\n  this.predicate = options['predicate'] || null;\n  this.represent = options['represent'] || null;\n  this.defaultStyle = options['defaultStyle'] || null;\n  this.styleAliases = compileStyleAliases(options['styleAliases'] || null);\n\n  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {\n    throw new YAMLException('Unknown kind \"' + this.kind + '\" is specified for \"' + tag + '\" YAML type.');\n  }\n}\n\nmodule.exports = Type;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLGFBQWEsR0FBR0MsbUJBQU8sQ0FBQyxvRUFBRCxDQUEzQjs7QUFFQSxJQUFJQyx3QkFBd0IsR0FBRyxDQUM3QixNQUQ2QixFQUU3QixTQUY2QixFQUc3QixXQUg2QixFQUk3QixZQUo2QixFQUs3QixXQUw2QixFQU03QixXQU42QixFQU83QixjQVA2QixFQVE3QixjQVI2QixDQUEvQjtBQVdBLElBQUlDLGVBQWUsR0FBRyxDQUNwQixRQURvQixFQUVwQixVQUZvQixFQUdwQixTQUhvQixDQUF0Qjs7QUFNQSxTQUFTQyxtQkFBVCxDQUE2QkMsR0FBN0IsRUFBa0M7QUFDaEMsTUFBSUMsTUFBTSxHQUFHLEVBQWI7O0FBRUEsTUFBSUQsR0FBRyxLQUFLLElBQVosRUFBa0I7QUFDaEJFLElBQUFBLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSCxHQUFaLEVBQWlCSSxPQUFqQixDQUF5QixVQUFVQyxLQUFWLEVBQWlCO0FBQ3hDTCxNQUFBQSxHQUFHLENBQUNLLEtBQUQsQ0FBSCxDQUFXRCxPQUFYLENBQW1CLFVBQVVFLEtBQVYsRUFBaUI7QUFDbENMLFFBQUFBLE1BQU0sQ0FBQ00sTUFBTSxDQUFDRCxLQUFELENBQVAsQ0FBTixHQUF3QkQsS0FBeEI7QUFDRCxPQUZEO0FBR0QsS0FKRDtBQUtEOztBQUVELFNBQU9KLE1BQVA7QUFDRDs7QUFFRCxTQUFTTyxJQUFULENBQWNDLEdBQWQsRUFBbUJDLE9BQW5CLEVBQTRCO0FBQzFCQSxFQUFBQSxPQUFPLEdBQUdBLE9BQU8sSUFBSSxFQUFyQjtBQUVBUixFQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWU8sT0FBWixFQUFxQk4sT0FBckIsQ0FBNkIsVUFBVU8sSUFBVixFQUFnQjtBQUMzQyxRQUFJZCx3QkFBd0IsQ0FBQ2UsT0FBekIsQ0FBaUNELElBQWpDLE1BQTJDLENBQUMsQ0FBaEQsRUFBbUQ7QUFDakQsWUFBTSxJQUFJaEIsYUFBSixDQUFrQixxQkFBcUJnQixJQUFyQixHQUE0Qiw2QkFBNUIsR0FBNERGLEdBQTVELEdBQWtFLGNBQXBGLENBQU47QUFDRDtBQUNGLEdBSkQsRUFIMEIsQ0FTMUI7O0FBQ0EsT0FBS0EsR0FBTCxHQUFvQkEsR0FBcEI7QUFDQSxPQUFLSSxJQUFMLEdBQW9CSCxPQUFPLENBQUMsTUFBRCxDQUFQLElBQTJCLElBQS9DOztBQUNBLE9BQUtJLE9BQUwsR0FBb0JKLE9BQU8sQ0FBQyxTQUFELENBQVAsSUFBMkIsWUFBWTtBQUFFLFdBQU8sSUFBUDtBQUFjLEdBQTNFOztBQUNBLE9BQUtLLFNBQUwsR0FBb0JMLE9BQU8sQ0FBQyxXQUFELENBQVAsSUFBMkIsVUFBVU0sSUFBVixFQUFnQjtBQUFFLFdBQU9BLElBQVA7QUFBYyxHQUEvRTs7QUFDQSxPQUFLQyxVQUFMLEdBQW9CUCxPQUFPLENBQUMsWUFBRCxDQUFQLElBQTJCLElBQS9DO0FBQ0EsT0FBS1EsU0FBTCxHQUFvQlIsT0FBTyxDQUFDLFdBQUQsQ0FBUCxJQUEyQixJQUEvQztBQUNBLE9BQUtTLFNBQUwsR0FBb0JULE9BQU8sQ0FBQyxXQUFELENBQVAsSUFBMkIsSUFBL0M7QUFDQSxPQUFLVSxZQUFMLEdBQW9CVixPQUFPLENBQUMsY0FBRCxDQUFQLElBQTJCLElBQS9DO0FBQ0EsT0FBS1csWUFBTCxHQUFvQnRCLG1CQUFtQixDQUFDVyxPQUFPLENBQUMsY0FBRCxDQUFQLElBQTJCLElBQTVCLENBQXZDOztBQUVBLE1BQUlaLGVBQWUsQ0FBQ2MsT0FBaEIsQ0FBd0IsS0FBS0MsSUFBN0IsTUFBdUMsQ0FBQyxDQUE1QyxFQUErQztBQUM3QyxVQUFNLElBQUlsQixhQUFKLENBQWtCLG1CQUFtQixLQUFLa0IsSUFBeEIsR0FBK0Isc0JBQS9CLEdBQXdESixHQUF4RCxHQUE4RCxjQUFoRixDQUFOO0FBQ0Q7QUFDRjs7QUFFRGEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCZixJQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUuanM/ODcyYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBZQU1MRXhjZXB0aW9uID0gcmVxdWlyZSgnLi9leGNlcHRpb24nKTtcblxudmFyIFRZUEVfQ09OU1RSVUNUT1JfT1BUSU9OUyA9IFtcbiAgJ2tpbmQnLFxuICAncmVzb2x2ZScsXG4gICdjb25zdHJ1Y3QnLFxuICAnaW5zdGFuY2VPZicsXG4gICdwcmVkaWNhdGUnLFxuICAncmVwcmVzZW50JyxcbiAgJ2RlZmF1bHRTdHlsZScsXG4gICdzdHlsZUFsaWFzZXMnXG5dO1xuXG52YXIgWUFNTF9OT0RFX0tJTkRTID0gW1xuICAnc2NhbGFyJyxcbiAgJ3NlcXVlbmNlJyxcbiAgJ21hcHBpbmcnXG5dO1xuXG5mdW5jdGlvbiBjb21waWxlU3R5bGVBbGlhc2VzKG1hcCkge1xuICB2YXIgcmVzdWx0ID0ge307XG5cbiAgaWYgKG1hcCAhPT0gbnVsbCkge1xuICAgIE9iamVjdC5rZXlzKG1hcCkuZm9yRWFjaChmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICAgIG1hcFtzdHlsZV0uZm9yRWFjaChmdW5jdGlvbiAoYWxpYXMpIHtcbiAgICAgICAgcmVzdWx0W1N0cmluZyhhbGlhcyldID0gc3R5bGU7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIFR5cGUodGFnLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAoVFlQRV9DT05TVFJVQ1RPUl9PUFRJT05TLmluZGV4T2YobmFtZSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbignVW5rbm93biBvcHRpb24gXCInICsgbmFtZSArICdcIiBpcyBtZXQgaW4gZGVmaW5pdGlvbiBvZiBcIicgKyB0YWcgKyAnXCIgWUFNTCB0eXBlLicpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gVE9ETzogQWRkIHRhZyBmb3JtYXQgY2hlY2suXG4gIHRoaXMudGFnICAgICAgICAgID0gdGFnO1xuICB0aGlzLmtpbmQgICAgICAgICA9IG9wdGlvbnNbJ2tpbmQnXSAgICAgICAgIHx8IG51bGw7XG4gIHRoaXMucmVzb2x2ZSAgICAgID0gb3B0aW9uc1sncmVzb2x2ZSddICAgICAgfHwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfTtcbiAgdGhpcy5jb25zdHJ1Y3QgICAgPSBvcHRpb25zWydjb25zdHJ1Y3QnXSAgICB8fCBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gZGF0YTsgfTtcbiAgdGhpcy5pbnN0YW5jZU9mICAgPSBvcHRpb25zWydpbnN0YW5jZU9mJ10gICB8fCBudWxsO1xuICB0aGlzLnByZWRpY2F0ZSAgICA9IG9wdGlvbnNbJ3ByZWRpY2F0ZSddICAgIHx8IG51bGw7XG4gIHRoaXMucmVwcmVzZW50ICAgID0gb3B0aW9uc1sncmVwcmVzZW50J10gICAgfHwgbnVsbDtcbiAgdGhpcy5kZWZhdWx0U3R5bGUgPSBvcHRpb25zWydkZWZhdWx0U3R5bGUnXSB8fCBudWxsO1xuICB0aGlzLnN0eWxlQWxpYXNlcyA9IGNvbXBpbGVTdHlsZUFsaWFzZXMob3B0aW9uc1snc3R5bGVBbGlhc2VzJ10gfHwgbnVsbCk7XG5cbiAgaWYgKFlBTUxfTk9ERV9LSU5EUy5pbmRleE9mKHRoaXMua2luZCkgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IFlBTUxFeGNlcHRpb24oJ1Vua25vd24ga2luZCBcIicgKyB0aGlzLmtpbmQgKyAnXCIgaXMgc3BlY2lmaWVkIGZvciBcIicgKyB0YWcgKyAnXCIgWUFNTCB0eXBlLicpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVHlwZTtcbiJdLCJuYW1lcyI6WyJZQU1MRXhjZXB0aW9uIiwicmVxdWlyZSIsIlRZUEVfQ09OU1RSVUNUT1JfT1BUSU9OUyIsIllBTUxfTk9ERV9LSU5EUyIsImNvbXBpbGVTdHlsZUFsaWFzZXMiLCJtYXAiLCJyZXN1bHQiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsInN0eWxlIiwiYWxpYXMiLCJTdHJpbmciLCJUeXBlIiwidGFnIiwib3B0aW9ucyIsIm5hbWUiLCJpbmRleE9mIiwia2luZCIsInJlc29sdmUiLCJjb25zdHJ1Y3QiLCJkYXRhIiwiaW5zdGFuY2VPZiIsInByZWRpY2F0ZSIsInJlcHJlc2VudCIsImRlZmF1bHRTdHlsZSIsInN0eWxlQWxpYXNlcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/type.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/binary.js":
/*!*********************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/type/binary.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/*eslint-disable no-bitwise*/\n\nvar NodeBuffer;\n\ntry {\n  // A trick for browserified version, to not include `Buffer` shim\n  var _require = undefined;\n  NodeBuffer = (__webpack_require__(/*! buffer */ \"../../../../node_modules/buffer/index.js\").Buffer);\n} catch (__) {}\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/js-yaml/type.js\"); // [ 64, 65, 66 ] -> [ padding, CR, LF ]\n\n\nvar BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\n\\r';\n\nfunction resolveYamlBinary(data) {\n  if (data === null) return false;\n  var code,\n      idx,\n      bitlen = 0,\n      max = data.length,\n      map = BASE64_MAP; // Convert one by one.\n\n  for (idx = 0; idx < max; idx++) {\n    code = map.indexOf(data.charAt(idx)); // Skip CR/LF\n\n    if (code > 64) continue; // Fail on illegal characters\n\n    if (code < 0) return false;\n    bitlen += 6;\n  } // If there are any bits left, source was corrupted\n\n\n  return bitlen % 8 === 0;\n}\n\nfunction constructYamlBinary(data) {\n  var idx,\n      tailbits,\n      input = data.replace(/[\\r\\n=]/g, ''),\n      // remove CR/LF & padding to simplify scan\n  max = input.length,\n      map = BASE64_MAP,\n      bits = 0,\n      result = []; // Collect by 6*4 bits (3 bytes)\n\n  for (idx = 0; idx < max; idx++) {\n    if (idx % 4 === 0 && idx) {\n      result.push(bits >> 16 & 0xFF);\n      result.push(bits >> 8 & 0xFF);\n      result.push(bits & 0xFF);\n    }\n\n    bits = bits << 6 | map.indexOf(input.charAt(idx));\n  } // Dump tail\n\n\n  tailbits = max % 4 * 6;\n\n  if (tailbits === 0) {\n    result.push(bits >> 16 & 0xFF);\n    result.push(bits >> 8 & 0xFF);\n    result.push(bits & 0xFF);\n  } else if (tailbits === 18) {\n    result.push(bits >> 10 & 0xFF);\n    result.push(bits >> 2 & 0xFF);\n  } else if (tailbits === 12) {\n    result.push(bits >> 4 & 0xFF);\n  } // Wrap into Buffer for NodeJS and leave Array for browser\n\n\n  if (NodeBuffer) {\n    // Support node 6.+ Buffer API when available\n    return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result);\n  }\n\n  return result;\n}\n\nfunction representYamlBinary(object\n/*, style*/\n) {\n  var result = '',\n      bits = 0,\n      idx,\n      tail,\n      max = object.length,\n      map = BASE64_MAP; // Convert every three bytes to 4 ASCII characters.\n\n  for (idx = 0; idx < max; idx++) {\n    if (idx % 3 === 0 && idx) {\n      result += map[bits >> 18 & 0x3F];\n      result += map[bits >> 12 & 0x3F];\n      result += map[bits >> 6 & 0x3F];\n      result += map[bits & 0x3F];\n    }\n\n    bits = (bits << 8) + object[idx];\n  } // Dump tail\n\n\n  tail = max % 3;\n\n  if (tail === 0) {\n    result += map[bits >> 18 & 0x3F];\n    result += map[bits >> 12 & 0x3F];\n    result += map[bits >> 6 & 0x3F];\n    result += map[bits & 0x3F];\n  } else if (tail === 2) {\n    result += map[bits >> 10 & 0x3F];\n    result += map[bits >> 4 & 0x3F];\n    result += map[bits << 2 & 0x3F];\n    result += map[64];\n  } else if (tail === 1) {\n    result += map[bits >> 2 & 0x3F];\n    result += map[bits << 4 & 0x3F];\n    result += map[64];\n    result += map[64];\n  }\n\n  return result;\n}\n\nfunction isBinary(object) {\n  return NodeBuffer && NodeBuffer.isBuffer(object);\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:binary', {\n  kind: 'scalar',\n  resolve: resolveYamlBinary,\n  construct: constructYamlBinary,\n  predicate: isBinary,\n  represent: representYamlBinary\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/type/binary.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/bool.js":
/*!*******************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/type/bool.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/js-yaml/type.js\");\n\nfunction resolveYamlBoolean(data) {\n  if (data === null) return false;\n  var max = data.length;\n  return max === 4 && (data === 'true' || data === 'True' || data === 'TRUE') || max === 5 && (data === 'false' || data === 'False' || data === 'FALSE');\n}\n\nfunction constructYamlBoolean(data) {\n  return data === 'true' || data === 'True' || data === 'TRUE';\n}\n\nfunction isBoolean(object) {\n  return Object.prototype.toString.call(object) === '[object Boolean]';\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:bool', {\n  kind: 'scalar',\n  resolve: resolveYamlBoolean,\n  construct: constructYamlBoolean,\n  predicate: isBoolean,\n  represent: {\n    lowercase: function (object) {\n      return object ? 'true' : 'false';\n    },\n    uppercase: function (object) {\n      return object ? 'TRUE' : 'FALSE';\n    },\n    camelcase: function (object) {\n      return object ? 'True' : 'False';\n    }\n  },\n  defaultStyle: 'lowercase'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL2Jvb2wuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLDJEQUFELENBQWxCOztBQUVBLFNBQVNDLGtCQUFULENBQTRCQyxJQUE1QixFQUFrQztBQUNoQyxNQUFJQSxJQUFJLEtBQUssSUFBYixFQUFtQixPQUFPLEtBQVA7QUFFbkIsTUFBSUMsR0FBRyxHQUFHRCxJQUFJLENBQUNFLE1BQWY7QUFFQSxTQUFRRCxHQUFHLEtBQUssQ0FBUixLQUFjRCxJQUFJLEtBQUssTUFBVCxJQUFtQkEsSUFBSSxLQUFLLE1BQTVCLElBQXNDQSxJQUFJLEtBQUssTUFBN0QsQ0FBRCxJQUNDQyxHQUFHLEtBQUssQ0FBUixLQUFjRCxJQUFJLEtBQUssT0FBVCxJQUFvQkEsSUFBSSxLQUFLLE9BQTdCLElBQXdDQSxJQUFJLEtBQUssT0FBL0QsQ0FEUjtBQUVEOztBQUVELFNBQVNHLG9CQUFULENBQThCSCxJQUE5QixFQUFvQztBQUNsQyxTQUFPQSxJQUFJLEtBQUssTUFBVCxJQUNBQSxJQUFJLEtBQUssTUFEVCxJQUVBQSxJQUFJLEtBQUssTUFGaEI7QUFHRDs7QUFFRCxTQUFTSSxTQUFULENBQW1CQyxNQUFuQixFQUEyQjtBQUN6QixTQUFPQyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCQyxJQUExQixDQUErQkosTUFBL0IsTUFBMkMsa0JBQWxEO0FBQ0Q7O0FBRURLLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixJQUFJZCxJQUFKLENBQVMsd0JBQVQsRUFBbUM7QUFDbERlLEVBQUFBLElBQUksRUFBRSxRQUQ0QztBQUVsREMsRUFBQUEsT0FBTyxFQUFFZCxrQkFGeUM7QUFHbERlLEVBQUFBLFNBQVMsRUFBRVgsb0JBSHVDO0FBSWxEWSxFQUFBQSxTQUFTLEVBQUVYLFNBSnVDO0FBS2xEWSxFQUFBQSxTQUFTLEVBQUU7QUFDVEMsSUFBQUEsU0FBUyxFQUFFLFVBQVVaLE1BQVYsRUFBa0I7QUFBRSxhQUFPQSxNQUFNLEdBQUcsTUFBSCxHQUFZLE9BQXpCO0FBQW1DLEtBRHpEO0FBRVRhLElBQUFBLFNBQVMsRUFBRSxVQUFVYixNQUFWLEVBQWtCO0FBQUUsYUFBT0EsTUFBTSxHQUFHLE1BQUgsR0FBWSxPQUF6QjtBQUFtQyxLQUZ6RDtBQUdUYyxJQUFBQSxTQUFTLEVBQUUsVUFBVWQsTUFBVixFQUFrQjtBQUFFLGFBQU9BLE1BQU0sR0FBRyxNQUFILEdBQVksT0FBekI7QUFBbUM7QUFIekQsR0FMdUM7QUFVbERlLEVBQUFBLFlBQVksRUFBRTtBQVZvQyxDQUFuQyxDQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvYm9vbC5qcz9kM2Y0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sQm9vbGVhbihkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIG1heCA9IGRhdGEubGVuZ3RoO1xuXG4gIHJldHVybiAobWF4ID09PSA0ICYmIChkYXRhID09PSAndHJ1ZScgfHwgZGF0YSA9PT0gJ1RydWUnIHx8IGRhdGEgPT09ICdUUlVFJykpIHx8XG4gICAgICAgICAobWF4ID09PSA1ICYmIChkYXRhID09PSAnZmFsc2UnIHx8IGRhdGEgPT09ICdGYWxzZScgfHwgZGF0YSA9PT0gJ0ZBTFNFJykpO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sQm9vbGVhbihkYXRhKSB7XG4gIHJldHVybiBkYXRhID09PSAndHJ1ZScgfHxcbiAgICAgICAgIGRhdGEgPT09ICdUcnVlJyB8fFxuICAgICAgICAgZGF0YSA9PT0gJ1RSVUUnO1xufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4ob2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgQm9vbGVhbl0nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpib29sJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxCb29sZWFuLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxCb29sZWFuLFxuICBwcmVkaWNhdGU6IGlzQm9vbGVhbixcbiAgcmVwcmVzZW50OiB7XG4gICAgbG93ZXJjYXNlOiBmdW5jdGlvbiAob2JqZWN0KSB7IHJldHVybiBvYmplY3QgPyAndHJ1ZScgOiAnZmFsc2UnOyB9LFxuICAgIHVwcGVyY2FzZTogZnVuY3Rpb24gKG9iamVjdCkgeyByZXR1cm4gb2JqZWN0ID8gJ1RSVUUnIDogJ0ZBTFNFJzsgfSxcbiAgICBjYW1lbGNhc2U6IGZ1bmN0aW9uIChvYmplY3QpIHsgcmV0dXJuIG9iamVjdCA/ICdUcnVlJyA6ICdGYWxzZSc7IH1cbiAgfSxcbiAgZGVmYXVsdFN0eWxlOiAnbG93ZXJjYXNlJ1xufSk7XG4iXSwibmFtZXMiOlsiVHlwZSIsInJlcXVpcmUiLCJyZXNvbHZlWWFtbEJvb2xlYW4iLCJkYXRhIiwibWF4IiwibGVuZ3RoIiwiY29uc3RydWN0WWFtbEJvb2xlYW4iLCJpc0Jvb2xlYW4iLCJvYmplY3QiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJtb2R1bGUiLCJleHBvcnRzIiwia2luZCIsInJlc29sdmUiLCJjb25zdHJ1Y3QiLCJwcmVkaWNhdGUiLCJyZXByZXNlbnQiLCJsb3dlcmNhc2UiLCJ1cHBlcmNhc2UiLCJjYW1lbGNhc2UiLCJkZWZhdWx0U3R5bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/type/bool.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/float.js":
/*!********************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/type/float.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar common = __webpack_require__(/*! ../common */ \"./node_modules/js-yaml/lib/js-yaml/common.js\");\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/js-yaml/type.js\");\n\nvar YAML_FLOAT_PATTERN = new RegExp( // 2.5e4, 2.5 and integers\n'^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' + // .2e4, .2\n// special case, seems not from spec\n'|\\\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' + // 20:59\n'|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\\\.[0-9_]*' + // .inf\n'|[-+]?\\\\.(?:inf|Inf|INF)' + // .nan\n'|\\\\.(?:nan|NaN|NAN))$');\n\nfunction resolveYamlFloat(data) {\n  if (data === null) return false;\n\n  if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`\n  // Probably should update regexp & check speed\n  data[data.length - 1] === '_') {\n    return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlFloat(data) {\n  var value, sign, base, digits;\n  value = data.replace(/_/g, '').toLowerCase();\n  sign = value[0] === '-' ? -1 : 1;\n  digits = [];\n\n  if ('+-'.indexOf(value[0]) >= 0) {\n    value = value.slice(1);\n  }\n\n  if (value === '.inf') {\n    return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n  } else if (value === '.nan') {\n    return NaN;\n  } else if (value.indexOf(':') >= 0) {\n    value.split(':').forEach(function (v) {\n      digits.unshift(parseFloat(v, 10));\n    });\n    value = 0.0;\n    base = 1;\n    digits.forEach(function (d) {\n      value += d * base;\n      base *= 60;\n    });\n    return sign * value;\n  }\n\n  return sign * parseFloat(value, 10);\n}\n\nvar SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;\n\nfunction representYamlFloat(object, style) {\n  var res;\n\n  if (isNaN(object)) {\n    switch (style) {\n      case 'lowercase':\n        return '.nan';\n\n      case 'uppercase':\n        return '.NAN';\n\n      case 'camelcase':\n        return '.NaN';\n    }\n  } else if (Number.POSITIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase':\n        return '.inf';\n\n      case 'uppercase':\n        return '.INF';\n\n      case 'camelcase':\n        return '.Inf';\n    }\n  } else if (Number.NEGATIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase':\n        return '-.inf';\n\n      case 'uppercase':\n        return '-.INF';\n\n      case 'camelcase':\n        return '-.Inf';\n    }\n  } else if (common.isNegativeZero(object)) {\n    return '-0.0';\n  }\n\n  res = object.toString(10); // JS stringifier can build scientific format without dots: 5e-100,\n  // while YAML requres dot: 5.e-100. Fix it with simple hack\n\n  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;\n}\n\nfunction isFloat(object) {\n  return Object.prototype.toString.call(object) === '[object Number]' && (object % 1 !== 0 || common.isNegativeZero(object));\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:float', {\n  kind: 'scalar',\n  resolve: resolveYamlFloat,\n  construct: constructYamlFloat,\n  predicate: isFloat,\n  represent: representYamlFloat,\n  defaultStyle: 'lowercase'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/type/float.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/int.js":
/*!******************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/type/int.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar common = __webpack_require__(/*! ../common */ \"./node_modules/js-yaml/lib/js-yaml/common.js\");\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/js-yaml/type.js\");\n\nfunction isHexCode(c) {\n  return 0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  || 0x41\n  /* A */\n  <= c && c <= 0x46\n  /* F */\n  || 0x61\n  /* a */\n  <= c && c <= 0x66\n  /* f */\n  ;\n}\n\nfunction isOctCode(c) {\n  return 0x30\n  /* 0 */\n  <= c && c <= 0x37\n  /* 7 */\n  ;\n}\n\nfunction isDecCode(c) {\n  return 0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  ;\n}\n\nfunction resolveYamlInteger(data) {\n  if (data === null) return false;\n  var max = data.length,\n      index = 0,\n      hasDigits = false,\n      ch;\n  if (!max) return false;\n  ch = data[index]; // sign\n\n  if (ch === '-' || ch === '+') {\n    ch = data[++index];\n  }\n\n  if (ch === '0') {\n    // 0\n    if (index + 1 === max) return true;\n    ch = data[++index]; // base 2, base 8, base 16\n\n    if (ch === 'b') {\n      // base 2\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (ch !== '0' && ch !== '1') return false;\n        hasDigits = true;\n      }\n\n      return hasDigits && ch !== '_';\n    }\n\n    if (ch === 'x') {\n      // base 16\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isHexCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n\n      return hasDigits && ch !== '_';\n    } // base 8\n\n\n    for (; index < max; index++) {\n      ch = data[index];\n      if (ch === '_') continue;\n      if (!isOctCode(data.charCodeAt(index))) return false;\n      hasDigits = true;\n    }\n\n    return hasDigits && ch !== '_';\n  } // base 10 (except 0) or base 60\n  // value should not start with `_`;\n\n\n  if (ch === '_') return false;\n\n  for (; index < max; index++) {\n    ch = data[index];\n    if (ch === '_') continue;\n    if (ch === ':') break;\n\n    if (!isDecCode(data.charCodeAt(index))) {\n      return false;\n    }\n\n    hasDigits = true;\n  } // Should have digits and should not end with `_`\n\n\n  if (!hasDigits || ch === '_') return false; // if !base60 - done;\n\n  if (ch !== ':') return true; // base60 almost not used, no needs to optimize\n\n  return /^(:[0-5]?[0-9])+$/.test(data.slice(index));\n}\n\nfunction constructYamlInteger(data) {\n  var value = data,\n      sign = 1,\n      ch,\n      base,\n      digits = [];\n\n  if (value.indexOf('_') !== -1) {\n    value = value.replace(/_/g, '');\n  }\n\n  ch = value[0];\n\n  if (ch === '-' || ch === '+') {\n    if (ch === '-') sign = -1;\n    value = value.slice(1);\n    ch = value[0];\n  }\n\n  if (value === '0') return 0;\n\n  if (ch === '0') {\n    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);\n    if (value[1] === 'x') return sign * parseInt(value, 16);\n    return sign * parseInt(value, 8);\n  }\n\n  if (value.indexOf(':') !== -1) {\n    value.split(':').forEach(function (v) {\n      digits.unshift(parseInt(v, 10));\n    });\n    value = 0;\n    base = 1;\n    digits.forEach(function (d) {\n      value += d * base;\n      base *= 60;\n    });\n    return sign * value;\n  }\n\n  return sign * parseInt(value, 10);\n}\n\nfunction isInteger(object) {\n  return Object.prototype.toString.call(object) === '[object Number]' && object % 1 === 0 && !common.isNegativeZero(object);\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:int', {\n  kind: 'scalar',\n  resolve: resolveYamlInteger,\n  construct: constructYamlInteger,\n  predicate: isInteger,\n  represent: {\n    binary: function (obj) {\n      return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1);\n    },\n    octal: function (obj) {\n      return obj >= 0 ? '0' + obj.toString(8) : '-0' + obj.toString(8).slice(1);\n    },\n    decimal: function (obj) {\n      return obj.toString(10);\n    },\n\n    /* eslint-disable max-len */\n    hexadecimal: function (obj) {\n      return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() : '-0x' + obj.toString(16).toUpperCase().slice(1);\n    }\n  },\n  defaultStyle: 'decimal',\n  styleAliases: {\n    binary: [2, 'bin'],\n    octal: [8, 'oct'],\n    decimal: [10, 'dec'],\n    hexadecimal: [16, 'hex']\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL2ludC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsK0RBQUQsQ0FBcEI7O0FBQ0EsSUFBSUMsSUFBSSxHQUFLRCxtQkFBTyxDQUFDLDJEQUFELENBQXBCOztBQUVBLFNBQVNFLFNBQVQsQ0FBbUJDLENBQW5CLEVBQXNCO0FBQ3BCLFNBQVM7QUFBSTtBQUFKLEtBQWVBLENBQWhCLElBQXVCQSxDQUFDLElBQUk7QUFBSTtBQUFqQyxLQUNFO0FBQUk7QUFBSixLQUFlQSxDQUFoQixJQUF1QkEsQ0FBQyxJQUFJO0FBQUk7QUFEakMsS0FFRTtBQUFJO0FBQUosS0FBZUEsQ0FBaEIsSUFBdUJBLENBQUMsSUFBSTtBQUFJO0FBRnhDO0FBR0Q7O0FBRUQsU0FBU0MsU0FBVCxDQUFtQkQsQ0FBbkIsRUFBc0I7QUFDcEIsU0FBUztBQUFJO0FBQUosS0FBZUEsQ0FBaEIsSUFBdUJBLENBQUMsSUFBSTtBQUFJO0FBQXhDO0FBQ0Q7O0FBRUQsU0FBU0UsU0FBVCxDQUFtQkYsQ0FBbkIsRUFBc0I7QUFDcEIsU0FBUztBQUFJO0FBQUosS0FBZUEsQ0FBaEIsSUFBdUJBLENBQUMsSUFBSTtBQUFJO0FBQXhDO0FBQ0Q7O0FBRUQsU0FBU0csa0JBQVQsQ0FBNEJDLElBQTVCLEVBQWtDO0FBQ2hDLE1BQUlBLElBQUksS0FBSyxJQUFiLEVBQW1CLE9BQU8sS0FBUDtBQUVuQixNQUFJQyxHQUFHLEdBQUdELElBQUksQ0FBQ0UsTUFBZjtBQUFBLE1BQ0lDLEtBQUssR0FBRyxDQURaO0FBQUEsTUFFSUMsU0FBUyxHQUFHLEtBRmhCO0FBQUEsTUFHSUMsRUFISjtBQUtBLE1BQUksQ0FBQ0osR0FBTCxFQUFVLE9BQU8sS0FBUDtBQUVWSSxFQUFBQSxFQUFFLEdBQUdMLElBQUksQ0FBQ0csS0FBRCxDQUFULENBVmdDLENBWWhDOztBQUNBLE1BQUlFLEVBQUUsS0FBSyxHQUFQLElBQWNBLEVBQUUsS0FBSyxHQUF6QixFQUE4QjtBQUM1QkEsSUFBQUEsRUFBRSxHQUFHTCxJQUFJLENBQUMsRUFBRUcsS0FBSCxDQUFUO0FBQ0Q7O0FBRUQsTUFBSUUsRUFBRSxLQUFLLEdBQVgsRUFBZ0I7QUFDZDtBQUNBLFFBQUlGLEtBQUssR0FBRyxDQUFSLEtBQWNGLEdBQWxCLEVBQXVCLE9BQU8sSUFBUDtBQUN2QkksSUFBQUEsRUFBRSxHQUFHTCxJQUFJLENBQUMsRUFBRUcsS0FBSCxDQUFULENBSGMsQ0FLZDs7QUFFQSxRQUFJRSxFQUFFLEtBQUssR0FBWCxFQUFnQjtBQUNkO0FBQ0FGLE1BQUFBLEtBQUs7O0FBRUwsYUFBT0EsS0FBSyxHQUFHRixHQUFmLEVBQW9CRSxLQUFLLEVBQXpCLEVBQTZCO0FBQzNCRSxRQUFBQSxFQUFFLEdBQUdMLElBQUksQ0FBQ0csS0FBRCxDQUFUO0FBQ0EsWUFBSUUsRUFBRSxLQUFLLEdBQVgsRUFBZ0I7QUFDaEIsWUFBSUEsRUFBRSxLQUFLLEdBQVAsSUFBY0EsRUFBRSxLQUFLLEdBQXpCLEVBQThCLE9BQU8sS0FBUDtBQUM5QkQsUUFBQUEsU0FBUyxHQUFHLElBQVo7QUFDRDs7QUFDRCxhQUFPQSxTQUFTLElBQUlDLEVBQUUsS0FBSyxHQUEzQjtBQUNEOztBQUdELFFBQUlBLEVBQUUsS0FBSyxHQUFYLEVBQWdCO0FBQ2Q7QUFDQUYsTUFBQUEsS0FBSzs7QUFFTCxhQUFPQSxLQUFLLEdBQUdGLEdBQWYsRUFBb0JFLEtBQUssRUFBekIsRUFBNkI7QUFDM0JFLFFBQUFBLEVBQUUsR0FBR0wsSUFBSSxDQUFDRyxLQUFELENBQVQ7QUFDQSxZQUFJRSxFQUFFLEtBQUssR0FBWCxFQUFnQjtBQUNoQixZQUFJLENBQUNWLFNBQVMsQ0FBQ0ssSUFBSSxDQUFDTSxVQUFMLENBQWdCSCxLQUFoQixDQUFELENBQWQsRUFBd0MsT0FBTyxLQUFQO0FBQ3hDQyxRQUFBQSxTQUFTLEdBQUcsSUFBWjtBQUNEOztBQUNELGFBQU9BLFNBQVMsSUFBSUMsRUFBRSxLQUFLLEdBQTNCO0FBQ0QsS0FoQ2EsQ0FrQ2Q7OztBQUNBLFdBQU9GLEtBQUssR0FBR0YsR0FBZixFQUFvQkUsS0FBSyxFQUF6QixFQUE2QjtBQUMzQkUsTUFBQUEsRUFBRSxHQUFHTCxJQUFJLENBQUNHLEtBQUQsQ0FBVDtBQUNBLFVBQUlFLEVBQUUsS0FBSyxHQUFYLEVBQWdCO0FBQ2hCLFVBQUksQ0FBQ1IsU0FBUyxDQUFDRyxJQUFJLENBQUNNLFVBQUwsQ0FBZ0JILEtBQWhCLENBQUQsQ0FBZCxFQUF3QyxPQUFPLEtBQVA7QUFDeENDLE1BQUFBLFNBQVMsR0FBRyxJQUFaO0FBQ0Q7O0FBQ0QsV0FBT0EsU0FBUyxJQUFJQyxFQUFFLEtBQUssR0FBM0I7QUFDRCxHQTNEK0IsQ0E2RGhDO0FBRUE7OztBQUNBLE1BQUlBLEVBQUUsS0FBSyxHQUFYLEVBQWdCLE9BQU8sS0FBUDs7QUFFaEIsU0FBT0YsS0FBSyxHQUFHRixHQUFmLEVBQW9CRSxLQUFLLEVBQXpCLEVBQTZCO0FBQzNCRSxJQUFBQSxFQUFFLEdBQUdMLElBQUksQ0FBQ0csS0FBRCxDQUFUO0FBQ0EsUUFBSUUsRUFBRSxLQUFLLEdBQVgsRUFBZ0I7QUFDaEIsUUFBSUEsRUFBRSxLQUFLLEdBQVgsRUFBZ0I7O0FBQ2hCLFFBQUksQ0FBQ1AsU0FBUyxDQUFDRSxJQUFJLENBQUNNLFVBQUwsQ0FBZ0JILEtBQWhCLENBQUQsQ0FBZCxFQUF3QztBQUN0QyxhQUFPLEtBQVA7QUFDRDs7QUFDREMsSUFBQUEsU0FBUyxHQUFHLElBQVo7QUFDRCxHQTFFK0IsQ0E0RWhDOzs7QUFDQSxNQUFJLENBQUNBLFNBQUQsSUFBY0MsRUFBRSxLQUFLLEdBQXpCLEVBQThCLE9BQU8sS0FBUCxDQTdFRSxDQStFaEM7O0FBQ0EsTUFBSUEsRUFBRSxLQUFLLEdBQVgsRUFBZ0IsT0FBTyxJQUFQLENBaEZnQixDQWtGaEM7O0FBQ0EsU0FBTyxvQkFBb0JFLElBQXBCLENBQXlCUCxJQUFJLENBQUNRLEtBQUwsQ0FBV0wsS0FBWCxDQUF6QixDQUFQO0FBQ0Q7O0FBRUQsU0FBU00sb0JBQVQsQ0FBOEJULElBQTlCLEVBQW9DO0FBQ2xDLE1BQUlVLEtBQUssR0FBR1YsSUFBWjtBQUFBLE1BQWtCVyxJQUFJLEdBQUcsQ0FBekI7QUFBQSxNQUE0Qk4sRUFBNUI7QUFBQSxNQUFnQ08sSUFBaEM7QUFBQSxNQUFzQ0MsTUFBTSxHQUFHLEVBQS9DOztBQUVBLE1BQUlILEtBQUssQ0FBQ0ksT0FBTixDQUFjLEdBQWQsTUFBdUIsQ0FBQyxDQUE1QixFQUErQjtBQUM3QkosSUFBQUEsS0FBSyxHQUFHQSxLQUFLLENBQUNLLE9BQU4sQ0FBYyxJQUFkLEVBQW9CLEVBQXBCLENBQVI7QUFDRDs7QUFFRFYsRUFBQUEsRUFBRSxHQUFHSyxLQUFLLENBQUMsQ0FBRCxDQUFWOztBQUVBLE1BQUlMLEVBQUUsS0FBSyxHQUFQLElBQWNBLEVBQUUsS0FBSyxHQUF6QixFQUE4QjtBQUM1QixRQUFJQSxFQUFFLEtBQUssR0FBWCxFQUFnQk0sSUFBSSxHQUFHLENBQUMsQ0FBUjtBQUNoQkQsSUFBQUEsS0FBSyxHQUFHQSxLQUFLLENBQUNGLEtBQU4sQ0FBWSxDQUFaLENBQVI7QUFDQUgsSUFBQUEsRUFBRSxHQUFHSyxLQUFLLENBQUMsQ0FBRCxDQUFWO0FBQ0Q7O0FBRUQsTUFBSUEsS0FBSyxLQUFLLEdBQWQsRUFBbUIsT0FBTyxDQUFQOztBQUVuQixNQUFJTCxFQUFFLEtBQUssR0FBWCxFQUFnQjtBQUNkLFFBQUlLLEtBQUssQ0FBQyxDQUFELENBQUwsS0FBYSxHQUFqQixFQUFzQixPQUFPQyxJQUFJLEdBQUdLLFFBQVEsQ0FBQ04sS0FBSyxDQUFDRixLQUFOLENBQVksQ0FBWixDQUFELEVBQWlCLENBQWpCLENBQXRCO0FBQ3RCLFFBQUlFLEtBQUssQ0FBQyxDQUFELENBQUwsS0FBYSxHQUFqQixFQUFzQixPQUFPQyxJQUFJLEdBQUdLLFFBQVEsQ0FBQ04sS0FBRCxFQUFRLEVBQVIsQ0FBdEI7QUFDdEIsV0FBT0MsSUFBSSxHQUFHSyxRQUFRLENBQUNOLEtBQUQsRUFBUSxDQUFSLENBQXRCO0FBQ0Q7O0FBRUQsTUFBSUEsS0FBSyxDQUFDSSxPQUFOLENBQWMsR0FBZCxNQUF1QixDQUFDLENBQTVCLEVBQStCO0FBQzdCSixJQUFBQSxLQUFLLENBQUNPLEtBQU4sQ0FBWSxHQUFaLEVBQWlCQyxPQUFqQixDQUF5QixVQUFVQyxDQUFWLEVBQWE7QUFDcENOLE1BQUFBLE1BQU0sQ0FBQ08sT0FBUCxDQUFlSixRQUFRLENBQUNHLENBQUQsRUFBSSxFQUFKLENBQXZCO0FBQ0QsS0FGRDtBQUlBVCxJQUFBQSxLQUFLLEdBQUcsQ0FBUjtBQUNBRSxJQUFBQSxJQUFJLEdBQUcsQ0FBUDtBQUVBQyxJQUFBQSxNQUFNLENBQUNLLE9BQVAsQ0FBZSxVQUFVRyxDQUFWLEVBQWE7QUFDMUJYLE1BQUFBLEtBQUssSUFBS1csQ0FBQyxHQUFHVCxJQUFkO0FBQ0FBLE1BQUFBLElBQUksSUFBSSxFQUFSO0FBQ0QsS0FIRDtBQUtBLFdBQU9ELElBQUksR0FBR0QsS0FBZDtBQUVEOztBQUVELFNBQU9DLElBQUksR0FBR0ssUUFBUSxDQUFDTixLQUFELEVBQVEsRUFBUixDQUF0QjtBQUNEOztBQUVELFNBQVNZLFNBQVQsQ0FBbUJDLE1BQW5CLEVBQTJCO0FBQ3pCLFNBQVFDLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFBakIsQ0FBMEJDLElBQTFCLENBQStCSixNQUEvQixDQUFELEtBQTZDLGlCQUE3QyxJQUNDQSxNQUFNLEdBQUcsQ0FBVCxLQUFlLENBQWYsSUFBb0IsQ0FBQy9CLE1BQU0sQ0FBQ29DLGNBQVAsQ0FBc0JMLE1BQXRCLENBRDdCO0FBRUQ7O0FBRURNLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixJQUFJcEMsSUFBSixDQUFTLHVCQUFULEVBQWtDO0FBQ2pEcUMsRUFBQUEsSUFBSSxFQUFFLFFBRDJDO0FBRWpEQyxFQUFBQSxPQUFPLEVBQUVqQyxrQkFGd0M7QUFHakRrQyxFQUFBQSxTQUFTLEVBQUV4QixvQkFIc0M7QUFJakR5QixFQUFBQSxTQUFTLEVBQUVaLFNBSnNDO0FBS2pEYSxFQUFBQSxTQUFTLEVBQUU7QUFDVEMsSUFBQUEsTUFBTSxFQUFPLFVBQVVDLEdBQVYsRUFBZTtBQUFFLGFBQU9BLEdBQUcsSUFBSSxDQUFQLEdBQVcsT0FBT0EsR0FBRyxDQUFDWCxRQUFKLENBQWEsQ0FBYixDQUFsQixHQUFvQyxRQUFRVyxHQUFHLENBQUNYLFFBQUosQ0FBYSxDQUFiLEVBQWdCbEIsS0FBaEIsQ0FBc0IsQ0FBdEIsQ0FBbkQ7QUFBOEUsS0FEbkc7QUFFVDhCLElBQUFBLEtBQUssRUFBUSxVQUFVRCxHQUFWLEVBQWU7QUFBRSxhQUFPQSxHQUFHLElBQUksQ0FBUCxHQUFXLE1BQU9BLEdBQUcsQ0FBQ1gsUUFBSixDQUFhLENBQWIsQ0FBbEIsR0FBb0MsT0FBUVcsR0FBRyxDQUFDWCxRQUFKLENBQWEsQ0FBYixFQUFnQmxCLEtBQWhCLENBQXNCLENBQXRCLENBQW5EO0FBQThFLEtBRm5HO0FBR1QrQixJQUFBQSxPQUFPLEVBQU0sVUFBVUYsR0FBVixFQUFlO0FBQUUsYUFBT0EsR0FBRyxDQUFDWCxRQUFKLENBQWEsRUFBYixDQUFQO0FBQTBCLEtBSC9DOztBQUlUO0FBQ0FjLElBQUFBLFdBQVcsRUFBRSxVQUFVSCxHQUFWLEVBQWU7QUFBRSxhQUFPQSxHQUFHLElBQUksQ0FBUCxHQUFXLE9BQU9BLEdBQUcsQ0FBQ1gsUUFBSixDQUFhLEVBQWIsRUFBaUJlLFdBQWpCLEVBQWxCLEdBQW9ELFFBQVFKLEdBQUcsQ0FBQ1gsUUFBSixDQUFhLEVBQWIsRUFBaUJlLFdBQWpCLEdBQStCakMsS0FBL0IsQ0FBcUMsQ0FBckMsQ0FBbkU7QUFBNkc7QUFMbEksR0FMc0M7QUFZakRrQyxFQUFBQSxZQUFZLEVBQUUsU0FabUM7QUFhakRDLEVBQUFBLFlBQVksRUFBRTtBQUNaUCxJQUFBQSxNQUFNLEVBQU8sQ0FBRSxDQUFGLEVBQU0sS0FBTixDQUREO0FBRVpFLElBQUFBLEtBQUssRUFBUSxDQUFFLENBQUYsRUFBTSxLQUFOLENBRkQ7QUFHWkMsSUFBQUEsT0FBTyxFQUFNLENBQUUsRUFBRixFQUFNLEtBQU4sQ0FIRDtBQUlaQyxJQUFBQSxXQUFXLEVBQUUsQ0FBRSxFQUFGLEVBQU0sS0FBTjtBQUpEO0FBYm1DLENBQWxDLENBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4vbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9pbnQuanM/YzlkMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBjb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcbnZhciBUeXBlICAgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbmZ1bmN0aW9uIGlzSGV4Q29kZShjKSB7XG4gIHJldHVybiAoKDB4MzAvKiAwICovIDw9IGMpICYmIChjIDw9IDB4MzkvKiA5ICovKSkgfHxcbiAgICAgICAgICgoMHg0MS8qIEEgKi8gPD0gYykgJiYgKGMgPD0gMHg0Ni8qIEYgKi8pKSB8fFxuICAgICAgICAgKCgweDYxLyogYSAqLyA8PSBjKSAmJiAoYyA8PSAweDY2LyogZiAqLykpO1xufVxuXG5mdW5jdGlvbiBpc09jdENvZGUoYykge1xuICByZXR1cm4gKCgweDMwLyogMCAqLyA8PSBjKSAmJiAoYyA8PSAweDM3LyogNyAqLykpO1xufVxuXG5mdW5jdGlvbiBpc0RlY0NvZGUoYykge1xuICByZXR1cm4gKCgweDMwLyogMCAqLyA8PSBjKSAmJiAoYyA8PSAweDM5LyogOSAqLykpO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlWWFtbEludGVnZXIoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBtYXggPSBkYXRhLmxlbmd0aCxcbiAgICAgIGluZGV4ID0gMCxcbiAgICAgIGhhc0RpZ2l0cyA9IGZhbHNlLFxuICAgICAgY2g7XG5cbiAgaWYgKCFtYXgpIHJldHVybiBmYWxzZTtcblxuICBjaCA9IGRhdGFbaW5kZXhdO1xuXG4gIC8vIHNpZ25cbiAgaWYgKGNoID09PSAnLScgfHwgY2ggPT09ICcrJykge1xuICAgIGNoID0gZGF0YVsrK2luZGV4XTtcbiAgfVxuXG4gIGlmIChjaCA9PT0gJzAnKSB7XG4gICAgLy8gMFxuICAgIGlmIChpbmRleCArIDEgPT09IG1heCkgcmV0dXJuIHRydWU7XG4gICAgY2ggPSBkYXRhWysraW5kZXhdO1xuXG4gICAgLy8gYmFzZSAyLCBiYXNlIDgsIGJhc2UgMTZcblxuICAgIGlmIChjaCA9PT0gJ2InKSB7XG4gICAgICAvLyBiYXNlIDJcbiAgICAgIGluZGV4Kys7XG5cbiAgICAgIGZvciAoOyBpbmRleCA8IG1heDsgaW5kZXgrKykge1xuICAgICAgICBjaCA9IGRhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoY2ggPT09ICdfJykgY29udGludWU7XG4gICAgICAgIGlmIChjaCAhPT0gJzAnICYmIGNoICE9PSAnMScpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaGFzRGlnaXRzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNEaWdpdHMgJiYgY2ggIT09ICdfJztcbiAgICB9XG5cblxuICAgIGlmIChjaCA9PT0gJ3gnKSB7XG4gICAgICAvLyBiYXNlIDE2XG4gICAgICBpbmRleCsrO1xuXG4gICAgICBmb3IgKDsgaW5kZXggPCBtYXg7IGluZGV4KyspIHtcbiAgICAgICAgY2ggPSBkYXRhW2luZGV4XTtcbiAgICAgICAgaWYgKGNoID09PSAnXycpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIWlzSGV4Q29kZShkYXRhLmNoYXJDb2RlQXQoaW5kZXgpKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBoYXNEaWdpdHMgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc0RpZ2l0cyAmJiBjaCAhPT0gJ18nO1xuICAgIH1cblxuICAgIC8vIGJhc2UgOFxuICAgIGZvciAoOyBpbmRleCA8IG1heDsgaW5kZXgrKykge1xuICAgICAgY2ggPSBkYXRhW2luZGV4XTtcbiAgICAgIGlmIChjaCA9PT0gJ18nKSBjb250aW51ZTtcbiAgICAgIGlmICghaXNPY3RDb2RlKGRhdGEuY2hhckNvZGVBdChpbmRleCkpKSByZXR1cm4gZmFsc2U7XG4gICAgICBoYXNEaWdpdHMgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gaGFzRGlnaXRzICYmIGNoICE9PSAnXyc7XG4gIH1cblxuICAvLyBiYXNlIDEwIChleGNlcHQgMCkgb3IgYmFzZSA2MFxuXG4gIC8vIHZhbHVlIHNob3VsZCBub3Qgc3RhcnQgd2l0aCBgX2A7XG4gIGlmIChjaCA9PT0gJ18nKSByZXR1cm4gZmFsc2U7XG5cbiAgZm9yICg7IGluZGV4IDwgbWF4OyBpbmRleCsrKSB7XG4gICAgY2ggPSBkYXRhW2luZGV4XTtcbiAgICBpZiAoY2ggPT09ICdfJykgY29udGludWU7XG4gICAgaWYgKGNoID09PSAnOicpIGJyZWFrO1xuICAgIGlmICghaXNEZWNDb2RlKGRhdGEuY2hhckNvZGVBdChpbmRleCkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGhhc0RpZ2l0cyA9IHRydWU7XG4gIH1cblxuICAvLyBTaG91bGQgaGF2ZSBkaWdpdHMgYW5kIHNob3VsZCBub3QgZW5kIHdpdGggYF9gXG4gIGlmICghaGFzRGlnaXRzIHx8IGNoID09PSAnXycpIHJldHVybiBmYWxzZTtcblxuICAvLyBpZiAhYmFzZTYwIC0gZG9uZTtcbiAgaWYgKGNoICE9PSAnOicpIHJldHVybiB0cnVlO1xuXG4gIC8vIGJhc2U2MCBhbG1vc3Qgbm90IHVzZWQsIG5vIG5lZWRzIHRvIG9wdGltaXplXG4gIHJldHVybiAvXig6WzAtNV0/WzAtOV0pKyQvLnRlc3QoZGF0YS5zbGljZShpbmRleCkpO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sSW50ZWdlcihkYXRhKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGEsIHNpZ24gPSAxLCBjaCwgYmFzZSwgZGlnaXRzID0gW107XG5cbiAgaWYgKHZhbHVlLmluZGV4T2YoJ18nKSAhPT0gLTEpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL18vZywgJycpO1xuICB9XG5cbiAgY2ggPSB2YWx1ZVswXTtcblxuICBpZiAoY2ggPT09ICctJyB8fCBjaCA9PT0gJysnKSB7XG4gICAgaWYgKGNoID09PSAnLScpIHNpZ24gPSAtMTtcbiAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDEpO1xuICAgIGNoID0gdmFsdWVbMF07XG4gIH1cblxuICBpZiAodmFsdWUgPT09ICcwJykgcmV0dXJuIDA7XG5cbiAgaWYgKGNoID09PSAnMCcpIHtcbiAgICBpZiAodmFsdWVbMV0gPT09ICdiJykgcmV0dXJuIHNpZ24gKiBwYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgMik7XG4gICAgaWYgKHZhbHVlWzFdID09PSAneCcpIHJldHVybiBzaWduICogcGFyc2VJbnQodmFsdWUsIDE2KTtcbiAgICByZXR1cm4gc2lnbiAqIHBhcnNlSW50KHZhbHVlLCA4KTtcbiAgfVxuXG4gIGlmICh2YWx1ZS5pbmRleE9mKCc6JykgIT09IC0xKSB7XG4gICAgdmFsdWUuc3BsaXQoJzonKS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgICBkaWdpdHMudW5zaGlmdChwYXJzZUludCh2LCAxMCkpO1xuICAgIH0pO1xuXG4gICAgdmFsdWUgPSAwO1xuICAgIGJhc2UgPSAxO1xuXG4gICAgZGlnaXRzLmZvckVhY2goZnVuY3Rpb24gKGQpIHtcbiAgICAgIHZhbHVlICs9IChkICogYmFzZSk7XG4gICAgICBiYXNlICo9IDYwO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNpZ24gKiB2YWx1ZTtcblxuICB9XG5cbiAgcmV0dXJuIHNpZ24gKiBwYXJzZUludCh2YWx1ZSwgMTApO1xufVxuXG5mdW5jdGlvbiBpc0ludGVnZXIob2JqZWN0KSB7XG4gIHJldHVybiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkpID09PSAnW29iamVjdCBOdW1iZXJdJyAmJlxuICAgICAgICAgKG9iamVjdCAlIDEgPT09IDAgJiYgIWNvbW1vbi5pc05lZ2F0aXZlWmVybyhvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6aW50Jywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxJbnRlZ2VyLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxJbnRlZ2VyLFxuICBwcmVkaWNhdGU6IGlzSW50ZWdlcixcbiAgcmVwcmVzZW50OiB7XG4gICAgYmluYXJ5OiAgICAgIGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiA+PSAwID8gJzBiJyArIG9iai50b1N0cmluZygyKSA6ICctMGInICsgb2JqLnRvU3RyaW5nKDIpLnNsaWNlKDEpOyB9LFxuICAgIG9jdGFsOiAgICAgICBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogPj0gMCA/ICcwJyAgKyBvYmoudG9TdHJpbmcoOCkgOiAnLTAnICArIG9iai50b1N0cmluZyg4KS5zbGljZSgxKTsgfSxcbiAgICBkZWNpbWFsOiAgICAgZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqLnRvU3RyaW5nKDEwKTsgfSxcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG4gICAgaGV4YWRlY2ltYWw6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiA+PSAwID8gJzB4JyArIG9iai50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSA6ICAnLTB4JyArIG9iai50b1N0cmluZygxNikudG9VcHBlckNhc2UoKS5zbGljZSgxKTsgfVxuICB9LFxuICBkZWZhdWx0U3R5bGU6ICdkZWNpbWFsJyxcbiAgc3R5bGVBbGlhc2VzOiB7XG4gICAgYmluYXJ5OiAgICAgIFsgMiwgICdiaW4nIF0sXG4gICAgb2N0YWw6ICAgICAgIFsgOCwgICdvY3QnIF0sXG4gICAgZGVjaW1hbDogICAgIFsgMTAsICdkZWMnIF0sXG4gICAgaGV4YWRlY2ltYWw6IFsgMTYsICdoZXgnIF1cbiAgfVxufSk7XG4iXSwibmFtZXMiOlsiY29tbW9uIiwicmVxdWlyZSIsIlR5cGUiLCJpc0hleENvZGUiLCJjIiwiaXNPY3RDb2RlIiwiaXNEZWNDb2RlIiwicmVzb2x2ZVlhbWxJbnRlZ2VyIiwiZGF0YSIsIm1heCIsImxlbmd0aCIsImluZGV4IiwiaGFzRGlnaXRzIiwiY2giLCJjaGFyQ29kZUF0IiwidGVzdCIsInNsaWNlIiwiY29uc3RydWN0WWFtbEludGVnZXIiLCJ2YWx1ZSIsInNpZ24iLCJiYXNlIiwiZGlnaXRzIiwiaW5kZXhPZiIsInJlcGxhY2UiLCJwYXJzZUludCIsInNwbGl0IiwiZm9yRWFjaCIsInYiLCJ1bnNoaWZ0IiwiZCIsImlzSW50ZWdlciIsIm9iamVjdCIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsImlzTmVnYXRpdmVaZXJvIiwibW9kdWxlIiwiZXhwb3J0cyIsImtpbmQiLCJyZXNvbHZlIiwiY29uc3RydWN0IiwicHJlZGljYXRlIiwicmVwcmVzZW50IiwiYmluYXJ5Iiwib2JqIiwib2N0YWwiLCJkZWNpbWFsIiwiaGV4YWRlY2ltYWwiLCJ0b1VwcGVyQ2FzZSIsImRlZmF1bHRTdHlsZSIsInN0eWxlQWxpYXNlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/type/int.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/js/function.js":
/*!**************************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/type/js/function.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar esprima; // Browserified version does not have esprima\n//\n// 1. For node.js just require module as deps\n// 2. For browser try to require mudule via external AMD system.\n//    If not found - try to fallback to window.esprima. If not\n//    found too - then fail to parse.\n//\n\ntry {\n  // workaround to exclude package from browserify list.\n  var _require = undefined;\n  esprima = __webpack_require__(/*! esprima */ \"./node_modules/esprima/dist/esprima.js\");\n} catch (_) {\n  /* eslint-disable no-redeclare */\n\n  /* global window */\n  if (typeof window !== 'undefined') esprima = window.esprima;\n}\n\nvar Type = __webpack_require__(/*! ../../type */ \"./node_modules/js-yaml/lib/js-yaml/type.js\");\n\nfunction resolveJavascriptFunction(data) {\n  if (data === null) return false;\n\n  try {\n    var source = '(' + data + ')',\n        ast = esprima.parse(source, {\n      range: true\n    });\n\n    if (ast.type !== 'Program' || ast.body.length !== 1 || ast.body[0].type !== 'ExpressionStatement' || ast.body[0].expression.type !== 'ArrowFunctionExpression' && ast.body[0].expression.type !== 'FunctionExpression') {\n      return false;\n    }\n\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nfunction constructJavascriptFunction(data) {\n  /*jslint evil:true*/\n  var source = '(' + data + ')',\n      ast = esprima.parse(source, {\n    range: true\n  }),\n      params = [],\n      body;\n\n  if (ast.type !== 'Program' || ast.body.length !== 1 || ast.body[0].type !== 'ExpressionStatement' || ast.body[0].expression.type !== 'ArrowFunctionExpression' && ast.body[0].expression.type !== 'FunctionExpression') {\n    throw new Error('Failed to resolve function');\n  }\n\n  ast.body[0].expression.params.forEach(function (param) {\n    params.push(param.name);\n  });\n  body = ast.body[0].expression.body.range; // Esprima's ranges include the first '{' and the last '}' characters on\n  // function expressions. So cut them out.\n\n  if (ast.body[0].expression.body.type === 'BlockStatement') {\n    /*eslint-disable no-new-func*/\n    return new Function(params, source.slice(body[0] + 1, body[1] - 1));\n  } // ES6 arrow functions can omit the BlockStatement. In that case, just return\n  // the body.\n\n  /*eslint-disable no-new-func*/\n\n\n  return new Function(params, 'return ' + source.slice(body[0], body[1]));\n}\n\nfunction representJavascriptFunction(object\n/*, style*/\n) {\n  return object.toString();\n}\n\nfunction isFunction(object) {\n  return Object.prototype.toString.call(object) === '[object Function]';\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:js/function', {\n  kind: 'scalar',\n  resolve: resolveJavascriptFunction,\n  construct: constructJavascriptFunction,\n  predicate: isFunction,\n  represent: representJavascriptFunction\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/type/js/function.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/js/regexp.js":
/*!************************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/type/js/regexp.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../../type */ \"./node_modules/js-yaml/lib/js-yaml/type.js\");\n\nfunction resolveJavascriptRegExp(data) {\n  if (data === null) return false;\n  if (data.length === 0) return false;\n  var regexp = data,\n      tail = /\\/([gim]*)$/.exec(data),\n      modifiers = ''; // if regexp starts with '/' it can have modifiers and must be properly closed\n  // `/foo/gim` - modifiers tail can be maximum 3 chars\n\n  if (regexp[0] === '/') {\n    if (tail) modifiers = tail[1];\n    if (modifiers.length > 3) return false; // if expression starts with /, is should be properly terminated\n\n    if (regexp[regexp.length - modifiers.length - 1] !== '/') return false;\n  }\n\n  return true;\n}\n\nfunction constructJavascriptRegExp(data) {\n  var regexp = data,\n      tail = /\\/([gim]*)$/.exec(data),\n      modifiers = ''; // `/foo/gim` - tail can be maximum 4 chars\n\n  if (regexp[0] === '/') {\n    if (tail) modifiers = tail[1];\n    regexp = regexp.slice(1, regexp.length - modifiers.length - 1);\n  }\n\n  return new RegExp(regexp, modifiers);\n}\n\nfunction representJavascriptRegExp(object\n/*, style*/\n) {\n  var result = '/' + object.source + '/';\n  if (object.global) result += 'g';\n  if (object.multiline) result += 'm';\n  if (object.ignoreCase) result += 'i';\n  return result;\n}\n\nfunction isRegExp(object) {\n  return Object.prototype.toString.call(object) === '[object RegExp]';\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:js/regexp', {\n  kind: 'scalar',\n  resolve: resolveJavascriptRegExp,\n  construct: constructJavascriptRegExp,\n  predicate: isRegExp,\n  represent: representJavascriptRegExp\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL2pzL3JlZ2V4cC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxJQUFJLEdBQUdDLG1CQUFPLENBQUMsOERBQUQsQ0FBbEI7O0FBRUEsU0FBU0MsdUJBQVQsQ0FBaUNDLElBQWpDLEVBQXVDO0FBQ3JDLE1BQUlBLElBQUksS0FBSyxJQUFiLEVBQW1CLE9BQU8sS0FBUDtBQUNuQixNQUFJQSxJQUFJLENBQUNDLE1BQUwsS0FBZ0IsQ0FBcEIsRUFBdUIsT0FBTyxLQUFQO0FBRXZCLE1BQUlDLE1BQU0sR0FBR0YsSUFBYjtBQUFBLE1BQ0lHLElBQUksR0FBSyxjQUFjQyxJQUFkLENBQW1CSixJQUFuQixDQURiO0FBQUEsTUFFSUssU0FBUyxHQUFHLEVBRmhCLENBSnFDLENBUXJDO0FBQ0E7O0FBQ0EsTUFBSUgsTUFBTSxDQUFDLENBQUQsQ0FBTixLQUFjLEdBQWxCLEVBQXVCO0FBQ3JCLFFBQUlDLElBQUosRUFBVUUsU0FBUyxHQUFHRixJQUFJLENBQUMsQ0FBRCxDQUFoQjtBQUVWLFFBQUlFLFNBQVMsQ0FBQ0osTUFBVixHQUFtQixDQUF2QixFQUEwQixPQUFPLEtBQVAsQ0FITCxDQUlyQjs7QUFDQSxRQUFJQyxNQUFNLENBQUNBLE1BQU0sQ0FBQ0QsTUFBUCxHQUFnQkksU0FBUyxDQUFDSixNQUExQixHQUFtQyxDQUFwQyxDQUFOLEtBQWlELEdBQXJELEVBQTBELE9BQU8sS0FBUDtBQUMzRDs7QUFFRCxTQUFPLElBQVA7QUFDRDs7QUFFRCxTQUFTSyx5QkFBVCxDQUFtQ04sSUFBbkMsRUFBeUM7QUFDdkMsTUFBSUUsTUFBTSxHQUFHRixJQUFiO0FBQUEsTUFDSUcsSUFBSSxHQUFLLGNBQWNDLElBQWQsQ0FBbUJKLElBQW5CLENBRGI7QUFBQSxNQUVJSyxTQUFTLEdBQUcsRUFGaEIsQ0FEdUMsQ0FLdkM7O0FBQ0EsTUFBSUgsTUFBTSxDQUFDLENBQUQsQ0FBTixLQUFjLEdBQWxCLEVBQXVCO0FBQ3JCLFFBQUlDLElBQUosRUFBVUUsU0FBUyxHQUFHRixJQUFJLENBQUMsQ0FBRCxDQUFoQjtBQUNWRCxJQUFBQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQ0ssS0FBUCxDQUFhLENBQWIsRUFBZ0JMLE1BQU0sQ0FBQ0QsTUFBUCxHQUFnQkksU0FBUyxDQUFDSixNQUExQixHQUFtQyxDQUFuRCxDQUFUO0FBQ0Q7O0FBRUQsU0FBTyxJQUFJTyxNQUFKLENBQVdOLE1BQVgsRUFBbUJHLFNBQW5CLENBQVA7QUFDRDs7QUFFRCxTQUFTSSx5QkFBVCxDQUFtQ0M7QUFBTztBQUExQyxFQUF1RDtBQUNyRCxNQUFJQyxNQUFNLEdBQUcsTUFBTUQsTUFBTSxDQUFDRSxNQUFiLEdBQXNCLEdBQW5DO0FBRUEsTUFBSUYsTUFBTSxDQUFDRyxNQUFYLEVBQW1CRixNQUFNLElBQUksR0FBVjtBQUNuQixNQUFJRCxNQUFNLENBQUNJLFNBQVgsRUFBc0JILE1BQU0sSUFBSSxHQUFWO0FBQ3RCLE1BQUlELE1BQU0sQ0FBQ0ssVUFBWCxFQUF1QkosTUFBTSxJQUFJLEdBQVY7QUFFdkIsU0FBT0EsTUFBUDtBQUNEOztBQUVELFNBQVNLLFFBQVQsQ0FBa0JOLE1BQWxCLEVBQTBCO0FBQ3hCLFNBQU9PLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFBakIsQ0FBMEJDLElBQTFCLENBQStCVixNQUEvQixNQUEyQyxpQkFBbEQ7QUFDRDs7QUFFRFcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLElBQUl6QixJQUFKLENBQVMsNkJBQVQsRUFBd0M7QUFDdkQwQixFQUFBQSxJQUFJLEVBQUUsUUFEaUQ7QUFFdkRDLEVBQUFBLE9BQU8sRUFBRXpCLHVCQUY4QztBQUd2RDBCLEVBQUFBLFNBQVMsRUFBRW5CLHlCQUg0QztBQUl2RG9CLEVBQUFBLFNBQVMsRUFBRVYsUUFKNEM7QUFLdkRXLEVBQUFBLFNBQVMsRUFBRWxCO0FBTDRDLENBQXhDLENBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4vbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9qcy9yZWdleHAuanM/NTEwZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vLi4vdHlwZScpO1xuXG5mdW5jdGlvbiByZXNvbHZlSmF2YXNjcmlwdFJlZ0V4cChkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIGlmIChkYXRhLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciByZWdleHAgPSBkYXRhLFxuICAgICAgdGFpbCAgID0gL1xcLyhbZ2ltXSopJC8uZXhlYyhkYXRhKSxcbiAgICAgIG1vZGlmaWVycyA9ICcnO1xuXG4gIC8vIGlmIHJlZ2V4cCBzdGFydHMgd2l0aCAnLycgaXQgY2FuIGhhdmUgbW9kaWZpZXJzIGFuZCBtdXN0IGJlIHByb3Blcmx5IGNsb3NlZFxuICAvLyBgL2Zvby9naW1gIC0gbW9kaWZpZXJzIHRhaWwgY2FuIGJlIG1heGltdW0gMyBjaGFyc1xuICBpZiAocmVnZXhwWzBdID09PSAnLycpIHtcbiAgICBpZiAodGFpbCkgbW9kaWZpZXJzID0gdGFpbFsxXTtcblxuICAgIGlmIChtb2RpZmllcnMubGVuZ3RoID4gMykgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGlmIGV4cHJlc3Npb24gc3RhcnRzIHdpdGggLywgaXMgc2hvdWxkIGJlIHByb3Blcmx5IHRlcm1pbmF0ZWRcbiAgICBpZiAocmVnZXhwW3JlZ2V4cC5sZW5ndGggLSBtb2RpZmllcnMubGVuZ3RoIC0gMV0gIT09ICcvJykgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdEphdmFzY3JpcHRSZWdFeHAoZGF0YSkge1xuICB2YXIgcmVnZXhwID0gZGF0YSxcbiAgICAgIHRhaWwgICA9IC9cXC8oW2dpbV0qKSQvLmV4ZWMoZGF0YSksXG4gICAgICBtb2RpZmllcnMgPSAnJztcblxuICAvLyBgL2Zvby9naW1gIC0gdGFpbCBjYW4gYmUgbWF4aW11bSA0IGNoYXJzXG4gIGlmIChyZWdleHBbMF0gPT09ICcvJykge1xuICAgIGlmICh0YWlsKSBtb2RpZmllcnMgPSB0YWlsWzFdO1xuICAgIHJlZ2V4cCA9IHJlZ2V4cC5zbGljZSgxLCByZWdleHAubGVuZ3RoIC0gbW9kaWZpZXJzLmxlbmd0aCAtIDEpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWdFeHAocmVnZXhwLCBtb2RpZmllcnMpO1xufVxuXG5mdW5jdGlvbiByZXByZXNlbnRKYXZhc2NyaXB0UmVnRXhwKG9iamVjdCAvKiwgc3R5bGUqLykge1xuICB2YXIgcmVzdWx0ID0gJy8nICsgb2JqZWN0LnNvdXJjZSArICcvJztcblxuICBpZiAob2JqZWN0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKG9iamVjdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmIChvYmplY3QuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBpc1JlZ0V4cChvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6anMvcmVnZXhwJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZUphdmFzY3JpcHRSZWdFeHAsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0SmF2YXNjcmlwdFJlZ0V4cCxcbiAgcHJlZGljYXRlOiBpc1JlZ0V4cCxcbiAgcmVwcmVzZW50OiByZXByZXNlbnRKYXZhc2NyaXB0UmVnRXhwXG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsInJlc29sdmVKYXZhc2NyaXB0UmVnRXhwIiwiZGF0YSIsImxlbmd0aCIsInJlZ2V4cCIsInRhaWwiLCJleGVjIiwibW9kaWZpZXJzIiwiY29uc3RydWN0SmF2YXNjcmlwdFJlZ0V4cCIsInNsaWNlIiwiUmVnRXhwIiwicmVwcmVzZW50SmF2YXNjcmlwdFJlZ0V4cCIsIm9iamVjdCIsInJlc3VsdCIsInNvdXJjZSIsImdsb2JhbCIsIm11bHRpbGluZSIsImlnbm9yZUNhc2UiLCJpc1JlZ0V4cCIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwicmVzb2x2ZSIsImNvbnN0cnVjdCIsInByZWRpY2F0ZSIsInJlcHJlc2VudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/type/js/regexp.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/js/undefined.js":
/*!***************************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/type/js/undefined.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../../type */ \"./node_modules/js-yaml/lib/js-yaml/type.js\");\n\nfunction resolveJavascriptUndefined() {\n  return true;\n}\n\nfunction constructJavascriptUndefined() {\n  /*eslint-disable no-undefined*/\n  return undefined;\n}\n\nfunction representJavascriptUndefined() {\n  return '';\n}\n\nfunction isUndefined(object) {\n  return typeof object === 'undefined';\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:js/undefined', {\n  kind: 'scalar',\n  resolve: resolveJavascriptUndefined,\n  construct: constructJavascriptUndefined,\n  predicate: isUndefined,\n  represent: representJavascriptUndefined\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL2pzL3VuZGVmaW5lZC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxJQUFJLEdBQUdDLG1CQUFPLENBQUMsOERBQUQsQ0FBbEI7O0FBRUEsU0FBU0MsMEJBQVQsR0FBc0M7QUFDcEMsU0FBTyxJQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsNEJBQVQsR0FBd0M7QUFDdEM7QUFDQSxTQUFPQyxTQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsNEJBQVQsR0FBd0M7QUFDdEMsU0FBTyxFQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsV0FBVCxDQUFxQkMsTUFBckIsRUFBNkI7QUFDM0IsU0FBTyxPQUFPQSxNQUFQLEtBQWtCLFdBQXpCO0FBQ0Q7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixJQUFJVCxJQUFKLENBQVMsZ0NBQVQsRUFBMkM7QUFDMURVLEVBQUFBLElBQUksRUFBRSxRQURvRDtBQUUxREMsRUFBQUEsT0FBTyxFQUFFVCwwQkFGaUQ7QUFHMURVLEVBQUFBLFNBQVMsRUFBRVQsNEJBSCtDO0FBSTFEVSxFQUFBQSxTQUFTLEVBQUVQLFdBSitDO0FBSzFEUSxFQUFBQSxTQUFTLEVBQUVUO0FBTCtDLENBQTNDLENBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4vbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9qcy91bmRlZmluZWQuanM/MzA0NCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vLi4vdHlwZScpO1xuXG5mdW5jdGlvbiByZXNvbHZlSmF2YXNjcmlwdFVuZGVmaW5lZCgpIHtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdEphdmFzY3JpcHRVbmRlZmluZWQoKSB7XG4gIC8qZXNsaW50LWRpc2FibGUgbm8tdW5kZWZpbmVkKi9cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gcmVwcmVzZW50SmF2YXNjcmlwdFVuZGVmaW5lZCgpIHtcbiAgcmV0dXJuICcnO1xufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICd1bmRlZmluZWQnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpqcy91bmRlZmluZWQnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlSmF2YXNjcmlwdFVuZGVmaW5lZCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RKYXZhc2NyaXB0VW5kZWZpbmVkLFxuICBwcmVkaWNhdGU6IGlzVW5kZWZpbmVkLFxuICByZXByZXNlbnQ6IHJlcHJlc2VudEphdmFzY3JpcHRVbmRlZmluZWRcbn0pO1xuIl0sIm5hbWVzIjpbIlR5cGUiLCJyZXF1aXJlIiwicmVzb2x2ZUphdmFzY3JpcHRVbmRlZmluZWQiLCJjb25zdHJ1Y3RKYXZhc2NyaXB0VW5kZWZpbmVkIiwidW5kZWZpbmVkIiwicmVwcmVzZW50SmF2YXNjcmlwdFVuZGVmaW5lZCIsImlzVW5kZWZpbmVkIiwib2JqZWN0IiwibW9kdWxlIiwiZXhwb3J0cyIsImtpbmQiLCJyZXNvbHZlIiwiY29uc3RydWN0IiwicHJlZGljYXRlIiwicmVwcmVzZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/type/js/undefined.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/map.js":
/*!******************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/type/map.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/js-yaml/type.js\");\n\nmodule.exports = new Type('tag:yaml.org,2002:map', {\n  kind: 'mapping',\n  construct: function (data) {\n    return data !== null ? data : {};\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL21hcC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxJQUFJLEdBQUdDLG1CQUFPLENBQUMsMkRBQUQsQ0FBbEI7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixJQUFJSCxJQUFKLENBQVMsdUJBQVQsRUFBa0M7QUFDakRJLEVBQUFBLElBQUksRUFBRSxTQUQyQztBQUVqREMsRUFBQUEsU0FBUyxFQUFFLFVBQVVDLElBQVYsRUFBZ0I7QUFBRSxXQUFPQSxJQUFJLEtBQUssSUFBVCxHQUFnQkEsSUFBaEIsR0FBdUIsRUFBOUI7QUFBbUM7QUFGZixDQUFsQyxDQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvbWFwLmpzPzJlMzgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6bWFwJywge1xuICBraW5kOiAnbWFwcGluZycsXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIGRhdGEgIT09IG51bGwgPyBkYXRhIDoge307IH1cbn0pO1xuIl0sIm5hbWVzIjpbIlR5cGUiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImtpbmQiLCJjb25zdHJ1Y3QiLCJkYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/type/map.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/merge.js":
/*!********************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/type/merge.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/js-yaml/type.js\");\n\nfunction resolveYamlMerge(data) {\n  return data === '<<' || data === null;\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:merge', {\n  kind: 'scalar',\n  resolve: resolveYamlMerge\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL21lcmdlLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLElBQUksR0FBR0MsbUJBQU8sQ0FBQywyREFBRCxDQUFsQjs7QUFFQSxTQUFTQyxnQkFBVCxDQUEwQkMsSUFBMUIsRUFBZ0M7QUFDOUIsU0FBT0EsSUFBSSxLQUFLLElBQVQsSUFBaUJBLElBQUksS0FBSyxJQUFqQztBQUNEOztBQUVEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsSUFBSUwsSUFBSixDQUFTLHlCQUFULEVBQW9DO0FBQ25ETSxFQUFBQSxJQUFJLEVBQUUsUUFENkM7QUFFbkRDLEVBQUFBLE9BQU8sRUFBRUw7QUFGMEMsQ0FBcEMsQ0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL21lcmdlLmpzP2IyOTQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxNZXJnZShkYXRhKSB7XG4gIHJldHVybiBkYXRhID09PSAnPDwnIHx8IGRhdGEgPT09IG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOm1lcmdlJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxNZXJnZVxufSk7XG4iXSwibmFtZXMiOlsiVHlwZSIsInJlcXVpcmUiLCJyZXNvbHZlWWFtbE1lcmdlIiwiZGF0YSIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwicmVzb2x2ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/type/merge.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/null.js":
/*!*******************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/type/null.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/js-yaml/type.js\");\n\nfunction resolveYamlNull(data) {\n  if (data === null) return true;\n  var max = data.length;\n  return max === 1 && data === '~' || max === 4 && (data === 'null' || data === 'Null' || data === 'NULL');\n}\n\nfunction constructYamlNull() {\n  return null;\n}\n\nfunction isNull(object) {\n  return object === null;\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:null', {\n  kind: 'scalar',\n  resolve: resolveYamlNull,\n  construct: constructYamlNull,\n  predicate: isNull,\n  represent: {\n    canonical: function () {\n      return '~';\n    },\n    lowercase: function () {\n      return 'null';\n    },\n    uppercase: function () {\n      return 'NULL';\n    },\n    camelcase: function () {\n      return 'Null';\n    }\n  },\n  defaultStyle: 'lowercase'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL251bGwuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLDJEQUFELENBQWxCOztBQUVBLFNBQVNDLGVBQVQsQ0FBeUJDLElBQXpCLEVBQStCO0FBQzdCLE1BQUlBLElBQUksS0FBSyxJQUFiLEVBQW1CLE9BQU8sSUFBUDtBQUVuQixNQUFJQyxHQUFHLEdBQUdELElBQUksQ0FBQ0UsTUFBZjtBQUVBLFNBQVFELEdBQUcsS0FBSyxDQUFSLElBQWFELElBQUksS0FBSyxHQUF2QixJQUNDQyxHQUFHLEtBQUssQ0FBUixLQUFjRCxJQUFJLEtBQUssTUFBVCxJQUFtQkEsSUFBSSxLQUFLLE1BQTVCLElBQXNDQSxJQUFJLEtBQUssTUFBN0QsQ0FEUjtBQUVEOztBQUVELFNBQVNHLGlCQUFULEdBQTZCO0FBQzNCLFNBQU8sSUFBUDtBQUNEOztBQUVELFNBQVNDLE1BQVQsQ0FBZ0JDLE1BQWhCLEVBQXdCO0FBQ3RCLFNBQU9BLE1BQU0sS0FBSyxJQUFsQjtBQUNEOztBQUVEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsSUFBSVYsSUFBSixDQUFTLHdCQUFULEVBQW1DO0FBQ2xEVyxFQUFBQSxJQUFJLEVBQUUsUUFENEM7QUFFbERDLEVBQUFBLE9BQU8sRUFBRVYsZUFGeUM7QUFHbERXLEVBQUFBLFNBQVMsRUFBRVAsaUJBSHVDO0FBSWxEUSxFQUFBQSxTQUFTLEVBQUVQLE1BSnVDO0FBS2xEUSxFQUFBQSxTQUFTLEVBQUU7QUFDVEMsSUFBQUEsU0FBUyxFQUFFLFlBQVk7QUFBRSxhQUFPLEdBQVA7QUFBZ0IsS0FEaEM7QUFFVEMsSUFBQUEsU0FBUyxFQUFFLFlBQVk7QUFBRSxhQUFPLE1BQVA7QUFBZ0IsS0FGaEM7QUFHVEMsSUFBQUEsU0FBUyxFQUFFLFlBQVk7QUFBRSxhQUFPLE1BQVA7QUFBZ0IsS0FIaEM7QUFJVEMsSUFBQUEsU0FBUyxFQUFFLFlBQVk7QUFBRSxhQUFPLE1BQVA7QUFBZ0I7QUFKaEMsR0FMdUM7QUFXbERDLEVBQUFBLFlBQVksRUFBRTtBQVhvQyxDQUFuQyxDQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvbnVsbC5qcz9hNWU2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sTnVsbChkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcblxuICB2YXIgbWF4ID0gZGF0YS5sZW5ndGg7XG5cbiAgcmV0dXJuIChtYXggPT09IDEgJiYgZGF0YSA9PT0gJ34nKSB8fFxuICAgICAgICAgKG1heCA9PT0gNCAmJiAoZGF0YSA9PT0gJ251bGwnIHx8IGRhdGEgPT09ICdOdWxsJyB8fCBkYXRhID09PSAnTlVMTCcpKTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbE51bGwoKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBpc051bGwob2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3QgPT09IG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOm51bGwnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbE51bGwsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbE51bGwsXG4gIHByZWRpY2F0ZTogaXNOdWxsLFxuICByZXByZXNlbnQ6IHtcbiAgICBjYW5vbmljYWw6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICd+JzsgICAgfSxcbiAgICBsb3dlcmNhc2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdudWxsJzsgfSxcbiAgICB1cHBlcmNhc2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdOVUxMJzsgfSxcbiAgICBjYW1lbGNhc2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdOdWxsJzsgfVxuICB9LFxuICBkZWZhdWx0U3R5bGU6ICdsb3dlcmNhc2UnXG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsInJlc29sdmVZYW1sTnVsbCIsImRhdGEiLCJtYXgiLCJsZW5ndGgiLCJjb25zdHJ1Y3RZYW1sTnVsbCIsImlzTnVsbCIsIm9iamVjdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwicmVzb2x2ZSIsImNvbnN0cnVjdCIsInByZWRpY2F0ZSIsInJlcHJlc2VudCIsImNhbm9uaWNhbCIsImxvd2VyY2FzZSIsInVwcGVyY2FzZSIsImNhbWVsY2FzZSIsImRlZmF1bHRTdHlsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/type/null.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/omap.js":
/*!*******************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/type/omap.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/js-yaml/type.js\");\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar _toString = Object.prototype.toString;\n\nfunction resolveYamlOmap(data) {\n  if (data === null) return true;\n  var objectKeys = [],\n      index,\n      length,\n      pair,\n      pairKey,\n      pairHasKey,\n      object = data;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    pairHasKey = false;\n    if (_toString.call(pair) !== '[object Object]') return false;\n\n    for (pairKey in pair) {\n      if (_hasOwnProperty.call(pair, pairKey)) {\n        if (!pairHasKey) pairHasKey = true;else return false;\n      }\n    }\n\n    if (!pairHasKey) return false;\n    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);else return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlOmap(data) {\n  return data !== null ? data : [];\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:omap', {\n  kind: 'sequence',\n  resolve: resolveYamlOmap,\n  construct: constructYamlOmap\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL29tYXAuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLDJEQUFELENBQWxCOztBQUVBLElBQUlDLGVBQWUsR0FBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxjQUF2QztBQUNBLElBQUlDLFNBQVMsR0FBU0gsTUFBTSxDQUFDQyxTQUFQLENBQWlCRyxRQUF2Qzs7QUFFQSxTQUFTQyxlQUFULENBQXlCQyxJQUF6QixFQUErQjtBQUM3QixNQUFJQSxJQUFJLEtBQUssSUFBYixFQUFtQixPQUFPLElBQVA7QUFFbkIsTUFBSUMsVUFBVSxHQUFHLEVBQWpCO0FBQUEsTUFBcUJDLEtBQXJCO0FBQUEsTUFBNEJDLE1BQTVCO0FBQUEsTUFBb0NDLElBQXBDO0FBQUEsTUFBMENDLE9BQTFDO0FBQUEsTUFBbURDLFVBQW5EO0FBQUEsTUFDSUMsTUFBTSxHQUFHUCxJQURiOztBQUdBLE9BQUtFLEtBQUssR0FBRyxDQUFSLEVBQVdDLE1BQU0sR0FBR0ksTUFBTSxDQUFDSixNQUFoQyxFQUF3Q0QsS0FBSyxHQUFHQyxNQUFoRCxFQUF3REQsS0FBSyxJQUFJLENBQWpFLEVBQW9FO0FBQ2xFRSxJQUFBQSxJQUFJLEdBQUdHLE1BQU0sQ0FBQ0wsS0FBRCxDQUFiO0FBQ0FJLElBQUFBLFVBQVUsR0FBRyxLQUFiO0FBRUEsUUFBSVQsU0FBUyxDQUFDVyxJQUFWLENBQWVKLElBQWYsTUFBeUIsaUJBQTdCLEVBQWdELE9BQU8sS0FBUDs7QUFFaEQsU0FBS0MsT0FBTCxJQUFnQkQsSUFBaEIsRUFBc0I7QUFDcEIsVUFBSVgsZUFBZSxDQUFDZSxJQUFoQixDQUFxQkosSUFBckIsRUFBMkJDLE9BQTNCLENBQUosRUFBeUM7QUFDdkMsWUFBSSxDQUFDQyxVQUFMLEVBQWlCQSxVQUFVLEdBQUcsSUFBYixDQUFqQixLQUNLLE9BQU8sS0FBUDtBQUNOO0FBQ0Y7O0FBRUQsUUFBSSxDQUFDQSxVQUFMLEVBQWlCLE9BQU8sS0FBUDtBQUVqQixRQUFJTCxVQUFVLENBQUNRLE9BQVgsQ0FBbUJKLE9BQW5CLE1BQWdDLENBQUMsQ0FBckMsRUFBd0NKLFVBQVUsQ0FBQ1MsSUFBWCxDQUFnQkwsT0FBaEIsRUFBeEMsS0FDSyxPQUFPLEtBQVA7QUFDTjs7QUFFRCxTQUFPLElBQVA7QUFDRDs7QUFFRCxTQUFTTSxpQkFBVCxDQUEyQlgsSUFBM0IsRUFBaUM7QUFDL0IsU0FBT0EsSUFBSSxLQUFLLElBQVQsR0FBZ0JBLElBQWhCLEdBQXVCLEVBQTlCO0FBQ0Q7O0FBRURZLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixJQUFJdEIsSUFBSixDQUFTLHdCQUFULEVBQW1DO0FBQ2xEdUIsRUFBQUEsSUFBSSxFQUFFLFVBRDRDO0FBRWxEQyxFQUFBQSxPQUFPLEVBQUVoQixlQUZ5QztBQUdsRGlCLEVBQUFBLFNBQVMsRUFBRUw7QUFIdUMsQ0FBbkMsQ0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL29tYXAuanM/ZjNlOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG52YXIgX2hhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfdG9TdHJpbmcgICAgICAgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbE9tYXAoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIHRydWU7XG5cbiAgdmFyIG9iamVjdEtleXMgPSBbXSwgaW5kZXgsIGxlbmd0aCwgcGFpciwgcGFpcktleSwgcGFpckhhc0tleSxcbiAgICAgIG9iamVjdCA9IGRhdGE7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgcGFpciA9IG9iamVjdFtpbmRleF07XG4gICAgcGFpckhhc0tleSA9IGZhbHNlO1xuXG4gICAgaWYgKF90b1N0cmluZy5jYWxsKHBhaXIpICE9PSAnW29iamVjdCBPYmplY3RdJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChwYWlyS2V5IGluIHBhaXIpIHtcbiAgICAgIGlmIChfaGFzT3duUHJvcGVydHkuY2FsbChwYWlyLCBwYWlyS2V5KSkge1xuICAgICAgICBpZiAoIXBhaXJIYXNLZXkpIHBhaXJIYXNLZXkgPSB0cnVlO1xuICAgICAgICBlbHNlIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXBhaXJIYXNLZXkpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChvYmplY3RLZXlzLmluZGV4T2YocGFpcktleSkgPT09IC0xKSBvYmplY3RLZXlzLnB1c2gocGFpcktleSk7XG4gICAgZWxzZSByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbE9tYXAoZGF0YSkge1xuICByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6b21hcCcsIHtcbiAga2luZDogJ3NlcXVlbmNlJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxPbWFwLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxPbWFwXG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsIl9oYXNPd25Qcm9wZXJ0eSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX3RvU3RyaW5nIiwidG9TdHJpbmciLCJyZXNvbHZlWWFtbE9tYXAiLCJkYXRhIiwib2JqZWN0S2V5cyIsImluZGV4IiwibGVuZ3RoIiwicGFpciIsInBhaXJLZXkiLCJwYWlySGFzS2V5Iiwib2JqZWN0IiwiY2FsbCIsImluZGV4T2YiLCJwdXNoIiwiY29uc3RydWN0WWFtbE9tYXAiLCJtb2R1bGUiLCJleHBvcnRzIiwia2luZCIsInJlc29sdmUiLCJjb25zdHJ1Y3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/type/omap.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/pairs.js":
/*!********************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/type/pairs.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/js-yaml/type.js\");\n\nvar _toString = Object.prototype.toString;\n\nfunction resolveYamlPairs(data) {\n  if (data === null) return true;\n  var index,\n      length,\n      pair,\n      keys,\n      result,\n      object = data;\n  result = new Array(object.length);\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    if (_toString.call(pair) !== '[object Object]') return false;\n    keys = Object.keys(pair);\n    if (keys.length !== 1) return false;\n    result[index] = [keys[0], pair[keys[0]]];\n  }\n\n  return true;\n}\n\nfunction constructYamlPairs(data) {\n  if (data === null) return [];\n  var index,\n      length,\n      pair,\n      keys,\n      result,\n      object = data;\n  result = new Array(object.length);\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    keys = Object.keys(pair);\n    result[index] = [keys[0], pair[keys[0]]];\n  }\n\n  return result;\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:pairs', {\n  kind: 'sequence',\n  resolve: resolveYamlPairs,\n  construct: constructYamlPairs\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL3BhaXJzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLElBQUksR0FBR0MsbUJBQU8sQ0FBQywyREFBRCxDQUFsQjs7QUFFQSxJQUFJQyxTQUFTLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFBakM7O0FBRUEsU0FBU0MsZ0JBQVQsQ0FBMEJDLElBQTFCLEVBQWdDO0FBQzlCLE1BQUlBLElBQUksS0FBSyxJQUFiLEVBQW1CLE9BQU8sSUFBUDtBQUVuQixNQUFJQyxLQUFKO0FBQUEsTUFBV0MsTUFBWDtBQUFBLE1BQW1CQyxJQUFuQjtBQUFBLE1BQXlCQyxJQUF6QjtBQUFBLE1BQStCQyxNQUEvQjtBQUFBLE1BQ0lDLE1BQU0sR0FBR04sSUFEYjtBQUdBSyxFQUFBQSxNQUFNLEdBQUcsSUFBSUUsS0FBSixDQUFVRCxNQUFNLENBQUNKLE1BQWpCLENBQVQ7O0FBRUEsT0FBS0QsS0FBSyxHQUFHLENBQVIsRUFBV0MsTUFBTSxHQUFHSSxNQUFNLENBQUNKLE1BQWhDLEVBQXdDRCxLQUFLLEdBQUdDLE1BQWhELEVBQXdERCxLQUFLLElBQUksQ0FBakUsRUFBb0U7QUFDbEVFLElBQUFBLElBQUksR0FBR0csTUFBTSxDQUFDTCxLQUFELENBQWI7QUFFQSxRQUFJTixTQUFTLENBQUNhLElBQVYsQ0FBZUwsSUFBZixNQUF5QixpQkFBN0IsRUFBZ0QsT0FBTyxLQUFQO0FBRWhEQyxJQUFBQSxJQUFJLEdBQUdSLE1BQU0sQ0FBQ1EsSUFBUCxDQUFZRCxJQUFaLENBQVA7QUFFQSxRQUFJQyxJQUFJLENBQUNGLE1BQUwsS0FBZ0IsQ0FBcEIsRUFBdUIsT0FBTyxLQUFQO0FBRXZCRyxJQUFBQSxNQUFNLENBQUNKLEtBQUQsQ0FBTixHQUFnQixDQUFFRyxJQUFJLENBQUMsQ0FBRCxDQUFOLEVBQVdELElBQUksQ0FBQ0MsSUFBSSxDQUFDLENBQUQsQ0FBTCxDQUFmLENBQWhCO0FBQ0Q7O0FBRUQsU0FBTyxJQUFQO0FBQ0Q7O0FBRUQsU0FBU0ssa0JBQVQsQ0FBNEJULElBQTVCLEVBQWtDO0FBQ2hDLE1BQUlBLElBQUksS0FBSyxJQUFiLEVBQW1CLE9BQU8sRUFBUDtBQUVuQixNQUFJQyxLQUFKO0FBQUEsTUFBV0MsTUFBWDtBQUFBLE1BQW1CQyxJQUFuQjtBQUFBLE1BQXlCQyxJQUF6QjtBQUFBLE1BQStCQyxNQUEvQjtBQUFBLE1BQ0lDLE1BQU0sR0FBR04sSUFEYjtBQUdBSyxFQUFBQSxNQUFNLEdBQUcsSUFBSUUsS0FBSixDQUFVRCxNQUFNLENBQUNKLE1BQWpCLENBQVQ7O0FBRUEsT0FBS0QsS0FBSyxHQUFHLENBQVIsRUFBV0MsTUFBTSxHQUFHSSxNQUFNLENBQUNKLE1BQWhDLEVBQXdDRCxLQUFLLEdBQUdDLE1BQWhELEVBQXdERCxLQUFLLElBQUksQ0FBakUsRUFBb0U7QUFDbEVFLElBQUFBLElBQUksR0FBR0csTUFBTSxDQUFDTCxLQUFELENBQWI7QUFFQUcsSUFBQUEsSUFBSSxHQUFHUixNQUFNLENBQUNRLElBQVAsQ0FBWUQsSUFBWixDQUFQO0FBRUFFLElBQUFBLE1BQU0sQ0FBQ0osS0FBRCxDQUFOLEdBQWdCLENBQUVHLElBQUksQ0FBQyxDQUFELENBQU4sRUFBV0QsSUFBSSxDQUFDQyxJQUFJLENBQUMsQ0FBRCxDQUFMLENBQWYsQ0FBaEI7QUFDRDs7QUFFRCxTQUFPQyxNQUFQO0FBQ0Q7O0FBRURLLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixJQUFJbEIsSUFBSixDQUFTLHlCQUFULEVBQW9DO0FBQ25EbUIsRUFBQUEsSUFBSSxFQUFFLFVBRDZDO0FBRW5EQyxFQUFBQSxPQUFPLEVBQUVkLGdCQUYwQztBQUduRGUsRUFBQUEsU0FBUyxFQUFFTDtBQUh3QyxDQUFwQyxDQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvcGFpcnMuanM/MGRmNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxQYWlycyhkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcblxuICB2YXIgaW5kZXgsIGxlbmd0aCwgcGFpciwga2V5cywgcmVzdWx0LFxuICAgICAgb2JqZWN0ID0gZGF0YTtcblxuICByZXN1bHQgPSBuZXcgQXJyYXkob2JqZWN0Lmxlbmd0aCk7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgcGFpciA9IG9iamVjdFtpbmRleF07XG5cbiAgICBpZiAoX3RvU3RyaW5nLmNhbGwocGFpcikgIT09ICdbb2JqZWN0IE9iamVjdF0nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBrZXlzID0gT2JqZWN0LmtleXMocGFpcik7XG5cbiAgICBpZiAoa2V5cy5sZW5ndGggIT09IDEpIHJldHVybiBmYWxzZTtcblxuICAgIHJlc3VsdFtpbmRleF0gPSBbIGtleXNbMF0sIHBhaXJba2V5c1swXV0gXTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sUGFpcnMoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIFtdO1xuXG4gIHZhciBpbmRleCwgbGVuZ3RoLCBwYWlyLCBrZXlzLCByZXN1bHQsXG4gICAgICBvYmplY3QgPSBkYXRhO1xuXG4gIHJlc3VsdCA9IG5ldyBBcnJheShvYmplY3QubGVuZ3RoKTtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBwYWlyID0gb2JqZWN0W2luZGV4XTtcblxuICAgIGtleXMgPSBPYmplY3Qua2V5cyhwYWlyKTtcblxuICAgIHJlc3VsdFtpbmRleF0gPSBbIGtleXNbMF0sIHBhaXJba2V5c1swXV0gXTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOnBhaXJzJywge1xuICBraW5kOiAnc2VxdWVuY2UnLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbFBhaXJzLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxQYWlyc1xufSk7XG4iXSwibmFtZXMiOlsiVHlwZSIsInJlcXVpcmUiLCJfdG9TdHJpbmciLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsInJlc29sdmVZYW1sUGFpcnMiLCJkYXRhIiwiaW5kZXgiLCJsZW5ndGgiLCJwYWlyIiwia2V5cyIsInJlc3VsdCIsIm9iamVjdCIsIkFycmF5IiwiY2FsbCIsImNvbnN0cnVjdFlhbWxQYWlycyIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwicmVzb2x2ZSIsImNvbnN0cnVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/type/pairs.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/seq.js":
/*!******************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/type/seq.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/js-yaml/type.js\");\n\nmodule.exports = new Type('tag:yaml.org,2002:seq', {\n  kind: 'sequence',\n  construct: function (data) {\n    return data !== null ? data : [];\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL3NlcS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxJQUFJLEdBQUdDLG1CQUFPLENBQUMsMkRBQUQsQ0FBbEI7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixJQUFJSCxJQUFKLENBQVMsdUJBQVQsRUFBa0M7QUFDakRJLEVBQUFBLElBQUksRUFBRSxVQUQyQztBQUVqREMsRUFBQUEsU0FBUyxFQUFFLFVBQVVDLElBQVYsRUFBZ0I7QUFBRSxXQUFPQSxJQUFJLEtBQUssSUFBVCxHQUFnQkEsSUFBaEIsR0FBdUIsRUFBOUI7QUFBbUM7QUFGZixDQUFsQyxDQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvc2VxLmpzP2JkMDkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6c2VxJywge1xuICBraW5kOiAnc2VxdWVuY2UnLFxuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBkYXRhICE9PSBudWxsID8gZGF0YSA6IFtdOyB9XG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwiY29uc3RydWN0IiwiZGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/type/seq.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/set.js":
/*!******************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/type/set.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/js-yaml/type.js\");\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction resolveYamlSet(data) {\n  if (data === null) return true;\n  var key,\n      object = data;\n\n  for (key in object) {\n    if (_hasOwnProperty.call(object, key)) {\n      if (object[key] !== null) return false;\n    }\n  }\n\n  return true;\n}\n\nfunction constructYamlSet(data) {\n  return data !== null ? data : {};\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:set', {\n  kind: 'mapping',\n  resolve: resolveYamlSet,\n  construct: constructYamlSet\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL3NldC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxJQUFJLEdBQUdDLG1CQUFPLENBQUMsMkRBQUQsQ0FBbEI7O0FBRUEsSUFBSUMsZUFBZSxHQUFHQyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLGNBQXZDOztBQUVBLFNBQVNDLGNBQVQsQ0FBd0JDLElBQXhCLEVBQThCO0FBQzVCLE1BQUlBLElBQUksS0FBSyxJQUFiLEVBQW1CLE9BQU8sSUFBUDtBQUVuQixNQUFJQyxHQUFKO0FBQUEsTUFBU0MsTUFBTSxHQUFHRixJQUFsQjs7QUFFQSxPQUFLQyxHQUFMLElBQVlDLE1BQVosRUFBb0I7QUFDbEIsUUFBSVAsZUFBZSxDQUFDUSxJQUFoQixDQUFxQkQsTUFBckIsRUFBNkJELEdBQTdCLENBQUosRUFBdUM7QUFDckMsVUFBSUMsTUFBTSxDQUFDRCxHQUFELENBQU4sS0FBZ0IsSUFBcEIsRUFBMEIsT0FBTyxLQUFQO0FBQzNCO0FBQ0Y7O0FBRUQsU0FBTyxJQUFQO0FBQ0Q7O0FBRUQsU0FBU0csZ0JBQVQsQ0FBMEJKLElBQTFCLEVBQWdDO0FBQzlCLFNBQU9BLElBQUksS0FBSyxJQUFULEdBQWdCQSxJQUFoQixHQUF1QixFQUE5QjtBQUNEOztBQUVESyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsSUFBSWIsSUFBSixDQUFTLHVCQUFULEVBQWtDO0FBQ2pEYyxFQUFBQSxJQUFJLEVBQUUsU0FEMkM7QUFFakRDLEVBQUFBLE9BQU8sRUFBRVQsY0FGd0M7QUFHakRVLEVBQUFBLFNBQVMsRUFBRUw7QUFIc0MsQ0FBbEMsQ0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL3NldC5qcz9hNzM2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbnZhciBfaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbFNldChkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcblxuICB2YXIga2V5LCBvYmplY3QgPSBkYXRhO1xuXG4gIGZvciAoa2V5IGluIG9iamVjdCkge1xuICAgIGlmIChfaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgIGlmIChvYmplY3Rba2V5XSAhPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sU2V0KGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEgIT09IG51bGwgPyBkYXRhIDoge307XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOnNldCcsIHtcbiAga2luZDogJ21hcHBpbmcnLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbFNldCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sU2V0XG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsIl9oYXNPd25Qcm9wZXJ0eSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicmVzb2x2ZVlhbWxTZXQiLCJkYXRhIiwia2V5Iiwib2JqZWN0IiwiY2FsbCIsImNvbnN0cnVjdFlhbWxTZXQiLCJtb2R1bGUiLCJleHBvcnRzIiwia2luZCIsInJlc29sdmUiLCJjb25zdHJ1Y3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/type/set.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/str.js":
/*!******************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/type/str.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/js-yaml/type.js\");\n\nmodule.exports = new Type('tag:yaml.org,2002:str', {\n  kind: 'scalar',\n  construct: function (data) {\n    return data !== null ? data : '';\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL3N0ci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxJQUFJLEdBQUdDLG1CQUFPLENBQUMsMkRBQUQsQ0FBbEI7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixJQUFJSCxJQUFKLENBQVMsdUJBQVQsRUFBa0M7QUFDakRJLEVBQUFBLElBQUksRUFBRSxRQUQyQztBQUVqREMsRUFBQUEsU0FBUyxFQUFFLFVBQVVDLElBQVYsRUFBZ0I7QUFBRSxXQUFPQSxJQUFJLEtBQUssSUFBVCxHQUFnQkEsSUFBaEIsR0FBdUIsRUFBOUI7QUFBbUM7QUFGZixDQUFsQyxDQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvc3RyLmpzPzJjNWIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6c3RyJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgY29uc3RydWN0OiBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiAnJzsgfVxufSk7XG4iXSwibmFtZXMiOlsiVHlwZSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwia2luZCIsImNvbnN0cnVjdCIsImRhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/type/str.js\n");

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/timestamp.js":
/*!************************************************************!*\
  !*** ./node_modules/js-yaml/lib/js-yaml/type/timestamp.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"./node_modules/js-yaml/lib/js-yaml/type.js\");\n\nvar YAML_DATE_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' + // [1] year\n'-([0-9][0-9])' + // [2] month\n'-([0-9][0-9])$'); // [3] day\n\nvar YAML_TIMESTAMP_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' + // [1] year\n'-([0-9][0-9]?)' + // [2] month\n'-([0-9][0-9]?)' + // [3] day\n'(?:[Tt]|[ \\\\t]+)' + // ...\n'([0-9][0-9]?)' + // [4] hour\n':([0-9][0-9])' + // [5] minute\n':([0-9][0-9])' + // [6] second\n'(?:\\\\.([0-9]*))?' + // [7] fraction\n'(?:[ \\\\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour\n'(?::([0-9][0-9]))?))?$'); // [11] tz_minute\n\nfunction resolveYamlTimestamp(data) {\n  if (data === null) return false;\n  if (YAML_DATE_REGEXP.exec(data) !== null) return true;\n  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;\n  return false;\n}\n\nfunction constructYamlTimestamp(data) {\n  var match,\n      year,\n      month,\n      day,\n      hour,\n      minute,\n      second,\n      fraction = 0,\n      delta = null,\n      tz_hour,\n      tz_minute,\n      date;\n  match = YAML_DATE_REGEXP.exec(data);\n  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);\n  if (match === null) throw new Error('Date resolve error'); // match: [1] year [2] month [3] day\n\n  year = +match[1];\n  month = +match[2] - 1; // JS month starts with 0\n\n  day = +match[3];\n\n  if (!match[4]) {\n    // no hour\n    return new Date(Date.UTC(year, month, day));\n  } // match: [4] hour [5] minute [6] second [7] fraction\n\n\n  hour = +match[4];\n  minute = +match[5];\n  second = +match[6];\n\n  if (match[7]) {\n    fraction = match[7].slice(0, 3);\n\n    while (fraction.length < 3) {\n      // milli-seconds\n      fraction += '0';\n    }\n\n    fraction = +fraction;\n  } // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute\n\n\n  if (match[9]) {\n    tz_hour = +match[10];\n    tz_minute = +(match[11] || 0);\n    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds\n\n    if (match[9] === '-') delta = -delta;\n  }\n\n  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));\n  if (delta) date.setTime(date.getTime() - delta);\n  return date;\n}\n\nfunction representYamlTimestamp(object\n/*, style*/\n) {\n  return object.toISOString();\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:timestamp', {\n  kind: 'scalar',\n  resolve: resolveYamlTimestamp,\n  construct: constructYamlTimestamp,\n  instanceOf: Date,\n  represent: representYamlTimestamp\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/js-yaml/lib/js-yaml/type/timestamp.js\n");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _competenceframework_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @competenceframework/shared */ \"../shared/dist/index.js\");\n/* harmony import */ var _competenceframework_shared__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_competenceframework_shared__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var front_matter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! front-matter */ \"./node_modules/front-matter/index.js\");\n/* harmony import */ var front_matter__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(front_matter__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n/**\r\n * Parse Query String\r\n * @param {string} search\r\n * @returns {Object.<string, string>}\r\n */\nconst parseQueryString = search => (search || \"\").replace(/^\\?/g, \"\").split(\"&\").reduce((acc, query) => {\n  const [key, value] = query.split(\"=\");\n\n  if (key) {\n    acc[key] = decodeURIComponent(value);\n  }\n\n  return acc;\n}, {});\n\nfunction isWikiEdit(search) {\n  // https://dev.azure.com/MacawCompetenceTeams/Custom%20Application%20Development/_wiki/wikis/Competence%20Framework/2553/?wikiVersion=GBmain&_a=edit&pagePath=/Competence%20Teams/Custom%20Application%20Development/topics/hardskills/React%20Query\n  if (search && search.indexOf(\"wikiVersion\") > -1 && search.indexOf(\"_a=edit\") > -1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction getPagePath(search) {\n  const qs = parseQueryString(search);\n  const path = qs[\"pagePath\"];\n\n  if (path) {\n    return path.replace(/ /g, \"-\"); // DevOps Wiki pages have \"-\" for spaces\n  }\n}\n\nasync function getWikiPage(pagePath) {\n  // GET https://dev.azure.com/{organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pages?path=/SamplePage973&includeContent=True&api-version=6.0\n  // https://dev.azure.com/MacawCompetenceTeams/Custom%20Application%20Development/_apis/wiki/wikis/Competence%20Framework/pages?path=/settings&includeContent=True&api-version=6.0\n  // todo: read path from correct competence team settings\n  const pageApiUrl = `https://dev.azure.com/MacawCompetenceTeams/Custom%20Application%20Development/_apis/wiki/wikis/Competence%20Framework/pages?path=${pagePath}&includeContent=True&api-version=6.0`;\n\n  try {\n    const response = await fetch(pageApiUrl);\n    const json = await response.json();\n    return json.content;\n  } catch (error) {\n    throw new Error(`Failed to get Wiki page on URL ${pageApiUrl}`);\n  }\n}\n\nasync function getWikiPageFrontmatter(pagePath) {\n  // GET https://dev.azure.com/{organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pages?path=/SamplePage973&includeContent=True&api-version=6.0\n  // https://dev.azure.com/MacawCompetenceTeams/Custom%20Application%20Development/_apis/wiki/wikis/Competence%20Framework/pages?path=/settings&includeContent=True&api-version=6.0\n  const pageApiUrl = `https://dev.azure.com/MacawCompetenceTeams/Custom%20Application%20Development/_apis/wiki/wikis/Competence%20Framework/pages?path=${pagePath}&includeContent=True&api-version=6.0`;\n\n  try {\n    const response = await fetch(pageApiUrl);\n    const json = await response.json();\n    const page = front_matter__WEBPACK_IMPORTED_MODULE_1___default()(json.content);\n    return page.attributes;\n  } catch (error) {\n    throw new Error(`Failed to get Wiki page on URL ${pageApiUrl}`);\n  }\n}\n\nfunction getObjectFromWikiPageJsonBlob(pageContent) {\n  // get content between ```json ... ```\n  const matches = pageContent.match(/```json(?<json>.*)```/ims);\n\n  if (matches.groups[\"json\"]) {\n    try {\n      const jsonData = JSON.parse(matches.groups[\"json\"]);\n      return jsonData;\n    } catch (e) {\n      console.error(`Failed to parse JSON from wiki page content: ${matches.groups[\"json\"]}`);\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\nfunction createValidationErrorsDivHtml(errorsCount) {\n  const divHtml = `\n        <div class=\"ms-TooltipHost host_54c19cd3\">\n            <button\n                type=\"button\" \n                id=\"CommandBar16validationErrors\" \n                class=\"ms-CommandBarItem-link itemLink_06d90d0b\" \n                role=\"menuitem\" \n                aria-expanded=\"false\" \n                aria-label=\"Validation errors\" \n                aria-haspopup=\"true\" \n                aria-setsize=\"16\" \n                aria-posinset=\"16\" \n                data-automation-id=\"commandBarValidationErrors\">\n                <i \n                    data-icon-name=\"more\" \n                    role=\"presentation\" \n                    aria-hidden=\"true\" \n                    class=\"ms-CommandBarItem-overflow itemOverflow_06d90d0b root-41\">\n                    ${errorsCount > 0 ? errorsCount : \"OK\"}\n                </i>\n            </button>\n        </div>\n    `;\n  return divHtml;\n}\n\nfunction ensureValidationErrorsDiv(validationErrors) {\n  let errorsText = \"Your frontmatter has no errors!\";\n  let errorsCount = 0;\n\n  if (validationErrors && validationErrors.length > 0) {\n    errorsText = \"Validation errors:\\n\";\n    errorsCount = validationErrors.length;\n    errorsText += validationErrors.map(validationError => \"- \" + validationError.message).join(\"\\n\");\n  }\n\n  errorsText += \"\\n\\n\";\n  window.schemaValidationErrors = errorsText;\n\n  const showErrors = () => {\n    window.alert(window.schemaValidationErrors);\n  };\n\n  let schemaValidationErrorsDiv = document.getElementById(\"schemaValidationErrors\");\n\n  if (!schemaValidationErrorsDiv) {\n    // Create <div id=\"schemaValidationErrors\" class=\"ms-CommandBarItem item_06d90d0b\">\n    schemaValidationErrorsDiv = document.createElement(\"div\");\n    schemaValidationErrorsDiv.id = \"schemaValidationErrors\";\n    schemaValidationErrorsDiv.classList.add(\"ms-CommandBarItem\");\n    schemaValidationErrorsDiv.classList.add(\"item_06d90d0b\");\n    schemaValidationErrorsDiv.addEventListener(\"click\", showErrors);\n    const divs = document.getElementsByClassName(\"ms-CommandBar-sideCommands\");\n\n    if (divs && divs.length > 0) {\n      const divToInsertBefore = divs[0];\n      divToInsertBefore.before(schemaValidationErrorsDiv);\n    }\n  }\n\n  schemaValidationErrorsDiv.innerHTML = createValidationErrorsDivHtml(errorsCount);\n  schemaValidationErrorsDiv.style.backgroundColor = errorsCount > 0 ? \"red\" : \"inherit\";\n}\n\nasync function main() {\n  const competenceFrameworkSettings = await getWikiPageFrontmatter(\"/settings\");\n\n  if (competenceFrameworkSettings != null) {\n    const getCompetenceFrameworkSettings = async () => competenceFrameworkSettings;\n\n    const getCompetenceTeamSettings = async competenceTeam => {\n      const competenceTeamSettings = await getWikiPageFrontmatter(`/Competence%20Teams/${competenceTeam.replace(/-/g, \"%20\")}/settings` // \"-\" --> \"%20\"\n      );\n      return competenceTeamSettings;\n    };\n\n    const intervalId = window.setInterval(async function () {\n      const search = window.location.search;\n\n      if (isWikiEdit(search)) {\n        const markdownPath = getPagePath(search);\n\n        if (markdownPath != null) {\n          const textareas = document.getElementsByTagName(\"textarea\");\n\n          if (textareas.length > 0) {\n            const text = textareas[0].value;\n            const validationErrors = await (0,_competenceframework_shared__WEBPACK_IMPORTED_MODULE_0__.validatePageFrontmatter)(markdownPath, text, getCompetenceFrameworkSettings, getCompetenceTeamSettings);\n            ensureValidationErrorsDiv(validationErrors);\n          }\n        }\n      }\n    }, 1000);\n  } else {\n    console.log(\"Failed to initiate Competence Framework Wiki page validation\");\n  }\n}\n\nmain().catch(e => {\n  console.log(e);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.ts\n");

/***/ }),

/***/ "../shared/dist/constrains.js":
/*!************************************!*\
  !*** ../shared/dist/constrains.js ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.competenceTeamFunctionLevelConstraints = exports.competenceTeamRoleConstraints = exports.quadrantValuesConstraints = exports.ringValuesConstraints = exports.skillTypeValuesConstraints = void 0;\nexports.skillTypeValuesConstraints = [\"Soft\", \"Hard\", \"Competency\"];\nexports.ringValuesConstraints = [\"Adopt\", \"Explore\", \"Endure\", \"Retire\"];\nexports.quadrantValuesConstraints = [\"Languages and Frameworks\", \"Tools\", \"Platforms\", \"Techniques\"]; // Configuration of roles available per competence team\n\nexports.competenceTeamRoleConstraints = {\n  \"Custom Application Development\": [\"Creative Frontend Developer\", \"Technical Frontend Developer\", \"Backend Developer\"],\n  Integration: [],\n  \"Sitecore Experience Platform\": []\n}; // Configuration of functions available per competence team\n\nexports.competenceTeamFunctionLevelConstraints = {\n  \"Custom Application Development\": [\"TechnicalSpecialist1\", \"TechnicalSpecialist2\", \"TechnicalSpecialist3\", \"TechnicalSpecialist4\"],\n  Integration: [],\n  \"Sitecore Experience Platform\": []\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2Rpc3QvY29uc3RyYWlucy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBT2FBLGtDQUFBQSxHQUEwQyxDQUFDLE1BQUQsRUFBUyxNQUFULEVBQWlCLFlBQWpCLENBQTFDO0FBRUFBLDZCQUFBQSxHQUFnQyxDQUFDLE9BQUQsRUFBVSxTQUFWLEVBQXFCLFFBQXJCLEVBQStCLFFBQS9CLENBQWhDO0FBRUFBLGlDQUFBQSxHQUF3QyxDQUFDLDBCQUFELEVBQTZCLE9BQTdCLEVBQXNDLFdBQXRDLEVBQW1ELFlBQW5ELENBQXhDLEMsQ0FFYjs7QUFDYUEscUNBQUFBLEdBQWdFO0FBQ3pFLG9DQUFrQyxDQUM5Qiw2QkFEOEIsRUFFOUIsOEJBRjhCLEVBRzlCLG1CQUg4QixDQUR1QztBQU16RUMsYUFBVyxFQUFFLEVBTjREO0FBT3pFLGtDQUFnQztBQVB5QyxDQUFoRSxDLENBVWI7O0FBQ2FELDhDQUFBQSxHQUFrRjtBQUMzRixvQ0FBa0MsQ0FDOUIsc0JBRDhCLEVBRTlCLHNCQUY4QixFQUc5QixzQkFIOEIsRUFJOUIsc0JBSjhCLENBRHlEO0FBTzNGQyxhQUFXLEVBQUUsRUFQOEU7QUFRM0Ysa0NBQWdDO0FBUjJELENBQWxGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4uL3NyYy9jb25zdHJhaW5zLnRzPzJlMmMiXSwibmFtZXMiOlsiZXhwb3J0cyIsIkludGVncmF0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared/dist/constrains.js\n");

/***/ }),

/***/ "../shared/dist/filterTopics.js":
/*!**************************************!*\
  !*** ../shared/dist/filterTopics.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nexports.__esModule = true;\nexports.filterTopics = exports.isRelevantForRole = void 0;\n\nvar natural_compare_1 = __importDefault(__webpack_require__(/*! natural-compare */ \"../shared/node_modules/natural-compare/index.js\"));\n\nfunction isRelevantForRole(roles, role) {\n  if (roles === undefined) {\n    // roles not defined means relevant for all roles\n    return true;\n  }\n\n  if (!Array.isArray(roles)) {\n    return true; // should not occur, so just return true\n  }\n\n  if (roles.length === 0) {\n    // no roles means relevant for all roles\n    return true;\n  }\n\n  var isRelevant = false;\n  roles.forEach(function (roleSkillFunctionMapping) {\n    if (!roleSkillFunctionMapping.role) {\n      isRelevant = true; // role not defined means relevant for all roles\n    }\n\n    if (roleSkillFunctionMapping.role === role) {\n      isRelevant = true;\n    }\n  });\n  return isRelevant;\n}\n\nexports.isRelevantForRole = isRelevantForRole;\n\nfunction filterTopics(topics, filterOptions) {\n  var skillType = filterOptions.skillType,\n      isLearningPath = filterOptions.isLearningPath,\n      role = filterOptions.role,\n      ring = filterOptions.ring,\n      quadrant = filterOptions.quadrant;\n  var selectedTopics = [];\n  topics.forEach(function (topic) {\n    topic.markdownFilePath = \"\".concat(topic.id.replace(/\\\\/g, \"/\"));\n    var push = true;\n\n    if (skillType && skillType !== topic.skillType) {\n      push = false;\n    }\n\n    if (isLearningPath !== undefined && isLearningPath !== topic.isLearningPath) {\n      push = false;\n    }\n\n    if (role && !isRelevantForRole(topic.roles, role)) {\n      push = false;\n    }\n\n    if (ring && ring !== topic.ring) {\n      push = false;\n    }\n\n    if (quadrant && quadrant !== topic.quadrant) {\n      push = false;\n    }\n\n    if (push) {\n      selectedTopics.push(topic);\n    }\n  });\n  return selectedTopics.sort(function (firstItem, secondItem) {\n    return (0, natural_compare_1[\"default\"])(firstItem.id, secondItem.id);\n  });\n}\n\nexports.filterTopics = filterTopics;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2Rpc3QvZmlsdGVyVG9waWNzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBa0JBLFNBQWdCQSxpQkFBaEIsQ0FBa0NDLEtBQWxDLEVBQWlGQyxJQUFqRixFQUEyRjtBQUN2RixNQUFJRCxLQUFLLEtBQUtFLFNBQWQsRUFBeUI7QUFDckI7QUFDQSxXQUFPLElBQVA7QUFDSDs7QUFFRCxNQUFJLENBQUNDLEtBQUssQ0FBQ0MsT0FBTixDQUFjSixLQUFkLENBQUwsRUFBMkI7QUFDdkIsV0FBTyxJQUFQLENBRHVCLENBQ1Y7QUFDaEI7O0FBRUQsTUFBSUEsS0FBSyxDQUFDSyxNQUFOLEtBQWlCLENBQXJCLEVBQXdCO0FBQ3BCO0FBQ0EsV0FBTyxJQUFQO0FBQ0g7O0FBRUQsTUFBSUMsVUFBVSxHQUFHLEtBQWpCO0FBQ0FOLE9BQUssQ0FBQ08sT0FBTixDQUFjLFVBQUNDLHdCQUFELEVBQXlCO0FBQ25DLFFBQUksQ0FBQ0Esd0JBQXdCLENBQUNQLElBQTlCLEVBQW9DO0FBQ2hDSyxnQkFBVSxHQUFHLElBQWIsQ0FEZ0MsQ0FDYjtBQUN0Qjs7QUFDRCxRQUFJRSx3QkFBd0IsQ0FBQ1AsSUFBekIsS0FBa0NBLElBQXRDLEVBQTRDO0FBQ3hDSyxnQkFBVSxHQUFHLElBQWI7QUFDSDtBQUNKLEdBUEQ7QUFRQSxTQUFPQSxVQUFQO0FBQ0g7O0FBekJERyx5QkFBQUE7O0FBMkJBLFNBQWdCQyxZQUFoQixDQUNJQyxNQURKLEVBRUlDLGFBRkosRUFFcUM7QUFFekIsZUFBUyxHQUEyQ0EsYUFBYSxVQUFqRTtBQUFBLE1BQVdDLGNBQWMsR0FBMkJELGFBQWEsZUFBakU7QUFBQSxNQUEyQlgsSUFBSSxHQUFxQlcsYUFBYSxLQUFqRTtBQUFBLE1BQWlDRSxJQUFJLEdBQWVGLGFBQWEsS0FBakU7QUFBQSxNQUF1Q0csUUFBUSxHQUFLSCxhQUFhLFNBQWpFO0FBQ1IsTUFBTUksY0FBYyxHQUFZLEVBQWhDO0FBQ0FMLFFBQU0sQ0FBQ0osT0FBUCxDQUFlLFVBQUNVLEtBQUQsRUFBYTtBQUN4QkEsU0FBSyxDQUFDQyxnQkFBTixHQUF5QixVQUFHRCxLQUFLLENBQUNFLEVBQU4sQ0FBU0MsT0FBVCxDQUFpQixLQUFqQixFQUF3QixHQUF4QixDQUFILENBQXpCO0FBQ0EsUUFBSUMsSUFBSSxHQUFHLElBQVg7O0FBRUEsUUFBSUMsU0FBUyxJQUFJQSxTQUFTLEtBQUtMLEtBQUssQ0FBQ0ssU0FBckMsRUFBZ0Q7QUFDNUNELFVBQUksR0FBRyxLQUFQO0FBQ0g7O0FBQ0QsUUFBSVIsY0FBYyxLQUFLWCxTQUFuQixJQUFnQ1csY0FBYyxLQUFLSSxLQUFLLENBQUNKLGNBQTdELEVBQTZFO0FBQ3pFUSxVQUFJLEdBQUcsS0FBUDtBQUNIOztBQUNELFFBQUlwQixJQUFJLElBQUksQ0FBQ0YsaUJBQWlCLENBQUNrQixLQUFLLENBQUNqQixLQUFQLEVBQWNDLElBQWQsQ0FBOUIsRUFBMkQ7QUFDdkRvQixVQUFJLEdBQUcsS0FBUDtBQUNIOztBQUNELFFBQUlQLElBQUksSUFBSUEsSUFBSSxLQUFLRyxLQUFLLENBQUNILElBQTNCLEVBQWlDO0FBQzdCTyxVQUFJLEdBQUcsS0FBUDtBQUNIOztBQUNELFFBQUlOLFFBQVEsSUFBSUEsUUFBUSxLQUFLRSxLQUFLLENBQUNGLFFBQW5DLEVBQTZDO0FBQ3pDTSxVQUFJLEdBQUcsS0FBUDtBQUNIOztBQUVELFFBQUlBLElBQUosRUFBVTtBQUNOTCxvQkFBYyxDQUFDSyxJQUFmLENBQW9CSixLQUFwQjtBQUNIO0FBQ0osR0F2QkQ7QUF5QkEsU0FBT0QsY0FBYyxDQUFDTyxJQUFmLENBQW9CLFVBQUNDLFNBQUQsRUFBWUMsVUFBWixFQUFzQjtBQUFLLDZDQUFlRCxTQUFTLENBQUNMLEVBQXpCLEVBQTZCTSxVQUFVLENBQUNOLEVBQXhDO0FBQTJDLEdBQTFGLENBQVA7QUFDSDs7QUFoQ0RWLG9CQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uLi9zcmMvZmlsdGVyVG9waWNzLnRzPzVkYTgiXSwibmFtZXMiOlsiaXNSZWxldmFudEZvclJvbGUiLCJyb2xlcyIsInJvbGUiLCJ1bmRlZmluZWQiLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJpc1JlbGV2YW50IiwiZm9yRWFjaCIsInJvbGVTa2lsbEZ1bmN0aW9uTWFwcGluZyIsImV4cG9ydHMiLCJmaWx0ZXJUb3BpY3MiLCJ0b3BpY3MiLCJmaWx0ZXJPcHRpb25zIiwiaXNMZWFybmluZ1BhdGgiLCJyaW5nIiwicXVhZHJhbnQiLCJzZWxlY3RlZFRvcGljcyIsInRvcGljIiwibWFya2Rvd25GaWxlUGF0aCIsImlkIiwicmVwbGFjZSIsInB1c2giLCJza2lsbFR5cGUiLCJzb3J0IiwiZmlyc3RJdGVtIiwic2Vjb25kSXRlbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/dist/filterTopics.js\n");

/***/ }),

/***/ "../shared/dist/index.js":
/*!*******************************!*\
  !*** ../shared/dist/index.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\n\nexports.__esModule = true; // types\n\n__exportStar(__webpack_require__(/*! ./types/AnyObject */ \"../shared/dist/types/AnyObject.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./types/CompetenceFrameworkSettings */ \"../shared/dist/types/CompetenceFrameworkSettings.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./types/CompetenceFrameworkValidationError */ \"../shared/dist/types/CompetenceFrameworkValidationError.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./types/SchemaValidationError */ \"../shared/dist/types/SchemaValidationError.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./types/CompetenceTeamSettings */ \"../shared/dist/types/CompetenceTeamSettings.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./types/CompetenceTeam */ \"../shared/dist/types/CompetenceTeam.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./types/PartialRecord */ \"../shared/dist/types/PartialRecord.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./types/Topic */ \"../shared/dist/types/Topic.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./types/FunctionLevel */ \"../shared/dist/types/FunctionLevel.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./types/SkillLevel */ \"../shared/dist/types/SkillLevel.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./types/SkillType */ \"../shared/dist/types/SkillType.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./types/Role */ \"../shared/dist/types/Role.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./types/Ring */ \"../shared/dist/types/Ring.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./types/Quadrant */ \"../shared/dist/types/Quadrant.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./types/MarkdownJsonResult */ \"../shared/dist/types/MarkdownJsonResult.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./types/MarkdownJsonApp */ \"../shared/dist/types/MarkdownJsonApp.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./types/MarkdownJsonData */ \"../shared/dist/types/MarkdownJsonData.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./types/MarkdownJsonDataExtended */ \"../shared/dist/types/MarkdownJsonDataExtended.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./types/MarkdownJsonDataMeta */ \"../shared/dist/types/MarkdownJsonDataMeta.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./types/RoleSkillFunctionMapping */ \"../shared/dist/types/RoleSkillFunctionMapping.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./types/MissingFileError */ \"../shared/dist/types/MissingFileError.js\"), exports); // settings\n\n\n__exportStar(__webpack_require__(/*! ./settings/getCompetenceFrameworkSettingsPath */ \"../shared/dist/settings/getCompetenceFrameworkSettingsPath.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./settings/getCompetenceTeamSettingsPath */ \"../shared/dist/settings/getCompetenceTeamSettingsPath.js\"), exports); // util\n\n\n__exportStar(__webpack_require__(/*! ./util/makeStringArray */ \"../shared/dist/util/makeStringArray.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./util/parseBool */ \"../shared/dist/util/parseBool.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./util/pascalCaseToSpaces */ \"../shared/dist/util/pascalCaseToSpaces.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./util/markdownPathToSubject */ \"../shared/dist/util/markdownPathToSubject.js\"), exports); // validate\n\n\n__exportStar(__webpack_require__(/*! ./validate/deprecated_validateTopics */ \"../shared/dist/validate/deprecated_validateTopics.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./validate/validateYaml */ \"../shared/dist/validate/validateYaml.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./validate/validateCompetenceFrameworkSettings */ \"../shared/dist/validate/validateCompetenceFrameworkSettings.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./validate/validateCompetenceTeamSettings */ \"../shared/dist/validate/validateCompetenceTeamSettings.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./validate/convertCompetenceFrameworkValidationErrorToErrorString */ \"../shared/dist/validate/convertCompetenceFrameworkValidationErrorToErrorString.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./validate/createWarningOrErrorString */ \"../shared/dist/validate/createWarningOrErrorString.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./validate/validatePageFrontmatter */ \"../shared/dist/validate/validatePageFrontmatter.js\"), exports); // ./src\n\n\n__exportStar(__webpack_require__(/*! ./constrains */ \"../shared/dist/constrains.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./filterTopics */ \"../shared/dist/filterTopics.js\"), exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2Rpc3QvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyQkFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLDREQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLGdHQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLDhHQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLG9GQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLHNGQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLHNFQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLG9FQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLG9EQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLG9FQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLDhEQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLDREQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLGtEQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLGtEQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLDBEQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLDhFQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLHdFQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLDBFQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLDBGQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLGtGQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLDBGQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLDBFQUFBQSxZLENBRUE7OztBQUNBQSxhQUFBQSxtQkFBQUEsQ0FBQUEsb0hBQUFBOztBQUNBQSxhQUFBQSxtQkFBQUEsQ0FBQUEsMEdBQUFBLFksQ0FFQTs7O0FBQ0FBLGFBQUFBLG1CQUFBQSxDQUFBQSxzRUFBQUE7O0FBQ0FBLGFBQUFBLG1CQUFBQSxDQUFBQSwwREFBQUE7O0FBQ0FBLGFBQUFBLG1CQUFBQSxDQUFBQSw0RUFBQUE7O0FBQ0FBLGFBQUFBLG1CQUFBQSxDQUFBQSxrRkFBQUEsWSxDQUVBOzs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLGtHQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLHdFQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLHNIQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLDRHQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLDRKQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLG9HQUFBQTs7QUFDQUEsYUFBQUEsbUJBQUFBLENBQUFBLDhGQUFBQSxZLENBRUE7OztBQUNBQSxhQUFBQSxtQkFBQUEsQ0FBQUEsa0RBQUFBOztBQUNBQSxhQUFBQSxtQkFBQUEsQ0FBQUEsc0RBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4uL3NyYy9pbmRleC50cz82ZjM3Il0sIm5hbWVzIjpbIl9fZXhwb3J0U3RhciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/dist/index.js\n");

/***/ }),

/***/ "../shared/dist/settings/getCompetenceFrameworkSettingsPath.js":
/*!*********************************************************************!*\
  !*** ../shared/dist/settings/getCompetenceFrameworkSettingsPath.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.getCompetenceFrameworkSettingsPath = void 0;\n\nvar getCompetenceFrameworkSettingsPath = function () {\n  return \"settings.md\";\n};\n\nexports.getCompetenceFrameworkSettingsPath = getCompetenceFrameworkSettingsPath;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2Rpc3Qvc2V0dGluZ3MvZ2V0Q29tcGV0ZW5jZUZyYW1ld29ya1NldHRpbmdzUGF0aC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLElBQU1BLGtDQUFrQyxHQUFHO0FBQU07QUFBYSxDQUE5RDs7QUFBTUMsMENBQUFBLEdBQWtDRCxrQ0FBbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vLi4vc3JjL3NldHRpbmdzL2dldENvbXBldGVuY2VGcmFtZXdvcmtTZXR0aW5nc1BhdGgudHM/Njk1MCJdLCJuYW1lcyI6WyJnZXRDb21wZXRlbmNlRnJhbWV3b3JrU2V0dGluZ3NQYXRoIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/dist/settings/getCompetenceFrameworkSettingsPath.js\n");

/***/ }),

/***/ "../shared/dist/settings/getCompetenceTeamSettingsPath.js":
/*!****************************************************************!*\
  !*** ../shared/dist/settings/getCompetenceTeamSettingsPath.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.getCompetenceTeamSettingsPath = void 0;\n\nvar getCompetenceTeamSettingsPath = function (competenceTeam) {\n  return \"Competence-Teams/\".concat(competenceTeam, \"/settings.md\");\n};\n\nexports.getCompetenceTeamSettingsPath = getCompetenceTeamSettingsPath;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2Rpc3Qvc2V0dGluZ3MvZ2V0Q29tcGV0ZW5jZVRlYW1TZXR0aW5nc1BhdGguanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxJQUFNQSw2QkFBNkIsR0FBRyxVQUFDQyxjQUFELEVBQXVCO0FBQ2hFLG9DQUFvQkEsY0FBcEIsRUFBa0MsY0FBbEM7QUFBZ0QsQ0FEN0M7O0FBQU1DLHFDQUFBQSxHQUE2QkYsNkJBQTdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4uLy4uL3NyYy9zZXR0aW5ncy9nZXRDb21wZXRlbmNlVGVhbVNldHRpbmdzUGF0aC50cz8yNDFlIl0sIm5hbWVzIjpbImdldENvbXBldGVuY2VUZWFtU2V0dGluZ3NQYXRoIiwiY29tcGV0ZW5jZVRlYW0iLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared/dist/settings/getCompetenceTeamSettingsPath.js\n");

/***/ }),

/***/ "../shared/dist/types/AnyObject.js":
/*!*****************************************!*\
  !*** ../shared/dist/types/AnyObject.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/CompetenceFrameworkSettings.js":
/*!***********************************************************!*\
  !*** ../shared/dist/types/CompetenceFrameworkSettings.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/CompetenceFrameworkValidationError.js":
/*!******************************************************************!*\
  !*** ../shared/dist/types/CompetenceFrameworkValidationError.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/CompetenceTeam.js":
/*!**********************************************!*\
  !*** ../shared/dist/types/CompetenceTeam.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/CompetenceTeamSettings.js":
/*!******************************************************!*\
  !*** ../shared/dist/types/CompetenceTeamSettings.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/FunctionLevel.js":
/*!*********************************************!*\
  !*** ../shared/dist/types/FunctionLevel.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/MarkdownJsonApp.js":
/*!***********************************************!*\
  !*** ../shared/dist/types/MarkdownJsonApp.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/MarkdownJsonData.js":
/*!************************************************!*\
  !*** ../shared/dist/types/MarkdownJsonData.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/MarkdownJsonDataExtended.js":
/*!********************************************************!*\
  !*** ../shared/dist/types/MarkdownJsonDataExtended.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/MarkdownJsonDataMeta.js":
/*!****************************************************!*\
  !*** ../shared/dist/types/MarkdownJsonDataMeta.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/MarkdownJsonResult.js":
/*!**************************************************!*\
  !*** ../shared/dist/types/MarkdownJsonResult.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/MissingFileError.js":
/*!************************************************!*\
  !*** ../shared/dist/types/MissingFileError.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/PartialRecord.js":
/*!*********************************************!*\
  !*** ../shared/dist/types/PartialRecord.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/Quadrant.js":
/*!****************************************!*\
  !*** ../shared/dist/types/Quadrant.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/Ring.js":
/*!************************************!*\
  !*** ../shared/dist/types/Ring.js ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/Role.js":
/*!************************************!*\
  !*** ../shared/dist/types/Role.js ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/RoleSkillFunctionMapping.js":
/*!********************************************************!*\
  !*** ../shared/dist/types/RoleSkillFunctionMapping.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/SchemaValidationError.js":
/*!*****************************************************!*\
  !*** ../shared/dist/types/SchemaValidationError.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/SkillLevel.js":
/*!******************************************!*\
  !*** ../shared/dist/types/SkillLevel.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/SkillType.js":
/*!*****************************************!*\
  !*** ../shared/dist/types/SkillType.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/Topic.js":
/*!*************************************!*\
  !*** ../shared/dist/types/Topic.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/util/makeStringArray.js":
/*!**********************************************!*\
  !*** ../shared/dist/util/makeStringArray.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.makeStringArray = void 0;\n\nfunction makeStringArray(val) {\n  if (typeof val === \"string\") {\n    return [val];\n  }\n\n  if (Array.isArray(val)) {\n    return val.map(function (x) {\n      return x.toString();\n    });\n  }\n\n  return [];\n}\n\nexports.makeStringArray = makeStringArray;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2Rpc3QvdXRpbC9tYWtlU3RyaW5nQXJyYXkuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxTQUFnQkEsZUFBaEIsQ0FBZ0NDLEdBQWhDLEVBQXNEO0FBQ2xELE1BQUksT0FBT0EsR0FBUCxLQUFlLFFBQW5CLEVBQTZCO0FBQ3pCLFdBQU8sQ0FBQ0EsR0FBRCxDQUFQO0FBQ0g7O0FBQ0QsTUFBSUMsS0FBSyxDQUFDQyxPQUFOLENBQWNGLEdBQWQsQ0FBSixFQUF3QjtBQUNwQixXQUFPQSxHQUFHLENBQUNHLEdBQUosQ0FBUSxVQUFDQyxDQUFELEVBQUU7QUFBSyxjQUFDLENBQUNDLFFBQUY7QUFBWSxLQUEzQixDQUFQO0FBQ0g7O0FBRUQsU0FBTyxFQUFQO0FBQ0g7O0FBVERDLHVCQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uLi8uLi9zcmMvdXRpbC9tYWtlU3RyaW5nQXJyYXkudHM/NGVmOSJdLCJuYW1lcyI6WyJtYWtlU3RyaW5nQXJyYXkiLCJ2YWwiLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJ4IiwidG9TdHJpbmciLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared/dist/util/makeStringArray.js\n");

/***/ }),

/***/ "../shared/dist/util/markdownPathToSubject.js":
/*!****************************************************!*\
  !*** ../shared/dist/util/markdownPathToSubject.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.markdownPathToSubject = void 0;\n\nfunction markdownPathToSubject(filepath) {\n  // remove leading slash, otherwise first part empty\n  if (filepath.startsWith(\"/\")) {\n    filepath = filepath.substring(1);\n  }\n\n  var pathParts = filepath.split(\"/\"); // *.md\n\n  if (pathParts.length == 1) {\n    if (pathParts[0] === \"settings\" || pathParts[0] === \"settings.md\") {\n      return {\n        path: filepath,\n        subject: \"CompetenceFrameworkSettings\",\n        competenceteam: \"\",\n        id: \"\"\n      };\n    } else {\n      return {\n        path: filepath,\n        subject: \"GeneralPage\",\n        competenceteam: \"\",\n        id: \"\"\n      };\n    }\n  } // Competence-Teams/**/*.md\n\n\n  if (pathParts[0] == \"Competence-Teams\") {\n    // Competence-Teams/*.md\n    if (pathParts.length == 2) {\n      return {\n        path: filepath,\n        subject: \"CompetenceTeamOverview\",\n        competenceteam: pathParts[1].replace(\".md\", \"\")\n      };\n    } // Competence-Teams/<CompetenceTeam>/*.md\n\n\n    if (pathParts.length == 3) {\n      if (pathParts[2] == \"roles\" || pathParts[2] == \"roles.md\") {\n        return {\n          path: filepath,\n          subject: \"RolesOverview\",\n          competenceteam: pathParts[1]\n        };\n      }\n\n      if (pathParts[2] == \"topics\" || pathParts[2] == \"topics.md\") {\n        return {\n          path: filepath,\n          subject: \"TopicsOverview\",\n          competenceteam: pathParts[1]\n        };\n      }\n\n      if (pathParts[2] == \"settings\" || pathParts[2] == \"settings.md\") {\n        return {\n          path: filepath,\n          subject: \"CompetenceTeamSettings\",\n          competenceteam: pathParts[1]\n        };\n      } // all other pages: not allowed\n\n\n      return null;\n    } // Competence-Teams/<CompetenceTeam>/topics/*.md\n\n\n    if (pathParts.length == 4 && pathParts[2] == \"topics\") {\n      return {\n        path: filepath,\n        subject: \"TopicCategoryOverview\",\n        competenceteam: pathParts[1]\n      };\n    } // Competence-Teams/<CompetenceTeam>/**/*.md\n\n\n    if (pathParts.length > 3) {\n      var competenceTeam = pathParts[1]; // Competence-Teams/<CompetenceTeam>/roles/*.md\n\n      if (pathParts[2] == \"roles\") {\n        return {\n          path: filepath,\n          subject: \"Role\",\n          competenceteam: competenceTeam,\n          id: pathParts[3].replace(\".md\", \"\")\n        };\n      } // Competence-Teams/<CompetenceTeam>/topics/**/*.md\n\n\n      if (pathParts[2] == \"topics\") {\n        return {\n          path: filepath,\n          subject: \"Topic\",\n          competenceteam: competenceTeam,\n          id: pathParts.slice(3).join(\"/\").replace(\".md\", \"\")\n        };\n      }\n    }\n  } // all other pages: not allowed\n\n\n  return null;\n}\n\nexports.markdownPathToSubject = markdownPathToSubject;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2Rpc3QvdXRpbC9tYXJrZG93blBhdGhUb1N1YmplY3QuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFrQkEsU0FBZ0JBLHFCQUFoQixDQUFzQ0MsUUFBdEMsRUFBc0Q7QUFDbEQ7QUFDQSxNQUFJQSxRQUFRLENBQUNDLFVBQVQsQ0FBb0IsR0FBcEIsQ0FBSixFQUE4QjtBQUMxQkQsWUFBUSxHQUFHQSxRQUFRLENBQUNFLFNBQVQsQ0FBbUIsQ0FBbkIsQ0FBWDtBQUNIOztBQUVELE1BQU1DLFNBQVMsR0FBR0gsUUFBUSxDQUFDSSxLQUFULENBQWUsR0FBZixDQUFsQixDQU5rRCxDQVFsRDs7QUFDQSxNQUFJRCxTQUFTLENBQUNFLE1BQVYsSUFBb0IsQ0FBeEIsRUFBMkI7QUFDdkIsUUFBSUYsU0FBUyxDQUFDLENBQUQsQ0FBVCxLQUFpQixVQUFqQixJQUErQkEsU0FBUyxDQUFDLENBQUQsQ0FBVCxLQUFpQixhQUFwRCxFQUFtRTtBQUMvRCxhQUFPO0FBQ0hHLFlBQUksRUFBRU4sUUFESDtBQUVITyxlQUFPLEVBQUUsNkJBRk47QUFHSEMsc0JBQWMsRUFBRSxFQUhiO0FBSUhDLFVBQUUsRUFBRTtBQUpELE9BQVA7QUFNSCxLQVBELE1BT087QUFDSCxhQUFPO0FBQ0hILFlBQUksRUFBRU4sUUFESDtBQUVITyxlQUFPLEVBQUUsYUFGTjtBQUdIQyxzQkFBYyxFQUFFLEVBSGI7QUFJSEMsVUFBRSxFQUFFO0FBSkQsT0FBUDtBQU1IO0FBQ0osR0F6QmlELENBMkJsRDs7O0FBQ0EsTUFBSU4sU0FBUyxDQUFDLENBQUQsQ0FBVCxJQUFnQixrQkFBcEIsRUFBd0M7QUFDcEM7QUFDQSxRQUFJQSxTQUFTLENBQUNFLE1BQVYsSUFBb0IsQ0FBeEIsRUFBMkI7QUFDdkIsYUFBTztBQUNIQyxZQUFJLEVBQUVOLFFBREg7QUFFSE8sZUFBTyxFQUFFLHdCQUZOO0FBR0hDLHNCQUFjLEVBQUVMLFNBQVMsQ0FBQyxDQUFELENBQVQsQ0FBYU8sT0FBYixDQUFxQixLQUFyQixFQUE0QixFQUE1QjtBQUhiLE9BQVA7QUFLSCxLQVJtQyxDQVVwQzs7O0FBQ0EsUUFBSVAsU0FBUyxDQUFDRSxNQUFWLElBQW9CLENBQXhCLEVBQTJCO0FBQ3ZCLFVBQUlGLFNBQVMsQ0FBQyxDQUFELENBQVQsSUFBZ0IsT0FBaEIsSUFBMkJBLFNBQVMsQ0FBQyxDQUFELENBQVQsSUFBZ0IsVUFBL0MsRUFBMkQ7QUFDdkQsZUFBTztBQUNIRyxjQUFJLEVBQUVOLFFBREg7QUFFSE8saUJBQU8sRUFBRSxlQUZOO0FBR0hDLHdCQUFjLEVBQUVMLFNBQVMsQ0FBQyxDQUFEO0FBSHRCLFNBQVA7QUFLSDs7QUFFRCxVQUFJQSxTQUFTLENBQUMsQ0FBRCxDQUFULElBQWdCLFFBQWhCLElBQTRCQSxTQUFTLENBQUMsQ0FBRCxDQUFULElBQWdCLFdBQWhELEVBQTZEO0FBQ3pELGVBQU87QUFDSEcsY0FBSSxFQUFFTixRQURIO0FBRUhPLGlCQUFPLEVBQUUsZ0JBRk47QUFHSEMsd0JBQWMsRUFBRUwsU0FBUyxDQUFDLENBQUQ7QUFIdEIsU0FBUDtBQUtIOztBQUVELFVBQUlBLFNBQVMsQ0FBQyxDQUFELENBQVQsSUFBZ0IsVUFBaEIsSUFBOEJBLFNBQVMsQ0FBQyxDQUFELENBQVQsSUFBZ0IsYUFBbEQsRUFBaUU7QUFDN0QsZUFBTztBQUNIRyxjQUFJLEVBQUVOLFFBREg7QUFFSE8saUJBQU8sRUFBRSx3QkFGTjtBQUdIQyx3QkFBYyxFQUFFTCxTQUFTLENBQUMsQ0FBRDtBQUh0QixTQUFQO0FBS0gsT0F2QnNCLENBeUJ2Qjs7O0FBQ0EsYUFBTyxJQUFQO0FBQ0gsS0F0Q21DLENBd0NwQzs7O0FBQ0EsUUFBSUEsU0FBUyxDQUFDRSxNQUFWLElBQW9CLENBQXBCLElBQXlCRixTQUFTLENBQUMsQ0FBRCxDQUFULElBQWdCLFFBQTdDLEVBQXVEO0FBQ25ELGFBQU87QUFDSEcsWUFBSSxFQUFFTixRQURIO0FBRUhPLGVBQU8sRUFBRSx1QkFGTjtBQUdIQyxzQkFBYyxFQUFFTCxTQUFTLENBQUMsQ0FBRDtBQUh0QixPQUFQO0FBS0gsS0EvQ21DLENBaURwQzs7O0FBQ0EsUUFBSUEsU0FBUyxDQUFDRSxNQUFWLEdBQW1CLENBQXZCLEVBQTBCO0FBQ3RCLFVBQU1NLGNBQWMsR0FBR1IsU0FBUyxDQUFDLENBQUQsQ0FBaEMsQ0FEc0IsQ0FHdEI7O0FBQ0EsVUFBSUEsU0FBUyxDQUFDLENBQUQsQ0FBVCxJQUFnQixPQUFwQixFQUE2QjtBQUN6QixlQUFPO0FBQ0hHLGNBQUksRUFBRU4sUUFESDtBQUVITyxpQkFBTyxFQUFFLE1BRk47QUFHSEMsd0JBQWMsRUFBRUcsY0FIYjtBQUlIRixZQUFFLEVBQUVOLFNBQVMsQ0FBQyxDQUFELENBQVQsQ0FBYU8sT0FBYixDQUFxQixLQUFyQixFQUE0QixFQUE1QjtBQUpELFNBQVA7QUFNSCxPQVhxQixDQWF0Qjs7O0FBQ0EsVUFBSVAsU0FBUyxDQUFDLENBQUQsQ0FBVCxJQUFnQixRQUFwQixFQUE4QjtBQUMxQixlQUFPO0FBQ0hHLGNBQUksRUFBRU4sUUFESDtBQUVITyxpQkFBTyxFQUFFLE9BRk47QUFHSEMsd0JBQWMsRUFBRUcsY0FIYjtBQUlIRixZQUFFLEVBQUVOLFNBQVMsQ0FBQ1MsS0FBVixDQUFnQixDQUFoQixFQUFtQkMsSUFBbkIsQ0FBd0IsR0FBeEIsRUFBNkJILE9BQTdCLENBQXFDLEtBQXJDLEVBQTRDLEVBQTVDO0FBSkQsU0FBUDtBQU1IO0FBQ0o7QUFDSixHQXJHaUQsQ0F1R2xEOzs7QUFDQSxTQUFPLElBQVA7QUFDSDs7QUF6R0RJLDZCQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uLi8uLi9zcmMvdXRpbC9tYXJrZG93blBhdGhUb1N1YmplY3QudHM/OTNiYiJdLCJuYW1lcyI6WyJtYXJrZG93blBhdGhUb1N1YmplY3QiLCJmaWxlcGF0aCIsInN0YXJ0c1dpdGgiLCJzdWJzdHJpbmciLCJwYXRoUGFydHMiLCJzcGxpdCIsImxlbmd0aCIsInBhdGgiLCJzdWJqZWN0IiwiY29tcGV0ZW5jZXRlYW0iLCJpZCIsInJlcGxhY2UiLCJjb21wZXRlbmNlVGVhbSIsInNsaWNlIiwiam9pbiIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/dist/util/markdownPathToSubject.js\n");

/***/ }),

/***/ "../shared/dist/util/parseBool.js":
/*!****************************************!*\
  !*** ../shared/dist/util/parseBool.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.parseBool = void 0;\n\nfunction parseBool(val) {\n  if (val === undefined) {\n    return undefined;\n  }\n\n  if (typeof val == \"boolean\") {\n    return val;\n  }\n\n  if (typeof val === \"string\" && (val.toLowerCase() === \"true\" || val.toLowerCase() === \"yes\") || val === 1) return true;else if (typeof val === \"string\" && (val.toLowerCase() === \"false\" || val.toLowerCase() === \"no\") || val === 0) return false;\n  return false;\n}\n\nexports.parseBool = parseBool;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2Rpc3QvdXRpbC9wYXJzZUJvb2wuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxTQUFnQkEsU0FBaEIsQ0FBMEJDLEdBQTFCLEVBQW9FO0FBQ2hFLE1BQUlBLEdBQUcsS0FBS0MsU0FBWixFQUF1QjtBQUNuQixXQUFPQSxTQUFQO0FBQ0g7O0FBRUQsTUFBSSxPQUFPRCxHQUFQLElBQWMsU0FBbEIsRUFBNkI7QUFDekIsV0FBT0EsR0FBUDtBQUNIOztBQUVELE1BQUssT0FBT0EsR0FBUCxLQUFlLFFBQWYsS0FBNEJBLEdBQUcsQ0FBQ0UsV0FBSixPQUFzQixNQUF0QixJQUFnQ0YsR0FBRyxDQUFDRSxXQUFKLE9BQXNCLEtBQWxGLENBQUQsSUFBOEZGLEdBQUcsS0FBSyxDQUExRyxFQUNJLE9BQU8sSUFBUCxDQURKLEtBRUssSUFBSyxPQUFPQSxHQUFQLEtBQWUsUUFBZixLQUE0QkEsR0FBRyxDQUFDRSxXQUFKLE9BQXNCLE9BQXRCLElBQWlDRixHQUFHLENBQUNFLFdBQUosT0FBc0IsSUFBbkYsQ0FBRCxJQUE4RkYsR0FBRyxLQUFLLENBQTFHLEVBQ0QsT0FBTyxLQUFQO0FBRUosU0FBTyxLQUFQO0FBQ0g7O0FBZkRHLGlCQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uLi8uLi9zcmMvdXRpbC9wYXJzZUJvb2wudHM/ZGJjZiJdLCJuYW1lcyI6WyJwYXJzZUJvb2wiLCJ2YWwiLCJ1bmRlZmluZWQiLCJ0b0xvd2VyQ2FzZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/dist/util/parseBool.js\n");

/***/ }),

/***/ "../shared/dist/util/pascalCaseToSpaces.js":
/*!*************************************************!*\
  !*** ../shared/dist/util/pascalCaseToSpaces.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.pascalCaseToSpaces = void 0;\n\nfunction pascalCaseToSpaces(str) {\n  return str.replace(/([a-z])([A-Z])/g, \"$1 $2\").replace(/([a-zA-Z])([0-9])/g, \"$1 $2\").replace(/([0-9])([a-zA-Z])/g, \"$1 $2\");\n}\n\nexports.pascalCaseToSpaces = pascalCaseToSpaces;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2Rpc3QvdXRpbC9wYXNjYWxDYXNlVG9TcGFjZXMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxTQUFnQkEsa0JBQWhCLENBQW1DQyxHQUFuQyxFQUE4QztBQUMxQyxTQUFPQSxHQUFHLENBQ0xDLE9BREUsQ0FDTSxpQkFETixFQUN5QixPQUR6QixFQUVGQSxPQUZFLENBRU0sb0JBRk4sRUFFNEIsT0FGNUIsRUFHRkEsT0FIRSxDQUdNLG9CQUhOLEVBRzRCLE9BSDVCLENBQVA7QUFJSDs7QUFMREMsMEJBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4uLy4uL3NyYy91dGlsL3Bhc2NhbENhc2VUb1NwYWNlcy50cz8yN2YzIl0sIm5hbWVzIjpbInBhc2NhbENhc2VUb1NwYWNlcyIsInN0ciIsInJlcGxhY2UiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared/dist/util/pascalCaseToSpaces.js\n");

/***/ }),

/***/ "../shared/dist/validate/convertCompetenceFrameworkValidationErrorToErrorString.js":
/*!*****************************************************************************************!*\
  !*** ../shared/dist/validate/convertCompetenceFrameworkValidationErrorToErrorString.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.convertCompetenceFrameworkValidationErrorToErrorString = void 0;\n\nvar createWarningOrErrorString_1 = __webpack_require__(/*! ./createWarningOrErrorString */ \"../shared/dist/validate/createWarningOrErrorString.js\");\n\nfunction convertCompetenceFrameworkValidationErrorToErrorString(error) {\n  switch (error.errorType) {\n    case \"JSONError\":\n      {\n        var jsonError = error;\n        return (0, createWarningOrErrorString_1.createErrorString)(jsonError.message, \"JSONError\", jsonError.path);\n      }\n\n    case \"YAMLError\":\n      {\n        var yamlError = error;\n        console.log(\"YAMLError\", yamlError);\n\n        if (yamlError.mark) {\n          return (0, createWarningOrErrorString_1.createErrorString)(\"\".concat(yamlError.message), \"YAMLError\", yamlError.mark.name, yamlError.mark.line, yamlError.mark.column);\n        } else {\n          return (0, createWarningOrErrorString_1.createErrorString)(\"\".concat(yamlError.message), \"YAMLError\");\n        } // return createErrorString(`${yamlError.message}\\n${yamlError.mark.snippet}`, \"YAMLError\", yamlError.mark.name, yamlError.mark.line, yamlError.mark.column);\n\n      }\n\n    case \"SchemaValidationError\":\n      {\n        var validationError = error;\n        return (0, createWarningOrErrorString_1.createErrorString)(validationError.message, \"SchemaValidationError\", validationError.filepath);\n      }\n\n    case \"MissingFileError\":\n      {\n        var missingFileError = error;\n        return (0, createWarningOrErrorString_1.createErrorString)(missingFileError.message, \"MissingFileError\", missingFileError.filepath);\n      }\n\n    default:\n      return (0, createWarningOrErrorString_1.createErrorString)(error.message, \"UnknownError\");\n  }\n}\n\nexports.convertCompetenceFrameworkValidationErrorToErrorString = convertCompetenceFrameworkValidationErrorToErrorString;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2Rpc3QvdmFsaWRhdGUvY29udmVydENvbXBldGVuY2VGcmFtZXdvcmtWYWxpZGF0aW9uRXJyb3JUb0Vycm9yU3RyaW5nLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBRUE7O0FBS0EsU0FBZ0JBLHNEQUFoQixDQUNJQyxLQURKLEVBQzZDO0FBRXpDLFVBQVFBLEtBQUssQ0FBQ0MsU0FBZDtBQUNJLFNBQUssV0FBTDtBQUFrQjtBQUNkLFlBQU1DLFNBQVMsR0FBR0YsS0FBbEI7QUFDQSxlQUFPLG9EQUFrQkUsU0FBUyxDQUFDQyxPQUE1QixFQUFxQyxXQUFyQyxFQUFrREQsU0FBUyxDQUFDRSxJQUE1RCxDQUFQO0FBQ0g7O0FBQ0QsU0FBSyxXQUFMO0FBQWtCO0FBQ2QsWUFBTUMsU0FBUyxHQUFHTCxLQUFsQjtBQUNBTSxlQUFPLENBQUNDLEdBQVIsQ0FBWSxXQUFaLEVBQXlCRixTQUF6Qjs7QUFDQSxZQUFJQSxTQUFTLENBQUNHLElBQWQsRUFBb0I7QUFDaEIsaUJBQU8sb0RBQWtCLFVBQUdILFNBQVMsQ0FBQ0YsT0FBYixDQUFsQixFQUEwQyxXQUExQyxFQUF1REUsU0FBUyxDQUFDRyxJQUFWLENBQWVDLElBQXRFLEVBQTRFSixTQUFTLENBQUNHLElBQVYsQ0FBZUUsSUFBM0YsRUFBaUdMLFNBQVMsQ0FBQ0csSUFBVixDQUFlRyxNQUFoSCxDQUFQO0FBQ0gsU0FGRCxNQUVPO0FBQ0gsaUJBQU8sb0RBQWtCLFVBQUdOLFNBQVMsQ0FBQ0YsT0FBYixDQUFsQixFQUEwQyxXQUExQyxDQUFQO0FBQ0gsU0FQYSxDQVFkOztBQUNIOztBQUNELFNBQUssdUJBQUw7QUFBOEI7QUFDMUIsWUFBTVMsZUFBZSxHQUFHWixLQUF4QjtBQUNBLGVBQU8sb0RBQWtCWSxlQUFlLENBQUNULE9BQWxDLEVBQTJDLHVCQUEzQyxFQUFvRVMsZUFBZSxDQUFDQyxRQUFwRixDQUFQO0FBQ0g7O0FBQ0QsU0FBSyxrQkFBTDtBQUF5QjtBQUNyQixZQUFNQyxnQkFBZ0IsR0FBR2QsS0FBekI7QUFDQSxlQUFPLG9EQUFrQmMsZ0JBQWdCLENBQUNYLE9BQW5DLEVBQTRDLGtCQUE1QyxFQUFnRVcsZ0JBQWdCLENBQUNELFFBQWpGLENBQVA7QUFDSDs7QUFDRDtBQUNJLGFBQU8sb0RBQW1CYixLQUEwQixDQUFDRyxPQUE5QyxFQUF1RCxjQUF2RCxDQUFQO0FBeEJSO0FBMEJIOztBQTdCRFksOERBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4uLy4uL3NyYy92YWxpZGF0ZS9jb252ZXJ0Q29tcGV0ZW5jZUZyYW1ld29ya1ZhbGlkYXRpb25FcnJvclRvRXJyb3JTdHJpbmcudHM/NWM4MiJdLCJuYW1lcyI6WyJjb252ZXJ0Q29tcGV0ZW5jZUZyYW1ld29ya1ZhbGlkYXRpb25FcnJvclRvRXJyb3JTdHJpbmciLCJlcnJvciIsImVycm9yVHlwZSIsImpzb25FcnJvciIsIm1lc3NhZ2UiLCJwYXRoIiwieWFtbEVycm9yIiwiY29uc29sZSIsImxvZyIsIm1hcmsiLCJuYW1lIiwibGluZSIsImNvbHVtbiIsInZhbGlkYXRpb25FcnJvciIsImZpbGVwYXRoIiwibWlzc2luZ0ZpbGVFcnJvciIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/dist/validate/convertCompetenceFrameworkValidationErrorToErrorString.js\n");

/***/ }),

/***/ "../shared/dist/validate/createWarningOrErrorString.js":
/*!*************************************************************!*\
  !*** ../shared/dist/validate/createWarningOrErrorString.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval(" // import chalk from \"chalk\"; // use version 4 for TypeScript, until TypeScript 4.6 is available\n\nexports.__esModule = true;\nexports.createWarningString = exports.createErrorString = void 0;\nvar errorLastFilepath;\nvar errorColumnAddCount = 0;\nvar warningLastFilepath;\nvar warningColumnAddCount = 0;\n\nfunction createErrorString(message, errorType, filepath, line, column) {\n  if (filepath === void 0) {\n    filepath = \"\";\n  }\n\n  if (line === void 0) {\n    line = 1;\n  }\n\n  if (column === void 0) {\n    column = 1;\n  } // reporting on same filepath, same line, same column skips line in VSCode \"Problems\" pane - increment column\n\n\n  if (errorLastFilepath === filepath && line === 1 && column === 1) {\n    errorColumnAddCount = errorColumnAddCount + 1;\n    column = column + errorColumnAddCount;\n  } else {\n    // reset;\n    errorColumnAddCount = 0;\n  }\n\n  errorLastFilepath = filepath;\n  var filepathString = filepath === \"\" ? \"<nofile>\" : filepath; // const errorMessage = `${chalk.bgRed(\"ERROR\")}: ${filepathString}(${line},${column}): ${errorType} - ${message}`;\n\n  var errorMessage = \"ERROR: \".concat(filepathString, \"(\").concat(line, \",\").concat(column, \"): \").concat(errorType, \" - \").concat(message);\n  return errorMessage;\n}\n\nexports.createErrorString = createErrorString;\n\nfunction createWarningString(message, errorType, filepath, line, column) {\n  if (filepath === void 0) {\n    filepath = \"\";\n  }\n\n  if (line === void 0) {\n    line = 1;\n  }\n\n  if (column === void 0) {\n    column = 1;\n  } // reporting on same filepath, same line, same column skips line in VSCode \"Problems\" pane - increment column\n\n\n  if (warningLastFilepath === filepath && line === 1 && column === 1) {\n    warningColumnAddCount = warningColumnAddCount + 1;\n    column = column + warningColumnAddCount;\n  } else {\n    // reset;\n    warningColumnAddCount = 0;\n  }\n\n  warningLastFilepath = filepath;\n  var filepathString = filepath === \"\" ? \"<nofile>\" : filepath; // const warningMessage = `${chalk.bgYellow(\"WARNING\")}: ${filepathString}(${line},${column}): ${errorType} - ${message}`;\n\n  var warningMessage = \"WARNING: \".concat(filepathString, \"(\").concat(line, \",\").concat(column, \"): \").concat(errorType, \" - \").concat(message);\n  return warningMessage;\n}\n\nexports.createWarningString = createWarningString;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2Rpc3QvdmFsaWRhdGUvY3JlYXRlV2FybmluZ09yRXJyb3JTdHJpbmcuanMuanMiLCJtYXBwaW5ncyI6IkNBQUE7Ozs7QUFFQSxJQUFJQSxpQkFBSjtBQUNBLElBQUlDLG1CQUFtQixHQUFHLENBQTFCO0FBQ0EsSUFBSUMsbUJBQUo7QUFDQSxJQUFJQyxxQkFBcUIsR0FBRyxDQUE1Qjs7QUFDQSxTQUFnQkMsaUJBQWhCLENBQWtDQyxPQUFsQyxFQUFtREMsU0FBbkQsRUFBc0VDLFFBQXRFLEVBQXFGQyxJQUFyRixFQUErRkMsTUFBL0YsRUFBeUc7QUFBbkM7QUFBQUY7QUFBYTs7QUFBRTtBQUFBQztBQUFROztBQUFFO0FBQUFDO0FBQVUsSUFDckc7OztBQUNBLE1BQUlULGlCQUFpQixLQUFLTyxRQUF0QixJQUFrQ0MsSUFBSSxLQUFLLENBQTNDLElBQWdEQyxNQUFNLEtBQUssQ0FBL0QsRUFBa0U7QUFDOURSLHVCQUFtQixHQUFHQSxtQkFBbUIsR0FBRyxDQUE1QztBQUNBUSxVQUFNLEdBQUdBLE1BQU0sR0FBR1IsbUJBQWxCO0FBQ0gsR0FIRCxNQUdPO0FBQUU7QUFDTEEsdUJBQW1CLEdBQUcsQ0FBdEI7QUFDSDs7QUFDREQsbUJBQWlCLEdBQUdPLFFBQXBCO0FBRUEsTUFBTUcsY0FBYyxHQUFHSCxRQUFRLEtBQUssRUFBYixHQUFrQixVQUFsQixHQUErQkEsUUFBdEQsQ0FWcUcsQ0FXckc7O0FBQ0EsTUFBTUksWUFBWSxHQUFHLGlCQUFVRCxjQUFWLEVBQXdCLEdBQXhCLEVBQXdCRSxNQUF4QixDQUE0QkosSUFBNUIsRUFBZ0MsR0FBaEMsRUFBZ0NJLE1BQWhDLENBQW9DSCxNQUFwQyxFQUEwQyxLQUExQyxFQUEwQ0csTUFBMUMsQ0FBZ0ROLFNBQWhELEVBQXlELEtBQXpELEVBQXlETSxNQUF6RCxDQUErRFAsT0FBL0QsQ0FBckI7QUFDQSxTQUFPTSxZQUFQO0FBQ0g7O0FBZERFLHlCQUFBQTs7QUFnQkEsU0FBZ0JDLG1CQUFoQixDQUFvQ1QsT0FBcEMsRUFBcURDLFNBQXJELEVBQXdFQyxRQUF4RSxFQUF1RkMsSUFBdkYsRUFBaUdDLE1BQWpHLEVBQTJHO0FBQW5DO0FBQUFGO0FBQWE7O0FBQUU7QUFBQUM7QUFBUTs7QUFBRTtBQUFBQztBQUFVLElBQ3ZHOzs7QUFDQSxNQUFJUCxtQkFBbUIsS0FBS0ssUUFBeEIsSUFBb0NDLElBQUksS0FBSyxDQUE3QyxJQUFrREMsTUFBTSxLQUFLLENBQWpFLEVBQW9FO0FBQ2hFTix5QkFBcUIsR0FBR0EscUJBQXFCLEdBQUcsQ0FBaEQ7QUFDQU0sVUFBTSxHQUFHQSxNQUFNLEdBQUdOLHFCQUFsQjtBQUNILEdBSEQsTUFHTztBQUFFO0FBQ0xBLHlCQUFxQixHQUFHLENBQXhCO0FBQ0g7O0FBQ0RELHFCQUFtQixHQUFHSyxRQUF0QjtBQUVBLE1BQU1HLGNBQWMsR0FBR0gsUUFBUSxLQUFLLEVBQWIsR0FBa0IsVUFBbEIsR0FBK0JBLFFBQXRELENBVnVHLENBV3ZHOztBQUNBLE1BQU1RLGNBQWMsR0FBRyxtQkFBWUwsY0FBWixFQUEwQixHQUExQixFQUEwQkUsTUFBMUIsQ0FBOEJKLElBQTlCLEVBQWtDLEdBQWxDLEVBQWtDSSxNQUFsQyxDQUFzQ0gsTUFBdEMsRUFBNEMsS0FBNUMsRUFBNENHLE1BQTVDLENBQWtETixTQUFsRCxFQUEyRCxLQUEzRCxFQUEyRE0sTUFBM0QsQ0FBaUVQLE9BQWpFLENBQXZCO0FBQ0EsU0FBT1UsY0FBUDtBQUNIOztBQWRERiwyQkFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vLi4vc3JjL3ZhbGlkYXRlL2NyZWF0ZVdhcm5pbmdPckVycm9yU3RyaW5nLnRzPzVhYWMiXSwibmFtZXMiOlsiZXJyb3JMYXN0RmlsZXBhdGgiLCJlcnJvckNvbHVtbkFkZENvdW50Iiwid2FybmluZ0xhc3RGaWxlcGF0aCIsIndhcm5pbmdDb2x1bW5BZGRDb3VudCIsImNyZWF0ZUVycm9yU3RyaW5nIiwibWVzc2FnZSIsImVycm9yVHlwZSIsImZpbGVwYXRoIiwibGluZSIsImNvbHVtbiIsImZpbGVwYXRoU3RyaW5nIiwiZXJyb3JNZXNzYWdlIiwiY29uY2F0IiwiZXhwb3J0cyIsImNyZWF0ZVdhcm5pbmdTdHJpbmciLCJ3YXJuaW5nTWVzc2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/dist/validate/createWarningOrErrorString.js\n");

/***/ }),

/***/ "../shared/dist/validate/deprecated_validateTopics.js":
/*!************************************************************!*\
  !*** ../shared/dist/validate/deprecated_validateTopics.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.deprecated_validateTopics = void 0;\n\nvar constrains_1 = __webpack_require__(/*! ../constrains */ \"../shared/dist/constrains.js\");\n\nvar parseBool_1 = __webpack_require__(/*! ../util/parseBool */ \"../shared/dist/util/parseBool.js\");\n\nfunction deprecated_validateTopics(topics) {\n  if (!topics) {\n    return {\n      error: true,\n      errorMessages: \"No topics to validate.\"\n    };\n  }\n\n  var error = false;\n  var errorMessages = \"\";\n  topics.map(function (topic) {\n    if (!topic.internal) {\n      var _a = validateTopic(topic),\n          topicError = _a.error,\n          topicErrorMessages = _a.errorMessages;\n\n      if (topicError) {\n        error = true;\n        errorMessages += topicErrorMessages;\n      }\n    }\n  });\n  return {\n    error: error,\n    errorMessages: errorMessages\n  };\n}\n\nexports.deprecated_validateTopics = deprecated_validateTopics;\n\nfunction validateTopic(topic) {\n  var error = false;\n  var errorMessages = \"\";\n\n  var recordError = function (property, errorMessage) {\n    error = true;\n    errorMessages += \"\".concat(topic.markdownFilePath, \", \").concat(property, \": \").concat(errorMessage, \"\\n\");\n  };\n\n  if (!topic.name) recordError(\"name\", \"missing\");\n\n  if (!topic.skillType) {\n    recordError(\"skillType\", \"missing\");\n  } else {\n    if (!constrains_1.skillTypeValuesConstraints.includes(topic.skillType)) recordError(\"skillType\", \"expected one of the values: \".concat(constrains_1.skillTypeValuesConstraints.toString()));\n  }\n\n  if ((0, parseBool_1.parseBool)(topic.isLearningPath) === null) recordError(\"isLearningPath\", \"missing, or not 'true' or 'false'\");\n  if (!topic.excerpt) recordError(\"excerpt\", \"missing\");\n\n  if ((0, parseBool_1.parseBool)(topic.showOnRadar) === null) {\n    recordError(\"showOnRadar\", \"missing, or not 'true' or 'false'\");\n  } else {\n    if (topic.showOnRadar) {\n      if (!topic.ring) {\n        recordError(\"ring\", \"missing, mandatory if showOnRadar is true\");\n      } else {\n        if (!constrains_1.ringValuesConstraints.includes(topic.ring)) recordError(\"ring\", \"expected one of the values: \".concat(constrains_1.ringValuesConstraints.toString()));\n      }\n\n      if (!topic.quadrant) {\n        recordError(\"quadrant\", \"missing, mandatory if showOnRadar is true\");\n      } else {\n        if (!constrains_1.quadrantValuesConstraints.includes(topic.quadrant)) recordError(\"quadrant\", \"expected one of the values: \".concat(constrains_1.quadrantValuesConstraints.toString()));\n      }\n\n      if ((0, parseBool_1.parseBool)(topic.isNew) === null) recordError(\"isNew\", \"missing, or not 'true' or 'false'\");\n    }\n  }\n\n  return {\n    error: error,\n    errorMessages: errorMessages\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2Rpc3QvdmFsaWRhdGUvZGVwcmVjYXRlZF92YWxpZGF0ZVRvcGljcy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOztBQUVBOztBQUVBLFNBQWdCQSx5QkFBaEIsQ0FBMENDLE1BQTFDLEVBQXlEO0FBQ3JELE1BQUksQ0FBQ0EsTUFBTCxFQUFhO0FBQ1QsV0FBTztBQUFFQyxXQUFLLEVBQUUsSUFBVDtBQUFlQyxtQkFBYSxFQUFFO0FBQTlCLEtBQVA7QUFDSDs7QUFFRCxNQUFJRCxLQUFLLEdBQUcsS0FBWjtBQUNBLE1BQUlDLGFBQWEsR0FBRyxFQUFwQjtBQUNBRixRQUFNLENBQUNHLEdBQVAsQ0FBVyxVQUFDQyxLQUFELEVBQU07QUFDYixRQUFJLENBQUNBLEtBQUssQ0FBQ0MsUUFBWCxFQUFxQjtBQUNYLGVBQTJEQyxhQUFhLENBQUNGLEtBQUQsQ0FBeEU7QUFBQSxVQUFTRyxVQUFVLFdBQW5CO0FBQUEsVUFBb0NDLGtCQUFrQixtQkFBdEQ7O0FBQ04sVUFBSUQsVUFBSixFQUFnQjtBQUNaTixhQUFLLEdBQUcsSUFBUjtBQUNBQyxxQkFBYSxJQUFJTSxrQkFBakI7QUFDSDtBQUNKO0FBQ0osR0FSRDtBQVVBLFNBQU87QUFBRVAsU0FBSyxPQUFQO0FBQVNDLGlCQUFhO0FBQXRCLEdBQVA7QUFDSDs7QUFsQkRPLGlDQUFBQTs7QUFvQkEsU0FBU0gsYUFBVCxDQUF1QkYsS0FBdkIsRUFBbUM7QUFDL0IsTUFBSUgsS0FBSyxHQUFHLEtBQVo7QUFDQSxNQUFJQyxhQUFhLEdBQUcsRUFBcEI7O0FBRUEsTUFBTVEsV0FBVyxHQUFHLFVBQUNDLFFBQUQsRUFBbUJDLFlBQW5CLEVBQXVDO0FBQ3ZEWCxTQUFLLEdBQUcsSUFBUjtBQUNBQyxpQkFBYSxJQUFJLFVBQUdFLEtBQUssQ0FBQ1MsZ0JBQVQsRUFBeUIsSUFBekIsRUFBeUJDLE1BQXpCLENBQThCSCxRQUE5QixFQUFzQyxJQUF0QyxFQUFzQ0csTUFBdEMsQ0FBMkNGLFlBQTNDLEVBQXVELElBQXZELENBQWpCO0FBQ0gsR0FIRDs7QUFLQSxNQUFJLENBQUNSLEtBQUssQ0FBQ1csSUFBWCxFQUFpQkwsV0FBVyxDQUFDLE1BQUQsRUFBUyxTQUFULENBQVg7O0FBQ2pCLE1BQUksQ0FBQ04sS0FBSyxDQUFDWSxTQUFYLEVBQXNCO0FBQ2xCTixlQUFXLENBQUMsV0FBRCxFQUFjLFNBQWQsQ0FBWDtBQUNILEdBRkQsTUFFTztBQUNILFFBQUksQ0FBQ08sd0NBQTJCQyxRQUEzQixDQUFvQ2QsS0FBSyxDQUFDWSxTQUExQyxDQUFMLEVBQ0lOLFdBQVcsQ0FBQyxXQUFELEVBQWMsc0NBQStCTyx3Q0FBMkJFLFFBQTNCLEVBQS9CLENBQWQsQ0FBWDtBQUNQOztBQUNELE1BQUksMkJBQVVmLEtBQUssQ0FBQ2dCLGNBQWhCLE1BQW9DLElBQXhDLEVBQThDVixXQUFXLENBQUMsZ0JBQUQsRUFBbUIsbUNBQW5CLENBQVg7QUFDOUMsTUFBSSxDQUFDTixLQUFLLENBQUNpQixPQUFYLEVBQW9CWCxXQUFXLENBQUMsU0FBRCxFQUFZLFNBQVosQ0FBWDs7QUFFcEIsTUFBSSwyQkFBVU4sS0FBSyxDQUFDa0IsV0FBaEIsTUFBaUMsSUFBckMsRUFBMkM7QUFDdkNaLGVBQVcsQ0FBQyxhQUFELEVBQWdCLG1DQUFoQixDQUFYO0FBQ0gsR0FGRCxNQUVPO0FBQ0gsUUFBSU4sS0FBSyxDQUFDa0IsV0FBVixFQUF1QjtBQUNuQixVQUFJLENBQUNsQixLQUFLLENBQUNtQixJQUFYLEVBQWlCO0FBQ2JiLG1CQUFXLENBQUMsTUFBRCxFQUFTLDJDQUFULENBQVg7QUFDSCxPQUZELE1BRU87QUFDSCxZQUFJLENBQUNPLG1DQUFzQkMsUUFBdEIsQ0FBK0JkLEtBQUssQ0FBQ21CLElBQXJDLENBQUwsRUFDSWIsV0FBVyxDQUFDLE1BQUQsRUFBUyxzQ0FBK0JPLG1DQUFzQkUsUUFBdEIsRUFBL0IsQ0FBVCxDQUFYO0FBQ1A7O0FBQ0QsVUFBSSxDQUFDZixLQUFLLENBQUNvQixRQUFYLEVBQXFCO0FBQ2pCZCxtQkFBVyxDQUFDLFVBQUQsRUFBYSwyQ0FBYixDQUFYO0FBQ0gsT0FGRCxNQUVPO0FBQ0gsWUFBSSxDQUFDTyx1Q0FBMEJDLFFBQTFCLENBQW1DZCxLQUFLLENBQUNvQixRQUF6QyxDQUFMLEVBQ0lkLFdBQVcsQ0FBQyxVQUFELEVBQWEsc0NBQStCTyx1Q0FBMEJFLFFBQTFCLEVBQS9CLENBQWIsQ0FBWDtBQUNQOztBQUNELFVBQUksMkJBQVVmLEtBQUssQ0FBQ3FCLEtBQWhCLE1BQTJCLElBQS9CLEVBQXFDZixXQUFXLENBQUMsT0FBRCxFQUFVLG1DQUFWLENBQVg7QUFDeEM7QUFDSjs7QUFFRCxTQUFPO0FBQUVULFNBQUssT0FBUDtBQUFTQyxpQkFBYTtBQUF0QixHQUFQO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vLi4vc3JjL3ZhbGlkYXRlL2RlcHJlY2F0ZWRfdmFsaWRhdGVUb3BpY3MudHM/MmYxYiJdLCJuYW1lcyI6WyJkZXByZWNhdGVkX3ZhbGlkYXRlVG9waWNzIiwidG9waWNzIiwiZXJyb3IiLCJlcnJvck1lc3NhZ2VzIiwibWFwIiwidG9waWMiLCJpbnRlcm5hbCIsInZhbGlkYXRlVG9waWMiLCJ0b3BpY0Vycm9yIiwidG9waWNFcnJvck1lc3NhZ2VzIiwiZXhwb3J0cyIsInJlY29yZEVycm9yIiwicHJvcGVydHkiLCJlcnJvck1lc3NhZ2UiLCJtYXJrZG93bkZpbGVQYXRoIiwiY29uY2F0IiwibmFtZSIsInNraWxsVHlwZSIsImNvbnN0cmFpbnNfMSIsImluY2x1ZGVzIiwidG9TdHJpbmciLCJpc0xlYXJuaW5nUGF0aCIsImV4Y2VycHQiLCJzaG93T25SYWRhciIsInJpbmciLCJxdWFkcmFudCIsImlzTmV3Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared/dist/validate/deprecated_validateTopics.js\n");

/***/ }),

/***/ "../shared/dist/validate/getSchemaForCompetenceFrameworkSettings.js":
/*!**************************************************************************!*\
  !*** ../shared/dist/validate/getSchemaForCompetenceFrameworkSettings.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nexports.__esModule = true;\nexports.getSchemaForCompetenceFrameworkSettings = void 0;\n\nvar validate_1 = __importDefault(__webpack_require__(/*! validate */ \"../shared/node_modules/validate/build/schema.js\"));\n/**\r\n * Get the schema for validating competence framework settings.\r\n *\r\n * @returns Schema for competence framework settings\r\n *\r\n */\n\n\nfunction getSchemaForCompetenceFrameworkSettings() {\n  return new validate_1[\"default\"]({\n    skillType: [{\n      frontmatterName: {\n        type: \"string\",\n        required: true\n      },\n      folderName: {\n        type: \"string\",\n        required: true\n      }\n    }],\n    ring: [{\n      type: \"string\",\n      required: true\n    }],\n    quadrant: [{\n      type: \"string\",\n      required: true\n    }],\n    fork: [{\n      name: {\n        type: \"string\",\n        required: true\n      },\n      locationGitFork: {\n        type: \"string\",\n        required: true\n      },\n      locationWikiFork: {\n        type: \"string\",\n        required: true\n      }\n    }]\n  });\n}\n\nexports.getSchemaForCompetenceFrameworkSettings = getSchemaForCompetenceFrameworkSettings;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2Rpc3QvdmFsaWRhdGUvZ2V0U2NoZW1hRm9yQ29tcGV0ZW5jZUZyYW1ld29ya1NldHRpbmdzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFFQTs7Ozs7Ozs7QUFNQSxTQUFnQkEsdUNBQWhCLEdBQXVEO0FBQ25ELFNBQU8sSUFBSUMscUJBQUosQ0FBVztBQUNkQyxhQUFTLEVBQUUsQ0FDUDtBQUNJQyxxQkFBZSxFQUFFO0FBQUVDLFlBQUksRUFBRSxRQUFSO0FBQWtCQyxnQkFBUSxFQUFFO0FBQTVCLE9BRHJCO0FBRUlDLGdCQUFVLEVBQUU7QUFBRUYsWUFBSSxFQUFFLFFBQVI7QUFBa0JDLGdCQUFRLEVBQUU7QUFBNUI7QUFGaEIsS0FETyxDQURHO0FBT2RFLFFBQUksRUFBRSxDQUFDO0FBQUVILFVBQUksRUFBRSxRQUFSO0FBQWtCQyxjQUFRLEVBQUU7QUFBNUIsS0FBRCxDQVBRO0FBUWRHLFlBQVEsRUFBRSxDQUFDO0FBQUVKLFVBQUksRUFBRSxRQUFSO0FBQWtCQyxjQUFRLEVBQUU7QUFBNUIsS0FBRCxDQVJJO0FBU2RJLFFBQUksRUFBRSxDQUNGO0FBQ0lDLFVBQUksRUFBRTtBQUFFTixZQUFJLEVBQUUsUUFBUjtBQUFrQkMsZ0JBQVEsRUFBRTtBQUE1QixPQURWO0FBRUlNLHFCQUFlLEVBQUU7QUFBRVAsWUFBSSxFQUFFLFFBQVI7QUFBa0JDLGdCQUFRLEVBQUU7QUFBNUIsT0FGckI7QUFHSU8sc0JBQWdCLEVBQUU7QUFBRVIsWUFBSSxFQUFFLFFBQVI7QUFBa0JDLGdCQUFRLEVBQUU7QUFBNUI7QUFIdEIsS0FERTtBQVRRLEdBQVgsQ0FBUDtBQWlCSDs7QUFsQkRRLCtDQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uLi8uLi9zcmMvdmFsaWRhdGUvZ2V0U2NoZW1hRm9yQ29tcGV0ZW5jZUZyYW1ld29ya1NldHRpbmdzLnRzP2JkNTUiXSwibmFtZXMiOlsiZ2V0U2NoZW1hRm9yQ29tcGV0ZW5jZUZyYW1ld29ya1NldHRpbmdzIiwidmFsaWRhdGVfMSIsInNraWxsVHlwZSIsImZyb250bWF0dGVyTmFtZSIsInR5cGUiLCJyZXF1aXJlZCIsImZvbGRlck5hbWUiLCJyaW5nIiwicXVhZHJhbnQiLCJmb3JrIiwibmFtZSIsImxvY2F0aW9uR2l0Rm9yayIsImxvY2F0aW9uV2lraUZvcmsiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared/dist/validate/getSchemaForCompetenceFrameworkSettings.js\n");

/***/ }),

/***/ "../shared/dist/validate/getSchemaForCompetenceTeamPages.js":
/*!******************************************************************!*\
  !*** ../shared/dist/validate/getSchemaForCompetenceTeamPages.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nexports.__esModule = true;\nexports.getSchemaForCompetenceTeamPages = void 0;\n\nvar validate_1 = __importDefault(__webpack_require__(/*! validate */ \"../shared/node_modules/validate/build/schema.js\"));\n\nfunction getSchemaForCompetenceTeamPages() {\n  return new validate_1[\"default\"]({});\n}\n\nexports.getSchemaForCompetenceTeamPages = getSchemaForCompetenceTeamPages;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2Rpc3QvdmFsaWRhdGUvZ2V0U2NoZW1hRm9yQ29tcGV0ZW5jZVRlYW1QYWdlcy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUVBLFNBQWdCQSwrQkFBaEIsR0FBK0M7QUFDM0MsU0FBTyxJQUFJQyxxQkFBSixDQUFXLEVBQVgsQ0FBUDtBQUVIOztBQUhEQyx1Q0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vLi4vc3JjL3ZhbGlkYXRlL2dldFNjaGVtYUZvckNvbXBldGVuY2VUZWFtUGFnZXMudHM/ZjNhYyJdLCJuYW1lcyI6WyJnZXRTY2hlbWFGb3JDb21wZXRlbmNlVGVhbVBhZ2VzIiwidmFsaWRhdGVfMSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/dist/validate/getSchemaForCompetenceTeamPages.js\n");

/***/ }),

/***/ "../shared/dist/validate/getSchemaForCompetenceTeamRolePages.js":
/*!**********************************************************************!*\
  !*** ../shared/dist/validate/getSchemaForCompetenceTeamRolePages.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nexports.__esModule = true;\nexports.getSchemaForCompetenceTeamRolePages = void 0;\n\nvar validate_1 = __importDefault(__webpack_require__(/*! validate */ \"../shared/node_modules/validate/build/schema.js\")); // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\nfunction getSchemaForCompetenceTeamRolePages(competenceTeamSettings) {\n  return new validate_1[\"default\"]({});\n}\n\nexports.getSchemaForCompetenceTeamRolePages = getSchemaForCompetenceTeamRolePages;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2Rpc3QvdmFsaWRhdGUvZ2V0U2NoZW1hRm9yQ29tcGV0ZW5jZVRlYW1Sb2xlUGFnZXMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSx5SCxDQUdBOzs7QUFDQSxTQUFnQkEsbUNBQWhCLENBQW9EQyxzQkFBcEQsRUFBa0c7QUFDOUYsU0FBTyxJQUFJQyxxQkFBSixDQUFXLEVBQVgsQ0FBUDtBQUVIOztBQUhEQywyQ0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vLi4vc3JjL3ZhbGlkYXRlL2dldFNjaGVtYUZvckNvbXBldGVuY2VUZWFtUm9sZVBhZ2VzLnRzP2JjOWYiXSwibmFtZXMiOlsiZ2V0U2NoZW1hRm9yQ29tcGV0ZW5jZVRlYW1Sb2xlUGFnZXMiLCJjb21wZXRlbmNlVGVhbVNldHRpbmdzIiwidmFsaWRhdGVfMSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/dist/validate/getSchemaForCompetenceTeamRolePages.js\n");

/***/ }),

/***/ "../shared/dist/validate/getSchemaForCompetenceTeamSettings.js":
/*!*********************************************************************!*\
  !*** ../shared/dist/validate/getSchemaForCompetenceTeamSettings.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nexports.__esModule = true;\nexports.getSchemaForCompetenceTeamSettings = void 0;\n\nvar validate_1 = __importDefault(__webpack_require__(/*! validate */ \"../shared/node_modules/validate/build/schema.js\"));\n/**\r\n * Get the schema for validating competence team settings.\r\n *\r\n * @returns Schema for competence team settings\r\n *\r\n */\n\n\nfunction getSchemaForCompetenceTeamSettings() {\n  return new validate_1[\"default\"]({\n    role: [{\n      type: \"string\",\n      required: true\n    }],\n    functionLevel: [{\n      type: \"string\",\n      required: true\n    }]\n  });\n}\n\nexports.getSchemaForCompetenceTeamSettings = getSchemaForCompetenceTeamSettings;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2Rpc3QvdmFsaWRhdGUvZ2V0U2NoZW1hRm9yQ29tcGV0ZW5jZVRlYW1TZXR0aW5ncy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBRUE7Ozs7Ozs7O0FBTUEsU0FBZ0JBLGtDQUFoQixHQUFrRDtBQUM5QyxTQUFPLElBQUlDLHFCQUFKLENBQVc7QUFDZEMsUUFBSSxFQUFFLENBQUM7QUFBRUMsVUFBSSxFQUFFLFFBQVI7QUFBa0JDLGNBQVEsRUFBRTtBQUE1QixLQUFELENBRFE7QUFFZEMsaUJBQWEsRUFBRSxDQUFDO0FBQUVGLFVBQUksRUFBRSxRQUFSO0FBQWtCQyxjQUFRLEVBQUU7QUFBNUIsS0FBRDtBQUZELEdBQVgsQ0FBUDtBQUlIOztBQUxERSwwQ0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vLi4vc3JjL3ZhbGlkYXRlL2dldFNjaGVtYUZvckNvbXBldGVuY2VUZWFtU2V0dGluZ3MudHM/MWFjNiJdLCJuYW1lcyI6WyJnZXRTY2hlbWFGb3JDb21wZXRlbmNlVGVhbVNldHRpbmdzIiwidmFsaWRhdGVfMSIsInJvbGUiLCJ0eXBlIiwicmVxdWlyZWQiLCJmdW5jdGlvbkxldmVsIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/dist/validate/getSchemaForCompetenceTeamSettings.js\n");

/***/ }),

/***/ "../shared/dist/validate/getSchemaForCompetenceTeamTopicPages.js":
/*!***********************************************************************!*\
  !*** ../shared/dist/validate/getSchemaForCompetenceTeamTopicPages.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nexports.__esModule = true;\nexports.getSchemaForCompetenceTeamTopicPages = void 0;\n\nvar validate_1 = __importDefault(__webpack_require__(/*! validate */ \"../shared/node_modules/validate/build/schema.js\"));\n\nfunction getSchemaForCompetenceTeamTopicPages(competenceTeamSettings) {\n  var skillLevelForFunctionLevel = {};\n\n  if (!competenceTeamSettings.functionLevel) {\n    throw new Error(\"No functionLevel in competenceTeamSettings\");\n  }\n\n  competenceTeamSettings.functionLevel.forEach(function (functionLevel) {\n    skillLevelForFunctionLevel[functionLevel] = {\n      type: \"string\",\n      required: false,\n      \"enum\": [\"Novice\", \"Intermediate\", \"Proficient\", \"Expert\"]\n    };\n  });\n  var schema = new validate_1[\"default\"]({\n    internal: {\n      type: \"boolean\",\n      required: false\n    },\n    name: {\n      type: \"string\",\n      required: true\n    },\n    uid: {\n      type: \"string\",\n      required: true,\n      match: /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/,\n      message: {\n        match: \"uid must be in format 7278730A-7E86-46DD-8CE2-E2CEBDF544D6\"\n      }\n    },\n    skillType: {\n      type: \"string\",\n      required: true,\n      \"enum\": competenceTeamSettings.skillType.map(function (skillType) {\n        return skillType.frontmatterName;\n      })\n    },\n    isCCSkill: {\n      type: \"boolean\",\n      required: true\n    },\n    isLearningPath: {\n      type: \"boolean\",\n      required: true\n    },\n    roles: [{\n      role: {\n        type: \"string\",\n        required: false,\n        \"enum\": competenceTeamSettings.role\n      },\n      skillLevelForFunctionLevel: skillLevelForFunctionLevel\n    }],\n    showOnRadar: {\n      type: \"boolean\",\n      required: true\n    },\n    ring: {\n      type: \"string\",\n      required: false,\n      \"enum\": competenceTeamSettings.ring\n    },\n    quadrant: {\n      type: \"string\",\n      required: false,\n      \"enum\": competenceTeamSettings.quadrant\n    },\n    isNew: {\n      type: \"boolean\",\n      required: false\n    }\n  });\n  return schema;\n}\n\nexports.getSchemaForCompetenceTeamTopicPages = getSchemaForCompetenceTeamTopicPages;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2Rpc3QvdmFsaWRhdGUvZ2V0U2NoZW1hRm9yQ29tcGV0ZW5jZVRlYW1Ub3BpY1BhZ2VzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBSUEsU0FBZ0JBLG9DQUFoQixDQUFxREMsc0JBQXJELEVBQW1HO0FBQy9GLE1BQU1DLDBCQUEwQixHQUFjLEVBQTlDOztBQUNBLE1BQUksQ0FBQ0Qsc0JBQXNCLENBQUNFLGFBQTVCLEVBQTJDO0FBQ3ZDLFVBQU0sSUFBSUMsS0FBSixDQUFVLDRDQUFWLENBQU47QUFDSDs7QUFDREgsd0JBQXNCLENBQUNFLGFBQXZCLENBQXFDRSxPQUFyQyxDQUE2Qyx5QkFBYTtBQUN0REgsOEJBQTBCLENBQUNDLGFBQUQsQ0FBMUIsR0FBNEM7QUFDeENHLFVBQUksRUFBRSxRQURrQztBQUV4Q0MsY0FBUSxFQUFFLEtBRjhCO0FBR3hDLGNBQU0sQ0FDRixRQURFLEVBRUYsY0FGRSxFQUdGLFlBSEUsRUFJRixRQUpFO0FBSGtDLEtBQTVDO0FBVUgsR0FYRDtBQWFBLE1BQU1DLE1BQU0sR0FBRyxJQUFJQyxxQkFBSixDQUFXO0FBQ3RCQyxZQUFRLEVBQUU7QUFDTkosVUFBSSxFQUFFLFNBREE7QUFFTkMsY0FBUSxFQUFFO0FBRkosS0FEWTtBQUt0QkksUUFBSSxFQUFFO0FBQ0ZMLFVBQUksRUFBRSxRQURKO0FBRUZDLGNBQVEsRUFBRTtBQUZSLEtBTGdCO0FBU3RCSyxPQUFHLEVBQUU7QUFDRE4sVUFBSSxFQUFFLFFBREw7QUFFREMsY0FBUSxFQUFFLElBRlQ7QUFHRE0sV0FBSyxFQUFFLCtFQUhOO0FBSURDLGFBQU8sRUFBRTtBQUNMRCxhQUFLLEVBQUU7QUFERjtBQUpSLEtBVGlCO0FBaUJ0QkUsYUFBUyxFQUFFO0FBQ1BULFVBQUksRUFBRSxRQURDO0FBRVBDLGNBQVEsRUFBRSxJQUZIO0FBR1AsY0FBTU4sc0JBQXNCLENBQUNjLFNBQXZCLENBQWlDQyxHQUFqQyxDQUFxQyxxQkFBUztBQUFJLHdCQUFTLENBQUNDLGVBQVY7QUFBeUIsT0FBM0U7QUFIQyxLQWpCVztBQXNCdEJDLGFBQVMsRUFBRTtBQUNQWixVQUFJLEVBQUUsU0FEQztBQUVQQyxjQUFRLEVBQUU7QUFGSCxLQXRCVztBQTBCdEJZLGtCQUFjLEVBQUU7QUFDWmIsVUFBSSxFQUFFLFNBRE07QUFFWkMsY0FBUSxFQUFFO0FBRkUsS0ExQk07QUE4QnRCYSxTQUFLLEVBQUUsQ0FDSDtBQUNJQyxVQUFJLEVBQUU7QUFDRmYsWUFBSSxFQUFFLFFBREo7QUFFRkMsZ0JBQVEsRUFBRSxLQUZSO0FBR0YsZ0JBQU1OLHNCQUFzQixDQUFDb0I7QUFIM0IsT0FEVjtBQU1JbkIsZ0NBQTBCLEVBQUVBO0FBTmhDLEtBREcsQ0E5QmU7QUF3Q3RCb0IsZUFBVyxFQUFFO0FBQ1RoQixVQUFJLEVBQUUsU0FERztBQUVUQyxjQUFRLEVBQUU7QUFGRCxLQXhDUztBQTRDdEJnQixRQUFJLEVBQUU7QUFDRmpCLFVBQUksRUFBRSxRQURKO0FBRUZDLGNBQVEsRUFBRSxLQUZSO0FBR0YsY0FBTU4sc0JBQXNCLENBQUNzQjtBQUgzQixLQTVDZ0I7QUFpRHRCQyxZQUFRLEVBQUU7QUFDTmxCLFVBQUksRUFBRSxRQURBO0FBRU5DLGNBQVEsRUFBRSxLQUZKO0FBR04sY0FBTU4sc0JBQXNCLENBQUN1QjtBQUh2QixLQWpEWTtBQXNEdEJDLFNBQUssRUFBRTtBQUNIbkIsVUFBSSxFQUFFLFNBREg7QUFFSEMsY0FBUSxFQUFFO0FBRlA7QUF0RGUsR0FBWCxDQUFmO0FBNERBLFNBQU9DLE1BQVA7QUFDSDs7QUEvRURrQiw0Q0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vLi4vc3JjL3ZhbGlkYXRlL2dldFNjaGVtYUZvckNvbXBldGVuY2VUZWFtVG9waWNQYWdlcy50cz9mZDkwIl0sIm5hbWVzIjpbImdldFNjaGVtYUZvckNvbXBldGVuY2VUZWFtVG9waWNQYWdlcyIsImNvbXBldGVuY2VUZWFtU2V0dGluZ3MiLCJza2lsbExldmVsRm9yRnVuY3Rpb25MZXZlbCIsImZ1bmN0aW9uTGV2ZWwiLCJFcnJvciIsImZvckVhY2giLCJ0eXBlIiwicmVxdWlyZWQiLCJzY2hlbWEiLCJ2YWxpZGF0ZV8xIiwiaW50ZXJuYWwiLCJuYW1lIiwidWlkIiwibWF0Y2giLCJtZXNzYWdlIiwic2tpbGxUeXBlIiwibWFwIiwiZnJvbnRtYXR0ZXJOYW1lIiwiaXNDQ1NraWxsIiwiaXNMZWFybmluZ1BhdGgiLCJyb2xlcyIsInJvbGUiLCJzaG93T25SYWRhciIsInJpbmciLCJxdWFkcmFudCIsImlzTmV3IiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/dist/validate/getSchemaForCompetenceTeamTopicPages.js\n");

/***/ }),

/***/ "../shared/dist/validate/getSchemaForGeneralPages.js":
/*!***********************************************************!*\
  !*** ../shared/dist/validate/getSchemaForGeneralPages.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nexports.__esModule = true;\nexports.getSchemaForGeneralPages = void 0;\n\nvar validate_1 = __importDefault(__webpack_require__(/*! validate */ \"../shared/node_modules/validate/build/schema.js\"));\n/**\r\n * Get the schema for validating general pages.\r\n *\r\n * @returns Schema for general pages\r\n *\r\n * Either no frontmatter, or frontmatter as follows:\r\n * ---\r\n * internal: <true|false>\r\n * ---\r\n */\n\n\nfunction getSchemaForGeneralPages() {\n  return new validate_1[\"default\"]({\n    internal: {\n      type: \"boolean\",\n      required: false\n    }\n  });\n}\n\nexports.getSchemaForGeneralPages = getSchemaForGeneralPages;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2Rpc3QvdmFsaWRhdGUvZ2V0U2NoZW1hRm9yR2VuZXJhbFBhZ2VzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFFQTs7Ozs7Ozs7Ozs7O0FBVUEsU0FBZ0JBLHdCQUFoQixHQUF3QztBQUNwQyxTQUFPLElBQUlDLHFCQUFKLENBQVc7QUFDZEMsWUFBUSxFQUFFO0FBQUVDLFVBQUksRUFBRSxTQUFSO0FBQW1CQyxjQUFRLEVBQUU7QUFBN0I7QUFESSxHQUFYLENBQVA7QUFHSDs7QUFKREMsZ0NBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4uLy4uL3NyYy92YWxpZGF0ZS9nZXRTY2hlbWFGb3JHZW5lcmFsUGFnZXMudHM/NWNhOSJdLCJuYW1lcyI6WyJnZXRTY2hlbWFGb3JHZW5lcmFsUGFnZXMiLCJ2YWxpZGF0ZV8xIiwiaW50ZXJuYWwiLCJ0eXBlIiwicmVxdWlyZWQiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared/dist/validate/getSchemaForGeneralPages.js\n");

/***/ }),

/***/ "../shared/dist/validate/markdownPathToSchema.js":
/*!*******************************************************!*\
  !*** ../shared/dist/validate/markdownPathToSchema.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nexports.__esModule = true;\nexports.markdownPathToSchema = void 0;\n\nvar markdownPathToSubject_1 = __webpack_require__(/*! ../util/markdownPathToSubject */ \"../shared/dist/util/markdownPathToSubject.js\");\n\nvar getSchemaForCompetenceFrameworkSettings_1 = __webpack_require__(/*! ./getSchemaForCompetenceFrameworkSettings */ \"../shared/dist/validate/getSchemaForCompetenceFrameworkSettings.js\");\n\nvar getSchemaForCompetenceTeamPages_1 = __webpack_require__(/*! ./getSchemaForCompetenceTeamPages */ \"../shared/dist/validate/getSchemaForCompetenceTeamPages.js\");\n\nvar getSchemaForCompetenceTeamRolePages_1 = __webpack_require__(/*! ./getSchemaForCompetenceTeamRolePages */ \"../shared/dist/validate/getSchemaForCompetenceTeamRolePages.js\");\n\nvar getSchemaForCompetenceTeamSettings_1 = __webpack_require__(/*! ./getSchemaForCompetenceTeamSettings */ \"../shared/dist/validate/getSchemaForCompetenceTeamSettings.js\");\n\nvar getSchemaForCompetenceTeamTopicPages_1 = __webpack_require__(/*! ./getSchemaForCompetenceTeamTopicPages */ \"../shared/dist/validate/getSchemaForCompetenceTeamTopicPages.js\");\n\nvar getSchemaForGeneralPages_1 = __webpack_require__(/*! ./getSchemaForGeneralPages */ \"../shared/dist/validate/getSchemaForGeneralPages.js\");\n\nfunction markdownPathToSchema(path, getCompetenceFrameworkSettings, getCompetenceTeamSettings) {\n  return __awaiter(this, void 0, void 0, function () {\n    var getSettings, subjectInfo, _a, _b, _c;\n\n    var _this = this;\n\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          getSettings = function (competenceTeam) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var competenceFrameworkSettings, competenceTeamSettings;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , getCompetenceFrameworkSettings()];\n\n                  case 1:\n                    competenceFrameworkSettings = _a.sent();\n                    return [4\n                    /*yield*/\n                    , getCompetenceTeamSettings(competenceTeam)];\n\n                  case 2:\n                    competenceTeamSettings = _a.sent();\n                    return [2\n                    /*return*/\n                    , __assign(__assign({}, competenceFrameworkSettings), competenceTeamSettings)];\n                }\n              });\n            });\n          };\n\n          subjectInfo = (0, markdownPathToSubject_1.markdownPathToSubject)(path);\n\n          if (subjectInfo === null) {\n            return [2\n            /*return*/\n            , null];\n          }\n\n          _a = subjectInfo.subject;\n\n          switch (_a) {\n            case \"GeneralPage\":\n              return [3\n              /*break*/\n              , 1];\n\n            case \"CompetenceTeamOverview\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"RolesOverview\":\n              return [3\n              /*break*/\n              , 3];\n\n            case \"TopicsOverview\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"Role\":\n              return [3\n              /*break*/\n              , 5];\n\n            case \"Topic\":\n              return [3\n              /*break*/\n              , 7];\n\n            case \"CompetenceTeamSettings\":\n              return [3\n              /*break*/\n              , 9];\n\n            case \"CompetenceFrameworkSettings\":\n              return [3\n              /*break*/\n              , 10];\n          }\n\n          return [3\n          /*break*/\n          , 11];\n\n        case 1:\n          return [2\n          /*return*/\n          , (0, getSchemaForGeneralPages_1.getSchemaForGeneralPages)()];\n\n        case 2:\n          return [2\n          /*return*/\n          , (0, getSchemaForCompetenceTeamPages_1.getSchemaForCompetenceTeamPages)()];\n\n        case 3:\n          return [2\n          /*return*/\n          , null];\n\n        case 4:\n          return [2\n          /*return*/\n          , null];\n\n        case 5:\n          _b = getSchemaForCompetenceTeamRolePages_1.getSchemaForCompetenceTeamRolePages;\n          return [4\n          /*yield*/\n          , getSettings(subjectInfo.competenceteam)];\n\n        case 6:\n          return [2\n          /*return*/\n          , _b.apply(void 0, [_d.sent()])];\n\n        case 7:\n          _c = getSchemaForCompetenceTeamTopicPages_1.getSchemaForCompetenceTeamTopicPages;\n          return [4\n          /*yield*/\n          , getSettings(subjectInfo.competenceteam)];\n\n        case 8:\n          return [2\n          /*return*/\n          , _c.apply(void 0, [_d.sent()])];\n\n        case 9:\n          return [2\n          /*return*/\n          , (0, getSchemaForCompetenceTeamSettings_1.getSchemaForCompetenceTeamSettings)()];\n\n        case 10:\n          return [2\n          /*return*/\n          , (0, getSchemaForCompetenceFrameworkSettings_1.getSchemaForCompetenceFrameworkSettings)()];\n\n        case 11:\n          // all other pages: no schema\n          return [2\n          /*return*/\n          , null];\n      }\n    });\n  });\n}\n\nexports.markdownPathToSchema = markdownPathToSchema;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2Rpc3QvdmFsaWRhdGUvbWFya2Rvd25QYXRoVG9TY2hlbWEuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLFNBQXNCQSxvQkFBdEIsQ0FDSUMsSUFESixFQUVJQyw4QkFGSixFQUdJQyx5QkFISixFQUcwRjs7Ozs7Ozs7O0FBRWhGQyxxQkFBVyxHQUFHLFVBQU9DLGNBQVAsRUFBNkI7QUFBQTs7Ozs7QUFDVDtBQUFBO0FBQUEsc0JBQU1ILDhCQUE4QixFQUFwQzs7O0FBQTlCSSwrQ0FBMkIsR0FBR0MsU0FBOUI7QUFDeUI7QUFBQTtBQUFBLHNCQUFNSix5QkFBeUIsQ0FBQ0UsY0FBRCxDQUEvQjs7O0FBQXpCRywwQ0FBc0IsR0FBR0QsU0FBekI7QUFDTjtBQUFBO0FBQUEsc0JBQU9FLHNCQUFLSCwyQkFBTCxHQUFxQ0Usc0JBQXJDLENBQVA7OzthQUg2QztBQUloRCxXQUpLOztBQU1BRSxxQkFBVyxHQUFHLG1EQUFzQlQsSUFBdEIsQ0FBZDs7QUFDTixjQUFJUyxXQUFXLEtBQUssSUFBcEIsRUFBMEI7QUFDdEI7QUFBQTtBQUFBLGNBQU8sSUFBUDtBQUNIOztBQUVPSCwwQkFBVyxDQUFDSSxPQUFaOzs7aUJBQ0M7QUFBQTtBQUFBO0FBQUE7O2lCQUdBO0FBQUE7QUFBQTtBQUFBOztpQkFHQTtBQUFBO0FBQUE7QUFBQTs7aUJBR0E7QUFBQTtBQUFBO0FBQUE7O2lCQUdBO0FBQUE7QUFBQTtBQUFBOztpQkFLQTtBQUFBO0FBQUE7QUFBQTs7aUJBS0E7QUFBQTtBQUFBO0FBQUE7O2lCQUdBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7OztBQXhCRDtBQUFBO0FBQUEsWUFBTywwREFBUDs7O0FBR0E7QUFBQTtBQUFBLFlBQU8sd0VBQVA7OztBQUdBO0FBQUE7QUFBQSxZQUFPLElBQVA7OztBQUdBO0FBQUE7QUFBQSxZQUFPLElBQVA7OztBQUdPQztBQUNIO0FBQUE7QUFBQSxZQUFNUixXQUFXLENBQUNNLFdBQVcsQ0FBQ0csY0FBYixDQUFqQjs7O0FBREo7QUFBQTtBQUFBLFlBQU9ELGtCQUNIRSxTQURHLEVBQVA7OztBQUtPQztBQUNIO0FBQUE7QUFBQSxZQUFNWCxXQUFXLENBQUNNLFdBQVcsQ0FBQ0csY0FBYixDQUFqQjs7O0FBREo7QUFBQTtBQUFBLFlBQU9FLGtCQUNIRCxTQURHLEVBQVA7OztBQUtBO0FBQUE7QUFBQSxZQUFPLDhFQUFQOzs7QUFHQTtBQUFBO0FBQUEsWUFBTyx3RkFBUDs7O0FBR1I7QUFDQTtBQUFBO0FBQUEsWUFBTyxJQUFQOzs7O0FBQ0g7O0FBaERERSw0QkFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vLi4vc3JjL3ZhbGlkYXRlL21hcmtkb3duUGF0aFRvU2NoZW1hLnRzPzUyNWYiXSwibmFtZXMiOlsibWFya2Rvd25QYXRoVG9TY2hlbWEiLCJwYXRoIiwiZ2V0Q29tcGV0ZW5jZUZyYW1ld29ya1NldHRpbmdzIiwiZ2V0Q29tcGV0ZW5jZVRlYW1TZXR0aW5ncyIsImdldFNldHRpbmdzIiwiY29tcGV0ZW5jZVRlYW0iLCJjb21wZXRlbmNlRnJhbWV3b3JrU2V0dGluZ3MiLCJfYSIsImNvbXBldGVuY2VUZWFtU2V0dGluZ3MiLCJfX2Fzc2lnbiIsInN1YmplY3RJbmZvIiwic3ViamVjdCIsIl9iIiwiY29tcGV0ZW5jZXRlYW0iLCJfZCIsIl9jIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/dist/validate/markdownPathToSchema.js\n");

/***/ }),

/***/ "../shared/dist/validate/validateCompetenceFrameworkSettings.js":
/*!**********************************************************************!*\
  !*** ../shared/dist/validate/validateCompetenceFrameworkSettings.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.validateCompetenceFrameworkSettings = void 0;\n\nvar getSchemaForCompetenceFrameworkSettings_1 = __webpack_require__(/*! ./getSchemaForCompetenceFrameworkSettings */ \"../shared/dist/validate/getSchemaForCompetenceFrameworkSettings.js\");\n\nvar validateObject_1 = __webpack_require__(/*! ./validateObject */ \"../shared/dist/validate/validateObject.js\");\n\nfunction validateCompetenceFrameworkSettings(filepath, competenceFrameworkSettings) {\n  var schema = (0, getSchemaForCompetenceFrameworkSettings_1.getSchemaForCompetenceFrameworkSettings)();\n  var schemaValidationResult = (0, validateObject_1.validateObjectAgainstSchema)(filepath, competenceFrameworkSettings, schema);\n  return schemaValidationResult;\n}\n\nexports.validateCompetenceFrameworkSettings = validateCompetenceFrameworkSettings;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2Rpc3QvdmFsaWRhdGUvdmFsaWRhdGVDb21wZXRlbmNlRnJhbWV3b3JrU2V0dGluZ3MuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQTs7QUFFQTs7QUFHQSxTQUFnQkEsbUNBQWhCLENBQ0lDLFFBREosRUFFSUMsMkJBRkosRUFFNEQ7QUFFeEQsTUFBTUMsTUFBTSxHQUFHLHdGQUFmO0FBQ0EsTUFBTUMsc0JBQXNCLEdBQXlDLGtEQUNqRUgsUUFEaUUsRUFFakVDLDJCQUZpRSxFQUdqRUMsTUFIaUUsQ0FBckU7QUFLQSxTQUFPQyxzQkFBUDtBQUNIOztBQVhEQywyQ0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vLi4vc3JjL3ZhbGlkYXRlL3ZhbGlkYXRlQ29tcGV0ZW5jZUZyYW1ld29ya1NldHRpbmdzLnRzP2IyMjciXSwibmFtZXMiOlsidmFsaWRhdGVDb21wZXRlbmNlRnJhbWV3b3JrU2V0dGluZ3MiLCJmaWxlcGF0aCIsImNvbXBldGVuY2VGcmFtZXdvcmtTZXR0aW5ncyIsInNjaGVtYSIsInNjaGVtYVZhbGlkYXRpb25SZXN1bHQiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared/dist/validate/validateCompetenceFrameworkSettings.js\n");

/***/ }),

/***/ "../shared/dist/validate/validateCompetenceTeamSettings.js":
/*!*****************************************************************!*\
  !*** ../shared/dist/validate/validateCompetenceTeamSettings.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.validateCompetenceTeamSettings = void 0;\n\nvar getSchemaForCompetenceTeamSettings_1 = __webpack_require__(/*! ./getSchemaForCompetenceTeamSettings */ \"../shared/dist/validate/getSchemaForCompetenceTeamSettings.js\");\n\nvar validateObject_1 = __webpack_require__(/*! ./validateObject */ \"../shared/dist/validate/validateObject.js\");\n\nfunction validateCompetenceTeamSettings(filepath, competenceTeamSettings) {\n  var schema = (0, getSchemaForCompetenceTeamSettings_1.getSchemaForCompetenceTeamSettings)();\n  var schemaValidationResult = (0, validateObject_1.validateObjectAgainstSchema)(filepath, competenceTeamSettings, schema);\n  return schemaValidationResult;\n}\n\nexports.validateCompetenceTeamSettings = validateCompetenceTeamSettings;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2Rpc3QvdmFsaWRhdGUvdmFsaWRhdGVDb21wZXRlbmNlVGVhbVNldHRpbmdzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQ0E7O0FBR0E7O0FBRUEsU0FBZ0JBLDhCQUFoQixDQUNJQyxRQURKLEVBRUlDLHNCQUZKLEVBRXVEO0FBRW5ELE1BQU1DLE1BQU0sR0FBRyw4RUFBZjtBQUNBLE1BQU1DLHNCQUFzQixHQUF5QyxrREFDakVILFFBRGlFLEVBRWpFQyxzQkFGaUUsRUFHakVDLE1BSGlFLENBQXJFO0FBS0EsU0FBT0Msc0JBQVA7QUFDSDs7QUFYREMsc0NBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4uLy4uL3NyYy92YWxpZGF0ZS92YWxpZGF0ZUNvbXBldGVuY2VUZWFtU2V0dGluZ3MudHM/NjcyMyJdLCJuYW1lcyI6WyJ2YWxpZGF0ZUNvbXBldGVuY2VUZWFtU2V0dGluZ3MiLCJmaWxlcGF0aCIsImNvbXBldGVuY2VUZWFtU2V0dGluZ3MiLCJzY2hlbWEiLCJzY2hlbWFWYWxpZGF0aW9uUmVzdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/dist/validate/validateCompetenceTeamSettings.js\n");

/***/ }),

/***/ "../shared/dist/validate/validateObject.js":
/*!*************************************************!*\
  !*** ../shared/dist/validate/validateObject.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.convertSchemaValidationErrorToErrorString = exports.validateObjectAgainstSchema = void 0;\n\nfunction validateObjectAgainstSchema(filepath, obj, schema) {\n  //console.log(\"Schema\", schema);\n  //console.log(\"Obj\", obj);\n  var validationErrors = schema.validate(obj, {\n    strict: true\n  });\n  var schemaValidationResult = validationErrors.map(function (err) {\n    return {\n      errorType: \"SchemaValidationError\",\n      filepath: filepath,\n      path: err.path,\n      message: err.message\n    };\n  });\n  return schemaValidationResult;\n  return [];\n}\n\nexports.validateObjectAgainstSchema = validateObjectAgainstSchema;\n\nfunction convertSchemaValidationErrorToErrorString(err) {\n  return \"packages/content/\".concat(err.filepath, \":0:0: SchemaValidationError: \").concat(err.filepath, \" - \").concat(err.message);\n}\n\nexports.convertSchemaValidationErrorToErrorString = convertSchemaValidationErrorToErrorString;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2Rpc3QvdmFsaWRhdGUvdmFsaWRhdGVPYmplY3QuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFJQSxTQUFnQkEsMkJBQWhCLENBQTRDQyxRQUE1QyxFQUE4REMsR0FBOUQsRUFBOEVDLE1BQTlFLEVBQTRGO0FBQ3hGO0FBQ0E7QUFFQSxNQUFNQyxnQkFBZ0IsR0FBc0JELE1BQU0sQ0FBQ0UsUUFBUCxDQUFnQkgsR0FBaEIsRUFBcUI7QUFBRUksVUFBTSxFQUFFO0FBQVYsR0FBckIsQ0FBNUM7QUFDQSxNQUFNQyxzQkFBc0IsR0FBR0gsZ0JBQWdCLENBQUNJLEdBQWpCLENBQzNCLFVBQUNDLEdBQUQsRUFBSTtBQUNKLFdBQUM7QUFDR0MsZUFBUyxFQUFFLHVCQURkO0FBRUdULGNBQVEsRUFBRUEsUUFGYjtBQUdHVSxVQUFJLEVBQUVGLEdBQUcsQ0FBQ0UsSUFIYjtBQUlHQyxhQUFPLEVBQUdILEdBQXdCLENBQUNHO0FBSnRDLEtBQUQ7QUFLMkIsR0FQQSxDQUEvQjtBQVNBLFNBQU9MLHNCQUFQO0FBQ0EsU0FBTyxFQUFQO0FBQ0g7O0FBaEJETSxtQ0FBQUE7O0FBa0JBLFNBQWdCQyx5Q0FBaEIsQ0FBMERMLEdBQTFELEVBQW9GO0FBQ2hGLFNBQU8sMkJBQW9CQSxHQUFHLENBQUNSLFFBQXhCLEVBQWdDLCtCQUFoQyxFQUFnQ2MsTUFBaEMsQ0FBZ0VOLEdBQUcsQ0FBQ1IsUUFBcEUsRUFBNEUsS0FBNUUsRUFBNEVjLE1BQTVFLENBQWtGTixHQUFHLENBQUNHLE9BQXRGLENBQVA7QUFDSDs7QUFGREMsaURBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4uLy4uL3NyYy92YWxpZGF0ZS92YWxpZGF0ZU9iamVjdC50cz9jMWNhIl0sIm5hbWVzIjpbInZhbGlkYXRlT2JqZWN0QWdhaW5zdFNjaGVtYSIsImZpbGVwYXRoIiwib2JqIiwic2NoZW1hIiwidmFsaWRhdGlvbkVycm9ycyIsInZhbGlkYXRlIiwic3RyaWN0Iiwic2NoZW1hVmFsaWRhdGlvblJlc3VsdCIsIm1hcCIsImVyciIsImVycm9yVHlwZSIsInBhdGgiLCJtZXNzYWdlIiwiZXhwb3J0cyIsImNvbnZlcnRTY2hlbWFWYWxpZGF0aW9uRXJyb3JUb0Vycm9yU3RyaW5nIiwiY29uY2F0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared/dist/validate/validateObject.js\n");

/***/ }),

/***/ "../shared/dist/validate/validatePageFrontmatter.js":
/*!**********************************************************!*\
  !*** ../shared/dist/validate/validatePageFrontmatter.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nexports.__esModule = true;\nexports.validatePageFrontmatter = void 0;\n\nvar front_matter_1 = __importDefault(__webpack_require__(/*! front-matter */ \"../shared/node_modules/front-matter/index.js\"));\n\nvar markdownPathToSchema_1 = __webpack_require__(/*! ./markdownPathToSchema */ \"../shared/dist/validate/markdownPathToSchema.js\");\n\nvar validateObject_1 = __webpack_require__(/*! ./validateObject */ \"../shared/dist/validate/validateObject.js\");\n\nfunction validatePageFrontmatter(filepath, markdown, getCompetenceFrameworkSettings, getCompetenceTeamSettings) {\n  return __awaiter(this, void 0, void 0, function () {\n    var results, schema, schemaValidationResult, yamlException_1, yamlError;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 2,, 3]);\n\n          results = (0, front_matter_1[\"default\"])(markdown);\n          return [4\n          /*yield*/\n          , (0, markdownPathToSchema_1.markdownPathToSchema)(filepath, getCompetenceFrameworkSettings, getCompetenceTeamSettings)];\n\n        case 1:\n          schema = _a.sent();\n\n          if (schema == null) {\n            // no schema for this filepath, don't validate\n            return [2\n            /*return*/\n            , null];\n          }\n\n          schemaValidationResult = (0, validateObject_1.validateObjectAgainstSchema)(filepath, results.attributes, schema);\n          return [2\n          /*return*/\n          , schemaValidationResult];\n\n        case 2:\n          yamlException_1 = _a.sent();\n          yamlError = yamlException_1;\n          yamlError.errorType = \"YAMLError\";\n          yamlError.name = filepath;\n          return [2\n          /*return*/\n          , [yamlError]];\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nexports.validatePageFrontmatter = validatePageFrontmatter;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2Rpc3QvdmFsaWRhdGUvdmFsaWRhdGVQYWdlRnJvbnRtYXR0ZXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFFQTs7QUFLQSxTQUFzQkEsdUJBQXRCLENBQ0lDLFFBREosRUFFSUMsUUFGSixFQUdJQyw4QkFISixFQUlJQyx5QkFKSixFQUkwRjs7Ozs7Ozs7QUFHNUVDLGlCQUFPLEdBQUcsK0JBQUdILFFBQUgsQ0FBVjtBQUNTO0FBQUE7QUFBQSxZQUFNLGlEQUFxQkQsUUFBckIsRUFBK0JFLDhCQUEvQixFQUErREMseUJBQS9ELENBQU47OztBQUFURSxnQkFBTSxHQUFHQyxTQUFUOztBQUNOLGNBQUlELE1BQU0sSUFBSSxJQUFkLEVBQW9CO0FBQ2hCO0FBQ0E7QUFBQTtBQUFBLGNBQU8sSUFBUDtBQUNIOztBQUVLRSxnQ0FBc0IsR0FBeUMsa0RBQ2pFUCxRQURpRSxFQUVqRUksT0FBTyxDQUFDSSxVQUZ5RCxFQUdqRUgsTUFIaUUsQ0FBL0Q7QUFLTjtBQUFBO0FBQUEsWUFBT0Usc0JBQVA7Ozs7QUFFTUUsbUJBQVMsR0FBR0MsZUFBWjtBQUNORCxtQkFBUyxDQUFDRSxTQUFWLEdBQXNCLFdBQXRCO0FBQ0FGLG1CQUFTLENBQUNHLElBQVYsR0FBaUJaLFFBQWpCO0FBRUE7QUFBQTtBQUFBLFlBQU8sQ0FBQ1MsU0FBRCxDQUFQOzs7Ozs7Ozs7QUFFUDs7QUEzQkRJLCtCQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uLi8uLi9zcmMvdmFsaWRhdGUvdmFsaWRhdGVQYWdlRnJvbnRtYXR0ZXIudHM/ZGEyNSJdLCJuYW1lcyI6WyJ2YWxpZGF0ZVBhZ2VGcm9udG1hdHRlciIsImZpbGVwYXRoIiwibWFya2Rvd24iLCJnZXRDb21wZXRlbmNlRnJhbWV3b3JrU2V0dGluZ3MiLCJnZXRDb21wZXRlbmNlVGVhbVNldHRpbmdzIiwicmVzdWx0cyIsInNjaGVtYSIsIl9hIiwic2NoZW1hVmFsaWRhdGlvblJlc3VsdCIsImF0dHJpYnV0ZXMiLCJ5YW1sRXJyb3IiLCJ5YW1sRXhjZXB0aW9uXzEiLCJlcnJvclR5cGUiLCJuYW1lIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/dist/validate/validatePageFrontmatter.js\n");

/***/ }),

/***/ "../shared/dist/validate/validateYaml.js":
/*!***********************************************!*\
  !*** ../shared/dist/validate/validateYaml.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nexports.__esModule = true;\nexports.validateYamlAgainstSchema = exports.validateYaml = void 0;\n\nvar yaml = __importStar(__webpack_require__(/*! js-yaml */ \"../shared/node_modules/js-yaml/index.js\"));\n\nvar validateObject_1 = __webpack_require__(/*! ./validateObject */ \"../shared/dist/validate/validateObject.js\");\n/**\r\n * Validate a YAML string.\r\n *\r\n * @param filepath Path to the YAML file\r\n * @param str YAML string to validate\r\n * @returns null if valid, otherwise YAMLException with details on error\r\n *\r\n * YAMLException contains the following fields:\r\n * - name: The name of the error (YAMLException)\r\n * - reason: The reason for the error\r\n * - message: The message of the error\r\n * - mark: The position of the error in the YAML file\r\n * - mark.name: the injected filepath specified\r\n * - mark.buffer: the YAML string\r\n * - mark.position: the position of the error in the YAML string\r\n * - mark.line: the line number of the error in the YAML string\r\n * - mark.column: the column number of the error in the YAML string\r\n * - mark.snippet: the snippet of the YAML string where the error occurred, including newlines for display\r\n */\n\n\nfunction validateYaml(filepath, str) {\n  try {\n    var data = yaml.load(str);\n    console.log(JSON.stringify(data, null, 2));\n    return null;\n  } catch (e) {\n    var err = e;\n    err.errorType = \"YAMLError\";\n    err.mark.name = filepath;\n    console.log(err.stack || String(err));\n    return err;\n  }\n}\n\nexports.validateYaml = validateYaml;\n\nfunction validateYamlAgainstSchema(filepath, str, schema) {\n  var obj;\n\n  if (str == null || str.trim() === \"\") {\n    obj = {};\n  } else {\n    obj = yaml.load(str);\n  }\n\n  return (0, validateObject_1.validateObjectAgainstSchema)(filepath, obj, schema);\n}\n\nexports.validateYamlAgainstSchema = validateYamlAgainstSchema;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2Rpc3QvdmFsaWRhdGUvdmFsaWRhdGVZYW1sLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFJQTtBQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkEsU0FBZ0JBLFlBQWhCLENBQTZCQyxRQUE3QixFQUErQ0MsR0FBL0MsRUFBMEQ7QUFDdEQsTUFBSTtBQUNBLFFBQU1DLElBQUksR0FBR0MsSUFBSSxDQUFDQyxJQUFMLENBQVVILEdBQVYsQ0FBYjtBQUNBSSxXQUFPLENBQUNDLEdBQVIsQ0FBWUMsSUFBSSxDQUFDQyxTQUFMLENBQWVOLElBQWYsRUFBcUIsSUFBckIsRUFBMkIsQ0FBM0IsQ0FBWjtBQUNBLFdBQU8sSUFBUDtBQUNILEdBSkQsQ0FJRSxPQUFPTyxDQUFQLEVBQVU7QUFDUixRQUFNQyxHQUFHLEdBQUdELENBQVo7QUFDQUMsT0FBRyxDQUFDQyxTQUFKLEdBQWdCLFdBQWhCO0FBQ0FELE9BQUcsQ0FBQ0UsSUFBSixDQUFTQyxJQUFULEdBQWdCYixRQUFoQjtBQUNBSyxXQUFPLENBQUNDLEdBQVIsQ0FBWUksR0FBRyxDQUFDSSxLQUFKLElBQWFDLE1BQU0sQ0FBQ0wsR0FBRCxDQUEvQjtBQUNBLFdBQU9BLEdBQVA7QUFDSDtBQUNKOztBQVpETSxvQkFBQUE7O0FBY0EsU0FBZ0JDLHlCQUFoQixDQUEwQ2pCLFFBQTFDLEVBQTREQyxHQUE1RCxFQUF5RWlCLE1BQXpFLEVBQXVGO0FBQ25GLE1BQUlDLEdBQUo7O0FBQ0EsTUFBSWxCLEdBQUcsSUFBSSxJQUFQLElBQWVBLEdBQUcsQ0FBQ21CLElBQUosT0FBZSxFQUFsQyxFQUFzQztBQUNsQ0QsT0FBRyxHQUFHLEVBQU47QUFDSCxHQUZELE1BRU87QUFDSEEsT0FBRyxHQUFHaEIsSUFBSSxDQUFDQyxJQUFMLENBQVVILEdBQVYsQ0FBTjtBQUNIOztBQUVELFNBQU8sa0RBQTRCRCxRQUE1QixFQUFzQ21CLEdBQXRDLEVBQTJDRCxNQUEzQyxDQUFQO0FBQ0g7O0FBVERGLGlDQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uLi8uLi9zcmMvdmFsaWRhdGUvdmFsaWRhdGVZYW1sLnRzPzQwODUiXSwibmFtZXMiOlsidmFsaWRhdGVZYW1sIiwiZmlsZXBhdGgiLCJzdHIiLCJkYXRhIiwieWFtbCIsImxvYWQiLCJjb25zb2xlIiwibG9nIiwiSlNPTiIsInN0cmluZ2lmeSIsImUiLCJlcnIiLCJlcnJvclR5cGUiLCJtYXJrIiwibmFtZSIsInN0YWNrIiwiU3RyaW5nIiwiZXhwb3J0cyIsInZhbGlkYXRlWWFtbEFnYWluc3RTY2hlbWEiLCJzY2hlbWEiLCJvYmoiLCJ0cmltIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared/dist/validate/validateYaml.js\n");

/***/ }),

/***/ "../shared/node_modules/@eivifj/dot/index.js":
/*!***************************************************!*\
  !*** ../shared/node_modules/@eivifj/dot/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Set given `path`\n *\n * @param {Object} obj\n * @param {String} path\n * @param {Mixed} val\n * @return {Object}\n * @api public\n */\nexports.set = function (obj, path, val) {\n  var segs = path.split('.');\n  var attr = segs.pop();\n  var src = obj;\n\n  for (var i = 0; i < segs.length; i++) {\n    var seg = segs[i];\n    if (!isSafe(obj, seg)) return src;\n    obj[seg] = obj[seg] || {};\n    obj = obj[seg];\n  }\n\n  if (isSafe(obj, attr)) {\n    obj[attr] = val;\n  }\n\n  return src;\n};\n/**\n * Get given `path`\n *\n * @param {Object} obj\n * @param {String} path\n * @return {Mixed}\n * @api public\n */\n\n\nexports.get = function (obj, path) {\n  var segs = path.split('.');\n  var attr = segs.pop();\n\n  for (var i = 0; i < segs.length; i++) {\n    var seg = segs[i];\n    if (!obj[seg]) return;\n    obj = obj[seg];\n  }\n\n  return obj[attr];\n};\n/**\n * Delete given `path`\n *\n * @param {Object} obj\n * @param {String} path\n * @return {Mixed}\n * @api public\n */\n\n\nexports[\"delete\"] = function (obj, path) {\n  var segs = path.split('.');\n  var attr = segs.pop();\n\n  for (var i = 0; i < segs.length; i++) {\n    var seg = segs[i];\n    if (!obj[seg]) return;\n    if (!isSafe(obj, seg)) return;\n    obj = obj[seg];\n  }\n\n  if (!isSafe(obj, attr)) return;\n\n  if (Array.isArray(obj)) {\n    obj.splice(attr, 1);\n  } else {\n    delete obj[attr];\n  }\n};\n\nfunction isSafe(obj, prop) {\n  if (isObject(obj)) {\n    return obj[prop] === undefined || hasOwnProperty(obj, prop);\n  }\n\n  if (Array.isArray(obj)) {\n    return !isNaN(parseInt(prop, 10));\n  }\n\n  return false;\n}\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nfunction isObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9AZWl2aWZqL2RvdC9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQUEsV0FBQSxHQUFjLFVBQVNFLEdBQVQsRUFBY0MsSUFBZCxFQUFvQkMsR0FBcEIsRUFBeUI7QUFDckMsTUFBSUMsSUFBSSxHQUFHRixJQUFJLENBQUNHLEtBQUwsQ0FBVyxHQUFYLENBQVg7QUFDQSxNQUFJQyxJQUFJLEdBQUdGLElBQUksQ0FBQ0csR0FBTCxFQUFYO0FBQ0EsTUFBSUMsR0FBRyxHQUFHUCxHQUFWOztBQUVBLE9BQUssSUFBSVEsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0wsSUFBSSxDQUFDTSxNQUF6QixFQUFpQ0QsQ0FBQyxFQUFsQyxFQUFzQztBQUNwQyxRQUFJRSxHQUFHLEdBQUdQLElBQUksQ0FBQ0ssQ0FBRCxDQUFkO0FBQ0EsUUFBSSxDQUFDRyxNQUFNLENBQUNYLEdBQUQsRUFBTVUsR0FBTixDQUFYLEVBQXVCLE9BQU9ILEdBQVA7QUFDdkJQLElBQUFBLEdBQUcsQ0FBQ1UsR0FBRCxDQUFILEdBQVdWLEdBQUcsQ0FBQ1UsR0FBRCxDQUFILElBQVksRUFBdkI7QUFDQVYsSUFBQUEsR0FBRyxHQUFHQSxHQUFHLENBQUNVLEdBQUQsQ0FBVDtBQUNEOztBQUVELE1BQUlDLE1BQU0sQ0FBQ1gsR0FBRCxFQUFNSyxJQUFOLENBQVYsRUFBdUI7QUFDckJMLElBQUFBLEdBQUcsQ0FBQ0ssSUFBRCxDQUFILEdBQVlILEdBQVo7QUFDRDs7QUFFRCxTQUFPSyxHQUFQO0FBQ0QsQ0FqQkQ7QUFtQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUFULFdBQUEsR0FBYyxVQUFTRSxHQUFULEVBQWNDLElBQWQsRUFBb0I7QUFDaEMsTUFBSUUsSUFBSSxHQUFHRixJQUFJLENBQUNHLEtBQUwsQ0FBVyxHQUFYLENBQVg7QUFDQSxNQUFJQyxJQUFJLEdBQUdGLElBQUksQ0FBQ0csR0FBTCxFQUFYOztBQUVBLE9BQUssSUFBSUUsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0wsSUFBSSxDQUFDTSxNQUF6QixFQUFpQ0QsQ0FBQyxFQUFsQyxFQUFzQztBQUNwQyxRQUFJRSxHQUFHLEdBQUdQLElBQUksQ0FBQ0ssQ0FBRCxDQUFkO0FBQ0EsUUFBSSxDQUFDUixHQUFHLENBQUNVLEdBQUQsQ0FBUixFQUFlO0FBQ2ZWLElBQUFBLEdBQUcsR0FBR0EsR0FBRyxDQUFDVSxHQUFELENBQVQ7QUFDRDs7QUFFRCxTQUFPVixHQUFHLENBQUNLLElBQUQsQ0FBVjtBQUNELENBWEQ7QUFhQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQVAsaUJBQUEsR0FBaUIsVUFBU0UsR0FBVCxFQUFjQyxJQUFkLEVBQW9CO0FBQ25DLE1BQUlFLElBQUksR0FBR0YsSUFBSSxDQUFDRyxLQUFMLENBQVcsR0FBWCxDQUFYO0FBQ0EsTUFBSUMsSUFBSSxHQUFHRixJQUFJLENBQUNHLEdBQUwsRUFBWDs7QUFFQSxPQUFLLElBQUlFLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdMLElBQUksQ0FBQ00sTUFBekIsRUFBaUNELENBQUMsRUFBbEMsRUFBc0M7QUFDcEMsUUFBSUUsR0FBRyxHQUFHUCxJQUFJLENBQUNLLENBQUQsQ0FBZDtBQUNBLFFBQUksQ0FBQ1IsR0FBRyxDQUFDVSxHQUFELENBQVIsRUFBZTtBQUNmLFFBQUksQ0FBQ0MsTUFBTSxDQUFDWCxHQUFELEVBQU1VLEdBQU4sQ0FBWCxFQUF1QjtBQUN2QlYsSUFBQUEsR0FBRyxHQUFHQSxHQUFHLENBQUNVLEdBQUQsQ0FBVDtBQUNEOztBQUVELE1BQUksQ0FBQ0MsTUFBTSxDQUFDWCxHQUFELEVBQU1LLElBQU4sQ0FBWCxFQUF3Qjs7QUFFeEIsTUFBSVMsS0FBSyxDQUFDQyxPQUFOLENBQWNmLEdBQWQsQ0FBSixFQUF3QjtBQUN0QkEsSUFBQUEsR0FBRyxDQUFDZ0IsTUFBSixDQUFXWCxJQUFYLEVBQWlCLENBQWpCO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsV0FBT0wsR0FBRyxDQUFDSyxJQUFELENBQVY7QUFDRDtBQUNGLENBbEJEOztBQW9CQSxTQUFTTSxNQUFULENBQWdCWCxHQUFoQixFQUFxQmlCLElBQXJCLEVBQTJCO0FBQ3pCLE1BQUlDLFFBQVEsQ0FBQ2xCLEdBQUQsQ0FBWixFQUFtQjtBQUNqQixXQUFPQSxHQUFHLENBQUNpQixJQUFELENBQUgsS0FBY0UsU0FBZCxJQUEyQkMsY0FBYyxDQUFDcEIsR0FBRCxFQUFNaUIsSUFBTixDQUFoRDtBQUNEOztBQUVELE1BQUlILEtBQUssQ0FBQ0MsT0FBTixDQUFjZixHQUFkLENBQUosRUFBd0I7QUFDdEIsV0FBTyxDQUFDcUIsS0FBSyxDQUFDQyxRQUFRLENBQUNMLElBQUQsRUFBTyxFQUFQLENBQVQsQ0FBYjtBQUNEOztBQUVELFNBQU8sS0FBUDtBQUNEOztBQUVELFNBQVNHLGNBQVQsQ0FBd0JwQixHQUF4QixFQUE2QmlCLElBQTdCLEVBQW1DO0FBQ2pDLFNBQU9NLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkosY0FBakIsQ0FBZ0NLLElBQWhDLENBQXFDekIsR0FBckMsRUFBMENpQixJQUExQyxDQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsUUFBVCxDQUFrQmxCLEdBQWxCLEVBQXVCO0FBQ3JCLFNBQU91QixNQUFNLENBQUNDLFNBQVAsQ0FBaUJFLFFBQWpCLENBQTBCRCxJQUExQixDQUErQnpCLEdBQS9CLE1BQXdDLGlCQUEvQztBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4uL3NoYXJlZC9ub2RlX21vZHVsZXMvQGVpdmlmai9kb3QvaW5kZXguanM/YTZiOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNldCBnaXZlbiBgcGF0aGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuc2V0ID0gZnVuY3Rpb24ob2JqLCBwYXRoLCB2YWwpIHtcbiAgdmFyIHNlZ3MgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHZhciBhdHRyID0gc2Vncy5wb3AoKTtcbiAgdmFyIHNyYyA9IG9iajtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ3MubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2VnID0gc2Vnc1tpXTtcbiAgICBpZiAoIWlzU2FmZShvYmosIHNlZykpIHJldHVybiBzcmM7XG4gICAgb2JqW3NlZ10gPSBvYmpbc2VnXSB8fCB7fTtcbiAgICBvYmogPSBvYmpbc2VnXTtcbiAgfVxuXG4gIGlmIChpc1NhZmUob2JqLCBhdHRyKSkge1xuICAgIG9ialthdHRyXSA9IHZhbDtcbiAgfVxuXG4gIHJldHVybiBzcmM7XG59O1xuXG4vKipcbiAqIEdldCBnaXZlbiBgcGF0aGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuZ2V0ID0gZnVuY3Rpb24ob2JqLCBwYXRoKSB7XG4gIHZhciBzZWdzID0gcGF0aC5zcGxpdCgnLicpO1xuICB2YXIgYXR0ciA9IHNlZ3MucG9wKCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNlZyA9IHNlZ3NbaV07XG4gICAgaWYgKCFvYmpbc2VnXSkgcmV0dXJuO1xuICAgIG9iaiA9IG9ialtzZWddO1xuICB9XG5cbiAgcmV0dXJuIG9ialthdHRyXTtcbn07XG5cbi8qKlxuICogRGVsZXRlIGdpdmVuIGBwYXRoYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoXG4gKiBAcmV0dXJuIHtNaXhlZH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5kZWxldGUgPSBmdW5jdGlvbihvYmosIHBhdGgpIHtcbiAgdmFyIHNlZ3MgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHZhciBhdHRyID0gc2Vncy5wb3AoKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ3MubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2VnID0gc2Vnc1tpXTtcbiAgICBpZiAoIW9ialtzZWddKSByZXR1cm47XG4gICAgaWYgKCFpc1NhZmUob2JqLCBzZWcpKSByZXR1cm47XG4gICAgb2JqID0gb2JqW3NlZ107XG4gIH1cblxuICBpZiAoIWlzU2FmZShvYmosIGF0dHIpKSByZXR1cm47XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIG9iai5zcGxpY2UoYXR0ciwgMSk7XG4gIH0gZWxzZSB7XG4gICAgZGVsZXRlIG9ialthdHRyXTtcbiAgfVxufTtcblxuZnVuY3Rpb24gaXNTYWZlKG9iaiwgcHJvcCkge1xuICBpZiAoaXNPYmplY3Qob2JqKSkge1xuICAgIHJldHVybiBvYmpbcHJvcF0gPT09IHVuZGVmaW5lZCB8fCBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApO1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIHJldHVybiAhaXNOYU4ocGFyc2VJbnQocHJvcCwgMTApKTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cblxuZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsInNldCIsIm9iaiIsInBhdGgiLCJ2YWwiLCJzZWdzIiwic3BsaXQiLCJhdHRyIiwicG9wIiwic3JjIiwiaSIsImxlbmd0aCIsInNlZyIsImlzU2FmZSIsImdldCIsImRlbGV0ZSIsIkFycmF5IiwiaXNBcnJheSIsInNwbGljZSIsInByb3AiLCJpc09iamVjdCIsInVuZGVmaW5lZCIsImhhc093blByb3BlcnR5IiwiaXNOYU4iLCJwYXJzZUludCIsIk9iamVjdCIsInByb3RvdHlwZSIsImNhbGwiLCJ0b1N0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/node_modules/@eivifj/dot/index.js\n");

/***/ }),

/***/ "../shared/node_modules/component-type/index.js":
/*!******************************************************!*\
  !*** ../shared/node_modules/component-type/index.js ***!
  \******************************************************/
/***/ ((module) => {

eval("/**\n * toString ref.\n */\nvar toString = Object.prototype.toString;\n/**\n * Return the type of `val`.\n *\n * @param {Mixed} val\n * @return {String}\n * @api public\n */\n\nmodule.exports = function (val) {\n  switch (toString.call(val)) {\n    case '[object Date]':\n      return 'date';\n\n    case '[object RegExp]':\n      return 'regexp';\n\n    case '[object Arguments]':\n      return 'arguments';\n\n    case '[object Array]':\n      return 'array';\n\n    case '[object Error]':\n      return 'error';\n  }\n\n  if (val === null) return 'null';\n  if (val === undefined) return 'undefined';\n  if (val !== val) return 'nan';\n  if (val && val.nodeType === 1) return 'element';\n  if (isBuffer(val)) return 'buffer';\n  val = val.valueOf ? val.valueOf() : Object.prototype.valueOf.apply(val);\n  return typeof val;\n}; // code borrowed from https://github.com/feross/is-buffer/blob/master/index.js\n\n\nfunction isBuffer(obj) {\n  return !!(obj != null && (obj._isBuffer || // For Safari 5-7 (missing Object.prototype.constructor)\n  obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9jb21wb25lbnQtdHlwZS9pbmRleC5qcz9iYWRmIl0sIm5hbWVzIjpbInRvU3RyaW5nIiwiT2JqZWN0IiwicHJvdG90eXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsInZhbCIsImNhbGwiLCJ1bmRlZmluZWQiLCJub2RlVHlwZSIsImlzQnVmZmVyIiwidmFsdWVPZiIsImFwcGx5Iiwib2JqIiwiX2lzQnVmZmVyIiwiY29uc3RydWN0b3IiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUVBLElBQUlBLFFBQVEsR0FBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCRixRQUFoQztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBRyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBU0MsR0FBVCxFQUFhO0FBQzVCLFVBQVFMLFFBQVEsQ0FBQ00sSUFBVCxDQUFjRCxHQUFkLENBQVI7QUFDRSxTQUFLLGVBQUw7QUFBc0IsYUFBTyxNQUFQOztBQUN0QixTQUFLLGlCQUFMO0FBQXdCLGFBQU8sUUFBUDs7QUFDeEIsU0FBSyxvQkFBTDtBQUEyQixhQUFPLFdBQVA7O0FBQzNCLFNBQUssZ0JBQUw7QUFBdUIsYUFBTyxPQUFQOztBQUN2QixTQUFLLGdCQUFMO0FBQXVCLGFBQU8sT0FBUDtBQUx6Qjs7QUFRQSxNQUFJQSxHQUFHLEtBQUssSUFBWixFQUFrQixPQUFPLE1BQVA7QUFDbEIsTUFBSUEsR0FBRyxLQUFLRSxTQUFaLEVBQXVCLE9BQU8sV0FBUDtBQUN2QixNQUFJRixHQUFHLEtBQUtBLEdBQVosRUFBaUIsT0FBTyxLQUFQO0FBQ2pCLE1BQUlBLEdBQUcsSUFBSUEsR0FBRyxDQUFDRyxRQUFKLEtBQWlCLENBQTVCLEVBQStCLE9BQU8sU0FBUDtBQUUvQixNQUFJQyxRQUFRLENBQUNKLEdBQUQsQ0FBWixFQUFtQixPQUFPLFFBQVA7QUFFbkJBLEVBQUFBLEdBQUcsR0FBR0EsR0FBRyxDQUFDSyxPQUFKLEdBQ0ZMLEdBQUcsQ0FBQ0ssT0FBSixFQURFLEdBRUZULE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQlEsT0FBakIsQ0FBeUJDLEtBQXpCLENBQStCTixHQUEvQixDQUZKO0FBSUEsU0FBTyxPQUFPQSxHQUFkO0FBQ0QsQ0FyQkQsQyxDQXVCQTs7O0FBQ0EsU0FBU0ksUUFBVCxDQUFrQkcsR0FBbEIsRUFBdUI7QUFDckIsU0FBTyxDQUFDLEVBQUVBLEdBQUcsSUFBSSxJQUFQLEtBQ1BBLEdBQUcsQ0FBQ0MsU0FBSixJQUFpQjtBQUNmRCxFQUFBQSxHQUFHLENBQUNFLFdBQUosSUFDRCxPQUFPRixHQUFHLENBQUNFLFdBQUosQ0FBZ0JMLFFBQXZCLEtBQW9DLFVBRG5DLElBRURHLEdBQUcsQ0FBQ0UsV0FBSixDQUFnQkwsUUFBaEIsQ0FBeUJHLEdBQXpCLENBSk0sQ0FBRixDQUFSO0FBTUQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIHRvU3RyaW5nIHJlZi5cbiAqL1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIFJldHVybiB0aGUgdHlwZSBvZiBgdmFsYC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwpe1xuICBzd2l0Y2ggKHRvU3RyaW5nLmNhbGwodmFsKSkge1xuICAgIGNhc2UgJ1tvYmplY3QgRGF0ZV0nOiByZXR1cm4gJ2RhdGUnO1xuICAgIGNhc2UgJ1tvYmplY3QgUmVnRXhwXSc6IHJldHVybiAncmVnZXhwJztcbiAgICBjYXNlICdbb2JqZWN0IEFyZ3VtZW50c10nOiByZXR1cm4gJ2FyZ3VtZW50cyc7XG4gICAgY2FzZSAnW29iamVjdCBBcnJheV0nOiByZXR1cm4gJ2FycmF5JztcbiAgICBjYXNlICdbb2JqZWN0IEVycm9yXSc6IHJldHVybiAnZXJyb3InO1xuICB9XG5cbiAgaWYgKHZhbCA9PT0gbnVsbCkgcmV0dXJuICdudWxsJztcbiAgaWYgKHZhbCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJ3VuZGVmaW5lZCc7XG4gIGlmICh2YWwgIT09IHZhbCkgcmV0dXJuICduYW4nO1xuICBpZiAodmFsICYmIHZhbC5ub2RlVHlwZSA9PT0gMSkgcmV0dXJuICdlbGVtZW50JztcblxuICBpZiAoaXNCdWZmZXIodmFsKSkgcmV0dXJuICdidWZmZXInO1xuXG4gIHZhbCA9IHZhbC52YWx1ZU9mXG4gICAgPyB2YWwudmFsdWVPZigpXG4gICAgOiBPYmplY3QucHJvdG90eXBlLnZhbHVlT2YuYXBwbHkodmFsKTtcblxuICByZXR1cm4gdHlwZW9mIHZhbDtcbn07XG5cbi8vIGNvZGUgYm9ycm93ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2lzLWJ1ZmZlci9ibG9iL21hc3Rlci9pbmRleC5qc1xuZnVuY3Rpb24gaXNCdWZmZXIob2JqKSB7XG4gIHJldHVybiAhIShvYmogIT0gbnVsbCAmJlxuICAgIChvYmouX2lzQnVmZmVyIHx8IC8vIEZvciBTYWZhcmkgNS03IChtaXNzaW5nIE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IpXG4gICAgICAob2JqLmNvbnN0cnVjdG9yICYmXG4gICAgICB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmXG4gICAgICBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKSlcbiAgICApKVxufVxuIl0sImZpbGUiOiIuLi9zaGFyZWQvbm9kZV9tb2R1bGVzL2NvbXBvbmVudC10eXBlL2luZGV4LmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/node_modules/component-type/index.js\n");

/***/ }),

/***/ "../shared/node_modules/esprima/dist/esprima.js":
/*!******************************************************!*\
  !*** ../shared/node_modules/esprima/dist/esprima.js ***!
  \******************************************************/
/***/ (function(module) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n  /* istanbul ignore next */\n  if (true) module.exports = factory();else {}\n})(this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n      // The require function\n\n      /******/\n\n      function __nested_webpack_require_646__(moduleId) {\n        /******/\n        // Check if module is in cache\n\n        /* istanbul ignore if */\n\n        /******/\n        if (installedModules[moduleId])\n          /******/\n          return installedModules[moduleId].exports;\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n        var module = installedModules[moduleId] = {\n          /******/\n          exports: {},\n\n          /******/\n          id: moduleId,\n\n          /******/\n          loaded: false\n          /******/\n\n        };\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_646__);\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.loaded = true;\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __nested_webpack_require_646__.m = modules;\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __nested_webpack_require_646__.c = installedModules;\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n      __nested_webpack_require_646__.p = \"\";\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __nested_webpack_require_646__(0);\n      /******/\n    }\n    /************************************************************************/\n\n    /******/\n    ([\n    /* 0 */\n\n    /***/\n    function (module, exports, __nested_webpack_require_2253__) {\n      \"use strict\";\n      /*\n        Copyright JS Foundation and other contributors, https://js.foundation/\n      \t  Redistribution and use in source and binary forms, with or without\n        modification, are permitted provided that the following conditions are met:\n      \t    * Redistributions of source code must retain the above copyright\n            notice, this list of conditions and the following disclaimer.\n          * Redistributions in binary form must reproduce the above copyright\n            notice, this list of conditions and the following disclaimer in the\n            documentation and/or other materials provided with the distribution.\n      \t  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n        ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n        DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n        (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n        LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n        ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n        (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n        THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n      */\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var comment_handler_1 = __nested_webpack_require_2253__(1);\n\n      var jsx_parser_1 = __nested_webpack_require_2253__(3);\n\n      var parser_1 = __nested_webpack_require_2253__(8);\n\n      var tokenizer_1 = __nested_webpack_require_2253__(15);\n\n      function parse(code, options, delegate) {\n        var commentHandler = null;\n\n        var proxyDelegate = function (node, metadata) {\n          if (delegate) {\n            delegate(node, metadata);\n          }\n\n          if (commentHandler) {\n            commentHandler.visit(node, metadata);\n          }\n        };\n\n        var parserDelegate = typeof delegate === 'function' ? proxyDelegate : null;\n        var collectComment = false;\n\n        if (options) {\n          collectComment = typeof options.comment === 'boolean' && options.comment;\n          var attachComment = typeof options.attachComment === 'boolean' && options.attachComment;\n\n          if (collectComment || attachComment) {\n            commentHandler = new comment_handler_1.CommentHandler();\n            commentHandler.attach = attachComment;\n            options.comment = true;\n            parserDelegate = proxyDelegate;\n          }\n        }\n\n        var isModule = false;\n\n        if (options && typeof options.sourceType === 'string') {\n          isModule = options.sourceType === 'module';\n        }\n\n        var parser;\n\n        if (options && typeof options.jsx === 'boolean' && options.jsx) {\n          parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);\n        } else {\n          parser = new parser_1.Parser(code, options, parserDelegate);\n        }\n\n        var program = isModule ? parser.parseModule() : parser.parseScript();\n        var ast = program;\n\n        if (collectComment && commentHandler) {\n          ast.comments = commentHandler.comments;\n        }\n\n        if (parser.config.tokens) {\n          ast.tokens = parser.tokens;\n        }\n\n        if (parser.config.tolerant) {\n          ast.errors = parser.errorHandler.errors;\n        }\n\n        return ast;\n      }\n\n      exports.parse = parse;\n\n      function parseModule(code, options, delegate) {\n        var parsingOptions = options || {};\n        parsingOptions.sourceType = 'module';\n        return parse(code, parsingOptions, delegate);\n      }\n\n      exports.parseModule = parseModule;\n\n      function parseScript(code, options, delegate) {\n        var parsingOptions = options || {};\n        parsingOptions.sourceType = 'script';\n        return parse(code, parsingOptions, delegate);\n      }\n\n      exports.parseScript = parseScript;\n\n      function tokenize(code, options, delegate) {\n        var tokenizer = new tokenizer_1.Tokenizer(code, options);\n        var tokens;\n        tokens = [];\n\n        try {\n          while (true) {\n            var token = tokenizer.getNextToken();\n\n            if (!token) {\n              break;\n            }\n\n            if (delegate) {\n              token = delegate(token);\n            }\n\n            tokens.push(token);\n          }\n        } catch (e) {\n          tokenizer.errorHandler.tolerate(e);\n        }\n\n        if (tokenizer.errorHandler.tolerant) {\n          tokens.errors = tokenizer.errors();\n        }\n\n        return tokens;\n      }\n\n      exports.tokenize = tokenize;\n\n      var syntax_1 = __nested_webpack_require_2253__(2);\n\n      exports.Syntax = syntax_1.Syntax; // Sync with *.json manifests.\n\n      exports.version = '4.0.1';\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports, __nested_webpack_require_7272__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var syntax_1 = __nested_webpack_require_7272__(2);\n\n      var CommentHandler = function () {\n        function CommentHandler() {\n          this.attach = false;\n          this.comments = [];\n          this.stack = [];\n          this.leading = [];\n          this.trailing = [];\n        }\n\n        CommentHandler.prototype.insertInnerComments = function (node, metadata) {\n          //  innnerComments for properties empty block\n          //  `function a() {/** comments **\\/}`\n          if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {\n            var innerComments = [];\n\n            for (var i = this.leading.length - 1; i >= 0; --i) {\n              var entry = this.leading[i];\n\n              if (metadata.end.offset >= entry.start) {\n                innerComments.unshift(entry.comment);\n                this.leading.splice(i, 1);\n                this.trailing.splice(i, 1);\n              }\n            }\n\n            if (innerComments.length) {\n              node.innerComments = innerComments;\n            }\n          }\n        };\n\n        CommentHandler.prototype.findTrailingComments = function (metadata) {\n          var trailingComments = [];\n\n          if (this.trailing.length > 0) {\n            for (var i = this.trailing.length - 1; i >= 0; --i) {\n              var entry_1 = this.trailing[i];\n\n              if (entry_1.start >= metadata.end.offset) {\n                trailingComments.unshift(entry_1.comment);\n              }\n            }\n\n            this.trailing.length = 0;\n            return trailingComments;\n          }\n\n          var entry = this.stack[this.stack.length - 1];\n\n          if (entry && entry.node.trailingComments) {\n            var firstComment = entry.node.trailingComments[0];\n\n            if (firstComment && firstComment.range[0] >= metadata.end.offset) {\n              trailingComments = entry.node.trailingComments;\n              delete entry.node.trailingComments;\n            }\n          }\n\n          return trailingComments;\n        };\n\n        CommentHandler.prototype.findLeadingComments = function (metadata) {\n          var leadingComments = [];\n          var target;\n\n          while (this.stack.length > 0) {\n            var entry = this.stack[this.stack.length - 1];\n\n            if (entry && entry.start >= metadata.start.offset) {\n              target = entry.node;\n              this.stack.pop();\n            } else {\n              break;\n            }\n          }\n\n          if (target) {\n            var count = target.leadingComments ? target.leadingComments.length : 0;\n\n            for (var i = count - 1; i >= 0; --i) {\n              var comment = target.leadingComments[i];\n\n              if (comment.range[1] <= metadata.start.offset) {\n                leadingComments.unshift(comment);\n                target.leadingComments.splice(i, 1);\n              }\n            }\n\n            if (target.leadingComments && target.leadingComments.length === 0) {\n              delete target.leadingComments;\n            }\n\n            return leadingComments;\n          }\n\n          for (var i = this.leading.length - 1; i >= 0; --i) {\n            var entry = this.leading[i];\n\n            if (entry.start <= metadata.start.offset) {\n              leadingComments.unshift(entry.comment);\n              this.leading.splice(i, 1);\n            }\n          }\n\n          return leadingComments;\n        };\n\n        CommentHandler.prototype.visitNode = function (node, metadata) {\n          if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {\n            return;\n          }\n\n          this.insertInnerComments(node, metadata);\n          var trailingComments = this.findTrailingComments(metadata);\n          var leadingComments = this.findLeadingComments(metadata);\n\n          if (leadingComments.length > 0) {\n            node.leadingComments = leadingComments;\n          }\n\n          if (trailingComments.length > 0) {\n            node.trailingComments = trailingComments;\n          }\n\n          this.stack.push({\n            node: node,\n            start: metadata.start.offset\n          });\n        };\n\n        CommentHandler.prototype.visitComment = function (node, metadata) {\n          var type = node.type[0] === 'L' ? 'Line' : 'Block';\n          var comment = {\n            type: type,\n            value: node.value\n          };\n\n          if (node.range) {\n            comment.range = node.range;\n          }\n\n          if (node.loc) {\n            comment.loc = node.loc;\n          }\n\n          this.comments.push(comment);\n\n          if (this.attach) {\n            var entry = {\n              comment: {\n                type: type,\n                value: node.value,\n                range: [metadata.start.offset, metadata.end.offset]\n              },\n              start: metadata.start.offset\n            };\n\n            if (node.loc) {\n              entry.comment.loc = node.loc;\n            }\n\n            node.type = type;\n            this.leading.push(entry);\n            this.trailing.push(entry);\n          }\n        };\n\n        CommentHandler.prototype.visit = function (node, metadata) {\n          if (node.type === 'LineComment') {\n            this.visitComment(node, metadata);\n          } else if (node.type === 'BlockComment') {\n            this.visitComment(node, metadata);\n          } else if (this.attach) {\n            this.visitNode(node, metadata);\n          }\n        };\n\n        return CommentHandler;\n      }();\n\n      exports.CommentHandler = CommentHandler;\n      /***/\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        AssignmentPattern: 'AssignmentPattern',\n        ArrayExpression: 'ArrayExpression',\n        ArrayPattern: 'ArrayPattern',\n        ArrowFunctionExpression: 'ArrowFunctionExpression',\n        AwaitExpression: 'AwaitExpression',\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ClassBody: 'ClassBody',\n        ClassDeclaration: 'ClassDeclaration',\n        ClassExpression: 'ClassExpression',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExportAllDeclaration: 'ExportAllDeclaration',\n        ExportDefaultDeclaration: 'ExportDefaultDeclaration',\n        ExportNamedDeclaration: 'ExportNamedDeclaration',\n        ExportSpecifier: 'ExportSpecifier',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForOfStatement: 'ForOfStatement',\n        ForInStatement: 'ForInStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        ImportDeclaration: 'ImportDeclaration',\n        ImportDefaultSpecifier: 'ImportDefaultSpecifier',\n        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\n        ImportSpecifier: 'ImportSpecifier',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        MetaProperty: 'MetaProperty',\n        MethodDefinition: 'MethodDefinition',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        ObjectPattern: 'ObjectPattern',\n        Program: 'Program',\n        Property: 'Property',\n        RestElement: 'RestElement',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SpreadElement: 'SpreadElement',\n        Super: 'Super',\n        SwitchCase: 'SwitchCase',\n        SwitchStatement: 'SwitchStatement',\n        TaggedTemplateExpression: 'TaggedTemplateExpression',\n        TemplateElement: 'TemplateElement',\n        TemplateLiteral: 'TemplateLiteral',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement',\n        YieldExpression: 'YieldExpression'\n      };\n      /***/\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports, __nested_webpack_require_16100__) {\n      \"use strict\";\n      /* istanbul ignore next */\n\n      var __extends = this && this.__extends || function () {\n        var extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return function (d, b) {\n          extendStatics(d, b);\n\n          function __() {\n            this.constructor = d;\n          }\n\n          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n      }();\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var character_1 = __nested_webpack_require_16100__(4);\n\n      var JSXNode = __nested_webpack_require_16100__(5);\n\n      var jsx_syntax_1 = __nested_webpack_require_16100__(6);\n\n      var Node = __nested_webpack_require_16100__(7);\n\n      var parser_1 = __nested_webpack_require_16100__(8);\n\n      var token_1 = __nested_webpack_require_16100__(13);\n\n      var xhtml_entities_1 = __nested_webpack_require_16100__(14);\n\n      token_1.TokenName[100\n      /* Identifier */\n      ] = 'JSXIdentifier';\n      token_1.TokenName[101\n      /* Text */\n      ] = 'JSXText'; // Fully qualified element name, e.g. <svg:path> returns \"svg:path\"\n\n      function getQualifiedElementName(elementName) {\n        var qualifiedName;\n\n        switch (elementName.type) {\n          case jsx_syntax_1.JSXSyntax.JSXIdentifier:\n            var id = elementName;\n            qualifiedName = id.name;\n            break;\n\n          case jsx_syntax_1.JSXSyntax.JSXNamespacedName:\n            var ns = elementName;\n            qualifiedName = getQualifiedElementName(ns.namespace) + ':' + getQualifiedElementName(ns.name);\n            break;\n\n          case jsx_syntax_1.JSXSyntax.JSXMemberExpression:\n            var expr = elementName;\n            qualifiedName = getQualifiedElementName(expr.object) + '.' + getQualifiedElementName(expr.property);\n            break;\n\n          /* istanbul ignore next */\n\n          default:\n            break;\n        }\n\n        return qualifiedName;\n      }\n\n      var JSXParser = function (_super) {\n        __extends(JSXParser, _super);\n\n        function JSXParser(code, options, delegate) {\n          return _super.call(this, code, options, delegate) || this;\n        }\n\n        JSXParser.prototype.parsePrimaryExpression = function () {\n          return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);\n        };\n\n        JSXParser.prototype.startJSX = function () {\n          // Unwind the scanner before the lookahead token.\n          this.scanner.index = this.startMarker.index;\n          this.scanner.lineNumber = this.startMarker.line;\n          this.scanner.lineStart = this.startMarker.index - this.startMarker.column;\n        };\n\n        JSXParser.prototype.finishJSX = function () {\n          // Prime the next lookahead.\n          this.nextToken();\n        };\n\n        JSXParser.prototype.reenterJSX = function () {\n          this.startJSX();\n          this.expectJSX('}'); // Pop the closing '}' added from the lookahead.\n\n          if (this.config.tokens) {\n            this.tokens.pop();\n          }\n        };\n\n        JSXParser.prototype.createJSXNode = function () {\n          this.collectComments();\n          return {\n            index: this.scanner.index,\n            line: this.scanner.lineNumber,\n            column: this.scanner.index - this.scanner.lineStart\n          };\n        };\n\n        JSXParser.prototype.createJSXChildNode = function () {\n          return {\n            index: this.scanner.index,\n            line: this.scanner.lineNumber,\n            column: this.scanner.index - this.scanner.lineStart\n          };\n        };\n\n        JSXParser.prototype.scanXHTMLEntity = function (quote) {\n          var result = '&';\n          var valid = true;\n          var terminated = false;\n          var numeric = false;\n          var hex = false;\n\n          while (!this.scanner.eof() && valid && !terminated) {\n            var ch = this.scanner.source[this.scanner.index];\n\n            if (ch === quote) {\n              break;\n            }\n\n            terminated = ch === ';';\n            result += ch;\n            ++this.scanner.index;\n\n            if (!terminated) {\n              switch (result.length) {\n                case 2:\n                  // e.g. '&#123;'\n                  numeric = ch === '#';\n                  break;\n\n                case 3:\n                  if (numeric) {\n                    // e.g. '&#x41;'\n                    hex = ch === 'x';\n                    valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));\n                    numeric = numeric && !hex;\n                  }\n\n                  break;\n\n                default:\n                  valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));\n                  valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));\n                  break;\n              }\n            }\n          }\n\n          if (valid && terminated && result.length > 2) {\n            // e.g. '&#x41;' becomes just '#x41'\n            var str = result.substr(1, result.length - 2);\n\n            if (numeric && str.length > 1) {\n              result = String.fromCharCode(parseInt(str.substr(1), 10));\n            } else if (hex && str.length > 2) {\n              result = String.fromCharCode(parseInt('0' + str.substr(1), 16));\n            } else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {\n              result = xhtml_entities_1.XHTMLEntities[str];\n            }\n          }\n\n          return result;\n        }; // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.\n\n\n        JSXParser.prototype.lexJSX = function () {\n          var cp = this.scanner.source.charCodeAt(this.scanner.index); // < > / : = { }\n\n          if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {\n            var value = this.scanner.source[this.scanner.index++];\n            return {\n              type: 7\n              /* Punctuator */\n              ,\n              value: value,\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: this.scanner.index - 1,\n              end: this.scanner.index\n            };\n          } // \" '\n\n\n          if (cp === 34 || cp === 39) {\n            var start = this.scanner.index;\n            var quote = this.scanner.source[this.scanner.index++];\n            var str = '';\n\n            while (!this.scanner.eof()) {\n              var ch = this.scanner.source[this.scanner.index++];\n\n              if (ch === quote) {\n                break;\n              } else if (ch === '&') {\n                str += this.scanXHTMLEntity(quote);\n              } else {\n                str += ch;\n              }\n            }\n\n            return {\n              type: 8\n              /* StringLiteral */\n              ,\n              value: str,\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: start,\n              end: this.scanner.index\n            };\n          } // ... or .\n\n\n          if (cp === 46) {\n            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);\n            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);\n            var value = n1 === 46 && n2 === 46 ? '...' : '.';\n            var start = this.scanner.index;\n            this.scanner.index += value.length;\n            return {\n              type: 7\n              /* Punctuator */\n              ,\n              value: value,\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: start,\n              end: this.scanner.index\n            };\n          } // `\n\n\n          if (cp === 96) {\n            // Only placeholder, since it will be rescanned as a real assignment expression.\n            return {\n              type: 10\n              /* Template */\n              ,\n              value: '',\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: this.scanner.index,\n              end: this.scanner.index\n            };\n          } // Identifer can not contain backslash (char code 92).\n\n\n          if (character_1.Character.isIdentifierStart(cp) && cp !== 92) {\n            var start = this.scanner.index;\n            ++this.scanner.index;\n\n            while (!this.scanner.eof()) {\n              var ch = this.scanner.source.charCodeAt(this.scanner.index);\n\n              if (character_1.Character.isIdentifierPart(ch) && ch !== 92) {\n                ++this.scanner.index;\n              } else if (ch === 45) {\n                // Hyphen (char code 45) can be part of an identifier.\n                ++this.scanner.index;\n              } else {\n                break;\n              }\n            }\n\n            var id = this.scanner.source.slice(start, this.scanner.index);\n            return {\n              type: 100\n              /* Identifier */\n              ,\n              value: id,\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: start,\n              end: this.scanner.index\n            };\n          }\n\n          return this.scanner.lex();\n        };\n\n        JSXParser.prototype.nextJSXToken = function () {\n          this.collectComments();\n          this.startMarker.index = this.scanner.index;\n          this.startMarker.line = this.scanner.lineNumber;\n          this.startMarker.column = this.scanner.index - this.scanner.lineStart;\n          var token = this.lexJSX();\n          this.lastMarker.index = this.scanner.index;\n          this.lastMarker.line = this.scanner.lineNumber;\n          this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n\n          if (this.config.tokens) {\n            this.tokens.push(this.convertToken(token));\n          }\n\n          return token;\n        };\n\n        JSXParser.prototype.nextJSXText = function () {\n          this.startMarker.index = this.scanner.index;\n          this.startMarker.line = this.scanner.lineNumber;\n          this.startMarker.column = this.scanner.index - this.scanner.lineStart;\n          var start = this.scanner.index;\n          var text = '';\n\n          while (!this.scanner.eof()) {\n            var ch = this.scanner.source[this.scanner.index];\n\n            if (ch === '{' || ch === '<') {\n              break;\n            }\n\n            ++this.scanner.index;\n            text += ch;\n\n            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n              ++this.scanner.lineNumber;\n\n              if (ch === '\\r' && this.scanner.source[this.scanner.index] === '\\n') {\n                ++this.scanner.index;\n              }\n\n              this.scanner.lineStart = this.scanner.index;\n            }\n          }\n\n          this.lastMarker.index = this.scanner.index;\n          this.lastMarker.line = this.scanner.lineNumber;\n          this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n          var token = {\n            type: 101\n            /* Text */\n            ,\n            value: text,\n            lineNumber: this.scanner.lineNumber,\n            lineStart: this.scanner.lineStart,\n            start: start,\n            end: this.scanner.index\n          };\n\n          if (text.length > 0 && this.config.tokens) {\n            this.tokens.push(this.convertToken(token));\n          }\n\n          return token;\n        };\n\n        JSXParser.prototype.peekJSXToken = function () {\n          var state = this.scanner.saveState();\n          this.scanner.scanComments();\n          var next = this.lexJSX();\n          this.scanner.restoreState(state);\n          return next;\n        }; // Expect the next JSX token to match the specified punctuator.\n        // If not, an exception will be thrown.\n\n\n        JSXParser.prototype.expectJSX = function (value) {\n          var token = this.nextJSXToken();\n\n          if (token.type !== 7\n          /* Punctuator */\n          || token.value !== value) {\n            this.throwUnexpectedToken(token);\n          }\n        }; // Return true if the next JSX token matches the specified punctuator.\n\n\n        JSXParser.prototype.matchJSX = function (value) {\n          var next = this.peekJSXToken();\n          return next.type === 7\n          /* Punctuator */\n          && next.value === value;\n        };\n\n        JSXParser.prototype.parseJSXIdentifier = function () {\n          var node = this.createJSXNode();\n          var token = this.nextJSXToken();\n\n          if (token.type !== 100\n          /* Identifier */\n          ) {\n            this.throwUnexpectedToken(token);\n          }\n\n          return this.finalize(node, new JSXNode.JSXIdentifier(token.value));\n        };\n\n        JSXParser.prototype.parseJSXElementName = function () {\n          var node = this.createJSXNode();\n          var elementName = this.parseJSXIdentifier();\n\n          if (this.matchJSX(':')) {\n            var namespace = elementName;\n            this.expectJSX(':');\n            var name_1 = this.parseJSXIdentifier();\n            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));\n          } else if (this.matchJSX('.')) {\n            while (this.matchJSX('.')) {\n              var object = elementName;\n              this.expectJSX('.');\n              var property = this.parseJSXIdentifier();\n              elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));\n            }\n          }\n\n          return elementName;\n        };\n\n        JSXParser.prototype.parseJSXAttributeName = function () {\n          var node = this.createJSXNode();\n          var attributeName;\n          var identifier = this.parseJSXIdentifier();\n\n          if (this.matchJSX(':')) {\n            var namespace = identifier;\n            this.expectJSX(':');\n            var name_2 = this.parseJSXIdentifier();\n            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));\n          } else {\n            attributeName = identifier;\n          }\n\n          return attributeName;\n        };\n\n        JSXParser.prototype.parseJSXStringLiteralAttribute = function () {\n          var node = this.createJSXNode();\n          var token = this.nextJSXToken();\n\n          if (token.type !== 8\n          /* StringLiteral */\n          ) {\n            this.throwUnexpectedToken(token);\n          }\n\n          var raw = this.getTokenRaw(token);\n          return this.finalize(node, new Node.Literal(token.value, raw));\n        };\n\n        JSXParser.prototype.parseJSXExpressionAttribute = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('{');\n          this.finishJSX();\n\n          if (this.match('}')) {\n            this.tolerateError('JSX attributes must only be assigned a non-empty expression');\n          }\n\n          var expression = this.parseAssignmentExpression();\n          this.reenterJSX();\n          return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n        };\n\n        JSXParser.prototype.parseJSXAttributeValue = function () {\n          return this.matchJSX('{') ? this.parseJSXExpressionAttribute() : this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();\n        };\n\n        JSXParser.prototype.parseJSXNameValueAttribute = function () {\n          var node = this.createJSXNode();\n          var name = this.parseJSXAttributeName();\n          var value = null;\n\n          if (this.matchJSX('=')) {\n            this.expectJSX('=');\n            value = this.parseJSXAttributeValue();\n          }\n\n          return this.finalize(node, new JSXNode.JSXAttribute(name, value));\n        };\n\n        JSXParser.prototype.parseJSXSpreadAttribute = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('{');\n          this.expectJSX('...');\n          this.finishJSX();\n          var argument = this.parseAssignmentExpression();\n          this.reenterJSX();\n          return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));\n        };\n\n        JSXParser.prototype.parseJSXAttributes = function () {\n          var attributes = [];\n\n          while (!this.matchJSX('/') && !this.matchJSX('>')) {\n            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() : this.parseJSXNameValueAttribute();\n            attributes.push(attribute);\n          }\n\n          return attributes;\n        };\n\n        JSXParser.prototype.parseJSXOpeningElement = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('<');\n          var name = this.parseJSXElementName();\n          var attributes = this.parseJSXAttributes();\n          var selfClosing = this.matchJSX('/');\n\n          if (selfClosing) {\n            this.expectJSX('/');\n          }\n\n          this.expectJSX('>');\n          return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n        };\n\n        JSXParser.prototype.parseJSXBoundaryElement = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('<');\n\n          if (this.matchJSX('/')) {\n            this.expectJSX('/');\n            var name_3 = this.parseJSXElementName();\n            this.expectJSX('>');\n            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));\n          }\n\n          var name = this.parseJSXElementName();\n          var attributes = this.parseJSXAttributes();\n          var selfClosing = this.matchJSX('/');\n\n          if (selfClosing) {\n            this.expectJSX('/');\n          }\n\n          this.expectJSX('>');\n          return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n        };\n\n        JSXParser.prototype.parseJSXEmptyExpression = function () {\n          var node = this.createJSXChildNode();\n          this.collectComments();\n          this.lastMarker.index = this.scanner.index;\n          this.lastMarker.line = this.scanner.lineNumber;\n          this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n          return this.finalize(node, new JSXNode.JSXEmptyExpression());\n        };\n\n        JSXParser.prototype.parseJSXExpressionContainer = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('{');\n          var expression;\n\n          if (this.matchJSX('}')) {\n            expression = this.parseJSXEmptyExpression();\n            this.expectJSX('}');\n          } else {\n            this.finishJSX();\n            expression = this.parseAssignmentExpression();\n            this.reenterJSX();\n          }\n\n          return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n        };\n\n        JSXParser.prototype.parseJSXChildren = function () {\n          var children = [];\n\n          while (!this.scanner.eof()) {\n            var node = this.createJSXChildNode();\n            var token = this.nextJSXText();\n\n            if (token.start < token.end) {\n              var raw = this.getTokenRaw(token);\n              var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));\n              children.push(child);\n            }\n\n            if (this.scanner.source[this.scanner.index] === '{') {\n              var container = this.parseJSXExpressionContainer();\n              children.push(container);\n            } else {\n              break;\n            }\n          }\n\n          return children;\n        };\n\n        JSXParser.prototype.parseComplexJSXElement = function (el) {\n          var stack = [];\n\n          while (!this.scanner.eof()) {\n            el.children = el.children.concat(this.parseJSXChildren());\n            var node = this.createJSXChildNode();\n            var element = this.parseJSXBoundaryElement();\n\n            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {\n              var opening = element;\n\n              if (opening.selfClosing) {\n                var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));\n                el.children.push(child);\n              } else {\n                stack.push(el);\n                el = {\n                  node: node,\n                  opening: opening,\n                  closing: null,\n                  children: []\n                };\n              }\n            }\n\n            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {\n              el.closing = element;\n              var open_1 = getQualifiedElementName(el.opening.name);\n              var close_1 = getQualifiedElementName(el.closing.name);\n\n              if (open_1 !== close_1) {\n                this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);\n              }\n\n              if (stack.length > 0) {\n                var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));\n                el = stack[stack.length - 1];\n                el.children.push(child);\n                stack.pop();\n              } else {\n                break;\n              }\n            }\n          }\n\n          return el;\n        };\n\n        JSXParser.prototype.parseJSXElement = function () {\n          var node = this.createJSXNode();\n          var opening = this.parseJSXOpeningElement();\n          var children = [];\n          var closing = null;\n\n          if (!opening.selfClosing) {\n            var el = this.parseComplexJSXElement({\n              node: node,\n              opening: opening,\n              closing: closing,\n              children: children\n            });\n            children = el.children;\n            closing = el.closing;\n          }\n\n          return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));\n        };\n\n        JSXParser.prototype.parseJSXRoot = function () {\n          // Pop the opening '<' added from the lookahead.\n          if (this.config.tokens) {\n            this.tokens.pop();\n          }\n\n          this.startJSX();\n          var element = this.parseJSXElement();\n          this.finishJSX();\n          return element;\n        };\n\n        JSXParser.prototype.isStartOfExpression = function () {\n          return _super.prototype.isStartOfExpression.call(this) || this.match('<');\n        };\n\n        return JSXParser;\n      }(parser_1.Parser);\n\n      exports.JSXParser = JSXParser;\n      /***/\n    },\n    /* 4 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      }); // See also tools/generate-unicode-regex.js.\n\n      var Regex = {\n        // Unicode v8.0.0 NonAsciiIdentifierStart:\n        NonAsciiIdentifierStart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\n        // Unicode v8.0.0 NonAsciiIdentifierPart:\n        NonAsciiIdentifierPart: /[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/\n      };\n      exports.Character = {\n        /* tslint:disable:no-bitwise */\n        fromCodePoint: function (cp) {\n          return cp < 0x10000 ? String.fromCharCode(cp) : String.fromCharCode(0xD800 + (cp - 0x10000 >> 10)) + String.fromCharCode(0xDC00 + (cp - 0x10000 & 1023));\n        },\n        // https://tc39.github.io/ecma262/#sec-white-space\n        isWhiteSpace: function (cp) {\n          return cp === 0x20 || cp === 0x09 || cp === 0x0B || cp === 0x0C || cp === 0xA0 || cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0;\n        },\n        // https://tc39.github.io/ecma262/#sec-line-terminators\n        isLineTerminator: function (cp) {\n          return cp === 0x0A || cp === 0x0D || cp === 0x2028 || cp === 0x2029;\n        },\n        // https://tc39.github.io/ecma262/#sec-names-and-keywords\n        isIdentifierStart: function (cp) {\n          return cp === 0x24 || cp === 0x5F || cp >= 0x41 && cp <= 0x5A || cp >= 0x61 && cp <= 0x7A || cp === 0x5C || cp >= 0x80 && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp));\n        },\n        isIdentifierPart: function (cp) {\n          return cp === 0x24 || cp === 0x5F || cp >= 0x41 && cp <= 0x5A || cp >= 0x61 && cp <= 0x7A || cp >= 0x30 && cp <= 0x39 || cp === 0x5C || cp >= 0x80 && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp));\n        },\n        // https://tc39.github.io/ecma262/#sec-literals-numeric-literals\n        isDecimalDigit: function (cp) {\n          return cp >= 0x30 && cp <= 0x39; // 0..9\n        },\n        isHexDigit: function (cp) {\n          return cp >= 0x30 && cp <= 0x39 || cp >= 0x41 && cp <= 0x46 || cp >= 0x61 && cp <= 0x66; // a..f\n        },\n        isOctalDigit: function (cp) {\n          return cp >= 0x30 && cp <= 0x37; // 0..7\n        }\n      };\n      /***/\n    },\n    /* 5 */\n\n    /***/\n    function (module, exports, __nested_webpack_require_55631__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var jsx_syntax_1 = __nested_webpack_require_55631__(6);\n      /* tslint:disable:max-classes-per-file */\n\n\n      var JSXClosingElement = function () {\n        function JSXClosingElement(name) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;\n          this.name = name;\n        }\n\n        return JSXClosingElement;\n      }();\n\n      exports.JSXClosingElement = JSXClosingElement;\n\n      var JSXElement = function () {\n        function JSXElement(openingElement, children, closingElement) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXElement;\n          this.openingElement = openingElement;\n          this.children = children;\n          this.closingElement = closingElement;\n        }\n\n        return JSXElement;\n      }();\n\n      exports.JSXElement = JSXElement;\n\n      var JSXEmptyExpression = function () {\n        function JSXEmptyExpression() {\n          this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;\n        }\n\n        return JSXEmptyExpression;\n      }();\n\n      exports.JSXEmptyExpression = JSXEmptyExpression;\n\n      var JSXExpressionContainer = function () {\n        function JSXExpressionContainer(expression) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;\n          this.expression = expression;\n        }\n\n        return JSXExpressionContainer;\n      }();\n\n      exports.JSXExpressionContainer = JSXExpressionContainer;\n\n      var JSXIdentifier = function () {\n        function JSXIdentifier(name) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;\n          this.name = name;\n        }\n\n        return JSXIdentifier;\n      }();\n\n      exports.JSXIdentifier = JSXIdentifier;\n\n      var JSXMemberExpression = function () {\n        function JSXMemberExpression(object, property) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;\n          this.object = object;\n          this.property = property;\n        }\n\n        return JSXMemberExpression;\n      }();\n\n      exports.JSXMemberExpression = JSXMemberExpression;\n\n      var JSXAttribute = function () {\n        function JSXAttribute(name, value) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;\n          this.name = name;\n          this.value = value;\n        }\n\n        return JSXAttribute;\n      }();\n\n      exports.JSXAttribute = JSXAttribute;\n\n      var JSXNamespacedName = function () {\n        function JSXNamespacedName(namespace, name) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;\n          this.namespace = namespace;\n          this.name = name;\n        }\n\n        return JSXNamespacedName;\n      }();\n\n      exports.JSXNamespacedName = JSXNamespacedName;\n\n      var JSXOpeningElement = function () {\n        function JSXOpeningElement(name, selfClosing, attributes) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;\n          this.name = name;\n          this.selfClosing = selfClosing;\n          this.attributes = attributes;\n        }\n\n        return JSXOpeningElement;\n      }();\n\n      exports.JSXOpeningElement = JSXOpeningElement;\n\n      var JSXSpreadAttribute = function () {\n        function JSXSpreadAttribute(argument) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;\n          this.argument = argument;\n        }\n\n        return JSXSpreadAttribute;\n      }();\n\n      exports.JSXSpreadAttribute = JSXSpreadAttribute;\n\n      var JSXText = function () {\n        function JSXText(value, raw) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXText;\n          this.value = value;\n          this.raw = raw;\n        }\n\n        return JSXText;\n      }();\n\n      exports.JSXText = JSXText;\n      /***/\n    },\n    /* 6 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.JSXSyntax = {\n        JSXAttribute: 'JSXAttribute',\n        JSXClosingElement: 'JSXClosingElement',\n        JSXElement: 'JSXElement',\n        JSXEmptyExpression: 'JSXEmptyExpression',\n        JSXExpressionContainer: 'JSXExpressionContainer',\n        JSXIdentifier: 'JSXIdentifier',\n        JSXMemberExpression: 'JSXMemberExpression',\n        JSXNamespacedName: 'JSXNamespacedName',\n        JSXOpeningElement: 'JSXOpeningElement',\n        JSXSpreadAttribute: 'JSXSpreadAttribute',\n        JSXText: 'JSXText'\n      };\n      /***/\n    },\n    /* 7 */\n\n    /***/\n    function (module, exports, __nested_webpack_require_60144__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var syntax_1 = __nested_webpack_require_60144__(2);\n      /* tslint:disable:max-classes-per-file */\n\n\n      var ArrayExpression = function () {\n        function ArrayExpression(elements) {\n          this.type = syntax_1.Syntax.ArrayExpression;\n          this.elements = elements;\n        }\n\n        return ArrayExpression;\n      }();\n\n      exports.ArrayExpression = ArrayExpression;\n\n      var ArrayPattern = function () {\n        function ArrayPattern(elements) {\n          this.type = syntax_1.Syntax.ArrayPattern;\n          this.elements = elements;\n        }\n\n        return ArrayPattern;\n      }();\n\n      exports.ArrayPattern = ArrayPattern;\n\n      var ArrowFunctionExpression = function () {\n        function ArrowFunctionExpression(params, body, expression) {\n          this.type = syntax_1.Syntax.ArrowFunctionExpression;\n          this.id = null;\n          this.params = params;\n          this.body = body;\n          this.generator = false;\n          this.expression = expression;\n          this.async = false;\n        }\n\n        return ArrowFunctionExpression;\n      }();\n\n      exports.ArrowFunctionExpression = ArrowFunctionExpression;\n\n      var AssignmentExpression = function () {\n        function AssignmentExpression(operator, left, right) {\n          this.type = syntax_1.Syntax.AssignmentExpression;\n          this.operator = operator;\n          this.left = left;\n          this.right = right;\n        }\n\n        return AssignmentExpression;\n      }();\n\n      exports.AssignmentExpression = AssignmentExpression;\n\n      var AssignmentPattern = function () {\n        function AssignmentPattern(left, right) {\n          this.type = syntax_1.Syntax.AssignmentPattern;\n          this.left = left;\n          this.right = right;\n        }\n\n        return AssignmentPattern;\n      }();\n\n      exports.AssignmentPattern = AssignmentPattern;\n\n      var AsyncArrowFunctionExpression = function () {\n        function AsyncArrowFunctionExpression(params, body, expression) {\n          this.type = syntax_1.Syntax.ArrowFunctionExpression;\n          this.id = null;\n          this.params = params;\n          this.body = body;\n          this.generator = false;\n          this.expression = expression;\n          this.async = true;\n        }\n\n        return AsyncArrowFunctionExpression;\n      }();\n\n      exports.AsyncArrowFunctionExpression = AsyncArrowFunctionExpression;\n\n      var AsyncFunctionDeclaration = function () {\n        function AsyncFunctionDeclaration(id, params, body) {\n          this.type = syntax_1.Syntax.FunctionDeclaration;\n          this.id = id;\n          this.params = params;\n          this.body = body;\n          this.generator = false;\n          this.expression = false;\n          this.async = true;\n        }\n\n        return AsyncFunctionDeclaration;\n      }();\n\n      exports.AsyncFunctionDeclaration = AsyncFunctionDeclaration;\n\n      var AsyncFunctionExpression = function () {\n        function AsyncFunctionExpression(id, params, body) {\n          this.type = syntax_1.Syntax.FunctionExpression;\n          this.id = id;\n          this.params = params;\n          this.body = body;\n          this.generator = false;\n          this.expression = false;\n          this.async = true;\n        }\n\n        return AsyncFunctionExpression;\n      }();\n\n      exports.AsyncFunctionExpression = AsyncFunctionExpression;\n\n      var AwaitExpression = function () {\n        function AwaitExpression(argument) {\n          this.type = syntax_1.Syntax.AwaitExpression;\n          this.argument = argument;\n        }\n\n        return AwaitExpression;\n      }();\n\n      exports.AwaitExpression = AwaitExpression;\n\n      var BinaryExpression = function () {\n        function BinaryExpression(operator, left, right) {\n          var logical = operator === '||' || operator === '&&';\n          this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;\n          this.operator = operator;\n          this.left = left;\n          this.right = right;\n        }\n\n        return BinaryExpression;\n      }();\n\n      exports.BinaryExpression = BinaryExpression;\n\n      var BlockStatement = function () {\n        function BlockStatement(body) {\n          this.type = syntax_1.Syntax.BlockStatement;\n          this.body = body;\n        }\n\n        return BlockStatement;\n      }();\n\n      exports.BlockStatement = BlockStatement;\n\n      var BreakStatement = function () {\n        function BreakStatement(label) {\n          this.type = syntax_1.Syntax.BreakStatement;\n          this.label = label;\n        }\n\n        return BreakStatement;\n      }();\n\n      exports.BreakStatement = BreakStatement;\n\n      var CallExpression = function () {\n        function CallExpression(callee, args) {\n          this.type = syntax_1.Syntax.CallExpression;\n          this.callee = callee;\n          this.arguments = args;\n        }\n\n        return CallExpression;\n      }();\n\n      exports.CallExpression = CallExpression;\n\n      var CatchClause = function () {\n        function CatchClause(param, body) {\n          this.type = syntax_1.Syntax.CatchClause;\n          this.param = param;\n          this.body = body;\n        }\n\n        return CatchClause;\n      }();\n\n      exports.CatchClause = CatchClause;\n\n      var ClassBody = function () {\n        function ClassBody(body) {\n          this.type = syntax_1.Syntax.ClassBody;\n          this.body = body;\n        }\n\n        return ClassBody;\n      }();\n\n      exports.ClassBody = ClassBody;\n\n      var ClassDeclaration = function () {\n        function ClassDeclaration(id, superClass, body) {\n          this.type = syntax_1.Syntax.ClassDeclaration;\n          this.id = id;\n          this.superClass = superClass;\n          this.body = body;\n        }\n\n        return ClassDeclaration;\n      }();\n\n      exports.ClassDeclaration = ClassDeclaration;\n\n      var ClassExpression = function () {\n        function ClassExpression(id, superClass, body) {\n          this.type = syntax_1.Syntax.ClassExpression;\n          this.id = id;\n          this.superClass = superClass;\n          this.body = body;\n        }\n\n        return ClassExpression;\n      }();\n\n      exports.ClassExpression = ClassExpression;\n\n      var ComputedMemberExpression = function () {\n        function ComputedMemberExpression(object, property) {\n          this.type = syntax_1.Syntax.MemberExpression;\n          this.computed = true;\n          this.object = object;\n          this.property = property;\n        }\n\n        return ComputedMemberExpression;\n      }();\n\n      exports.ComputedMemberExpression = ComputedMemberExpression;\n\n      var ConditionalExpression = function () {\n        function ConditionalExpression(test, consequent, alternate) {\n          this.type = syntax_1.Syntax.ConditionalExpression;\n          this.test = test;\n          this.consequent = consequent;\n          this.alternate = alternate;\n        }\n\n        return ConditionalExpression;\n      }();\n\n      exports.ConditionalExpression = ConditionalExpression;\n\n      var ContinueStatement = function () {\n        function ContinueStatement(label) {\n          this.type = syntax_1.Syntax.ContinueStatement;\n          this.label = label;\n        }\n\n        return ContinueStatement;\n      }();\n\n      exports.ContinueStatement = ContinueStatement;\n\n      var DebuggerStatement = function () {\n        function DebuggerStatement() {\n          this.type = syntax_1.Syntax.DebuggerStatement;\n        }\n\n        return DebuggerStatement;\n      }();\n\n      exports.DebuggerStatement = DebuggerStatement;\n\n      var Directive = function () {\n        function Directive(expression, directive) {\n          this.type = syntax_1.Syntax.ExpressionStatement;\n          this.expression = expression;\n          this.directive = directive;\n        }\n\n        return Directive;\n      }();\n\n      exports.Directive = Directive;\n\n      var DoWhileStatement = function () {\n        function DoWhileStatement(body, test) {\n          this.type = syntax_1.Syntax.DoWhileStatement;\n          this.body = body;\n          this.test = test;\n        }\n\n        return DoWhileStatement;\n      }();\n\n      exports.DoWhileStatement = DoWhileStatement;\n\n      var EmptyStatement = function () {\n        function EmptyStatement() {\n          this.type = syntax_1.Syntax.EmptyStatement;\n        }\n\n        return EmptyStatement;\n      }();\n\n      exports.EmptyStatement = EmptyStatement;\n\n      var ExportAllDeclaration = function () {\n        function ExportAllDeclaration(source) {\n          this.type = syntax_1.Syntax.ExportAllDeclaration;\n          this.source = source;\n        }\n\n        return ExportAllDeclaration;\n      }();\n\n      exports.ExportAllDeclaration = ExportAllDeclaration;\n\n      var ExportDefaultDeclaration = function () {\n        function ExportDefaultDeclaration(declaration) {\n          this.type = syntax_1.Syntax.ExportDefaultDeclaration;\n          this.declaration = declaration;\n        }\n\n        return ExportDefaultDeclaration;\n      }();\n\n      exports.ExportDefaultDeclaration = ExportDefaultDeclaration;\n\n      var ExportNamedDeclaration = function () {\n        function ExportNamedDeclaration(declaration, specifiers, source) {\n          this.type = syntax_1.Syntax.ExportNamedDeclaration;\n          this.declaration = declaration;\n          this.specifiers = specifiers;\n          this.source = source;\n        }\n\n        return ExportNamedDeclaration;\n      }();\n\n      exports.ExportNamedDeclaration = ExportNamedDeclaration;\n\n      var ExportSpecifier = function () {\n        function ExportSpecifier(local, exported) {\n          this.type = syntax_1.Syntax.ExportSpecifier;\n          this.exported = exported;\n          this.local = local;\n        }\n\n        return ExportSpecifier;\n      }();\n\n      exports.ExportSpecifier = ExportSpecifier;\n\n      var ExpressionStatement = function () {\n        function ExpressionStatement(expression) {\n          this.type = syntax_1.Syntax.ExpressionStatement;\n          this.expression = expression;\n        }\n\n        return ExpressionStatement;\n      }();\n\n      exports.ExpressionStatement = ExpressionStatement;\n\n      var ForInStatement = function () {\n        function ForInStatement(left, right, body) {\n          this.type = syntax_1.Syntax.ForInStatement;\n          this.left = left;\n          this.right = right;\n          this.body = body;\n          this.each = false;\n        }\n\n        return ForInStatement;\n      }();\n\n      exports.ForInStatement = ForInStatement;\n\n      var ForOfStatement = function () {\n        function ForOfStatement(left, right, body) {\n          this.type = syntax_1.Syntax.ForOfStatement;\n          this.left = left;\n          this.right = right;\n          this.body = body;\n        }\n\n        return ForOfStatement;\n      }();\n\n      exports.ForOfStatement = ForOfStatement;\n\n      var ForStatement = function () {\n        function ForStatement(init, test, update, body) {\n          this.type = syntax_1.Syntax.ForStatement;\n          this.init = init;\n          this.test = test;\n          this.update = update;\n          this.body = body;\n        }\n\n        return ForStatement;\n      }();\n\n      exports.ForStatement = ForStatement;\n\n      var FunctionDeclaration = function () {\n        function FunctionDeclaration(id, params, body, generator) {\n          this.type = syntax_1.Syntax.FunctionDeclaration;\n          this.id = id;\n          this.params = params;\n          this.body = body;\n          this.generator = generator;\n          this.expression = false;\n          this.async = false;\n        }\n\n        return FunctionDeclaration;\n      }();\n\n      exports.FunctionDeclaration = FunctionDeclaration;\n\n      var FunctionExpression = function () {\n        function FunctionExpression(id, params, body, generator) {\n          this.type = syntax_1.Syntax.FunctionExpression;\n          this.id = id;\n          this.params = params;\n          this.body = body;\n          this.generator = generator;\n          this.expression = false;\n          this.async = false;\n        }\n\n        return FunctionExpression;\n      }();\n\n      exports.FunctionExpression = FunctionExpression;\n\n      var Identifier = function () {\n        function Identifier(name) {\n          this.type = syntax_1.Syntax.Identifier;\n          this.name = name;\n        }\n\n        return Identifier;\n      }();\n\n      exports.Identifier = Identifier;\n\n      var IfStatement = function () {\n        function IfStatement(test, consequent, alternate) {\n          this.type = syntax_1.Syntax.IfStatement;\n          this.test = test;\n          this.consequent = consequent;\n          this.alternate = alternate;\n        }\n\n        return IfStatement;\n      }();\n\n      exports.IfStatement = IfStatement;\n\n      var ImportDeclaration = function () {\n        function ImportDeclaration(specifiers, source) {\n          this.type = syntax_1.Syntax.ImportDeclaration;\n          this.specifiers = specifiers;\n          this.source = source;\n        }\n\n        return ImportDeclaration;\n      }();\n\n      exports.ImportDeclaration = ImportDeclaration;\n\n      var ImportDefaultSpecifier = function () {\n        function ImportDefaultSpecifier(local) {\n          this.type = syntax_1.Syntax.ImportDefaultSpecifier;\n          this.local = local;\n        }\n\n        return ImportDefaultSpecifier;\n      }();\n\n      exports.ImportDefaultSpecifier = ImportDefaultSpecifier;\n\n      var ImportNamespaceSpecifier = function () {\n        function ImportNamespaceSpecifier(local) {\n          this.type = syntax_1.Syntax.ImportNamespaceSpecifier;\n          this.local = local;\n        }\n\n        return ImportNamespaceSpecifier;\n      }();\n\n      exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;\n\n      var ImportSpecifier = function () {\n        function ImportSpecifier(local, imported) {\n          this.type = syntax_1.Syntax.ImportSpecifier;\n          this.local = local;\n          this.imported = imported;\n        }\n\n        return ImportSpecifier;\n      }();\n\n      exports.ImportSpecifier = ImportSpecifier;\n\n      var LabeledStatement = function () {\n        function LabeledStatement(label, body) {\n          this.type = syntax_1.Syntax.LabeledStatement;\n          this.label = label;\n          this.body = body;\n        }\n\n        return LabeledStatement;\n      }();\n\n      exports.LabeledStatement = LabeledStatement;\n\n      var Literal = function () {\n        function Literal(value, raw) {\n          this.type = syntax_1.Syntax.Literal;\n          this.value = value;\n          this.raw = raw;\n        }\n\n        return Literal;\n      }();\n\n      exports.Literal = Literal;\n\n      var MetaProperty = function () {\n        function MetaProperty(meta, property) {\n          this.type = syntax_1.Syntax.MetaProperty;\n          this.meta = meta;\n          this.property = property;\n        }\n\n        return MetaProperty;\n      }();\n\n      exports.MetaProperty = MetaProperty;\n\n      var MethodDefinition = function () {\n        function MethodDefinition(key, computed, value, kind, isStatic) {\n          this.type = syntax_1.Syntax.MethodDefinition;\n          this.key = key;\n          this.computed = computed;\n          this.value = value;\n          this.kind = kind;\n          this.static = isStatic;\n        }\n\n        return MethodDefinition;\n      }();\n\n      exports.MethodDefinition = MethodDefinition;\n\n      var Module = function () {\n        function Module(body) {\n          this.type = syntax_1.Syntax.Program;\n          this.body = body;\n          this.sourceType = 'module';\n        }\n\n        return Module;\n      }();\n\n      exports.Module = Module;\n\n      var NewExpression = function () {\n        function NewExpression(callee, args) {\n          this.type = syntax_1.Syntax.NewExpression;\n          this.callee = callee;\n          this.arguments = args;\n        }\n\n        return NewExpression;\n      }();\n\n      exports.NewExpression = NewExpression;\n\n      var ObjectExpression = function () {\n        function ObjectExpression(properties) {\n          this.type = syntax_1.Syntax.ObjectExpression;\n          this.properties = properties;\n        }\n\n        return ObjectExpression;\n      }();\n\n      exports.ObjectExpression = ObjectExpression;\n\n      var ObjectPattern = function () {\n        function ObjectPattern(properties) {\n          this.type = syntax_1.Syntax.ObjectPattern;\n          this.properties = properties;\n        }\n\n        return ObjectPattern;\n      }();\n\n      exports.ObjectPattern = ObjectPattern;\n\n      var Property = function () {\n        function Property(kind, key, computed, value, method, shorthand) {\n          this.type = syntax_1.Syntax.Property;\n          this.key = key;\n          this.computed = computed;\n          this.value = value;\n          this.kind = kind;\n          this.method = method;\n          this.shorthand = shorthand;\n        }\n\n        return Property;\n      }();\n\n      exports.Property = Property;\n\n      var RegexLiteral = function () {\n        function RegexLiteral(value, raw, pattern, flags) {\n          this.type = syntax_1.Syntax.Literal;\n          this.value = value;\n          this.raw = raw;\n          this.regex = {\n            pattern: pattern,\n            flags: flags\n          };\n        }\n\n        return RegexLiteral;\n      }();\n\n      exports.RegexLiteral = RegexLiteral;\n\n      var RestElement = function () {\n        function RestElement(argument) {\n          this.type = syntax_1.Syntax.RestElement;\n          this.argument = argument;\n        }\n\n        return RestElement;\n      }();\n\n      exports.RestElement = RestElement;\n\n      var ReturnStatement = function () {\n        function ReturnStatement(argument) {\n          this.type = syntax_1.Syntax.ReturnStatement;\n          this.argument = argument;\n        }\n\n        return ReturnStatement;\n      }();\n\n      exports.ReturnStatement = ReturnStatement;\n\n      var Script = function () {\n        function Script(body) {\n          this.type = syntax_1.Syntax.Program;\n          this.body = body;\n          this.sourceType = 'script';\n        }\n\n        return Script;\n      }();\n\n      exports.Script = Script;\n\n      var SequenceExpression = function () {\n        function SequenceExpression(expressions) {\n          this.type = syntax_1.Syntax.SequenceExpression;\n          this.expressions = expressions;\n        }\n\n        return SequenceExpression;\n      }();\n\n      exports.SequenceExpression = SequenceExpression;\n\n      var SpreadElement = function () {\n        function SpreadElement(argument) {\n          this.type = syntax_1.Syntax.SpreadElement;\n          this.argument = argument;\n        }\n\n        return SpreadElement;\n      }();\n\n      exports.SpreadElement = SpreadElement;\n\n      var StaticMemberExpression = function () {\n        function StaticMemberExpression(object, property) {\n          this.type = syntax_1.Syntax.MemberExpression;\n          this.computed = false;\n          this.object = object;\n          this.property = property;\n        }\n\n        return StaticMemberExpression;\n      }();\n\n      exports.StaticMemberExpression = StaticMemberExpression;\n\n      var Super = function () {\n        function Super() {\n          this.type = syntax_1.Syntax.Super;\n        }\n\n        return Super;\n      }();\n\n      exports.Super = Super;\n\n      var SwitchCase = function () {\n        function SwitchCase(test, consequent) {\n          this.type = syntax_1.Syntax.SwitchCase;\n          this.test = test;\n          this.consequent = consequent;\n        }\n\n        return SwitchCase;\n      }();\n\n      exports.SwitchCase = SwitchCase;\n\n      var SwitchStatement = function () {\n        function SwitchStatement(discriminant, cases) {\n          this.type = syntax_1.Syntax.SwitchStatement;\n          this.discriminant = discriminant;\n          this.cases = cases;\n        }\n\n        return SwitchStatement;\n      }();\n\n      exports.SwitchStatement = SwitchStatement;\n\n      var TaggedTemplateExpression = function () {\n        function TaggedTemplateExpression(tag, quasi) {\n          this.type = syntax_1.Syntax.TaggedTemplateExpression;\n          this.tag = tag;\n          this.quasi = quasi;\n        }\n\n        return TaggedTemplateExpression;\n      }();\n\n      exports.TaggedTemplateExpression = TaggedTemplateExpression;\n\n      var TemplateElement = function () {\n        function TemplateElement(value, tail) {\n          this.type = syntax_1.Syntax.TemplateElement;\n          this.value = value;\n          this.tail = tail;\n        }\n\n        return TemplateElement;\n      }();\n\n      exports.TemplateElement = TemplateElement;\n\n      var TemplateLiteral = function () {\n        function TemplateLiteral(quasis, expressions) {\n          this.type = syntax_1.Syntax.TemplateLiteral;\n          this.quasis = quasis;\n          this.expressions = expressions;\n        }\n\n        return TemplateLiteral;\n      }();\n\n      exports.TemplateLiteral = TemplateLiteral;\n\n      var ThisExpression = function () {\n        function ThisExpression() {\n          this.type = syntax_1.Syntax.ThisExpression;\n        }\n\n        return ThisExpression;\n      }();\n\n      exports.ThisExpression = ThisExpression;\n\n      var ThrowStatement = function () {\n        function ThrowStatement(argument) {\n          this.type = syntax_1.Syntax.ThrowStatement;\n          this.argument = argument;\n        }\n\n        return ThrowStatement;\n      }();\n\n      exports.ThrowStatement = ThrowStatement;\n\n      var TryStatement = function () {\n        function TryStatement(block, handler, finalizer) {\n          this.type = syntax_1.Syntax.TryStatement;\n          this.block = block;\n          this.handler = handler;\n          this.finalizer = finalizer;\n        }\n\n        return TryStatement;\n      }();\n\n      exports.TryStatement = TryStatement;\n\n      var UnaryExpression = function () {\n        function UnaryExpression(operator, argument) {\n          this.type = syntax_1.Syntax.UnaryExpression;\n          this.operator = operator;\n          this.argument = argument;\n          this.prefix = true;\n        }\n\n        return UnaryExpression;\n      }();\n\n      exports.UnaryExpression = UnaryExpression;\n\n      var UpdateExpression = function () {\n        function UpdateExpression(operator, argument, prefix) {\n          this.type = syntax_1.Syntax.UpdateExpression;\n          this.operator = operator;\n          this.argument = argument;\n          this.prefix = prefix;\n        }\n\n        return UpdateExpression;\n      }();\n\n      exports.UpdateExpression = UpdateExpression;\n\n      var VariableDeclaration = function () {\n        function VariableDeclaration(declarations, kind) {\n          this.type = syntax_1.Syntax.VariableDeclaration;\n          this.declarations = declarations;\n          this.kind = kind;\n        }\n\n        return VariableDeclaration;\n      }();\n\n      exports.VariableDeclaration = VariableDeclaration;\n\n      var VariableDeclarator = function () {\n        function VariableDeclarator(id, init) {\n          this.type = syntax_1.Syntax.VariableDeclarator;\n          this.id = id;\n          this.init = init;\n        }\n\n        return VariableDeclarator;\n      }();\n\n      exports.VariableDeclarator = VariableDeclarator;\n\n      var WhileStatement = function () {\n        function WhileStatement(test, body) {\n          this.type = syntax_1.Syntax.WhileStatement;\n          this.test = test;\n          this.body = body;\n        }\n\n        return WhileStatement;\n      }();\n\n      exports.WhileStatement = WhileStatement;\n\n      var WithStatement = function () {\n        function WithStatement(object, body) {\n          this.type = syntax_1.Syntax.WithStatement;\n          this.object = object;\n          this.body = body;\n        }\n\n        return WithStatement;\n      }();\n\n      exports.WithStatement = WithStatement;\n\n      var YieldExpression = function () {\n        function YieldExpression(argument, delegate) {\n          this.type = syntax_1.Syntax.YieldExpression;\n          this.argument = argument;\n          this.delegate = delegate;\n        }\n\n        return YieldExpression;\n      }();\n\n      exports.YieldExpression = YieldExpression;\n      /***/\n    },\n    /* 8 */\n\n    /***/\n    function (module, exports, __nested_webpack_require_84347__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var assert_1 = __nested_webpack_require_84347__(9);\n\n      var error_handler_1 = __nested_webpack_require_84347__(10);\n\n      var messages_1 = __nested_webpack_require_84347__(11);\n\n      var Node = __nested_webpack_require_84347__(7);\n\n      var scanner_1 = __nested_webpack_require_84347__(12);\n\n      var syntax_1 = __nested_webpack_require_84347__(2);\n\n      var token_1 = __nested_webpack_require_84347__(13);\n\n      var ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';\n\n      var Parser = function () {\n        function Parser(code, options, delegate) {\n          if (options === void 0) {\n            options = {};\n          }\n\n          this.config = {\n            range: typeof options.range === 'boolean' && options.range,\n            loc: typeof options.loc === 'boolean' && options.loc,\n            source: null,\n            tokens: typeof options.tokens === 'boolean' && options.tokens,\n            comment: typeof options.comment === 'boolean' && options.comment,\n            tolerant: typeof options.tolerant === 'boolean' && options.tolerant\n          };\n\n          if (this.config.loc && options.source && options.source !== null) {\n            this.config.source = String(options.source);\n          }\n\n          this.delegate = delegate;\n          this.errorHandler = new error_handler_1.ErrorHandler();\n          this.errorHandler.tolerant = this.config.tolerant;\n          this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n          this.scanner.trackComment = this.config.comment;\n          this.operatorPrecedence = {\n            ')': 0,\n            ';': 0,\n            ',': 0,\n            '=': 0,\n            ']': 0,\n            '||': 1,\n            '&&': 2,\n            '|': 3,\n            '^': 4,\n            '&': 5,\n            '==': 6,\n            '!=': 6,\n            '===': 6,\n            '!==': 6,\n            '<': 7,\n            '>': 7,\n            '<=': 7,\n            '>=': 7,\n            '<<': 8,\n            '>>': 8,\n            '>>>': 8,\n            '+': 9,\n            '-': 9,\n            '*': 11,\n            '/': 11,\n            '%': 11\n          };\n          this.lookahead = {\n            type: 2\n            /* EOF */\n            ,\n            value: '',\n            lineNumber: this.scanner.lineNumber,\n            lineStart: 0,\n            start: 0,\n            end: 0\n          };\n          this.hasLineTerminator = false;\n          this.context = {\n            isModule: false,\n            await: false,\n            allowIn: true,\n            allowStrictDirective: true,\n            allowYield: true,\n            firstCoverInitializedNameError: null,\n            isAssignmentTarget: false,\n            isBindingElement: false,\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false,\n            labelSet: {},\n            strict: false\n          };\n          this.tokens = [];\n          this.startMarker = {\n            index: 0,\n            line: this.scanner.lineNumber,\n            column: 0\n          };\n          this.lastMarker = {\n            index: 0,\n            line: this.scanner.lineNumber,\n            column: 0\n          };\n          this.nextToken();\n          this.lastMarker = {\n            index: this.scanner.index,\n            line: this.scanner.lineNumber,\n            column: this.scanner.index - this.scanner.lineStart\n          };\n        }\n\n        Parser.prototype.throwError = function (messageFormat) {\n          var values = [];\n\n          for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n          }\n\n          var args = Array.prototype.slice.call(arguments, 1);\n          var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n            assert_1.assert(idx < args.length, 'Message reference must be in range');\n            return args[idx];\n          });\n          var index = this.lastMarker.index;\n          var line = this.lastMarker.line;\n          var column = this.lastMarker.column + 1;\n          throw this.errorHandler.createError(index, line, column, msg);\n        };\n\n        Parser.prototype.tolerateError = function (messageFormat) {\n          var values = [];\n\n          for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n          }\n\n          var args = Array.prototype.slice.call(arguments, 1);\n          var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n            assert_1.assert(idx < args.length, 'Message reference must be in range');\n            return args[idx];\n          });\n          var index = this.lastMarker.index;\n          var line = this.scanner.lineNumber;\n          var column = this.lastMarker.column + 1;\n          this.errorHandler.tolerateError(index, line, column, msg);\n        }; // Throw an exception because of the token.\n\n\n        Parser.prototype.unexpectedTokenError = function (token, message) {\n          var msg = message || messages_1.Messages.UnexpectedToken;\n          var value;\n\n          if (token) {\n            if (!message) {\n              msg = token.type === 2\n              /* EOF */\n              ? messages_1.Messages.UnexpectedEOS : token.type === 3\n              /* Identifier */\n              ? messages_1.Messages.UnexpectedIdentifier : token.type === 6\n              /* NumericLiteral */\n              ? messages_1.Messages.UnexpectedNumber : token.type === 8\n              /* StringLiteral */\n              ? messages_1.Messages.UnexpectedString : token.type === 10\n              /* Template */\n              ? messages_1.Messages.UnexpectedTemplate : messages_1.Messages.UnexpectedToken;\n\n              if (token.type === 4\n              /* Keyword */\n              ) {\n                if (this.scanner.isFutureReservedWord(token.value)) {\n                  msg = messages_1.Messages.UnexpectedReserved;\n                } else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {\n                  msg = messages_1.Messages.StrictReservedWord;\n                }\n              }\n            }\n\n            value = token.value;\n          } else {\n            value = 'ILLEGAL';\n          }\n\n          msg = msg.replace('%0', value);\n\n          if (token && typeof token.lineNumber === 'number') {\n            var index = token.start;\n            var line = token.lineNumber;\n            var lastMarkerLineStart = this.lastMarker.index - this.lastMarker.column;\n            var column = token.start - lastMarkerLineStart + 1;\n            return this.errorHandler.createError(index, line, column, msg);\n          } else {\n            var index = this.lastMarker.index;\n            var line = this.lastMarker.line;\n            var column = this.lastMarker.column + 1;\n            return this.errorHandler.createError(index, line, column, msg);\n          }\n        };\n\n        Parser.prototype.throwUnexpectedToken = function (token, message) {\n          throw this.unexpectedTokenError(token, message);\n        };\n\n        Parser.prototype.tolerateUnexpectedToken = function (token, message) {\n          this.errorHandler.tolerate(this.unexpectedTokenError(token, message));\n        };\n\n        Parser.prototype.collectComments = function () {\n          if (!this.config.comment) {\n            this.scanner.scanComments();\n          } else {\n            var comments = this.scanner.scanComments();\n\n            if (comments.length > 0 && this.delegate) {\n              for (var i = 0; i < comments.length; ++i) {\n                var e = comments[i];\n                var node = void 0;\n                node = {\n                  type: e.multiLine ? 'BlockComment' : 'LineComment',\n                  value: this.scanner.source.slice(e.slice[0], e.slice[1])\n                };\n\n                if (this.config.range) {\n                  node.range = e.range;\n                }\n\n                if (this.config.loc) {\n                  node.loc = e.loc;\n                }\n\n                var metadata = {\n                  start: {\n                    line: e.loc.start.line,\n                    column: e.loc.start.column,\n                    offset: e.range[0]\n                  },\n                  end: {\n                    line: e.loc.end.line,\n                    column: e.loc.end.column,\n                    offset: e.range[1]\n                  }\n                };\n                this.delegate(node, metadata);\n              }\n            }\n          }\n        }; // From internal representation to an external structure\n\n\n        Parser.prototype.getTokenRaw = function (token) {\n          return this.scanner.source.slice(token.start, token.end);\n        };\n\n        Parser.prototype.convertToken = function (token) {\n          var t = {\n            type: token_1.TokenName[token.type],\n            value: this.getTokenRaw(token)\n          };\n\n          if (this.config.range) {\n            t.range = [token.start, token.end];\n          }\n\n          if (this.config.loc) {\n            t.loc = {\n              start: {\n                line: this.startMarker.line,\n                column: this.startMarker.column\n              },\n              end: {\n                line: this.scanner.lineNumber,\n                column: this.scanner.index - this.scanner.lineStart\n              }\n            };\n          }\n\n          if (token.type === 9\n          /* RegularExpression */\n          ) {\n            var pattern = token.pattern;\n            var flags = token.flags;\n            t.regex = {\n              pattern: pattern,\n              flags: flags\n            };\n          }\n\n          return t;\n        };\n\n        Parser.prototype.nextToken = function () {\n          var token = this.lookahead;\n          this.lastMarker.index = this.scanner.index;\n          this.lastMarker.line = this.scanner.lineNumber;\n          this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n          this.collectComments();\n\n          if (this.scanner.index !== this.startMarker.index) {\n            this.startMarker.index = this.scanner.index;\n            this.startMarker.line = this.scanner.lineNumber;\n            this.startMarker.column = this.scanner.index - this.scanner.lineStart;\n          }\n\n          var next = this.scanner.lex();\n          this.hasLineTerminator = token.lineNumber !== next.lineNumber;\n\n          if (next && this.context.strict && next.type === 3\n          /* Identifier */\n          ) {\n            if (this.scanner.isStrictModeReservedWord(next.value)) {\n              next.type = 4\n              /* Keyword */\n              ;\n            }\n          }\n\n          this.lookahead = next;\n\n          if (this.config.tokens && next.type !== 2\n          /* EOF */\n          ) {\n            this.tokens.push(this.convertToken(next));\n          }\n\n          return token;\n        };\n\n        Parser.prototype.nextRegexToken = function () {\n          this.collectComments();\n          var token = this.scanner.scanRegExp();\n\n          if (this.config.tokens) {\n            // Pop the previous token, '/' or '/='\n            // This is added from the lookahead token.\n            this.tokens.pop();\n            this.tokens.push(this.convertToken(token));\n          } // Prime the next lookahead.\n\n\n          this.lookahead = token;\n          this.nextToken();\n          return token;\n        };\n\n        Parser.prototype.createNode = function () {\n          return {\n            index: this.startMarker.index,\n            line: this.startMarker.line,\n            column: this.startMarker.column\n          };\n        };\n\n        Parser.prototype.startNode = function (token, lastLineStart) {\n          if (lastLineStart === void 0) {\n            lastLineStart = 0;\n          }\n\n          var column = token.start - token.lineStart;\n          var line = token.lineNumber;\n\n          if (column < 0) {\n            column += lastLineStart;\n            line--;\n          }\n\n          return {\n            index: token.start,\n            line: line,\n            column: column\n          };\n        };\n\n        Parser.prototype.finalize = function (marker, node) {\n          if (this.config.range) {\n            node.range = [marker.index, this.lastMarker.index];\n          }\n\n          if (this.config.loc) {\n            node.loc = {\n              start: {\n                line: marker.line,\n                column: marker.column\n              },\n              end: {\n                line: this.lastMarker.line,\n                column: this.lastMarker.column\n              }\n            };\n\n            if (this.config.source) {\n              node.loc.source = this.config.source;\n            }\n          }\n\n          if (this.delegate) {\n            var metadata = {\n              start: {\n                line: marker.line,\n                column: marker.column,\n                offset: marker.index\n              },\n              end: {\n                line: this.lastMarker.line,\n                column: this.lastMarker.column,\n                offset: this.lastMarker.index\n              }\n            };\n            this.delegate(node, metadata);\n          }\n\n          return node;\n        }; // Expect the next token to match the specified punctuator.\n        // If not, an exception will be thrown.\n\n\n        Parser.prototype.expect = function (value) {\n          var token = this.nextToken();\n\n          if (token.type !== 7\n          /* Punctuator */\n          || token.value !== value) {\n            this.throwUnexpectedToken(token);\n          }\n        }; // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().\n\n\n        Parser.prototype.expectCommaSeparator = function () {\n          if (this.config.tolerant) {\n            var token = this.lookahead;\n\n            if (token.type === 7\n            /* Punctuator */\n            && token.value === ',') {\n              this.nextToken();\n            } else if (token.type === 7\n            /* Punctuator */\n            && token.value === ';') {\n              this.nextToken();\n              this.tolerateUnexpectedToken(token);\n            } else {\n              this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);\n            }\n          } else {\n            this.expect(',');\n          }\n        }; // Expect the next token to match the specified keyword.\n        // If not, an exception will be thrown.\n\n\n        Parser.prototype.expectKeyword = function (keyword) {\n          var token = this.nextToken();\n\n          if (token.type !== 4\n          /* Keyword */\n          || token.value !== keyword) {\n            this.throwUnexpectedToken(token);\n          }\n        }; // Return true if the next token matches the specified punctuator.\n\n\n        Parser.prototype.match = function (value) {\n          return this.lookahead.type === 7\n          /* Punctuator */\n          && this.lookahead.value === value;\n        }; // Return true if the next token matches the specified keyword\n\n\n        Parser.prototype.matchKeyword = function (keyword) {\n          return this.lookahead.type === 4\n          /* Keyword */\n          && this.lookahead.value === keyword;\n        }; // Return true if the next token matches the specified contextual keyword\n        // (where an identifier is sometimes a keyword depending on the context)\n\n\n        Parser.prototype.matchContextualKeyword = function (keyword) {\n          return this.lookahead.type === 3\n          /* Identifier */\n          && this.lookahead.value === keyword;\n        }; // Return true if the next token is an assignment operator\n\n\n        Parser.prototype.matchAssign = function () {\n          if (this.lookahead.type !== 7\n          /* Punctuator */\n          ) {\n            return false;\n          }\n\n          var op = this.lookahead.value;\n          return op === '=' || op === '*=' || op === '**=' || op === '/=' || op === '%=' || op === '+=' || op === '-=' || op === '<<=' || op === '>>=' || op === '>>>=' || op === '&=' || op === '^=' || op === '|=';\n        }; // Cover grammar support.\n        //\n        // When an assignment expression position starts with an left parenthesis, the determination of the type\n        // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)\n        // or the first comma. This situation also defers the determination of all the expressions nested in the pair.\n        //\n        // There are three productions that can be parsed in a parentheses pair that needs to be determined\n        // after the outermost pair is closed. They are:\n        //\n        //   1. AssignmentExpression\n        //   2. BindingElements\n        //   3. AssignmentTargets\n        //\n        // In order to avoid exponential backtracking, we use two flags to denote if the production can be\n        // binding element or assignment target.\n        //\n        // The three productions have the relationship:\n        //\n        //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression\n        //\n        // with a single exception that CoverInitializedName when used directly in an Expression, generates\n        // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the\n        // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.\n        //\n        // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not\n        // effect the current flags. This means the production the parser parses is only used as an expression. Therefore\n        // the CoverInitializedName check is conducted.\n        //\n        // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates\n        // the flags outside of the parser. This means the production the parser parses is used as a part of a potential\n        // pattern. The CoverInitializedName check is deferred.\n\n\n        Parser.prototype.isolateCoverGrammar = function (parseFunction) {\n          var previousIsBindingElement = this.context.isBindingElement;\n          var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n          var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n          this.context.isBindingElement = true;\n          this.context.isAssignmentTarget = true;\n          this.context.firstCoverInitializedNameError = null;\n          var result = parseFunction.call(this);\n\n          if (this.context.firstCoverInitializedNameError !== null) {\n            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);\n          }\n\n          this.context.isBindingElement = previousIsBindingElement;\n          this.context.isAssignmentTarget = previousIsAssignmentTarget;\n          this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;\n          return result;\n        };\n\n        Parser.prototype.inheritCoverGrammar = function (parseFunction) {\n          var previousIsBindingElement = this.context.isBindingElement;\n          var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n          var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n          this.context.isBindingElement = true;\n          this.context.isAssignmentTarget = true;\n          this.context.firstCoverInitializedNameError = null;\n          var result = parseFunction.call(this);\n          this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;\n          this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;\n          this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;\n          return result;\n        };\n\n        Parser.prototype.consumeSemicolon = function () {\n          if (this.match(';')) {\n            this.nextToken();\n          } else if (!this.hasLineTerminator) {\n            if (this.lookahead.type !== 2\n            /* EOF */\n            && !this.match('}')) {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n\n            this.lastMarker.index = this.startMarker.index;\n            this.lastMarker.line = this.startMarker.line;\n            this.lastMarker.column = this.startMarker.column;\n          }\n        }; // https://tc39.github.io/ecma262/#sec-primary-expression\n\n\n        Parser.prototype.parsePrimaryExpression = function () {\n          var node = this.createNode();\n          var expr;\n          var token, raw;\n\n          switch (this.lookahead.type) {\n            case 3\n            /* Identifier */\n            :\n              if ((this.context.isModule || this.context.await) && this.lookahead.value === 'await') {\n                this.tolerateUnexpectedToken(this.lookahead);\n              }\n\n              expr = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node, new Node.Identifier(this.nextToken().value));\n              break;\n\n            case 6\n            /* NumericLiteral */\n            :\n            case 8\n            /* StringLiteral */\n            :\n              if (this.context.strict && this.lookahead.octal) {\n                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);\n              }\n\n              this.context.isAssignmentTarget = false;\n              this.context.isBindingElement = false;\n              token = this.nextToken();\n              raw = this.getTokenRaw(token);\n              expr = this.finalize(node, new Node.Literal(token.value, raw));\n              break;\n\n            case 1\n            /* BooleanLiteral */\n            :\n              this.context.isAssignmentTarget = false;\n              this.context.isBindingElement = false;\n              token = this.nextToken();\n              raw = this.getTokenRaw(token);\n              expr = this.finalize(node, new Node.Literal(token.value === 'true', raw));\n              break;\n\n            case 5\n            /* NullLiteral */\n            :\n              this.context.isAssignmentTarget = false;\n              this.context.isBindingElement = false;\n              token = this.nextToken();\n              raw = this.getTokenRaw(token);\n              expr = this.finalize(node, new Node.Literal(null, raw));\n              break;\n\n            case 10\n            /* Template */\n            :\n              expr = this.parseTemplateLiteral();\n              break;\n\n            case 7\n            /* Punctuator */\n            :\n              switch (this.lookahead.value) {\n                case '(':\n                  this.context.isBindingElement = false;\n                  expr = this.inheritCoverGrammar(this.parseGroupExpression);\n                  break;\n\n                case '[':\n                  expr = this.inheritCoverGrammar(this.parseArrayInitializer);\n                  break;\n\n                case '{':\n                  expr = this.inheritCoverGrammar(this.parseObjectInitializer);\n                  break;\n\n                case '/':\n                case '/=':\n                  this.context.isAssignmentTarget = false;\n                  this.context.isBindingElement = false;\n                  this.scanner.index = this.startMarker.index;\n                  token = this.nextRegexToken();\n                  raw = this.getTokenRaw(token);\n                  expr = this.finalize(node, new Node.RegexLiteral(token.regex, raw, token.pattern, token.flags));\n                  break;\n\n                default:\n                  expr = this.throwUnexpectedToken(this.nextToken());\n              }\n\n              break;\n\n            case 4\n            /* Keyword */\n            :\n              if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {\n                expr = this.parseIdentifierName();\n              } else if (!this.context.strict && this.matchKeyword('let')) {\n                expr = this.finalize(node, new Node.Identifier(this.nextToken().value));\n              } else {\n                this.context.isAssignmentTarget = false;\n                this.context.isBindingElement = false;\n\n                if (this.matchKeyword('function')) {\n                  expr = this.parseFunctionExpression();\n                } else if (this.matchKeyword('this')) {\n                  this.nextToken();\n                  expr = this.finalize(node, new Node.ThisExpression());\n                } else if (this.matchKeyword('class')) {\n                  expr = this.parseClassExpression();\n                } else {\n                  expr = this.throwUnexpectedToken(this.nextToken());\n                }\n              }\n\n              break;\n\n            default:\n              expr = this.throwUnexpectedToken(this.nextToken());\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-array-initializer\n\n\n        Parser.prototype.parseSpreadElement = function () {\n          var node = this.createNode();\n          this.expect('...');\n          var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);\n          return this.finalize(node, new Node.SpreadElement(arg));\n        };\n\n        Parser.prototype.parseArrayInitializer = function () {\n          var node = this.createNode();\n          var elements = [];\n          this.expect('[');\n\n          while (!this.match(']')) {\n            if (this.match(',')) {\n              this.nextToken();\n              elements.push(null);\n            } else if (this.match('...')) {\n              var element = this.parseSpreadElement();\n\n              if (!this.match(']')) {\n                this.context.isAssignmentTarget = false;\n                this.context.isBindingElement = false;\n                this.expect(',');\n              }\n\n              elements.push(element);\n            } else {\n              elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n\n              if (!this.match(']')) {\n                this.expect(',');\n              }\n            }\n          }\n\n          this.expect(']');\n          return this.finalize(node, new Node.ArrayExpression(elements));\n        }; // https://tc39.github.io/ecma262/#sec-object-initializer\n\n\n        Parser.prototype.parsePropertyMethod = function (params) {\n          this.context.isAssignmentTarget = false;\n          this.context.isBindingElement = false;\n          var previousStrict = this.context.strict;\n          var previousAllowStrictDirective = this.context.allowStrictDirective;\n          this.context.allowStrictDirective = params.simple;\n          var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);\n\n          if (this.context.strict && params.firstRestricted) {\n            this.tolerateUnexpectedToken(params.firstRestricted, params.message);\n          }\n\n          if (this.context.strict && params.stricted) {\n            this.tolerateUnexpectedToken(params.stricted, params.message);\n          }\n\n          this.context.strict = previousStrict;\n          this.context.allowStrictDirective = previousAllowStrictDirective;\n          return body;\n        };\n\n        Parser.prototype.parsePropertyMethodFunction = function () {\n          var isGenerator = false;\n          var node = this.createNode();\n          var previousAllowYield = this.context.allowYield;\n          this.context.allowYield = true;\n          var params = this.parseFormalParameters();\n          var method = this.parsePropertyMethod(params);\n          this.context.allowYield = previousAllowYield;\n          return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n        };\n\n        Parser.prototype.parsePropertyMethodAsyncFunction = function () {\n          var node = this.createNode();\n          var previousAllowYield = this.context.allowYield;\n          var previousAwait = this.context.await;\n          this.context.allowYield = false;\n          this.context.await = true;\n          var params = this.parseFormalParameters();\n          var method = this.parsePropertyMethod(params);\n          this.context.allowYield = previousAllowYield;\n          this.context.await = previousAwait;\n          return this.finalize(node, new Node.AsyncFunctionExpression(null, params.params, method));\n        };\n\n        Parser.prototype.parseObjectPropertyKey = function () {\n          var node = this.createNode();\n          var token = this.nextToken();\n          var key;\n\n          switch (token.type) {\n            case 8\n            /* StringLiteral */\n            :\n            case 6\n            /* NumericLiteral */\n            :\n              if (this.context.strict && token.octal) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);\n              }\n\n              var raw = this.getTokenRaw(token);\n              key = this.finalize(node, new Node.Literal(token.value, raw));\n              break;\n\n            case 3\n            /* Identifier */\n            :\n            case 1\n            /* BooleanLiteral */\n            :\n            case 5\n            /* NullLiteral */\n            :\n            case 4\n            /* Keyword */\n            :\n              key = this.finalize(node, new Node.Identifier(token.value));\n              break;\n\n            case 7\n            /* Punctuator */\n            :\n              if (token.value === '[') {\n                key = this.isolateCoverGrammar(this.parseAssignmentExpression);\n                this.expect(']');\n              } else {\n                key = this.throwUnexpectedToken(token);\n              }\n\n              break;\n\n            default:\n              key = this.throwUnexpectedToken(token);\n          }\n\n          return key;\n        };\n\n        Parser.prototype.isPropertyKey = function (key, value) {\n          return key.type === syntax_1.Syntax.Identifier && key.name === value || key.type === syntax_1.Syntax.Literal && key.value === value;\n        };\n\n        Parser.prototype.parseObjectProperty = function (hasProto) {\n          var node = this.createNode();\n          var token = this.lookahead;\n          var kind;\n          var key = null;\n          var value = null;\n          var computed = false;\n          var method = false;\n          var shorthand = false;\n          var isAsync = false;\n\n          if (token.type === 3\n          /* Identifier */\n          ) {\n            var id = token.value;\n            this.nextToken();\n            computed = this.match('[');\n            isAsync = !this.hasLineTerminator && id === 'async' && !this.match(':') && !this.match('(') && !this.match('*') && !this.match(',');\n            key = isAsync ? this.parseObjectPropertyKey() : this.finalize(node, new Node.Identifier(id));\n          } else if (this.match('*')) {\n            this.nextToken();\n          } else {\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n          }\n\n          var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n\n          if (token.type === 3\n          /* Identifier */\n          && !isAsync && token.value === 'get' && lookaheadPropertyKey) {\n            kind = 'get';\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            this.context.allowYield = false;\n            value = this.parseGetterMethod();\n          } else if (token.type === 3\n          /* Identifier */\n          && !isAsync && token.value === 'set' && lookaheadPropertyKey) {\n            kind = 'set';\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            value = this.parseSetterMethod();\n          } else if (token.type === 7\n          /* Punctuator */\n          && token.value === '*' && lookaheadPropertyKey) {\n            kind = 'init';\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            value = this.parseGeneratorMethod();\n            method = true;\n          } else {\n            if (!key) {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n\n            kind = 'init';\n\n            if (this.match(':') && !isAsync) {\n              if (!computed && this.isPropertyKey(key, '__proto__')) {\n                if (hasProto.value) {\n                  this.tolerateError(messages_1.Messages.DuplicateProtoProperty);\n                }\n\n                hasProto.value = true;\n              }\n\n              this.nextToken();\n              value = this.inheritCoverGrammar(this.parseAssignmentExpression);\n            } else if (this.match('(')) {\n              value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();\n              method = true;\n            } else if (token.type === 3\n            /* Identifier */\n            ) {\n              var id = this.finalize(node, new Node.Identifier(token.value));\n\n              if (this.match('=')) {\n                this.context.firstCoverInitializedNameError = this.lookahead;\n                this.nextToken();\n                shorthand = true;\n                var init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n                value = this.finalize(node, new Node.AssignmentPattern(id, init));\n              } else {\n                shorthand = true;\n                value = id;\n              }\n            } else {\n              this.throwUnexpectedToken(this.nextToken());\n            }\n          }\n\n          return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));\n        };\n\n        Parser.prototype.parseObjectInitializer = function () {\n          var node = this.createNode();\n          this.expect('{');\n          var properties = [];\n          var hasProto = {\n            value: false\n          };\n\n          while (!this.match('}')) {\n            properties.push(this.parseObjectProperty(hasProto));\n\n            if (!this.match('}')) {\n              this.expectCommaSeparator();\n            }\n          }\n\n          this.expect('}');\n          return this.finalize(node, new Node.ObjectExpression(properties));\n        }; // https://tc39.github.io/ecma262/#sec-template-literals\n\n\n        Parser.prototype.parseTemplateHead = function () {\n          assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');\n          var node = this.createNode();\n          var token = this.nextToken();\n          var raw = token.value;\n          var cooked = token.cooked;\n          return this.finalize(node, new Node.TemplateElement({\n            raw: raw,\n            cooked: cooked\n          }, token.tail));\n        };\n\n        Parser.prototype.parseTemplateElement = function () {\n          if (this.lookahead.type !== 10\n          /* Template */\n          ) {\n            this.throwUnexpectedToken();\n          }\n\n          var node = this.createNode();\n          var token = this.nextToken();\n          var raw = token.value;\n          var cooked = token.cooked;\n          return this.finalize(node, new Node.TemplateElement({\n            raw: raw,\n            cooked: cooked\n          }, token.tail));\n        };\n\n        Parser.prototype.parseTemplateLiteral = function () {\n          var node = this.createNode();\n          var expressions = [];\n          var quasis = [];\n          var quasi = this.parseTemplateHead();\n          quasis.push(quasi);\n\n          while (!quasi.tail) {\n            expressions.push(this.parseExpression());\n            quasi = this.parseTemplateElement();\n            quasis.push(quasi);\n          }\n\n          return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));\n        }; // https://tc39.github.io/ecma262/#sec-grouping-operator\n\n\n        Parser.prototype.reinterpretExpressionAsPattern = function (expr) {\n          switch (expr.type) {\n            case syntax_1.Syntax.Identifier:\n            case syntax_1.Syntax.MemberExpression:\n            case syntax_1.Syntax.RestElement:\n            case syntax_1.Syntax.AssignmentPattern:\n              break;\n\n            case syntax_1.Syntax.SpreadElement:\n              expr.type = syntax_1.Syntax.RestElement;\n              this.reinterpretExpressionAsPattern(expr.argument);\n              break;\n\n            case syntax_1.Syntax.ArrayExpression:\n              expr.type = syntax_1.Syntax.ArrayPattern;\n\n              for (var i = 0; i < expr.elements.length; i++) {\n                if (expr.elements[i] !== null) {\n                  this.reinterpretExpressionAsPattern(expr.elements[i]);\n                }\n              }\n\n              break;\n\n            case syntax_1.Syntax.ObjectExpression:\n              expr.type = syntax_1.Syntax.ObjectPattern;\n\n              for (var i = 0; i < expr.properties.length; i++) {\n                this.reinterpretExpressionAsPattern(expr.properties[i].value);\n              }\n\n              break;\n\n            case syntax_1.Syntax.AssignmentExpression:\n              expr.type = syntax_1.Syntax.AssignmentPattern;\n              delete expr.operator;\n              this.reinterpretExpressionAsPattern(expr.left);\n              break;\n\n            default:\n              // Allow other node type for tolerant parsing.\n              break;\n          }\n        };\n\n        Parser.prototype.parseGroupExpression = function () {\n          var expr;\n          this.expect('(');\n\n          if (this.match(')')) {\n            this.nextToken();\n\n            if (!this.match('=>')) {\n              this.expect('=>');\n            }\n\n            expr = {\n              type: ArrowParameterPlaceHolder,\n              params: [],\n              async: false\n            };\n          } else {\n            var startToken = this.lookahead;\n            var params = [];\n\n            if (this.match('...')) {\n              expr = this.parseRestElement(params);\n              this.expect(')');\n\n              if (!this.match('=>')) {\n                this.expect('=>');\n              }\n\n              expr = {\n                type: ArrowParameterPlaceHolder,\n                params: [expr],\n                async: false\n              };\n            } else {\n              var arrow = false;\n              this.context.isBindingElement = true;\n              expr = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\n              if (this.match(',')) {\n                var expressions = [];\n                this.context.isAssignmentTarget = false;\n                expressions.push(expr);\n\n                while (this.lookahead.type !== 2\n                /* EOF */\n                ) {\n                  if (!this.match(',')) {\n                    break;\n                  }\n\n                  this.nextToken();\n\n                  if (this.match(')')) {\n                    this.nextToken();\n\n                    for (var i = 0; i < expressions.length; i++) {\n                      this.reinterpretExpressionAsPattern(expressions[i]);\n                    }\n\n                    arrow = true;\n                    expr = {\n                      type: ArrowParameterPlaceHolder,\n                      params: expressions,\n                      async: false\n                    };\n                  } else if (this.match('...')) {\n                    if (!this.context.isBindingElement) {\n                      this.throwUnexpectedToken(this.lookahead);\n                    }\n\n                    expressions.push(this.parseRestElement(params));\n                    this.expect(')');\n\n                    if (!this.match('=>')) {\n                      this.expect('=>');\n                    }\n\n                    this.context.isBindingElement = false;\n\n                    for (var i = 0; i < expressions.length; i++) {\n                      this.reinterpretExpressionAsPattern(expressions[i]);\n                    }\n\n                    arrow = true;\n                    expr = {\n                      type: ArrowParameterPlaceHolder,\n                      params: expressions,\n                      async: false\n                    };\n                  } else {\n                    expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n                  }\n\n                  if (arrow) {\n                    break;\n                  }\n                }\n\n                if (!arrow) {\n                  expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n                }\n              }\n\n              if (!arrow) {\n                this.expect(')');\n\n                if (this.match('=>')) {\n                  if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {\n                    arrow = true;\n                    expr = {\n                      type: ArrowParameterPlaceHolder,\n                      params: [expr],\n                      async: false\n                    };\n                  }\n\n                  if (!arrow) {\n                    if (!this.context.isBindingElement) {\n                      this.throwUnexpectedToken(this.lookahead);\n                    }\n\n                    if (expr.type === syntax_1.Syntax.SequenceExpression) {\n                      for (var i = 0; i < expr.expressions.length; i++) {\n                        this.reinterpretExpressionAsPattern(expr.expressions[i]);\n                      }\n                    } else {\n                      this.reinterpretExpressionAsPattern(expr);\n                    }\n\n                    var parameters = expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr];\n                    expr = {\n                      type: ArrowParameterPlaceHolder,\n                      params: parameters,\n                      async: false\n                    };\n                  }\n                }\n\n                this.context.isBindingElement = false;\n              }\n            }\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions\n\n\n        Parser.prototype.parseArguments = function () {\n          this.expect('(');\n          var args = [];\n\n          if (!this.match(')')) {\n            while (true) {\n              var expr = this.match('...') ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAssignmentExpression);\n              args.push(expr);\n\n              if (this.match(')')) {\n                break;\n              }\n\n              this.expectCommaSeparator();\n\n              if (this.match(')')) {\n                break;\n              }\n            }\n          }\n\n          this.expect(')');\n          return args;\n        };\n\n        Parser.prototype.isIdentifierName = function (token) {\n          return token.type === 3\n          /* Identifier */\n          || token.type === 4\n          /* Keyword */\n          || token.type === 1\n          /* BooleanLiteral */\n          || token.type === 5\n          /* NullLiteral */\n          ;\n        };\n\n        Parser.prototype.parseIdentifierName = function () {\n          var node = this.createNode();\n          var token = this.nextToken();\n\n          if (!this.isIdentifierName(token)) {\n            this.throwUnexpectedToken(token);\n          }\n\n          return this.finalize(node, new Node.Identifier(token.value));\n        };\n\n        Parser.prototype.parseNewExpression = function () {\n          var node = this.createNode();\n          var id = this.parseIdentifierName();\n          assert_1.assert(id.name === 'new', 'New expression must start with `new`');\n          var expr;\n\n          if (this.match('.')) {\n            this.nextToken();\n\n            if (this.lookahead.type === 3\n            /* Identifier */\n            && this.context.inFunctionBody && this.lookahead.value === 'target') {\n              var property = this.parseIdentifierName();\n              expr = new Node.MetaProperty(id, property);\n            } else {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n          } else {\n            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);\n            var args = this.match('(') ? this.parseArguments() : [];\n            expr = new Node.NewExpression(callee, args);\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n          }\n\n          return this.finalize(node, expr);\n        };\n\n        Parser.prototype.parseAsyncArgument = function () {\n          var arg = this.parseAssignmentExpression();\n          this.context.firstCoverInitializedNameError = null;\n          return arg;\n        };\n\n        Parser.prototype.parseAsyncArguments = function () {\n          this.expect('(');\n          var args = [];\n\n          if (!this.match(')')) {\n            while (true) {\n              var expr = this.match('...') ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAsyncArgument);\n              args.push(expr);\n\n              if (this.match(')')) {\n                break;\n              }\n\n              this.expectCommaSeparator();\n\n              if (this.match(')')) {\n                break;\n              }\n            }\n          }\n\n          this.expect(')');\n          return args;\n        };\n\n        Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {\n          var startToken = this.lookahead;\n          var maybeAsync = this.matchContextualKeyword('async');\n          var previousAllowIn = this.context.allowIn;\n          this.context.allowIn = true;\n          var expr;\n\n          if (this.matchKeyword('super') && this.context.inFunctionBody) {\n            expr = this.createNode();\n            this.nextToken();\n            expr = this.finalize(expr, new Node.Super());\n\n            if (!this.match('(') && !this.match('.') && !this.match('[')) {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n          } else {\n            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n          }\n\n          while (true) {\n            if (this.match('.')) {\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = true;\n              this.expect('.');\n              var property = this.parseIdentifierName();\n              expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));\n            } else if (this.match('(')) {\n              var asyncArrow = maybeAsync && startToken.lineNumber === this.lookahead.lineNumber;\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = false;\n              var args = asyncArrow ? this.parseAsyncArguments() : this.parseArguments();\n              expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));\n\n              if (asyncArrow && this.match('=>')) {\n                for (var i = 0; i < args.length; ++i) {\n                  this.reinterpretExpressionAsPattern(args[i]);\n                }\n\n                expr = {\n                  type: ArrowParameterPlaceHolder,\n                  params: args,\n                  async: true\n                };\n              }\n            } else if (this.match('[')) {\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = true;\n              this.expect('[');\n              var property = this.isolateCoverGrammar(this.parseExpression);\n              this.expect(']');\n              expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));\n            } else if (this.lookahead.type === 10\n            /* Template */\n            && this.lookahead.head) {\n              var quasi = this.parseTemplateLiteral();\n              expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));\n            } else {\n              break;\n            }\n          }\n\n          this.context.allowIn = previousAllowIn;\n          return expr;\n        };\n\n        Parser.prototype.parseSuper = function () {\n          var node = this.createNode();\n          this.expectKeyword('super');\n\n          if (!this.match('[') && !this.match('.')) {\n            this.throwUnexpectedToken(this.lookahead);\n          }\n\n          return this.finalize(node, new Node.Super());\n        };\n\n        Parser.prototype.parseLeftHandSideExpression = function () {\n          assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');\n          var node = this.startNode(this.lookahead);\n          var expr = this.matchKeyword('super') && this.context.inFunctionBody ? this.parseSuper() : this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n\n          while (true) {\n            if (this.match('[')) {\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = true;\n              this.expect('[');\n              var property = this.isolateCoverGrammar(this.parseExpression);\n              this.expect(']');\n              expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));\n            } else if (this.match('.')) {\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = true;\n              this.expect('.');\n              var property = this.parseIdentifierName();\n              expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));\n            } else if (this.lookahead.type === 10\n            /* Template */\n            && this.lookahead.head) {\n              var quasi = this.parseTemplateLiteral();\n              expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));\n            } else {\n              break;\n            }\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-update-expressions\n\n\n        Parser.prototype.parseUpdateExpression = function () {\n          var expr;\n          var startToken = this.lookahead;\n\n          if (this.match('++') || this.match('--')) {\n            var node = this.startNode(startToken);\n            var token = this.nextToken();\n            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\n            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n              this.tolerateError(messages_1.Messages.StrictLHSPrefix);\n            }\n\n            if (!this.context.isAssignmentTarget) {\n              this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n            }\n\n            var prefix = true;\n            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n          } else {\n            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\n            if (!this.hasLineTerminator && this.lookahead.type === 7\n            /* Punctuator */\n            ) {\n              if (this.match('++') || this.match('--')) {\n                if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n                  this.tolerateError(messages_1.Messages.StrictLHSPostfix);\n                }\n\n                if (!this.context.isAssignmentTarget) {\n                  this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n                }\n\n                this.context.isAssignmentTarget = false;\n                this.context.isBindingElement = false;\n                var operator = this.nextToken().value;\n                var prefix = false;\n                expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));\n              }\n            }\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-unary-operators\n\n\n        Parser.prototype.parseAwaitExpression = function () {\n          var node = this.createNode();\n          this.nextToken();\n          var argument = this.parseUnaryExpression();\n          return this.finalize(node, new Node.AwaitExpression(argument));\n        };\n\n        Parser.prototype.parseUnaryExpression = function () {\n          var expr;\n\n          if (this.match('+') || this.match('-') || this.match('~') || this.match('!') || this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {\n            var node = this.startNode(this.lookahead);\n            var token = this.nextToken();\n            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));\n\n            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {\n              this.tolerateError(messages_1.Messages.StrictDelete);\n            }\n\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n          } else if (this.context.await && this.matchContextualKeyword('await')) {\n            expr = this.parseAwaitExpression();\n          } else {\n            expr = this.parseUpdateExpression();\n          }\n\n          return expr;\n        };\n\n        Parser.prototype.parseExponentiationExpression = function () {\n          var startToken = this.lookahead;\n          var expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\n          if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {\n            this.nextToken();\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n            var left = expr;\n            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-exp-operator\n        // https://tc39.github.io/ecma262/#sec-multiplicative-operators\n        // https://tc39.github.io/ecma262/#sec-additive-operators\n        // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators\n        // https://tc39.github.io/ecma262/#sec-relational-operators\n        // https://tc39.github.io/ecma262/#sec-equality-operators\n        // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators\n        // https://tc39.github.io/ecma262/#sec-binary-logical-operators\n\n\n        Parser.prototype.binaryPrecedence = function (token) {\n          var op = token.value;\n          var precedence;\n\n          if (token.type === 7\n          /* Punctuator */\n          ) {\n            precedence = this.operatorPrecedence[op] || 0;\n          } else if (token.type === 4\n          /* Keyword */\n          ) {\n            precedence = op === 'instanceof' || this.context.allowIn && op === 'in' ? 7 : 0;\n          } else {\n            precedence = 0;\n          }\n\n          return precedence;\n        };\n\n        Parser.prototype.parseBinaryExpression = function () {\n          var startToken = this.lookahead;\n          var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);\n          var token = this.lookahead;\n          var prec = this.binaryPrecedence(token);\n\n          if (prec > 0) {\n            this.nextToken();\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n            var markers = [startToken, this.lookahead];\n            var left = expr;\n            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n            var stack = [left, token.value, right];\n            var precedences = [prec];\n\n            while (true) {\n              prec = this.binaryPrecedence(this.lookahead);\n\n              if (prec <= 0) {\n                break;\n              } // Reduce: make a binary expression from the three topmost entries.\n\n\n              while (stack.length > 2 && prec <= precedences[precedences.length - 1]) {\n                right = stack.pop();\n                var operator = stack.pop();\n                precedences.pop();\n                left = stack.pop();\n                markers.pop();\n                var node = this.startNode(markers[markers.length - 1]);\n                stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));\n              } // Shift.\n\n\n              stack.push(this.nextToken().value);\n              precedences.push(prec);\n              markers.push(this.lookahead);\n              stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));\n            } // Final reduce to clean-up the stack.\n\n\n            var i = stack.length - 1;\n            expr = stack[i];\n            var lastMarker = markers.pop();\n\n            while (i > 1) {\n              var marker = markers.pop();\n              var lastLineStart = lastMarker && lastMarker.lineStart;\n              var node = this.startNode(marker, lastLineStart);\n              var operator = stack[i - 1];\n              expr = this.finalize(node, new Node.BinaryExpression(operator, stack[i - 2], expr));\n              i -= 2;\n              lastMarker = marker;\n            }\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-conditional-operator\n\n\n        Parser.prototype.parseConditionalExpression = function () {\n          var startToken = this.lookahead;\n          var expr = this.inheritCoverGrammar(this.parseBinaryExpression);\n\n          if (this.match('?')) {\n            this.nextToken();\n            var previousAllowIn = this.context.allowIn;\n            this.context.allowIn = true;\n            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);\n            this.context.allowIn = previousAllowIn;\n            this.expect(':');\n            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);\n            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-assignment-operators\n\n\n        Parser.prototype.checkPatternParam = function (options, param) {\n          switch (param.type) {\n            case syntax_1.Syntax.Identifier:\n              this.validateParam(options, param, param.name);\n              break;\n\n            case syntax_1.Syntax.RestElement:\n              this.checkPatternParam(options, param.argument);\n              break;\n\n            case syntax_1.Syntax.AssignmentPattern:\n              this.checkPatternParam(options, param.left);\n              break;\n\n            case syntax_1.Syntax.ArrayPattern:\n              for (var i = 0; i < param.elements.length; i++) {\n                if (param.elements[i] !== null) {\n                  this.checkPatternParam(options, param.elements[i]);\n                }\n              }\n\n              break;\n\n            case syntax_1.Syntax.ObjectPattern:\n              for (var i = 0; i < param.properties.length; i++) {\n                this.checkPatternParam(options, param.properties[i].value);\n              }\n\n              break;\n\n            default:\n              break;\n          }\n\n          options.simple = options.simple && param instanceof Node.Identifier;\n        };\n\n        Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {\n          var params = [expr];\n          var options;\n          var asyncArrow = false;\n\n          switch (expr.type) {\n            case syntax_1.Syntax.Identifier:\n              break;\n\n            case ArrowParameterPlaceHolder:\n              params = expr.params;\n              asyncArrow = expr.async;\n              break;\n\n            default:\n              return null;\n          }\n\n          options = {\n            simple: true,\n            paramSet: {}\n          };\n\n          for (var i = 0; i < params.length; ++i) {\n            var param = params[i];\n\n            if (param.type === syntax_1.Syntax.AssignmentPattern) {\n              if (param.right.type === syntax_1.Syntax.YieldExpression) {\n                if (param.right.argument) {\n                  this.throwUnexpectedToken(this.lookahead);\n                }\n\n                param.right.type = syntax_1.Syntax.Identifier;\n                param.right.name = 'yield';\n                delete param.right.argument;\n                delete param.right.delegate;\n              }\n            } else if (asyncArrow && param.type === syntax_1.Syntax.Identifier && param.name === 'await') {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n\n            this.checkPatternParam(options, param);\n            params[i] = param;\n          }\n\n          if (this.context.strict || !this.context.allowYield) {\n            for (var i = 0; i < params.length; ++i) {\n              var param = params[i];\n\n              if (param.type === syntax_1.Syntax.YieldExpression) {\n                this.throwUnexpectedToken(this.lookahead);\n              }\n            }\n          }\n\n          if (options.message === messages_1.Messages.StrictParamDupe) {\n            var token = this.context.strict ? options.stricted : options.firstRestricted;\n            this.throwUnexpectedToken(token, options.message);\n          }\n\n          return {\n            simple: options.simple,\n            params: params,\n            stricted: options.stricted,\n            firstRestricted: options.firstRestricted,\n            message: options.message\n          };\n        };\n\n        Parser.prototype.parseAssignmentExpression = function () {\n          var expr;\n\n          if (!this.context.allowYield && this.matchKeyword('yield')) {\n            expr = this.parseYieldExpression();\n          } else {\n            var startToken = this.lookahead;\n            var token = startToken;\n            expr = this.parseConditionalExpression();\n\n            if (token.type === 3\n            /* Identifier */\n            && token.lineNumber === this.lookahead.lineNumber && token.value === 'async') {\n              if (this.lookahead.type === 3\n              /* Identifier */\n              || this.matchKeyword('yield')) {\n                var arg = this.parsePrimaryExpression();\n                this.reinterpretExpressionAsPattern(arg);\n                expr = {\n                  type: ArrowParameterPlaceHolder,\n                  params: [arg],\n                  async: true\n                };\n              }\n            }\n\n            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {\n              // https://tc39.github.io/ecma262/#sec-arrow-function-definitions\n              this.context.isAssignmentTarget = false;\n              this.context.isBindingElement = false;\n              var isAsync = expr.async;\n              var list = this.reinterpretAsCoverFormalsList(expr);\n\n              if (list) {\n                if (this.hasLineTerminator) {\n                  this.tolerateUnexpectedToken(this.lookahead);\n                }\n\n                this.context.firstCoverInitializedNameError = null;\n                var previousStrict = this.context.strict;\n                var previousAllowStrictDirective = this.context.allowStrictDirective;\n                this.context.allowStrictDirective = list.simple;\n                var previousAllowYield = this.context.allowYield;\n                var previousAwait = this.context.await;\n                this.context.allowYield = true;\n                this.context.await = isAsync;\n                var node = this.startNode(startToken);\n                this.expect('=>');\n                var body = void 0;\n\n                if (this.match('{')) {\n                  var previousAllowIn = this.context.allowIn;\n                  this.context.allowIn = true;\n                  body = this.parseFunctionSourceElements();\n                  this.context.allowIn = previousAllowIn;\n                } else {\n                  body = this.isolateCoverGrammar(this.parseAssignmentExpression);\n                }\n\n                var expression = body.type !== syntax_1.Syntax.BlockStatement;\n\n                if (this.context.strict && list.firstRestricted) {\n                  this.throwUnexpectedToken(list.firstRestricted, list.message);\n                }\n\n                if (this.context.strict && list.stricted) {\n                  this.tolerateUnexpectedToken(list.stricted, list.message);\n                }\n\n                expr = isAsync ? this.finalize(node, new Node.AsyncArrowFunctionExpression(list.params, body, expression)) : this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));\n                this.context.strict = previousStrict;\n                this.context.allowStrictDirective = previousAllowStrictDirective;\n                this.context.allowYield = previousAllowYield;\n                this.context.await = previousAwait;\n              }\n            } else {\n              if (this.matchAssign()) {\n                if (!this.context.isAssignmentTarget) {\n                  this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n                }\n\n                if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {\n                  var id = expr;\n\n                  if (this.scanner.isRestrictedWord(id.name)) {\n                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);\n                  }\n\n                  if (this.scanner.isStrictModeReservedWord(id.name)) {\n                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n                  }\n                }\n\n                if (!this.match('=')) {\n                  this.context.isAssignmentTarget = false;\n                  this.context.isBindingElement = false;\n                } else {\n                  this.reinterpretExpressionAsPattern(expr);\n                }\n\n                token = this.nextToken();\n                var operator = token.value;\n                var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n                expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(operator, expr, right));\n                this.context.firstCoverInitializedNameError = null;\n              }\n            }\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-comma-operator\n\n\n        Parser.prototype.parseExpression = function () {\n          var startToken = this.lookahead;\n          var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\n          if (this.match(',')) {\n            var expressions = [];\n            expressions.push(expr);\n\n            while (this.lookahead.type !== 2\n            /* EOF */\n            ) {\n              if (!this.match(',')) {\n                break;\n              }\n\n              this.nextToken();\n              expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n            }\n\n            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n          }\n\n          return expr;\n        }; // https://tc39.github.io/ecma262/#sec-block\n\n\n        Parser.prototype.parseStatementListItem = function () {\n          var statement;\n          this.context.isAssignmentTarget = true;\n          this.context.isBindingElement = true;\n\n          if (this.lookahead.type === 4\n          /* Keyword */\n          ) {\n            switch (this.lookahead.value) {\n              case 'export':\n                if (!this.context.isModule) {\n                  this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);\n                }\n\n                statement = this.parseExportDeclaration();\n                break;\n\n              case 'import':\n                if (!this.context.isModule) {\n                  this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);\n                }\n\n                statement = this.parseImportDeclaration();\n                break;\n\n              case 'const':\n                statement = this.parseLexicalDeclaration({\n                  inFor: false\n                });\n                break;\n\n              case 'function':\n                statement = this.parseFunctionDeclaration();\n                break;\n\n              case 'class':\n                statement = this.parseClassDeclaration();\n                break;\n\n              case 'let':\n                statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({\n                  inFor: false\n                }) : this.parseStatement();\n                break;\n\n              default:\n                statement = this.parseStatement();\n                break;\n            }\n          } else {\n            statement = this.parseStatement();\n          }\n\n          return statement;\n        };\n\n        Parser.prototype.parseBlock = function () {\n          var node = this.createNode();\n          this.expect('{');\n          var block = [];\n\n          while (true) {\n            if (this.match('}')) {\n              break;\n            }\n\n            block.push(this.parseStatementListItem());\n          }\n\n          this.expect('}');\n          return this.finalize(node, new Node.BlockStatement(block));\n        }; // https://tc39.github.io/ecma262/#sec-let-and-const-declarations\n\n\n        Parser.prototype.parseLexicalBinding = function (kind, options) {\n          var node = this.createNode();\n          var params = [];\n          var id = this.parsePattern(params, kind);\n\n          if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n            if (this.scanner.isRestrictedWord(id.name)) {\n              this.tolerateError(messages_1.Messages.StrictVarName);\n            }\n          }\n\n          var init = null;\n\n          if (kind === 'const') {\n            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {\n              if (this.match('=')) {\n                this.nextToken();\n                init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n              } else {\n                this.throwError(messages_1.Messages.DeclarationMissingInitializer, 'const');\n              }\n            }\n          } else if (!options.inFor && id.type !== syntax_1.Syntax.Identifier || this.match('=')) {\n            this.expect('=');\n            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n          }\n\n          return this.finalize(node, new Node.VariableDeclarator(id, init));\n        };\n\n        Parser.prototype.parseBindingList = function (kind, options) {\n          var list = [this.parseLexicalBinding(kind, options)];\n\n          while (this.match(',')) {\n            this.nextToken();\n            list.push(this.parseLexicalBinding(kind, options));\n          }\n\n          return list;\n        };\n\n        Parser.prototype.isLexicalDeclaration = function () {\n          var state = this.scanner.saveState();\n          this.scanner.scanComments();\n          var next = this.scanner.lex();\n          this.scanner.restoreState(state);\n          return next.type === 3\n          /* Identifier */\n          || next.type === 7\n          /* Punctuator */\n          && next.value === '[' || next.type === 7\n          /* Punctuator */\n          && next.value === '{' || next.type === 4\n          /* Keyword */\n          && next.value === 'let' || next.type === 4\n          /* Keyword */\n          && next.value === 'yield';\n        };\n\n        Parser.prototype.parseLexicalDeclaration = function (options) {\n          var node = this.createNode();\n          var kind = this.nextToken().value;\n          assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');\n          var declarations = this.parseBindingList(kind, options);\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.VariableDeclaration(declarations, kind));\n        }; // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns\n\n\n        Parser.prototype.parseBindingRestElement = function (params, kind) {\n          var node = this.createNode();\n          this.expect('...');\n          var arg = this.parsePattern(params, kind);\n          return this.finalize(node, new Node.RestElement(arg));\n        };\n\n        Parser.prototype.parseArrayPattern = function (params, kind) {\n          var node = this.createNode();\n          this.expect('[');\n          var elements = [];\n\n          while (!this.match(']')) {\n            if (this.match(',')) {\n              this.nextToken();\n              elements.push(null);\n            } else {\n              if (this.match('...')) {\n                elements.push(this.parseBindingRestElement(params, kind));\n                break;\n              } else {\n                elements.push(this.parsePatternWithDefault(params, kind));\n              }\n\n              if (!this.match(']')) {\n                this.expect(',');\n              }\n            }\n          }\n\n          this.expect(']');\n          return this.finalize(node, new Node.ArrayPattern(elements));\n        };\n\n        Parser.prototype.parsePropertyPattern = function (params, kind) {\n          var node = this.createNode();\n          var computed = false;\n          var shorthand = false;\n          var method = false;\n          var key;\n          var value;\n\n          if (this.lookahead.type === 3\n          /* Identifier */\n          ) {\n            var keyToken = this.lookahead;\n            key = this.parseVariableIdentifier();\n            var init = this.finalize(node, new Node.Identifier(keyToken.value));\n\n            if (this.match('=')) {\n              params.push(keyToken);\n              shorthand = true;\n              this.nextToken();\n              var expr = this.parseAssignmentExpression();\n              value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));\n            } else if (!this.match(':')) {\n              params.push(keyToken);\n              shorthand = true;\n              value = init;\n            } else {\n              this.expect(':');\n              value = this.parsePatternWithDefault(params, kind);\n            }\n          } else {\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            this.expect(':');\n            value = this.parsePatternWithDefault(params, kind);\n          }\n\n          return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));\n        };\n\n        Parser.prototype.parseObjectPattern = function (params, kind) {\n          var node = this.createNode();\n          var properties = [];\n          this.expect('{');\n\n          while (!this.match('}')) {\n            properties.push(this.parsePropertyPattern(params, kind));\n\n            if (!this.match('}')) {\n              this.expect(',');\n            }\n          }\n\n          this.expect('}');\n          return this.finalize(node, new Node.ObjectPattern(properties));\n        };\n\n        Parser.prototype.parsePattern = function (params, kind) {\n          var pattern;\n\n          if (this.match('[')) {\n            pattern = this.parseArrayPattern(params, kind);\n          } else if (this.match('{')) {\n            pattern = this.parseObjectPattern(params, kind);\n          } else {\n            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {\n              this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.LetInLexicalBinding);\n            }\n\n            params.push(this.lookahead);\n            pattern = this.parseVariableIdentifier(kind);\n          }\n\n          return pattern;\n        };\n\n        Parser.prototype.parsePatternWithDefault = function (params, kind) {\n          var startToken = this.lookahead;\n          var pattern = this.parsePattern(params, kind);\n\n          if (this.match('=')) {\n            this.nextToken();\n            var previousAllowYield = this.context.allowYield;\n            this.context.allowYield = true;\n            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n            this.context.allowYield = previousAllowYield;\n            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));\n          }\n\n          return pattern;\n        }; // https://tc39.github.io/ecma262/#sec-variable-statement\n\n\n        Parser.prototype.parseVariableIdentifier = function (kind) {\n          var node = this.createNode();\n          var token = this.nextToken();\n\n          if (token.type === 4\n          /* Keyword */\n          && token.value === 'yield') {\n            if (this.context.strict) {\n              this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n            } else if (!this.context.allowYield) {\n              this.throwUnexpectedToken(token);\n            }\n          } else if (token.type !== 3\n          /* Identifier */\n          ) {\n            if (this.context.strict && token.type === 4\n            /* Keyword */\n            && this.scanner.isStrictModeReservedWord(token.value)) {\n              this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n            } else {\n              if (this.context.strict || token.value !== 'let' || kind !== 'var') {\n                this.throwUnexpectedToken(token);\n              }\n            }\n          } else if ((this.context.isModule || this.context.await) && token.type === 3\n          /* Identifier */\n          && token.value === 'await') {\n            this.tolerateUnexpectedToken(token);\n          }\n\n          return this.finalize(node, new Node.Identifier(token.value));\n        };\n\n        Parser.prototype.parseVariableDeclaration = function (options) {\n          var node = this.createNode();\n          var params = [];\n          var id = this.parsePattern(params, 'var');\n\n          if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n            if (this.scanner.isRestrictedWord(id.name)) {\n              this.tolerateError(messages_1.Messages.StrictVarName);\n            }\n          }\n\n          var init = null;\n\n          if (this.match('=')) {\n            this.nextToken();\n            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n          } else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {\n            this.expect('=');\n          }\n\n          return this.finalize(node, new Node.VariableDeclarator(id, init));\n        };\n\n        Parser.prototype.parseVariableDeclarationList = function (options) {\n          var opt = {\n            inFor: options.inFor\n          };\n          var list = [];\n          list.push(this.parseVariableDeclaration(opt));\n\n          while (this.match(',')) {\n            this.nextToken();\n            list.push(this.parseVariableDeclaration(opt));\n          }\n\n          return list;\n        };\n\n        Parser.prototype.parseVariableStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('var');\n          var declarations = this.parseVariableDeclarationList({\n            inFor: false\n          });\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));\n        }; // https://tc39.github.io/ecma262/#sec-empty-statement\n\n\n        Parser.prototype.parseEmptyStatement = function () {\n          var node = this.createNode();\n          this.expect(';');\n          return this.finalize(node, new Node.EmptyStatement());\n        }; // https://tc39.github.io/ecma262/#sec-expression-statement\n\n\n        Parser.prototype.parseExpressionStatement = function () {\n          var node = this.createNode();\n          var expr = this.parseExpression();\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.ExpressionStatement(expr));\n        }; // https://tc39.github.io/ecma262/#sec-if-statement\n\n\n        Parser.prototype.parseIfClause = function () {\n          if (this.context.strict && this.matchKeyword('function')) {\n            this.tolerateError(messages_1.Messages.StrictFunction);\n          }\n\n          return this.parseStatement();\n        };\n\n        Parser.prototype.parseIfStatement = function () {\n          var node = this.createNode();\n          var consequent;\n          var alternate = null;\n          this.expectKeyword('if');\n          this.expect('(');\n          var test = this.parseExpression();\n\n          if (!this.match(')') && this.config.tolerant) {\n            this.tolerateUnexpectedToken(this.nextToken());\n            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());\n          } else {\n            this.expect(')');\n            consequent = this.parseIfClause();\n\n            if (this.matchKeyword('else')) {\n              this.nextToken();\n              alternate = this.parseIfClause();\n            }\n          }\n\n          return this.finalize(node, new Node.IfStatement(test, consequent, alternate));\n        }; // https://tc39.github.io/ecma262/#sec-do-while-statement\n\n\n        Parser.prototype.parseDoWhileStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('do');\n          var previousInIteration = this.context.inIteration;\n          this.context.inIteration = true;\n          var body = this.parseStatement();\n          this.context.inIteration = previousInIteration;\n          this.expectKeyword('while');\n          this.expect('(');\n          var test = this.parseExpression();\n\n          if (!this.match(')') && this.config.tolerant) {\n            this.tolerateUnexpectedToken(this.nextToken());\n          } else {\n            this.expect(')');\n\n            if (this.match(';')) {\n              this.nextToken();\n            }\n          }\n\n          return this.finalize(node, new Node.DoWhileStatement(body, test));\n        }; // https://tc39.github.io/ecma262/#sec-while-statement\n\n\n        Parser.prototype.parseWhileStatement = function () {\n          var node = this.createNode();\n          var body;\n          this.expectKeyword('while');\n          this.expect('(');\n          var test = this.parseExpression();\n\n          if (!this.match(')') && this.config.tolerant) {\n            this.tolerateUnexpectedToken(this.nextToken());\n            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n          } else {\n            this.expect(')');\n            var previousInIteration = this.context.inIteration;\n            this.context.inIteration = true;\n            body = this.parseStatement();\n            this.context.inIteration = previousInIteration;\n          }\n\n          return this.finalize(node, new Node.WhileStatement(test, body));\n        }; // https://tc39.github.io/ecma262/#sec-for-statement\n        // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements\n\n\n        Parser.prototype.parseForStatement = function () {\n          var init = null;\n          var test = null;\n          var update = null;\n          var forIn = true;\n          var left, right;\n          var node = this.createNode();\n          this.expectKeyword('for');\n          this.expect('(');\n\n          if (this.match(';')) {\n            this.nextToken();\n          } else {\n            if (this.matchKeyword('var')) {\n              init = this.createNode();\n              this.nextToken();\n              var previousAllowIn = this.context.allowIn;\n              this.context.allowIn = false;\n              var declarations = this.parseVariableDeclarationList({\n                inFor: true\n              });\n              this.context.allowIn = previousAllowIn;\n\n              if (declarations.length === 1 && this.matchKeyword('in')) {\n                var decl = declarations[0];\n\n                if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {\n                  this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');\n                }\n\n                init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n                this.nextToken();\n                left = init;\n                right = this.parseExpression();\n                init = null;\n              } else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n                init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n                this.nextToken();\n                left = init;\n                right = this.parseAssignmentExpression();\n                init = null;\n                forIn = false;\n              } else {\n                init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n                this.expect(';');\n              }\n            } else if (this.matchKeyword('const') || this.matchKeyword('let')) {\n              init = this.createNode();\n              var kind = this.nextToken().value;\n\n              if (!this.context.strict && this.lookahead.value === 'in') {\n                init = this.finalize(init, new Node.Identifier(kind));\n                this.nextToken();\n                left = init;\n                right = this.parseExpression();\n                init = null;\n              } else {\n                var previousAllowIn = this.context.allowIn;\n                this.context.allowIn = false;\n                var declarations = this.parseBindingList(kind, {\n                  inFor: true\n                });\n                this.context.allowIn = previousAllowIn;\n\n                if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {\n                  init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n                  this.nextToken();\n                  left = init;\n                  right = this.parseExpression();\n                  init = null;\n                } else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n                  init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n                  this.nextToken();\n                  left = init;\n                  right = this.parseAssignmentExpression();\n                  init = null;\n                  forIn = false;\n                } else {\n                  this.consumeSemicolon();\n                  init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n                }\n              }\n            } else {\n              var initStartToken = this.lookahead;\n              var previousAllowIn = this.context.allowIn;\n              this.context.allowIn = false;\n              init = this.inheritCoverGrammar(this.parseAssignmentExpression);\n              this.context.allowIn = previousAllowIn;\n\n              if (this.matchKeyword('in')) {\n                if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n                  this.tolerateError(messages_1.Messages.InvalidLHSInForIn);\n                }\n\n                this.nextToken();\n                this.reinterpretExpressionAsPattern(init);\n                left = init;\n                right = this.parseExpression();\n                init = null;\n              } else if (this.matchContextualKeyword('of')) {\n                if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n                  this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);\n                }\n\n                this.nextToken();\n                this.reinterpretExpressionAsPattern(init);\n                left = init;\n                right = this.parseAssignmentExpression();\n                init = null;\n                forIn = false;\n              } else {\n                if (this.match(',')) {\n                  var initSeq = [init];\n\n                  while (this.match(',')) {\n                    this.nextToken();\n                    initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n                  }\n\n                  init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));\n                }\n\n                this.expect(';');\n              }\n            }\n          }\n\n          if (typeof left === 'undefined') {\n            if (!this.match(';')) {\n              test = this.parseExpression();\n            }\n\n            this.expect(';');\n\n            if (!this.match(')')) {\n              update = this.parseExpression();\n            }\n          }\n\n          var body;\n\n          if (!this.match(')') && this.config.tolerant) {\n            this.tolerateUnexpectedToken(this.nextToken());\n            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n          } else {\n            this.expect(')');\n            var previousInIteration = this.context.inIteration;\n            this.context.inIteration = true;\n            body = this.isolateCoverGrammar(this.parseStatement);\n            this.context.inIteration = previousInIteration;\n          }\n\n          return typeof left === 'undefined' ? this.finalize(node, new Node.ForStatement(init, test, update, body)) : forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) : this.finalize(node, new Node.ForOfStatement(left, right, body));\n        }; // https://tc39.github.io/ecma262/#sec-continue-statement\n\n\n        Parser.prototype.parseContinueStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('continue');\n          var label = null;\n\n          if (this.lookahead.type === 3\n          /* Identifier */\n          && !this.hasLineTerminator) {\n            var id = this.parseVariableIdentifier();\n            label = id;\n            var key = '$' + id.name;\n\n            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n              this.throwError(messages_1.Messages.UnknownLabel, id.name);\n            }\n          }\n\n          this.consumeSemicolon();\n\n          if (label === null && !this.context.inIteration) {\n            this.throwError(messages_1.Messages.IllegalContinue);\n          }\n\n          return this.finalize(node, new Node.ContinueStatement(label));\n        }; // https://tc39.github.io/ecma262/#sec-break-statement\n\n\n        Parser.prototype.parseBreakStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('break');\n          var label = null;\n\n          if (this.lookahead.type === 3\n          /* Identifier */\n          && !this.hasLineTerminator) {\n            var id = this.parseVariableIdentifier();\n            var key = '$' + id.name;\n\n            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n              this.throwError(messages_1.Messages.UnknownLabel, id.name);\n            }\n\n            label = id;\n          }\n\n          this.consumeSemicolon();\n\n          if (label === null && !this.context.inIteration && !this.context.inSwitch) {\n            this.throwError(messages_1.Messages.IllegalBreak);\n          }\n\n          return this.finalize(node, new Node.BreakStatement(label));\n        }; // https://tc39.github.io/ecma262/#sec-return-statement\n\n\n        Parser.prototype.parseReturnStatement = function () {\n          if (!this.context.inFunctionBody) {\n            this.tolerateError(messages_1.Messages.IllegalReturn);\n          }\n\n          var node = this.createNode();\n          this.expectKeyword('return');\n          var hasArgument = !this.match(';') && !this.match('}') && !this.hasLineTerminator && this.lookahead.type !== 2\n          /* EOF */\n          || this.lookahead.type === 8\n          /* StringLiteral */\n          || this.lookahead.type === 10\n          /* Template */\n          ;\n          var argument = hasArgument ? this.parseExpression() : null;\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.ReturnStatement(argument));\n        }; // https://tc39.github.io/ecma262/#sec-with-statement\n\n\n        Parser.prototype.parseWithStatement = function () {\n          if (this.context.strict) {\n            this.tolerateError(messages_1.Messages.StrictModeWith);\n          }\n\n          var node = this.createNode();\n          var body;\n          this.expectKeyword('with');\n          this.expect('(');\n          var object = this.parseExpression();\n\n          if (!this.match(')') && this.config.tolerant) {\n            this.tolerateUnexpectedToken(this.nextToken());\n            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n          } else {\n            this.expect(')');\n            body = this.parseStatement();\n          }\n\n          return this.finalize(node, new Node.WithStatement(object, body));\n        }; // https://tc39.github.io/ecma262/#sec-switch-statement\n\n\n        Parser.prototype.parseSwitchCase = function () {\n          var node = this.createNode();\n          var test;\n\n          if (this.matchKeyword('default')) {\n            this.nextToken();\n            test = null;\n          } else {\n            this.expectKeyword('case');\n            test = this.parseExpression();\n          }\n\n          this.expect(':');\n          var consequent = [];\n\n          while (true) {\n            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {\n              break;\n            }\n\n            consequent.push(this.parseStatementListItem());\n          }\n\n          return this.finalize(node, new Node.SwitchCase(test, consequent));\n        };\n\n        Parser.prototype.parseSwitchStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('switch');\n          this.expect('(');\n          var discriminant = this.parseExpression();\n          this.expect(')');\n          var previousInSwitch = this.context.inSwitch;\n          this.context.inSwitch = true;\n          var cases = [];\n          var defaultFound = false;\n          this.expect('{');\n\n          while (true) {\n            if (this.match('}')) {\n              break;\n            }\n\n            var clause = this.parseSwitchCase();\n\n            if (clause.test === null) {\n              if (defaultFound) {\n                this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);\n              }\n\n              defaultFound = true;\n            }\n\n            cases.push(clause);\n          }\n\n          this.expect('}');\n          this.context.inSwitch = previousInSwitch;\n          return this.finalize(node, new Node.SwitchStatement(discriminant, cases));\n        }; // https://tc39.github.io/ecma262/#sec-labelled-statements\n\n\n        Parser.prototype.parseLabelledStatement = function () {\n          var node = this.createNode();\n          var expr = this.parseExpression();\n          var statement;\n\n          if (expr.type === syntax_1.Syntax.Identifier && this.match(':')) {\n            this.nextToken();\n            var id = expr;\n            var key = '$' + id.name;\n\n            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n              this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);\n            }\n\n            this.context.labelSet[key] = true;\n            var body = void 0;\n\n            if (this.matchKeyword('class')) {\n              this.tolerateUnexpectedToken(this.lookahead);\n              body = this.parseClassDeclaration();\n            } else if (this.matchKeyword('function')) {\n              var token = this.lookahead;\n              var declaration = this.parseFunctionDeclaration();\n\n              if (this.context.strict) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunction);\n              } else if (declaration.generator) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.GeneratorInLegacyContext);\n              }\n\n              body = declaration;\n            } else {\n              body = this.parseStatement();\n            }\n\n            delete this.context.labelSet[key];\n            statement = new Node.LabeledStatement(id, body);\n          } else {\n            this.consumeSemicolon();\n            statement = new Node.ExpressionStatement(expr);\n          }\n\n          return this.finalize(node, statement);\n        }; // https://tc39.github.io/ecma262/#sec-throw-statement\n\n\n        Parser.prototype.parseThrowStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('throw');\n\n          if (this.hasLineTerminator) {\n            this.throwError(messages_1.Messages.NewlineAfterThrow);\n          }\n\n          var argument = this.parseExpression();\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.ThrowStatement(argument));\n        }; // https://tc39.github.io/ecma262/#sec-try-statement\n\n\n        Parser.prototype.parseCatchClause = function () {\n          var node = this.createNode();\n          this.expectKeyword('catch');\n          this.expect('(');\n\n          if (this.match(')')) {\n            this.throwUnexpectedToken(this.lookahead);\n          }\n\n          var params = [];\n          var param = this.parsePattern(params);\n          var paramMap = {};\n\n          for (var i = 0; i < params.length; i++) {\n            var key = '$' + params[i].value;\n\n            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {\n              this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);\n            }\n\n            paramMap[key] = true;\n          }\n\n          if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {\n            if (this.scanner.isRestrictedWord(param.name)) {\n              this.tolerateError(messages_1.Messages.StrictCatchVariable);\n            }\n          }\n\n          this.expect(')');\n          var body = this.parseBlock();\n          return this.finalize(node, new Node.CatchClause(param, body));\n        };\n\n        Parser.prototype.parseFinallyClause = function () {\n          this.expectKeyword('finally');\n          return this.parseBlock();\n        };\n\n        Parser.prototype.parseTryStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('try');\n          var block = this.parseBlock();\n          var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;\n          var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;\n\n          if (!handler && !finalizer) {\n            this.throwError(messages_1.Messages.NoCatchOrFinally);\n          }\n\n          return this.finalize(node, new Node.TryStatement(block, handler, finalizer));\n        }; // https://tc39.github.io/ecma262/#sec-debugger-statement\n\n\n        Parser.prototype.parseDebuggerStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('debugger');\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.DebuggerStatement());\n        }; // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations\n\n\n        Parser.prototype.parseStatement = function () {\n          var statement;\n\n          switch (this.lookahead.type) {\n            case 1\n            /* BooleanLiteral */\n            :\n            case 5\n            /* NullLiteral */\n            :\n            case 6\n            /* NumericLiteral */\n            :\n            case 8\n            /* StringLiteral */\n            :\n            case 10\n            /* Template */\n            :\n            case 9\n            /* RegularExpression */\n            :\n              statement = this.parseExpressionStatement();\n              break;\n\n            case 7\n            /* Punctuator */\n            :\n              var value = this.lookahead.value;\n\n              if (value === '{') {\n                statement = this.parseBlock();\n              } else if (value === '(') {\n                statement = this.parseExpressionStatement();\n              } else if (value === ';') {\n                statement = this.parseEmptyStatement();\n              } else {\n                statement = this.parseExpressionStatement();\n              }\n\n              break;\n\n            case 3\n            /* Identifier */\n            :\n              statement = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();\n              break;\n\n            case 4\n            /* Keyword */\n            :\n              switch (this.lookahead.value) {\n                case 'break':\n                  statement = this.parseBreakStatement();\n                  break;\n\n                case 'continue':\n                  statement = this.parseContinueStatement();\n                  break;\n\n                case 'debugger':\n                  statement = this.parseDebuggerStatement();\n                  break;\n\n                case 'do':\n                  statement = this.parseDoWhileStatement();\n                  break;\n\n                case 'for':\n                  statement = this.parseForStatement();\n                  break;\n\n                case 'function':\n                  statement = this.parseFunctionDeclaration();\n                  break;\n\n                case 'if':\n                  statement = this.parseIfStatement();\n                  break;\n\n                case 'return':\n                  statement = this.parseReturnStatement();\n                  break;\n\n                case 'switch':\n                  statement = this.parseSwitchStatement();\n                  break;\n\n                case 'throw':\n                  statement = this.parseThrowStatement();\n                  break;\n\n                case 'try':\n                  statement = this.parseTryStatement();\n                  break;\n\n                case 'var':\n                  statement = this.parseVariableStatement();\n                  break;\n\n                case 'while':\n                  statement = this.parseWhileStatement();\n                  break;\n\n                case 'with':\n                  statement = this.parseWithStatement();\n                  break;\n\n                default:\n                  statement = this.parseExpressionStatement();\n                  break;\n              }\n\n              break;\n\n            default:\n              statement = this.throwUnexpectedToken(this.lookahead);\n          }\n\n          return statement;\n        }; // https://tc39.github.io/ecma262/#sec-function-definitions\n\n\n        Parser.prototype.parseFunctionSourceElements = function () {\n          var node = this.createNode();\n          this.expect('{');\n          var body = this.parseDirectivePrologues();\n          var previousLabelSet = this.context.labelSet;\n          var previousInIteration = this.context.inIteration;\n          var previousInSwitch = this.context.inSwitch;\n          var previousInFunctionBody = this.context.inFunctionBody;\n          this.context.labelSet = {};\n          this.context.inIteration = false;\n          this.context.inSwitch = false;\n          this.context.inFunctionBody = true;\n\n          while (this.lookahead.type !== 2\n          /* EOF */\n          ) {\n            if (this.match('}')) {\n              break;\n            }\n\n            body.push(this.parseStatementListItem());\n          }\n\n          this.expect('}');\n          this.context.labelSet = previousLabelSet;\n          this.context.inIteration = previousInIteration;\n          this.context.inSwitch = previousInSwitch;\n          this.context.inFunctionBody = previousInFunctionBody;\n          return this.finalize(node, new Node.BlockStatement(body));\n        };\n\n        Parser.prototype.validateParam = function (options, param, name) {\n          var key = '$' + name;\n\n          if (this.context.strict) {\n            if (this.scanner.isRestrictedWord(name)) {\n              options.stricted = param;\n              options.message = messages_1.Messages.StrictParamName;\n            }\n\n            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n              options.stricted = param;\n              options.message = messages_1.Messages.StrictParamDupe;\n            }\n          } else if (!options.firstRestricted) {\n            if (this.scanner.isRestrictedWord(name)) {\n              options.firstRestricted = param;\n              options.message = messages_1.Messages.StrictParamName;\n            } else if (this.scanner.isStrictModeReservedWord(name)) {\n              options.firstRestricted = param;\n              options.message = messages_1.Messages.StrictReservedWord;\n            } else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n              options.stricted = param;\n              options.message = messages_1.Messages.StrictParamDupe;\n            }\n          }\n          /* istanbul ignore next */\n\n\n          if (typeof Object.defineProperty === 'function') {\n            Object.defineProperty(options.paramSet, key, {\n              value: true,\n              enumerable: true,\n              writable: true,\n              configurable: true\n            });\n          } else {\n            options.paramSet[key] = true;\n          }\n        };\n\n        Parser.prototype.parseRestElement = function (params) {\n          var node = this.createNode();\n          this.expect('...');\n          var arg = this.parsePattern(params);\n\n          if (this.match('=')) {\n            this.throwError(messages_1.Messages.DefaultRestParameter);\n          }\n\n          if (!this.match(')')) {\n            this.throwError(messages_1.Messages.ParameterAfterRestParameter);\n          }\n\n          return this.finalize(node, new Node.RestElement(arg));\n        };\n\n        Parser.prototype.parseFormalParameter = function (options) {\n          var params = [];\n          var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);\n\n          for (var i = 0; i < params.length; i++) {\n            this.validateParam(options, params[i], params[i].value);\n          }\n\n          options.simple = options.simple && param instanceof Node.Identifier;\n          options.params.push(param);\n        };\n\n        Parser.prototype.parseFormalParameters = function (firstRestricted) {\n          var options;\n          options = {\n            simple: true,\n            params: [],\n            firstRestricted: firstRestricted\n          };\n          this.expect('(');\n\n          if (!this.match(')')) {\n            options.paramSet = {};\n\n            while (this.lookahead.type !== 2\n            /* EOF */\n            ) {\n              this.parseFormalParameter(options);\n\n              if (this.match(')')) {\n                break;\n              }\n\n              this.expect(',');\n\n              if (this.match(')')) {\n                break;\n              }\n            }\n          }\n\n          this.expect(')');\n          return {\n            simple: options.simple,\n            params: options.params,\n            stricted: options.stricted,\n            firstRestricted: options.firstRestricted,\n            message: options.message\n          };\n        };\n\n        Parser.prototype.matchAsyncFunction = function () {\n          var match = this.matchContextualKeyword('async');\n\n          if (match) {\n            var state = this.scanner.saveState();\n            this.scanner.scanComments();\n            var next = this.scanner.lex();\n            this.scanner.restoreState(state);\n            match = state.lineNumber === next.lineNumber && next.type === 4\n            /* Keyword */\n            && next.value === 'function';\n          }\n\n          return match;\n        };\n\n        Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {\n          var node = this.createNode();\n          var isAsync = this.matchContextualKeyword('async');\n\n          if (isAsync) {\n            this.nextToken();\n          }\n\n          this.expectKeyword('function');\n          var isGenerator = isAsync ? false : this.match('*');\n\n          if (isGenerator) {\n            this.nextToken();\n          }\n\n          var message;\n          var id = null;\n          var firstRestricted = null;\n\n          if (!identifierIsOptional || !this.match('(')) {\n            var token = this.lookahead;\n            id = this.parseVariableIdentifier();\n\n            if (this.context.strict) {\n              if (this.scanner.isRestrictedWord(token.value)) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n              }\n            } else {\n              if (this.scanner.isRestrictedWord(token.value)) {\n                firstRestricted = token;\n                message = messages_1.Messages.StrictFunctionName;\n              } else if (this.scanner.isStrictModeReservedWord(token.value)) {\n                firstRestricted = token;\n                message = messages_1.Messages.StrictReservedWord;\n              }\n            }\n          }\n\n          var previousAllowAwait = this.context.await;\n          var previousAllowYield = this.context.allowYield;\n          this.context.await = isAsync;\n          this.context.allowYield = !isGenerator;\n          var formalParameters = this.parseFormalParameters(firstRestricted);\n          var params = formalParameters.params;\n          var stricted = formalParameters.stricted;\n          firstRestricted = formalParameters.firstRestricted;\n\n          if (formalParameters.message) {\n            message = formalParameters.message;\n          }\n\n          var previousStrict = this.context.strict;\n          var previousAllowStrictDirective = this.context.allowStrictDirective;\n          this.context.allowStrictDirective = formalParameters.simple;\n          var body = this.parseFunctionSourceElements();\n\n          if (this.context.strict && firstRestricted) {\n            this.throwUnexpectedToken(firstRestricted, message);\n          }\n\n          if (this.context.strict && stricted) {\n            this.tolerateUnexpectedToken(stricted, message);\n          }\n\n          this.context.strict = previousStrict;\n          this.context.allowStrictDirective = previousAllowStrictDirective;\n          this.context.await = previousAllowAwait;\n          this.context.allowYield = previousAllowYield;\n          return isAsync ? this.finalize(node, new Node.AsyncFunctionDeclaration(id, params, body)) : this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));\n        };\n\n        Parser.prototype.parseFunctionExpression = function () {\n          var node = this.createNode();\n          var isAsync = this.matchContextualKeyword('async');\n\n          if (isAsync) {\n            this.nextToken();\n          }\n\n          this.expectKeyword('function');\n          var isGenerator = isAsync ? false : this.match('*');\n\n          if (isGenerator) {\n            this.nextToken();\n          }\n\n          var message;\n          var id = null;\n          var firstRestricted;\n          var previousAllowAwait = this.context.await;\n          var previousAllowYield = this.context.allowYield;\n          this.context.await = isAsync;\n          this.context.allowYield = !isGenerator;\n\n          if (!this.match('(')) {\n            var token = this.lookahead;\n            id = !this.context.strict && !isGenerator && this.matchKeyword('yield') ? this.parseIdentifierName() : this.parseVariableIdentifier();\n\n            if (this.context.strict) {\n              if (this.scanner.isRestrictedWord(token.value)) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n              }\n            } else {\n              if (this.scanner.isRestrictedWord(token.value)) {\n                firstRestricted = token;\n                message = messages_1.Messages.StrictFunctionName;\n              } else if (this.scanner.isStrictModeReservedWord(token.value)) {\n                firstRestricted = token;\n                message = messages_1.Messages.StrictReservedWord;\n              }\n            }\n          }\n\n          var formalParameters = this.parseFormalParameters(firstRestricted);\n          var params = formalParameters.params;\n          var stricted = formalParameters.stricted;\n          firstRestricted = formalParameters.firstRestricted;\n\n          if (formalParameters.message) {\n            message = formalParameters.message;\n          }\n\n          var previousStrict = this.context.strict;\n          var previousAllowStrictDirective = this.context.allowStrictDirective;\n          this.context.allowStrictDirective = formalParameters.simple;\n          var body = this.parseFunctionSourceElements();\n\n          if (this.context.strict && firstRestricted) {\n            this.throwUnexpectedToken(firstRestricted, message);\n          }\n\n          if (this.context.strict && stricted) {\n            this.tolerateUnexpectedToken(stricted, message);\n          }\n\n          this.context.strict = previousStrict;\n          this.context.allowStrictDirective = previousAllowStrictDirective;\n          this.context.await = previousAllowAwait;\n          this.context.allowYield = previousAllowYield;\n          return isAsync ? this.finalize(node, new Node.AsyncFunctionExpression(id, params, body)) : this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));\n        }; // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive\n\n\n        Parser.prototype.parseDirective = function () {\n          var token = this.lookahead;\n          var node = this.createNode();\n          var expr = this.parseExpression();\n          var directive = expr.type === syntax_1.Syntax.Literal ? this.getTokenRaw(token).slice(1, -1) : null;\n          this.consumeSemicolon();\n          return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));\n        };\n\n        Parser.prototype.parseDirectivePrologues = function () {\n          var firstRestricted = null;\n          var body = [];\n\n          while (true) {\n            var token = this.lookahead;\n\n            if (token.type !== 8\n            /* StringLiteral */\n            ) {\n              break;\n            }\n\n            var statement = this.parseDirective();\n            body.push(statement);\n            var directive = statement.directive;\n\n            if (typeof directive !== 'string') {\n              break;\n            }\n\n            if (directive === 'use strict') {\n              this.context.strict = true;\n\n              if (firstRestricted) {\n                this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);\n              }\n\n              if (!this.context.allowStrictDirective) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.IllegalLanguageModeDirective);\n              }\n            } else {\n              if (!firstRestricted && token.octal) {\n                firstRestricted = token;\n              }\n            }\n          }\n\n          return body;\n        }; // https://tc39.github.io/ecma262/#sec-method-definitions\n\n\n        Parser.prototype.qualifiedPropertyName = function (token) {\n          switch (token.type) {\n            case 3\n            /* Identifier */\n            :\n            case 8\n            /* StringLiteral */\n            :\n            case 1\n            /* BooleanLiteral */\n            :\n            case 5\n            /* NullLiteral */\n            :\n            case 6\n            /* NumericLiteral */\n            :\n            case 4\n            /* Keyword */\n            :\n              return true;\n\n            case 7\n            /* Punctuator */\n            :\n              return token.value === '[';\n\n            default:\n              break;\n          }\n\n          return false;\n        };\n\n        Parser.prototype.parseGetterMethod = function () {\n          var node = this.createNode();\n          var isGenerator = false;\n          var previousAllowYield = this.context.allowYield;\n          this.context.allowYield = !isGenerator;\n          var formalParameters = this.parseFormalParameters();\n\n          if (formalParameters.params.length > 0) {\n            this.tolerateError(messages_1.Messages.BadGetterArity);\n          }\n\n          var method = this.parsePropertyMethod(formalParameters);\n          this.context.allowYield = previousAllowYield;\n          return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));\n        };\n\n        Parser.prototype.parseSetterMethod = function () {\n          var node = this.createNode();\n          var isGenerator = false;\n          var previousAllowYield = this.context.allowYield;\n          this.context.allowYield = !isGenerator;\n          var formalParameters = this.parseFormalParameters();\n\n          if (formalParameters.params.length !== 1) {\n            this.tolerateError(messages_1.Messages.BadSetterArity);\n          } else if (formalParameters.params[0] instanceof Node.RestElement) {\n            this.tolerateError(messages_1.Messages.BadSetterRestParameter);\n          }\n\n          var method = this.parsePropertyMethod(formalParameters);\n          this.context.allowYield = previousAllowYield;\n          return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));\n        };\n\n        Parser.prototype.parseGeneratorMethod = function () {\n          var node = this.createNode();\n          var isGenerator = true;\n          var previousAllowYield = this.context.allowYield;\n          this.context.allowYield = true;\n          var params = this.parseFormalParameters();\n          this.context.allowYield = false;\n          var method = this.parsePropertyMethod(params);\n          this.context.allowYield = previousAllowYield;\n          return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n        }; // https://tc39.github.io/ecma262/#sec-generator-function-definitions\n\n\n        Parser.prototype.isStartOfExpression = function () {\n          var start = true;\n          var value = this.lookahead.value;\n\n          switch (this.lookahead.type) {\n            case 7\n            /* Punctuator */\n            :\n              start = value === '[' || value === '(' || value === '{' || value === '+' || value === '-' || value === '!' || value === '~' || value === '++' || value === '--' || value === '/' || value === '/='; // regular expression literal\n\n              break;\n\n            case 4\n            /* Keyword */\n            :\n              start = value === 'class' || value === 'delete' || value === 'function' || value === 'let' || value === 'new' || value === 'super' || value === 'this' || value === 'typeof' || value === 'void' || value === 'yield';\n              break;\n\n            default:\n              break;\n          }\n\n          return start;\n        };\n\n        Parser.prototype.parseYieldExpression = function () {\n          var node = this.createNode();\n          this.expectKeyword('yield');\n          var argument = null;\n          var delegate = false;\n\n          if (!this.hasLineTerminator) {\n            var previousAllowYield = this.context.allowYield;\n            this.context.allowYield = false;\n            delegate = this.match('*');\n\n            if (delegate) {\n              this.nextToken();\n              argument = this.parseAssignmentExpression();\n            } else if (this.isStartOfExpression()) {\n              argument = this.parseAssignmentExpression();\n            }\n\n            this.context.allowYield = previousAllowYield;\n          }\n\n          return this.finalize(node, new Node.YieldExpression(argument, delegate));\n        }; // https://tc39.github.io/ecma262/#sec-class-definitions\n\n\n        Parser.prototype.parseClassElement = function (hasConstructor) {\n          var token = this.lookahead;\n          var node = this.createNode();\n          var kind = '';\n          var key = null;\n          var value = null;\n          var computed = false;\n          var method = false;\n          var isStatic = false;\n          var isAsync = false;\n\n          if (this.match('*')) {\n            this.nextToken();\n          } else {\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            var id = key;\n\n            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {\n              token = this.lookahead;\n              isStatic = true;\n              computed = this.match('[');\n\n              if (this.match('*')) {\n                this.nextToken();\n              } else {\n                key = this.parseObjectPropertyKey();\n              }\n            }\n\n            if (token.type === 3\n            /* Identifier */\n            && !this.hasLineTerminator && token.value === 'async') {\n              var punctuator = this.lookahead.value;\n\n              if (punctuator !== ':' && punctuator !== '(' && punctuator !== '*') {\n                isAsync = true;\n                token = this.lookahead;\n                key = this.parseObjectPropertyKey();\n\n                if (token.type === 3\n                /* Identifier */\n                && token.value === 'constructor') {\n                  this.tolerateUnexpectedToken(token, messages_1.Messages.ConstructorIsAsync);\n                }\n              }\n            }\n          }\n\n          var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n\n          if (token.type === 3\n          /* Identifier */\n          ) {\n            if (token.value === 'get' && lookaheadPropertyKey) {\n              kind = 'get';\n              computed = this.match('[');\n              key = this.parseObjectPropertyKey();\n              this.context.allowYield = false;\n              value = this.parseGetterMethod();\n            } else if (token.value === 'set' && lookaheadPropertyKey) {\n              kind = 'set';\n              computed = this.match('[');\n              key = this.parseObjectPropertyKey();\n              value = this.parseSetterMethod();\n            }\n          } else if (token.type === 7\n          /* Punctuator */\n          && token.value === '*' && lookaheadPropertyKey) {\n            kind = 'init';\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            value = this.parseGeneratorMethod();\n            method = true;\n          }\n\n          if (!kind && key && this.match('(')) {\n            kind = 'init';\n            value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();\n            method = true;\n          }\n\n          if (!kind) {\n            this.throwUnexpectedToken(this.lookahead);\n          }\n\n          if (kind === 'init') {\n            kind = 'method';\n          }\n\n          if (!computed) {\n            if (isStatic && this.isPropertyKey(key, 'prototype')) {\n              this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);\n            }\n\n            if (!isStatic && this.isPropertyKey(key, 'constructor')) {\n              if (kind !== 'method' || !method || value && value.generator) {\n                this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);\n              }\n\n              if (hasConstructor.value) {\n                this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);\n              } else {\n                hasConstructor.value = true;\n              }\n\n              kind = 'constructor';\n            }\n          }\n\n          return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));\n        };\n\n        Parser.prototype.parseClassElementList = function () {\n          var body = [];\n          var hasConstructor = {\n            value: false\n          };\n          this.expect('{');\n\n          while (!this.match('}')) {\n            if (this.match(';')) {\n              this.nextToken();\n            } else {\n              body.push(this.parseClassElement(hasConstructor));\n            }\n          }\n\n          this.expect('}');\n          return body;\n        };\n\n        Parser.prototype.parseClassBody = function () {\n          var node = this.createNode();\n          var elementList = this.parseClassElementList();\n          return this.finalize(node, new Node.ClassBody(elementList));\n        };\n\n        Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {\n          var node = this.createNode();\n          var previousStrict = this.context.strict;\n          this.context.strict = true;\n          this.expectKeyword('class');\n          var id = identifierIsOptional && this.lookahead.type !== 3\n          /* Identifier */\n          ? null : this.parseVariableIdentifier();\n          var superClass = null;\n\n          if (this.matchKeyword('extends')) {\n            this.nextToken();\n            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n          }\n\n          var classBody = this.parseClassBody();\n          this.context.strict = previousStrict;\n          return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));\n        };\n\n        Parser.prototype.parseClassExpression = function () {\n          var node = this.createNode();\n          var previousStrict = this.context.strict;\n          this.context.strict = true;\n          this.expectKeyword('class');\n          var id = this.lookahead.type === 3\n          /* Identifier */\n          ? this.parseVariableIdentifier() : null;\n          var superClass = null;\n\n          if (this.matchKeyword('extends')) {\n            this.nextToken();\n            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n          }\n\n          var classBody = this.parseClassBody();\n          this.context.strict = previousStrict;\n          return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));\n        }; // https://tc39.github.io/ecma262/#sec-scripts\n        // https://tc39.github.io/ecma262/#sec-modules\n\n\n        Parser.prototype.parseModule = function () {\n          this.context.strict = true;\n          this.context.isModule = true;\n          this.scanner.isModule = true;\n          var node = this.createNode();\n          var body = this.parseDirectivePrologues();\n\n          while (this.lookahead.type !== 2\n          /* EOF */\n          ) {\n            body.push(this.parseStatementListItem());\n          }\n\n          return this.finalize(node, new Node.Module(body));\n        };\n\n        Parser.prototype.parseScript = function () {\n          var node = this.createNode();\n          var body = this.parseDirectivePrologues();\n\n          while (this.lookahead.type !== 2\n          /* EOF */\n          ) {\n            body.push(this.parseStatementListItem());\n          }\n\n          return this.finalize(node, new Node.Script(body));\n        }; // https://tc39.github.io/ecma262/#sec-imports\n\n\n        Parser.prototype.parseModuleSpecifier = function () {\n          var node = this.createNode();\n\n          if (this.lookahead.type !== 8\n          /* StringLiteral */\n          ) {\n            this.throwError(messages_1.Messages.InvalidModuleSpecifier);\n          }\n\n          var token = this.nextToken();\n          var raw = this.getTokenRaw(token);\n          return this.finalize(node, new Node.Literal(token.value, raw));\n        }; // import {<foo as bar>} ...;\n\n\n        Parser.prototype.parseImportSpecifier = function () {\n          var node = this.createNode();\n          var imported;\n          var local;\n\n          if (this.lookahead.type === 3\n          /* Identifier */\n          ) {\n            imported = this.parseVariableIdentifier();\n            local = imported;\n\n            if (this.matchContextualKeyword('as')) {\n              this.nextToken();\n              local = this.parseVariableIdentifier();\n            }\n          } else {\n            imported = this.parseIdentifierName();\n            local = imported;\n\n            if (this.matchContextualKeyword('as')) {\n              this.nextToken();\n              local = this.parseVariableIdentifier();\n            } else {\n              this.throwUnexpectedToken(this.nextToken());\n            }\n          }\n\n          return this.finalize(node, new Node.ImportSpecifier(local, imported));\n        }; // {foo, bar as bas}\n\n\n        Parser.prototype.parseNamedImports = function () {\n          this.expect('{');\n          var specifiers = [];\n\n          while (!this.match('}')) {\n            specifiers.push(this.parseImportSpecifier());\n\n            if (!this.match('}')) {\n              this.expect(',');\n            }\n          }\n\n          this.expect('}');\n          return specifiers;\n        }; // import <foo> ...;\n\n\n        Parser.prototype.parseImportDefaultSpecifier = function () {\n          var node = this.createNode();\n          var local = this.parseIdentifierName();\n          return this.finalize(node, new Node.ImportDefaultSpecifier(local));\n        }; // import <* as foo> ...;\n\n\n        Parser.prototype.parseImportNamespaceSpecifier = function () {\n          var node = this.createNode();\n          this.expect('*');\n\n          if (!this.matchContextualKeyword('as')) {\n            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);\n          }\n\n          this.nextToken();\n          var local = this.parseIdentifierName();\n          return this.finalize(node, new Node.ImportNamespaceSpecifier(local));\n        };\n\n        Parser.prototype.parseImportDeclaration = function () {\n          if (this.context.inFunctionBody) {\n            this.throwError(messages_1.Messages.IllegalImportDeclaration);\n          }\n\n          var node = this.createNode();\n          this.expectKeyword('import');\n          var src;\n          var specifiers = [];\n\n          if (this.lookahead.type === 8\n          /* StringLiteral */\n          ) {\n            // import 'foo';\n            src = this.parseModuleSpecifier();\n          } else {\n            if (this.match('{')) {\n              // import {bar}\n              specifiers = specifiers.concat(this.parseNamedImports());\n            } else if (this.match('*')) {\n              // import * as foo\n              specifiers.push(this.parseImportNamespaceSpecifier());\n            } else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {\n              // import foo\n              specifiers.push(this.parseImportDefaultSpecifier());\n\n              if (this.match(',')) {\n                this.nextToken();\n\n                if (this.match('*')) {\n                  // import foo, * as foo\n                  specifiers.push(this.parseImportNamespaceSpecifier());\n                } else if (this.match('{')) {\n                  // import foo, {bar}\n                  specifiers = specifiers.concat(this.parseNamedImports());\n                } else {\n                  this.throwUnexpectedToken(this.lookahead);\n                }\n              }\n            } else {\n              this.throwUnexpectedToken(this.nextToken());\n            }\n\n            if (!this.matchContextualKeyword('from')) {\n              var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n              this.throwError(message, this.lookahead.value);\n            }\n\n            this.nextToken();\n            src = this.parseModuleSpecifier();\n          }\n\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.ImportDeclaration(specifiers, src));\n        }; // https://tc39.github.io/ecma262/#sec-exports\n\n\n        Parser.prototype.parseExportSpecifier = function () {\n          var node = this.createNode();\n          var local = this.parseIdentifierName();\n          var exported = local;\n\n          if (this.matchContextualKeyword('as')) {\n            this.nextToken();\n            exported = this.parseIdentifierName();\n          }\n\n          return this.finalize(node, new Node.ExportSpecifier(local, exported));\n        };\n\n        Parser.prototype.parseExportDeclaration = function () {\n          if (this.context.inFunctionBody) {\n            this.throwError(messages_1.Messages.IllegalExportDeclaration);\n          }\n\n          var node = this.createNode();\n          this.expectKeyword('export');\n          var exportDeclaration;\n\n          if (this.matchKeyword('default')) {\n            // export default ...\n            this.nextToken();\n\n            if (this.matchKeyword('function')) {\n              // export default function foo () {}\n              // export default function () {}\n              var declaration = this.parseFunctionDeclaration(true);\n              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n            } else if (this.matchKeyword('class')) {\n              // export default class foo {}\n              var declaration = this.parseClassDeclaration(true);\n              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n            } else if (this.matchContextualKeyword('async')) {\n              // export default async function f () {}\n              // export default async function () {}\n              // export default async x => x\n              var declaration = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();\n              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n            } else {\n              if (this.matchContextualKeyword('from')) {\n                this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);\n              } // export default {};\n              // export default [];\n              // export default (1 + 2);\n\n\n              var declaration = this.match('{') ? this.parseObjectInitializer() : this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();\n              this.consumeSemicolon();\n              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n            }\n          } else if (this.match('*')) {\n            // export * from 'foo';\n            this.nextToken();\n\n            if (!this.matchContextualKeyword('from')) {\n              var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n              this.throwError(message, this.lookahead.value);\n            }\n\n            this.nextToken();\n            var src = this.parseModuleSpecifier();\n            this.consumeSemicolon();\n            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));\n          } else if (this.lookahead.type === 4\n          /* Keyword */\n          ) {\n            // export var f = 1;\n            var declaration = void 0;\n\n            switch (this.lookahead.value) {\n              case 'let':\n              case 'const':\n                declaration = this.parseLexicalDeclaration({\n                  inFor: false\n                });\n                break;\n\n              case 'var':\n              case 'class':\n              case 'function':\n                declaration = this.parseStatementListItem();\n                break;\n\n              default:\n                this.throwUnexpectedToken(this.lookahead);\n            }\n\n            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\n          } else if (this.matchAsyncFunction()) {\n            var declaration = this.parseFunctionDeclaration();\n            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\n          } else {\n            var specifiers = [];\n            var source = null;\n            var isExportFromIdentifier = false;\n            this.expect('{');\n\n            while (!this.match('}')) {\n              isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');\n              specifiers.push(this.parseExportSpecifier());\n\n              if (!this.match('}')) {\n                this.expect(',');\n              }\n            }\n\n            this.expect('}');\n\n            if (this.matchContextualKeyword('from')) {\n              // export {default} from 'foo';\n              // export {foo} from 'foo';\n              this.nextToken();\n              source = this.parseModuleSpecifier();\n              this.consumeSemicolon();\n            } else if (isExportFromIdentifier) {\n              // export {default}; // missing fromClause\n              var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n              this.throwError(message, this.lookahead.value);\n            } else {\n              // export {foo};\n              this.consumeSemicolon();\n            }\n\n            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));\n          }\n\n          return exportDeclaration;\n        };\n\n        return Parser;\n      }();\n\n      exports.Parser = Parser;\n      /***/\n    },\n    /* 9 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\"; // Ensure the condition is true, otherwise throw an error.\n      // This is only to have a better contract semantic, i.e. another safety net\n      // to catch a logic error. The condition shall be fulfilled in normal case.\n      // Do NOT use this to enforce a certain condition on any user input.\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      function assert(condition, message) {\n        /* istanbul ignore if */\n        if (!condition) {\n          throw new Error('ASSERT: ' + message);\n        }\n      }\n\n      exports.assert = assert;\n      /***/\n    },\n    /* 10 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n      /* tslint:disable:max-classes-per-file */\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var ErrorHandler = function () {\n        function ErrorHandler() {\n          this.errors = [];\n          this.tolerant = false;\n        }\n\n        ErrorHandler.prototype.recordError = function (error) {\n          this.errors.push(error);\n        };\n\n        ErrorHandler.prototype.tolerate = function (error) {\n          if (this.tolerant) {\n            this.recordError(error);\n          } else {\n            throw error;\n          }\n        };\n\n        ErrorHandler.prototype.constructError = function (msg, column) {\n          var error = new Error(msg);\n\n          try {\n            throw error;\n          } catch (base) {\n            /* istanbul ignore else */\n            if (Object.create && Object.defineProperty) {\n              error = Object.create(base);\n              Object.defineProperty(error, 'column', {\n                value: column\n              });\n            }\n          }\n          /* istanbul ignore next */\n\n\n          return error;\n        };\n\n        ErrorHandler.prototype.createError = function (index, line, col, description) {\n          var msg = 'Line ' + line + ': ' + description;\n          var error = this.constructError(msg, col);\n          error.index = index;\n          error.lineNumber = line;\n          error.description = description;\n          return error;\n        };\n\n        ErrorHandler.prototype.throwError = function (index, line, col, description) {\n          throw this.createError(index, line, col, description);\n        };\n\n        ErrorHandler.prototype.tolerateError = function (index, line, col, description) {\n          var error = this.createError(index, line, col, description);\n\n          if (this.tolerant) {\n            this.recordError(error);\n          } else {\n            throw error;\n          }\n        };\n\n        return ErrorHandler;\n      }();\n\n      exports.ErrorHandler = ErrorHandler;\n      /***/\n    },\n    /* 11 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      }); // Error messages should be identical to V8.\n\n      exports.Messages = {\n        BadGetterArity: 'Getter must not have any formal parameters',\n        BadSetterArity: 'Setter must have exactly one formal parameter',\n        BadSetterRestParameter: 'Setter function argument must not be a rest parameter',\n        ConstructorIsAsync: 'Class constructor may not be an async method',\n        ConstructorSpecialMethod: 'Class constructor may not be an accessor',\n        DeclarationMissingInitializer: 'Missing initializer in %0 declaration',\n        DefaultRestParameter: 'Unexpected token =',\n        DuplicateBinding: 'Duplicate binding %0',\n        DuplicateConstructor: 'A class may only have one constructor',\n        DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',\n        ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer',\n        GeneratorInLegacyContext: 'Generator declarations are not allowed in legacy contexts',\n        IllegalBreak: 'Illegal break statement',\n        IllegalContinue: 'Illegal continue statement',\n        IllegalExportDeclaration: 'Unexpected token',\n        IllegalImportDeclaration: 'Unexpected token',\n        IllegalLanguageModeDirective: 'Illegal \\'use strict\\' directive in function with non-simple parameter list',\n        IllegalReturn: 'Illegal return statement',\n        InvalidEscapedReservedWord: 'Keyword must not contain escaped characters',\n        InvalidHexEscapeSequence: 'Invalid hexadecimal escape sequence',\n        InvalidLHSInAssignment: 'Invalid left-hand side in assignment',\n        InvalidLHSInForIn: 'Invalid left-hand side in for-in',\n        InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',\n        InvalidModuleSpecifier: 'Unexpected token',\n        InvalidRegExp: 'Invalid regular expression',\n        LetInLexicalBinding: 'let is disallowed as a lexically bound name',\n        MissingFromClause: 'Unexpected token',\n        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n        NewlineAfterThrow: 'Illegal newline after throw',\n        NoAsAfterImportNamespace: 'Unexpected token',\n        NoCatchOrFinally: 'Missing catch or finally after try',\n        ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',\n        Redeclaration: '%0 \\'%1\\' has already been declared',\n        StaticPrototype: 'Classes may not have static property named prototype',\n        StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',\n        StrictDelete: 'Delete of an unqualified identifier in strict mode.',\n        StrictFunction: 'In strict mode code, functions can only be declared at top level or inside a block',\n        StrictFunctionName: 'Function name may not be eval or arguments in strict mode',\n        StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',\n        StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictModeWith: 'Strict mode code may not include a with statement',\n        StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',\n        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n        StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',\n        StrictReservedWord: 'Use of future reserved word in strict mode',\n        StrictVarName: 'Variable name may not be eval or arguments in strict mode',\n        TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',\n        UnexpectedEOS: 'Unexpected end of input',\n        UnexpectedIdentifier: 'Unexpected identifier',\n        UnexpectedNumber: 'Unexpected number',\n        UnexpectedReserved: 'Unexpected reserved word',\n        UnexpectedString: 'Unexpected string',\n        UnexpectedTemplate: 'Unexpected quasi %0',\n        UnexpectedToken: 'Unexpected token %0',\n        UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',\n        UnknownLabel: 'Undefined label \\'%0\\'',\n        UnterminatedRegExp: 'Invalid regular expression: missing /'\n      };\n      /***/\n    },\n    /* 12 */\n\n    /***/\n    function (module, exports, __nested_webpack_require_228499__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var assert_1 = __nested_webpack_require_228499__(9);\n\n      var character_1 = __nested_webpack_require_228499__(4);\n\n      var messages_1 = __nested_webpack_require_228499__(11);\n\n      function hexValue(ch) {\n        return '0123456789abcdef'.indexOf(ch.toLowerCase());\n      }\n\n      function octalValue(ch) {\n        return '01234567'.indexOf(ch);\n      }\n\n      var Scanner = function () {\n        function Scanner(code, handler) {\n          this.source = code;\n          this.errorHandler = handler;\n          this.trackComment = false;\n          this.isModule = false;\n          this.length = code.length;\n          this.index = 0;\n          this.lineNumber = code.length > 0 ? 1 : 0;\n          this.lineStart = 0;\n          this.curlyStack = [];\n        }\n\n        Scanner.prototype.saveState = function () {\n          return {\n            index: this.index,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart\n          };\n        };\n\n        Scanner.prototype.restoreState = function (state) {\n          this.index = state.index;\n          this.lineNumber = state.lineNumber;\n          this.lineStart = state.lineStart;\n        };\n\n        Scanner.prototype.eof = function () {\n          return this.index >= this.length;\n        };\n\n        Scanner.prototype.throwUnexpectedToken = function (message) {\n          if (message === void 0) {\n            message = messages_1.Messages.UnexpectedTokenIllegal;\n          }\n\n          return this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\n        };\n\n        Scanner.prototype.tolerateUnexpectedToken = function (message) {\n          if (message === void 0) {\n            message = messages_1.Messages.UnexpectedTokenIllegal;\n          }\n\n          this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\n        }; // https://tc39.github.io/ecma262/#sec-comments\n\n\n        Scanner.prototype.skipSingleLineComment = function (offset) {\n          var comments = [];\n          var start, loc;\n\n          if (this.trackComment) {\n            comments = [];\n            start = this.index - offset;\n            loc = {\n              start: {\n                line: this.lineNumber,\n                column: this.index - this.lineStart - offset\n              },\n              end: {}\n            };\n          }\n\n          while (!this.eof()) {\n            var ch = this.source.charCodeAt(this.index);\n            ++this.index;\n\n            if (character_1.Character.isLineTerminator(ch)) {\n              if (this.trackComment) {\n                loc.end = {\n                  line: this.lineNumber,\n                  column: this.index - this.lineStart - 1\n                };\n                var entry = {\n                  multiLine: false,\n                  slice: [start + offset, this.index - 1],\n                  range: [start, this.index - 1],\n                  loc: loc\n                };\n                comments.push(entry);\n              }\n\n              if (ch === 13 && this.source.charCodeAt(this.index) === 10) {\n                ++this.index;\n              }\n\n              ++this.lineNumber;\n              this.lineStart = this.index;\n              return comments;\n            }\n          }\n\n          if (this.trackComment) {\n            loc.end = {\n              line: this.lineNumber,\n              column: this.index - this.lineStart\n            };\n            var entry = {\n              multiLine: false,\n              slice: [start + offset, this.index],\n              range: [start, this.index],\n              loc: loc\n            };\n            comments.push(entry);\n          }\n\n          return comments;\n        };\n\n        Scanner.prototype.skipMultiLineComment = function () {\n          var comments = [];\n          var start, loc;\n\n          if (this.trackComment) {\n            comments = [];\n            start = this.index - 2;\n            loc = {\n              start: {\n                line: this.lineNumber,\n                column: this.index - this.lineStart - 2\n              },\n              end: {}\n            };\n          }\n\n          while (!this.eof()) {\n            var ch = this.source.charCodeAt(this.index);\n\n            if (character_1.Character.isLineTerminator(ch)) {\n              if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {\n                ++this.index;\n              }\n\n              ++this.lineNumber;\n              ++this.index;\n              this.lineStart = this.index;\n            } else if (ch === 0x2A) {\n              // Block comment ends with '*/'.\n              if (this.source.charCodeAt(this.index + 1) === 0x2F) {\n                this.index += 2;\n\n                if (this.trackComment) {\n                  loc.end = {\n                    line: this.lineNumber,\n                    column: this.index - this.lineStart\n                  };\n                  var entry = {\n                    multiLine: true,\n                    slice: [start + 2, this.index - 2],\n                    range: [start, this.index],\n                    loc: loc\n                  };\n                  comments.push(entry);\n                }\n\n                return comments;\n              }\n\n              ++this.index;\n            } else {\n              ++this.index;\n            }\n          } // Ran off the end of the file - the whole thing is a comment\n\n\n          if (this.trackComment) {\n            loc.end = {\n              line: this.lineNumber,\n              column: this.index - this.lineStart\n            };\n            var entry = {\n              multiLine: true,\n              slice: [start + 2, this.index],\n              range: [start, this.index],\n              loc: loc\n            };\n            comments.push(entry);\n          }\n\n          this.tolerateUnexpectedToken();\n          return comments;\n        };\n\n        Scanner.prototype.scanComments = function () {\n          var comments;\n\n          if (this.trackComment) {\n            comments = [];\n          }\n\n          var start = this.index === 0;\n\n          while (!this.eof()) {\n            var ch = this.source.charCodeAt(this.index);\n\n            if (character_1.Character.isWhiteSpace(ch)) {\n              ++this.index;\n            } else if (character_1.Character.isLineTerminator(ch)) {\n              ++this.index;\n\n              if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {\n                ++this.index;\n              }\n\n              ++this.lineNumber;\n              this.lineStart = this.index;\n              start = true;\n            } else if (ch === 0x2F) {\n              ch = this.source.charCodeAt(this.index + 1);\n\n              if (ch === 0x2F) {\n                this.index += 2;\n                var comment = this.skipSingleLineComment(2);\n\n                if (this.trackComment) {\n                  comments = comments.concat(comment);\n                }\n\n                start = true;\n              } else if (ch === 0x2A) {\n                this.index += 2;\n                var comment = this.skipMultiLineComment();\n\n                if (this.trackComment) {\n                  comments = comments.concat(comment);\n                }\n              } else {\n                break;\n              }\n            } else if (start && ch === 0x2D) {\n              // U+003E is '>'\n              if (this.source.charCodeAt(this.index + 1) === 0x2D && this.source.charCodeAt(this.index + 2) === 0x3E) {\n                // '-->' is a single-line comment\n                this.index += 3;\n                var comment = this.skipSingleLineComment(3);\n\n                if (this.trackComment) {\n                  comments = comments.concat(comment);\n                }\n              } else {\n                break;\n              }\n            } else if (ch === 0x3C && !this.isModule) {\n              if (this.source.slice(this.index + 1, this.index + 4) === '!--') {\n                this.index += 4; // `<!--`\n\n                var comment = this.skipSingleLineComment(4);\n\n                if (this.trackComment) {\n                  comments = comments.concat(comment);\n                }\n              } else {\n                break;\n              }\n            } else {\n              break;\n            }\n          }\n\n          return comments;\n        }; // https://tc39.github.io/ecma262/#sec-future-reserved-words\n\n\n        Scanner.prototype.isFutureReservedWord = function (id) {\n          switch (id) {\n            case 'enum':\n            case 'export':\n            case 'import':\n            case 'super':\n              return true;\n\n            default:\n              return false;\n          }\n        };\n\n        Scanner.prototype.isStrictModeReservedWord = function (id) {\n          switch (id) {\n            case 'implements':\n            case 'interface':\n            case 'package':\n            case 'private':\n            case 'protected':\n            case 'public':\n            case 'static':\n            case 'yield':\n            case 'let':\n              return true;\n\n            default:\n              return false;\n          }\n        };\n\n        Scanner.prototype.isRestrictedWord = function (id) {\n          return id === 'eval' || id === 'arguments';\n        }; // https://tc39.github.io/ecma262/#sec-keywords\n\n\n        Scanner.prototype.isKeyword = function (id) {\n          switch (id.length) {\n            case 2:\n              return id === 'if' || id === 'in' || id === 'do';\n\n            case 3:\n              return id === 'var' || id === 'for' || id === 'new' || id === 'try' || id === 'let';\n\n            case 4:\n              return id === 'this' || id === 'else' || id === 'case' || id === 'void' || id === 'with' || id === 'enum';\n\n            case 5:\n              return id === 'while' || id === 'break' || id === 'catch' || id === 'throw' || id === 'const' || id === 'yield' || id === 'class' || id === 'super';\n\n            case 6:\n              return id === 'return' || id === 'typeof' || id === 'delete' || id === 'switch' || id === 'export' || id === 'import';\n\n            case 7:\n              return id === 'default' || id === 'finally' || id === 'extends';\n\n            case 8:\n              return id === 'function' || id === 'continue' || id === 'debugger';\n\n            case 10:\n              return id === 'instanceof';\n\n            default:\n              return false;\n          }\n        };\n\n        Scanner.prototype.codePointAt = function (i) {\n          var cp = this.source.charCodeAt(i);\n\n          if (cp >= 0xD800 && cp <= 0xDBFF) {\n            var second = this.source.charCodeAt(i + 1);\n\n            if (second >= 0xDC00 && second <= 0xDFFF) {\n              var first = cp;\n              cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n            }\n          }\n\n          return cp;\n        };\n\n        Scanner.prototype.scanHexEscape = function (prefix) {\n          var len = prefix === 'u' ? 4 : 2;\n          var code = 0;\n\n          for (var i = 0; i < len; ++i) {\n            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n              code = code * 16 + hexValue(this.source[this.index++]);\n            } else {\n              return null;\n            }\n          }\n\n          return String.fromCharCode(code);\n        };\n\n        Scanner.prototype.scanUnicodeCodePointEscape = function () {\n          var ch = this.source[this.index];\n          var code = 0; // At least, one hex digit is required.\n\n          if (ch === '}') {\n            this.throwUnexpectedToken();\n          }\n\n          while (!this.eof()) {\n            ch = this.source[this.index++];\n\n            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {\n              break;\n            }\n\n            code = code * 16 + hexValue(ch);\n          }\n\n          if (code > 0x10FFFF || ch !== '}') {\n            this.throwUnexpectedToken();\n          }\n\n          return character_1.Character.fromCodePoint(code);\n        };\n\n        Scanner.prototype.getIdentifier = function () {\n          var start = this.index++;\n\n          while (!this.eof()) {\n            var ch = this.source.charCodeAt(this.index);\n\n            if (ch === 0x5C) {\n              // Blackslash (U+005C) marks Unicode escape sequence.\n              this.index = start;\n              return this.getComplexIdentifier();\n            } else if (ch >= 0xD800 && ch < 0xDFFF) {\n              // Need to handle surrogate pairs.\n              this.index = start;\n              return this.getComplexIdentifier();\n            }\n\n            if (character_1.Character.isIdentifierPart(ch)) {\n              ++this.index;\n            } else {\n              break;\n            }\n          }\n\n          return this.source.slice(start, this.index);\n        };\n\n        Scanner.prototype.getComplexIdentifier = function () {\n          var cp = this.codePointAt(this.index);\n          var id = character_1.Character.fromCodePoint(cp);\n          this.index += id.length; // '\\u' (U+005C, U+0075) denotes an escaped character.\n\n          var ch;\n\n          if (cp === 0x5C) {\n            if (this.source.charCodeAt(this.index) !== 0x75) {\n              this.throwUnexpectedToken();\n            }\n\n            ++this.index;\n\n            if (this.source[this.index] === '{') {\n              ++this.index;\n              ch = this.scanUnicodeCodePointEscape();\n            } else {\n              ch = this.scanHexEscape('u');\n\n              if (ch === null || ch === '\\\\' || !character_1.Character.isIdentifierStart(ch.charCodeAt(0))) {\n                this.throwUnexpectedToken();\n              }\n            }\n\n            id = ch;\n          }\n\n          while (!this.eof()) {\n            cp = this.codePointAt(this.index);\n\n            if (!character_1.Character.isIdentifierPart(cp)) {\n              break;\n            }\n\n            ch = character_1.Character.fromCodePoint(cp);\n            id += ch;\n            this.index += ch.length; // '\\u' (U+005C, U+0075) denotes an escaped character.\n\n            if (cp === 0x5C) {\n              id = id.substr(0, id.length - 1);\n\n              if (this.source.charCodeAt(this.index) !== 0x75) {\n                this.throwUnexpectedToken();\n              }\n\n              ++this.index;\n\n              if (this.source[this.index] === '{') {\n                ++this.index;\n                ch = this.scanUnicodeCodePointEscape();\n              } else {\n                ch = this.scanHexEscape('u');\n\n                if (ch === null || ch === '\\\\' || !character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {\n                  this.throwUnexpectedToken();\n                }\n              }\n\n              id += ch;\n            }\n          }\n\n          return id;\n        };\n\n        Scanner.prototype.octalToDecimal = function (ch) {\n          // \\0 is not octal escape sequence\n          var octal = ch !== '0';\n          var code = octalValue(ch);\n\n          if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n            octal = true;\n            code = code * 8 + octalValue(this.source[this.index++]); // 3 digits are only allowed when string starts\n            // with 0, 1, 2, 3\n\n            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n              code = code * 8 + octalValue(this.source[this.index++]);\n            }\n          }\n\n          return {\n            code: code,\n            octal: octal\n          };\n        }; // https://tc39.github.io/ecma262/#sec-names-and-keywords\n\n\n        Scanner.prototype.scanIdentifier = function () {\n          var type;\n          var start = this.index; // Backslash (U+005C) starts an escaped character.\n\n          var id = this.source.charCodeAt(start) === 0x5C ? this.getComplexIdentifier() : this.getIdentifier(); // There is no keyword or literal with only one character.\n          // Thus, it must be an identifier.\n\n          if (id.length === 1) {\n            type = 3\n            /* Identifier */\n            ;\n          } else if (this.isKeyword(id)) {\n            type = 4\n            /* Keyword */\n            ;\n          } else if (id === 'null') {\n            type = 5\n            /* NullLiteral */\n            ;\n          } else if (id === 'true' || id === 'false') {\n            type = 1\n            /* BooleanLiteral */\n            ;\n          } else {\n            type = 3\n            /* Identifier */\n            ;\n          }\n\n          if (type !== 3\n          /* Identifier */\n          && start + id.length !== this.index) {\n            var restore = this.index;\n            this.index = start;\n            this.tolerateUnexpectedToken(messages_1.Messages.InvalidEscapedReservedWord);\n            this.index = restore;\n          }\n\n          return {\n            type: type,\n            value: id,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        }; // https://tc39.github.io/ecma262/#sec-punctuators\n\n\n        Scanner.prototype.scanPunctuator = function () {\n          var start = this.index; // Check for most common single-character punctuators.\n\n          var str = this.source[this.index];\n\n          switch (str) {\n            case '(':\n            case '{':\n              if (str === '{') {\n                this.curlyStack.push('{');\n              }\n\n              ++this.index;\n              break;\n\n            case '.':\n              ++this.index;\n\n              if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {\n                // Spread operator: ...\n                this.index += 2;\n                str = '...';\n              }\n\n              break;\n\n            case '}':\n              ++this.index;\n              this.curlyStack.pop();\n              break;\n\n            case ')':\n            case ';':\n            case ',':\n            case '[':\n            case ']':\n            case ':':\n            case '?':\n            case '~':\n              ++this.index;\n              break;\n\n            default:\n              // 4-character punctuator.\n              str = this.source.substr(this.index, 4);\n\n              if (str === '>>>=') {\n                this.index += 4;\n              } else {\n                // 3-character punctuators.\n                str = str.substr(0, 3);\n\n                if (str === '===' || str === '!==' || str === '>>>' || str === '<<=' || str === '>>=' || str === '**=') {\n                  this.index += 3;\n                } else {\n                  // 2-character punctuators.\n                  str = str.substr(0, 2);\n\n                  if (str === '&&' || str === '||' || str === '==' || str === '!=' || str === '+=' || str === '-=' || str === '*=' || str === '/=' || str === '++' || str === '--' || str === '<<' || str === '>>' || str === '&=' || str === '|=' || str === '^=' || str === '%=' || str === '<=' || str === '>=' || str === '=>' || str === '**') {\n                    this.index += 2;\n                  } else {\n                    // 1-character punctuators.\n                    str = this.source[this.index];\n\n                    if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {\n                      ++this.index;\n                    }\n                  }\n                }\n              }\n\n          }\n\n          if (this.index === start) {\n            this.throwUnexpectedToken();\n          }\n\n          return {\n            type: 7\n            /* Punctuator */\n            ,\n            value: str,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        }; // https://tc39.github.io/ecma262/#sec-literals-numeric-literals\n\n\n        Scanner.prototype.scanHexLiteral = function (start) {\n          var num = '';\n\n          while (!this.eof()) {\n            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n              break;\n            }\n\n            num += this.source[this.index++];\n          }\n\n          if (num.length === 0) {\n            this.throwUnexpectedToken();\n          }\n\n          if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n            this.throwUnexpectedToken();\n          }\n\n          return {\n            type: 6\n            /* NumericLiteral */\n            ,\n            value: parseInt('0x' + num, 16),\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n\n        Scanner.prototype.scanBinaryLiteral = function (start) {\n          var num = '';\n          var ch;\n\n          while (!this.eof()) {\n            ch = this.source[this.index];\n\n            if (ch !== '0' && ch !== '1') {\n              break;\n            }\n\n            num += this.source[this.index++];\n          }\n\n          if (num.length === 0) {\n            // only 0b or 0B\n            this.throwUnexpectedToken();\n          }\n\n          if (!this.eof()) {\n            ch = this.source.charCodeAt(this.index);\n            /* istanbul ignore else */\n\n            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {\n              this.throwUnexpectedToken();\n            }\n          }\n\n          return {\n            type: 6\n            /* NumericLiteral */\n            ,\n            value: parseInt(num, 2),\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n\n        Scanner.prototype.scanOctalLiteral = function (prefix, start) {\n          var num = '';\n          var octal = false;\n\n          if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {\n            octal = true;\n            num = '0' + this.source[this.index++];\n          } else {\n            ++this.index;\n          }\n\n          while (!this.eof()) {\n            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n              break;\n            }\n\n            num += this.source[this.index++];\n          }\n\n          if (!octal && num.length === 0) {\n            // only 0o or 0O\n            this.throwUnexpectedToken();\n          }\n\n          if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n            this.throwUnexpectedToken();\n          }\n\n          return {\n            type: 6\n            /* NumericLiteral */\n            ,\n            value: parseInt(num, 8),\n            octal: octal,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n\n        Scanner.prototype.isImplicitOctalLiteral = function () {\n          // Implicit octal, unless there is a non-octal digit.\n          // (Annex B.1.1 on Numeric Literals)\n          for (var i = this.index + 1; i < this.length; ++i) {\n            var ch = this.source[i];\n\n            if (ch === '8' || ch === '9') {\n              return false;\n            }\n\n            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n              return true;\n            }\n          }\n\n          return true;\n        };\n\n        Scanner.prototype.scanNumericLiteral = function () {\n          var start = this.index;\n          var ch = this.source[start];\n          assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || ch === '.', 'Numeric literal must start with a decimal digit or a decimal point');\n          var num = '';\n\n          if (ch !== '.') {\n            num = this.source[this.index++];\n            ch = this.source[this.index]; // Hex number starts with '0x'.\n            // Octal number starts with '0'.\n            // Octal number in ES6 starts with '0o'.\n            // Binary number in ES6 starts with '0b'.\n\n            if (num === '0') {\n              if (ch === 'x' || ch === 'X') {\n                ++this.index;\n                return this.scanHexLiteral(start);\n              }\n\n              if (ch === 'b' || ch === 'B') {\n                ++this.index;\n                return this.scanBinaryLiteral(start);\n              }\n\n              if (ch === 'o' || ch === 'O') {\n                return this.scanOctalLiteral(ch, start);\n              }\n\n              if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n                if (this.isImplicitOctalLiteral()) {\n                  return this.scanOctalLiteral(ch, start);\n                }\n              }\n            }\n\n            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n              num += this.source[this.index++];\n            }\n\n            ch = this.source[this.index];\n          }\n\n          if (ch === '.') {\n            num += this.source[this.index++];\n\n            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n              num += this.source[this.index++];\n            }\n\n            ch = this.source[this.index];\n          }\n\n          if (ch === 'e' || ch === 'E') {\n            num += this.source[this.index++];\n            ch = this.source[this.index];\n\n            if (ch === '+' || ch === '-') {\n              num += this.source[this.index++];\n            }\n\n            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n              while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n                num += this.source[this.index++];\n              }\n            } else {\n              this.throwUnexpectedToken();\n            }\n          }\n\n          if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n            this.throwUnexpectedToken();\n          }\n\n          return {\n            type: 6\n            /* NumericLiteral */\n            ,\n            value: parseFloat(num),\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        }; // https://tc39.github.io/ecma262/#sec-literals-string-literals\n\n\n        Scanner.prototype.scanStringLiteral = function () {\n          var start = this.index;\n          var quote = this.source[start];\n          assert_1.assert(quote === '\\'' || quote === '\"', 'String literal must starts with a quote');\n          ++this.index;\n          var octal = false;\n          var str = '';\n\n          while (!this.eof()) {\n            var ch = this.source[this.index++];\n\n            if (ch === quote) {\n              quote = '';\n              break;\n            } else if (ch === '\\\\') {\n              ch = this.source[this.index++];\n\n              if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n                switch (ch) {\n                  case 'u':\n                    if (this.source[this.index] === '{') {\n                      ++this.index;\n                      str += this.scanUnicodeCodePointEscape();\n                    } else {\n                      var unescaped_1 = this.scanHexEscape(ch);\n\n                      if (unescaped_1 === null) {\n                        this.throwUnexpectedToken();\n                      }\n\n                      str += unescaped_1;\n                    }\n\n                    break;\n\n                  case 'x':\n                    var unescaped = this.scanHexEscape(ch);\n\n                    if (unescaped === null) {\n                      this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);\n                    }\n\n                    str += unescaped;\n                    break;\n\n                  case 'n':\n                    str += '\\n';\n                    break;\n\n                  case 'r':\n                    str += '\\r';\n                    break;\n\n                  case 't':\n                    str += '\\t';\n                    break;\n\n                  case 'b':\n                    str += '\\b';\n                    break;\n\n                  case 'f':\n                    str += '\\f';\n                    break;\n\n                  case 'v':\n                    str += '\\x0B';\n                    break;\n\n                  case '8':\n                  case '9':\n                    str += ch;\n                    this.tolerateUnexpectedToken();\n                    break;\n\n                  default:\n                    if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n                      var octToDec = this.octalToDecimal(ch);\n                      octal = octToDec.octal || octal;\n                      str += String.fromCharCode(octToDec.code);\n                    } else {\n                      str += ch;\n                    }\n\n                    break;\n                }\n              } else {\n                ++this.lineNumber;\n\n                if (ch === '\\r' && this.source[this.index] === '\\n') {\n                  ++this.index;\n                }\n\n                this.lineStart = this.index;\n              }\n            } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n              break;\n            } else {\n              str += ch;\n            }\n          }\n\n          if (quote !== '') {\n            this.index = start;\n            this.throwUnexpectedToken();\n          }\n\n          return {\n            type: 8\n            /* StringLiteral */\n            ,\n            value: str,\n            octal: octal,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        }; // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components\n\n\n        Scanner.prototype.scanTemplate = function () {\n          var cooked = '';\n          var terminated = false;\n          var start = this.index;\n          var head = this.source[start] === '`';\n          var tail = false;\n          var rawOffset = 2;\n          ++this.index;\n\n          while (!this.eof()) {\n            var ch = this.source[this.index++];\n\n            if (ch === '`') {\n              rawOffset = 1;\n              tail = true;\n              terminated = true;\n              break;\n            } else if (ch === '$') {\n              if (this.source[this.index] === '{') {\n                this.curlyStack.push('${');\n                ++this.index;\n                terminated = true;\n                break;\n              }\n\n              cooked += ch;\n            } else if (ch === '\\\\') {\n              ch = this.source[this.index++];\n\n              if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n                switch (ch) {\n                  case 'n':\n                    cooked += '\\n';\n                    break;\n\n                  case 'r':\n                    cooked += '\\r';\n                    break;\n\n                  case 't':\n                    cooked += '\\t';\n                    break;\n\n                  case 'u':\n                    if (this.source[this.index] === '{') {\n                      ++this.index;\n                      cooked += this.scanUnicodeCodePointEscape();\n                    } else {\n                      var restore = this.index;\n                      var unescaped_2 = this.scanHexEscape(ch);\n\n                      if (unescaped_2 !== null) {\n                        cooked += unescaped_2;\n                      } else {\n                        this.index = restore;\n                        cooked += ch;\n                      }\n                    }\n\n                    break;\n\n                  case 'x':\n                    var unescaped = this.scanHexEscape(ch);\n\n                    if (unescaped === null) {\n                      this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);\n                    }\n\n                    cooked += unescaped;\n                    break;\n\n                  case 'b':\n                    cooked += '\\b';\n                    break;\n\n                  case 'f':\n                    cooked += '\\f';\n                    break;\n\n                  case 'v':\n                    cooked += '\\v';\n                    break;\n\n                  default:\n                    if (ch === '0') {\n                      if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n                        // Illegal: \\01 \\02 and so on\n                        this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n                      }\n\n                      cooked += '\\0';\n                    } else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n                      // Illegal: \\1 \\2\n                      this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n                    } else {\n                      cooked += ch;\n                    }\n\n                    break;\n                }\n              } else {\n                ++this.lineNumber;\n\n                if (ch === '\\r' && this.source[this.index] === '\\n') {\n                  ++this.index;\n                }\n\n                this.lineStart = this.index;\n              }\n            } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n              ++this.lineNumber;\n\n              if (ch === '\\r' && this.source[this.index] === '\\n') {\n                ++this.index;\n              }\n\n              this.lineStart = this.index;\n              cooked += '\\n';\n            } else {\n              cooked += ch;\n            }\n          }\n\n          if (!terminated) {\n            this.throwUnexpectedToken();\n          }\n\n          if (!head) {\n            this.curlyStack.pop();\n          }\n\n          return {\n            type: 10\n            /* Template */\n            ,\n            value: this.source.slice(start + 1, this.index - rawOffset),\n            cooked: cooked,\n            head: head,\n            tail: tail,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        }; // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals\n\n\n        Scanner.prototype.testRegExp = function (pattern, flags) {\n          // The BMP character to use as a replacement for astral symbols when\n          // translating an ES6 \"u\"-flagged pattern to an ES5-compatible\n          // approximation.\n          // Note: replacing with '\\uFFFF' enables false positives in unlikely\n          // scenarios. For example, `[\\u{1044f}-\\u{10440}]` is an invalid\n          // pattern that would not be detected by this substitution.\n          var astralSubstitute = '\\uFFFF';\n          var tmp = pattern;\n          var self = this;\n\n          if (flags.indexOf('u') >= 0) {\n            tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}|\\\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {\n              var codePoint = parseInt($1 || $2, 16);\n\n              if (codePoint > 0x10FFFF) {\n                self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n              }\n\n              if (codePoint <= 0xFFFF) {\n                return String.fromCharCode(codePoint);\n              }\n\n              return astralSubstitute;\n            }).replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, astralSubstitute);\n          } // First, detect invalid regular expressions.\n\n\n          try {\n            RegExp(tmp);\n          } catch (e) {\n            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n          } // Return a regular expression object for this pattern-flag pair, or\n          // `null` in case the current environment doesn't support the flags it\n          // uses.\n\n\n          try {\n            return new RegExp(pattern, flags);\n          } catch (exception) {\n            /* istanbul ignore next */\n            return null;\n          }\n        };\n\n        Scanner.prototype.scanRegExpBody = function () {\n          var ch = this.source[this.index];\n          assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');\n          var str = this.source[this.index++];\n          var classMarker = false;\n          var terminated = false;\n\n          while (!this.eof()) {\n            ch = this.source[this.index++];\n            str += ch;\n\n            if (ch === '\\\\') {\n              ch = this.source[this.index++]; // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals\n\n              if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n              }\n\n              str += ch;\n            } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n              this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n            } else if (classMarker) {\n              if (ch === ']') {\n                classMarker = false;\n              }\n            } else {\n              if (ch === '/') {\n                terminated = true;\n                break;\n              } else if (ch === '[') {\n                classMarker = true;\n              }\n            }\n          }\n\n          if (!terminated) {\n            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n          } // Exclude leading and trailing slash.\n\n\n          return str.substr(1, str.length - 2);\n        };\n\n        Scanner.prototype.scanRegExpFlags = function () {\n          var str = '';\n          var flags = '';\n\n          while (!this.eof()) {\n            var ch = this.source[this.index];\n\n            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {\n              break;\n            }\n\n            ++this.index;\n\n            if (ch === '\\\\' && !this.eof()) {\n              ch = this.source[this.index];\n\n              if (ch === 'u') {\n                ++this.index;\n                var restore = this.index;\n                var char = this.scanHexEscape('u');\n\n                if (char !== null) {\n                  flags += char;\n\n                  for (str += '\\\\u'; restore < this.index; ++restore) {\n                    str += this.source[restore];\n                  }\n                } else {\n                  this.index = restore;\n                  flags += 'u';\n                  str += '\\\\u';\n                }\n\n                this.tolerateUnexpectedToken();\n              } else {\n                str += '\\\\';\n                this.tolerateUnexpectedToken();\n              }\n            } else {\n              flags += ch;\n              str += ch;\n            }\n          }\n\n          return flags;\n        };\n\n        Scanner.prototype.scanRegExp = function () {\n          var start = this.index;\n          var pattern = this.scanRegExpBody();\n          var flags = this.scanRegExpFlags();\n          var value = this.testRegExp(pattern, flags);\n          return {\n            type: 9\n            /* RegularExpression */\n            ,\n            value: '',\n            pattern: pattern,\n            flags: flags,\n            regex: value,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n\n        Scanner.prototype.lex = function () {\n          if (this.eof()) {\n            return {\n              type: 2\n              /* EOF */\n              ,\n              value: '',\n              lineNumber: this.lineNumber,\n              lineStart: this.lineStart,\n              start: this.index,\n              end: this.index\n            };\n          }\n\n          var cp = this.source.charCodeAt(this.index);\n\n          if (character_1.Character.isIdentifierStart(cp)) {\n            return this.scanIdentifier();\n          } // Very common: ( and ) and ;\n\n\n          if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {\n            return this.scanPunctuator();\n          } // String literal starts with single quote (U+0027) or double quote (U+0022).\n\n\n          if (cp === 0x27 || cp === 0x22) {\n            return this.scanStringLiteral();\n          } // Dot (.) U+002E can also start a floating-point number, hence the need\n          // to check the next character.\n\n\n          if (cp === 0x2E) {\n            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {\n              return this.scanNumericLiteral();\n            }\n\n            return this.scanPunctuator();\n          }\n\n          if (character_1.Character.isDecimalDigit(cp)) {\n            return this.scanNumericLiteral();\n          } // Template literals start with ` (U+0060) for template head\n          // or } (U+007D) for template middle or template tail.\n\n\n          if (cp === 0x60 || cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${') {\n            return this.scanTemplate();\n          } // Possible identifier start in a surrogate pair.\n\n\n          if (cp >= 0xD800 && cp < 0xDFFF) {\n            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {\n              return this.scanIdentifier();\n            }\n          }\n\n          return this.scanPunctuator();\n        };\n\n        return Scanner;\n      }();\n\n      exports.Scanner = Scanner;\n      /***/\n    },\n    /* 13 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.TokenName = {};\n      exports.TokenName[1\n      /* BooleanLiteral */\n      ] = 'Boolean';\n      exports.TokenName[2\n      /* EOF */\n      ] = '<end>';\n      exports.TokenName[3\n      /* Identifier */\n      ] = 'Identifier';\n      exports.TokenName[4\n      /* Keyword */\n      ] = 'Keyword';\n      exports.TokenName[5\n      /* NullLiteral */\n      ] = 'Null';\n      exports.TokenName[6\n      /* NumericLiteral */\n      ] = 'Numeric';\n      exports.TokenName[7\n      /* Punctuator */\n      ] = 'Punctuator';\n      exports.TokenName[8\n      /* StringLiteral */\n      ] = 'String';\n      exports.TokenName[9\n      /* RegularExpression */\n      ] = 'RegularExpression';\n      exports.TokenName[10\n      /* Template */\n      ] = 'Template';\n      /***/\n    },\n    /* 14 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\"; // Generated by generate-xhtml-entities.js. DO NOT MODIFY!\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.XHTMLEntities = {\n        quot: '\\u0022',\n        amp: '\\u0026',\n        apos: '\\u0027',\n        gt: '\\u003E',\n        nbsp: '\\u00A0',\n        iexcl: '\\u00A1',\n        cent: '\\u00A2',\n        pound: '\\u00A3',\n        curren: '\\u00A4',\n        yen: '\\u00A5',\n        brvbar: '\\u00A6',\n        sect: '\\u00A7',\n        uml: '\\u00A8',\n        copy: '\\u00A9',\n        ordf: '\\u00AA',\n        laquo: '\\u00AB',\n        not: '\\u00AC',\n        shy: '\\u00AD',\n        reg: '\\u00AE',\n        macr: '\\u00AF',\n        deg: '\\u00B0',\n        plusmn: '\\u00B1',\n        sup2: '\\u00B2',\n        sup3: '\\u00B3',\n        acute: '\\u00B4',\n        micro: '\\u00B5',\n        para: '\\u00B6',\n        middot: '\\u00B7',\n        cedil: '\\u00B8',\n        sup1: '\\u00B9',\n        ordm: '\\u00BA',\n        raquo: '\\u00BB',\n        frac14: '\\u00BC',\n        frac12: '\\u00BD',\n        frac34: '\\u00BE',\n        iquest: '\\u00BF',\n        Agrave: '\\u00C0',\n        Aacute: '\\u00C1',\n        Acirc: '\\u00C2',\n        Atilde: '\\u00C3',\n        Auml: '\\u00C4',\n        Aring: '\\u00C5',\n        AElig: '\\u00C6',\n        Ccedil: '\\u00C7',\n        Egrave: '\\u00C8',\n        Eacute: '\\u00C9',\n        Ecirc: '\\u00CA',\n        Euml: '\\u00CB',\n        Igrave: '\\u00CC',\n        Iacute: '\\u00CD',\n        Icirc: '\\u00CE',\n        Iuml: '\\u00CF',\n        ETH: '\\u00D0',\n        Ntilde: '\\u00D1',\n        Ograve: '\\u00D2',\n        Oacute: '\\u00D3',\n        Ocirc: '\\u00D4',\n        Otilde: '\\u00D5',\n        Ouml: '\\u00D6',\n        times: '\\u00D7',\n        Oslash: '\\u00D8',\n        Ugrave: '\\u00D9',\n        Uacute: '\\u00DA',\n        Ucirc: '\\u00DB',\n        Uuml: '\\u00DC',\n        Yacute: '\\u00DD',\n        THORN: '\\u00DE',\n        szlig: '\\u00DF',\n        agrave: '\\u00E0',\n        aacute: '\\u00E1',\n        acirc: '\\u00E2',\n        atilde: '\\u00E3',\n        auml: '\\u00E4',\n        aring: '\\u00E5',\n        aelig: '\\u00E6',\n        ccedil: '\\u00E7',\n        egrave: '\\u00E8',\n        eacute: '\\u00E9',\n        ecirc: '\\u00EA',\n        euml: '\\u00EB',\n        igrave: '\\u00EC',\n        iacute: '\\u00ED',\n        icirc: '\\u00EE',\n        iuml: '\\u00EF',\n        eth: '\\u00F0',\n        ntilde: '\\u00F1',\n        ograve: '\\u00F2',\n        oacute: '\\u00F3',\n        ocirc: '\\u00F4',\n        otilde: '\\u00F5',\n        ouml: '\\u00F6',\n        divide: '\\u00F7',\n        oslash: '\\u00F8',\n        ugrave: '\\u00F9',\n        uacute: '\\u00FA',\n        ucirc: '\\u00FB',\n        uuml: '\\u00FC',\n        yacute: '\\u00FD',\n        thorn: '\\u00FE',\n        yuml: '\\u00FF',\n        OElig: '\\u0152',\n        oelig: '\\u0153',\n        Scaron: '\\u0160',\n        scaron: '\\u0161',\n        Yuml: '\\u0178',\n        fnof: '\\u0192',\n        circ: '\\u02C6',\n        tilde: '\\u02DC',\n        Alpha: '\\u0391',\n        Beta: '\\u0392',\n        Gamma: '\\u0393',\n        Delta: '\\u0394',\n        Epsilon: '\\u0395',\n        Zeta: '\\u0396',\n        Eta: '\\u0397',\n        Theta: '\\u0398',\n        Iota: '\\u0399',\n        Kappa: '\\u039A',\n        Lambda: '\\u039B',\n        Mu: '\\u039C',\n        Nu: '\\u039D',\n        Xi: '\\u039E',\n        Omicron: '\\u039F',\n        Pi: '\\u03A0',\n        Rho: '\\u03A1',\n        Sigma: '\\u03A3',\n        Tau: '\\u03A4',\n        Upsilon: '\\u03A5',\n        Phi: '\\u03A6',\n        Chi: '\\u03A7',\n        Psi: '\\u03A8',\n        Omega: '\\u03A9',\n        alpha: '\\u03B1',\n        beta: '\\u03B2',\n        gamma: '\\u03B3',\n        delta: '\\u03B4',\n        epsilon: '\\u03B5',\n        zeta: '\\u03B6',\n        eta: '\\u03B7',\n        theta: '\\u03B8',\n        iota: '\\u03B9',\n        kappa: '\\u03BA',\n        lambda: '\\u03BB',\n        mu: '\\u03BC',\n        nu: '\\u03BD',\n        xi: '\\u03BE',\n        omicron: '\\u03BF',\n        pi: '\\u03C0',\n        rho: '\\u03C1',\n        sigmaf: '\\u03C2',\n        sigma: '\\u03C3',\n        tau: '\\u03C4',\n        upsilon: '\\u03C5',\n        phi: '\\u03C6',\n        chi: '\\u03C7',\n        psi: '\\u03C8',\n        omega: '\\u03C9',\n        thetasym: '\\u03D1',\n        upsih: '\\u03D2',\n        piv: '\\u03D6',\n        ensp: '\\u2002',\n        emsp: '\\u2003',\n        thinsp: '\\u2009',\n        zwnj: '\\u200C',\n        zwj: '\\u200D',\n        lrm: '\\u200E',\n        rlm: '\\u200F',\n        ndash: '\\u2013',\n        mdash: '\\u2014',\n        lsquo: '\\u2018',\n        rsquo: '\\u2019',\n        sbquo: '\\u201A',\n        ldquo: '\\u201C',\n        rdquo: '\\u201D',\n        bdquo: '\\u201E',\n        dagger: '\\u2020',\n        Dagger: '\\u2021',\n        bull: '\\u2022',\n        hellip: '\\u2026',\n        permil: '\\u2030',\n        prime: '\\u2032',\n        Prime: '\\u2033',\n        lsaquo: '\\u2039',\n        rsaquo: '\\u203A',\n        oline: '\\u203E',\n        frasl: '\\u2044',\n        euro: '\\u20AC',\n        image: '\\u2111',\n        weierp: '\\u2118',\n        real: '\\u211C',\n        trade: '\\u2122',\n        alefsym: '\\u2135',\n        larr: '\\u2190',\n        uarr: '\\u2191',\n        rarr: '\\u2192',\n        darr: '\\u2193',\n        harr: '\\u2194',\n        crarr: '\\u21B5',\n        lArr: '\\u21D0',\n        uArr: '\\u21D1',\n        rArr: '\\u21D2',\n        dArr: '\\u21D3',\n        hArr: '\\u21D4',\n        forall: '\\u2200',\n        part: '\\u2202',\n        exist: '\\u2203',\n        empty: '\\u2205',\n        nabla: '\\u2207',\n        isin: '\\u2208',\n        notin: '\\u2209',\n        ni: '\\u220B',\n        prod: '\\u220F',\n        sum: '\\u2211',\n        minus: '\\u2212',\n        lowast: '\\u2217',\n        radic: '\\u221A',\n        prop: '\\u221D',\n        infin: '\\u221E',\n        ang: '\\u2220',\n        and: '\\u2227',\n        or: '\\u2228',\n        cap: '\\u2229',\n        cup: '\\u222A',\n        int: '\\u222B',\n        there4: '\\u2234',\n        sim: '\\u223C',\n        cong: '\\u2245',\n        asymp: '\\u2248',\n        ne: '\\u2260',\n        equiv: '\\u2261',\n        le: '\\u2264',\n        ge: '\\u2265',\n        sub: '\\u2282',\n        sup: '\\u2283',\n        nsub: '\\u2284',\n        sube: '\\u2286',\n        supe: '\\u2287',\n        oplus: '\\u2295',\n        otimes: '\\u2297',\n        perp: '\\u22A5',\n        sdot: '\\u22C5',\n        lceil: '\\u2308',\n        rceil: '\\u2309',\n        lfloor: '\\u230A',\n        rfloor: '\\u230B',\n        loz: '\\u25CA',\n        spades: '\\u2660',\n        clubs: '\\u2663',\n        hearts: '\\u2665',\n        diams: '\\u2666',\n        lang: '\\u27E8',\n        rang: '\\u27E9'\n      };\n      /***/\n    },\n    /* 15 */\n\n    /***/\n    function (module, exports, __nested_webpack_require_277271__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var error_handler_1 = __nested_webpack_require_277271__(10);\n\n      var scanner_1 = __nested_webpack_require_277271__(12);\n\n      var token_1 = __nested_webpack_require_277271__(13);\n\n      var Reader = function () {\n        function Reader() {\n          this.values = [];\n          this.curly = this.paren = -1;\n        } // A function following one of those tokens is an expression.\n\n\n        Reader.prototype.beforeFunctionExpression = function (t) {\n          return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new', 'return', 'case', 'delete', 'throw', 'void', // assignment operators\n          '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=', '&=', '|=', '^=', ',', // binary/unary operators\n          '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&', '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=', '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;\n        }; // Determine if forward slash (/) is an operator or part of a regular expression\n        // https://github.com/mozilla/sweet.js/wiki/design\n\n\n        Reader.prototype.isRegexStart = function () {\n          var previous = this.values[this.values.length - 1];\n          var regex = previous !== null;\n\n          switch (previous) {\n            case 'this':\n            case ']':\n              regex = false;\n              break;\n\n            case ')':\n              var keyword = this.values[this.paren - 1];\n              regex = keyword === 'if' || keyword === 'while' || keyword === 'for' || keyword === 'with';\n              break;\n\n            case '}':\n              // Dividing a function by anything makes little sense,\n              // but we have to check for that.\n              regex = false;\n\n              if (this.values[this.curly - 3] === 'function') {\n                // Anonymous function, e.g. function(){} /42\n                var check = this.values[this.curly - 4];\n                regex = check ? !this.beforeFunctionExpression(check) : false;\n              } else if (this.values[this.curly - 4] === 'function') {\n                // Named function, e.g. function f(){} /42/\n                var check = this.values[this.curly - 5];\n                regex = check ? !this.beforeFunctionExpression(check) : true;\n              }\n\n              break;\n\n            default:\n              break;\n          }\n\n          return regex;\n        };\n\n        Reader.prototype.push = function (token) {\n          if (token.type === 7\n          /* Punctuator */\n          || token.type === 4\n          /* Keyword */\n          ) {\n            if (token.value === '{') {\n              this.curly = this.values.length;\n            } else if (token.value === '(') {\n              this.paren = this.values.length;\n            }\n\n            this.values.push(token.value);\n          } else {\n            this.values.push(null);\n          }\n        };\n\n        return Reader;\n      }();\n\n      var Tokenizer = function () {\n        function Tokenizer(code, config) {\n          this.errorHandler = new error_handler_1.ErrorHandler();\n          this.errorHandler.tolerant = config ? typeof config.tolerant === 'boolean' && config.tolerant : false;\n          this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n          this.scanner.trackComment = config ? typeof config.comment === 'boolean' && config.comment : false;\n          this.trackRange = config ? typeof config.range === 'boolean' && config.range : false;\n          this.trackLoc = config ? typeof config.loc === 'boolean' && config.loc : false;\n          this.buffer = [];\n          this.reader = new Reader();\n        }\n\n        Tokenizer.prototype.errors = function () {\n          return this.errorHandler.errors;\n        };\n\n        Tokenizer.prototype.getNextToken = function () {\n          if (this.buffer.length === 0) {\n            var comments = this.scanner.scanComments();\n\n            if (this.scanner.trackComment) {\n              for (var i = 0; i < comments.length; ++i) {\n                var e = comments[i];\n                var value = this.scanner.source.slice(e.slice[0], e.slice[1]);\n                var comment = {\n                  type: e.multiLine ? 'BlockComment' : 'LineComment',\n                  value: value\n                };\n\n                if (this.trackRange) {\n                  comment.range = e.range;\n                }\n\n                if (this.trackLoc) {\n                  comment.loc = e.loc;\n                }\n\n                this.buffer.push(comment);\n              }\n            }\n\n            if (!this.scanner.eof()) {\n              var loc = void 0;\n\n              if (this.trackLoc) {\n                loc = {\n                  start: {\n                    line: this.scanner.lineNumber,\n                    column: this.scanner.index - this.scanner.lineStart\n                  },\n                  end: {}\n                };\n              }\n\n              var startRegex = this.scanner.source[this.scanner.index] === '/' && this.reader.isRegexStart();\n              var token = startRegex ? this.scanner.scanRegExp() : this.scanner.lex();\n              this.reader.push(token);\n              var entry = {\n                type: token_1.TokenName[token.type],\n                value: this.scanner.source.slice(token.start, token.end)\n              };\n\n              if (this.trackRange) {\n                entry.range = [token.start, token.end];\n              }\n\n              if (this.trackLoc) {\n                loc.end = {\n                  line: this.scanner.lineNumber,\n                  column: this.scanner.index - this.scanner.lineStart\n                };\n                entry.loc = loc;\n              }\n\n              if (token.type === 9\n              /* RegularExpression */\n              ) {\n                var pattern = token.pattern;\n                var flags = token.flags;\n                entry.regex = {\n                  pattern: pattern,\n                  flags: flags\n                };\n              }\n\n              this.buffer.push(entry);\n            }\n          }\n\n          return this.buffer.shift();\n        };\n\n        return Tokenizer;\n      }();\n\n      exports.Tokenizer = Tokenizer;\n      /***/\n    }\n    /******/\n    ])\n  );\n});\n\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared/node_modules/esprima/dist/esprima.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/index.js":
/*!****************************************************!*\
  !*** ../shared/node_modules/front-matter/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var parser = __webpack_require__(/*! js-yaml */ \"../shared/node_modules/front-matter/node_modules/js-yaml/index.js\");\n\nvar optionalByteOrderMark = '\\\\ufeff?';\nvar platform = typeof process !== 'undefined' ? process.platform : '';\nvar pattern = '^(' + optionalByteOrderMark + '(= yaml =|---)' + '$([\\\\s\\\\S]*?)' + '^(?:\\\\2|\\\\.\\\\.\\\\.)\\\\s*' + '$' + (platform === 'win32' ? '\\\\r?' : '') + '(?:\\\\n)?)'; // NOTE: If this pattern uses the 'g' flag the `regex` variable definition will\n// need to be moved down into the functions that use it.\n\nvar regex = new RegExp(pattern, 'm');\nmodule.exports = extractor;\nmodule.exports.test = test;\n\nfunction extractor(string, options) {\n  string = string || '';\n  var defaultOptions = {\n    allowUnsafe: false\n  };\n  options = options instanceof Object ? { ...defaultOptions,\n    ...options\n  } : defaultOptions;\n  options.allowUnsafe = Boolean(options.allowUnsafe);\n  var lines = string.split(/(\\r?\\n)/);\n\n  if (lines[0] && /= yaml =|---/.test(lines[0])) {\n    return parse(string, options.allowUnsafe);\n  } else {\n    return {\n      attributes: {},\n      body: string,\n      bodyBegin: 1\n    };\n  }\n}\n\nfunction computeLocation(match, body) {\n  var line = 1;\n  var pos = body.indexOf('\\n');\n  var offset = match.index + match[0].length;\n\n  while (pos !== -1) {\n    if (pos >= offset) {\n      return line;\n    }\n\n    line++;\n    pos = body.indexOf('\\n', pos + 1);\n  }\n\n  return line;\n}\n\nfunction parse(string, allowUnsafe) {\n  var match = regex.exec(string);\n\n  if (!match) {\n    return {\n      attributes: {},\n      body: string,\n      bodyBegin: 1\n    };\n  }\n\n  var loader = allowUnsafe ? parser.load : parser.safeLoad;\n  var yaml = match[match.length - 1].replace(/^\\s+|\\s+$/g, '');\n  var attributes = loader(yaml) || {};\n  var body = string.replace(match[0], '');\n  var line = computeLocation(match, string);\n  return {\n    attributes: attributes,\n    body: body,\n    bodyBegin: line,\n    frontmatter: yaml\n  };\n}\n\nfunction test(string) {\n  string = string || '';\n  return regex.test(string);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsTUFBTSxHQUFHQyxtQkFBTyxDQUFDLGtGQUFELENBQXBCOztBQUNBLElBQUlDLHFCQUFxQixHQUFHLFVBQTVCO0FBQ0EsSUFBSUMsUUFBUSxHQUFHLE9BQU9DLE9BQVAsS0FBbUIsV0FBbkIsR0FBaUNBLE9BQU8sQ0FBQ0QsUUFBekMsR0FBb0QsRUFBbkU7QUFDQSxJQUFJRSxPQUFPLEdBQUcsT0FDWkgscUJBRFksR0FFWixnQkFGWSxHQUdaLGVBSFksR0FJWix3QkFKWSxHQUtaLEdBTFksSUFNWEMsUUFBUSxLQUFLLE9BQWIsR0FBdUIsTUFBdkIsR0FBZ0MsRUFOckIsSUFPWixXQVBGLEMsQ0FRQTtBQUNBOztBQUNBLElBQUlHLEtBQUssR0FBRyxJQUFJQyxNQUFKLENBQVdGLE9BQVgsRUFBb0IsR0FBcEIsQ0FBWjtBQUVBRyxNQUFNLENBQUNDLE9BQVAsR0FBaUJDLFNBQWpCO0FBQ0FGLG1CQUFBLEdBQXNCRyxJQUF0Qjs7QUFFQSxTQUFTRCxTQUFULENBQW9CRSxNQUFwQixFQUE0QkMsT0FBNUIsRUFBcUM7QUFDbkNELEVBQUFBLE1BQU0sR0FBR0EsTUFBTSxJQUFJLEVBQW5CO0FBQ0EsTUFBSUUsY0FBYyxHQUFHO0FBQUVDLElBQUFBLFdBQVcsRUFBRTtBQUFmLEdBQXJCO0FBQ0FGLEVBQUFBLE9BQU8sR0FBR0EsT0FBTyxZQUFZRyxNQUFuQixHQUE0QixFQUFFLEdBQUdGLGNBQUw7QUFBcUIsT0FBR0Q7QUFBeEIsR0FBNUIsR0FBZ0VDLGNBQTFFO0FBQ0FELEVBQUFBLE9BQU8sQ0FBQ0UsV0FBUixHQUFzQkUsT0FBTyxDQUFDSixPQUFPLENBQUNFLFdBQVQsQ0FBN0I7QUFDQSxNQUFJRyxLQUFLLEdBQUdOLE1BQU0sQ0FBQ08sS0FBUCxDQUFhLFNBQWIsQ0FBWjs7QUFDQSxNQUFJRCxLQUFLLENBQUMsQ0FBRCxDQUFMLElBQVksZUFBZVAsSUFBZixDQUFvQk8sS0FBSyxDQUFDLENBQUQsQ0FBekIsQ0FBaEIsRUFBK0M7QUFDN0MsV0FBT0UsS0FBSyxDQUFDUixNQUFELEVBQVNDLE9BQU8sQ0FBQ0UsV0FBakIsQ0FBWjtBQUNELEdBRkQsTUFFTztBQUNMLFdBQU87QUFDTE0sTUFBQUEsVUFBVSxFQUFFLEVBRFA7QUFFTEMsTUFBQUEsSUFBSSxFQUFFVixNQUZEO0FBR0xXLE1BQUFBLFNBQVMsRUFBRTtBQUhOLEtBQVA7QUFLRDtBQUNGOztBQUVELFNBQVNDLGVBQVQsQ0FBMEJDLEtBQTFCLEVBQWlDSCxJQUFqQyxFQUF1QztBQUNyQyxNQUFJSSxJQUFJLEdBQUcsQ0FBWDtBQUNBLE1BQUlDLEdBQUcsR0FBR0wsSUFBSSxDQUFDTSxPQUFMLENBQWEsSUFBYixDQUFWO0FBQ0EsTUFBSUMsTUFBTSxHQUFHSixLQUFLLENBQUNLLEtBQU4sR0FBY0wsS0FBSyxDQUFDLENBQUQsQ0FBTCxDQUFTTSxNQUFwQzs7QUFFQSxTQUFPSixHQUFHLEtBQUssQ0FBQyxDQUFoQixFQUFtQjtBQUNqQixRQUFJQSxHQUFHLElBQUlFLE1BQVgsRUFBbUI7QUFDakIsYUFBT0gsSUFBUDtBQUNEOztBQUNEQSxJQUFBQSxJQUFJO0FBQ0pDLElBQUFBLEdBQUcsR0FBR0wsSUFBSSxDQUFDTSxPQUFMLENBQWEsSUFBYixFQUFtQkQsR0FBRyxHQUFHLENBQXpCLENBQU47QUFDRDs7QUFFRCxTQUFPRCxJQUFQO0FBQ0Q7O0FBRUQsU0FBU04sS0FBVCxDQUFnQlIsTUFBaEIsRUFBd0JHLFdBQXhCLEVBQXFDO0FBQ25DLE1BQUlVLEtBQUssR0FBR25CLEtBQUssQ0FBQzBCLElBQU4sQ0FBV3BCLE1BQVgsQ0FBWjs7QUFDQSxNQUFJLENBQUNhLEtBQUwsRUFBWTtBQUNWLFdBQU87QUFDTEosTUFBQUEsVUFBVSxFQUFFLEVBRFA7QUFFTEMsTUFBQUEsSUFBSSxFQUFFVixNQUZEO0FBR0xXLE1BQUFBLFNBQVMsRUFBRTtBQUhOLEtBQVA7QUFLRDs7QUFFRCxNQUFJVSxNQUFNLEdBQUdsQixXQUFXLEdBQUdmLE1BQU0sQ0FBQ2tDLElBQVYsR0FBaUJsQyxNQUFNLENBQUNtQyxRQUFoRDtBQUNBLE1BQUlDLElBQUksR0FBR1gsS0FBSyxDQUFDQSxLQUFLLENBQUNNLE1BQU4sR0FBZSxDQUFoQixDQUFMLENBQXdCTSxPQUF4QixDQUFnQyxZQUFoQyxFQUE4QyxFQUE5QyxDQUFYO0FBQ0EsTUFBSWhCLFVBQVUsR0FBR1ksTUFBTSxDQUFDRyxJQUFELENBQU4sSUFBZ0IsRUFBakM7QUFDQSxNQUFJZCxJQUFJLEdBQUdWLE1BQU0sQ0FBQ3lCLE9BQVAsQ0FBZVosS0FBSyxDQUFDLENBQUQsQ0FBcEIsRUFBeUIsRUFBekIsQ0FBWDtBQUNBLE1BQUlDLElBQUksR0FBR0YsZUFBZSxDQUFDQyxLQUFELEVBQVFiLE1BQVIsQ0FBMUI7QUFFQSxTQUFPO0FBQ0xTLElBQUFBLFVBQVUsRUFBRUEsVUFEUDtBQUVMQyxJQUFBQSxJQUFJLEVBQUVBLElBRkQ7QUFHTEMsSUFBQUEsU0FBUyxFQUFFRyxJQUhOO0FBSUxZLElBQUFBLFdBQVcsRUFBRUY7QUFKUixHQUFQO0FBTUQ7O0FBRUQsU0FBU3pCLElBQVQsQ0FBZUMsTUFBZixFQUF1QjtBQUNyQkEsRUFBQUEsTUFBTSxHQUFHQSxNQUFNLElBQUksRUFBbkI7QUFFQSxTQUFPTixLQUFLLENBQUNLLElBQU4sQ0FBV0MsTUFBWCxDQUFQO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvaW5kZXguanM/M2QwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcGFyc2VyID0gcmVxdWlyZSgnanMteWFtbCcpXG52YXIgb3B0aW9uYWxCeXRlT3JkZXJNYXJrID0gJ1xcXFx1ZmVmZj8nXG52YXIgcGxhdGZvcm0gPSB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgPyBwcm9jZXNzLnBsYXRmb3JtIDogJydcbnZhciBwYXR0ZXJuID0gJ14oJyArXG4gIG9wdGlvbmFsQnl0ZU9yZGVyTWFyayArXG4gICcoPSB5YW1sID18LS0tKScgK1xuICAnJChbXFxcXHNcXFxcU10qPyknICtcbiAgJ14oPzpcXFxcMnxcXFxcLlxcXFwuXFxcXC4pXFxcXHMqJyArXG4gICckJyArXG4gIChwbGF0Zm9ybSA9PT0gJ3dpbjMyJyA/ICdcXFxccj8nIDogJycpICtcbiAgJyg/OlxcXFxuKT8pJ1xuLy8gTk9URTogSWYgdGhpcyBwYXR0ZXJuIHVzZXMgdGhlICdnJyBmbGFnIHRoZSBgcmVnZXhgIHZhcmlhYmxlIGRlZmluaXRpb24gd2lsbFxuLy8gbmVlZCB0byBiZSBtb3ZlZCBkb3duIGludG8gdGhlIGZ1bmN0aW9ucyB0aGF0IHVzZSBpdC5cbnZhciByZWdleCA9IG5ldyBSZWdFeHAocGF0dGVybiwgJ20nKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4dHJhY3RvclxubW9kdWxlLmV4cG9ydHMudGVzdCA9IHRlc3RcblxuZnVuY3Rpb24gZXh0cmFjdG9yIChzdHJpbmcsIG9wdGlvbnMpIHtcbiAgc3RyaW5nID0gc3RyaW5nIHx8ICcnXG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IHsgYWxsb3dVbnNhZmU6IGZhbHNlIH1cbiAgb3B0aW9ucyA9IG9wdGlvbnMgaW5zdGFuY2VvZiBPYmplY3QgPyB7IC4uLmRlZmF1bHRPcHRpb25zLCAuLi5vcHRpb25zIH0gOiBkZWZhdWx0T3B0aW9uc1xuICBvcHRpb25zLmFsbG93VW5zYWZlID0gQm9vbGVhbihvcHRpb25zLmFsbG93VW5zYWZlKVxuICB2YXIgbGluZXMgPSBzdHJpbmcuc3BsaXQoLyhcXHI/XFxuKS8pXG4gIGlmIChsaW5lc1swXSAmJiAvPSB5YW1sID18LS0tLy50ZXN0KGxpbmVzWzBdKSkge1xuICAgIHJldHVybiBwYXJzZShzdHJpbmcsIG9wdGlvbnMuYWxsb3dVbnNhZmUpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgICAgYm9keTogc3RyaW5nLFxuICAgICAgYm9keUJlZ2luOiAxXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVMb2NhdGlvbiAobWF0Y2gsIGJvZHkpIHtcbiAgdmFyIGxpbmUgPSAxXG4gIHZhciBwb3MgPSBib2R5LmluZGV4T2YoJ1xcbicpXG4gIHZhciBvZmZzZXQgPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aFxuXG4gIHdoaWxlIChwb3MgIT09IC0xKSB7XG4gICAgaWYgKHBvcyA+PSBvZmZzZXQpIHtcbiAgICAgIHJldHVybiBsaW5lXG4gICAgfVxuICAgIGxpbmUrK1xuICAgIHBvcyA9IGJvZHkuaW5kZXhPZignXFxuJywgcG9zICsgMSlcbiAgfVxuXG4gIHJldHVybiBsaW5lXG59XG5cbmZ1bmN0aW9uIHBhcnNlIChzdHJpbmcsIGFsbG93VW5zYWZlKSB7XG4gIHZhciBtYXRjaCA9IHJlZ2V4LmV4ZWMoc3RyaW5nKVxuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgICAgYm9keTogc3RyaW5nLFxuICAgICAgYm9keUJlZ2luOiAxXG4gICAgfVxuICB9XG5cbiAgdmFyIGxvYWRlciA9IGFsbG93VW5zYWZlID8gcGFyc2VyLmxvYWQgOiBwYXJzZXIuc2FmZUxvYWRcbiAgdmFyIHlhbWwgPSBtYXRjaFttYXRjaC5sZW5ndGggLSAxXS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbiAgdmFyIGF0dHJpYnV0ZXMgPSBsb2FkZXIoeWFtbCkgfHwge31cbiAgdmFyIGJvZHkgPSBzdHJpbmcucmVwbGFjZShtYXRjaFswXSwgJycpXG4gIHZhciBsaW5lID0gY29tcHV0ZUxvY2F0aW9uKG1hdGNoLCBzdHJpbmcpXG5cbiAgcmV0dXJuIHtcbiAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzLFxuICAgIGJvZHk6IGJvZHksXG4gICAgYm9keUJlZ2luOiBsaW5lLFxuICAgIGZyb250bWF0dGVyOiB5YW1sXG4gIH1cbn1cblxuZnVuY3Rpb24gdGVzdCAoc3RyaW5nKSB7XG4gIHN0cmluZyA9IHN0cmluZyB8fCAnJ1xuXG4gIHJldHVybiByZWdleC50ZXN0KHN0cmluZylcbn1cbiJdLCJuYW1lcyI6WyJwYXJzZXIiLCJyZXF1aXJlIiwib3B0aW9uYWxCeXRlT3JkZXJNYXJrIiwicGxhdGZvcm0iLCJwcm9jZXNzIiwicGF0dGVybiIsInJlZ2V4IiwiUmVnRXhwIiwibW9kdWxlIiwiZXhwb3J0cyIsImV4dHJhY3RvciIsInRlc3QiLCJzdHJpbmciLCJvcHRpb25zIiwiZGVmYXVsdE9wdGlvbnMiLCJhbGxvd1Vuc2FmZSIsIk9iamVjdCIsIkJvb2xlYW4iLCJsaW5lcyIsInNwbGl0IiwicGFyc2UiLCJhdHRyaWJ1dGVzIiwiYm9keSIsImJvZHlCZWdpbiIsImNvbXB1dGVMb2NhdGlvbiIsIm1hdGNoIiwibGluZSIsInBvcyIsImluZGV4T2YiLCJvZmZzZXQiLCJpbmRleCIsImxlbmd0aCIsImV4ZWMiLCJsb2FkZXIiLCJsb2FkIiwic2FmZUxvYWQiLCJ5YW1sIiwicmVwbGFjZSIsImZyb250bWF0dGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/index.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/index.js":
/*!*************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/index.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar yaml = __webpack_require__(/*! ./lib/js-yaml.js */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml.js\");\n\nmodule.exports = yaml;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBR2IsSUFBSUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLGlHQUFELENBQWxCOztBQUdBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJILElBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4uL3NoYXJlZC9ub2RlX21vZHVsZXMvZnJvbnQtbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2luZGV4LmpzPzhjYmIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciB5YW1sID0gcmVxdWlyZSgnLi9saWIvanMteWFtbC5qcycpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0geWFtbDtcbiJdLCJuYW1lcyI6WyJ5YW1sIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/index.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml.js":
/*!*******************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar loader = __webpack_require__(/*! ./js-yaml/loader */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/loader.js\");\n\nvar dumper = __webpack_require__(/*! ./js-yaml/dumper */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/dumper.js\");\n\nfunction deprecated(name) {\n  return function () {\n    throw new Error('Function ' + name + ' is deprecated and cannot be used.');\n  };\n}\n\nmodule.exports.Type = __webpack_require__(/*! ./js-yaml/type */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nmodule.exports.Schema = __webpack_require__(/*! ./js-yaml/schema */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema.js\");\nmodule.exports.FAILSAFE_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/failsafe */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js\");\nmodule.exports.JSON_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/json */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/json.js\");\nmodule.exports.CORE_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/core */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/core.js\");\nmodule.exports.DEFAULT_SAFE_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/default_safe */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js\");\nmodule.exports.DEFAULT_FULL_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/default_full */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js\");\nmodule.exports.load = loader.load;\nmodule.exports.loadAll = loader.loadAll;\nmodule.exports.safeLoad = loader.safeLoad;\nmodule.exports.safeLoadAll = loader.safeLoadAll;\nmodule.exports.dump = dumper.dump;\nmodule.exports.safeDump = dumper.safeDump;\nmodule.exports.YAMLException = __webpack_require__(/*! ./js-yaml/exception */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/exception.js\"); // Deprecated schema names from JS-YAML 2.0.x\n\nmodule.exports.MINIMAL_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/failsafe */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js\");\nmodule.exports.SAFE_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/default_safe */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js\");\nmodule.exports.DEFAULT_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/default_full */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js\"); // Deprecated functions from JS-YAML 1.x.x\n\nmodule.exports.scan = deprecated('scan');\nmodule.exports.parse = deprecated('parse');\nmodule.exports.compose = deprecated('compose');\nmodule.exports.addConstructor = deprecated('addConstructor');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBR2IsSUFBSUEsTUFBTSxHQUFHQyxtQkFBTyxDQUFDLHdHQUFELENBQXBCOztBQUNBLElBQUlDLE1BQU0sR0FBR0QsbUJBQU8sQ0FBQyx3R0FBRCxDQUFwQjs7QUFHQSxTQUFTRSxVQUFULENBQW9CQyxJQUFwQixFQUEwQjtBQUN4QixTQUFPLFlBQVk7QUFDakIsVUFBTSxJQUFJQyxLQUFKLENBQVUsY0FBY0QsSUFBZCxHQUFxQixvQ0FBL0IsQ0FBTjtBQUNELEdBRkQ7QUFHRDs7QUFHREUsK0lBQUE7QUFDQUEscUpBQUE7QUFDQUEsZ0xBQUE7QUFDQUEsb0tBQUE7QUFDQUEsb0tBQUE7QUFDQUEsNExBQUE7QUFDQUEsNExBQUE7QUFDQUEsbUJBQUEsR0FBcUNOLE1BQU0sQ0FBQ2UsSUFBNUM7QUFDQVQsc0JBQUEsR0FBcUNOLE1BQU0sQ0FBQ2dCLE9BQTVDO0FBQ0FWLHVCQUFBLEdBQXFDTixNQUFNLENBQUNpQixRQUE1QztBQUNBWCwwQkFBQSxHQUFxQ04sTUFBTSxDQUFDa0IsV0FBNUM7QUFDQVosbUJBQUEsR0FBcUNKLE1BQU0sQ0FBQ2lCLElBQTVDO0FBQ0FiLHVCQUFBLEdBQXFDSixNQUFNLENBQUNrQixRQUE1QztBQUNBZCxrS0FBQSxDLENBRUE7O0FBQ0FBLCtLQUFBO0FBQ0FBLG9MQUFBO0FBQ0FBLHVMQUFBLEMsQ0FFQTs7QUFDQUEsbUJBQUEsR0FBZ0NILFVBQVUsQ0FBQyxNQUFELENBQTFDO0FBQ0FHLG9CQUFBLEdBQWdDSCxVQUFVLENBQUMsT0FBRCxDQUExQztBQUNBRyxzQkFBQSxHQUFnQ0gsVUFBVSxDQUFDLFNBQUQsQ0FBMUM7QUFDQUcsNkJBQUEsR0FBZ0NILFVBQVUsQ0FBQyxnQkFBRCxDQUExQyIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uLi9zaGFyZWQvbm9kZV9tb2R1bGVzL2Zyb250LW1hdHRlci9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC5qcz82YWIwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuXG52YXIgbG9hZGVyID0gcmVxdWlyZSgnLi9qcy15YW1sL2xvYWRlcicpO1xudmFyIGR1bXBlciA9IHJlcXVpcmUoJy4vanMteWFtbC9kdW1wZXInKTtcblxuXG5mdW5jdGlvbiBkZXByZWNhdGVkKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Z1bmN0aW9uICcgKyBuYW1lICsgJyBpcyBkZXByZWNhdGVkIGFuZCBjYW5ub3QgYmUgdXNlZC4nKTtcbiAgfTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cy5UeXBlICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9qcy15YW1sL3R5cGUnKTtcbm1vZHVsZS5leHBvcnRzLlNjaGVtYSAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL2pzLXlhbWwvc2NoZW1hJyk7XG5tb2R1bGUuZXhwb3J0cy5GQUlMU0FGRV9TQ0hFTUEgICAgID0gcmVxdWlyZSgnLi9qcy15YW1sL3NjaGVtYS9mYWlsc2FmZScpO1xubW9kdWxlLmV4cG9ydHMuSlNPTl9TQ0hFTUEgICAgICAgICA9IHJlcXVpcmUoJy4vanMteWFtbC9zY2hlbWEvanNvbicpO1xubW9kdWxlLmV4cG9ydHMuQ09SRV9TQ0hFTUEgICAgICAgICA9IHJlcXVpcmUoJy4vanMteWFtbC9zY2hlbWEvY29yZScpO1xubW9kdWxlLmV4cG9ydHMuREVGQVVMVF9TQUZFX1NDSEVNQSA9IHJlcXVpcmUoJy4vanMteWFtbC9zY2hlbWEvZGVmYXVsdF9zYWZlJyk7XG5tb2R1bGUuZXhwb3J0cy5ERUZBVUxUX0ZVTExfU0NIRU1BID0gcmVxdWlyZSgnLi9qcy15YW1sL3NjaGVtYS9kZWZhdWx0X2Z1bGwnKTtcbm1vZHVsZS5leHBvcnRzLmxvYWQgICAgICAgICAgICAgICAgPSBsb2FkZXIubG9hZDtcbm1vZHVsZS5leHBvcnRzLmxvYWRBbGwgICAgICAgICAgICAgPSBsb2FkZXIubG9hZEFsbDtcbm1vZHVsZS5leHBvcnRzLnNhZmVMb2FkICAgICAgICAgICAgPSBsb2FkZXIuc2FmZUxvYWQ7XG5tb2R1bGUuZXhwb3J0cy5zYWZlTG9hZEFsbCAgICAgICAgID0gbG9hZGVyLnNhZmVMb2FkQWxsO1xubW9kdWxlLmV4cG9ydHMuZHVtcCAgICAgICAgICAgICAgICA9IGR1bXBlci5kdW1wO1xubW9kdWxlLmV4cG9ydHMuc2FmZUR1bXAgICAgICAgICAgICA9IGR1bXBlci5zYWZlRHVtcDtcbm1vZHVsZS5leHBvcnRzLllBTUxFeGNlcHRpb24gICAgICAgPSByZXF1aXJlKCcuL2pzLXlhbWwvZXhjZXB0aW9uJyk7XG5cbi8vIERlcHJlY2F0ZWQgc2NoZW1hIG5hbWVzIGZyb20gSlMtWUFNTCAyLjAueFxubW9kdWxlLmV4cG9ydHMuTUlOSU1BTF9TQ0hFTUEgPSByZXF1aXJlKCcuL2pzLXlhbWwvc2NoZW1hL2ZhaWxzYWZlJyk7XG5tb2R1bGUuZXhwb3J0cy5TQUZFX1NDSEVNQSAgICA9IHJlcXVpcmUoJy4vanMteWFtbC9zY2hlbWEvZGVmYXVsdF9zYWZlJyk7XG5tb2R1bGUuZXhwb3J0cy5ERUZBVUxUX1NDSEVNQSA9IHJlcXVpcmUoJy4vanMteWFtbC9zY2hlbWEvZGVmYXVsdF9mdWxsJyk7XG5cbi8vIERlcHJlY2F0ZWQgZnVuY3Rpb25zIGZyb20gSlMtWUFNTCAxLngueFxubW9kdWxlLmV4cG9ydHMuc2NhbiAgICAgICAgICAgPSBkZXByZWNhdGVkKCdzY2FuJyk7XG5tb2R1bGUuZXhwb3J0cy5wYXJzZSAgICAgICAgICA9IGRlcHJlY2F0ZWQoJ3BhcnNlJyk7XG5tb2R1bGUuZXhwb3J0cy5jb21wb3NlICAgICAgICA9IGRlcHJlY2F0ZWQoJ2NvbXBvc2UnKTtcbm1vZHVsZS5leHBvcnRzLmFkZENvbnN0cnVjdG9yID0gZGVwcmVjYXRlZCgnYWRkQ29uc3RydWN0b3InKTtcbiJdLCJuYW1lcyI6WyJsb2FkZXIiLCJyZXF1aXJlIiwiZHVtcGVyIiwiZGVwcmVjYXRlZCIsIm5hbWUiLCJFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJUeXBlIiwiU2NoZW1hIiwiRkFJTFNBRkVfU0NIRU1BIiwiSlNPTl9TQ0hFTUEiLCJDT1JFX1NDSEVNQSIsIkRFRkFVTFRfU0FGRV9TQ0hFTUEiLCJERUZBVUxUX0ZVTExfU0NIRU1BIiwibG9hZCIsImxvYWRBbGwiLCJzYWZlTG9hZCIsInNhZmVMb2FkQWxsIiwiZHVtcCIsInNhZmVEdW1wIiwiWUFNTEV4Y2VwdGlvbiIsIk1JTklNQUxfU0NIRU1BIiwiU0FGRV9TQ0hFTUEiLCJERUZBVUxUX1NDSEVNQSIsInNjYW4iLCJwYXJzZSIsImNvbXBvc2UiLCJhZGRDb25zdHJ1Y3RvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/common.js":
/*!**************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/common.js ***!
  \**************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nfunction isNothing(subject) {\n  return typeof subject === 'undefined' || subject === null;\n}\n\nfunction isObject(subject) {\n  return typeof subject === 'object' && subject !== null;\n}\n\nfunction toArray(sequence) {\n  if (Array.isArray(sequence)) return sequence;else if (isNothing(sequence)) return [];\n  return [sequence];\n}\n\nfunction extend(target, source) {\n  var index, length, key, sourceKeys;\n\n  if (source) {\n    sourceKeys = Object.keys(source);\n\n    for (index = 0, length = sourceKeys.length; index < length; index += 1) {\n      key = sourceKeys[index];\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction repeat(string, count) {\n  var result = '',\n      cycle;\n\n  for (cycle = 0; cycle < count; cycle += 1) {\n    result += string;\n  }\n\n  return result;\n}\n\nfunction isNegativeZero(number) {\n  return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;\n}\n\nmodule.exports.isNothing = isNothing;\nmodule.exports.isObject = isObject;\nmodule.exports.toArray = toArray;\nmodule.exports.repeat = repeat;\nmodule.exports.isNegativeZero = isNegativeZero;\nmodule.exports.extend = extend;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvY29tbW9uLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUdiLFNBQVNBLFNBQVQsQ0FBbUJDLE9BQW5CLEVBQTRCO0FBQzFCLFNBQVEsT0FBT0EsT0FBUCxLQUFtQixXQUFwQixJQUFxQ0EsT0FBTyxLQUFLLElBQXhEO0FBQ0Q7O0FBR0QsU0FBU0MsUUFBVCxDQUFrQkQsT0FBbEIsRUFBMkI7QUFDekIsU0FBUSxPQUFPQSxPQUFQLEtBQW1CLFFBQXBCLElBQWtDQSxPQUFPLEtBQUssSUFBckQ7QUFDRDs7QUFHRCxTQUFTRSxPQUFULENBQWlCQyxRQUFqQixFQUEyQjtBQUN6QixNQUFJQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0YsUUFBZCxDQUFKLEVBQTZCLE9BQU9BLFFBQVAsQ0FBN0IsS0FDSyxJQUFJSixTQUFTLENBQUNJLFFBQUQsQ0FBYixFQUF5QixPQUFPLEVBQVA7QUFFOUIsU0FBTyxDQUFFQSxRQUFGLENBQVA7QUFDRDs7QUFHRCxTQUFTRyxNQUFULENBQWdCQyxNQUFoQixFQUF3QkMsTUFBeEIsRUFBZ0M7QUFDOUIsTUFBSUMsS0FBSixFQUFXQyxNQUFYLEVBQW1CQyxHQUFuQixFQUF3QkMsVUFBeEI7O0FBRUEsTUFBSUosTUFBSixFQUFZO0FBQ1ZJLElBQUFBLFVBQVUsR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlOLE1BQVosQ0FBYjs7QUFFQSxTQUFLQyxLQUFLLEdBQUcsQ0FBUixFQUFXQyxNQUFNLEdBQUdFLFVBQVUsQ0FBQ0YsTUFBcEMsRUFBNENELEtBQUssR0FBR0MsTUFBcEQsRUFBNERELEtBQUssSUFBSSxDQUFyRSxFQUF3RTtBQUN0RUUsTUFBQUEsR0FBRyxHQUFHQyxVQUFVLENBQUNILEtBQUQsQ0FBaEI7QUFDQUYsTUFBQUEsTUFBTSxDQUFDSSxHQUFELENBQU4sR0FBY0gsTUFBTSxDQUFDRyxHQUFELENBQXBCO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPSixNQUFQO0FBQ0Q7O0FBR0QsU0FBU1EsTUFBVCxDQUFnQkMsTUFBaEIsRUFBd0JDLEtBQXhCLEVBQStCO0FBQzdCLE1BQUlDLE1BQU0sR0FBRyxFQUFiO0FBQUEsTUFBaUJDLEtBQWpCOztBQUVBLE9BQUtBLEtBQUssR0FBRyxDQUFiLEVBQWdCQSxLQUFLLEdBQUdGLEtBQXhCLEVBQStCRSxLQUFLLElBQUksQ0FBeEMsRUFBMkM7QUFDekNELElBQUFBLE1BQU0sSUFBSUYsTUFBVjtBQUNEOztBQUVELFNBQU9FLE1BQVA7QUFDRDs7QUFHRCxTQUFTRSxjQUFULENBQXdCQyxNQUF4QixFQUFnQztBQUM5QixTQUFRQSxNQUFNLEtBQUssQ0FBWixJQUFtQkMsTUFBTSxDQUFDQyxpQkFBUCxLQUE2QixJQUFJRixNQUEzRDtBQUNEOztBQUdERyx3QkFBQSxHQUFnQ3pCLFNBQWhDO0FBQ0F5Qix1QkFBQSxHQUFnQ3ZCLFFBQWhDO0FBQ0F1QixzQkFBQSxHQUFnQ3RCLE9BQWhDO0FBQ0FzQixxQkFBQSxHQUFnQ1QsTUFBaEM7QUFDQVMsNkJBQUEsR0FBZ0NKLGNBQWhDO0FBQ0FJLHFCQUFBLEdBQWdDbEIsTUFBaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvY29tbW9uLmpzPzIyN2EiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5cbmZ1bmN0aW9uIGlzTm90aGluZyhzdWJqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIHN1YmplY3QgPT09ICd1bmRlZmluZWQnKSB8fCAoc3ViamVjdCA9PT0gbnVsbCk7XG59XG5cblxuZnVuY3Rpb24gaXNPYmplY3Qoc3ViamVjdCkge1xuICByZXR1cm4gKHR5cGVvZiBzdWJqZWN0ID09PSAnb2JqZWN0JykgJiYgKHN1YmplY3QgIT09IG51bGwpO1xufVxuXG5cbmZ1bmN0aW9uIHRvQXJyYXkoc2VxdWVuY2UpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc2VxdWVuY2UpKSByZXR1cm4gc2VxdWVuY2U7XG4gIGVsc2UgaWYgKGlzTm90aGluZyhzZXF1ZW5jZSkpIHJldHVybiBbXTtcblxuICByZXR1cm4gWyBzZXF1ZW5jZSBdO1xufVxuXG5cbmZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIgaW5kZXgsIGxlbmd0aCwga2V5LCBzb3VyY2VLZXlzO1xuXG4gIGlmIChzb3VyY2UpIHtcbiAgICBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcblxuICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBzb3VyY2VLZXlzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICAgIGtleSA9IHNvdXJjZUtleXNbaW5kZXhdO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5cbmZ1bmN0aW9uIHJlcGVhdChzdHJpbmcsIGNvdW50KSB7XG4gIHZhciByZXN1bHQgPSAnJywgY3ljbGU7XG5cbiAgZm9yIChjeWNsZSA9IDA7IGN5Y2xlIDwgY291bnQ7IGN5Y2xlICs9IDEpIHtcbiAgICByZXN1bHQgKz0gc3RyaW5nO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuXG5mdW5jdGlvbiBpc05lZ2F0aXZlWmVybyhudW1iZXIpIHtcbiAgcmV0dXJuIChudW1iZXIgPT09IDApICYmIChOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkgPT09IDEgLyBudW1iZXIpO1xufVxuXG5cbm1vZHVsZS5leHBvcnRzLmlzTm90aGluZyAgICAgID0gaXNOb3RoaW5nO1xubW9kdWxlLmV4cG9ydHMuaXNPYmplY3QgICAgICAgPSBpc09iamVjdDtcbm1vZHVsZS5leHBvcnRzLnRvQXJyYXkgICAgICAgID0gdG9BcnJheTtcbm1vZHVsZS5leHBvcnRzLnJlcGVhdCAgICAgICAgID0gcmVwZWF0O1xubW9kdWxlLmV4cG9ydHMuaXNOZWdhdGl2ZVplcm8gPSBpc05lZ2F0aXZlWmVybztcbm1vZHVsZS5leHBvcnRzLmV4dGVuZCAgICAgICAgID0gZXh0ZW5kO1xuIl0sIm5hbWVzIjpbImlzTm90aGluZyIsInN1YmplY3QiLCJpc09iamVjdCIsInRvQXJyYXkiLCJzZXF1ZW5jZSIsIkFycmF5IiwiaXNBcnJheSIsImV4dGVuZCIsInRhcmdldCIsInNvdXJjZSIsImluZGV4IiwibGVuZ3RoIiwia2V5Iiwic291cmNlS2V5cyIsIk9iamVjdCIsImtleXMiLCJyZXBlYXQiLCJzdHJpbmciLCJjb3VudCIsInJlc3VsdCIsImN5Y2xlIiwiaXNOZWdhdGl2ZVplcm8iLCJudW1iZXIiLCJOdW1iZXIiLCJORUdBVElWRV9JTkZJTklUWSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/common.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/dumper.js":
/*!**************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/dumper.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/*eslint-disable no-use-before-define*/\n\nvar common = __webpack_require__(/*! ./common */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/common.js\");\n\nvar YAMLException = __webpack_require__(/*! ./exception */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/exception.js\");\n\nvar DEFAULT_FULL_SCHEMA = __webpack_require__(/*! ./schema/default_full */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js\");\n\nvar DEFAULT_SAFE_SCHEMA = __webpack_require__(/*! ./schema/default_safe */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js\");\n\nvar _toString = Object.prototype.toString;\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar CHAR_TAB = 0x09;\n/* Tab */\n\nvar CHAR_LINE_FEED = 0x0A;\n/* LF */\n\nvar CHAR_CARRIAGE_RETURN = 0x0D;\n/* CR */\n\nvar CHAR_SPACE = 0x20;\n/* Space */\n\nvar CHAR_EXCLAMATION = 0x21;\n/* ! */\n\nvar CHAR_DOUBLE_QUOTE = 0x22;\n/* \" */\n\nvar CHAR_SHARP = 0x23;\n/* # */\n\nvar CHAR_PERCENT = 0x25;\n/* % */\n\nvar CHAR_AMPERSAND = 0x26;\n/* & */\n\nvar CHAR_SINGLE_QUOTE = 0x27;\n/* ' */\n\nvar CHAR_ASTERISK = 0x2A;\n/* * */\n\nvar CHAR_COMMA = 0x2C;\n/* , */\n\nvar CHAR_MINUS = 0x2D;\n/* - */\n\nvar CHAR_COLON = 0x3A;\n/* : */\n\nvar CHAR_EQUALS = 0x3D;\n/* = */\n\nvar CHAR_GREATER_THAN = 0x3E;\n/* > */\n\nvar CHAR_QUESTION = 0x3F;\n/* ? */\n\nvar CHAR_COMMERCIAL_AT = 0x40;\n/* @ */\n\nvar CHAR_LEFT_SQUARE_BRACKET = 0x5B;\n/* [ */\n\nvar CHAR_RIGHT_SQUARE_BRACKET = 0x5D;\n/* ] */\n\nvar CHAR_GRAVE_ACCENT = 0x60;\n/* ` */\n\nvar CHAR_LEFT_CURLY_BRACKET = 0x7B;\n/* { */\n\nvar CHAR_VERTICAL_LINE = 0x7C;\n/* | */\n\nvar CHAR_RIGHT_CURLY_BRACKET = 0x7D;\n/* } */\n\nvar ESCAPE_SEQUENCES = {};\nESCAPE_SEQUENCES[0x00] = '\\\\0';\nESCAPE_SEQUENCES[0x07] = '\\\\a';\nESCAPE_SEQUENCES[0x08] = '\\\\b';\nESCAPE_SEQUENCES[0x09] = '\\\\t';\nESCAPE_SEQUENCES[0x0A] = '\\\\n';\nESCAPE_SEQUENCES[0x0B] = '\\\\v';\nESCAPE_SEQUENCES[0x0C] = '\\\\f';\nESCAPE_SEQUENCES[0x0D] = '\\\\r';\nESCAPE_SEQUENCES[0x1B] = '\\\\e';\nESCAPE_SEQUENCES[0x22] = '\\\\\"';\nESCAPE_SEQUENCES[0x5C] = '\\\\\\\\';\nESCAPE_SEQUENCES[0x85] = '\\\\N';\nESCAPE_SEQUENCES[0xA0] = '\\\\_';\nESCAPE_SEQUENCES[0x2028] = '\\\\L';\nESCAPE_SEQUENCES[0x2029] = '\\\\P';\nvar DEPRECATED_BOOLEANS_SYNTAX = ['y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON', 'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'];\n\nfunction compileStyleMap(schema, map) {\n  var result, keys, index, length, tag, style, type;\n  if (map === null) return {};\n  result = {};\n  keys = Object.keys(map);\n\n  for (index = 0, length = keys.length; index < length; index += 1) {\n    tag = keys[index];\n    style = String(map[tag]);\n\n    if (tag.slice(0, 2) === '!!') {\n      tag = 'tag:yaml.org,2002:' + tag.slice(2);\n    }\n\n    type = schema.compiledTypeMap['fallback'][tag];\n\n    if (type && _hasOwnProperty.call(type.styleAliases, style)) {\n      style = type.styleAliases[style];\n    }\n\n    result[tag] = style;\n  }\n\n  return result;\n}\n\nfunction encodeHex(character) {\n  var string, handle, length;\n  string = character.toString(16).toUpperCase();\n\n  if (character <= 0xFF) {\n    handle = 'x';\n    length = 2;\n  } else if (character <= 0xFFFF) {\n    handle = 'u';\n    length = 4;\n  } else if (character <= 0xFFFFFFFF) {\n    handle = 'U';\n    length = 8;\n  } else {\n    throw new YAMLException('code point within a string may not be greater than 0xFFFFFFFF');\n  }\n\n  return '\\\\' + handle + common.repeat('0', length - string.length) + string;\n}\n\nfunction State(options) {\n  this.schema = options['schema'] || DEFAULT_FULL_SCHEMA;\n  this.indent = Math.max(1, options['indent'] || 2);\n  this.noArrayIndent = options['noArrayIndent'] || false;\n  this.skipInvalid = options['skipInvalid'] || false;\n  this.flowLevel = common.isNothing(options['flowLevel']) ? -1 : options['flowLevel'];\n  this.styleMap = compileStyleMap(this.schema, options['styles'] || null);\n  this.sortKeys = options['sortKeys'] || false;\n  this.lineWidth = options['lineWidth'] || 80;\n  this.noRefs = options['noRefs'] || false;\n  this.noCompatMode = options['noCompatMode'] || false;\n  this.condenseFlow = options['condenseFlow'] || false;\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.explicitTypes = this.schema.compiledExplicit;\n  this.tag = null;\n  this.result = '';\n  this.duplicates = [];\n  this.usedDuplicates = null;\n} // Indents every line in a string. Empty lines (\\n only) are not indented.\n\n\nfunction indentString(string, spaces) {\n  var ind = common.repeat(' ', spaces),\n      position = 0,\n      next = -1,\n      result = '',\n      line,\n      length = string.length;\n\n  while (position < length) {\n    next = string.indexOf('\\n', position);\n\n    if (next === -1) {\n      line = string.slice(position);\n      position = length;\n    } else {\n      line = string.slice(position, next + 1);\n      position = next + 1;\n    }\n\n    if (line.length && line !== '\\n') result += ind;\n    result += line;\n  }\n\n  return result;\n}\n\nfunction generateNextLine(state, level) {\n  return '\\n' + common.repeat(' ', state.indent * level);\n}\n\nfunction testImplicitResolving(state, str) {\n  var index, length, type;\n\n  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {\n    type = state.implicitTypes[index];\n\n    if (type.resolve(str)) {\n      return true;\n    }\n  }\n\n  return false;\n} // [33] s-white ::= s-space | s-tab\n\n\nfunction isWhitespace(c) {\n  return c === CHAR_SPACE || c === CHAR_TAB;\n} // Returns true if the character can be printed without escaping.\n// From YAML 1.2: \"any allowed characters known to be non-printable\n// should also be escaped. [However,] This isn’t mandatory\"\n// Derived from nb-char - \\t - #x85 - #xA0 - #x2028 - #x2029.\n\n\nfunction isPrintable(c) {\n  return 0x00020 <= c && c <= 0x00007E || 0x000A1 <= c && c <= 0x00D7FF && c !== 0x2028 && c !== 0x2029 || 0x0E000 <= c && c <= 0x00FFFD && c !== 0xFEFF\n  /* BOM */\n  || 0x10000 <= c && c <= 0x10FFFF;\n} // [34] ns-char ::= nb-char - s-white\n// [27] nb-char ::= c-printable - b-char - c-byte-order-mark\n// [26] b-char  ::= b-line-feed | b-carriage-return\n// [24] b-line-feed       ::=     #xA    /* LF */\n// [25] b-carriage-return ::=     #xD    /* CR */\n// [3]  c-byte-order-mark ::=     #xFEFF\n\n\nfunction isNsChar(c) {\n  return isPrintable(c) && !isWhitespace(c) // byte-order-mark\n  && c !== 0xFEFF // b-char\n  && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;\n} // Simplified test for values allowed after the first character in plain style.\n\n\nfunction isPlainSafe(c, prev) {\n  // Uses a subset of nb-char - c-flow-indicator - \":\" - \"#\"\n  // where nb-char ::= c-printable - b-char - c-byte-order-mark.\n  return isPrintable(c) && c !== 0xFEFF // - c-flow-indicator\n  && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET // - \":\" - \"#\"\n  // /* An ns-char preceding */ \"#\"\n  && c !== CHAR_COLON && (c !== CHAR_SHARP || prev && isNsChar(prev));\n} // Simplified test for values allowed as the first character in plain style.\n\n\nfunction isPlainSafeFirst(c) {\n  // Uses a subset of ns-char - c-indicator\n  // where ns-char = nb-char - s-white.\n  return isPrintable(c) && c !== 0xFEFF && !isWhitespace(c) // - s-white\n  // - (c-indicator ::=\n  // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”\n  && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET // | “#” | “&” | “*” | “!” | “|” | “=” | “>” | “'” | “\"”\n  && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE // | “%” | “@” | “`”)\n  && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;\n} // Determines whether block indentation indicator is required.\n\n\nfunction needIndentIndicator(string) {\n  var leadingSpaceRe = /^\\n* /;\n  return leadingSpaceRe.test(string);\n}\n\nvar STYLE_PLAIN = 1,\n    STYLE_SINGLE = 2,\n    STYLE_LITERAL = 3,\n    STYLE_FOLDED = 4,\n    STYLE_DOUBLE = 5; // Determines which scalar styles are possible and returns the preferred style.\n// lineWidth = -1 => no limit.\n// Pre-conditions: str.length > 0.\n// Post-conditions:\n//    STYLE_PLAIN or STYLE_SINGLE => no \\n are in the string.\n//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).\n//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).\n\nfunction chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType) {\n  var i;\n  var char, prev_char;\n  var hasLineBreak = false;\n  var hasFoldableLine = false; // only checked if shouldTrackWidth\n\n  var shouldTrackWidth = lineWidth !== -1;\n  var previousLineBreak = -1; // count the first line correctly\n\n  var plain = isPlainSafeFirst(string.charCodeAt(0)) && !isWhitespace(string.charCodeAt(string.length - 1));\n\n  if (singleLineOnly) {\n    // Case: no block styles.\n    // Check for disallowed characters to rule out plain and single.\n    for (i = 0; i < string.length; i++) {\n      char = string.charCodeAt(i);\n\n      if (!isPrintable(char)) {\n        return STYLE_DOUBLE;\n      }\n\n      prev_char = i > 0 ? string.charCodeAt(i - 1) : null;\n      plain = plain && isPlainSafe(char, prev_char);\n    }\n  } else {\n    // Case: block styles permitted.\n    for (i = 0; i < string.length; i++) {\n      char = string.charCodeAt(i);\n\n      if (char === CHAR_LINE_FEED) {\n        hasLineBreak = true; // Check if any line can be folded.\n\n        if (shouldTrackWidth) {\n          hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.\n          i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';\n          previousLineBreak = i;\n        }\n      } else if (!isPrintable(char)) {\n        return STYLE_DOUBLE;\n      }\n\n      prev_char = i > 0 ? string.charCodeAt(i - 1) : null;\n      plain = plain && isPlainSafe(char, prev_char);\n    } // in case the end is missing a \\n\n\n\n    hasFoldableLine = hasFoldableLine || shouldTrackWidth && i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';\n  } // Although every style can represent \\n without escaping, prefer block styles\n  // for multiline, since they're more readable and they don't add empty lines.\n  // Also prefer folding a super-long line.\n\n\n  if (!hasLineBreak && !hasFoldableLine) {\n    // Strings interpretable as another type have to be quoted;\n    // e.g. the string 'true' vs. the boolean true.\n    return plain && !testAmbiguousType(string) ? STYLE_PLAIN : STYLE_SINGLE;\n  } // Edge case: block indentation indicator can only have one digit.\n\n\n  if (indentPerLevel > 9 && needIndentIndicator(string)) {\n    return STYLE_DOUBLE;\n  } // At this point we know block styles are valid.\n  // Prefer literal style unless we want to fold.\n\n\n  return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;\n} // Note: line breaking/folding is implemented for only the folded style.\n// NB. We drop the last trailing newline (if any) of a returned block scalar\n//  since the dumper adds its own newline. This always works:\n//    • No ending newline => unaffected; already using strip \"-\" chomping.\n//    • Ending newline    => removed then restored.\n//  Importantly, this keeps the \"+\" chomp indicator from gaining an extra line.\n\n\nfunction writeScalar(state, string, level, iskey) {\n  state.dump = function () {\n    if (string.length === 0) {\n      return \"''\";\n    }\n\n    if (!state.noCompatMode && DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1) {\n      return \"'\" + string + \"'\";\n    }\n\n    var indent = state.indent * Math.max(1, level); // no 0-indent scalars\n    // As indentation gets deeper, let the width decrease monotonically\n    // to the lower bound min(state.lineWidth, 40).\n    // Note that this implies\n    //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.\n    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.\n    // This behaves better than a constant minimum width which disallows narrower options,\n    // or an indent threshold which causes the width to suddenly increase.\n\n    var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent); // Without knowing if keys are implicit/explicit, assume implicit for safety.\n\n    var singleLineOnly = iskey // No block styles in flow mode.\n    || state.flowLevel > -1 && level >= state.flowLevel;\n\n    function testAmbiguity(string) {\n      return testImplicitResolving(state, string);\n    }\n\n    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity)) {\n      case STYLE_PLAIN:\n        return string;\n\n      case STYLE_SINGLE:\n        return \"'\" + string.replace(/'/g, \"''\") + \"'\";\n\n      case STYLE_LITERAL:\n        return '|' + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));\n\n      case STYLE_FOLDED:\n        return '>' + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));\n\n      case STYLE_DOUBLE:\n        return '\"' + escapeString(string, lineWidth) + '\"';\n\n      default:\n        throw new YAMLException('impossible error: invalid scalar style');\n    }\n  }();\n} // Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.\n\n\nfunction blockHeader(string, indentPerLevel) {\n  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : ''; // note the special case: the string '\\n' counts as a \"trailing\" empty line.\n\n  var clip = string[string.length - 1] === '\\n';\n  var keep = clip && (string[string.length - 2] === '\\n' || string === '\\n');\n  var chomp = keep ? '+' : clip ? '' : '-';\n  return indentIndicator + chomp + '\\n';\n} // (See the note for writeScalar.)\n\n\nfunction dropEndingNewline(string) {\n  return string[string.length - 1] === '\\n' ? string.slice(0, -1) : string;\n} // Note: a long line without a suitable break point will exceed the width limit.\n// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.\n\n\nfunction foldString(string, width) {\n  // In folded style, $k$ consecutive newlines output as $k+1$ newlines—\n  // unless they're before or after a more-indented line, or at the very\n  // beginning or end, in which case $k$ maps to $k$.\n  // Therefore, parse each chunk as newline(s) followed by a content line.\n  var lineRe = /(\\n+)([^\\n]*)/g; // first line (possibly an empty line)\n\n  var result = function () {\n    var nextLF = string.indexOf('\\n');\n    nextLF = nextLF !== -1 ? nextLF : string.length;\n    lineRe.lastIndex = nextLF;\n    return foldLine(string.slice(0, nextLF), width);\n  }(); // If we haven't reached the first content line yet, don't add an extra \\n.\n\n\n  var prevMoreIndented = string[0] === '\\n' || string[0] === ' ';\n  var moreIndented; // rest of the lines\n\n  var match;\n\n  while (match = lineRe.exec(string)) {\n    var prefix = match[1],\n        line = match[2];\n    moreIndented = line[0] === ' ';\n    result += prefix + (!prevMoreIndented && !moreIndented && line !== '' ? '\\n' : '') + foldLine(line, width);\n    prevMoreIndented = moreIndented;\n  }\n\n  return result;\n} // Greedy line breaking.\n// Picks the longest line under the limit each time,\n// otherwise settles for the shortest line over the limit.\n// NB. More-indented lines *cannot* be folded, as that would add an extra \\n.\n\n\nfunction foldLine(line, width) {\n  if (line === '' || line[0] === ' ') return line; // Since a more-indented line adds a \\n, breaks can't be followed by a space.\n\n  var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.\n\n  var match; // start is an inclusive index. end, curr, and next are exclusive.\n\n  var start = 0,\n      end,\n      curr = 0,\n      next = 0;\n  var result = ''; // Invariants: 0 <= start <= length-1.\n  //   0 <= curr <= next <= max(0, length-2). curr - start <= width.\n  // Inside the loop:\n  //   A match implies length >= 2, so curr and next are <= length-2.\n\n  while (match = breakRe.exec(line)) {\n    next = match.index; // maintain invariant: curr - start <= width\n\n    if (next - start > width) {\n      end = curr > start ? curr : next; // derive end <= length-2\n\n      result += '\\n' + line.slice(start, end); // skip the space that was output as \\n\n\n      start = end + 1; // derive start <= length-1\n    }\n\n    curr = next;\n  } // By the invariants, start <= length-1, so there is something left over.\n  // It is either the whole string or a part starting from non-whitespace.\n\n\n  result += '\\n'; // Insert a break if the remainder is too long and there is a break available.\n\n  if (line.length - start > width && curr > start) {\n    result += line.slice(start, curr) + '\\n' + line.slice(curr + 1);\n  } else {\n    result += line.slice(start);\n  }\n\n  return result.slice(1); // drop extra \\n joiner\n} // Escapes a double-quoted string.\n\n\nfunction escapeString(string) {\n  var result = '';\n  var char, nextChar;\n  var escapeSeq;\n\n  for (var i = 0; i < string.length; i++) {\n    char = string.charCodeAt(i); // Check for surrogate pairs (reference Unicode 3.0 section \"3.7 Surrogates\").\n\n    if (char >= 0xD800 && char <= 0xDBFF\n    /* high surrogate */\n    ) {\n      nextChar = string.charCodeAt(i + 1);\n\n      if (nextChar >= 0xDC00 && nextChar <= 0xDFFF\n      /* low surrogate */\n      ) {\n        // Combine the surrogate pair and store it escaped.\n        result += encodeHex((char - 0xD800) * 0x400 + nextChar - 0xDC00 + 0x10000); // Advance index one extra since we already used that char here.\n\n        i++;\n        continue;\n      }\n    }\n\n    escapeSeq = ESCAPE_SEQUENCES[char];\n    result += !escapeSeq && isPrintable(char) ? string[i] : escapeSeq || encodeHex(char);\n  }\n\n  return result;\n}\n\nfunction writeFlowSequence(state, level, object) {\n  var _result = '',\n      _tag = state.tag,\n      index,\n      length;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    // Write only valid elements.\n    if (writeNode(state, level, object[index], false, false)) {\n      if (index !== 0) _result += ',' + (!state.condenseFlow ? ' ' : '');\n      _result += state.dump;\n    }\n  }\n\n  state.tag = _tag;\n  state.dump = '[' + _result + ']';\n}\n\nfunction writeBlockSequence(state, level, object, compact) {\n  var _result = '',\n      _tag = state.tag,\n      index,\n      length;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    // Write only valid elements.\n    if (writeNode(state, level + 1, object[index], true, true)) {\n      if (!compact || index !== 0) {\n        _result += generateNextLine(state, level);\n      }\n\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        _result += '-';\n      } else {\n        _result += '- ';\n      }\n\n      _result += state.dump;\n    }\n  }\n\n  state.tag = _tag;\n  state.dump = _result || '[]'; // Empty sequence if no valid values.\n}\n\nfunction writeFlowMapping(state, level, object) {\n  var _result = '',\n      _tag = state.tag,\n      objectKeyList = Object.keys(object),\n      index,\n      length,\n      objectKey,\n      objectValue,\n      pairBuffer;\n\n  for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n    pairBuffer = '';\n    if (index !== 0) pairBuffer += ', ';\n    if (state.condenseFlow) pairBuffer += '\"';\n    objectKey = objectKeyList[index];\n    objectValue = object[objectKey];\n\n    if (!writeNode(state, level, objectKey, false, false)) {\n      continue; // Skip this pair because of invalid key;\n    }\n\n    if (state.dump.length > 1024) pairBuffer += '? ';\n    pairBuffer += state.dump + (state.condenseFlow ? '\"' : '') + ':' + (state.condenseFlow ? '' : ' ');\n\n    if (!writeNode(state, level, objectValue, false, false)) {\n      continue; // Skip this pair because of invalid value.\n    }\n\n    pairBuffer += state.dump; // Both key and value are valid.\n\n    _result += pairBuffer;\n  }\n\n  state.tag = _tag;\n  state.dump = '{' + _result + '}';\n}\n\nfunction writeBlockMapping(state, level, object, compact) {\n  var _result = '',\n      _tag = state.tag,\n      objectKeyList = Object.keys(object),\n      index,\n      length,\n      objectKey,\n      objectValue,\n      explicitPair,\n      pairBuffer; // Allow sorting keys so that the output file is deterministic\n\n  if (state.sortKeys === true) {\n    // Default sorting\n    objectKeyList.sort();\n  } else if (typeof state.sortKeys === 'function') {\n    // Custom sort function\n    objectKeyList.sort(state.sortKeys);\n  } else if (state.sortKeys) {\n    // Something is wrong\n    throw new YAMLException('sortKeys must be a boolean or a function');\n  }\n\n  for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n    pairBuffer = '';\n\n    if (!compact || index !== 0) {\n      pairBuffer += generateNextLine(state, level);\n    }\n\n    objectKey = objectKeyList[index];\n    objectValue = object[objectKey];\n\n    if (!writeNode(state, level + 1, objectKey, true, true, true)) {\n      continue; // Skip this pair because of invalid key.\n    }\n\n    explicitPair = state.tag !== null && state.tag !== '?' || state.dump && state.dump.length > 1024;\n\n    if (explicitPair) {\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        pairBuffer += '?';\n      } else {\n        pairBuffer += '? ';\n      }\n    }\n\n    pairBuffer += state.dump;\n\n    if (explicitPair) {\n      pairBuffer += generateNextLine(state, level);\n    }\n\n    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {\n      continue; // Skip this pair because of invalid value.\n    }\n\n    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n      pairBuffer += ':';\n    } else {\n      pairBuffer += ': ';\n    }\n\n    pairBuffer += state.dump; // Both key and value are valid.\n\n    _result += pairBuffer;\n  }\n\n  state.tag = _tag;\n  state.dump = _result || '{}'; // Empty mapping if no valid pairs.\n}\n\nfunction detectType(state, object, explicit) {\n  var _result, typeList, index, length, type, style;\n\n  typeList = explicit ? state.explicitTypes : state.implicitTypes;\n\n  for (index = 0, length = typeList.length; index < length; index += 1) {\n    type = typeList[index];\n\n    if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === 'object' && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {\n      state.tag = explicit ? type.tag : '?';\n\n      if (type.represent) {\n        style = state.styleMap[type.tag] || type.defaultStyle;\n\n        if (_toString.call(type.represent) === '[object Function]') {\n          _result = type.represent(object, style);\n        } else if (_hasOwnProperty.call(type.represent, style)) {\n          _result = type.represent[style](object, style);\n        } else {\n          throw new YAMLException('!<' + type.tag + '> tag resolver accepts not \"' + style + '\" style');\n        }\n\n        state.dump = _result;\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n} // Serializes `object` and writes it to global `result`.\n// Returns true on success, or false on invalid object.\n//\n\n\nfunction writeNode(state, level, object, block, compact, iskey) {\n  state.tag = null;\n  state.dump = object;\n\n  if (!detectType(state, object, false)) {\n    detectType(state, object, true);\n  }\n\n  var type = _toString.call(state.dump);\n\n  if (block) {\n    block = state.flowLevel < 0 || state.flowLevel > level;\n  }\n\n  var objectOrArray = type === '[object Object]' || type === '[object Array]',\n      duplicateIndex,\n      duplicate;\n\n  if (objectOrArray) {\n    duplicateIndex = state.duplicates.indexOf(object);\n    duplicate = duplicateIndex !== -1;\n  }\n\n  if (state.tag !== null && state.tag !== '?' || duplicate || state.indent !== 2 && level > 0) {\n    compact = false;\n  }\n\n  if (duplicate && state.usedDuplicates[duplicateIndex]) {\n    state.dump = '*ref_' + duplicateIndex;\n  } else {\n    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {\n      state.usedDuplicates[duplicateIndex] = true;\n    }\n\n    if (type === '[object Object]') {\n      if (block && Object.keys(state.dump).length !== 0) {\n        writeBlockMapping(state, level, state.dump, compact);\n\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + state.dump;\n        }\n      } else {\n        writeFlowMapping(state, level, state.dump);\n\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n        }\n      }\n    } else if (type === '[object Array]') {\n      var arrayLevel = state.noArrayIndent && level > 0 ? level - 1 : level;\n\n      if (block && state.dump.length !== 0) {\n        writeBlockSequence(state, arrayLevel, state.dump, compact);\n\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + state.dump;\n        }\n      } else {\n        writeFlowSequence(state, arrayLevel, state.dump);\n\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n        }\n      }\n    } else if (type === '[object String]') {\n      if (state.tag !== '?') {\n        writeScalar(state, state.dump, level, iskey);\n      }\n    } else {\n      if (state.skipInvalid) return false;\n      throw new YAMLException('unacceptable kind of an object to dump ' + type);\n    }\n\n    if (state.tag !== null && state.tag !== '?') {\n      state.dump = '!<' + state.tag + '> ' + state.dump;\n    }\n  }\n\n  return true;\n}\n\nfunction getDuplicateReferences(object, state) {\n  var objects = [],\n      duplicatesIndexes = [],\n      index,\n      length;\n  inspectNode(object, objects, duplicatesIndexes);\n\n  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {\n    state.duplicates.push(objects[duplicatesIndexes[index]]);\n  }\n\n  state.usedDuplicates = new Array(length);\n}\n\nfunction inspectNode(object, objects, duplicatesIndexes) {\n  var objectKeyList, index, length;\n\n  if (object !== null && typeof object === 'object') {\n    index = objects.indexOf(object);\n\n    if (index !== -1) {\n      if (duplicatesIndexes.indexOf(index) === -1) {\n        duplicatesIndexes.push(index);\n      }\n    } else {\n      objects.push(object);\n\n      if (Array.isArray(object)) {\n        for (index = 0, length = object.length; index < length; index += 1) {\n          inspectNode(object[index], objects, duplicatesIndexes);\n        }\n      } else {\n        objectKeyList = Object.keys(object);\n\n        for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);\n        }\n      }\n    }\n  }\n}\n\nfunction dump(input, options) {\n  options = options || {};\n  var state = new State(options);\n  if (!state.noRefs) getDuplicateReferences(input, state);\n  if (writeNode(state, 0, input, true, true)) return state.dump + '\\n';\n  return '';\n}\n\nfunction safeDump(input, options) {\n  return dump(input, common.extend({\n    schema: DEFAULT_SAFE_SCHEMA\n  }, options));\n}\n\nmodule.exports.dump = dump;\nmodule.exports.safeDump = safeDump;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/dumper.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/exception.js":
/*!*****************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/exception.js ***!
  \*****************************************************************************************/
/***/ ((module) => {

"use strict";
eval("// YAML error class. http://stackoverflow.com/questions/8458984\n//\n\n\nfunction YAMLException(reason, mark) {\n  // Super constructor\n  Error.call(this);\n  this.name = 'YAMLException';\n  this.reason = reason;\n  this.mark = mark;\n  this.message = (this.reason || '(unknown reason)') + (this.mark ? ' ' + this.mark.toString() : ''); // Include stack trace in error object\n\n  if (Error.captureStackTrace) {\n    // Chrome and NodeJS\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    // FF, IE 10+ and Safari 6+. Fallback for others\n    this.stack = new Error().stack || '';\n  }\n} // Inherit from Error\n\n\nYAMLException.prototype = Object.create(Error.prototype);\nYAMLException.prototype.constructor = YAMLException;\n\nYAMLException.prototype.toString = function toString(compact) {\n  var result = this.name + ': ';\n  result += this.reason || '(unknown reason)';\n\n  if (!compact && this.mark) {\n    result += ' ' + this.mark.toString();\n  }\n\n  return result;\n};\n\nmodule.exports = YAMLException;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvZXhjZXB0aW9uLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDYTs7QUFFYixTQUFTQSxhQUFULENBQXVCQyxNQUF2QixFQUErQkMsSUFBL0IsRUFBcUM7QUFDbkM7QUFDQUMsRUFBQUEsS0FBSyxDQUFDQyxJQUFOLENBQVcsSUFBWDtBQUVBLE9BQUtDLElBQUwsR0FBWSxlQUFaO0FBQ0EsT0FBS0osTUFBTCxHQUFjQSxNQUFkO0FBQ0EsT0FBS0MsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsT0FBS0ksT0FBTCxHQUFlLENBQUMsS0FBS0wsTUFBTCxJQUFlLGtCQUFoQixLQUF1QyxLQUFLQyxJQUFMLEdBQVksTUFBTSxLQUFLQSxJQUFMLENBQVVLLFFBQVYsRUFBbEIsR0FBeUMsRUFBaEYsQ0FBZixDQVBtQyxDQVNuQzs7QUFDQSxNQUFJSixLQUFLLENBQUNLLGlCQUFWLEVBQTZCO0FBQzNCO0FBQ0FMLElBQUFBLEtBQUssQ0FBQ0ssaUJBQU4sQ0FBd0IsSUFBeEIsRUFBOEIsS0FBS0MsV0FBbkM7QUFDRCxHQUhELE1BR087QUFDTDtBQUNBLFNBQUtDLEtBQUwsR0FBYyxJQUFJUCxLQUFKLEVBQUQsQ0FBY08sS0FBZCxJQUF1QixFQUFwQztBQUNEO0FBQ0YsQyxDQUdEOzs7QUFDQVYsYUFBYSxDQUFDVyxTQUFkLEdBQTBCQyxNQUFNLENBQUNDLE1BQVAsQ0FBY1YsS0FBSyxDQUFDUSxTQUFwQixDQUExQjtBQUNBWCxhQUFhLENBQUNXLFNBQWQsQ0FBd0JGLFdBQXhCLEdBQXNDVCxhQUF0Qzs7QUFHQUEsYUFBYSxDQUFDVyxTQUFkLENBQXdCSixRQUF4QixHQUFtQyxTQUFTQSxRQUFULENBQWtCTyxPQUFsQixFQUEyQjtBQUM1RCxNQUFJQyxNQUFNLEdBQUcsS0FBS1YsSUFBTCxHQUFZLElBQXpCO0FBRUFVLEVBQUFBLE1BQU0sSUFBSSxLQUFLZCxNQUFMLElBQWUsa0JBQXpCOztBQUVBLE1BQUksQ0FBQ2EsT0FBRCxJQUFZLEtBQUtaLElBQXJCLEVBQTJCO0FBQ3pCYSxJQUFBQSxNQUFNLElBQUksTUFBTSxLQUFLYixJQUFMLENBQVVLLFFBQVYsRUFBaEI7QUFDRDs7QUFFRCxTQUFPUSxNQUFQO0FBQ0QsQ0FWRDs7QUFhQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCakIsYUFBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvZXhjZXB0aW9uLmpzPzgzZWIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gWUFNTCBlcnJvciBjbGFzcy4gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy84NDU4OTg0XG4vL1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBZQU1MRXhjZXB0aW9uKHJlYXNvbiwgbWFyaykge1xuICAvLyBTdXBlciBjb25zdHJ1Y3RvclxuICBFcnJvci5jYWxsKHRoaXMpO1xuXG4gIHRoaXMubmFtZSA9ICdZQU1MRXhjZXB0aW9uJztcbiAgdGhpcy5yZWFzb24gPSByZWFzb247XG4gIHRoaXMubWFyayA9IG1hcms7XG4gIHRoaXMubWVzc2FnZSA9ICh0aGlzLnJlYXNvbiB8fCAnKHVua25vd24gcmVhc29uKScpICsgKHRoaXMubWFyayA/ICcgJyArIHRoaXMubWFyay50b1N0cmluZygpIDogJycpO1xuXG4gIC8vIEluY2x1ZGUgc3RhY2sgdHJhY2UgaW4gZXJyb3Igb2JqZWN0XG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIC8vIENocm9tZSBhbmQgTm9kZUpTXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH0gZWxzZSB7XG4gICAgLy8gRkYsIElFIDEwKyBhbmQgU2FmYXJpIDYrLiBGYWxsYmFjayBmb3Igb3RoZXJzXG4gICAgdGhpcy5zdGFjayA9IChuZXcgRXJyb3IoKSkuc3RhY2sgfHwgJyc7XG4gIH1cbn1cblxuXG4vLyBJbmhlcml0IGZyb20gRXJyb3JcbllBTUxFeGNlcHRpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuWUFNTEV4Y2VwdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBZQU1MRXhjZXB0aW9uO1xuXG5cbllBTUxFeGNlcHRpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoY29tcGFjdCkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5uYW1lICsgJzogJztcblxuICByZXN1bHQgKz0gdGhpcy5yZWFzb24gfHwgJyh1bmtub3duIHJlYXNvbiknO1xuXG4gIGlmICghY29tcGFjdCAmJiB0aGlzLm1hcmspIHtcbiAgICByZXN1bHQgKz0gJyAnICsgdGhpcy5tYXJrLnRvU3RyaW5nKCk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFlBTUxFeGNlcHRpb247XG4iXSwibmFtZXMiOlsiWUFNTEV4Y2VwdGlvbiIsInJlYXNvbiIsIm1hcmsiLCJFcnJvciIsImNhbGwiLCJuYW1lIiwibWVzc2FnZSIsInRvU3RyaW5nIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJjb25zdHJ1Y3RvciIsInN0YWNrIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29tcGFjdCIsInJlc3VsdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/exception.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/loader.js":
/*!**************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/loader.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/*eslint-disable max-len,no-use-before-define*/\n\nvar common = __webpack_require__(/*! ./common */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/common.js\");\n\nvar YAMLException = __webpack_require__(/*! ./exception */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/exception.js\");\n\nvar Mark = __webpack_require__(/*! ./mark */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/mark.js\");\n\nvar DEFAULT_SAFE_SCHEMA = __webpack_require__(/*! ./schema/default_safe */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js\");\n\nvar DEFAULT_FULL_SCHEMA = __webpack_require__(/*! ./schema/default_full */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js\");\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar CONTEXT_FLOW_IN = 1;\nvar CONTEXT_FLOW_OUT = 2;\nvar CONTEXT_BLOCK_IN = 3;\nvar CONTEXT_BLOCK_OUT = 4;\nvar CHOMPING_CLIP = 1;\nvar CHOMPING_STRIP = 2;\nvar CHOMPING_KEEP = 3;\nvar PATTERN_NON_PRINTABLE = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x84\\x86-\\x9F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nvar PATTERN_NON_ASCII_LINE_BREAKS = /[\\x85\\u2028\\u2029]/;\nvar PATTERN_FLOW_INDICATORS = /[,\\[\\]\\{\\}]/;\nvar PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\\-]+!)$/i;\nvar PATTERN_TAG_URI = /^(?:!|[^,\\[\\]\\{\\}])(?:%[0-9a-f]{2}|[0-9a-z\\-#;\\/\\?:@&=\\+\\$,_\\.!~\\*'\\(\\)\\[\\]])*$/i;\n\nfunction _class(obj) {\n  return Object.prototype.toString.call(obj);\n}\n\nfunction is_EOL(c) {\n  return c === 0x0A\n  /* LF */\n  || c === 0x0D\n  /* CR */\n  ;\n}\n\nfunction is_WHITE_SPACE(c) {\n  return c === 0x09\n  /* Tab */\n  || c === 0x20\n  /* Space */\n  ;\n}\n\nfunction is_WS_OR_EOL(c) {\n  return c === 0x09\n  /* Tab */\n  || c === 0x20\n  /* Space */\n  || c === 0x0A\n  /* LF */\n  || c === 0x0D\n  /* CR */\n  ;\n}\n\nfunction is_FLOW_INDICATOR(c) {\n  return c === 0x2C\n  /* , */\n  || c === 0x5B\n  /* [ */\n  || c === 0x5D\n  /* ] */\n  || c === 0x7B\n  /* { */\n  || c === 0x7D\n  /* } */\n  ;\n}\n\nfunction fromHexCode(c) {\n  var lc;\n\n  if (0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  ) {\n    return c - 0x30;\n  }\n  /*eslint-disable no-bitwise*/\n\n\n  lc = c | 0x20;\n\n  if (0x61\n  /* a */\n  <= lc && lc <= 0x66\n  /* f */\n  ) {\n    return lc - 0x61 + 10;\n  }\n\n  return -1;\n}\n\nfunction escapedHexLen(c) {\n  if (c === 0x78\n  /* x */\n  ) {\n    return 2;\n  }\n\n  if (c === 0x75\n  /* u */\n  ) {\n    return 4;\n  }\n\n  if (c === 0x55\n  /* U */\n  ) {\n    return 8;\n  }\n\n  return 0;\n}\n\nfunction fromDecimalCode(c) {\n  if (0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  ) {\n    return c - 0x30;\n  }\n\n  return -1;\n}\n\nfunction simpleEscapeSequence(c) {\n  /* eslint-disable indent */\n  return c === 0x30\n  /* 0 */\n  ? '\\x00' : c === 0x61\n  /* a */\n  ? '\\x07' : c === 0x62\n  /* b */\n  ? '\\x08' : c === 0x74\n  /* t */\n  ? '\\x09' : c === 0x09\n  /* Tab */\n  ? '\\x09' : c === 0x6E\n  /* n */\n  ? '\\x0A' : c === 0x76\n  /* v */\n  ? '\\x0B' : c === 0x66\n  /* f */\n  ? '\\x0C' : c === 0x72\n  /* r */\n  ? '\\x0D' : c === 0x65\n  /* e */\n  ? '\\x1B' : c === 0x20\n  /* Space */\n  ? ' ' : c === 0x22\n  /* \" */\n  ? '\\x22' : c === 0x2F\n  /* / */\n  ? '/' : c === 0x5C\n  /* \\ */\n  ? '\\x5C' : c === 0x4E\n  /* N */\n  ? '\\x85' : c === 0x5F\n  /* _ */\n  ? '\\xA0' : c === 0x4C\n  /* L */\n  ? '\\u2028' : c === 0x50\n  /* P */\n  ? '\\u2029' : '';\n}\n\nfunction charFromCodepoint(c) {\n  if (c <= 0xFFFF) {\n    return String.fromCharCode(c);\n  } // Encode UTF-16 surrogate pair\n  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF\n\n\n  return String.fromCharCode((c - 0x010000 >> 10) + 0xD800, (c - 0x010000 & 0x03FF) + 0xDC00);\n}\n\nvar simpleEscapeCheck = new Array(256); // integer, for fast access\n\nvar simpleEscapeMap = new Array(256);\n\nfor (var i = 0; i < 256; i++) {\n  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;\n  simpleEscapeMap[i] = simpleEscapeSequence(i);\n}\n\nfunction State(input, options) {\n  this.input = input;\n  this.filename = options['filename'] || null;\n  this.schema = options['schema'] || DEFAULT_FULL_SCHEMA;\n  this.onWarning = options['onWarning'] || null;\n  this.legacy = options['legacy'] || false;\n  this.json = options['json'] || false;\n  this.listener = options['listener'] || null;\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.typeMap = this.schema.compiledTypeMap;\n  this.length = input.length;\n  this.position = 0;\n  this.line = 0;\n  this.lineStart = 0;\n  this.lineIndent = 0;\n  this.documents = [];\n  /*\n  this.version;\n  this.checkLineBreaks;\n  this.tagMap;\n  this.anchorMap;\n  this.tag;\n  this.anchor;\n  this.kind;\n  this.result;*/\n}\n\nfunction generateError(state, message) {\n  return new YAMLException(message, new Mark(state.filename, state.input, state.position, state.line, state.position - state.lineStart));\n}\n\nfunction throwError(state, message) {\n  throw generateError(state, message);\n}\n\nfunction throwWarning(state, message) {\n  if (state.onWarning) {\n    state.onWarning.call(null, generateError(state, message));\n  }\n}\n\nvar directiveHandlers = {\n  YAML: function handleYamlDirective(state, name, args) {\n    var match, major, minor;\n\n    if (state.version !== null) {\n      throwError(state, 'duplication of %YAML directive');\n    }\n\n    if (args.length !== 1) {\n      throwError(state, 'YAML directive accepts exactly one argument');\n    }\n\n    match = /^([0-9]+)\\.([0-9]+)$/.exec(args[0]);\n\n    if (match === null) {\n      throwError(state, 'ill-formed argument of the YAML directive');\n    }\n\n    major = parseInt(match[1], 10);\n    minor = parseInt(match[2], 10);\n\n    if (major !== 1) {\n      throwError(state, 'unacceptable YAML version of the document');\n    }\n\n    state.version = args[0];\n    state.checkLineBreaks = minor < 2;\n\n    if (minor !== 1 && minor !== 2) {\n      throwWarning(state, 'unsupported YAML version of the document');\n    }\n  },\n  TAG: function handleTagDirective(state, name, args) {\n    var handle, prefix;\n\n    if (args.length !== 2) {\n      throwError(state, 'TAG directive accepts exactly two arguments');\n    }\n\n    handle = args[0];\n    prefix = args[1];\n\n    if (!PATTERN_TAG_HANDLE.test(handle)) {\n      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');\n    }\n\n    if (_hasOwnProperty.call(state.tagMap, handle)) {\n      throwError(state, 'there is a previously declared suffix for \"' + handle + '\" tag handle');\n    }\n\n    if (!PATTERN_TAG_URI.test(prefix)) {\n      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');\n    }\n\n    state.tagMap[handle] = prefix;\n  }\n};\n\nfunction captureSegment(state, start, end, checkJson) {\n  var _position, _length, _character, _result;\n\n  if (start < end) {\n    _result = state.input.slice(start, end);\n\n    if (checkJson) {\n      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {\n        _character = _result.charCodeAt(_position);\n\n        if (!(_character === 0x09 || 0x20 <= _character && _character <= 0x10FFFF)) {\n          throwError(state, 'expected valid JSON character');\n        }\n      }\n    } else if (PATTERN_NON_PRINTABLE.test(_result)) {\n      throwError(state, 'the stream contains non-printable characters');\n    }\n\n    state.result += _result;\n  }\n}\n\nfunction mergeMappings(state, destination, source, overridableKeys) {\n  var sourceKeys, key, index, quantity;\n\n  if (!common.isObject(source)) {\n    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');\n  }\n\n  sourceKeys = Object.keys(source);\n\n  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {\n    key = sourceKeys[index];\n\n    if (!_hasOwnProperty.call(destination, key)) {\n      destination[key] = source[key];\n      overridableKeys[key] = true;\n    }\n  }\n}\n\nfunction storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {\n  var index, quantity; // The output is a plain object here, so keys can only be strings.\n  // We need to convert keyNode to a string, but doing so can hang the process\n  // (deeply nested arrays that explode exponentially using aliases).\n\n  if (Array.isArray(keyNode)) {\n    keyNode = Array.prototype.slice.call(keyNode);\n\n    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {\n      if (Array.isArray(keyNode[index])) {\n        throwError(state, 'nested arrays are not supported inside keys');\n      }\n\n      if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {\n        keyNode[index] = '[object Object]';\n      }\n    }\n  } // Avoid code execution in load() via toString property\n  // (still use its own toString for arrays, timestamps,\n  // and whatever user schema extensions happen to have @@toStringTag)\n\n\n  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {\n    keyNode = '[object Object]';\n  }\n\n  keyNode = String(keyNode);\n\n  if (_result === null) {\n    _result = {};\n  }\n\n  if (keyTag === 'tag:yaml.org,2002:merge') {\n    if (Array.isArray(valueNode)) {\n      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {\n        mergeMappings(state, _result, valueNode[index], overridableKeys);\n      }\n    } else {\n      mergeMappings(state, _result, valueNode, overridableKeys);\n    }\n  } else {\n    if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {\n      state.line = startLine || state.line;\n      state.position = startPos || state.position;\n      throwError(state, 'duplicated mapping key');\n    }\n\n    _result[keyNode] = valueNode;\n    delete overridableKeys[keyNode];\n  }\n\n  return _result;\n}\n\nfunction readLineBreak(state) {\n  var ch;\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x0A\n  /* LF */\n  ) {\n    state.position++;\n  } else if (ch === 0x0D\n  /* CR */\n  ) {\n    state.position++;\n\n    if (state.input.charCodeAt(state.position) === 0x0A\n    /* LF */\n    ) {\n      state.position++;\n    }\n  } else {\n    throwError(state, 'a line break is expected');\n  }\n\n  state.line += 1;\n  state.lineStart = state.position;\n}\n\nfunction skipSeparationSpace(state, allowComments, checkIndent) {\n  var lineBreaks = 0,\n      ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    while (is_WHITE_SPACE(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (allowComments && ch === 0x23\n    /* # */\n    ) {\n      do {\n        ch = state.input.charCodeAt(++state.position);\n      } while (ch !== 0x0A\n      /* LF */\n      && ch !== 0x0D\n      /* CR */\n      && ch !== 0);\n    }\n\n    if (is_EOL(ch)) {\n      readLineBreak(state);\n      ch = state.input.charCodeAt(state.position);\n      lineBreaks++;\n      state.lineIndent = 0;\n\n      while (ch === 0x20\n      /* Space */\n      ) {\n        state.lineIndent++;\n        ch = state.input.charCodeAt(++state.position);\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {\n    throwWarning(state, 'deficient indentation');\n  }\n\n  return lineBreaks;\n}\n\nfunction testDocumentSeparator(state) {\n  var _position = state.position,\n      ch;\n  ch = state.input.charCodeAt(_position); // Condition state.position === state.lineStart is tested\n  // in parent on each call, for efficiency. No needs to test here again.\n\n  if ((ch === 0x2D\n  /* - */\n  || ch === 0x2E\n  /* . */\n  ) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {\n    _position += 3;\n    ch = state.input.charCodeAt(_position);\n\n    if (ch === 0 || is_WS_OR_EOL(ch)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction writeFoldedLines(state, count) {\n  if (count === 1) {\n    state.result += ' ';\n  } else if (count > 1) {\n    state.result += common.repeat('\\n', count - 1);\n  }\n}\n\nfunction readPlainScalar(state, nodeIndent, withinFlowCollection) {\n  var preceding,\n      following,\n      captureStart,\n      captureEnd,\n      hasPendingContent,\n      _line,\n      _lineStart,\n      _lineIndent,\n      _kind = state.kind,\n      _result = state.result,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 0x23\n  /* # */\n  || ch === 0x26\n  /* & */\n  || ch === 0x2A\n  /* * */\n  || ch === 0x21\n  /* ! */\n  || ch === 0x7C\n  /* | */\n  || ch === 0x3E\n  /* > */\n  || ch === 0x27\n  /* ' */\n  || ch === 0x22\n  /* \" */\n  || ch === 0x25\n  /* % */\n  || ch === 0x40\n  /* @ */\n  || ch === 0x60\n  /* ` */\n  ) {\n    return false;\n  }\n\n  if (ch === 0x3F\n  /* ? */\n  || ch === 0x2D\n  /* - */\n  ) {\n    following = state.input.charCodeAt(state.position + 1);\n\n    if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {\n      return false;\n    }\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  captureStart = captureEnd = state.position;\n  hasPendingContent = false;\n\n  while (ch !== 0) {\n    if (ch === 0x3A\n    /* : */\n    ) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {\n        break;\n      }\n    } else if (ch === 0x23\n    /* # */\n    ) {\n      preceding = state.input.charCodeAt(state.position - 1);\n\n      if (is_WS_OR_EOL(preceding)) {\n        break;\n      }\n    } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {\n      break;\n    } else if (is_EOL(ch)) {\n      _line = state.line;\n      _lineStart = state.lineStart;\n      _lineIndent = state.lineIndent;\n      skipSeparationSpace(state, false, -1);\n\n      if (state.lineIndent >= nodeIndent) {\n        hasPendingContent = true;\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      } else {\n        state.position = captureEnd;\n        state.line = _line;\n        state.lineStart = _lineStart;\n        state.lineIndent = _lineIndent;\n        break;\n      }\n    }\n\n    if (hasPendingContent) {\n      captureSegment(state, captureStart, captureEnd, false);\n      writeFoldedLines(state, state.line - _line);\n      captureStart = captureEnd = state.position;\n      hasPendingContent = false;\n    }\n\n    if (!is_WHITE_SPACE(ch)) {\n      captureEnd = state.position + 1;\n    }\n\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  captureSegment(state, captureStart, captureEnd, false);\n\n  if (state.result) {\n    return true;\n  }\n\n  state.kind = _kind;\n  state.result = _result;\n  return false;\n}\n\nfunction readSingleQuotedScalar(state, nodeIndent) {\n  var ch, captureStart, captureEnd;\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x27\n  /* ' */\n  ) {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x27\n    /* ' */\n    ) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n\n      if (ch === 0x27\n      /* ' */\n      ) {\n        captureStart = state.position;\n        state.position++;\n        captureEnd = state.position;\n      } else {\n        return true;\n      }\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a single quoted scalar');\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a single quoted scalar');\n}\n\nfunction readDoubleQuotedScalar(state, nodeIndent) {\n  var captureStart, captureEnd, hexLength, hexResult, tmp, ch;\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x22\n  /* \" */\n  ) {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x22\n    /* \" */\n    ) {\n      captureSegment(state, captureStart, state.position, true);\n      state.position++;\n      return true;\n    } else if (ch === 0x5C\n    /* \\ */\n    ) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n\n      if (is_EOL(ch)) {\n        skipSeparationSpace(state, false, nodeIndent); // TODO: rework to inline fn with no type cast?\n      } else if (ch < 256 && simpleEscapeCheck[ch]) {\n        state.result += simpleEscapeMap[ch];\n        state.position++;\n      } else if ((tmp = escapedHexLen(ch)) > 0) {\n        hexLength = tmp;\n        hexResult = 0;\n\n        for (; hexLength > 0; hexLength--) {\n          ch = state.input.charCodeAt(++state.position);\n\n          if ((tmp = fromHexCode(ch)) >= 0) {\n            hexResult = (hexResult << 4) + tmp;\n          } else {\n            throwError(state, 'expected hexadecimal character');\n          }\n        }\n\n        state.result += charFromCodepoint(hexResult);\n        state.position++;\n      } else {\n        throwError(state, 'unknown escape sequence');\n      }\n\n      captureStart = captureEnd = state.position;\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a double quoted scalar');\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a double quoted scalar');\n}\n\nfunction readFlowCollection(state, nodeIndent) {\n  var readNext = true,\n      _line,\n      _tag = state.tag,\n      _result,\n      _anchor = state.anchor,\n      following,\n      terminator,\n      isPair,\n      isExplicitPair,\n      isMapping,\n      overridableKeys = {},\n      keyNode,\n      keyTag,\n      valueNode,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x5B\n  /* [ */\n  ) {\n    terminator = 0x5D;\n    /* ] */\n\n    isMapping = false;\n    _result = [];\n  } else if (ch === 0x7B\n  /* { */\n  ) {\n    terminator = 0x7D;\n    /* } */\n\n    isMapping = true;\n    _result = {};\n  } else {\n    return false;\n  }\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  while (ch !== 0) {\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === terminator) {\n      state.position++;\n      state.tag = _tag;\n      state.anchor = _anchor;\n      state.kind = isMapping ? 'mapping' : 'sequence';\n      state.result = _result;\n      return true;\n    } else if (!readNext) {\n      throwError(state, 'missed comma between flow collection entries');\n    }\n\n    keyTag = keyNode = valueNode = null;\n    isPair = isExplicitPair = false;\n\n    if (ch === 0x3F\n    /* ? */\n    ) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following)) {\n        isPair = isExplicitPair = true;\n        state.position++;\n        skipSeparationSpace(state, true, nodeIndent);\n      }\n    }\n\n    _line = state.line;\n    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n    keyTag = state.tag;\n    keyNode = state.result;\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n\n    if ((isExplicitPair || state.line === _line) && ch === 0x3A\n    /* : */\n    ) {\n      isPair = true;\n      ch = state.input.charCodeAt(++state.position);\n      skipSeparationSpace(state, true, nodeIndent);\n      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n      valueNode = state.result;\n    }\n\n    if (isMapping) {\n      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);\n    } else if (isPair) {\n      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));\n    } else {\n      _result.push(keyNode);\n    }\n\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === 0x2C\n    /* , */\n    ) {\n      readNext = true;\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      readNext = false;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a flow collection');\n}\n\nfunction readBlockScalar(state, nodeIndent) {\n  var captureStart,\n      folding,\n      chomping = CHOMPING_CLIP,\n      didReadContent = false,\n      detectedIndent = false,\n      textIndent = nodeIndent,\n      emptyLines = 0,\n      atMoreIndented = false,\n      tmp,\n      ch;\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x7C\n  /* | */\n  ) {\n    folding = false;\n  } else if (ch === 0x3E\n  /* > */\n  ) {\n    folding = true;\n  } else {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n\n  while (ch !== 0) {\n    ch = state.input.charCodeAt(++state.position);\n\n    if (ch === 0x2B\n    /* + */\n    || ch === 0x2D\n    /* - */\n    ) {\n      if (CHOMPING_CLIP === chomping) {\n        chomping = ch === 0x2B\n        /* + */\n        ? CHOMPING_KEEP : CHOMPING_STRIP;\n      } else {\n        throwError(state, 'repeat of a chomping mode identifier');\n      }\n    } else if ((tmp = fromDecimalCode(ch)) >= 0) {\n      if (tmp === 0) {\n        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');\n      } else if (!detectedIndent) {\n        textIndent = nodeIndent + tmp - 1;\n        detectedIndent = true;\n      } else {\n        throwError(state, 'repeat of an indentation width identifier');\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (is_WHITE_SPACE(ch)) {\n    do {\n      ch = state.input.charCodeAt(++state.position);\n    } while (is_WHITE_SPACE(ch));\n\n    if (ch === 0x23\n    /* # */\n    ) {\n      do {\n        ch = state.input.charCodeAt(++state.position);\n      } while (!is_EOL(ch) && ch !== 0);\n    }\n  }\n\n  while (ch !== 0) {\n    readLineBreak(state);\n    state.lineIndent = 0;\n    ch = state.input.charCodeAt(state.position);\n\n    while ((!detectedIndent || state.lineIndent < textIndent) && ch === 0x20\n    /* Space */\n    ) {\n      state.lineIndent++;\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (!detectedIndent && state.lineIndent > textIndent) {\n      textIndent = state.lineIndent;\n    }\n\n    if (is_EOL(ch)) {\n      emptyLines++;\n      continue;\n    } // End of the scalar.\n\n\n    if (state.lineIndent < textIndent) {\n      // Perform the chomping.\n      if (chomping === CHOMPING_KEEP) {\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n      } else if (chomping === CHOMPING_CLIP) {\n        if (didReadContent) {\n          // i.e. only if the scalar is not empty.\n          state.result += '\\n';\n        }\n      } // Break this `while` cycle and go to the funciton's epilogue.\n\n\n      break;\n    } // Folded style: use fancy rules to handle line breaks.\n\n\n    if (folding) {\n      // Lines starting with white space characters (more-indented lines) are not folded.\n      if (is_WHITE_SPACE(ch)) {\n        atMoreIndented = true; // except for the first content line (cf. Example 8.1)\n\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines); // End of more-indented block.\n      } else if (atMoreIndented) {\n        atMoreIndented = false;\n        state.result += common.repeat('\\n', emptyLines + 1); // Just one line break - perceive as the same line.\n      } else if (emptyLines === 0) {\n        if (didReadContent) {\n          // i.e. only if we have already read some scalar content.\n          state.result += ' ';\n        } // Several line breaks - perceive as different lines.\n\n      } else {\n        state.result += common.repeat('\\n', emptyLines);\n      } // Literal style: just add exact number of line breaks between content lines.\n\n    } else {\n      // Keep all line breaks except the header line break.\n      state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n    }\n\n    didReadContent = true;\n    detectedIndent = true;\n    emptyLines = 0;\n    captureStart = state.position;\n\n    while (!is_EOL(ch) && ch !== 0) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    captureSegment(state, captureStart, state.position, false);\n  }\n\n  return true;\n}\n\nfunction readBlockSequence(state, nodeIndent) {\n  var _line,\n      _tag = state.tag,\n      _anchor = state.anchor,\n      _result = [],\n      following,\n      detected = false,\n      ch;\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    if (ch !== 0x2D\n    /* - */\n    ) {\n      break;\n    }\n\n    following = state.input.charCodeAt(state.position + 1);\n\n    if (!is_WS_OR_EOL(following)) {\n      break;\n    }\n\n    detected = true;\n    state.position++;\n\n    if (skipSeparationSpace(state, true, -1)) {\n      if (state.lineIndent <= nodeIndent) {\n        _result.push(null);\n\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      }\n    }\n\n    _line = state.line;\n    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);\n\n    _result.push(state.result);\n\n    skipSeparationSpace(state, true, -1);\n    ch = state.input.charCodeAt(state.position);\n\n    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {\n      throwError(state, 'bad indentation of a sequence entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'sequence';\n    state.result = _result;\n    return true;\n  }\n\n  return false;\n}\n\nfunction readBlockMapping(state, nodeIndent, flowIndent) {\n  var following,\n      allowCompact,\n      _line,\n      _pos,\n      _tag = state.tag,\n      _anchor = state.anchor,\n      _result = {},\n      overridableKeys = {},\n      keyTag = null,\n      keyNode = null,\n      valueNode = null,\n      atExplicitKey = false,\n      detected = false,\n      ch;\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    following = state.input.charCodeAt(state.position + 1);\n    _line = state.line; // Save the current line.\n\n    _pos = state.position; //\n    // Explicit notation case. There are two separate blocks:\n    // first for the key (denoted by \"?\") and second for the value (denoted by \":\")\n    //\n\n    if ((ch === 0x3F\n    /* ? */\n    || ch === 0x3A\n    /* : */\n    ) && is_WS_OR_EOL(following)) {\n      if (ch === 0x3F\n      /* ? */\n      ) {\n        if (atExplicitKey) {\n          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);\n          keyTag = keyNode = valueNode = null;\n        }\n\n        detected = true;\n        atExplicitKey = true;\n        allowCompact = true;\n      } else if (atExplicitKey) {\n        // i.e. 0x3A/* : */ === character after the explicit key.\n        atExplicitKey = false;\n        allowCompact = true;\n      } else {\n        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');\n      }\n\n      state.position += 1;\n      ch = following; //\n      // Implicit notation case. Flow-style node as the key first, then \":\", and the value.\n      //\n    } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {\n      if (state.line === _line) {\n        ch = state.input.charCodeAt(state.position);\n\n        while (is_WHITE_SPACE(ch)) {\n          ch = state.input.charCodeAt(++state.position);\n        }\n\n        if (ch === 0x3A\n        /* : */\n        ) {\n          ch = state.input.charCodeAt(++state.position);\n\n          if (!is_WS_OR_EOL(ch)) {\n            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');\n          }\n\n          if (atExplicitKey) {\n            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);\n            keyTag = keyNode = valueNode = null;\n          }\n\n          detected = true;\n          atExplicitKey = false;\n          allowCompact = false;\n          keyTag = state.tag;\n          keyNode = state.result;\n        } else if (detected) {\n          throwError(state, 'can not read an implicit mapping pair; a colon is missed');\n        } else {\n          state.tag = _tag;\n          state.anchor = _anchor;\n          return true; // Keep the result of `composeNode`.\n        }\n      } else if (detected) {\n        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');\n      } else {\n        state.tag = _tag;\n        state.anchor = _anchor;\n        return true; // Keep the result of `composeNode`.\n      }\n    } else {\n      break; // Reading is done. Go to the epilogue.\n    } //\n    // Common reading code for both explicit and implicit notations.\n    //\n\n\n    if (state.line === _line || state.lineIndent > nodeIndent) {\n      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {\n        if (atExplicitKey) {\n          keyNode = state.result;\n        } else {\n          valueNode = state.result;\n        }\n      }\n\n      if (!atExplicitKey) {\n        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);\n        keyTag = keyNode = valueNode = null;\n      }\n\n      skipSeparationSpace(state, true, -1);\n      ch = state.input.charCodeAt(state.position);\n    }\n\n    if (state.lineIndent > nodeIndent && ch !== 0) {\n      throwError(state, 'bad indentation of a mapping entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  } //\n  // Epilogue.\n  //\n  // Special case: last mapping's node contains only the key in explicit notation.\n\n\n  if (atExplicitKey) {\n    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);\n  } // Expose the resulting mapping.\n\n\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'mapping';\n    state.result = _result;\n  }\n\n  return detected;\n}\n\nfunction readTagProperty(state) {\n  var _position,\n      isVerbatim = false,\n      isNamed = false,\n      tagHandle,\n      tagName,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x21\n  /* ! */\n  ) return false;\n\n  if (state.tag !== null) {\n    throwError(state, 'duplication of a tag property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  if (ch === 0x3C\n  /* < */\n  ) {\n    isVerbatim = true;\n    ch = state.input.charCodeAt(++state.position);\n  } else if (ch === 0x21\n  /* ! */\n  ) {\n    isNamed = true;\n    tagHandle = '!!';\n    ch = state.input.charCodeAt(++state.position);\n  } else {\n    tagHandle = '!';\n  }\n\n  _position = state.position;\n\n  if (isVerbatim) {\n    do {\n      ch = state.input.charCodeAt(++state.position);\n    } while (ch !== 0 && ch !== 0x3E\n    /* > */\n    );\n\n    if (state.position < state.length) {\n      tagName = state.input.slice(_position, state.position);\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      throwError(state, 'unexpected end of the stream within a verbatim tag');\n    }\n  } else {\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n      if (ch === 0x21\n      /* ! */\n      ) {\n        if (!isNamed) {\n          tagHandle = state.input.slice(_position - 1, state.position + 1);\n\n          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {\n            throwError(state, 'named tag handle cannot contain such characters');\n          }\n\n          isNamed = true;\n          _position = state.position + 1;\n        } else {\n          throwError(state, 'tag suffix cannot contain exclamation marks');\n        }\n      }\n\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    tagName = state.input.slice(_position, state.position);\n\n    if (PATTERN_FLOW_INDICATORS.test(tagName)) {\n      throwError(state, 'tag suffix cannot contain flow indicator characters');\n    }\n  }\n\n  if (tagName && !PATTERN_TAG_URI.test(tagName)) {\n    throwError(state, 'tag name cannot contain such characters: ' + tagName);\n  }\n\n  if (isVerbatim) {\n    state.tag = tagName;\n  } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {\n    state.tag = state.tagMap[tagHandle] + tagName;\n  } else if (tagHandle === '!') {\n    state.tag = '!' + tagName;\n  } else if (tagHandle === '!!') {\n    state.tag = 'tag:yaml.org,2002:' + tagName;\n  } else {\n    throwError(state, 'undeclared tag handle \"' + tagHandle + '\"');\n  }\n\n  return true;\n}\n\nfunction readAnchorProperty(state) {\n  var _position, ch;\n\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x26\n  /* & */\n  ) return false;\n\n  if (state.anchor !== null) {\n    throwError(state, 'duplication of an anchor property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state, 'name of an anchor node must contain at least one character');\n  }\n\n  state.anchor = state.input.slice(_position, state.position);\n  return true;\n}\n\nfunction readAlias(state) {\n  var _position, alias, ch;\n\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x2A\n  /* * */\n  ) return false;\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state, 'name of an alias node must contain at least one character');\n  }\n\n  alias = state.input.slice(_position, state.position);\n\n  if (!_hasOwnProperty.call(state.anchorMap, alias)) {\n    throwError(state, 'unidentified alias \"' + alias + '\"');\n  }\n\n  state.result = state.anchorMap[alias];\n  skipSeparationSpace(state, true, -1);\n  return true;\n}\n\nfunction composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {\n  var allowBlockStyles,\n      allowBlockScalars,\n      allowBlockCollections,\n      indentStatus = 1,\n      // 1: this>parent, 0: this=parent, -1: this<parent\n  atNewLine = false,\n      hasContent = false,\n      typeIndex,\n      typeQuantity,\n      type,\n      flowIndent,\n      blockIndent;\n\n  if (state.listener !== null) {\n    state.listener('open', state);\n  }\n\n  state.tag = null;\n  state.anchor = null;\n  state.kind = null;\n  state.result = null;\n  allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;\n\n  if (allowToSeek) {\n    if (skipSeparationSpace(state, true, -1)) {\n      atNewLine = true;\n\n      if (state.lineIndent > parentIndent) {\n        indentStatus = 1;\n      } else if (state.lineIndent === parentIndent) {\n        indentStatus = 0;\n      } else if (state.lineIndent < parentIndent) {\n        indentStatus = -1;\n      }\n    }\n  }\n\n  if (indentStatus === 1) {\n    while (readTagProperty(state) || readAnchorProperty(state)) {\n      if (skipSeparationSpace(state, true, -1)) {\n        atNewLine = true;\n        allowBlockCollections = allowBlockStyles;\n\n        if (state.lineIndent > parentIndent) {\n          indentStatus = 1;\n        } else if (state.lineIndent === parentIndent) {\n          indentStatus = 0;\n        } else if (state.lineIndent < parentIndent) {\n          indentStatus = -1;\n        }\n      } else {\n        allowBlockCollections = false;\n      }\n    }\n  }\n\n  if (allowBlockCollections) {\n    allowBlockCollections = atNewLine || allowCompact;\n  }\n\n  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {\n    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {\n      flowIndent = parentIndent;\n    } else {\n      flowIndent = parentIndent + 1;\n    }\n\n    blockIndent = state.position - state.lineStart;\n\n    if (indentStatus === 1) {\n      if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {\n        hasContent = true;\n      } else {\n        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {\n          hasContent = true;\n        } else if (readAlias(state)) {\n          hasContent = true;\n\n          if (state.tag !== null || state.anchor !== null) {\n            throwError(state, 'alias node should not have any properties');\n          }\n        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {\n          hasContent = true;\n\n          if (state.tag === null) {\n            state.tag = '?';\n          }\n        }\n\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    } else if (indentStatus === 0) {\n      // Special case: block sequences are allowed to have same indentation level as the parent.\n      // http://www.yaml.org/spec/1.2/spec.html#id2799784\n      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);\n    }\n  }\n\n  if (state.tag !== null && state.tag !== '!') {\n    if (state.tag === '?') {\n      // Implicit resolving is not allowed for non-scalar types, and '?'\n      // non-specific tag is only automatically assigned to plain scalars.\n      //\n      // We only need to check kind conformity in case user explicitly assigns '?'\n      // tag, for example like this: \"!<?> [0]\"\n      //\n      if (state.result !== null && state.kind !== 'scalar') {\n        throwError(state, 'unacceptable node kind for !<?> tag; it should be \"scalar\", not \"' + state.kind + '\"');\n      }\n\n      for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {\n        type = state.implicitTypes[typeIndex];\n\n        if (type.resolve(state.result)) {\n          // `state.result` updated in resolver if matched\n          state.result = type.construct(state.result);\n          state.tag = type.tag;\n\n          if (state.anchor !== null) {\n            state.anchorMap[state.anchor] = state.result;\n          }\n\n          break;\n        }\n      }\n    } else if (_hasOwnProperty.call(state.typeMap[state.kind || 'fallback'], state.tag)) {\n      type = state.typeMap[state.kind || 'fallback'][state.tag];\n\n      if (state.result !== null && type.kind !== state.kind) {\n        throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be \"' + type.kind + '\", not \"' + state.kind + '\"');\n      }\n\n      if (!type.resolve(state.result)) {\n        // `state.result` updated in resolver if matched\n        throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');\n      } else {\n        state.result = type.construct(state.result);\n\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    } else {\n      throwError(state, 'unknown tag !<' + state.tag + '>');\n    }\n  }\n\n  if (state.listener !== null) {\n    state.listener('close', state);\n  }\n\n  return state.tag !== null || state.anchor !== null || hasContent;\n}\n\nfunction readDocument(state) {\n  var documentStart = state.position,\n      _position,\n      directiveName,\n      directiveArgs,\n      hasDirectives = false,\n      ch;\n\n  state.version = null;\n  state.checkLineBreaks = state.legacy;\n  state.tagMap = {};\n  state.anchorMap = {};\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    skipSeparationSpace(state, true, -1);\n    ch = state.input.charCodeAt(state.position);\n\n    if (state.lineIndent > 0 || ch !== 0x25\n    /* % */\n    ) {\n      break;\n    }\n\n    hasDirectives = true;\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    directiveName = state.input.slice(_position, state.position);\n    directiveArgs = [];\n\n    if (directiveName.length < 1) {\n      throwError(state, 'directive name must not be less than one character in length');\n    }\n\n    while (ch !== 0) {\n      while (is_WHITE_SPACE(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      if (ch === 0x23\n      /* # */\n      ) {\n        do {\n          ch = state.input.charCodeAt(++state.position);\n        } while (ch !== 0 && !is_EOL(ch));\n\n        break;\n      }\n\n      if (is_EOL(ch)) break;\n      _position = state.position;\n\n      while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      directiveArgs.push(state.input.slice(_position, state.position));\n    }\n\n    if (ch !== 0) readLineBreak(state);\n\n    if (_hasOwnProperty.call(directiveHandlers, directiveName)) {\n      directiveHandlers[directiveName](state, directiveName, directiveArgs);\n    } else {\n      throwWarning(state, 'unknown document directive \"' + directiveName + '\"');\n    }\n  }\n\n  skipSeparationSpace(state, true, -1);\n\n  if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 0x2D\n  /* - */\n  && state.input.charCodeAt(state.position + 1) === 0x2D\n  /* - */\n  && state.input.charCodeAt(state.position + 2) === 0x2D\n  /* - */\n  ) {\n    state.position += 3;\n    skipSeparationSpace(state, true, -1);\n  } else if (hasDirectives) {\n    throwError(state, 'directives end mark is expected');\n  }\n\n  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);\n  skipSeparationSpace(state, true, -1);\n\n  if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {\n    throwWarning(state, 'non-ASCII line breaks are interpreted as content');\n  }\n\n  state.documents.push(state.result);\n\n  if (state.position === state.lineStart && testDocumentSeparator(state)) {\n    if (state.input.charCodeAt(state.position) === 0x2E\n    /* . */\n    ) {\n      state.position += 3;\n      skipSeparationSpace(state, true, -1);\n    }\n\n    return;\n  }\n\n  if (state.position < state.length - 1) {\n    throwError(state, 'end of the stream or a document separator is expected');\n  } else {\n    return;\n  }\n}\n\nfunction loadDocuments(input, options) {\n  input = String(input);\n  options = options || {};\n\n  if (input.length !== 0) {\n    // Add tailing `\\n` if not exists\n    if (input.charCodeAt(input.length - 1) !== 0x0A\n    /* LF */\n    && input.charCodeAt(input.length - 1) !== 0x0D\n    /* CR */\n    ) {\n      input += '\\n';\n    } // Strip BOM\n\n\n    if (input.charCodeAt(0) === 0xFEFF) {\n      input = input.slice(1);\n    }\n  }\n\n  var state = new State(input, options);\n  var nullpos = input.indexOf('\\0');\n\n  if (nullpos !== -1) {\n    state.position = nullpos;\n    throwError(state, 'null byte is not allowed in input');\n  } // Use 0 as string terminator. That significantly simplifies bounds check.\n\n\n  state.input += '\\0';\n\n  while (state.input.charCodeAt(state.position) === 0x20\n  /* Space */\n  ) {\n    state.lineIndent += 1;\n    state.position += 1;\n  }\n\n  while (state.position < state.length - 1) {\n    readDocument(state);\n  }\n\n  return state.documents;\n}\n\nfunction loadAll(input, iterator, options) {\n  if (iterator !== null && typeof iterator === 'object' && typeof options === 'undefined') {\n    options = iterator;\n    iterator = null;\n  }\n\n  var documents = loadDocuments(input, options);\n\n  if (typeof iterator !== 'function') {\n    return documents;\n  }\n\n  for (var index = 0, length = documents.length; index < length; index += 1) {\n    iterator(documents[index]);\n  }\n}\n\nfunction load(input, options) {\n  var documents = loadDocuments(input, options);\n\n  if (documents.length === 0) {\n    /*eslint-disable no-undefined*/\n    return undefined;\n  } else if (documents.length === 1) {\n    return documents[0];\n  }\n\n  throw new YAMLException('expected a single document in the stream, but found more');\n}\n\nfunction safeLoadAll(input, iterator, options) {\n  if (typeof iterator === 'object' && iterator !== null && typeof options === 'undefined') {\n    options = iterator;\n    iterator = null;\n  }\n\n  return loadAll(input, iterator, common.extend({\n    schema: DEFAULT_SAFE_SCHEMA\n  }, options));\n}\n\nfunction safeLoad(input, options) {\n  return load(input, common.extend({\n    schema: DEFAULT_SAFE_SCHEMA\n  }, options));\n}\n\nmodule.exports.loadAll = loadAll;\nmodule.exports.load = load;\nmodule.exports.safeLoadAll = safeLoadAll;\nmodule.exports.safeLoad = safeLoad;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/loader.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/mark.js":
/*!************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/mark.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar common = __webpack_require__(/*! ./common */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/common.js\");\n\nfunction Mark(name, buffer, position, line, column) {\n  this.name = name;\n  this.buffer = buffer;\n  this.position = position;\n  this.line = line;\n  this.column = column;\n}\n\nMark.prototype.getSnippet = function getSnippet(indent, maxLength) {\n  var head, start, tail, end, snippet;\n  if (!this.buffer) return null;\n  indent = indent || 4;\n  maxLength = maxLength || 75;\n  head = '';\n  start = this.position;\n\n  while (start > 0 && '\\x00\\r\\n\\x85\\u2028\\u2029'.indexOf(this.buffer.charAt(start - 1)) === -1) {\n    start -= 1;\n\n    if (this.position - start > maxLength / 2 - 1) {\n      head = ' ... ';\n      start += 5;\n      break;\n    }\n  }\n\n  tail = '';\n  end = this.position;\n\n  while (end < this.buffer.length && '\\x00\\r\\n\\x85\\u2028\\u2029'.indexOf(this.buffer.charAt(end)) === -1) {\n    end += 1;\n\n    if (end - this.position > maxLength / 2 - 1) {\n      tail = ' ... ';\n      end -= 5;\n      break;\n    }\n  }\n\n  snippet = this.buffer.slice(start, end);\n  return common.repeat(' ', indent) + head + snippet + tail + '\\n' + common.repeat(' ', indent + this.position - start + head.length) + '^';\n};\n\nMark.prototype.toString = function toString(compact) {\n  var snippet,\n      where = '';\n\n  if (this.name) {\n    where += 'in \"' + this.name + '\" ';\n  }\n\n  where += 'at line ' + (this.line + 1) + ', column ' + (this.column + 1);\n\n  if (!compact) {\n    snippet = this.getSnippet();\n\n    if (snippet) {\n      where += ':\\n' + snippet;\n    }\n  }\n\n  return where;\n};\n\nmodule.exports = Mark;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvbWFyay5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFHYixJQUFJQSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsZ0dBQUQsQ0FBcEI7O0FBR0EsU0FBU0MsSUFBVCxDQUFjQyxJQUFkLEVBQW9CQyxNQUFwQixFQUE0QkMsUUFBNUIsRUFBc0NDLElBQXRDLEVBQTRDQyxNQUE1QyxFQUFvRDtBQUNsRCxPQUFLSixJQUFMLEdBQWdCQSxJQUFoQjtBQUNBLE9BQUtDLE1BQUwsR0FBZ0JBLE1BQWhCO0FBQ0EsT0FBS0MsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxPQUFLQyxJQUFMLEdBQWdCQSxJQUFoQjtBQUNBLE9BQUtDLE1BQUwsR0FBZ0JBLE1BQWhCO0FBQ0Q7O0FBR0RMLElBQUksQ0FBQ00sU0FBTCxDQUFlQyxVQUFmLEdBQTRCLFNBQVNBLFVBQVQsQ0FBb0JDLE1BQXBCLEVBQTRCQyxTQUE1QixFQUF1QztBQUNqRSxNQUFJQyxJQUFKLEVBQVVDLEtBQVYsRUFBaUJDLElBQWpCLEVBQXVCQyxHQUF2QixFQUE0QkMsT0FBNUI7QUFFQSxNQUFJLENBQUMsS0FBS1osTUFBVixFQUFrQixPQUFPLElBQVA7QUFFbEJNLEVBQUFBLE1BQU0sR0FBR0EsTUFBTSxJQUFJLENBQW5CO0FBQ0FDLEVBQUFBLFNBQVMsR0FBR0EsU0FBUyxJQUFJLEVBQXpCO0FBRUFDLEVBQUFBLElBQUksR0FBRyxFQUFQO0FBQ0FDLEVBQUFBLEtBQUssR0FBRyxLQUFLUixRQUFiOztBQUVBLFNBQU9RLEtBQUssR0FBRyxDQUFSLElBQWEsMkJBQTJCSSxPQUEzQixDQUFtQyxLQUFLYixNQUFMLENBQVljLE1BQVosQ0FBbUJMLEtBQUssR0FBRyxDQUEzQixDQUFuQyxNQUFzRSxDQUFDLENBQTNGLEVBQThGO0FBQzVGQSxJQUFBQSxLQUFLLElBQUksQ0FBVDs7QUFDQSxRQUFJLEtBQUtSLFFBQUwsR0FBZ0JRLEtBQWhCLEdBQXlCRixTQUFTLEdBQUcsQ0FBWixHQUFnQixDQUE3QyxFQUFpRDtBQUMvQ0MsTUFBQUEsSUFBSSxHQUFHLE9BQVA7QUFDQUMsTUFBQUEsS0FBSyxJQUFJLENBQVQ7QUFDQTtBQUNEO0FBQ0Y7O0FBRURDLEVBQUFBLElBQUksR0FBRyxFQUFQO0FBQ0FDLEVBQUFBLEdBQUcsR0FBRyxLQUFLVixRQUFYOztBQUVBLFNBQU9VLEdBQUcsR0FBRyxLQUFLWCxNQUFMLENBQVllLE1BQWxCLElBQTRCLDJCQUEyQkYsT0FBM0IsQ0FBbUMsS0FBS2IsTUFBTCxDQUFZYyxNQUFaLENBQW1CSCxHQUFuQixDQUFuQyxNQUFnRSxDQUFDLENBQXBHLEVBQXVHO0FBQ3JHQSxJQUFBQSxHQUFHLElBQUksQ0FBUDs7QUFDQSxRQUFJQSxHQUFHLEdBQUcsS0FBS1YsUUFBWCxHQUF1Qk0sU0FBUyxHQUFHLENBQVosR0FBZ0IsQ0FBM0MsRUFBK0M7QUFDN0NHLE1BQUFBLElBQUksR0FBRyxPQUFQO0FBQ0FDLE1BQUFBLEdBQUcsSUFBSSxDQUFQO0FBQ0E7QUFDRDtBQUNGOztBQUVEQyxFQUFBQSxPQUFPLEdBQUcsS0FBS1osTUFBTCxDQUFZZ0IsS0FBWixDQUFrQlAsS0FBbEIsRUFBeUJFLEdBQXpCLENBQVY7QUFFQSxTQUFPZixNQUFNLENBQUNxQixNQUFQLENBQWMsR0FBZCxFQUFtQlgsTUFBbkIsSUFBNkJFLElBQTdCLEdBQW9DSSxPQUFwQyxHQUE4Q0YsSUFBOUMsR0FBcUQsSUFBckQsR0FDQWQsTUFBTSxDQUFDcUIsTUFBUCxDQUFjLEdBQWQsRUFBbUJYLE1BQU0sR0FBRyxLQUFLTCxRQUFkLEdBQXlCUSxLQUF6QixHQUFpQ0QsSUFBSSxDQUFDTyxNQUF6RCxDQURBLEdBQ21FLEdBRDFFO0FBRUQsQ0FwQ0Q7O0FBdUNBakIsSUFBSSxDQUFDTSxTQUFMLENBQWVjLFFBQWYsR0FBMEIsU0FBU0EsUUFBVCxDQUFrQkMsT0FBbEIsRUFBMkI7QUFDbkQsTUFBSVAsT0FBSjtBQUFBLE1BQWFRLEtBQUssR0FBRyxFQUFyQjs7QUFFQSxNQUFJLEtBQUtyQixJQUFULEVBQWU7QUFDYnFCLElBQUFBLEtBQUssSUFBSSxTQUFTLEtBQUtyQixJQUFkLEdBQXFCLElBQTlCO0FBQ0Q7O0FBRURxQixFQUFBQSxLQUFLLElBQUksY0FBYyxLQUFLbEIsSUFBTCxHQUFZLENBQTFCLElBQStCLFdBQS9CLElBQThDLEtBQUtDLE1BQUwsR0FBYyxDQUE1RCxDQUFUOztBQUVBLE1BQUksQ0FBQ2dCLE9BQUwsRUFBYztBQUNaUCxJQUFBQSxPQUFPLEdBQUcsS0FBS1AsVUFBTCxFQUFWOztBQUVBLFFBQUlPLE9BQUosRUFBYTtBQUNYUSxNQUFBQSxLQUFLLElBQUksUUFBUVIsT0FBakI7QUFDRDtBQUNGOztBQUVELFNBQU9RLEtBQVA7QUFDRCxDQWxCRDs7QUFxQkFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnhCLElBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4uL3NoYXJlZC9ub2RlX21vZHVsZXMvZnJvbnQtbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL21hcmsuanM/ODA5NyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cblxudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG5cblxuZnVuY3Rpb24gTWFyayhuYW1lLCBidWZmZXIsIHBvc2l0aW9uLCBsaW5lLCBjb2x1bW4pIHtcbiAgdGhpcy5uYW1lICAgICA9IG5hbWU7XG4gIHRoaXMuYnVmZmVyICAgPSBidWZmZXI7XG4gIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgdGhpcy5saW5lICAgICA9IGxpbmU7XG4gIHRoaXMuY29sdW1uICAgPSBjb2x1bW47XG59XG5cblxuTWFyay5wcm90b3R5cGUuZ2V0U25pcHBldCA9IGZ1bmN0aW9uIGdldFNuaXBwZXQoaW5kZW50LCBtYXhMZW5ndGgpIHtcbiAgdmFyIGhlYWQsIHN0YXJ0LCB0YWlsLCBlbmQsIHNuaXBwZXQ7XG5cbiAgaWYgKCF0aGlzLmJ1ZmZlcikgcmV0dXJuIG51bGw7XG5cbiAgaW5kZW50ID0gaW5kZW50IHx8IDQ7XG4gIG1heExlbmd0aCA9IG1heExlbmd0aCB8fCA3NTtcblxuICBoZWFkID0gJyc7XG4gIHN0YXJ0ID0gdGhpcy5wb3NpdGlvbjtcblxuICB3aGlsZSAoc3RhcnQgPiAwICYmICdcXHgwMFxcclxcblxceDg1XFx1MjAyOFxcdTIwMjknLmluZGV4T2YodGhpcy5idWZmZXIuY2hhckF0KHN0YXJ0IC0gMSkpID09PSAtMSkge1xuICAgIHN0YXJ0IC09IDE7XG4gICAgaWYgKHRoaXMucG9zaXRpb24gLSBzdGFydCA+IChtYXhMZW5ndGggLyAyIC0gMSkpIHtcbiAgICAgIGhlYWQgPSAnIC4uLiAnO1xuICAgICAgc3RhcnQgKz0gNTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHRhaWwgPSAnJztcbiAgZW5kID0gdGhpcy5wb3NpdGlvbjtcblxuICB3aGlsZSAoZW5kIDwgdGhpcy5idWZmZXIubGVuZ3RoICYmICdcXHgwMFxcclxcblxceDg1XFx1MjAyOFxcdTIwMjknLmluZGV4T2YodGhpcy5idWZmZXIuY2hhckF0KGVuZCkpID09PSAtMSkge1xuICAgIGVuZCArPSAxO1xuICAgIGlmIChlbmQgLSB0aGlzLnBvc2l0aW9uID4gKG1heExlbmd0aCAvIDIgLSAxKSkge1xuICAgICAgdGFpbCA9ICcgLi4uICc7XG4gICAgICBlbmQgLT0gNTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHNuaXBwZXQgPSB0aGlzLmJ1ZmZlci5zbGljZShzdGFydCwgZW5kKTtcblxuICByZXR1cm4gY29tbW9uLnJlcGVhdCgnICcsIGluZGVudCkgKyBoZWFkICsgc25pcHBldCArIHRhaWwgKyAnXFxuJyArXG4gICAgICAgICBjb21tb24ucmVwZWF0KCcgJywgaW5kZW50ICsgdGhpcy5wb3NpdGlvbiAtIHN0YXJ0ICsgaGVhZC5sZW5ndGgpICsgJ14nO1xufTtcblxuXG5NYXJrLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKGNvbXBhY3QpIHtcbiAgdmFyIHNuaXBwZXQsIHdoZXJlID0gJyc7XG5cbiAgaWYgKHRoaXMubmFtZSkge1xuICAgIHdoZXJlICs9ICdpbiBcIicgKyB0aGlzLm5hbWUgKyAnXCIgJztcbiAgfVxuXG4gIHdoZXJlICs9ICdhdCBsaW5lICcgKyAodGhpcy5saW5lICsgMSkgKyAnLCBjb2x1bW4gJyArICh0aGlzLmNvbHVtbiArIDEpO1xuXG4gIGlmICghY29tcGFjdCkge1xuICAgIHNuaXBwZXQgPSB0aGlzLmdldFNuaXBwZXQoKTtcblxuICAgIGlmIChzbmlwcGV0KSB7XG4gICAgICB3aGVyZSArPSAnOlxcbicgKyBzbmlwcGV0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB3aGVyZTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBNYXJrO1xuIl0sIm5hbWVzIjpbImNvbW1vbiIsInJlcXVpcmUiLCJNYXJrIiwibmFtZSIsImJ1ZmZlciIsInBvc2l0aW9uIiwibGluZSIsImNvbHVtbiIsInByb3RvdHlwZSIsImdldFNuaXBwZXQiLCJpbmRlbnQiLCJtYXhMZW5ndGgiLCJoZWFkIiwic3RhcnQiLCJ0YWlsIiwiZW5kIiwic25pcHBldCIsImluZGV4T2YiLCJjaGFyQXQiLCJsZW5ndGgiLCJzbGljZSIsInJlcGVhdCIsInRvU3RyaW5nIiwiY29tcGFjdCIsIndoZXJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/mark.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema.js":
/*!**************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/*eslint-disable max-len*/\n\nvar common = __webpack_require__(/*! ./common */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/common.js\");\n\nvar YAMLException = __webpack_require__(/*! ./exception */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/exception.js\");\n\nvar Type = __webpack_require__(/*! ./type */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\n\nfunction compileList(schema, name, result) {\n  var exclude = [];\n  schema.include.forEach(function (includedSchema) {\n    result = compileList(includedSchema, name, result);\n  });\n  schema[name].forEach(function (currentType) {\n    result.forEach(function (previousType, previousIndex) {\n      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {\n        exclude.push(previousIndex);\n      }\n    });\n    result.push(currentType);\n  });\n  return result.filter(function (type, index) {\n    return exclude.indexOf(index) === -1;\n  });\n}\n\nfunction\n  /* lists... */\ncompileMap() {\n  var result = {\n    scalar: {},\n    sequence: {},\n    mapping: {},\n    fallback: {}\n  },\n      index,\n      length;\n\n  function collectType(type) {\n    result[type.kind][type.tag] = result['fallback'][type.tag] = type;\n  }\n\n  for (index = 0, length = arguments.length; index < length; index += 1) {\n    arguments[index].forEach(collectType);\n  }\n\n  return result;\n}\n\nfunction Schema(definition) {\n  this.include = definition.include || [];\n  this.implicit = definition.implicit || [];\n  this.explicit = definition.explicit || [];\n  this.implicit.forEach(function (type) {\n    if (type.loadKind && type.loadKind !== 'scalar') {\n      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');\n    }\n  });\n  this.compiledImplicit = compileList(this, 'implicit', []);\n  this.compiledExplicit = compileList(this, 'explicit', []);\n  this.compiledTypeMap = compileMap(this.compiledImplicit, this.compiledExplicit);\n}\n\nSchema.DEFAULT = null;\n\nSchema.create = function createSchema() {\n  var schemas, types;\n\n  switch (arguments.length) {\n    case 1:\n      schemas = Schema.DEFAULT;\n      types = arguments[0];\n      break;\n\n    case 2:\n      schemas = arguments[0];\n      types = arguments[1];\n      break;\n\n    default:\n      throw new YAMLException('Wrong number of arguments for Schema.create function');\n  }\n\n  schemas = common.toArray(schemas);\n  types = common.toArray(types);\n\n  if (!schemas.every(function (schema) {\n    return schema instanceof Schema;\n  })) {\n    throw new YAMLException('Specified list of super schemas (or a single Schema object) contains a non-Schema object.');\n  }\n\n  if (!types.every(function (type) {\n    return type instanceof Type;\n  })) {\n    throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n  }\n\n  return new Schema({\n    include: schemas,\n    explicit: types\n  });\n};\n\nmodule.exports = Schema;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/core.js":
/*!*******************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/core.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Standard YAML's Core schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2804923\n//\n// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.\n// So, Core schema has no distinctions from JSON schema is JS-YAML.\n\n\nvar Schema = __webpack_require__(/*! ../schema */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema.js\");\n\nmodule.exports = new Schema({\n  include: [__webpack_require__(/*! ./json */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/json.js\")]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvc2NoZW1hL2NvcmUuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdhOztBQUdiLElBQUlBLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQyxpR0FBRCxDQUFwQjs7QUFHQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLElBQUlILE1BQUosQ0FBVztBQUMxQkksRUFBQUEsT0FBTyxFQUFFLENBQ1BILG1CQUFPLENBQUMsbUdBQUQsQ0FEQTtBQURpQixDQUFYLENBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4uL3NoYXJlZC9ub2RlX21vZHVsZXMvZnJvbnQtbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3NjaGVtYS9jb3JlLmpzPzg5YTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU3RhbmRhcmQgWUFNTCdzIENvcmUgc2NoZW1hLlxuLy8gaHR0cDovL3d3dy55YW1sLm9yZy9zcGVjLzEuMi9zcGVjLmh0bWwjaWQyODA0OTIzXG4vL1xuLy8gTk9URTogSlMtWUFNTCBkb2VzIG5vdCBzdXBwb3J0IHNjaGVtYS1zcGVjaWZpYyB0YWcgcmVzb2x1dGlvbiByZXN0cmljdGlvbnMuXG4vLyBTbywgQ29yZSBzY2hlbWEgaGFzIG5vIGRpc3RpbmN0aW9ucyBmcm9tIEpTT04gc2NoZW1hIGlzIEpTLVlBTUwuXG5cblxuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBTY2hlbWEgPSByZXF1aXJlKCcuLi9zY2hlbWEnKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBTY2hlbWEoe1xuICBpbmNsdWRlOiBbXG4gICAgcmVxdWlyZSgnLi9qc29uJylcbiAgXVxufSk7XG4iXSwibmFtZXMiOlsiU2NoZW1hIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbmNsdWRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/core.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js":
/*!***************************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js ***!
  \***************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// JS-YAML's default schema for `load` function.\n// It is not described in the YAML specification.\n//\n// This schema is based on JS-YAML's default safe schema and includes\n// JavaScript-specific types: !!js/undefined, !!js/regexp and !!js/function.\n//\n// Also this schema is used as default base schema at `Schema.create` function.\n\n\nvar Schema = __webpack_require__(/*! ../schema */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema.js\");\n\nmodule.exports = Schema.DEFAULT = new Schema({\n  include: [__webpack_require__(/*! ./default_safe */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js\")],\n  explicit: [__webpack_require__(/*! ../type/js/undefined */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/js/undefined.js\"), __webpack_require__(/*! ../type/js/regexp */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/js/regexp.js\"), __webpack_require__(/*! ../type/js/function */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/js/function.js\")]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvc2NoZW1hL2RlZmF1bHRfZnVsbC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdhOztBQUdiLElBQUlBLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQyxpR0FBRCxDQUFwQjs7QUFHQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCSCxNQUFNLENBQUNJLE9BQVAsR0FBaUIsSUFBSUosTUFBSixDQUFXO0FBQzNDSyxFQUFBQSxPQUFPLEVBQUUsQ0FDUEosbUJBQU8sQ0FBQyxtSEFBRCxDQURBLENBRGtDO0FBSTNDSyxFQUFBQSxRQUFRLEVBQUUsQ0FDUkwsbUJBQU8sQ0FBQyx1SEFBRCxDQURDLEVBRVJBLG1CQUFPLENBQUMsaUhBQUQsQ0FGQyxFQUdSQSxtQkFBTyxDQUFDLHFIQUFELENBSEM7QUFKaUMsQ0FBWCxDQUFsQyIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uLi9zaGFyZWQvbm9kZV9tb2R1bGVzL2Zyb250LW1hdHRlci9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9zY2hlbWEvZGVmYXVsdF9mdWxsLmpzPzI3ZTEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSlMtWUFNTCdzIGRlZmF1bHQgc2NoZW1hIGZvciBgbG9hZGAgZnVuY3Rpb24uXG4vLyBJdCBpcyBub3QgZGVzY3JpYmVkIGluIHRoZSBZQU1MIHNwZWNpZmljYXRpb24uXG4vL1xuLy8gVGhpcyBzY2hlbWEgaXMgYmFzZWQgb24gSlMtWUFNTCdzIGRlZmF1bHQgc2FmZSBzY2hlbWEgYW5kIGluY2x1ZGVzXG4vLyBKYXZhU2NyaXB0LXNwZWNpZmljIHR5cGVzOiAhIWpzL3VuZGVmaW5lZCwgISFqcy9yZWdleHAgYW5kICEhanMvZnVuY3Rpb24uXG4vL1xuLy8gQWxzbyB0aGlzIHNjaGVtYSBpcyB1c2VkIGFzIGRlZmF1bHQgYmFzZSBzY2hlbWEgYXQgYFNjaGVtYS5jcmVhdGVgIGZ1bmN0aW9uLlxuXG5cbid1c2Ugc3RyaWN0JztcblxuXG52YXIgU2NoZW1hID0gcmVxdWlyZSgnLi4vc2NoZW1hJyk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBTY2hlbWEuREVGQVVMVCA9IG5ldyBTY2hlbWEoe1xuICBpbmNsdWRlOiBbXG4gICAgcmVxdWlyZSgnLi9kZWZhdWx0X3NhZmUnKVxuICBdLFxuICBleHBsaWNpdDogW1xuICAgIHJlcXVpcmUoJy4uL3R5cGUvanMvdW5kZWZpbmVkJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9qcy9yZWdleHAnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL2pzL2Z1bmN0aW9uJylcbiAgXVxufSk7XG4iXSwibmFtZXMiOlsiU2NoZW1hIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJERUZBVUxUIiwiaW5jbHVkZSIsImV4cGxpY2l0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js":
/*!***************************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js ***!
  \***************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// JS-YAML's default schema for `safeLoad` function.\n// It is not described in the YAML specification.\n//\n// This schema is based on standard YAML's Core schema and includes most of\n// extra types described at YAML tag repository. (http://yaml.org/type/)\n\n\nvar Schema = __webpack_require__(/*! ../schema */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema.js\");\n\nmodule.exports = new Schema({\n  include: [__webpack_require__(/*! ./core */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/core.js\")],\n  implicit: [__webpack_require__(/*! ../type/timestamp */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/timestamp.js\"), __webpack_require__(/*! ../type/merge */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/merge.js\")],\n  explicit: [__webpack_require__(/*! ../type/binary */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/binary.js\"), __webpack_require__(/*! ../type/omap */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/omap.js\"), __webpack_require__(/*! ../type/pairs */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/pairs.js\"), __webpack_require__(/*! ../type/set */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/set.js\")]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvc2NoZW1hL2RlZmF1bHRfc2FmZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR2E7O0FBR2IsSUFBSUEsTUFBTSxHQUFHQyxtQkFBTyxDQUFDLGlHQUFELENBQXBCOztBQUdBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsSUFBSUgsTUFBSixDQUFXO0FBQzFCSSxFQUFBQSxPQUFPLEVBQUUsQ0FDUEgsbUJBQU8sQ0FBQyxtR0FBRCxDQURBLENBRGlCO0FBSTFCSSxFQUFBQSxRQUFRLEVBQUUsQ0FDUkosbUJBQU8sQ0FBQyxpSEFBRCxDQURDLEVBRVJBLG1CQUFPLENBQUMseUdBQUQsQ0FGQyxDQUpnQjtBQVExQkssRUFBQUEsUUFBUSxFQUFFLENBQ1JMLG1CQUFPLENBQUMsMkdBQUQsQ0FEQyxFQUVSQSxtQkFBTyxDQUFDLHVHQUFELENBRkMsRUFHUkEsbUJBQU8sQ0FBQyx5R0FBRCxDQUhDLEVBSVJBLG1CQUFPLENBQUMscUdBQUQsQ0FKQztBQVJnQixDQUFYLENBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4uL3NoYXJlZC9ub2RlX21vZHVsZXMvZnJvbnQtbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3NjaGVtYS9kZWZhdWx0X3NhZmUuanM/NThmMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBKUy1ZQU1MJ3MgZGVmYXVsdCBzY2hlbWEgZm9yIGBzYWZlTG9hZGAgZnVuY3Rpb24uXG4vLyBJdCBpcyBub3QgZGVzY3JpYmVkIGluIHRoZSBZQU1MIHNwZWNpZmljYXRpb24uXG4vL1xuLy8gVGhpcyBzY2hlbWEgaXMgYmFzZWQgb24gc3RhbmRhcmQgWUFNTCdzIENvcmUgc2NoZW1hIGFuZCBpbmNsdWRlcyBtb3N0IG9mXG4vLyBleHRyYSB0eXBlcyBkZXNjcmliZWQgYXQgWUFNTCB0YWcgcmVwb3NpdG9yeS4gKGh0dHA6Ly95YW1sLm9yZy90eXBlLylcblxuXG4ndXNlIHN0cmljdCc7XG5cblxudmFyIFNjaGVtYSA9IHJlcXVpcmUoJy4uL3NjaGVtYScpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFNjaGVtYSh7XG4gIGluY2x1ZGU6IFtcbiAgICByZXF1aXJlKCcuL2NvcmUnKVxuICBdLFxuICBpbXBsaWNpdDogW1xuICAgIHJlcXVpcmUoJy4uL3R5cGUvdGltZXN0YW1wJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9tZXJnZScpXG4gIF0sXG4gIGV4cGxpY2l0OiBbXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9iaW5hcnknKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL29tYXAnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL3BhaXJzJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9zZXQnKVxuICBdXG59KTtcbiJdLCJuYW1lcyI6WyJTY2hlbWEiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImluY2x1ZGUiLCJpbXBsaWNpdCIsImV4cGxpY2l0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js":
/*!***********************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js ***!
  \***********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Standard YAML's Failsafe schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2802346\n\n\nvar Schema = __webpack_require__(/*! ../schema */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema.js\");\n\nmodule.exports = new Schema({\n  explicit: [__webpack_require__(/*! ../type/str */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/str.js\"), __webpack_require__(/*! ../type/seq */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/seq.js\"), __webpack_require__(/*! ../type/map */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/map.js\")]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvc2NoZW1hL2ZhaWxzYWZlLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFHYTs7QUFHYixJQUFJQSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsaUdBQUQsQ0FBcEI7O0FBR0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixJQUFJSCxNQUFKLENBQVc7QUFDMUJJLEVBQUFBLFFBQVEsRUFBRSxDQUNSSCxtQkFBTyxDQUFDLHFHQUFELENBREMsRUFFUkEsbUJBQU8sQ0FBQyxxR0FBRCxDQUZDLEVBR1JBLG1CQUFPLENBQUMscUdBQUQsQ0FIQztBQURnQixDQUFYLENBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4uL3NoYXJlZC9ub2RlX21vZHVsZXMvZnJvbnQtbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3NjaGVtYS9mYWlsc2FmZS5qcz9mMWYzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFN0YW5kYXJkIFlBTUwncyBGYWlsc2FmZSBzY2hlbWEuXG4vLyBodHRwOi8vd3d3LnlhbWwub3JnL3NwZWMvMS4yL3NwZWMuaHRtbCNpZDI4MDIzNDZcblxuXG4ndXNlIHN0cmljdCc7XG5cblxudmFyIFNjaGVtYSA9IHJlcXVpcmUoJy4uL3NjaGVtYScpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFNjaGVtYSh7XG4gIGV4cGxpY2l0OiBbXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9zdHInKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL3NlcScpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvbWFwJylcbiAgXVxufSk7XG4iXSwibmFtZXMiOlsiU2NoZW1hIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJleHBsaWNpdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/json.js":
/*!*******************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/json.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Standard YAML's JSON schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2803231\n//\n// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.\n// So, this schema is not such strict as defined in the YAML specification.\n// It allows numbers in binary notaion, use `Null` and `NULL` as `null`, etc.\n\n\nvar Schema = __webpack_require__(/*! ../schema */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema.js\");\n\nmodule.exports = new Schema({\n  include: [__webpack_require__(/*! ./failsafe */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js\")],\n  implicit: [__webpack_require__(/*! ../type/null */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/null.js\"), __webpack_require__(/*! ../type/bool */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/bool.js\"), __webpack_require__(/*! ../type/int */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/int.js\"), __webpack_require__(/*! ../type/float */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/float.js\")]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvc2NoZW1hL2pzb24uanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR2E7O0FBR2IsSUFBSUEsTUFBTSxHQUFHQyxtQkFBTyxDQUFDLGlHQUFELENBQXBCOztBQUdBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsSUFBSUgsTUFBSixDQUFXO0FBQzFCSSxFQUFBQSxPQUFPLEVBQUUsQ0FDUEgsbUJBQU8sQ0FBQywyR0FBRCxDQURBLENBRGlCO0FBSTFCSSxFQUFBQSxRQUFRLEVBQUUsQ0FDUkosbUJBQU8sQ0FBQyx1R0FBRCxDQURDLEVBRVJBLG1CQUFPLENBQUMsdUdBQUQsQ0FGQyxFQUdSQSxtQkFBTyxDQUFDLHFHQUFELENBSEMsRUFJUkEsbUJBQU8sQ0FBQyx5R0FBRCxDQUpDO0FBSmdCLENBQVgsQ0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvc2NoZW1hL2pzb24uanM/NzJlOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTdGFuZGFyZCBZQU1MJ3MgSlNPTiBzY2hlbWEuXG4vLyBodHRwOi8vd3d3LnlhbWwub3JnL3NwZWMvMS4yL3NwZWMuaHRtbCNpZDI4MDMyMzFcbi8vXG4vLyBOT1RFOiBKUy1ZQU1MIGRvZXMgbm90IHN1cHBvcnQgc2NoZW1hLXNwZWNpZmljIHRhZyByZXNvbHV0aW9uIHJlc3RyaWN0aW9ucy5cbi8vIFNvLCB0aGlzIHNjaGVtYSBpcyBub3Qgc3VjaCBzdHJpY3QgYXMgZGVmaW5lZCBpbiB0aGUgWUFNTCBzcGVjaWZpY2F0aW9uLlxuLy8gSXQgYWxsb3dzIG51bWJlcnMgaW4gYmluYXJ5IG5vdGFpb24sIHVzZSBgTnVsbGAgYW5kIGBOVUxMYCBhcyBgbnVsbGAsIGV0Yy5cblxuXG4ndXNlIHN0cmljdCc7XG5cblxudmFyIFNjaGVtYSA9IHJlcXVpcmUoJy4uL3NjaGVtYScpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFNjaGVtYSh7XG4gIGluY2x1ZGU6IFtcbiAgICByZXF1aXJlKCcuL2ZhaWxzYWZlJylcbiAgXSxcbiAgaW1wbGljaXQ6IFtcbiAgICByZXF1aXJlKCcuLi90eXBlL251bGwnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL2Jvb2wnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL2ludCcpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvZmxvYXQnKVxuICBdXG59KTtcbiJdLCJuYW1lcyI6WyJTY2hlbWEiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImluY2x1ZGUiLCJpbXBsaWNpdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/json.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js":
/*!************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar YAMLException = __webpack_require__(/*! ./exception */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/exception.js\");\n\nvar TYPE_CONSTRUCTOR_OPTIONS = ['kind', 'resolve', 'construct', 'instanceOf', 'predicate', 'represent', 'defaultStyle', 'styleAliases'];\nvar YAML_NODE_KINDS = ['scalar', 'sequence', 'mapping'];\n\nfunction compileStyleAliases(map) {\n  var result = {};\n\n  if (map !== null) {\n    Object.keys(map).forEach(function (style) {\n      map[style].forEach(function (alias) {\n        result[String(alias)] = style;\n      });\n    });\n  }\n\n  return result;\n}\n\nfunction Type(tag, options) {\n  options = options || {};\n  Object.keys(options).forEach(function (name) {\n    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {\n      throw new YAMLException('Unknown option \"' + name + '\" is met in definition of \"' + tag + '\" YAML type.');\n    }\n  }); // TODO: Add tag format check.\n\n  this.tag = tag;\n  this.kind = options['kind'] || null;\n\n  this.resolve = options['resolve'] || function () {\n    return true;\n  };\n\n  this.construct = options['construct'] || function (data) {\n    return data;\n  };\n\n  this.instanceOf = options['instanceOf'] || null;\n  this.predicate = options['predicate'] || null;\n  this.represent = options['represent'] || null;\n  this.defaultStyle = options['defaultStyle'] || null;\n  this.styleAliases = compileStyleAliases(options['styleAliases'] || null);\n\n  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {\n    throw new YAMLException('Unknown kind \"' + this.kind + '\" is specified for \"' + tag + '\" YAML type.');\n  }\n}\n\nmodule.exports = Type;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxhQUFhLEdBQUdDLG1CQUFPLENBQUMsc0dBQUQsQ0FBM0I7O0FBRUEsSUFBSUMsd0JBQXdCLEdBQUcsQ0FDN0IsTUFENkIsRUFFN0IsU0FGNkIsRUFHN0IsV0FINkIsRUFJN0IsWUFKNkIsRUFLN0IsV0FMNkIsRUFNN0IsV0FONkIsRUFPN0IsY0FQNkIsRUFRN0IsY0FSNkIsQ0FBL0I7QUFXQSxJQUFJQyxlQUFlLEdBQUcsQ0FDcEIsUUFEb0IsRUFFcEIsVUFGb0IsRUFHcEIsU0FIb0IsQ0FBdEI7O0FBTUEsU0FBU0MsbUJBQVQsQ0FBNkJDLEdBQTdCLEVBQWtDO0FBQ2hDLE1BQUlDLE1BQU0sR0FBRyxFQUFiOztBQUVBLE1BQUlELEdBQUcsS0FBSyxJQUFaLEVBQWtCO0FBQ2hCRSxJQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWUgsR0FBWixFQUFpQkksT0FBakIsQ0FBeUIsVUFBVUMsS0FBVixFQUFpQjtBQUN4Q0wsTUFBQUEsR0FBRyxDQUFDSyxLQUFELENBQUgsQ0FBV0QsT0FBWCxDQUFtQixVQUFVRSxLQUFWLEVBQWlCO0FBQ2xDTCxRQUFBQSxNQUFNLENBQUNNLE1BQU0sQ0FBQ0QsS0FBRCxDQUFQLENBQU4sR0FBd0JELEtBQXhCO0FBQ0QsT0FGRDtBQUdELEtBSkQ7QUFLRDs7QUFFRCxTQUFPSixNQUFQO0FBQ0Q7O0FBRUQsU0FBU08sSUFBVCxDQUFjQyxHQUFkLEVBQW1CQyxPQUFuQixFQUE0QjtBQUMxQkEsRUFBQUEsT0FBTyxHQUFHQSxPQUFPLElBQUksRUFBckI7QUFFQVIsRUFBQUEsTUFBTSxDQUFDQyxJQUFQLENBQVlPLE9BQVosRUFBcUJOLE9BQXJCLENBQTZCLFVBQVVPLElBQVYsRUFBZ0I7QUFDM0MsUUFBSWQsd0JBQXdCLENBQUNlLE9BQXpCLENBQWlDRCxJQUFqQyxNQUEyQyxDQUFDLENBQWhELEVBQW1EO0FBQ2pELFlBQU0sSUFBSWhCLGFBQUosQ0FBa0IscUJBQXFCZ0IsSUFBckIsR0FBNEIsNkJBQTVCLEdBQTRERixHQUE1RCxHQUFrRSxjQUFwRixDQUFOO0FBQ0Q7QUFDRixHQUpELEVBSDBCLENBUzFCOztBQUNBLE9BQUtBLEdBQUwsR0FBb0JBLEdBQXBCO0FBQ0EsT0FBS0ksSUFBTCxHQUFvQkgsT0FBTyxDQUFDLE1BQUQsQ0FBUCxJQUEyQixJQUEvQzs7QUFDQSxPQUFLSSxPQUFMLEdBQW9CSixPQUFPLENBQUMsU0FBRCxDQUFQLElBQTJCLFlBQVk7QUFBRSxXQUFPLElBQVA7QUFBYyxHQUEzRTs7QUFDQSxPQUFLSyxTQUFMLEdBQW9CTCxPQUFPLENBQUMsV0FBRCxDQUFQLElBQTJCLFVBQVVNLElBQVYsRUFBZ0I7QUFBRSxXQUFPQSxJQUFQO0FBQWMsR0FBL0U7O0FBQ0EsT0FBS0MsVUFBTCxHQUFvQlAsT0FBTyxDQUFDLFlBQUQsQ0FBUCxJQUEyQixJQUEvQztBQUNBLE9BQUtRLFNBQUwsR0FBb0JSLE9BQU8sQ0FBQyxXQUFELENBQVAsSUFBMkIsSUFBL0M7QUFDQSxPQUFLUyxTQUFMLEdBQW9CVCxPQUFPLENBQUMsV0FBRCxDQUFQLElBQTJCLElBQS9DO0FBQ0EsT0FBS1UsWUFBTCxHQUFvQlYsT0FBTyxDQUFDLGNBQUQsQ0FBUCxJQUEyQixJQUEvQztBQUNBLE9BQUtXLFlBQUwsR0FBb0J0QixtQkFBbUIsQ0FBQ1csT0FBTyxDQUFDLGNBQUQsQ0FBUCxJQUEyQixJQUE1QixDQUF2Qzs7QUFFQSxNQUFJWixlQUFlLENBQUNjLE9BQWhCLENBQXdCLEtBQUtDLElBQTdCLE1BQXVDLENBQUMsQ0FBNUMsRUFBK0M7QUFDN0MsVUFBTSxJQUFJbEIsYUFBSixDQUFrQixtQkFBbUIsS0FBS2tCLElBQXhCLEdBQStCLHNCQUEvQixHQUF3REosR0FBeEQsR0FBOEQsY0FBaEYsQ0FBTjtBQUNEO0FBQ0Y7O0FBRURhLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmYsSUFBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS5qcz84YmEwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFlBTUxFeGNlcHRpb24gPSByZXF1aXJlKCcuL2V4Y2VwdGlvbicpO1xuXG52YXIgVFlQRV9DT05TVFJVQ1RPUl9PUFRJT05TID0gW1xuICAna2luZCcsXG4gICdyZXNvbHZlJyxcbiAgJ2NvbnN0cnVjdCcsXG4gICdpbnN0YW5jZU9mJyxcbiAgJ3ByZWRpY2F0ZScsXG4gICdyZXByZXNlbnQnLFxuICAnZGVmYXVsdFN0eWxlJyxcbiAgJ3N0eWxlQWxpYXNlcydcbl07XG5cbnZhciBZQU1MX05PREVfS0lORFMgPSBbXG4gICdzY2FsYXInLFxuICAnc2VxdWVuY2UnLFxuICAnbWFwcGluZydcbl07XG5cbmZ1bmN0aW9uIGNvbXBpbGVTdHlsZUFsaWFzZXMobWFwKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcblxuICBpZiAobWFwICE9PSBudWxsKSB7XG4gICAgT2JqZWN0LmtleXMobWFwKS5mb3JFYWNoKGZ1bmN0aW9uIChzdHlsZSkge1xuICAgICAgbWFwW3N0eWxlXS5mb3JFYWNoKGZ1bmN0aW9uIChhbGlhcykge1xuICAgICAgICByZXN1bHRbU3RyaW5nKGFsaWFzKV0gPSBzdHlsZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gVHlwZSh0YWcsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgT2JqZWN0LmtleXMob3B0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmIChUWVBFX0NPTlNUUlVDVE9SX09QVElPTlMuaW5kZXhPZihuYW1lKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCdVbmtub3duIG9wdGlvbiBcIicgKyBuYW1lICsgJ1wiIGlzIG1ldCBpbiBkZWZpbml0aW9uIG9mIFwiJyArIHRhZyArICdcIiBZQU1MIHR5cGUuJyk7XG4gICAgfVxuICB9KTtcblxuICAvLyBUT0RPOiBBZGQgdGFnIGZvcm1hdCBjaGVjay5cbiAgdGhpcy50YWcgICAgICAgICAgPSB0YWc7XG4gIHRoaXMua2luZCAgICAgICAgID0gb3B0aW9uc1sna2luZCddICAgICAgICAgfHwgbnVsbDtcbiAgdGhpcy5yZXNvbHZlICAgICAgPSBvcHRpb25zWydyZXNvbHZlJ10gICAgICB8fCBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9O1xuICB0aGlzLmNvbnN0cnVjdCAgICA9IG9wdGlvbnNbJ2NvbnN0cnVjdCddICAgIHx8IGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBkYXRhOyB9O1xuICB0aGlzLmluc3RhbmNlT2YgICA9IG9wdGlvbnNbJ2luc3RhbmNlT2YnXSAgIHx8IG51bGw7XG4gIHRoaXMucHJlZGljYXRlICAgID0gb3B0aW9uc1sncHJlZGljYXRlJ10gICAgfHwgbnVsbDtcbiAgdGhpcy5yZXByZXNlbnQgICAgPSBvcHRpb25zWydyZXByZXNlbnQnXSAgICB8fCBudWxsO1xuICB0aGlzLmRlZmF1bHRTdHlsZSA9IG9wdGlvbnNbJ2RlZmF1bHRTdHlsZSddIHx8IG51bGw7XG4gIHRoaXMuc3R5bGVBbGlhc2VzID0gY29tcGlsZVN0eWxlQWxpYXNlcyhvcHRpb25zWydzdHlsZUFsaWFzZXMnXSB8fCBudWxsKTtcblxuICBpZiAoWUFNTF9OT0RFX0tJTkRTLmluZGV4T2YodGhpcy5raW5kKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbignVW5rbm93biBraW5kIFwiJyArIHRoaXMua2luZCArICdcIiBpcyBzcGVjaWZpZWQgZm9yIFwiJyArIHRhZyArICdcIiBZQU1MIHR5cGUuJyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUeXBlO1xuIl0sIm5hbWVzIjpbIllBTUxFeGNlcHRpb24iLCJyZXF1aXJlIiwiVFlQRV9DT05TVFJVQ1RPUl9PUFRJT05TIiwiWUFNTF9OT0RFX0tJTkRTIiwiY29tcGlsZVN0eWxlQWxpYXNlcyIsIm1hcCIsInJlc3VsdCIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwic3R5bGUiLCJhbGlhcyIsIlN0cmluZyIsIlR5cGUiLCJ0YWciLCJvcHRpb25zIiwibmFtZSIsImluZGV4T2YiLCJraW5kIiwicmVzb2x2ZSIsImNvbnN0cnVjdCIsImRhdGEiLCJpbnN0YW5jZU9mIiwicHJlZGljYXRlIiwicmVwcmVzZW50IiwiZGVmYXVsdFN0eWxlIiwic3R5bGVBbGlhc2VzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/binary.js":
/*!*******************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/binary.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/*eslint-disable no-bitwise*/\n\nvar NodeBuffer;\n\ntry {\n  // A trick for browserified version, to not include `Buffer` shim\n  var _require = undefined;\n  NodeBuffer = (__webpack_require__(/*! buffer */ \"../../../../node_modules/buffer/index.js\").Buffer);\n} catch (__) {}\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js\"); // [ 64, 65, 66 ] -> [ padding, CR, LF ]\n\n\nvar BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\n\\r';\n\nfunction resolveYamlBinary(data) {\n  if (data === null) return false;\n  var code,\n      idx,\n      bitlen = 0,\n      max = data.length,\n      map = BASE64_MAP; // Convert one by one.\n\n  for (idx = 0; idx < max; idx++) {\n    code = map.indexOf(data.charAt(idx)); // Skip CR/LF\n\n    if (code > 64) continue; // Fail on illegal characters\n\n    if (code < 0) return false;\n    bitlen += 6;\n  } // If there are any bits left, source was corrupted\n\n\n  return bitlen % 8 === 0;\n}\n\nfunction constructYamlBinary(data) {\n  var idx,\n      tailbits,\n      input = data.replace(/[\\r\\n=]/g, ''),\n      // remove CR/LF & padding to simplify scan\n  max = input.length,\n      map = BASE64_MAP,\n      bits = 0,\n      result = []; // Collect by 6*4 bits (3 bytes)\n\n  for (idx = 0; idx < max; idx++) {\n    if (idx % 4 === 0 && idx) {\n      result.push(bits >> 16 & 0xFF);\n      result.push(bits >> 8 & 0xFF);\n      result.push(bits & 0xFF);\n    }\n\n    bits = bits << 6 | map.indexOf(input.charAt(idx));\n  } // Dump tail\n\n\n  tailbits = max % 4 * 6;\n\n  if (tailbits === 0) {\n    result.push(bits >> 16 & 0xFF);\n    result.push(bits >> 8 & 0xFF);\n    result.push(bits & 0xFF);\n  } else if (tailbits === 18) {\n    result.push(bits >> 10 & 0xFF);\n    result.push(bits >> 2 & 0xFF);\n  } else if (tailbits === 12) {\n    result.push(bits >> 4 & 0xFF);\n  } // Wrap into Buffer for NodeJS and leave Array for browser\n\n\n  if (NodeBuffer) {\n    // Support node 6.+ Buffer API when available\n    return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result);\n  }\n\n  return result;\n}\n\nfunction representYamlBinary(object\n/*, style*/\n) {\n  var result = '',\n      bits = 0,\n      idx,\n      tail,\n      max = object.length,\n      map = BASE64_MAP; // Convert every three bytes to 4 ASCII characters.\n\n  for (idx = 0; idx < max; idx++) {\n    if (idx % 3 === 0 && idx) {\n      result += map[bits >> 18 & 0x3F];\n      result += map[bits >> 12 & 0x3F];\n      result += map[bits >> 6 & 0x3F];\n      result += map[bits & 0x3F];\n    }\n\n    bits = (bits << 8) + object[idx];\n  } // Dump tail\n\n\n  tail = max % 3;\n\n  if (tail === 0) {\n    result += map[bits >> 18 & 0x3F];\n    result += map[bits >> 12 & 0x3F];\n    result += map[bits >> 6 & 0x3F];\n    result += map[bits & 0x3F];\n  } else if (tail === 2) {\n    result += map[bits >> 10 & 0x3F];\n    result += map[bits >> 4 & 0x3F];\n    result += map[bits << 2 & 0x3F];\n    result += map[64];\n  } else if (tail === 1) {\n    result += map[bits >> 2 & 0x3F];\n    result += map[bits << 4 & 0x3F];\n    result += map[64];\n    result += map[64];\n  }\n\n  return result;\n}\n\nfunction isBinary(object) {\n  return NodeBuffer && NodeBuffer.isBuffer(object);\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:binary', {\n  kind: 'scalar',\n  resolve: resolveYamlBinary,\n  construct: constructYamlBinary,\n  predicate: isBinary,\n  represent: representYamlBinary\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/binary.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/bool.js":
/*!*****************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/bool.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\n\nfunction resolveYamlBoolean(data) {\n  if (data === null) return false;\n  var max = data.length;\n  return max === 4 && (data === 'true' || data === 'True' || data === 'TRUE') || max === 5 && (data === 'false' || data === 'False' || data === 'FALSE');\n}\n\nfunction constructYamlBoolean(data) {\n  return data === 'true' || data === 'True' || data === 'TRUE';\n}\n\nfunction isBoolean(object) {\n  return Object.prototype.toString.call(object) === '[object Boolean]';\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:bool', {\n  kind: 'scalar',\n  resolve: resolveYamlBoolean,\n  construct: constructYamlBoolean,\n  predicate: isBoolean,\n  represent: {\n    lowercase: function (object) {\n      return object ? 'true' : 'false';\n    },\n    uppercase: function (object) {\n      return object ? 'TRUE' : 'FALSE';\n    },\n    camelcase: function (object) {\n      return object ? 'True' : 'False';\n    }\n  },\n  defaultStyle: 'lowercase'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9ib29sLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLElBQUksR0FBR0MsbUJBQU8sQ0FBQyw2RkFBRCxDQUFsQjs7QUFFQSxTQUFTQyxrQkFBVCxDQUE0QkMsSUFBNUIsRUFBa0M7QUFDaEMsTUFBSUEsSUFBSSxLQUFLLElBQWIsRUFBbUIsT0FBTyxLQUFQO0FBRW5CLE1BQUlDLEdBQUcsR0FBR0QsSUFBSSxDQUFDRSxNQUFmO0FBRUEsU0FBUUQsR0FBRyxLQUFLLENBQVIsS0FBY0QsSUFBSSxLQUFLLE1BQVQsSUFBbUJBLElBQUksS0FBSyxNQUE1QixJQUFzQ0EsSUFBSSxLQUFLLE1BQTdELENBQUQsSUFDQ0MsR0FBRyxLQUFLLENBQVIsS0FBY0QsSUFBSSxLQUFLLE9BQVQsSUFBb0JBLElBQUksS0FBSyxPQUE3QixJQUF3Q0EsSUFBSSxLQUFLLE9BQS9ELENBRFI7QUFFRDs7QUFFRCxTQUFTRyxvQkFBVCxDQUE4QkgsSUFBOUIsRUFBb0M7QUFDbEMsU0FBT0EsSUFBSSxLQUFLLE1BQVQsSUFDQUEsSUFBSSxLQUFLLE1BRFQsSUFFQUEsSUFBSSxLQUFLLE1BRmhCO0FBR0Q7O0FBRUQsU0FBU0ksU0FBVCxDQUFtQkMsTUFBbkIsRUFBMkI7QUFDekIsU0FBT0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JKLE1BQS9CLE1BQTJDLGtCQUFsRDtBQUNEOztBQUVESyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsSUFBSWQsSUFBSixDQUFTLHdCQUFULEVBQW1DO0FBQ2xEZSxFQUFBQSxJQUFJLEVBQUUsUUFENEM7QUFFbERDLEVBQUFBLE9BQU8sRUFBRWQsa0JBRnlDO0FBR2xEZSxFQUFBQSxTQUFTLEVBQUVYLG9CQUh1QztBQUlsRFksRUFBQUEsU0FBUyxFQUFFWCxTQUp1QztBQUtsRFksRUFBQUEsU0FBUyxFQUFFO0FBQ1RDLElBQUFBLFNBQVMsRUFBRSxVQUFVWixNQUFWLEVBQWtCO0FBQUUsYUFBT0EsTUFBTSxHQUFHLE1BQUgsR0FBWSxPQUF6QjtBQUFtQyxLQUR6RDtBQUVUYSxJQUFBQSxTQUFTLEVBQUUsVUFBVWIsTUFBVixFQUFrQjtBQUFFLGFBQU9BLE1BQU0sR0FBRyxNQUFILEdBQVksT0FBekI7QUFBbUMsS0FGekQ7QUFHVGMsSUFBQUEsU0FBUyxFQUFFLFVBQVVkLE1BQVYsRUFBa0I7QUFBRSxhQUFPQSxNQUFNLEdBQUcsTUFBSCxHQUFZLE9BQXpCO0FBQW1DO0FBSHpELEdBTHVDO0FBVWxEZSxFQUFBQSxZQUFZLEVBQUU7QUFWb0MsQ0FBbkMsQ0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9ib29sLmpzPzNhOWUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxCb29sZWFuKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICB2YXIgbWF4ID0gZGF0YS5sZW5ndGg7XG5cbiAgcmV0dXJuIChtYXggPT09IDQgJiYgKGRhdGEgPT09ICd0cnVlJyB8fCBkYXRhID09PSAnVHJ1ZScgfHwgZGF0YSA9PT0gJ1RSVUUnKSkgfHxcbiAgICAgICAgIChtYXggPT09IDUgJiYgKGRhdGEgPT09ICdmYWxzZScgfHwgZGF0YSA9PT0gJ0ZhbHNlJyB8fCBkYXRhID09PSAnRkFMU0UnKSk7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxCb29sZWFuKGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEgPT09ICd0cnVlJyB8fFxuICAgICAgICAgZGF0YSA9PT0gJ1RydWUnIHx8XG4gICAgICAgICBkYXRhID09PSAnVFJVRSc7XG59XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBCb29sZWFuXSc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOmJvb2wnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbEJvb2xlYW4sXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbEJvb2xlYW4sXG4gIHByZWRpY2F0ZTogaXNCb29sZWFuLFxuICByZXByZXNlbnQ6IHtcbiAgICBsb3dlcmNhc2U6IGZ1bmN0aW9uIChvYmplY3QpIHsgcmV0dXJuIG9iamVjdCA/ICd0cnVlJyA6ICdmYWxzZSc7IH0sXG4gICAgdXBwZXJjYXNlOiBmdW5jdGlvbiAob2JqZWN0KSB7IHJldHVybiBvYmplY3QgPyAnVFJVRScgOiAnRkFMU0UnOyB9LFxuICAgIGNhbWVsY2FzZTogZnVuY3Rpb24gKG9iamVjdCkgeyByZXR1cm4gb2JqZWN0ID8gJ1RydWUnIDogJ0ZhbHNlJzsgfVxuICB9LFxuICBkZWZhdWx0U3R5bGU6ICdsb3dlcmNhc2UnXG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsInJlc29sdmVZYW1sQm9vbGVhbiIsImRhdGEiLCJtYXgiLCJsZW5ndGgiLCJjb25zdHJ1Y3RZYW1sQm9vbGVhbiIsImlzQm9vbGVhbiIsIm9iamVjdCIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwicmVzb2x2ZSIsImNvbnN0cnVjdCIsInByZWRpY2F0ZSIsInJlcHJlc2VudCIsImxvd2VyY2FzZSIsInVwcGVyY2FzZSIsImNhbWVsY2FzZSIsImRlZmF1bHRTdHlsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/bool.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/float.js":
/*!******************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/float.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar common = __webpack_require__(/*! ../common */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/common.js\");\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\n\nvar YAML_FLOAT_PATTERN = new RegExp( // 2.5e4, 2.5 and integers\n'^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' + // .2e4, .2\n// special case, seems not from spec\n'|\\\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' + // 20:59\n'|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\\\.[0-9_]*' + // .inf\n'|[-+]?\\\\.(?:inf|Inf|INF)' + // .nan\n'|\\\\.(?:nan|NaN|NAN))$');\n\nfunction resolveYamlFloat(data) {\n  if (data === null) return false;\n\n  if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`\n  // Probably should update regexp & check speed\n  data[data.length - 1] === '_') {\n    return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlFloat(data) {\n  var value, sign, base, digits;\n  value = data.replace(/_/g, '').toLowerCase();\n  sign = value[0] === '-' ? -1 : 1;\n  digits = [];\n\n  if ('+-'.indexOf(value[0]) >= 0) {\n    value = value.slice(1);\n  }\n\n  if (value === '.inf') {\n    return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n  } else if (value === '.nan') {\n    return NaN;\n  } else if (value.indexOf(':') >= 0) {\n    value.split(':').forEach(function (v) {\n      digits.unshift(parseFloat(v, 10));\n    });\n    value = 0.0;\n    base = 1;\n    digits.forEach(function (d) {\n      value += d * base;\n      base *= 60;\n    });\n    return sign * value;\n  }\n\n  return sign * parseFloat(value, 10);\n}\n\nvar SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;\n\nfunction representYamlFloat(object, style) {\n  var res;\n\n  if (isNaN(object)) {\n    switch (style) {\n      case 'lowercase':\n        return '.nan';\n\n      case 'uppercase':\n        return '.NAN';\n\n      case 'camelcase':\n        return '.NaN';\n    }\n  } else if (Number.POSITIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase':\n        return '.inf';\n\n      case 'uppercase':\n        return '.INF';\n\n      case 'camelcase':\n        return '.Inf';\n    }\n  } else if (Number.NEGATIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase':\n        return '-.inf';\n\n      case 'uppercase':\n        return '-.INF';\n\n      case 'camelcase':\n        return '-.Inf';\n    }\n  } else if (common.isNegativeZero(object)) {\n    return '-0.0';\n  }\n\n  res = object.toString(10); // JS stringifier can build scientific format without dots: 5e-100,\n  // while YAML requres dot: 5.e-100. Fix it with simple hack\n\n  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;\n}\n\nfunction isFloat(object) {\n  return Object.prototype.toString.call(object) === '[object Number]' && (object % 1 !== 0 || common.isNegativeZero(object));\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:float', {\n  kind: 'scalar',\n  resolve: resolveYamlFloat,\n  construct: constructYamlFloat,\n  predicate: isFloat,\n  represent: representYamlFloat,\n  defaultStyle: 'lowercase'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/float.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/int.js":
/*!****************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/int.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar common = __webpack_require__(/*! ../common */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/common.js\");\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\n\nfunction isHexCode(c) {\n  return 0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  || 0x41\n  /* A */\n  <= c && c <= 0x46\n  /* F */\n  || 0x61\n  /* a */\n  <= c && c <= 0x66\n  /* f */\n  ;\n}\n\nfunction isOctCode(c) {\n  return 0x30\n  /* 0 */\n  <= c && c <= 0x37\n  /* 7 */\n  ;\n}\n\nfunction isDecCode(c) {\n  return 0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  ;\n}\n\nfunction resolveYamlInteger(data) {\n  if (data === null) return false;\n  var max = data.length,\n      index = 0,\n      hasDigits = false,\n      ch;\n  if (!max) return false;\n  ch = data[index]; // sign\n\n  if (ch === '-' || ch === '+') {\n    ch = data[++index];\n  }\n\n  if (ch === '0') {\n    // 0\n    if (index + 1 === max) return true;\n    ch = data[++index]; // base 2, base 8, base 16\n\n    if (ch === 'b') {\n      // base 2\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (ch !== '0' && ch !== '1') return false;\n        hasDigits = true;\n      }\n\n      return hasDigits && ch !== '_';\n    }\n\n    if (ch === 'x') {\n      // base 16\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isHexCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n\n      return hasDigits && ch !== '_';\n    } // base 8\n\n\n    for (; index < max; index++) {\n      ch = data[index];\n      if (ch === '_') continue;\n      if (!isOctCode(data.charCodeAt(index))) return false;\n      hasDigits = true;\n    }\n\n    return hasDigits && ch !== '_';\n  } // base 10 (except 0) or base 60\n  // value should not start with `_`;\n\n\n  if (ch === '_') return false;\n\n  for (; index < max; index++) {\n    ch = data[index];\n    if (ch === '_') continue;\n    if (ch === ':') break;\n\n    if (!isDecCode(data.charCodeAt(index))) {\n      return false;\n    }\n\n    hasDigits = true;\n  } // Should have digits and should not end with `_`\n\n\n  if (!hasDigits || ch === '_') return false; // if !base60 - done;\n\n  if (ch !== ':') return true; // base60 almost not used, no needs to optimize\n\n  return /^(:[0-5]?[0-9])+$/.test(data.slice(index));\n}\n\nfunction constructYamlInteger(data) {\n  var value = data,\n      sign = 1,\n      ch,\n      base,\n      digits = [];\n\n  if (value.indexOf('_') !== -1) {\n    value = value.replace(/_/g, '');\n  }\n\n  ch = value[0];\n\n  if (ch === '-' || ch === '+') {\n    if (ch === '-') sign = -1;\n    value = value.slice(1);\n    ch = value[0];\n  }\n\n  if (value === '0') return 0;\n\n  if (ch === '0') {\n    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);\n    if (value[1] === 'x') return sign * parseInt(value, 16);\n    return sign * parseInt(value, 8);\n  }\n\n  if (value.indexOf(':') !== -1) {\n    value.split(':').forEach(function (v) {\n      digits.unshift(parseInt(v, 10));\n    });\n    value = 0;\n    base = 1;\n    digits.forEach(function (d) {\n      value += d * base;\n      base *= 60;\n    });\n    return sign * value;\n  }\n\n  return sign * parseInt(value, 10);\n}\n\nfunction isInteger(object) {\n  return Object.prototype.toString.call(object) === '[object Number]' && object % 1 === 0 && !common.isNegativeZero(object);\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:int', {\n  kind: 'scalar',\n  resolve: resolveYamlInteger,\n  construct: constructYamlInteger,\n  predicate: isInteger,\n  represent: {\n    binary: function (obj) {\n      return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1);\n    },\n    octal: function (obj) {\n      return obj >= 0 ? '0' + obj.toString(8) : '-0' + obj.toString(8).slice(1);\n    },\n    decimal: function (obj) {\n      return obj.toString(10);\n    },\n\n    /* eslint-disable max-len */\n    hexadecimal: function (obj) {\n      return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() : '-0x' + obj.toString(16).toUpperCase().slice(1);\n    }\n  },\n  defaultStyle: 'decimal',\n  styleAliases: {\n    binary: [2, 'bin'],\n    octal: [8, 'oct'],\n    decimal: [10, 'dec'],\n    hexadecimal: [16, 'hex']\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/int.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/js/function.js":
/*!************************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/js/function.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar esprima; // Browserified version does not have esprima\n//\n// 1. For node.js just require module as deps\n// 2. For browser try to require mudule via external AMD system.\n//    If not found - try to fallback to window.esprima. If not\n//    found too - then fail to parse.\n//\n\ntry {\n  // workaround to exclude package from browserify list.\n  var _require = undefined;\n  esprima = __webpack_require__(/*! esprima */ \"../shared/node_modules/esprima/dist/esprima.js\");\n} catch (_) {\n  /* eslint-disable no-redeclare */\n\n  /* global window */\n  if (typeof window !== 'undefined') esprima = window.esprima;\n}\n\nvar Type = __webpack_require__(/*! ../../type */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\n\nfunction resolveJavascriptFunction(data) {\n  if (data === null) return false;\n\n  try {\n    var source = '(' + data + ')',\n        ast = esprima.parse(source, {\n      range: true\n    });\n\n    if (ast.type !== 'Program' || ast.body.length !== 1 || ast.body[0].type !== 'ExpressionStatement' || ast.body[0].expression.type !== 'ArrowFunctionExpression' && ast.body[0].expression.type !== 'FunctionExpression') {\n      return false;\n    }\n\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nfunction constructJavascriptFunction(data) {\n  /*jslint evil:true*/\n  var source = '(' + data + ')',\n      ast = esprima.parse(source, {\n    range: true\n  }),\n      params = [],\n      body;\n\n  if (ast.type !== 'Program' || ast.body.length !== 1 || ast.body[0].type !== 'ExpressionStatement' || ast.body[0].expression.type !== 'ArrowFunctionExpression' && ast.body[0].expression.type !== 'FunctionExpression') {\n    throw new Error('Failed to resolve function');\n  }\n\n  ast.body[0].expression.params.forEach(function (param) {\n    params.push(param.name);\n  });\n  body = ast.body[0].expression.body.range; // Esprima's ranges include the first '{' and the last '}' characters on\n  // function expressions. So cut them out.\n\n  if (ast.body[0].expression.body.type === 'BlockStatement') {\n    /*eslint-disable no-new-func*/\n    return new Function(params, source.slice(body[0] + 1, body[1] - 1));\n  } // ES6 arrow functions can omit the BlockStatement. In that case, just return\n  // the body.\n\n  /*eslint-disable no-new-func*/\n\n\n  return new Function(params, 'return ' + source.slice(body[0], body[1]));\n}\n\nfunction representJavascriptFunction(object\n/*, style*/\n) {\n  return object.toString();\n}\n\nfunction isFunction(object) {\n  return Object.prototype.toString.call(object) === '[object Function]';\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:js/function', {\n  kind: 'scalar',\n  resolve: resolveJavascriptFunction,\n  construct: constructJavascriptFunction,\n  predicate: isFunction,\n  represent: representJavascriptFunction\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/js/function.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/js/regexp.js":
/*!**********************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/js/regexp.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../../type */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\n\nfunction resolveJavascriptRegExp(data) {\n  if (data === null) return false;\n  if (data.length === 0) return false;\n  var regexp = data,\n      tail = /\\/([gim]*)$/.exec(data),\n      modifiers = ''; // if regexp starts with '/' it can have modifiers and must be properly closed\n  // `/foo/gim` - modifiers tail can be maximum 3 chars\n\n  if (regexp[0] === '/') {\n    if (tail) modifiers = tail[1];\n    if (modifiers.length > 3) return false; // if expression starts with /, is should be properly terminated\n\n    if (regexp[regexp.length - modifiers.length - 1] !== '/') return false;\n  }\n\n  return true;\n}\n\nfunction constructJavascriptRegExp(data) {\n  var regexp = data,\n      tail = /\\/([gim]*)$/.exec(data),\n      modifiers = ''; // `/foo/gim` - tail can be maximum 4 chars\n\n  if (regexp[0] === '/') {\n    if (tail) modifiers = tail[1];\n    regexp = regexp.slice(1, regexp.length - modifiers.length - 1);\n  }\n\n  return new RegExp(regexp, modifiers);\n}\n\nfunction representJavascriptRegExp(object\n/*, style*/\n) {\n  var result = '/' + object.source + '/';\n  if (object.global) result += 'g';\n  if (object.multiline) result += 'm';\n  if (object.ignoreCase) result += 'i';\n  return result;\n}\n\nfunction isRegExp(object) {\n  return Object.prototype.toString.call(object) === '[object RegExp]';\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:js/regexp', {\n  kind: 'scalar',\n  resolve: resolveJavascriptRegExp,\n  construct: constructJavascriptRegExp,\n  predicate: isRegExp,\n  represent: representJavascriptRegExp\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9qcy9yZWdleHAuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLGdHQUFELENBQWxCOztBQUVBLFNBQVNDLHVCQUFULENBQWlDQyxJQUFqQyxFQUF1QztBQUNyQyxNQUFJQSxJQUFJLEtBQUssSUFBYixFQUFtQixPQUFPLEtBQVA7QUFDbkIsTUFBSUEsSUFBSSxDQUFDQyxNQUFMLEtBQWdCLENBQXBCLEVBQXVCLE9BQU8sS0FBUDtBQUV2QixNQUFJQyxNQUFNLEdBQUdGLElBQWI7QUFBQSxNQUNJRyxJQUFJLEdBQUssY0FBY0MsSUFBZCxDQUFtQkosSUFBbkIsQ0FEYjtBQUFBLE1BRUlLLFNBQVMsR0FBRyxFQUZoQixDQUpxQyxDQVFyQztBQUNBOztBQUNBLE1BQUlILE1BQU0sQ0FBQyxDQUFELENBQU4sS0FBYyxHQUFsQixFQUF1QjtBQUNyQixRQUFJQyxJQUFKLEVBQVVFLFNBQVMsR0FBR0YsSUFBSSxDQUFDLENBQUQsQ0FBaEI7QUFFVixRQUFJRSxTQUFTLENBQUNKLE1BQVYsR0FBbUIsQ0FBdkIsRUFBMEIsT0FBTyxLQUFQLENBSEwsQ0FJckI7O0FBQ0EsUUFBSUMsTUFBTSxDQUFDQSxNQUFNLENBQUNELE1BQVAsR0FBZ0JJLFNBQVMsQ0FBQ0osTUFBMUIsR0FBbUMsQ0FBcEMsQ0FBTixLQUFpRCxHQUFyRCxFQUEwRCxPQUFPLEtBQVA7QUFDM0Q7O0FBRUQsU0FBTyxJQUFQO0FBQ0Q7O0FBRUQsU0FBU0sseUJBQVQsQ0FBbUNOLElBQW5DLEVBQXlDO0FBQ3ZDLE1BQUlFLE1BQU0sR0FBR0YsSUFBYjtBQUFBLE1BQ0lHLElBQUksR0FBSyxjQUFjQyxJQUFkLENBQW1CSixJQUFuQixDQURiO0FBQUEsTUFFSUssU0FBUyxHQUFHLEVBRmhCLENBRHVDLENBS3ZDOztBQUNBLE1BQUlILE1BQU0sQ0FBQyxDQUFELENBQU4sS0FBYyxHQUFsQixFQUF1QjtBQUNyQixRQUFJQyxJQUFKLEVBQVVFLFNBQVMsR0FBR0YsSUFBSSxDQUFDLENBQUQsQ0FBaEI7QUFDVkQsSUFBQUEsTUFBTSxHQUFHQSxNQUFNLENBQUNLLEtBQVAsQ0FBYSxDQUFiLEVBQWdCTCxNQUFNLENBQUNELE1BQVAsR0FBZ0JJLFNBQVMsQ0FBQ0osTUFBMUIsR0FBbUMsQ0FBbkQsQ0FBVDtBQUNEOztBQUVELFNBQU8sSUFBSU8sTUFBSixDQUFXTixNQUFYLEVBQW1CRyxTQUFuQixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0kseUJBQVQsQ0FBbUNDO0FBQU87QUFBMUMsRUFBdUQ7QUFDckQsTUFBSUMsTUFBTSxHQUFHLE1BQU1ELE1BQU0sQ0FBQ0UsTUFBYixHQUFzQixHQUFuQztBQUVBLE1BQUlGLE1BQU0sQ0FBQ0csTUFBWCxFQUFtQkYsTUFBTSxJQUFJLEdBQVY7QUFDbkIsTUFBSUQsTUFBTSxDQUFDSSxTQUFYLEVBQXNCSCxNQUFNLElBQUksR0FBVjtBQUN0QixNQUFJRCxNQUFNLENBQUNLLFVBQVgsRUFBdUJKLE1BQU0sSUFBSSxHQUFWO0FBRXZCLFNBQU9BLE1BQVA7QUFDRDs7QUFFRCxTQUFTSyxRQUFULENBQWtCTixNQUFsQixFQUEwQjtBQUN4QixTQUFPTyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCQyxJQUExQixDQUErQlYsTUFBL0IsTUFBMkMsaUJBQWxEO0FBQ0Q7O0FBRURXLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixJQUFJekIsSUFBSixDQUFTLDZCQUFULEVBQXdDO0FBQ3ZEMEIsRUFBQUEsSUFBSSxFQUFFLFFBRGlEO0FBRXZEQyxFQUFBQSxPQUFPLEVBQUV6Qix1QkFGOEM7QUFHdkQwQixFQUFBQSxTQUFTLEVBQUVuQix5QkFINEM7QUFJdkRvQixFQUFBQSxTQUFTLEVBQUVWLFFBSjRDO0FBS3ZEVyxFQUFBQSxTQUFTLEVBQUVsQjtBQUw0QyxDQUF4QyxDQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uLi9zaGFyZWQvbm9kZV9tb2R1bGVzL2Zyb250LW1hdHRlci9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL2pzL3JlZ2V4cC5qcz81YmMwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi8uLi90eXBlJyk7XG5cbmZ1bmN0aW9uIHJlc29sdmVKYXZhc2NyaXB0UmVnRXhwKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgaWYgKGRhdGEubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIHJlZ2V4cCA9IGRhdGEsXG4gICAgICB0YWlsICAgPSAvXFwvKFtnaW1dKikkLy5leGVjKGRhdGEpLFxuICAgICAgbW9kaWZpZXJzID0gJyc7XG5cbiAgLy8gaWYgcmVnZXhwIHN0YXJ0cyB3aXRoICcvJyBpdCBjYW4gaGF2ZSBtb2RpZmllcnMgYW5kIG11c3QgYmUgcHJvcGVybHkgY2xvc2VkXG4gIC8vIGAvZm9vL2dpbWAgLSBtb2RpZmllcnMgdGFpbCBjYW4gYmUgbWF4aW11bSAzIGNoYXJzXG4gIGlmIChyZWdleHBbMF0gPT09ICcvJykge1xuICAgIGlmICh0YWlsKSBtb2RpZmllcnMgPSB0YWlsWzFdO1xuXG4gICAgaWYgKG1vZGlmaWVycy5sZW5ndGggPiAzKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gaWYgZXhwcmVzc2lvbiBzdGFydHMgd2l0aCAvLCBpcyBzaG91bGQgYmUgcHJvcGVybHkgdGVybWluYXRlZFxuICAgIGlmIChyZWdleHBbcmVnZXhwLmxlbmd0aCAtIG1vZGlmaWVycy5sZW5ndGggLSAxXSAhPT0gJy8nKSByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0SmF2YXNjcmlwdFJlZ0V4cChkYXRhKSB7XG4gIHZhciByZWdleHAgPSBkYXRhLFxuICAgICAgdGFpbCAgID0gL1xcLyhbZ2ltXSopJC8uZXhlYyhkYXRhKSxcbiAgICAgIG1vZGlmaWVycyA9ICcnO1xuXG4gIC8vIGAvZm9vL2dpbWAgLSB0YWlsIGNhbiBiZSBtYXhpbXVtIDQgY2hhcnNcbiAgaWYgKHJlZ2V4cFswXSA9PT0gJy8nKSB7XG4gICAgaWYgKHRhaWwpIG1vZGlmaWVycyA9IHRhaWxbMV07XG4gICAgcmVnZXhwID0gcmVnZXhwLnNsaWNlKDEsIHJlZ2V4cC5sZW5ndGggLSBtb2RpZmllcnMubGVuZ3RoIC0gMSk7XG4gIH1cblxuICByZXR1cm4gbmV3IFJlZ0V4cChyZWdleHAsIG1vZGlmaWVycyk7XG59XG5cbmZ1bmN0aW9uIHJlcHJlc2VudEphdmFzY3JpcHRSZWdFeHAob2JqZWN0IC8qLCBzdHlsZSovKSB7XG4gIHZhciByZXN1bHQgPSAnLycgKyBvYmplY3Quc291cmNlICsgJy8nO1xuXG4gIGlmIChvYmplY3QuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAob2JqZWN0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKG9iamVjdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKG9iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpqcy9yZWdleHAnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlSmF2YXNjcmlwdFJlZ0V4cCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RKYXZhc2NyaXB0UmVnRXhwLFxuICBwcmVkaWNhdGU6IGlzUmVnRXhwLFxuICByZXByZXNlbnQ6IHJlcHJlc2VudEphdmFzY3JpcHRSZWdFeHBcbn0pO1xuIl0sIm5hbWVzIjpbIlR5cGUiLCJyZXF1aXJlIiwicmVzb2x2ZUphdmFzY3JpcHRSZWdFeHAiLCJkYXRhIiwibGVuZ3RoIiwicmVnZXhwIiwidGFpbCIsImV4ZWMiLCJtb2RpZmllcnMiLCJjb25zdHJ1Y3RKYXZhc2NyaXB0UmVnRXhwIiwic2xpY2UiLCJSZWdFeHAiLCJyZXByZXNlbnRKYXZhc2NyaXB0UmVnRXhwIiwib2JqZWN0IiwicmVzdWx0Iiwic291cmNlIiwiZ2xvYmFsIiwibXVsdGlsaW5lIiwiaWdub3JlQ2FzZSIsImlzUmVnRXhwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwibW9kdWxlIiwiZXhwb3J0cyIsImtpbmQiLCJyZXNvbHZlIiwiY29uc3RydWN0IiwicHJlZGljYXRlIiwicmVwcmVzZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/js/regexp.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/js/undefined.js":
/*!*************************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/js/undefined.js ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../../type */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\n\nfunction resolveJavascriptUndefined() {\n  return true;\n}\n\nfunction constructJavascriptUndefined() {\n  /*eslint-disable no-undefined*/\n  return undefined;\n}\n\nfunction representJavascriptUndefined() {\n  return '';\n}\n\nfunction isUndefined(object) {\n  return typeof object === 'undefined';\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:js/undefined', {\n  kind: 'scalar',\n  resolve: resolveJavascriptUndefined,\n  construct: constructJavascriptUndefined,\n  predicate: isUndefined,\n  represent: representJavascriptUndefined\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9qcy91bmRlZmluZWQuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLGdHQUFELENBQWxCOztBQUVBLFNBQVNDLDBCQUFULEdBQXNDO0FBQ3BDLFNBQU8sSUFBUDtBQUNEOztBQUVELFNBQVNDLDRCQUFULEdBQXdDO0FBQ3RDO0FBQ0EsU0FBT0MsU0FBUDtBQUNEOztBQUVELFNBQVNDLDRCQUFULEdBQXdDO0FBQ3RDLFNBQU8sRUFBUDtBQUNEOztBQUVELFNBQVNDLFdBQVQsQ0FBcUJDLE1BQXJCLEVBQTZCO0FBQzNCLFNBQU8sT0FBT0EsTUFBUCxLQUFrQixXQUF6QjtBQUNEOztBQUVEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsSUFBSVQsSUFBSixDQUFTLGdDQUFULEVBQTJDO0FBQzFEVSxFQUFBQSxJQUFJLEVBQUUsUUFEb0Q7QUFFMURDLEVBQUFBLE9BQU8sRUFBRVQsMEJBRmlEO0FBRzFEVSxFQUFBQSxTQUFTLEVBQUVULDRCQUgrQztBQUkxRFUsRUFBQUEsU0FBUyxFQUFFUCxXQUorQztBQUsxRFEsRUFBQUEsU0FBUyxFQUFFVDtBQUwrQyxDQUEzQyxDQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uLi9zaGFyZWQvbm9kZV9tb2R1bGVzL2Zyb250LW1hdHRlci9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL2pzL3VuZGVmaW5lZC5qcz9lMzk5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi8uLi90eXBlJyk7XG5cbmZ1bmN0aW9uIHJlc29sdmVKYXZhc2NyaXB0VW5kZWZpbmVkKCkge1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0SmF2YXNjcmlwdFVuZGVmaW5lZCgpIHtcbiAgLyplc2xpbnQtZGlzYWJsZSBuby11bmRlZmluZWQqL1xuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiByZXByZXNlbnRKYXZhc2NyaXB0VW5kZWZpbmVkKCkge1xuICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKG9iamVjdCkge1xuICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOmpzL3VuZGVmaW5lZCcsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIHJlc29sdmU6IHJlc29sdmVKYXZhc2NyaXB0VW5kZWZpbmVkLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdEphdmFzY3JpcHRVbmRlZmluZWQsXG4gIHByZWRpY2F0ZTogaXNVbmRlZmluZWQsXG4gIHJlcHJlc2VudDogcmVwcmVzZW50SmF2YXNjcmlwdFVuZGVmaW5lZFxufSk7XG4iXSwibmFtZXMiOlsiVHlwZSIsInJlcXVpcmUiLCJyZXNvbHZlSmF2YXNjcmlwdFVuZGVmaW5lZCIsImNvbnN0cnVjdEphdmFzY3JpcHRVbmRlZmluZWQiLCJ1bmRlZmluZWQiLCJyZXByZXNlbnRKYXZhc2NyaXB0VW5kZWZpbmVkIiwiaXNVbmRlZmluZWQiLCJvYmplY3QiLCJtb2R1bGUiLCJleHBvcnRzIiwia2luZCIsInJlc29sdmUiLCJjb25zdHJ1Y3QiLCJwcmVkaWNhdGUiLCJyZXByZXNlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/js/undefined.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/map.js":
/*!****************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/map.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\n\nmodule.exports = new Type('tag:yaml.org,2002:map', {\n  kind: 'mapping',\n  construct: function (data) {\n    return data !== null ? data : {};\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9tYXAuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLDZGQUFELENBQWxCOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsSUFBSUgsSUFBSixDQUFTLHVCQUFULEVBQWtDO0FBQ2pESSxFQUFBQSxJQUFJLEVBQUUsU0FEMkM7QUFFakRDLEVBQUFBLFNBQVMsRUFBRSxVQUFVQyxJQUFWLEVBQWdCO0FBQUUsV0FBT0EsSUFBSSxLQUFLLElBQVQsR0FBZ0JBLElBQWhCLEdBQXVCLEVBQTlCO0FBQW1DO0FBRmYsQ0FBbEMsQ0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9tYXAuanM/MDZlMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjptYXAnLCB7XG4gIGtpbmQ6ICdtYXBwaW5nJyxcbiAgY29uc3RydWN0OiBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiB7fTsgfVxufSk7XG4iXSwibmFtZXMiOlsiVHlwZSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwia2luZCIsImNvbnN0cnVjdCIsImRhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/map.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/merge.js":
/*!******************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/merge.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\n\nfunction resolveYamlMerge(data) {\n  return data === '<<' || data === null;\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:merge', {\n  kind: 'scalar',\n  resolve: resolveYamlMerge\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9tZXJnZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxJQUFJLEdBQUdDLG1CQUFPLENBQUMsNkZBQUQsQ0FBbEI7O0FBRUEsU0FBU0MsZ0JBQVQsQ0FBMEJDLElBQTFCLEVBQWdDO0FBQzlCLFNBQU9BLElBQUksS0FBSyxJQUFULElBQWlCQSxJQUFJLEtBQUssSUFBakM7QUFDRDs7QUFFREMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLElBQUlMLElBQUosQ0FBUyx5QkFBVCxFQUFvQztBQUNuRE0sRUFBQUEsSUFBSSxFQUFFLFFBRDZDO0FBRW5EQyxFQUFBQSxPQUFPLEVBQUVMO0FBRjBDLENBQXBDLENBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4uL3NoYXJlZC9ub2RlX21vZHVsZXMvZnJvbnQtbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvbWVyZ2UuanM/NTk3NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbE1lcmdlKGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEgPT09ICc8PCcgfHwgZGF0YSA9PT0gbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6bWVyZ2UnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbE1lcmdlXG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsInJlc29sdmVZYW1sTWVyZ2UiLCJkYXRhIiwibW9kdWxlIiwiZXhwb3J0cyIsImtpbmQiLCJyZXNvbHZlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/merge.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/null.js":
/*!*****************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/null.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\n\nfunction resolveYamlNull(data) {\n  if (data === null) return true;\n  var max = data.length;\n  return max === 1 && data === '~' || max === 4 && (data === 'null' || data === 'Null' || data === 'NULL');\n}\n\nfunction constructYamlNull() {\n  return null;\n}\n\nfunction isNull(object) {\n  return object === null;\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:null', {\n  kind: 'scalar',\n  resolve: resolveYamlNull,\n  construct: constructYamlNull,\n  predicate: isNull,\n  represent: {\n    canonical: function () {\n      return '~';\n    },\n    lowercase: function () {\n      return 'null';\n    },\n    uppercase: function () {\n      return 'NULL';\n    },\n    camelcase: function () {\n      return 'Null';\n    }\n  },\n  defaultStyle: 'lowercase'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9udWxsLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLElBQUksR0FBR0MsbUJBQU8sQ0FBQyw2RkFBRCxDQUFsQjs7QUFFQSxTQUFTQyxlQUFULENBQXlCQyxJQUF6QixFQUErQjtBQUM3QixNQUFJQSxJQUFJLEtBQUssSUFBYixFQUFtQixPQUFPLElBQVA7QUFFbkIsTUFBSUMsR0FBRyxHQUFHRCxJQUFJLENBQUNFLE1BQWY7QUFFQSxTQUFRRCxHQUFHLEtBQUssQ0FBUixJQUFhRCxJQUFJLEtBQUssR0FBdkIsSUFDQ0MsR0FBRyxLQUFLLENBQVIsS0FBY0QsSUFBSSxLQUFLLE1BQVQsSUFBbUJBLElBQUksS0FBSyxNQUE1QixJQUFzQ0EsSUFBSSxLQUFLLE1BQTdELENBRFI7QUFFRDs7QUFFRCxTQUFTRyxpQkFBVCxHQUE2QjtBQUMzQixTQUFPLElBQVA7QUFDRDs7QUFFRCxTQUFTQyxNQUFULENBQWdCQyxNQUFoQixFQUF3QjtBQUN0QixTQUFPQSxNQUFNLEtBQUssSUFBbEI7QUFDRDs7QUFFREMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLElBQUlWLElBQUosQ0FBUyx3QkFBVCxFQUFtQztBQUNsRFcsRUFBQUEsSUFBSSxFQUFFLFFBRDRDO0FBRWxEQyxFQUFBQSxPQUFPLEVBQUVWLGVBRnlDO0FBR2xEVyxFQUFBQSxTQUFTLEVBQUVQLGlCQUh1QztBQUlsRFEsRUFBQUEsU0FBUyxFQUFFUCxNQUp1QztBQUtsRFEsRUFBQUEsU0FBUyxFQUFFO0FBQ1RDLElBQUFBLFNBQVMsRUFBRSxZQUFZO0FBQUUsYUFBTyxHQUFQO0FBQWdCLEtBRGhDO0FBRVRDLElBQUFBLFNBQVMsRUFBRSxZQUFZO0FBQUUsYUFBTyxNQUFQO0FBQWdCLEtBRmhDO0FBR1RDLElBQUFBLFNBQVMsRUFBRSxZQUFZO0FBQUUsYUFBTyxNQUFQO0FBQWdCLEtBSGhDO0FBSVRDLElBQUFBLFNBQVMsRUFBRSxZQUFZO0FBQUUsYUFBTyxNQUFQO0FBQWdCO0FBSmhDLEdBTHVDO0FBV2xEQyxFQUFBQSxZQUFZLEVBQUU7QUFYb0MsQ0FBbkMsQ0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9udWxsLmpzPzAzYTEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxOdWxsKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gIHZhciBtYXggPSBkYXRhLmxlbmd0aDtcblxuICByZXR1cm4gKG1heCA9PT0gMSAmJiBkYXRhID09PSAnficpIHx8XG4gICAgICAgICAobWF4ID09PSA0ICYmIChkYXRhID09PSAnbnVsbCcgfHwgZGF0YSA9PT0gJ051bGwnIHx8IGRhdGEgPT09ICdOVUxMJykpO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sTnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzTnVsbChvYmplY3QpIHtcbiAgcmV0dXJuIG9iamVjdCA9PT0gbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6bnVsbCcsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sTnVsbCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sTnVsbCxcbiAgcHJlZGljYXRlOiBpc051bGwsXG4gIHJlcHJlc2VudDoge1xuICAgIGNhbm9uaWNhbDogZnVuY3Rpb24gKCkgeyByZXR1cm4gJ34nOyAgICB9LFxuICAgIGxvd2VyY2FzZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gJ251bGwnOyB9LFxuICAgIHVwcGVyY2FzZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gJ05VTEwnOyB9LFxuICAgIGNhbWVsY2FzZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gJ051bGwnOyB9XG4gIH0sXG4gIGRlZmF1bHRTdHlsZTogJ2xvd2VyY2FzZSdcbn0pO1xuIl0sIm5hbWVzIjpbIlR5cGUiLCJyZXF1aXJlIiwicmVzb2x2ZVlhbWxOdWxsIiwiZGF0YSIsIm1heCIsImxlbmd0aCIsImNvbnN0cnVjdFlhbWxOdWxsIiwiaXNOdWxsIiwib2JqZWN0IiwibW9kdWxlIiwiZXhwb3J0cyIsImtpbmQiLCJyZXNvbHZlIiwiY29uc3RydWN0IiwicHJlZGljYXRlIiwicmVwcmVzZW50IiwiY2Fub25pY2FsIiwibG93ZXJjYXNlIiwidXBwZXJjYXNlIiwiY2FtZWxjYXNlIiwiZGVmYXVsdFN0eWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/null.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/omap.js":
/*!*****************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/omap.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar _toString = Object.prototype.toString;\n\nfunction resolveYamlOmap(data) {\n  if (data === null) return true;\n  var objectKeys = [],\n      index,\n      length,\n      pair,\n      pairKey,\n      pairHasKey,\n      object = data;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    pairHasKey = false;\n    if (_toString.call(pair) !== '[object Object]') return false;\n\n    for (pairKey in pair) {\n      if (_hasOwnProperty.call(pair, pairKey)) {\n        if (!pairHasKey) pairHasKey = true;else return false;\n      }\n    }\n\n    if (!pairHasKey) return false;\n    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);else return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlOmap(data) {\n  return data !== null ? data : [];\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:omap', {\n  kind: 'sequence',\n  resolve: resolveYamlOmap,\n  construct: constructYamlOmap\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9vbWFwLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLElBQUksR0FBR0MsbUJBQU8sQ0FBQyw2RkFBRCxDQUFsQjs7QUFFQSxJQUFJQyxlQUFlLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsY0FBdkM7QUFDQSxJQUFJQyxTQUFTLEdBQVNILE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkcsUUFBdkM7O0FBRUEsU0FBU0MsZUFBVCxDQUF5QkMsSUFBekIsRUFBK0I7QUFDN0IsTUFBSUEsSUFBSSxLQUFLLElBQWIsRUFBbUIsT0FBTyxJQUFQO0FBRW5CLE1BQUlDLFVBQVUsR0FBRyxFQUFqQjtBQUFBLE1BQXFCQyxLQUFyQjtBQUFBLE1BQTRCQyxNQUE1QjtBQUFBLE1BQW9DQyxJQUFwQztBQUFBLE1BQTBDQyxPQUExQztBQUFBLE1BQW1EQyxVQUFuRDtBQUFBLE1BQ0lDLE1BQU0sR0FBR1AsSUFEYjs7QUFHQSxPQUFLRSxLQUFLLEdBQUcsQ0FBUixFQUFXQyxNQUFNLEdBQUdJLE1BQU0sQ0FBQ0osTUFBaEMsRUFBd0NELEtBQUssR0FBR0MsTUFBaEQsRUFBd0RELEtBQUssSUFBSSxDQUFqRSxFQUFvRTtBQUNsRUUsSUFBQUEsSUFBSSxHQUFHRyxNQUFNLENBQUNMLEtBQUQsQ0FBYjtBQUNBSSxJQUFBQSxVQUFVLEdBQUcsS0FBYjtBQUVBLFFBQUlULFNBQVMsQ0FBQ1csSUFBVixDQUFlSixJQUFmLE1BQXlCLGlCQUE3QixFQUFnRCxPQUFPLEtBQVA7O0FBRWhELFNBQUtDLE9BQUwsSUFBZ0JELElBQWhCLEVBQXNCO0FBQ3BCLFVBQUlYLGVBQWUsQ0FBQ2UsSUFBaEIsQ0FBcUJKLElBQXJCLEVBQTJCQyxPQUEzQixDQUFKLEVBQXlDO0FBQ3ZDLFlBQUksQ0FBQ0MsVUFBTCxFQUFpQkEsVUFBVSxHQUFHLElBQWIsQ0FBakIsS0FDSyxPQUFPLEtBQVA7QUFDTjtBQUNGOztBQUVELFFBQUksQ0FBQ0EsVUFBTCxFQUFpQixPQUFPLEtBQVA7QUFFakIsUUFBSUwsVUFBVSxDQUFDUSxPQUFYLENBQW1CSixPQUFuQixNQUFnQyxDQUFDLENBQXJDLEVBQXdDSixVQUFVLENBQUNTLElBQVgsQ0FBZ0JMLE9BQWhCLEVBQXhDLEtBQ0ssT0FBTyxLQUFQO0FBQ047O0FBRUQsU0FBTyxJQUFQO0FBQ0Q7O0FBRUQsU0FBU00saUJBQVQsQ0FBMkJYLElBQTNCLEVBQWlDO0FBQy9CLFNBQU9BLElBQUksS0FBSyxJQUFULEdBQWdCQSxJQUFoQixHQUF1QixFQUE5QjtBQUNEOztBQUVEWSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsSUFBSXRCLElBQUosQ0FBUyx3QkFBVCxFQUFtQztBQUNsRHVCLEVBQUFBLElBQUksRUFBRSxVQUQ0QztBQUVsREMsRUFBQUEsT0FBTyxFQUFFaEIsZUFGeUM7QUFHbERpQixFQUFBQSxTQUFTLEVBQUVMO0FBSHVDLENBQW5DLENBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4uL3NoYXJlZC9ub2RlX21vZHVsZXMvZnJvbnQtbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvb21hcC5qcz9kZGY1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbnZhciBfaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF90b1N0cmluZyAgICAgICA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sT21hcChkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcblxuICB2YXIgb2JqZWN0S2V5cyA9IFtdLCBpbmRleCwgbGVuZ3RoLCBwYWlyLCBwYWlyS2V5LCBwYWlySGFzS2V5LFxuICAgICAgb2JqZWN0ID0gZGF0YTtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBwYWlyID0gb2JqZWN0W2luZGV4XTtcbiAgICBwYWlySGFzS2V5ID0gZmFsc2U7XG5cbiAgICBpZiAoX3RvU3RyaW5nLmNhbGwocGFpcikgIT09ICdbb2JqZWN0IE9iamVjdF0nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKHBhaXJLZXkgaW4gcGFpcikge1xuICAgICAgaWYgKF9oYXNPd25Qcm9wZXJ0eS5jYWxsKHBhaXIsIHBhaXJLZXkpKSB7XG4gICAgICAgIGlmICghcGFpckhhc0tleSkgcGFpckhhc0tleSA9IHRydWU7XG4gICAgICAgIGVsc2UgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcGFpckhhc0tleSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKG9iamVjdEtleXMuaW5kZXhPZihwYWlyS2V5KSA9PT0gLTEpIG9iamVjdEtleXMucHVzaChwYWlyS2V5KTtcbiAgICBlbHNlIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sT21hcChkYXRhKSB7XG4gIHJldHVybiBkYXRhICE9PSBudWxsID8gZGF0YSA6IFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpvbWFwJywge1xuICBraW5kOiAnc2VxdWVuY2UnLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbE9tYXAsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbE9tYXBcbn0pO1xuIl0sIm5hbWVzIjpbIlR5cGUiLCJyZXF1aXJlIiwiX2hhc093blByb3BlcnR5IiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJfdG9TdHJpbmciLCJ0b1N0cmluZyIsInJlc29sdmVZYW1sT21hcCIsImRhdGEiLCJvYmplY3RLZXlzIiwiaW5kZXgiLCJsZW5ndGgiLCJwYWlyIiwicGFpcktleSIsInBhaXJIYXNLZXkiLCJvYmplY3QiLCJjYWxsIiwiaW5kZXhPZiIsInB1c2giLCJjb25zdHJ1Y3RZYW1sT21hcCIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwicmVzb2x2ZSIsImNvbnN0cnVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/omap.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/pairs.js":
/*!******************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/pairs.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\n\nvar _toString = Object.prototype.toString;\n\nfunction resolveYamlPairs(data) {\n  if (data === null) return true;\n  var index,\n      length,\n      pair,\n      keys,\n      result,\n      object = data;\n  result = new Array(object.length);\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    if (_toString.call(pair) !== '[object Object]') return false;\n    keys = Object.keys(pair);\n    if (keys.length !== 1) return false;\n    result[index] = [keys[0], pair[keys[0]]];\n  }\n\n  return true;\n}\n\nfunction constructYamlPairs(data) {\n  if (data === null) return [];\n  var index,\n      length,\n      pair,\n      keys,\n      result,\n      object = data;\n  result = new Array(object.length);\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    keys = Object.keys(pair);\n    result[index] = [keys[0], pair[keys[0]]];\n  }\n\n  return result;\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:pairs', {\n  kind: 'sequence',\n  resolve: resolveYamlPairs,\n  construct: constructYamlPairs\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9wYWlycy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxJQUFJLEdBQUdDLG1CQUFPLENBQUMsNkZBQUQsQ0FBbEI7O0FBRUEsSUFBSUMsU0FBUyxHQUFHQyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLFFBQWpDOztBQUVBLFNBQVNDLGdCQUFULENBQTBCQyxJQUExQixFQUFnQztBQUM5QixNQUFJQSxJQUFJLEtBQUssSUFBYixFQUFtQixPQUFPLElBQVA7QUFFbkIsTUFBSUMsS0FBSjtBQUFBLE1BQVdDLE1BQVg7QUFBQSxNQUFtQkMsSUFBbkI7QUFBQSxNQUF5QkMsSUFBekI7QUFBQSxNQUErQkMsTUFBL0I7QUFBQSxNQUNJQyxNQUFNLEdBQUdOLElBRGI7QUFHQUssRUFBQUEsTUFBTSxHQUFHLElBQUlFLEtBQUosQ0FBVUQsTUFBTSxDQUFDSixNQUFqQixDQUFUOztBQUVBLE9BQUtELEtBQUssR0FBRyxDQUFSLEVBQVdDLE1BQU0sR0FBR0ksTUFBTSxDQUFDSixNQUFoQyxFQUF3Q0QsS0FBSyxHQUFHQyxNQUFoRCxFQUF3REQsS0FBSyxJQUFJLENBQWpFLEVBQW9FO0FBQ2xFRSxJQUFBQSxJQUFJLEdBQUdHLE1BQU0sQ0FBQ0wsS0FBRCxDQUFiO0FBRUEsUUFBSU4sU0FBUyxDQUFDYSxJQUFWLENBQWVMLElBQWYsTUFBeUIsaUJBQTdCLEVBQWdELE9BQU8sS0FBUDtBQUVoREMsSUFBQUEsSUFBSSxHQUFHUixNQUFNLENBQUNRLElBQVAsQ0FBWUQsSUFBWixDQUFQO0FBRUEsUUFBSUMsSUFBSSxDQUFDRixNQUFMLEtBQWdCLENBQXBCLEVBQXVCLE9BQU8sS0FBUDtBQUV2QkcsSUFBQUEsTUFBTSxDQUFDSixLQUFELENBQU4sR0FBZ0IsQ0FBRUcsSUFBSSxDQUFDLENBQUQsQ0FBTixFQUFXRCxJQUFJLENBQUNDLElBQUksQ0FBQyxDQUFELENBQUwsQ0FBZixDQUFoQjtBQUNEOztBQUVELFNBQU8sSUFBUDtBQUNEOztBQUVELFNBQVNLLGtCQUFULENBQTRCVCxJQUE1QixFQUFrQztBQUNoQyxNQUFJQSxJQUFJLEtBQUssSUFBYixFQUFtQixPQUFPLEVBQVA7QUFFbkIsTUFBSUMsS0FBSjtBQUFBLE1BQVdDLE1BQVg7QUFBQSxNQUFtQkMsSUFBbkI7QUFBQSxNQUF5QkMsSUFBekI7QUFBQSxNQUErQkMsTUFBL0I7QUFBQSxNQUNJQyxNQUFNLEdBQUdOLElBRGI7QUFHQUssRUFBQUEsTUFBTSxHQUFHLElBQUlFLEtBQUosQ0FBVUQsTUFBTSxDQUFDSixNQUFqQixDQUFUOztBQUVBLE9BQUtELEtBQUssR0FBRyxDQUFSLEVBQVdDLE1BQU0sR0FBR0ksTUFBTSxDQUFDSixNQUFoQyxFQUF3Q0QsS0FBSyxHQUFHQyxNQUFoRCxFQUF3REQsS0FBSyxJQUFJLENBQWpFLEVBQW9FO0FBQ2xFRSxJQUFBQSxJQUFJLEdBQUdHLE1BQU0sQ0FBQ0wsS0FBRCxDQUFiO0FBRUFHLElBQUFBLElBQUksR0FBR1IsTUFBTSxDQUFDUSxJQUFQLENBQVlELElBQVosQ0FBUDtBQUVBRSxJQUFBQSxNQUFNLENBQUNKLEtBQUQsQ0FBTixHQUFnQixDQUFFRyxJQUFJLENBQUMsQ0FBRCxDQUFOLEVBQVdELElBQUksQ0FBQ0MsSUFBSSxDQUFDLENBQUQsQ0FBTCxDQUFmLENBQWhCO0FBQ0Q7O0FBRUQsU0FBT0MsTUFBUDtBQUNEOztBQUVESyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsSUFBSWxCLElBQUosQ0FBUyx5QkFBVCxFQUFvQztBQUNuRG1CLEVBQUFBLElBQUksRUFBRSxVQUQ2QztBQUVuREMsRUFBQUEsT0FBTyxFQUFFZCxnQkFGMEM7QUFHbkRlLEVBQUFBLFNBQVMsRUFBRUw7QUFId0MsQ0FBcEMsQ0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9wYWlycy5qcz8yZTJhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbnZhciBfdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbFBhaXJzKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gIHZhciBpbmRleCwgbGVuZ3RoLCBwYWlyLCBrZXlzLCByZXN1bHQsXG4gICAgICBvYmplY3QgPSBkYXRhO1xuXG4gIHJlc3VsdCA9IG5ldyBBcnJheShvYmplY3QubGVuZ3RoKTtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBwYWlyID0gb2JqZWN0W2luZGV4XTtcblxuICAgIGlmIChfdG9TdHJpbmcuY2FsbChwYWlyKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHJldHVybiBmYWxzZTtcblxuICAgIGtleXMgPSBPYmplY3Qua2V5cyhwYWlyKTtcblxuICAgIGlmIChrZXlzLmxlbmd0aCAhPT0gMSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmVzdWx0W2luZGV4XSA9IFsga2V5c1swXSwgcGFpcltrZXlzWzBdXSBdO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxQYWlycyhkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gW107XG5cbiAgdmFyIGluZGV4LCBsZW5ndGgsIHBhaXIsIGtleXMsIHJlc3VsdCxcbiAgICAgIG9iamVjdCA9IGRhdGE7XG5cbiAgcmVzdWx0ID0gbmV3IEFycmF5KG9iamVjdC5sZW5ndGgpO1xuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBvYmplY3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHBhaXIgPSBvYmplY3RbaW5kZXhdO1xuXG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHBhaXIpO1xuXG4gICAgcmVzdWx0W2luZGV4XSA9IFsga2V5c1swXSwgcGFpcltrZXlzWzBdXSBdO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6cGFpcnMnLCB7XG4gIGtpbmQ6ICdzZXF1ZW5jZScsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sUGFpcnMsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbFBhaXJzXG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsIl90b1N0cmluZyIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwicmVzb2x2ZVlhbWxQYWlycyIsImRhdGEiLCJpbmRleCIsImxlbmd0aCIsInBhaXIiLCJrZXlzIiwicmVzdWx0Iiwib2JqZWN0IiwiQXJyYXkiLCJjYWxsIiwiY29uc3RydWN0WWFtbFBhaXJzIiwibW9kdWxlIiwiZXhwb3J0cyIsImtpbmQiLCJyZXNvbHZlIiwiY29uc3RydWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/pairs.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/seq.js":
/*!****************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/seq.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\n\nmodule.exports = new Type('tag:yaml.org,2002:seq', {\n  kind: 'sequence',\n  construct: function (data) {\n    return data !== null ? data : [];\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9zZXEuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLDZGQUFELENBQWxCOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsSUFBSUgsSUFBSixDQUFTLHVCQUFULEVBQWtDO0FBQ2pESSxFQUFBQSxJQUFJLEVBQUUsVUFEMkM7QUFFakRDLEVBQUFBLFNBQVMsRUFBRSxVQUFVQyxJQUFWLEVBQWdCO0FBQUUsV0FBT0EsSUFBSSxLQUFLLElBQVQsR0FBZ0JBLElBQWhCLEdBQXVCLEVBQTlCO0FBQW1DO0FBRmYsQ0FBbEMsQ0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9zZXEuanM/MjkzNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpzZXEnLCB7XG4gIGtpbmQ6ICdzZXF1ZW5jZScsXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIGRhdGEgIT09IG51bGwgPyBkYXRhIDogW107IH1cbn0pO1xuIl0sIm5hbWVzIjpbIlR5cGUiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImtpbmQiLCJjb25zdHJ1Y3QiLCJkYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/seq.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/set.js":
/*!****************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/set.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction resolveYamlSet(data) {\n  if (data === null) return true;\n  var key,\n      object = data;\n\n  for (key in object) {\n    if (_hasOwnProperty.call(object, key)) {\n      if (object[key] !== null) return false;\n    }\n  }\n\n  return true;\n}\n\nfunction constructYamlSet(data) {\n  return data !== null ? data : {};\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:set', {\n  kind: 'mapping',\n  resolve: resolveYamlSet,\n  construct: constructYamlSet\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9zZXQuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLDZGQUFELENBQWxCOztBQUVBLElBQUlDLGVBQWUsR0FBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxjQUF2Qzs7QUFFQSxTQUFTQyxjQUFULENBQXdCQyxJQUF4QixFQUE4QjtBQUM1QixNQUFJQSxJQUFJLEtBQUssSUFBYixFQUFtQixPQUFPLElBQVA7QUFFbkIsTUFBSUMsR0FBSjtBQUFBLE1BQVNDLE1BQU0sR0FBR0YsSUFBbEI7O0FBRUEsT0FBS0MsR0FBTCxJQUFZQyxNQUFaLEVBQW9CO0FBQ2xCLFFBQUlQLGVBQWUsQ0FBQ1EsSUFBaEIsQ0FBcUJELE1BQXJCLEVBQTZCRCxHQUE3QixDQUFKLEVBQXVDO0FBQ3JDLFVBQUlDLE1BQU0sQ0FBQ0QsR0FBRCxDQUFOLEtBQWdCLElBQXBCLEVBQTBCLE9BQU8sS0FBUDtBQUMzQjtBQUNGOztBQUVELFNBQU8sSUFBUDtBQUNEOztBQUVELFNBQVNHLGdCQUFULENBQTBCSixJQUExQixFQUFnQztBQUM5QixTQUFPQSxJQUFJLEtBQUssSUFBVCxHQUFnQkEsSUFBaEIsR0FBdUIsRUFBOUI7QUFDRDs7QUFFREssTUFBTSxDQUFDQyxPQUFQLEdBQWlCLElBQUliLElBQUosQ0FBUyx1QkFBVCxFQUFrQztBQUNqRGMsRUFBQUEsSUFBSSxFQUFFLFNBRDJDO0FBRWpEQyxFQUFBQSxPQUFPLEVBQUVULGNBRndDO0FBR2pEVSxFQUFBQSxTQUFTLEVBQUVMO0FBSHNDLENBQWxDLENBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4uL3NoYXJlZC9ub2RlX21vZHVsZXMvZnJvbnQtbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvc2V0LmpzPzVmYTYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxudmFyIF9oYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sU2V0KGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gIHZhciBrZXksIG9iamVjdCA9IGRhdGE7XG5cbiAgZm9yIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKF9oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgaWYgKG9iamVjdFtrZXldICE9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxTZXQoZGF0YSkge1xuICByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiB7fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6c2V0Jywge1xuICBraW5kOiAnbWFwcGluZycsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sU2V0LFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxTZXRcbn0pO1xuIl0sIm5hbWVzIjpbIlR5cGUiLCJyZXF1aXJlIiwiX2hhc093blByb3BlcnR5IiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJyZXNvbHZlWWFtbFNldCIsImRhdGEiLCJrZXkiLCJvYmplY3QiLCJjYWxsIiwiY29uc3RydWN0WWFtbFNldCIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwicmVzb2x2ZSIsImNvbnN0cnVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/set.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/str.js":
/*!****************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/str.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\n\nmodule.exports = new Type('tag:yaml.org,2002:str', {\n  kind: 'scalar',\n  construct: function (data) {\n    return data !== null ? data : '';\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9zdHIuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLDZGQUFELENBQWxCOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsSUFBSUgsSUFBSixDQUFTLHVCQUFULEVBQWtDO0FBQ2pESSxFQUFBQSxJQUFJLEVBQUUsUUFEMkM7QUFFakRDLEVBQUFBLFNBQVMsRUFBRSxVQUFVQyxJQUFWLEVBQWdCO0FBQUUsV0FBT0EsSUFBSSxLQUFLLElBQVQsR0FBZ0JBLElBQWhCLEdBQXVCLEVBQTlCO0FBQW1DO0FBRmYsQ0FBbEMsQ0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9mcm9udC1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9zdHIuanM/NzhmNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpzdHInLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBkYXRhICE9PSBudWxsID8gZGF0YSA6ICcnOyB9XG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwiY29uc3RydWN0IiwiZGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/str.js\n");

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/timestamp.js":
/*!**********************************************************************************************!*\
  !*** ../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/timestamp.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\n\nvar YAML_DATE_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' + // [1] year\n'-([0-9][0-9])' + // [2] month\n'-([0-9][0-9])$'); // [3] day\n\nvar YAML_TIMESTAMP_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' + // [1] year\n'-([0-9][0-9]?)' + // [2] month\n'-([0-9][0-9]?)' + // [3] day\n'(?:[Tt]|[ \\\\t]+)' + // ...\n'([0-9][0-9]?)' + // [4] hour\n':([0-9][0-9])' + // [5] minute\n':([0-9][0-9])' + // [6] second\n'(?:\\\\.([0-9]*))?' + // [7] fraction\n'(?:[ \\\\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour\n'(?::([0-9][0-9]))?))?$'); // [11] tz_minute\n\nfunction resolveYamlTimestamp(data) {\n  if (data === null) return false;\n  if (YAML_DATE_REGEXP.exec(data) !== null) return true;\n  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;\n  return false;\n}\n\nfunction constructYamlTimestamp(data) {\n  var match,\n      year,\n      month,\n      day,\n      hour,\n      minute,\n      second,\n      fraction = 0,\n      delta = null,\n      tz_hour,\n      tz_minute,\n      date;\n  match = YAML_DATE_REGEXP.exec(data);\n  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);\n  if (match === null) throw new Error('Date resolve error'); // match: [1] year [2] month [3] day\n\n  year = +match[1];\n  month = +match[2] - 1; // JS month starts with 0\n\n  day = +match[3];\n\n  if (!match[4]) {\n    // no hour\n    return new Date(Date.UTC(year, month, day));\n  } // match: [4] hour [5] minute [6] second [7] fraction\n\n\n  hour = +match[4];\n  minute = +match[5];\n  second = +match[6];\n\n  if (match[7]) {\n    fraction = match[7].slice(0, 3);\n\n    while (fraction.length < 3) {\n      // milli-seconds\n      fraction += '0';\n    }\n\n    fraction = +fraction;\n  } // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute\n\n\n  if (match[9]) {\n    tz_hour = +match[10];\n    tz_minute = +(match[11] || 0);\n    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds\n\n    if (match[9] === '-') delta = -delta;\n  }\n\n  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));\n  if (delta) date.setTime(date.getTime() - delta);\n  return date;\n}\n\nfunction representYamlTimestamp(object\n/*, style*/\n) {\n  return object.toISOString();\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:timestamp', {\n  kind: 'scalar',\n  resolve: resolveYamlTimestamp,\n  construct: constructYamlTimestamp,\n  instanceOf: Date,\n  represent: representYamlTimestamp\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/timestamp.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/index.js":
/*!***********************************************!*\
  !*** ../shared/node_modules/js-yaml/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar loader = __webpack_require__(/*! ./lib/loader */ \"../shared/node_modules/js-yaml/lib/loader.js\");\n\nvar dumper = __webpack_require__(/*! ./lib/dumper */ \"../shared/node_modules/js-yaml/lib/dumper.js\");\n\nfunction renamed(from, to) {\n  return function () {\n    throw new Error('Function yaml.' + from + ' is removed in js-yaml 4. ' + 'Use yaml.' + to + ' instead, which is now safe by default.');\n  };\n}\n\nmodule.exports.Type = __webpack_require__(/*! ./lib/type */ \"../shared/node_modules/js-yaml/lib/type.js\");\nmodule.exports.Schema = __webpack_require__(/*! ./lib/schema */ \"../shared/node_modules/js-yaml/lib/schema.js\");\nmodule.exports.FAILSAFE_SCHEMA = __webpack_require__(/*! ./lib/schema/failsafe */ \"../shared/node_modules/js-yaml/lib/schema/failsafe.js\");\nmodule.exports.JSON_SCHEMA = __webpack_require__(/*! ./lib/schema/json */ \"../shared/node_modules/js-yaml/lib/schema/json.js\");\nmodule.exports.CORE_SCHEMA = __webpack_require__(/*! ./lib/schema/core */ \"../shared/node_modules/js-yaml/lib/schema/core.js\");\nmodule.exports.DEFAULT_SCHEMA = __webpack_require__(/*! ./lib/schema/default */ \"../shared/node_modules/js-yaml/lib/schema/default.js\");\nmodule.exports.load = loader.load;\nmodule.exports.loadAll = loader.loadAll;\nmodule.exports.dump = dumper.dump;\nmodule.exports.YAMLException = __webpack_require__(/*! ./lib/exception */ \"../shared/node_modules/js-yaml/lib/exception.js\"); // Re-export all types in case user wants to create custom schema\n\nmodule.exports.types = {\n  binary: __webpack_require__(/*! ./lib/type/binary */ \"../shared/node_modules/js-yaml/lib/type/binary.js\"),\n  float: __webpack_require__(/*! ./lib/type/float */ \"../shared/node_modules/js-yaml/lib/type/float.js\"),\n  map: __webpack_require__(/*! ./lib/type/map */ \"../shared/node_modules/js-yaml/lib/type/map.js\"),\n  null: __webpack_require__(/*! ./lib/type/null */ \"../shared/node_modules/js-yaml/lib/type/null.js\"),\n  pairs: __webpack_require__(/*! ./lib/type/pairs */ \"../shared/node_modules/js-yaml/lib/type/pairs.js\"),\n  set: __webpack_require__(/*! ./lib/type/set */ \"../shared/node_modules/js-yaml/lib/type/set.js\"),\n  timestamp: __webpack_require__(/*! ./lib/type/timestamp */ \"../shared/node_modules/js-yaml/lib/type/timestamp.js\"),\n  bool: __webpack_require__(/*! ./lib/type/bool */ \"../shared/node_modules/js-yaml/lib/type/bool.js\"),\n  int: __webpack_require__(/*! ./lib/type/int */ \"../shared/node_modules/js-yaml/lib/type/int.js\"),\n  merge: __webpack_require__(/*! ./lib/type/merge */ \"../shared/node_modules/js-yaml/lib/type/merge.js\"),\n  omap: __webpack_require__(/*! ./lib/type/omap */ \"../shared/node_modules/js-yaml/lib/type/omap.js\"),\n  seq: __webpack_require__(/*! ./lib/type/seq */ \"../shared/node_modules/js-yaml/lib/type/seq.js\"),\n  str: __webpack_require__(/*! ./lib/type/str */ \"../shared/node_modules/js-yaml/lib/type/str.js\")\n}; // Removed functions from JS-YAML 3.0.x\n\nmodule.exports.safeLoad = renamed('safeLoad', 'load');\nmodule.exports.safeLoadAll = renamed('safeLoadAll', 'loadAll');\nmodule.exports.safeDump = renamed('safeDump', 'dump');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUdiLElBQUlBLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQyxrRUFBRCxDQUFwQjs7QUFDQSxJQUFJQyxNQUFNLEdBQUdELG1CQUFPLENBQUMsa0VBQUQsQ0FBcEI7O0FBR0EsU0FBU0UsT0FBVCxDQUFpQkMsSUFBakIsRUFBdUJDLEVBQXZCLEVBQTJCO0FBQ3pCLFNBQU8sWUFBWTtBQUNqQixVQUFNLElBQUlDLEtBQUosQ0FBVSxtQkFBbUJGLElBQW5CLEdBQTBCLDRCQUExQixHQUNkLFdBRGMsR0FDQUMsRUFEQSxHQUNLLHlDQURmLENBQU47QUFFRCxHQUhEO0FBSUQ7O0FBR0RFLHlHQUFBO0FBQ0FBLCtHQUFBO0FBQ0FBLDBJQUFBO0FBQ0FBLDhIQUFBO0FBQ0FBLDhIQUFBO0FBQ0FBLHVJQUFBO0FBQ0FBLG1CQUFBLEdBQXFDUCxNQUFNLENBQUNlLElBQTVDO0FBQ0FSLHNCQUFBLEdBQXFDUCxNQUFNLENBQUNnQixPQUE1QztBQUNBVCxtQkFBQSxHQUFxQ0wsTUFBTSxDQUFDZSxJQUE1QztBQUNBViw0SEFBQSxDLENBRUE7O0FBQ0FBLG9CQUFBLEdBQXVCO0FBQ3JCYSxFQUFBQSxNQUFNLEVBQUtuQixtQkFBTyxDQUFDLDRFQUFELENBREc7QUFFckJvQixFQUFBQSxLQUFLLEVBQU1wQixtQkFBTyxDQUFDLDBFQUFELENBRkc7QUFHckJxQixFQUFBQSxHQUFHLEVBQVFyQixtQkFBTyxDQUFDLHNFQUFELENBSEc7QUFJckJzQixFQUFBQSxJQUFJLEVBQU90QixtQkFBTyxDQUFDLHdFQUFELENBSkc7QUFLckJ1QixFQUFBQSxLQUFLLEVBQU12QixtQkFBTyxDQUFDLDBFQUFELENBTEc7QUFNckJ3QixFQUFBQSxHQUFHLEVBQVF4QixtQkFBTyxDQUFDLHNFQUFELENBTkc7QUFPckJ5QixFQUFBQSxTQUFTLEVBQUV6QixtQkFBTyxDQUFDLGtGQUFELENBUEc7QUFRckIwQixFQUFBQSxJQUFJLEVBQU8xQixtQkFBTyxDQUFDLHdFQUFELENBUkc7QUFTckIyQixFQUFBQSxHQUFHLEVBQVEzQixtQkFBTyxDQUFDLHNFQUFELENBVEc7QUFVckI0QixFQUFBQSxLQUFLLEVBQU01QixtQkFBTyxDQUFDLDBFQUFELENBVkc7QUFXckI2QixFQUFBQSxJQUFJLEVBQU83QixtQkFBTyxDQUFDLHdFQUFELENBWEc7QUFZckI4QixFQUFBQSxHQUFHLEVBQVE5QixtQkFBTyxDQUFDLHNFQUFELENBWkc7QUFhckIrQixFQUFBQSxHQUFHLEVBQVEvQixtQkFBTyxDQUFDLHNFQUFEO0FBYkcsQ0FBdkIsQyxDQWdCQTs7QUFDQU0sdUJBQUEsR0FBcUNKLE9BQU8sQ0FBQyxVQUFELEVBQWEsTUFBYixDQUE1QztBQUNBSSwwQkFBQSxHQUFxQ0osT0FBTyxDQUFDLGFBQUQsRUFBZ0IsU0FBaEIsQ0FBNUM7QUFDQUksdUJBQUEsR0FBcUNKLE9BQU8sQ0FBQyxVQUFELEVBQWEsTUFBYixDQUE1QyIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uLi9zaGFyZWQvbm9kZV9tb2R1bGVzL2pzLXlhbWwvaW5kZXguanM/YmFkYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cblxudmFyIGxvYWRlciA9IHJlcXVpcmUoJy4vbGliL2xvYWRlcicpO1xudmFyIGR1bXBlciA9IHJlcXVpcmUoJy4vbGliL2R1bXBlcicpO1xuXG5cbmZ1bmN0aW9uIHJlbmFtZWQoZnJvbSwgdG8pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Z1bmN0aW9uIHlhbWwuJyArIGZyb20gKyAnIGlzIHJlbW92ZWQgaW4ganMteWFtbCA0LiAnICtcbiAgICAgICdVc2UgeWFtbC4nICsgdG8gKyAnIGluc3RlYWQsIHdoaWNoIGlzIG5vdyBzYWZlIGJ5IGRlZmF1bHQuJyk7XG4gIH07XG59XG5cblxubW9kdWxlLmV4cG9ydHMuVHlwZSAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vbGliL3R5cGUnKTtcbm1vZHVsZS5leHBvcnRzLlNjaGVtYSAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL2xpYi9zY2hlbWEnKTtcbm1vZHVsZS5leHBvcnRzLkZBSUxTQUZFX1NDSEVNQSAgICAgPSByZXF1aXJlKCcuL2xpYi9zY2hlbWEvZmFpbHNhZmUnKTtcbm1vZHVsZS5leHBvcnRzLkpTT05fU0NIRU1BICAgICAgICAgPSByZXF1aXJlKCcuL2xpYi9zY2hlbWEvanNvbicpO1xubW9kdWxlLmV4cG9ydHMuQ09SRV9TQ0hFTUEgICAgICAgICA9IHJlcXVpcmUoJy4vbGliL3NjaGVtYS9jb3JlJyk7XG5tb2R1bGUuZXhwb3J0cy5ERUZBVUxUX1NDSEVNQSAgICAgID0gcmVxdWlyZSgnLi9saWIvc2NoZW1hL2RlZmF1bHQnKTtcbm1vZHVsZS5leHBvcnRzLmxvYWQgICAgICAgICAgICAgICAgPSBsb2FkZXIubG9hZDtcbm1vZHVsZS5leHBvcnRzLmxvYWRBbGwgICAgICAgICAgICAgPSBsb2FkZXIubG9hZEFsbDtcbm1vZHVsZS5leHBvcnRzLmR1bXAgICAgICAgICAgICAgICAgPSBkdW1wZXIuZHVtcDtcbm1vZHVsZS5leHBvcnRzLllBTUxFeGNlcHRpb24gICAgICAgPSByZXF1aXJlKCcuL2xpYi9leGNlcHRpb24nKTtcblxuLy8gUmUtZXhwb3J0IGFsbCB0eXBlcyBpbiBjYXNlIHVzZXIgd2FudHMgdG8gY3JlYXRlIGN1c3RvbSBzY2hlbWFcbm1vZHVsZS5leHBvcnRzLnR5cGVzID0ge1xuICBiaW5hcnk6ICAgIHJlcXVpcmUoJy4vbGliL3R5cGUvYmluYXJ5JyksXG4gIGZsb2F0OiAgICAgcmVxdWlyZSgnLi9saWIvdHlwZS9mbG9hdCcpLFxuICBtYXA6ICAgICAgIHJlcXVpcmUoJy4vbGliL3R5cGUvbWFwJyksXG4gIG51bGw6ICAgICAgcmVxdWlyZSgnLi9saWIvdHlwZS9udWxsJyksXG4gIHBhaXJzOiAgICAgcmVxdWlyZSgnLi9saWIvdHlwZS9wYWlycycpLFxuICBzZXQ6ICAgICAgIHJlcXVpcmUoJy4vbGliL3R5cGUvc2V0JyksXG4gIHRpbWVzdGFtcDogcmVxdWlyZSgnLi9saWIvdHlwZS90aW1lc3RhbXAnKSxcbiAgYm9vbDogICAgICByZXF1aXJlKCcuL2xpYi90eXBlL2Jvb2wnKSxcbiAgaW50OiAgICAgICByZXF1aXJlKCcuL2xpYi90eXBlL2ludCcpLFxuICBtZXJnZTogICAgIHJlcXVpcmUoJy4vbGliL3R5cGUvbWVyZ2UnKSxcbiAgb21hcDogICAgICByZXF1aXJlKCcuL2xpYi90eXBlL29tYXAnKSxcbiAgc2VxOiAgICAgICByZXF1aXJlKCcuL2xpYi90eXBlL3NlcScpLFxuICBzdHI6ICAgICAgIHJlcXVpcmUoJy4vbGliL3R5cGUvc3RyJylcbn07XG5cbi8vIFJlbW92ZWQgZnVuY3Rpb25zIGZyb20gSlMtWUFNTCAzLjAueFxubW9kdWxlLmV4cG9ydHMuc2FmZUxvYWQgICAgICAgICAgICA9IHJlbmFtZWQoJ3NhZmVMb2FkJywgJ2xvYWQnKTtcbm1vZHVsZS5leHBvcnRzLnNhZmVMb2FkQWxsICAgICAgICAgPSByZW5hbWVkKCdzYWZlTG9hZEFsbCcsICdsb2FkQWxsJyk7XG5tb2R1bGUuZXhwb3J0cy5zYWZlRHVtcCAgICAgICAgICAgID0gcmVuYW1lZCgnc2FmZUR1bXAnLCAnZHVtcCcpO1xuIl0sIm5hbWVzIjpbImxvYWRlciIsInJlcXVpcmUiLCJkdW1wZXIiLCJyZW5hbWVkIiwiZnJvbSIsInRvIiwiRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiVHlwZSIsIlNjaGVtYSIsIkZBSUxTQUZFX1NDSEVNQSIsIkpTT05fU0NIRU1BIiwiQ09SRV9TQ0hFTUEiLCJERUZBVUxUX1NDSEVNQSIsImxvYWQiLCJsb2FkQWxsIiwiZHVtcCIsIllBTUxFeGNlcHRpb24iLCJ0eXBlcyIsImJpbmFyeSIsImZsb2F0IiwibWFwIiwibnVsbCIsInBhaXJzIiwic2V0IiwidGltZXN0YW1wIiwiYm9vbCIsImludCIsIm1lcmdlIiwib21hcCIsInNlcSIsInN0ciIsInNhZmVMb2FkIiwic2FmZUxvYWRBbGwiLCJzYWZlRHVtcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/index.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/common.js":
/*!****************************************************!*\
  !*** ../shared/node_modules/js-yaml/lib/common.js ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nfunction isNothing(subject) {\n  return typeof subject === 'undefined' || subject === null;\n}\n\nfunction isObject(subject) {\n  return typeof subject === 'object' && subject !== null;\n}\n\nfunction toArray(sequence) {\n  if (Array.isArray(sequence)) return sequence;else if (isNothing(sequence)) return [];\n  return [sequence];\n}\n\nfunction extend(target, source) {\n  var index, length, key, sourceKeys;\n\n  if (source) {\n    sourceKeys = Object.keys(source);\n\n    for (index = 0, length = sourceKeys.length; index < length; index += 1) {\n      key = sourceKeys[index];\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction repeat(string, count) {\n  var result = '',\n      cycle;\n\n  for (cycle = 0; cycle < count; cycle += 1) {\n    result += string;\n  }\n\n  return result;\n}\n\nfunction isNegativeZero(number) {\n  return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;\n}\n\nmodule.exports.isNothing = isNothing;\nmodule.exports.isObject = isObject;\nmodule.exports.toArray = toArray;\nmodule.exports.repeat = repeat;\nmodule.exports.isNegativeZero = isNegativeZero;\nmodule.exports.extend = extend;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9jb21tb24uanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBR2IsU0FBU0EsU0FBVCxDQUFtQkMsT0FBbkIsRUFBNEI7QUFDMUIsU0FBUSxPQUFPQSxPQUFQLEtBQW1CLFdBQXBCLElBQXFDQSxPQUFPLEtBQUssSUFBeEQ7QUFDRDs7QUFHRCxTQUFTQyxRQUFULENBQWtCRCxPQUFsQixFQUEyQjtBQUN6QixTQUFRLE9BQU9BLE9BQVAsS0FBbUIsUUFBcEIsSUFBa0NBLE9BQU8sS0FBSyxJQUFyRDtBQUNEOztBQUdELFNBQVNFLE9BQVQsQ0FBaUJDLFFBQWpCLEVBQTJCO0FBQ3pCLE1BQUlDLEtBQUssQ0FBQ0MsT0FBTixDQUFjRixRQUFkLENBQUosRUFBNkIsT0FBT0EsUUFBUCxDQUE3QixLQUNLLElBQUlKLFNBQVMsQ0FBQ0ksUUFBRCxDQUFiLEVBQXlCLE9BQU8sRUFBUDtBQUU5QixTQUFPLENBQUVBLFFBQUYsQ0FBUDtBQUNEOztBQUdELFNBQVNHLE1BQVQsQ0FBZ0JDLE1BQWhCLEVBQXdCQyxNQUF4QixFQUFnQztBQUM5QixNQUFJQyxLQUFKLEVBQVdDLE1BQVgsRUFBbUJDLEdBQW5CLEVBQXdCQyxVQUF4Qjs7QUFFQSxNQUFJSixNQUFKLEVBQVk7QUFDVkksSUFBQUEsVUFBVSxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWU4sTUFBWixDQUFiOztBQUVBLFNBQUtDLEtBQUssR0FBRyxDQUFSLEVBQVdDLE1BQU0sR0FBR0UsVUFBVSxDQUFDRixNQUFwQyxFQUE0Q0QsS0FBSyxHQUFHQyxNQUFwRCxFQUE0REQsS0FBSyxJQUFJLENBQXJFLEVBQXdFO0FBQ3RFRSxNQUFBQSxHQUFHLEdBQUdDLFVBQVUsQ0FBQ0gsS0FBRCxDQUFoQjtBQUNBRixNQUFBQSxNQUFNLENBQUNJLEdBQUQsQ0FBTixHQUFjSCxNQUFNLENBQUNHLEdBQUQsQ0FBcEI7QUFDRDtBQUNGOztBQUVELFNBQU9KLE1BQVA7QUFDRDs7QUFHRCxTQUFTUSxNQUFULENBQWdCQyxNQUFoQixFQUF3QkMsS0FBeEIsRUFBK0I7QUFDN0IsTUFBSUMsTUFBTSxHQUFHLEVBQWI7QUFBQSxNQUFpQkMsS0FBakI7O0FBRUEsT0FBS0EsS0FBSyxHQUFHLENBQWIsRUFBZ0JBLEtBQUssR0FBR0YsS0FBeEIsRUFBK0JFLEtBQUssSUFBSSxDQUF4QyxFQUEyQztBQUN6Q0QsSUFBQUEsTUFBTSxJQUFJRixNQUFWO0FBQ0Q7O0FBRUQsU0FBT0UsTUFBUDtBQUNEOztBQUdELFNBQVNFLGNBQVQsQ0FBd0JDLE1BQXhCLEVBQWdDO0FBQzlCLFNBQVFBLE1BQU0sS0FBSyxDQUFaLElBQW1CQyxNQUFNLENBQUNDLGlCQUFQLEtBQTZCLElBQUlGLE1BQTNEO0FBQ0Q7O0FBR0RHLHdCQUFBLEdBQWdDekIsU0FBaEM7QUFDQXlCLHVCQUFBLEdBQWdDdkIsUUFBaEM7QUFDQXVCLHNCQUFBLEdBQWdDdEIsT0FBaEM7QUFDQXNCLHFCQUFBLEdBQWdDVCxNQUFoQztBQUNBUyw2QkFBQSxHQUFnQ0osY0FBaEM7QUFDQUkscUJBQUEsR0FBZ0NsQixNQUFoQyIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uLi9zaGFyZWQvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2NvbW1vbi5qcz9jNmQ1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuXG5mdW5jdGlvbiBpc05vdGhpbmcoc3ViamVjdCkge1xuICByZXR1cm4gKHR5cGVvZiBzdWJqZWN0ID09PSAndW5kZWZpbmVkJykgfHwgKHN1YmplY3QgPT09IG51bGwpO1xufVxuXG5cbmZ1bmN0aW9uIGlzT2JqZWN0KHN1YmplY3QpIHtcbiAgcmV0dXJuICh0eXBlb2Ygc3ViamVjdCA9PT0gJ29iamVjdCcpICYmIChzdWJqZWN0ICE9PSBudWxsKTtcbn1cblxuXG5mdW5jdGlvbiB0b0FycmF5KHNlcXVlbmNlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHNlcXVlbmNlKSkgcmV0dXJuIHNlcXVlbmNlO1xuICBlbHNlIGlmIChpc05vdGhpbmcoc2VxdWVuY2UpKSByZXR1cm4gW107XG5cbiAgcmV0dXJuIFsgc2VxdWVuY2UgXTtcbn1cblxuXG5mdW5jdGlvbiBleHRlbmQodGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIGluZGV4LCBsZW5ndGgsIGtleSwgc291cmNlS2V5cztcblxuICBpZiAoc291cmNlKSB7XG4gICAgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gc291cmNlS2V5cy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgICBrZXkgPSBzb3VyY2VLZXlzW2luZGV4XTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuXG5mdW5jdGlvbiByZXBlYXQoc3RyaW5nLCBjb3VudCkge1xuICB2YXIgcmVzdWx0ID0gJycsIGN5Y2xlO1xuXG4gIGZvciAoY3ljbGUgPSAwOyBjeWNsZSA8IGNvdW50OyBjeWNsZSArPSAxKSB7XG4gICAgcmVzdWx0ICs9IHN0cmluZztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cblxuZnVuY3Rpb24gaXNOZWdhdGl2ZVplcm8obnVtYmVyKSB7XG4gIHJldHVybiAobnVtYmVyID09PSAwKSAmJiAoTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZID09PSAxIC8gbnVtYmVyKTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cy5pc05vdGhpbmcgICAgICA9IGlzTm90aGluZztcbm1vZHVsZS5leHBvcnRzLmlzT2JqZWN0ICAgICAgID0gaXNPYmplY3Q7XG5tb2R1bGUuZXhwb3J0cy50b0FycmF5ICAgICAgICA9IHRvQXJyYXk7XG5tb2R1bGUuZXhwb3J0cy5yZXBlYXQgICAgICAgICA9IHJlcGVhdDtcbm1vZHVsZS5leHBvcnRzLmlzTmVnYXRpdmVaZXJvID0gaXNOZWdhdGl2ZVplcm87XG5tb2R1bGUuZXhwb3J0cy5leHRlbmQgICAgICAgICA9IGV4dGVuZDtcbiJdLCJuYW1lcyI6WyJpc05vdGhpbmciLCJzdWJqZWN0IiwiaXNPYmplY3QiLCJ0b0FycmF5Iiwic2VxdWVuY2UiLCJBcnJheSIsImlzQXJyYXkiLCJleHRlbmQiLCJ0YXJnZXQiLCJzb3VyY2UiLCJpbmRleCIsImxlbmd0aCIsImtleSIsInNvdXJjZUtleXMiLCJPYmplY3QiLCJrZXlzIiwicmVwZWF0Iiwic3RyaW5nIiwiY291bnQiLCJyZXN1bHQiLCJjeWNsZSIsImlzTmVnYXRpdmVaZXJvIiwibnVtYmVyIiwiTnVtYmVyIiwiTkVHQVRJVkVfSU5GSU5JVFkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/lib/common.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/dumper.js":
/*!****************************************************!*\
  !*** ../shared/node_modules/js-yaml/lib/dumper.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/*eslint-disable no-use-before-define*/\n\nvar common = __webpack_require__(/*! ./common */ \"../shared/node_modules/js-yaml/lib/common.js\");\n\nvar YAMLException = __webpack_require__(/*! ./exception */ \"../shared/node_modules/js-yaml/lib/exception.js\");\n\nvar DEFAULT_SCHEMA = __webpack_require__(/*! ./schema/default */ \"../shared/node_modules/js-yaml/lib/schema/default.js\");\n\nvar _toString = Object.prototype.toString;\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar CHAR_BOM = 0xFEFF;\nvar CHAR_TAB = 0x09;\n/* Tab */\n\nvar CHAR_LINE_FEED = 0x0A;\n/* LF */\n\nvar CHAR_CARRIAGE_RETURN = 0x0D;\n/* CR */\n\nvar CHAR_SPACE = 0x20;\n/* Space */\n\nvar CHAR_EXCLAMATION = 0x21;\n/* ! */\n\nvar CHAR_DOUBLE_QUOTE = 0x22;\n/* \" */\n\nvar CHAR_SHARP = 0x23;\n/* # */\n\nvar CHAR_PERCENT = 0x25;\n/* % */\n\nvar CHAR_AMPERSAND = 0x26;\n/* & */\n\nvar CHAR_SINGLE_QUOTE = 0x27;\n/* ' */\n\nvar CHAR_ASTERISK = 0x2A;\n/* * */\n\nvar CHAR_COMMA = 0x2C;\n/* , */\n\nvar CHAR_MINUS = 0x2D;\n/* - */\n\nvar CHAR_COLON = 0x3A;\n/* : */\n\nvar CHAR_EQUALS = 0x3D;\n/* = */\n\nvar CHAR_GREATER_THAN = 0x3E;\n/* > */\n\nvar CHAR_QUESTION = 0x3F;\n/* ? */\n\nvar CHAR_COMMERCIAL_AT = 0x40;\n/* @ */\n\nvar CHAR_LEFT_SQUARE_BRACKET = 0x5B;\n/* [ */\n\nvar CHAR_RIGHT_SQUARE_BRACKET = 0x5D;\n/* ] */\n\nvar CHAR_GRAVE_ACCENT = 0x60;\n/* ` */\n\nvar CHAR_LEFT_CURLY_BRACKET = 0x7B;\n/* { */\n\nvar CHAR_VERTICAL_LINE = 0x7C;\n/* | */\n\nvar CHAR_RIGHT_CURLY_BRACKET = 0x7D;\n/* } */\n\nvar ESCAPE_SEQUENCES = {};\nESCAPE_SEQUENCES[0x00] = '\\\\0';\nESCAPE_SEQUENCES[0x07] = '\\\\a';\nESCAPE_SEQUENCES[0x08] = '\\\\b';\nESCAPE_SEQUENCES[0x09] = '\\\\t';\nESCAPE_SEQUENCES[0x0A] = '\\\\n';\nESCAPE_SEQUENCES[0x0B] = '\\\\v';\nESCAPE_SEQUENCES[0x0C] = '\\\\f';\nESCAPE_SEQUENCES[0x0D] = '\\\\r';\nESCAPE_SEQUENCES[0x1B] = '\\\\e';\nESCAPE_SEQUENCES[0x22] = '\\\\\"';\nESCAPE_SEQUENCES[0x5C] = '\\\\\\\\';\nESCAPE_SEQUENCES[0x85] = '\\\\N';\nESCAPE_SEQUENCES[0xA0] = '\\\\_';\nESCAPE_SEQUENCES[0x2028] = '\\\\L';\nESCAPE_SEQUENCES[0x2029] = '\\\\P';\nvar DEPRECATED_BOOLEANS_SYNTAX = ['y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON', 'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'];\nvar DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\\.[0-9_]*)?$/;\n\nfunction compileStyleMap(schema, map) {\n  var result, keys, index, length, tag, style, type;\n  if (map === null) return {};\n  result = {};\n  keys = Object.keys(map);\n\n  for (index = 0, length = keys.length; index < length; index += 1) {\n    tag = keys[index];\n    style = String(map[tag]);\n\n    if (tag.slice(0, 2) === '!!') {\n      tag = 'tag:yaml.org,2002:' + tag.slice(2);\n    }\n\n    type = schema.compiledTypeMap['fallback'][tag];\n\n    if (type && _hasOwnProperty.call(type.styleAliases, style)) {\n      style = type.styleAliases[style];\n    }\n\n    result[tag] = style;\n  }\n\n  return result;\n}\n\nfunction encodeHex(character) {\n  var string, handle, length;\n  string = character.toString(16).toUpperCase();\n\n  if (character <= 0xFF) {\n    handle = 'x';\n    length = 2;\n  } else if (character <= 0xFFFF) {\n    handle = 'u';\n    length = 4;\n  } else if (character <= 0xFFFFFFFF) {\n    handle = 'U';\n    length = 8;\n  } else {\n    throw new YAMLException('code point within a string may not be greater than 0xFFFFFFFF');\n  }\n\n  return '\\\\' + handle + common.repeat('0', length - string.length) + string;\n}\n\nvar QUOTING_TYPE_SINGLE = 1,\n    QUOTING_TYPE_DOUBLE = 2;\n\nfunction State(options) {\n  this.schema = options['schema'] || DEFAULT_SCHEMA;\n  this.indent = Math.max(1, options['indent'] || 2);\n  this.noArrayIndent = options['noArrayIndent'] || false;\n  this.skipInvalid = options['skipInvalid'] || false;\n  this.flowLevel = common.isNothing(options['flowLevel']) ? -1 : options['flowLevel'];\n  this.styleMap = compileStyleMap(this.schema, options['styles'] || null);\n  this.sortKeys = options['sortKeys'] || false;\n  this.lineWidth = options['lineWidth'] || 80;\n  this.noRefs = options['noRefs'] || false;\n  this.noCompatMode = options['noCompatMode'] || false;\n  this.condenseFlow = options['condenseFlow'] || false;\n  this.quotingType = options['quotingType'] === '\"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;\n  this.forceQuotes = options['forceQuotes'] || false;\n  this.replacer = typeof options['replacer'] === 'function' ? options['replacer'] : null;\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.explicitTypes = this.schema.compiledExplicit;\n  this.tag = null;\n  this.result = '';\n  this.duplicates = [];\n  this.usedDuplicates = null;\n} // Indents every line in a string. Empty lines (\\n only) are not indented.\n\n\nfunction indentString(string, spaces) {\n  var ind = common.repeat(' ', spaces),\n      position = 0,\n      next = -1,\n      result = '',\n      line,\n      length = string.length;\n\n  while (position < length) {\n    next = string.indexOf('\\n', position);\n\n    if (next === -1) {\n      line = string.slice(position);\n      position = length;\n    } else {\n      line = string.slice(position, next + 1);\n      position = next + 1;\n    }\n\n    if (line.length && line !== '\\n') result += ind;\n    result += line;\n  }\n\n  return result;\n}\n\nfunction generateNextLine(state, level) {\n  return '\\n' + common.repeat(' ', state.indent * level);\n}\n\nfunction testImplicitResolving(state, str) {\n  var index, length, type;\n\n  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {\n    type = state.implicitTypes[index];\n\n    if (type.resolve(str)) {\n      return true;\n    }\n  }\n\n  return false;\n} // [33] s-white ::= s-space | s-tab\n\n\nfunction isWhitespace(c) {\n  return c === CHAR_SPACE || c === CHAR_TAB;\n} // Returns true if the character can be printed without escaping.\n// From YAML 1.2: \"any allowed characters known to be non-printable\n// should also be escaped. [However,] This isn’t mandatory\"\n// Derived from nb-char - \\t - #x85 - #xA0 - #x2028 - #x2029.\n\n\nfunction isPrintable(c) {\n  return 0x00020 <= c && c <= 0x00007E || 0x000A1 <= c && c <= 0x00D7FF && c !== 0x2028 && c !== 0x2029 || 0x0E000 <= c && c <= 0x00FFFD && c !== CHAR_BOM || 0x10000 <= c && c <= 0x10FFFF;\n} // [34] ns-char ::= nb-char - s-white\n// [27] nb-char ::= c-printable - b-char - c-byte-order-mark\n// [26] b-char  ::= b-line-feed | b-carriage-return\n// Including s-white (for some reason, examples doesn't match specs in this aspect)\n// ns-char ::= c-printable - b-line-feed - b-carriage-return - c-byte-order-mark\n\n\nfunction isNsCharOrWhitespace(c) {\n  return isPrintable(c) && c !== CHAR_BOM // - b-char\n  && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;\n} // [127]  ns-plain-safe(c) ::= c = flow-out  ⇒ ns-plain-safe-out\n//                             c = flow-in   ⇒ ns-plain-safe-in\n//                             c = block-key ⇒ ns-plain-safe-out\n//                             c = flow-key  ⇒ ns-plain-safe-in\n// [128] ns-plain-safe-out ::= ns-char\n// [129]  ns-plain-safe-in ::= ns-char - c-flow-indicator\n// [130]  ns-plain-char(c) ::=  ( ns-plain-safe(c) - “:” - “#” )\n//                            | ( /* An ns-char preceding */ “#” )\n//                            | ( “:” /* Followed by an ns-plain-safe(c) */ )\n\n\nfunction isPlainSafe(c, prev, inblock) {\n  var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);\n  var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);\n  return ( // ns-plain-safe\n  inblock ? // c = flow-in\n  cIsNsCharOrWhitespace : cIsNsCharOrWhitespace // - c-flow-indicator\n  && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET // ns-plain-char\n  ) && c !== CHAR_SHARP // false on '#'\n  && !(prev === CHAR_COLON && !cIsNsChar) // false on ': '\n  || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP // change to true on '[^ ]#'\n  || prev === CHAR_COLON && cIsNsChar; // change to true on ':[^ ]'\n} // Simplified test for values allowed as the first character in plain style.\n\n\nfunction isPlainSafeFirst(c) {\n  // Uses a subset of ns-char - c-indicator\n  // where ns-char = nb-char - s-white.\n  // No support of ( ( “?” | “:” | “-” ) /* Followed by an ns-plain-safe(c)) */ ) part\n  return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) // - s-white\n  // - (c-indicator ::=\n  // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”\n  && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET // | “#” | “&” | “*” | “!” | “|” | “=” | “>” | “'” | “\"”\n  && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE // | “%” | “@” | “`”)\n  && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;\n} // Simplified test for values allowed as the last character in plain style.\n\n\nfunction isPlainSafeLast(c) {\n  // just not whitespace or colon, it will be checked to be plain character later\n  return !isWhitespace(c) && c !== CHAR_COLON;\n} // Same as 'string'.codePointAt(pos), but works in older browsers.\n\n\nfunction codePointAt(string, pos) {\n  var first = string.charCodeAt(pos),\n      second;\n\n  if (first >= 0xD800 && first <= 0xDBFF && pos + 1 < string.length) {\n    second = string.charCodeAt(pos + 1);\n\n    if (second >= 0xDC00 && second <= 0xDFFF) {\n      // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n      return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n    }\n  }\n\n  return first;\n} // Determines whether block indentation indicator is required.\n\n\nfunction needIndentIndicator(string) {\n  var leadingSpaceRe = /^\\n* /;\n  return leadingSpaceRe.test(string);\n}\n\nvar STYLE_PLAIN = 1,\n    STYLE_SINGLE = 2,\n    STYLE_LITERAL = 3,\n    STYLE_FOLDED = 4,\n    STYLE_DOUBLE = 5; // Determines which scalar styles are possible and returns the preferred style.\n// lineWidth = -1 => no limit.\n// Pre-conditions: str.length > 0.\n// Post-conditions:\n//    STYLE_PLAIN or STYLE_SINGLE => no \\n are in the string.\n//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).\n//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).\n\nfunction chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {\n  var i;\n  var char = 0;\n  var prevChar = null;\n  var hasLineBreak = false;\n  var hasFoldableLine = false; // only checked if shouldTrackWidth\n\n  var shouldTrackWidth = lineWidth !== -1;\n  var previousLineBreak = -1; // count the first line correctly\n\n  var plain = isPlainSafeFirst(codePointAt(string, 0)) && isPlainSafeLast(codePointAt(string, string.length - 1));\n\n  if (singleLineOnly || forceQuotes) {\n    // Case: no block styles.\n    // Check for disallowed characters to rule out plain and single.\n    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {\n      char = codePointAt(string, i);\n\n      if (!isPrintable(char)) {\n        return STYLE_DOUBLE;\n      }\n\n      plain = plain && isPlainSafe(char, prevChar, inblock);\n      prevChar = char;\n    }\n  } else {\n    // Case: block styles permitted.\n    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {\n      char = codePointAt(string, i);\n\n      if (char === CHAR_LINE_FEED) {\n        hasLineBreak = true; // Check if any line can be folded.\n\n        if (shouldTrackWidth) {\n          hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.\n          i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';\n          previousLineBreak = i;\n        }\n      } else if (!isPrintable(char)) {\n        return STYLE_DOUBLE;\n      }\n\n      plain = plain && isPlainSafe(char, prevChar, inblock);\n      prevChar = char;\n    } // in case the end is missing a \\n\n\n\n    hasFoldableLine = hasFoldableLine || shouldTrackWidth && i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';\n  } // Although every style can represent \\n without escaping, prefer block styles\n  // for multiline, since they're more readable and they don't add empty lines.\n  // Also prefer folding a super-long line.\n\n\n  if (!hasLineBreak && !hasFoldableLine) {\n    // Strings interpretable as another type have to be quoted;\n    // e.g. the string 'true' vs. the boolean true.\n    if (plain && !forceQuotes && !testAmbiguousType(string)) {\n      return STYLE_PLAIN;\n    }\n\n    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;\n  } // Edge case: block indentation indicator can only have one digit.\n\n\n  if (indentPerLevel > 9 && needIndentIndicator(string)) {\n    return STYLE_DOUBLE;\n  } // At this point we know block styles are valid.\n  // Prefer literal style unless we want to fold.\n\n\n  if (!forceQuotes) {\n    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;\n  }\n\n  return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;\n} // Note: line breaking/folding is implemented for only the folded style.\n// NB. We drop the last trailing newline (if any) of a returned block scalar\n//  since the dumper adds its own newline. This always works:\n//    • No ending newline => unaffected; already using strip \"-\" chomping.\n//    • Ending newline    => removed then restored.\n//  Importantly, this keeps the \"+\" chomp indicator from gaining an extra line.\n\n\nfunction writeScalar(state, string, level, iskey, inblock) {\n  state.dump = function () {\n    if (string.length === 0) {\n      return state.quotingType === QUOTING_TYPE_DOUBLE ? '\"\"' : \"''\";\n    }\n\n    if (!state.noCompatMode) {\n      if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {\n        return state.quotingType === QUOTING_TYPE_DOUBLE ? '\"' + string + '\"' : \"'\" + string + \"'\";\n      }\n    }\n\n    var indent = state.indent * Math.max(1, level); // no 0-indent scalars\n    // As indentation gets deeper, let the width decrease monotonically\n    // to the lower bound min(state.lineWidth, 40).\n    // Note that this implies\n    //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.\n    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.\n    // This behaves better than a constant minimum width which disallows narrower options,\n    // or an indent threshold which causes the width to suddenly increase.\n\n    var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent); // Without knowing if keys are implicit/explicit, assume implicit for safety.\n\n    var singleLineOnly = iskey // No block styles in flow mode.\n    || state.flowLevel > -1 && level >= state.flowLevel;\n\n    function testAmbiguity(string) {\n      return testImplicitResolving(state, string);\n    }\n\n    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)) {\n      case STYLE_PLAIN:\n        return string;\n\n      case STYLE_SINGLE:\n        return \"'\" + string.replace(/'/g, \"''\") + \"'\";\n\n      case STYLE_LITERAL:\n        return '|' + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));\n\n      case STYLE_FOLDED:\n        return '>' + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));\n\n      case STYLE_DOUBLE:\n        return '\"' + escapeString(string, lineWidth) + '\"';\n\n      default:\n        throw new YAMLException('impossible error: invalid scalar style');\n    }\n  }();\n} // Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.\n\n\nfunction blockHeader(string, indentPerLevel) {\n  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : ''; // note the special case: the string '\\n' counts as a \"trailing\" empty line.\n\n  var clip = string[string.length - 1] === '\\n';\n  var keep = clip && (string[string.length - 2] === '\\n' || string === '\\n');\n  var chomp = keep ? '+' : clip ? '' : '-';\n  return indentIndicator + chomp + '\\n';\n} // (See the note for writeScalar.)\n\n\nfunction dropEndingNewline(string) {\n  return string[string.length - 1] === '\\n' ? string.slice(0, -1) : string;\n} // Note: a long line without a suitable break point will exceed the width limit.\n// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.\n\n\nfunction foldString(string, width) {\n  // In folded style, $k$ consecutive newlines output as $k+1$ newlines—\n  // unless they're before or after a more-indented line, or at the very\n  // beginning or end, in which case $k$ maps to $k$.\n  // Therefore, parse each chunk as newline(s) followed by a content line.\n  var lineRe = /(\\n+)([^\\n]*)/g; // first line (possibly an empty line)\n\n  var result = function () {\n    var nextLF = string.indexOf('\\n');\n    nextLF = nextLF !== -1 ? nextLF : string.length;\n    lineRe.lastIndex = nextLF;\n    return foldLine(string.slice(0, nextLF), width);\n  }(); // If we haven't reached the first content line yet, don't add an extra \\n.\n\n\n  var prevMoreIndented = string[0] === '\\n' || string[0] === ' ';\n  var moreIndented; // rest of the lines\n\n  var match;\n\n  while (match = lineRe.exec(string)) {\n    var prefix = match[1],\n        line = match[2];\n    moreIndented = line[0] === ' ';\n    result += prefix + (!prevMoreIndented && !moreIndented && line !== '' ? '\\n' : '') + foldLine(line, width);\n    prevMoreIndented = moreIndented;\n  }\n\n  return result;\n} // Greedy line breaking.\n// Picks the longest line under the limit each time,\n// otherwise settles for the shortest line over the limit.\n// NB. More-indented lines *cannot* be folded, as that would add an extra \\n.\n\n\nfunction foldLine(line, width) {\n  if (line === '' || line[0] === ' ') return line; // Since a more-indented line adds a \\n, breaks can't be followed by a space.\n\n  var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.\n\n  var match; // start is an inclusive index. end, curr, and next are exclusive.\n\n  var start = 0,\n      end,\n      curr = 0,\n      next = 0;\n  var result = ''; // Invariants: 0 <= start <= length-1.\n  //   0 <= curr <= next <= max(0, length-2). curr - start <= width.\n  // Inside the loop:\n  //   A match implies length >= 2, so curr and next are <= length-2.\n\n  while (match = breakRe.exec(line)) {\n    next = match.index; // maintain invariant: curr - start <= width\n\n    if (next - start > width) {\n      end = curr > start ? curr : next; // derive end <= length-2\n\n      result += '\\n' + line.slice(start, end); // skip the space that was output as \\n\n\n      start = end + 1; // derive start <= length-1\n    }\n\n    curr = next;\n  } // By the invariants, start <= length-1, so there is something left over.\n  // It is either the whole string or a part starting from non-whitespace.\n\n\n  result += '\\n'; // Insert a break if the remainder is too long and there is a break available.\n\n  if (line.length - start > width && curr > start) {\n    result += line.slice(start, curr) + '\\n' + line.slice(curr + 1);\n  } else {\n    result += line.slice(start);\n  }\n\n  return result.slice(1); // drop extra \\n joiner\n} // Escapes a double-quoted string.\n\n\nfunction escapeString(string) {\n  var result = '';\n  var char = 0;\n  var escapeSeq;\n\n  for (var i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {\n    char = codePointAt(string, i);\n    escapeSeq = ESCAPE_SEQUENCES[char];\n\n    if (!escapeSeq && isPrintable(char)) {\n      result += string[i];\n      if (char >= 0x10000) result += string[i + 1];\n    } else {\n      result += escapeSeq || encodeHex(char);\n    }\n  }\n\n  return result;\n}\n\nfunction writeFlowSequence(state, level, object) {\n  var _result = '',\n      _tag = state.tag,\n      index,\n      length,\n      value;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    value = object[index];\n\n    if (state.replacer) {\n      value = state.replacer.call(object, String(index), value);\n    } // Write only valid elements, put null instead of invalid elements.\n\n\n    if (writeNode(state, level, value, false, false) || typeof value === 'undefined' && writeNode(state, level, null, false, false)) {\n      if (_result !== '') _result += ',' + (!state.condenseFlow ? ' ' : '');\n      _result += state.dump;\n    }\n  }\n\n  state.tag = _tag;\n  state.dump = '[' + _result + ']';\n}\n\nfunction writeBlockSequence(state, level, object, compact) {\n  var _result = '',\n      _tag = state.tag,\n      index,\n      length,\n      value;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    value = object[index];\n\n    if (state.replacer) {\n      value = state.replacer.call(object, String(index), value);\n    } // Write only valid elements, put null instead of invalid elements.\n\n\n    if (writeNode(state, level + 1, value, true, true, false, true) || typeof value === 'undefined' && writeNode(state, level + 1, null, true, true, false, true)) {\n      if (!compact || _result !== '') {\n        _result += generateNextLine(state, level);\n      }\n\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        _result += '-';\n      } else {\n        _result += '- ';\n      }\n\n      _result += state.dump;\n    }\n  }\n\n  state.tag = _tag;\n  state.dump = _result || '[]'; // Empty sequence if no valid values.\n}\n\nfunction writeFlowMapping(state, level, object) {\n  var _result = '',\n      _tag = state.tag,\n      objectKeyList = Object.keys(object),\n      index,\n      length,\n      objectKey,\n      objectValue,\n      pairBuffer;\n\n  for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n    pairBuffer = '';\n    if (_result !== '') pairBuffer += ', ';\n    if (state.condenseFlow) pairBuffer += '\"';\n    objectKey = objectKeyList[index];\n    objectValue = object[objectKey];\n\n    if (state.replacer) {\n      objectValue = state.replacer.call(object, objectKey, objectValue);\n    }\n\n    if (!writeNode(state, level, objectKey, false, false)) {\n      continue; // Skip this pair because of invalid key;\n    }\n\n    if (state.dump.length > 1024) pairBuffer += '? ';\n    pairBuffer += state.dump + (state.condenseFlow ? '\"' : '') + ':' + (state.condenseFlow ? '' : ' ');\n\n    if (!writeNode(state, level, objectValue, false, false)) {\n      continue; // Skip this pair because of invalid value.\n    }\n\n    pairBuffer += state.dump; // Both key and value are valid.\n\n    _result += pairBuffer;\n  }\n\n  state.tag = _tag;\n  state.dump = '{' + _result + '}';\n}\n\nfunction writeBlockMapping(state, level, object, compact) {\n  var _result = '',\n      _tag = state.tag,\n      objectKeyList = Object.keys(object),\n      index,\n      length,\n      objectKey,\n      objectValue,\n      explicitPair,\n      pairBuffer; // Allow sorting keys so that the output file is deterministic\n\n  if (state.sortKeys === true) {\n    // Default sorting\n    objectKeyList.sort();\n  } else if (typeof state.sortKeys === 'function') {\n    // Custom sort function\n    objectKeyList.sort(state.sortKeys);\n  } else if (state.sortKeys) {\n    // Something is wrong\n    throw new YAMLException('sortKeys must be a boolean or a function');\n  }\n\n  for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n    pairBuffer = '';\n\n    if (!compact || _result !== '') {\n      pairBuffer += generateNextLine(state, level);\n    }\n\n    objectKey = objectKeyList[index];\n    objectValue = object[objectKey];\n\n    if (state.replacer) {\n      objectValue = state.replacer.call(object, objectKey, objectValue);\n    }\n\n    if (!writeNode(state, level + 1, objectKey, true, true, true)) {\n      continue; // Skip this pair because of invalid key.\n    }\n\n    explicitPair = state.tag !== null && state.tag !== '?' || state.dump && state.dump.length > 1024;\n\n    if (explicitPair) {\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        pairBuffer += '?';\n      } else {\n        pairBuffer += '? ';\n      }\n    }\n\n    pairBuffer += state.dump;\n\n    if (explicitPair) {\n      pairBuffer += generateNextLine(state, level);\n    }\n\n    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {\n      continue; // Skip this pair because of invalid value.\n    }\n\n    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n      pairBuffer += ':';\n    } else {\n      pairBuffer += ': ';\n    }\n\n    pairBuffer += state.dump; // Both key and value are valid.\n\n    _result += pairBuffer;\n  }\n\n  state.tag = _tag;\n  state.dump = _result || '{}'; // Empty mapping if no valid pairs.\n}\n\nfunction detectType(state, object, explicit) {\n  var _result, typeList, index, length, type, style;\n\n  typeList = explicit ? state.explicitTypes : state.implicitTypes;\n\n  for (index = 0, length = typeList.length; index < length; index += 1) {\n    type = typeList[index];\n\n    if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === 'object' && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {\n      if (explicit) {\n        if (type.multi && type.representName) {\n          state.tag = type.representName(object);\n        } else {\n          state.tag = type.tag;\n        }\n      } else {\n        state.tag = '?';\n      }\n\n      if (type.represent) {\n        style = state.styleMap[type.tag] || type.defaultStyle;\n\n        if (_toString.call(type.represent) === '[object Function]') {\n          _result = type.represent(object, style);\n        } else if (_hasOwnProperty.call(type.represent, style)) {\n          _result = type.represent[style](object, style);\n        } else {\n          throw new YAMLException('!<' + type.tag + '> tag resolver accepts not \"' + style + '\" style');\n        }\n\n        state.dump = _result;\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n} // Serializes `object` and writes it to global `result`.\n// Returns true on success, or false on invalid object.\n//\n\n\nfunction writeNode(state, level, object, block, compact, iskey, isblockseq) {\n  state.tag = null;\n  state.dump = object;\n\n  if (!detectType(state, object, false)) {\n    detectType(state, object, true);\n  }\n\n  var type = _toString.call(state.dump);\n\n  var inblock = block;\n  var tagStr;\n\n  if (block) {\n    block = state.flowLevel < 0 || state.flowLevel > level;\n  }\n\n  var objectOrArray = type === '[object Object]' || type === '[object Array]',\n      duplicateIndex,\n      duplicate;\n\n  if (objectOrArray) {\n    duplicateIndex = state.duplicates.indexOf(object);\n    duplicate = duplicateIndex !== -1;\n  }\n\n  if (state.tag !== null && state.tag !== '?' || duplicate || state.indent !== 2 && level > 0) {\n    compact = false;\n  }\n\n  if (duplicate && state.usedDuplicates[duplicateIndex]) {\n    state.dump = '*ref_' + duplicateIndex;\n  } else {\n    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {\n      state.usedDuplicates[duplicateIndex] = true;\n    }\n\n    if (type === '[object Object]') {\n      if (block && Object.keys(state.dump).length !== 0) {\n        writeBlockMapping(state, level, state.dump, compact);\n\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + state.dump;\n        }\n      } else {\n        writeFlowMapping(state, level, state.dump);\n\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n        }\n      }\n    } else if (type === '[object Array]') {\n      if (block && state.dump.length !== 0) {\n        if (state.noArrayIndent && !isblockseq && level > 0) {\n          writeBlockSequence(state, level - 1, state.dump, compact);\n        } else {\n          writeBlockSequence(state, level, state.dump, compact);\n        }\n\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + state.dump;\n        }\n      } else {\n        writeFlowSequence(state, level, state.dump);\n\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n        }\n      }\n    } else if (type === '[object String]') {\n      if (state.tag !== '?') {\n        writeScalar(state, state.dump, level, iskey, inblock);\n      }\n    } else if (type === '[object Undefined]') {\n      return false;\n    } else {\n      if (state.skipInvalid) return false;\n      throw new YAMLException('unacceptable kind of an object to dump ' + type);\n    }\n\n    if (state.tag !== null && state.tag !== '?') {\n      // Need to encode all characters except those allowed by the spec:\n      //\n      // [35] ns-dec-digit    ::=  [#x30-#x39] /* 0-9 */\n      // [36] ns-hex-digit    ::=  ns-dec-digit\n      //                         | [#x41-#x46] /* A-F */ | [#x61-#x66] /* a-f */\n      // [37] ns-ascii-letter ::=  [#x41-#x5A] /* A-Z */ | [#x61-#x7A] /* a-z */\n      // [38] ns-word-char    ::=  ns-dec-digit | ns-ascii-letter | “-”\n      // [39] ns-uri-char     ::=  “%” ns-hex-digit ns-hex-digit | ns-word-char | “#”\n      //                         | “;” | “/” | “?” | “:” | “@” | “&” | “=” | “+” | “$” | “,”\n      //                         | “_” | “.” | “!” | “~” | “*” | “'” | “(” | “)” | “[” | “]”\n      //\n      // Also need to encode '!' because it has special meaning (end of tag prefix).\n      //\n      tagStr = encodeURI(state.tag[0] === '!' ? state.tag.slice(1) : state.tag).replace(/!/g, '%21');\n\n      if (state.tag[0] === '!') {\n        tagStr = '!' + tagStr;\n      } else if (tagStr.slice(0, 18) === 'tag:yaml.org,2002:') {\n        tagStr = '!!' + tagStr.slice(18);\n      } else {\n        tagStr = '!<' + tagStr + '>';\n      }\n\n      state.dump = tagStr + ' ' + state.dump;\n    }\n  }\n\n  return true;\n}\n\nfunction getDuplicateReferences(object, state) {\n  var objects = [],\n      duplicatesIndexes = [],\n      index,\n      length;\n  inspectNode(object, objects, duplicatesIndexes);\n\n  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {\n    state.duplicates.push(objects[duplicatesIndexes[index]]);\n  }\n\n  state.usedDuplicates = new Array(length);\n}\n\nfunction inspectNode(object, objects, duplicatesIndexes) {\n  var objectKeyList, index, length;\n\n  if (object !== null && typeof object === 'object') {\n    index = objects.indexOf(object);\n\n    if (index !== -1) {\n      if (duplicatesIndexes.indexOf(index) === -1) {\n        duplicatesIndexes.push(index);\n      }\n    } else {\n      objects.push(object);\n\n      if (Array.isArray(object)) {\n        for (index = 0, length = object.length; index < length; index += 1) {\n          inspectNode(object[index], objects, duplicatesIndexes);\n        }\n      } else {\n        objectKeyList = Object.keys(object);\n\n        for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);\n        }\n      }\n    }\n  }\n}\n\nfunction dump(input, options) {\n  options = options || {};\n  var state = new State(options);\n  if (!state.noRefs) getDuplicateReferences(input, state);\n  var value = input;\n\n  if (state.replacer) {\n    value = state.replacer.call({\n      '': value\n    }, '', value);\n  }\n\n  if (writeNode(state, 0, value, true, true)) return state.dump + '\\n';\n  return '';\n}\n\nmodule.exports.dump = dump;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/lib/dumper.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/exception.js":
/*!*******************************************************!*\
  !*** ../shared/node_modules/js-yaml/lib/exception.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";
eval("// YAML error class. http://stackoverflow.com/questions/8458984\n//\n\n\nfunction formatError(exception, compact) {\n  var where = '',\n      message = exception.reason || '(unknown reason)';\n  if (!exception.mark) return message;\n\n  if (exception.mark.name) {\n    where += 'in \"' + exception.mark.name + '\" ';\n  }\n\n  where += '(' + (exception.mark.line + 1) + ':' + (exception.mark.column + 1) + ')';\n\n  if (!compact && exception.mark.snippet) {\n    where += '\\n\\n' + exception.mark.snippet;\n  }\n\n  return message + ' ' + where;\n}\n\nfunction YAMLException(reason, mark) {\n  // Super constructor\n  Error.call(this);\n  this.name = 'YAMLException';\n  this.reason = reason;\n  this.mark = mark;\n  this.message = formatError(this, false); // Include stack trace in error object\n\n  if (Error.captureStackTrace) {\n    // Chrome and NodeJS\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    // FF, IE 10+ and Safari 6+. Fallback for others\n    this.stack = new Error().stack || '';\n  }\n} // Inherit from Error\n\n\nYAMLException.prototype = Object.create(Error.prototype);\nYAMLException.prototype.constructor = YAMLException;\n\nYAMLException.prototype.toString = function toString(compact) {\n  return this.name + ': ' + formatError(this, compact);\n};\n\nmodule.exports = YAMLException;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9leGNlcHRpb24uanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNhOztBQUdiLFNBQVNBLFdBQVQsQ0FBcUJDLFNBQXJCLEVBQWdDQyxPQUFoQyxFQUF5QztBQUN2QyxNQUFJQyxLQUFLLEdBQUcsRUFBWjtBQUFBLE1BQWdCQyxPQUFPLEdBQUdILFNBQVMsQ0FBQ0ksTUFBVixJQUFvQixrQkFBOUM7QUFFQSxNQUFJLENBQUNKLFNBQVMsQ0FBQ0ssSUFBZixFQUFxQixPQUFPRixPQUFQOztBQUVyQixNQUFJSCxTQUFTLENBQUNLLElBQVYsQ0FBZUMsSUFBbkIsRUFBeUI7QUFDdkJKLElBQUFBLEtBQUssSUFBSSxTQUFTRixTQUFTLENBQUNLLElBQVYsQ0FBZUMsSUFBeEIsR0FBK0IsSUFBeEM7QUFDRDs7QUFFREosRUFBQUEsS0FBSyxJQUFJLE9BQU9GLFNBQVMsQ0FBQ0ssSUFBVixDQUFlRSxJQUFmLEdBQXNCLENBQTdCLElBQWtDLEdBQWxDLElBQXlDUCxTQUFTLENBQUNLLElBQVYsQ0FBZUcsTUFBZixHQUF3QixDQUFqRSxJQUFzRSxHQUEvRTs7QUFFQSxNQUFJLENBQUNQLE9BQUQsSUFBWUQsU0FBUyxDQUFDSyxJQUFWLENBQWVJLE9BQS9CLEVBQXdDO0FBQ3RDUCxJQUFBQSxLQUFLLElBQUksU0FBU0YsU0FBUyxDQUFDSyxJQUFWLENBQWVJLE9BQWpDO0FBQ0Q7O0FBRUQsU0FBT04sT0FBTyxHQUFHLEdBQVYsR0FBZ0JELEtBQXZCO0FBQ0Q7O0FBR0QsU0FBU1EsYUFBVCxDQUF1Qk4sTUFBdkIsRUFBK0JDLElBQS9CLEVBQXFDO0FBQ25DO0FBQ0FNLEVBQUFBLEtBQUssQ0FBQ0MsSUFBTixDQUFXLElBQVg7QUFFQSxPQUFLTixJQUFMLEdBQVksZUFBWjtBQUNBLE9BQUtGLE1BQUwsR0FBY0EsTUFBZDtBQUNBLE9BQUtDLElBQUwsR0FBWUEsSUFBWjtBQUNBLE9BQUtGLE9BQUwsR0FBZUosV0FBVyxDQUFDLElBQUQsRUFBTyxLQUFQLENBQTFCLENBUG1DLENBU25DOztBQUNBLE1BQUlZLEtBQUssQ0FBQ0UsaUJBQVYsRUFBNkI7QUFDM0I7QUFDQUYsSUFBQUEsS0FBSyxDQUFDRSxpQkFBTixDQUF3QixJQUF4QixFQUE4QixLQUFLQyxXQUFuQztBQUNELEdBSEQsTUFHTztBQUNMO0FBQ0EsU0FBS0MsS0FBTCxHQUFjLElBQUlKLEtBQUosRUFBRCxDQUFjSSxLQUFkLElBQXVCLEVBQXBDO0FBQ0Q7QUFDRixDLENBR0Q7OztBQUNBTCxhQUFhLENBQUNNLFNBQWQsR0FBMEJDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjUCxLQUFLLENBQUNLLFNBQXBCLENBQTFCO0FBQ0FOLGFBQWEsQ0FBQ00sU0FBZCxDQUF3QkYsV0FBeEIsR0FBc0NKLGFBQXRDOztBQUdBQSxhQUFhLENBQUNNLFNBQWQsQ0FBd0JHLFFBQXhCLEdBQW1DLFNBQVNBLFFBQVQsQ0FBa0JsQixPQUFsQixFQUEyQjtBQUM1RCxTQUFPLEtBQUtLLElBQUwsR0FBWSxJQUFaLEdBQW1CUCxXQUFXLENBQUMsSUFBRCxFQUFPRSxPQUFQLENBQXJDO0FBQ0QsQ0FGRDs7QUFLQW1CLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlgsYUFBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9leGNlcHRpb24uanM/NmUzMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBZQU1MIGVycm9yIGNsYXNzLiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzg0NTg5ODRcbi8vXG4ndXNlIHN0cmljdCc7XG5cblxuZnVuY3Rpb24gZm9ybWF0RXJyb3IoZXhjZXB0aW9uLCBjb21wYWN0KSB7XG4gIHZhciB3aGVyZSA9ICcnLCBtZXNzYWdlID0gZXhjZXB0aW9uLnJlYXNvbiB8fCAnKHVua25vd24gcmVhc29uKSc7XG5cbiAgaWYgKCFleGNlcHRpb24ubWFyaykgcmV0dXJuIG1lc3NhZ2U7XG5cbiAgaWYgKGV4Y2VwdGlvbi5tYXJrLm5hbWUpIHtcbiAgICB3aGVyZSArPSAnaW4gXCInICsgZXhjZXB0aW9uLm1hcmsubmFtZSArICdcIiAnO1xuICB9XG5cbiAgd2hlcmUgKz0gJygnICsgKGV4Y2VwdGlvbi5tYXJrLmxpbmUgKyAxKSArICc6JyArIChleGNlcHRpb24ubWFyay5jb2x1bW4gKyAxKSArICcpJztcblxuICBpZiAoIWNvbXBhY3QgJiYgZXhjZXB0aW9uLm1hcmsuc25pcHBldCkge1xuICAgIHdoZXJlICs9ICdcXG5cXG4nICsgZXhjZXB0aW9uLm1hcmsuc25pcHBldDtcbiAgfVxuXG4gIHJldHVybiBtZXNzYWdlICsgJyAnICsgd2hlcmU7XG59XG5cblxuZnVuY3Rpb24gWUFNTEV4Y2VwdGlvbihyZWFzb24sIG1hcmspIHtcbiAgLy8gU3VwZXIgY29uc3RydWN0b3JcbiAgRXJyb3IuY2FsbCh0aGlzKTtcblxuICB0aGlzLm5hbWUgPSAnWUFNTEV4Y2VwdGlvbic7XG4gIHRoaXMucmVhc29uID0gcmVhc29uO1xuICB0aGlzLm1hcmsgPSBtYXJrO1xuICB0aGlzLm1lc3NhZ2UgPSBmb3JtYXRFcnJvcih0aGlzLCBmYWxzZSk7XG5cbiAgLy8gSW5jbHVkZSBzdGFjayB0cmFjZSBpbiBlcnJvciBvYmplY3RcbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgLy8gQ2hyb21lIGFuZCBOb2RlSlNcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBGRiwgSUUgMTArIGFuZCBTYWZhcmkgNisuIEZhbGxiYWNrIGZvciBvdGhlcnNcbiAgICB0aGlzLnN0YWNrID0gKG5ldyBFcnJvcigpKS5zdGFjayB8fCAnJztcbiAgfVxufVxuXG5cbi8vIEluaGVyaXQgZnJvbSBFcnJvclxuWUFNTEV4Y2VwdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG5ZQU1MRXhjZXB0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFlBTUxFeGNlcHRpb247XG5cblxuWUFNTEV4Y2VwdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhjb21wYWN0KSB7XG4gIHJldHVybiB0aGlzLm5hbWUgKyAnOiAnICsgZm9ybWF0RXJyb3IodGhpcywgY29tcGFjdCk7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gWUFNTEV4Y2VwdGlvbjtcbiJdLCJuYW1lcyI6WyJmb3JtYXRFcnJvciIsImV4Y2VwdGlvbiIsImNvbXBhY3QiLCJ3aGVyZSIsIm1lc3NhZ2UiLCJyZWFzb24iLCJtYXJrIiwibmFtZSIsImxpbmUiLCJjb2x1bW4iLCJzbmlwcGV0IiwiWUFNTEV4Y2VwdGlvbiIsIkVycm9yIiwiY2FsbCIsImNhcHR1cmVTdGFja1RyYWNlIiwiY29uc3RydWN0b3IiLCJzdGFjayIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsInRvU3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/lib/exception.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/loader.js":
/*!****************************************************!*\
  !*** ../shared/node_modules/js-yaml/lib/loader.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/*eslint-disable max-len,no-use-before-define*/\n\nvar common = __webpack_require__(/*! ./common */ \"../shared/node_modules/js-yaml/lib/common.js\");\n\nvar YAMLException = __webpack_require__(/*! ./exception */ \"../shared/node_modules/js-yaml/lib/exception.js\");\n\nvar makeSnippet = __webpack_require__(/*! ./snippet */ \"../shared/node_modules/js-yaml/lib/snippet.js\");\n\nvar DEFAULT_SCHEMA = __webpack_require__(/*! ./schema/default */ \"../shared/node_modules/js-yaml/lib/schema/default.js\");\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar CONTEXT_FLOW_IN = 1;\nvar CONTEXT_FLOW_OUT = 2;\nvar CONTEXT_BLOCK_IN = 3;\nvar CONTEXT_BLOCK_OUT = 4;\nvar CHOMPING_CLIP = 1;\nvar CHOMPING_STRIP = 2;\nvar CHOMPING_KEEP = 3;\nvar PATTERN_NON_PRINTABLE = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x84\\x86-\\x9F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nvar PATTERN_NON_ASCII_LINE_BREAKS = /[\\x85\\u2028\\u2029]/;\nvar PATTERN_FLOW_INDICATORS = /[,\\[\\]\\{\\}]/;\nvar PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\\-]+!)$/i;\nvar PATTERN_TAG_URI = /^(?:!|[^,\\[\\]\\{\\}])(?:%[0-9a-f]{2}|[0-9a-z\\-#;\\/\\?:@&=\\+\\$,_\\.!~\\*'\\(\\)\\[\\]])*$/i;\n\nfunction _class(obj) {\n  return Object.prototype.toString.call(obj);\n}\n\nfunction is_EOL(c) {\n  return c === 0x0A\n  /* LF */\n  || c === 0x0D\n  /* CR */\n  ;\n}\n\nfunction is_WHITE_SPACE(c) {\n  return c === 0x09\n  /* Tab */\n  || c === 0x20\n  /* Space */\n  ;\n}\n\nfunction is_WS_OR_EOL(c) {\n  return c === 0x09\n  /* Tab */\n  || c === 0x20\n  /* Space */\n  || c === 0x0A\n  /* LF */\n  || c === 0x0D\n  /* CR */\n  ;\n}\n\nfunction is_FLOW_INDICATOR(c) {\n  return c === 0x2C\n  /* , */\n  || c === 0x5B\n  /* [ */\n  || c === 0x5D\n  /* ] */\n  || c === 0x7B\n  /* { */\n  || c === 0x7D\n  /* } */\n  ;\n}\n\nfunction fromHexCode(c) {\n  var lc;\n\n  if (0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  ) {\n    return c - 0x30;\n  }\n  /*eslint-disable no-bitwise*/\n\n\n  lc = c | 0x20;\n\n  if (0x61\n  /* a */\n  <= lc && lc <= 0x66\n  /* f */\n  ) {\n    return lc - 0x61 + 10;\n  }\n\n  return -1;\n}\n\nfunction escapedHexLen(c) {\n  if (c === 0x78\n  /* x */\n  ) {\n    return 2;\n  }\n\n  if (c === 0x75\n  /* u */\n  ) {\n    return 4;\n  }\n\n  if (c === 0x55\n  /* U */\n  ) {\n    return 8;\n  }\n\n  return 0;\n}\n\nfunction fromDecimalCode(c) {\n  if (0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  ) {\n    return c - 0x30;\n  }\n\n  return -1;\n}\n\nfunction simpleEscapeSequence(c) {\n  /* eslint-disable indent */\n  return c === 0x30\n  /* 0 */\n  ? '\\x00' : c === 0x61\n  /* a */\n  ? '\\x07' : c === 0x62\n  /* b */\n  ? '\\x08' : c === 0x74\n  /* t */\n  ? '\\x09' : c === 0x09\n  /* Tab */\n  ? '\\x09' : c === 0x6E\n  /* n */\n  ? '\\x0A' : c === 0x76\n  /* v */\n  ? '\\x0B' : c === 0x66\n  /* f */\n  ? '\\x0C' : c === 0x72\n  /* r */\n  ? '\\x0D' : c === 0x65\n  /* e */\n  ? '\\x1B' : c === 0x20\n  /* Space */\n  ? ' ' : c === 0x22\n  /* \" */\n  ? '\\x22' : c === 0x2F\n  /* / */\n  ? '/' : c === 0x5C\n  /* \\ */\n  ? '\\x5C' : c === 0x4E\n  /* N */\n  ? '\\x85' : c === 0x5F\n  /* _ */\n  ? '\\xA0' : c === 0x4C\n  /* L */\n  ? '\\u2028' : c === 0x50\n  /* P */\n  ? '\\u2029' : '';\n}\n\nfunction charFromCodepoint(c) {\n  if (c <= 0xFFFF) {\n    return String.fromCharCode(c);\n  } // Encode UTF-16 surrogate pair\n  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF\n\n\n  return String.fromCharCode((c - 0x010000 >> 10) + 0xD800, (c - 0x010000 & 0x03FF) + 0xDC00);\n}\n\nvar simpleEscapeCheck = new Array(256); // integer, for fast access\n\nvar simpleEscapeMap = new Array(256);\n\nfor (var i = 0; i < 256; i++) {\n  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;\n  simpleEscapeMap[i] = simpleEscapeSequence(i);\n}\n\nfunction State(input, options) {\n  this.input = input;\n  this.filename = options['filename'] || null;\n  this.schema = options['schema'] || DEFAULT_SCHEMA;\n  this.onWarning = options['onWarning'] || null; // (Hidden) Remove? makes the loader to expect YAML 1.1 documents\n  // if such documents have no explicit %YAML directive\n\n  this.legacy = options['legacy'] || false;\n  this.json = options['json'] || false;\n  this.listener = options['listener'] || null;\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.typeMap = this.schema.compiledTypeMap;\n  this.length = input.length;\n  this.position = 0;\n  this.line = 0;\n  this.lineStart = 0;\n  this.lineIndent = 0; // position of first leading tab in the current line,\n  // used to make sure there are no tabs in the indentation\n\n  this.firstTabInLine = -1;\n  this.documents = [];\n  /*\n  this.version;\n  this.checkLineBreaks;\n  this.tagMap;\n  this.anchorMap;\n  this.tag;\n  this.anchor;\n  this.kind;\n  this.result;*/\n}\n\nfunction generateError(state, message) {\n  var mark = {\n    name: state.filename,\n    buffer: state.input.slice(0, -1),\n    // omit trailing \\0\n    position: state.position,\n    line: state.line,\n    column: state.position - state.lineStart\n  };\n  mark.snippet = makeSnippet(mark);\n  return new YAMLException(message, mark);\n}\n\nfunction throwError(state, message) {\n  throw generateError(state, message);\n}\n\nfunction throwWarning(state, message) {\n  if (state.onWarning) {\n    state.onWarning.call(null, generateError(state, message));\n  }\n}\n\nvar directiveHandlers = {\n  YAML: function handleYamlDirective(state, name, args) {\n    var match, major, minor;\n\n    if (state.version !== null) {\n      throwError(state, 'duplication of %YAML directive');\n    }\n\n    if (args.length !== 1) {\n      throwError(state, 'YAML directive accepts exactly one argument');\n    }\n\n    match = /^([0-9]+)\\.([0-9]+)$/.exec(args[0]);\n\n    if (match === null) {\n      throwError(state, 'ill-formed argument of the YAML directive');\n    }\n\n    major = parseInt(match[1], 10);\n    minor = parseInt(match[2], 10);\n\n    if (major !== 1) {\n      throwError(state, 'unacceptable YAML version of the document');\n    }\n\n    state.version = args[0];\n    state.checkLineBreaks = minor < 2;\n\n    if (minor !== 1 && minor !== 2) {\n      throwWarning(state, 'unsupported YAML version of the document');\n    }\n  },\n  TAG: function handleTagDirective(state, name, args) {\n    var handle, prefix;\n\n    if (args.length !== 2) {\n      throwError(state, 'TAG directive accepts exactly two arguments');\n    }\n\n    handle = args[0];\n    prefix = args[1];\n\n    if (!PATTERN_TAG_HANDLE.test(handle)) {\n      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');\n    }\n\n    if (_hasOwnProperty.call(state.tagMap, handle)) {\n      throwError(state, 'there is a previously declared suffix for \"' + handle + '\" tag handle');\n    }\n\n    if (!PATTERN_TAG_URI.test(prefix)) {\n      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');\n    }\n\n    try {\n      prefix = decodeURIComponent(prefix);\n    } catch (err) {\n      throwError(state, 'tag prefix is malformed: ' + prefix);\n    }\n\n    state.tagMap[handle] = prefix;\n  }\n};\n\nfunction captureSegment(state, start, end, checkJson) {\n  var _position, _length, _character, _result;\n\n  if (start < end) {\n    _result = state.input.slice(start, end);\n\n    if (checkJson) {\n      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {\n        _character = _result.charCodeAt(_position);\n\n        if (!(_character === 0x09 || 0x20 <= _character && _character <= 0x10FFFF)) {\n          throwError(state, 'expected valid JSON character');\n        }\n      }\n    } else if (PATTERN_NON_PRINTABLE.test(_result)) {\n      throwError(state, 'the stream contains non-printable characters');\n    }\n\n    state.result += _result;\n  }\n}\n\nfunction mergeMappings(state, destination, source, overridableKeys) {\n  var sourceKeys, key, index, quantity;\n\n  if (!common.isObject(source)) {\n    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');\n  }\n\n  sourceKeys = Object.keys(source);\n\n  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {\n    key = sourceKeys[index];\n\n    if (!_hasOwnProperty.call(destination, key)) {\n      destination[key] = source[key];\n      overridableKeys[key] = true;\n    }\n  }\n}\n\nfunction storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {\n  var index, quantity; // The output is a plain object here, so keys can only be strings.\n  // We need to convert keyNode to a string, but doing so can hang the process\n  // (deeply nested arrays that explode exponentially using aliases).\n\n  if (Array.isArray(keyNode)) {\n    keyNode = Array.prototype.slice.call(keyNode);\n\n    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {\n      if (Array.isArray(keyNode[index])) {\n        throwError(state, 'nested arrays are not supported inside keys');\n      }\n\n      if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {\n        keyNode[index] = '[object Object]';\n      }\n    }\n  } // Avoid code execution in load() via toString property\n  // (still use its own toString for arrays, timestamps,\n  // and whatever user schema extensions happen to have @@toStringTag)\n\n\n  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {\n    keyNode = '[object Object]';\n  }\n\n  keyNode = String(keyNode);\n\n  if (_result === null) {\n    _result = {};\n  }\n\n  if (keyTag === 'tag:yaml.org,2002:merge') {\n    if (Array.isArray(valueNode)) {\n      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {\n        mergeMappings(state, _result, valueNode[index], overridableKeys);\n      }\n    } else {\n      mergeMappings(state, _result, valueNode, overridableKeys);\n    }\n  } else {\n    if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {\n      state.line = startLine || state.line;\n      state.lineStart = startLineStart || state.lineStart;\n      state.position = startPos || state.position;\n      throwError(state, 'duplicated mapping key');\n    } // used for this specific key only because Object.defineProperty is slow\n\n\n    if (keyNode === '__proto__') {\n      Object.defineProperty(_result, keyNode, {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: valueNode\n      });\n    } else {\n      _result[keyNode] = valueNode;\n    }\n\n    delete overridableKeys[keyNode];\n  }\n\n  return _result;\n}\n\nfunction readLineBreak(state) {\n  var ch;\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x0A\n  /* LF */\n  ) {\n    state.position++;\n  } else if (ch === 0x0D\n  /* CR */\n  ) {\n    state.position++;\n\n    if (state.input.charCodeAt(state.position) === 0x0A\n    /* LF */\n    ) {\n      state.position++;\n    }\n  } else {\n    throwError(state, 'a line break is expected');\n  }\n\n  state.line += 1;\n  state.lineStart = state.position;\n  state.firstTabInLine = -1;\n}\n\nfunction skipSeparationSpace(state, allowComments, checkIndent) {\n  var lineBreaks = 0,\n      ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    while (is_WHITE_SPACE(ch)) {\n      if (ch === 0x09\n      /* Tab */\n      && state.firstTabInLine === -1) {\n        state.firstTabInLine = state.position;\n      }\n\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (allowComments && ch === 0x23\n    /* # */\n    ) {\n      do {\n        ch = state.input.charCodeAt(++state.position);\n      } while (ch !== 0x0A\n      /* LF */\n      && ch !== 0x0D\n      /* CR */\n      && ch !== 0);\n    }\n\n    if (is_EOL(ch)) {\n      readLineBreak(state);\n      ch = state.input.charCodeAt(state.position);\n      lineBreaks++;\n      state.lineIndent = 0;\n\n      while (ch === 0x20\n      /* Space */\n      ) {\n        state.lineIndent++;\n        ch = state.input.charCodeAt(++state.position);\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {\n    throwWarning(state, 'deficient indentation');\n  }\n\n  return lineBreaks;\n}\n\nfunction testDocumentSeparator(state) {\n  var _position = state.position,\n      ch;\n  ch = state.input.charCodeAt(_position); // Condition state.position === state.lineStart is tested\n  // in parent on each call, for efficiency. No needs to test here again.\n\n  if ((ch === 0x2D\n  /* - */\n  || ch === 0x2E\n  /* . */\n  ) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {\n    _position += 3;\n    ch = state.input.charCodeAt(_position);\n\n    if (ch === 0 || is_WS_OR_EOL(ch)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction writeFoldedLines(state, count) {\n  if (count === 1) {\n    state.result += ' ';\n  } else if (count > 1) {\n    state.result += common.repeat('\\n', count - 1);\n  }\n}\n\nfunction readPlainScalar(state, nodeIndent, withinFlowCollection) {\n  var preceding,\n      following,\n      captureStart,\n      captureEnd,\n      hasPendingContent,\n      _line,\n      _lineStart,\n      _lineIndent,\n      _kind = state.kind,\n      _result = state.result,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 0x23\n  /* # */\n  || ch === 0x26\n  /* & */\n  || ch === 0x2A\n  /* * */\n  || ch === 0x21\n  /* ! */\n  || ch === 0x7C\n  /* | */\n  || ch === 0x3E\n  /* > */\n  || ch === 0x27\n  /* ' */\n  || ch === 0x22\n  /* \" */\n  || ch === 0x25\n  /* % */\n  || ch === 0x40\n  /* @ */\n  || ch === 0x60\n  /* ` */\n  ) {\n    return false;\n  }\n\n  if (ch === 0x3F\n  /* ? */\n  || ch === 0x2D\n  /* - */\n  ) {\n    following = state.input.charCodeAt(state.position + 1);\n\n    if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {\n      return false;\n    }\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  captureStart = captureEnd = state.position;\n  hasPendingContent = false;\n\n  while (ch !== 0) {\n    if (ch === 0x3A\n    /* : */\n    ) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {\n        break;\n      }\n    } else if (ch === 0x23\n    /* # */\n    ) {\n      preceding = state.input.charCodeAt(state.position - 1);\n\n      if (is_WS_OR_EOL(preceding)) {\n        break;\n      }\n    } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {\n      break;\n    } else if (is_EOL(ch)) {\n      _line = state.line;\n      _lineStart = state.lineStart;\n      _lineIndent = state.lineIndent;\n      skipSeparationSpace(state, false, -1);\n\n      if (state.lineIndent >= nodeIndent) {\n        hasPendingContent = true;\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      } else {\n        state.position = captureEnd;\n        state.line = _line;\n        state.lineStart = _lineStart;\n        state.lineIndent = _lineIndent;\n        break;\n      }\n    }\n\n    if (hasPendingContent) {\n      captureSegment(state, captureStart, captureEnd, false);\n      writeFoldedLines(state, state.line - _line);\n      captureStart = captureEnd = state.position;\n      hasPendingContent = false;\n    }\n\n    if (!is_WHITE_SPACE(ch)) {\n      captureEnd = state.position + 1;\n    }\n\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  captureSegment(state, captureStart, captureEnd, false);\n\n  if (state.result) {\n    return true;\n  }\n\n  state.kind = _kind;\n  state.result = _result;\n  return false;\n}\n\nfunction readSingleQuotedScalar(state, nodeIndent) {\n  var ch, captureStart, captureEnd;\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x27\n  /* ' */\n  ) {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x27\n    /* ' */\n    ) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n\n      if (ch === 0x27\n      /* ' */\n      ) {\n        captureStart = state.position;\n        state.position++;\n        captureEnd = state.position;\n      } else {\n        return true;\n      }\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a single quoted scalar');\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a single quoted scalar');\n}\n\nfunction readDoubleQuotedScalar(state, nodeIndent) {\n  var captureStart, captureEnd, hexLength, hexResult, tmp, ch;\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x22\n  /* \" */\n  ) {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x22\n    /* \" */\n    ) {\n      captureSegment(state, captureStart, state.position, true);\n      state.position++;\n      return true;\n    } else if (ch === 0x5C\n    /* \\ */\n    ) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n\n      if (is_EOL(ch)) {\n        skipSeparationSpace(state, false, nodeIndent); // TODO: rework to inline fn with no type cast?\n      } else if (ch < 256 && simpleEscapeCheck[ch]) {\n        state.result += simpleEscapeMap[ch];\n        state.position++;\n      } else if ((tmp = escapedHexLen(ch)) > 0) {\n        hexLength = tmp;\n        hexResult = 0;\n\n        for (; hexLength > 0; hexLength--) {\n          ch = state.input.charCodeAt(++state.position);\n\n          if ((tmp = fromHexCode(ch)) >= 0) {\n            hexResult = (hexResult << 4) + tmp;\n          } else {\n            throwError(state, 'expected hexadecimal character');\n          }\n        }\n\n        state.result += charFromCodepoint(hexResult);\n        state.position++;\n      } else {\n        throwError(state, 'unknown escape sequence');\n      }\n\n      captureStart = captureEnd = state.position;\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a double quoted scalar');\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a double quoted scalar');\n}\n\nfunction readFlowCollection(state, nodeIndent) {\n  var readNext = true,\n      _line,\n      _lineStart,\n      _pos,\n      _tag = state.tag,\n      _result,\n      _anchor = state.anchor,\n      following,\n      terminator,\n      isPair,\n      isExplicitPair,\n      isMapping,\n      overridableKeys = Object.create(null),\n      keyNode,\n      keyTag,\n      valueNode,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x5B\n  /* [ */\n  ) {\n    terminator = 0x5D;\n    /* ] */\n\n    isMapping = false;\n    _result = [];\n  } else if (ch === 0x7B\n  /* { */\n  ) {\n    terminator = 0x7D;\n    /* } */\n\n    isMapping = true;\n    _result = {};\n  } else {\n    return false;\n  }\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  while (ch !== 0) {\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === terminator) {\n      state.position++;\n      state.tag = _tag;\n      state.anchor = _anchor;\n      state.kind = isMapping ? 'mapping' : 'sequence';\n      state.result = _result;\n      return true;\n    } else if (!readNext) {\n      throwError(state, 'missed comma between flow collection entries');\n    } else if (ch === 0x2C\n    /* , */\n    ) {\n      // \"flow collection entries can never be completely empty\", as per YAML 1.2, section 7.4\n      throwError(state, \"expected the node content, but found ','\");\n    }\n\n    keyTag = keyNode = valueNode = null;\n    isPair = isExplicitPair = false;\n\n    if (ch === 0x3F\n    /* ? */\n    ) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following)) {\n        isPair = isExplicitPair = true;\n        state.position++;\n        skipSeparationSpace(state, true, nodeIndent);\n      }\n    }\n\n    _line = state.line; // Save the current line.\n\n    _lineStart = state.lineStart;\n    _pos = state.position;\n    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n    keyTag = state.tag;\n    keyNode = state.result;\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n\n    if ((isExplicitPair || state.line === _line) && ch === 0x3A\n    /* : */\n    ) {\n      isPair = true;\n      ch = state.input.charCodeAt(++state.position);\n      skipSeparationSpace(state, true, nodeIndent);\n      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n      valueNode = state.result;\n    }\n\n    if (isMapping) {\n      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);\n    } else if (isPair) {\n      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));\n    } else {\n      _result.push(keyNode);\n    }\n\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === 0x2C\n    /* , */\n    ) {\n      readNext = true;\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      readNext = false;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a flow collection');\n}\n\nfunction readBlockScalar(state, nodeIndent) {\n  var captureStart,\n      folding,\n      chomping = CHOMPING_CLIP,\n      didReadContent = false,\n      detectedIndent = false,\n      textIndent = nodeIndent,\n      emptyLines = 0,\n      atMoreIndented = false,\n      tmp,\n      ch;\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x7C\n  /* | */\n  ) {\n    folding = false;\n  } else if (ch === 0x3E\n  /* > */\n  ) {\n    folding = true;\n  } else {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n\n  while (ch !== 0) {\n    ch = state.input.charCodeAt(++state.position);\n\n    if (ch === 0x2B\n    /* + */\n    || ch === 0x2D\n    /* - */\n    ) {\n      if (CHOMPING_CLIP === chomping) {\n        chomping = ch === 0x2B\n        /* + */\n        ? CHOMPING_KEEP : CHOMPING_STRIP;\n      } else {\n        throwError(state, 'repeat of a chomping mode identifier');\n      }\n    } else if ((tmp = fromDecimalCode(ch)) >= 0) {\n      if (tmp === 0) {\n        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');\n      } else if (!detectedIndent) {\n        textIndent = nodeIndent + tmp - 1;\n        detectedIndent = true;\n      } else {\n        throwError(state, 'repeat of an indentation width identifier');\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (is_WHITE_SPACE(ch)) {\n    do {\n      ch = state.input.charCodeAt(++state.position);\n    } while (is_WHITE_SPACE(ch));\n\n    if (ch === 0x23\n    /* # */\n    ) {\n      do {\n        ch = state.input.charCodeAt(++state.position);\n      } while (!is_EOL(ch) && ch !== 0);\n    }\n  }\n\n  while (ch !== 0) {\n    readLineBreak(state);\n    state.lineIndent = 0;\n    ch = state.input.charCodeAt(state.position);\n\n    while ((!detectedIndent || state.lineIndent < textIndent) && ch === 0x20\n    /* Space */\n    ) {\n      state.lineIndent++;\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (!detectedIndent && state.lineIndent > textIndent) {\n      textIndent = state.lineIndent;\n    }\n\n    if (is_EOL(ch)) {\n      emptyLines++;\n      continue;\n    } // End of the scalar.\n\n\n    if (state.lineIndent < textIndent) {\n      // Perform the chomping.\n      if (chomping === CHOMPING_KEEP) {\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n      } else if (chomping === CHOMPING_CLIP) {\n        if (didReadContent) {\n          // i.e. only if the scalar is not empty.\n          state.result += '\\n';\n        }\n      } // Break this `while` cycle and go to the funciton's epilogue.\n\n\n      break;\n    } // Folded style: use fancy rules to handle line breaks.\n\n\n    if (folding) {\n      // Lines starting with white space characters (more-indented lines) are not folded.\n      if (is_WHITE_SPACE(ch)) {\n        atMoreIndented = true; // except for the first content line (cf. Example 8.1)\n\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines); // End of more-indented block.\n      } else if (atMoreIndented) {\n        atMoreIndented = false;\n        state.result += common.repeat('\\n', emptyLines + 1); // Just one line break - perceive as the same line.\n      } else if (emptyLines === 0) {\n        if (didReadContent) {\n          // i.e. only if we have already read some scalar content.\n          state.result += ' ';\n        } // Several line breaks - perceive as different lines.\n\n      } else {\n        state.result += common.repeat('\\n', emptyLines);\n      } // Literal style: just add exact number of line breaks between content lines.\n\n    } else {\n      // Keep all line breaks except the header line break.\n      state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n    }\n\n    didReadContent = true;\n    detectedIndent = true;\n    emptyLines = 0;\n    captureStart = state.position;\n\n    while (!is_EOL(ch) && ch !== 0) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    captureSegment(state, captureStart, state.position, false);\n  }\n\n  return true;\n}\n\nfunction readBlockSequence(state, nodeIndent) {\n  var _line,\n      _tag = state.tag,\n      _anchor = state.anchor,\n      _result = [],\n      following,\n      detected = false,\n      ch; // there is a leading tab before this token, so it can't be a block sequence/mapping;\n  // it can still be flow sequence/mapping or a scalar\n\n\n  if (state.firstTabInLine !== -1) return false;\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    if (state.firstTabInLine !== -1) {\n      state.position = state.firstTabInLine;\n      throwError(state, 'tab characters must not be used in indentation');\n    }\n\n    if (ch !== 0x2D\n    /* - */\n    ) {\n      break;\n    }\n\n    following = state.input.charCodeAt(state.position + 1);\n\n    if (!is_WS_OR_EOL(following)) {\n      break;\n    }\n\n    detected = true;\n    state.position++;\n\n    if (skipSeparationSpace(state, true, -1)) {\n      if (state.lineIndent <= nodeIndent) {\n        _result.push(null);\n\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      }\n    }\n\n    _line = state.line;\n    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);\n\n    _result.push(state.result);\n\n    skipSeparationSpace(state, true, -1);\n    ch = state.input.charCodeAt(state.position);\n\n    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {\n      throwError(state, 'bad indentation of a sequence entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'sequence';\n    state.result = _result;\n    return true;\n  }\n\n  return false;\n}\n\nfunction readBlockMapping(state, nodeIndent, flowIndent) {\n  var following,\n      allowCompact,\n      _line,\n      _keyLine,\n      _keyLineStart,\n      _keyPos,\n      _tag = state.tag,\n      _anchor = state.anchor,\n      _result = {},\n      overridableKeys = Object.create(null),\n      keyTag = null,\n      keyNode = null,\n      valueNode = null,\n      atExplicitKey = false,\n      detected = false,\n      ch; // there is a leading tab before this token, so it can't be a block sequence/mapping;\n  // it can still be flow sequence/mapping or a scalar\n\n\n  if (state.firstTabInLine !== -1) return false;\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    if (!atExplicitKey && state.firstTabInLine !== -1) {\n      state.position = state.firstTabInLine;\n      throwError(state, 'tab characters must not be used in indentation');\n    }\n\n    following = state.input.charCodeAt(state.position + 1);\n    _line = state.line; // Save the current line.\n    //\n    // Explicit notation case. There are two separate blocks:\n    // first for the key (denoted by \"?\") and second for the value (denoted by \":\")\n    //\n\n    if ((ch === 0x3F\n    /* ? */\n    || ch === 0x3A\n    /* : */\n    ) && is_WS_OR_EOL(following)) {\n      if (ch === 0x3F\n      /* ? */\n      ) {\n        if (atExplicitKey) {\n          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n          keyTag = keyNode = valueNode = null;\n        }\n\n        detected = true;\n        atExplicitKey = true;\n        allowCompact = true;\n      } else if (atExplicitKey) {\n        // i.e. 0x3A/* : */ === character after the explicit key.\n        atExplicitKey = false;\n        allowCompact = true;\n      } else {\n        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');\n      }\n\n      state.position += 1;\n      ch = following; //\n      // Implicit notation case. Flow-style node as the key first, then \":\", and the value.\n      //\n    } else {\n      _keyLine = state.line;\n      _keyLineStart = state.lineStart;\n      _keyPos = state.position;\n\n      if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {\n        // Neither implicit nor explicit notation.\n        // Reading is done. Go to the epilogue.\n        break;\n      }\n\n      if (state.line === _line) {\n        ch = state.input.charCodeAt(state.position);\n\n        while (is_WHITE_SPACE(ch)) {\n          ch = state.input.charCodeAt(++state.position);\n        }\n\n        if (ch === 0x3A\n        /* : */\n        ) {\n          ch = state.input.charCodeAt(++state.position);\n\n          if (!is_WS_OR_EOL(ch)) {\n            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');\n          }\n\n          if (atExplicitKey) {\n            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n            keyTag = keyNode = valueNode = null;\n          }\n\n          detected = true;\n          atExplicitKey = false;\n          allowCompact = false;\n          keyTag = state.tag;\n          keyNode = state.result;\n        } else if (detected) {\n          throwError(state, 'can not read an implicit mapping pair; a colon is missed');\n        } else {\n          state.tag = _tag;\n          state.anchor = _anchor;\n          return true; // Keep the result of `composeNode`.\n        }\n      } else if (detected) {\n        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');\n      } else {\n        state.tag = _tag;\n        state.anchor = _anchor;\n        return true; // Keep the result of `composeNode`.\n      }\n    } //\n    // Common reading code for both explicit and implicit notations.\n    //\n\n\n    if (state.line === _line || state.lineIndent > nodeIndent) {\n      if (atExplicitKey) {\n        _keyLine = state.line;\n        _keyLineStart = state.lineStart;\n        _keyPos = state.position;\n      }\n\n      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {\n        if (atExplicitKey) {\n          keyNode = state.result;\n        } else {\n          valueNode = state.result;\n        }\n      }\n\n      if (!atExplicitKey) {\n        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);\n        keyTag = keyNode = valueNode = null;\n      }\n\n      skipSeparationSpace(state, true, -1);\n      ch = state.input.charCodeAt(state.position);\n    }\n\n    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {\n      throwError(state, 'bad indentation of a mapping entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  } //\n  // Epilogue.\n  //\n  // Special case: last mapping's node contains only the key in explicit notation.\n\n\n  if (atExplicitKey) {\n    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n  } // Expose the resulting mapping.\n\n\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'mapping';\n    state.result = _result;\n  }\n\n  return detected;\n}\n\nfunction readTagProperty(state) {\n  var _position,\n      isVerbatim = false,\n      isNamed = false,\n      tagHandle,\n      tagName,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x21\n  /* ! */\n  ) return false;\n\n  if (state.tag !== null) {\n    throwError(state, 'duplication of a tag property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  if (ch === 0x3C\n  /* < */\n  ) {\n    isVerbatim = true;\n    ch = state.input.charCodeAt(++state.position);\n  } else if (ch === 0x21\n  /* ! */\n  ) {\n    isNamed = true;\n    tagHandle = '!!';\n    ch = state.input.charCodeAt(++state.position);\n  } else {\n    tagHandle = '!';\n  }\n\n  _position = state.position;\n\n  if (isVerbatim) {\n    do {\n      ch = state.input.charCodeAt(++state.position);\n    } while (ch !== 0 && ch !== 0x3E\n    /* > */\n    );\n\n    if (state.position < state.length) {\n      tagName = state.input.slice(_position, state.position);\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      throwError(state, 'unexpected end of the stream within a verbatim tag');\n    }\n  } else {\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n      if (ch === 0x21\n      /* ! */\n      ) {\n        if (!isNamed) {\n          tagHandle = state.input.slice(_position - 1, state.position + 1);\n\n          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {\n            throwError(state, 'named tag handle cannot contain such characters');\n          }\n\n          isNamed = true;\n          _position = state.position + 1;\n        } else {\n          throwError(state, 'tag suffix cannot contain exclamation marks');\n        }\n      }\n\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    tagName = state.input.slice(_position, state.position);\n\n    if (PATTERN_FLOW_INDICATORS.test(tagName)) {\n      throwError(state, 'tag suffix cannot contain flow indicator characters');\n    }\n  }\n\n  if (tagName && !PATTERN_TAG_URI.test(tagName)) {\n    throwError(state, 'tag name cannot contain such characters: ' + tagName);\n  }\n\n  try {\n    tagName = decodeURIComponent(tagName);\n  } catch (err) {\n    throwError(state, 'tag name is malformed: ' + tagName);\n  }\n\n  if (isVerbatim) {\n    state.tag = tagName;\n  } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {\n    state.tag = state.tagMap[tagHandle] + tagName;\n  } else if (tagHandle === '!') {\n    state.tag = '!' + tagName;\n  } else if (tagHandle === '!!') {\n    state.tag = 'tag:yaml.org,2002:' + tagName;\n  } else {\n    throwError(state, 'undeclared tag handle \"' + tagHandle + '\"');\n  }\n\n  return true;\n}\n\nfunction readAnchorProperty(state) {\n  var _position, ch;\n\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x26\n  /* & */\n  ) return false;\n\n  if (state.anchor !== null) {\n    throwError(state, 'duplication of an anchor property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state, 'name of an anchor node must contain at least one character');\n  }\n\n  state.anchor = state.input.slice(_position, state.position);\n  return true;\n}\n\nfunction readAlias(state) {\n  var _position, alias, ch;\n\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x2A\n  /* * */\n  ) return false;\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state, 'name of an alias node must contain at least one character');\n  }\n\n  alias = state.input.slice(_position, state.position);\n\n  if (!_hasOwnProperty.call(state.anchorMap, alias)) {\n    throwError(state, 'unidentified alias \"' + alias + '\"');\n  }\n\n  state.result = state.anchorMap[alias];\n  skipSeparationSpace(state, true, -1);\n  return true;\n}\n\nfunction composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {\n  var allowBlockStyles,\n      allowBlockScalars,\n      allowBlockCollections,\n      indentStatus = 1,\n      // 1: this>parent, 0: this=parent, -1: this<parent\n  atNewLine = false,\n      hasContent = false,\n      typeIndex,\n      typeQuantity,\n      typeList,\n      type,\n      flowIndent,\n      blockIndent;\n\n  if (state.listener !== null) {\n    state.listener('open', state);\n  }\n\n  state.tag = null;\n  state.anchor = null;\n  state.kind = null;\n  state.result = null;\n  allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;\n\n  if (allowToSeek) {\n    if (skipSeparationSpace(state, true, -1)) {\n      atNewLine = true;\n\n      if (state.lineIndent > parentIndent) {\n        indentStatus = 1;\n      } else if (state.lineIndent === parentIndent) {\n        indentStatus = 0;\n      } else if (state.lineIndent < parentIndent) {\n        indentStatus = -1;\n      }\n    }\n  }\n\n  if (indentStatus === 1) {\n    while (readTagProperty(state) || readAnchorProperty(state)) {\n      if (skipSeparationSpace(state, true, -1)) {\n        atNewLine = true;\n        allowBlockCollections = allowBlockStyles;\n\n        if (state.lineIndent > parentIndent) {\n          indentStatus = 1;\n        } else if (state.lineIndent === parentIndent) {\n          indentStatus = 0;\n        } else if (state.lineIndent < parentIndent) {\n          indentStatus = -1;\n        }\n      } else {\n        allowBlockCollections = false;\n      }\n    }\n  }\n\n  if (allowBlockCollections) {\n    allowBlockCollections = atNewLine || allowCompact;\n  }\n\n  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {\n    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {\n      flowIndent = parentIndent;\n    } else {\n      flowIndent = parentIndent + 1;\n    }\n\n    blockIndent = state.position - state.lineStart;\n\n    if (indentStatus === 1) {\n      if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {\n        hasContent = true;\n      } else {\n        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {\n          hasContent = true;\n        } else if (readAlias(state)) {\n          hasContent = true;\n\n          if (state.tag !== null || state.anchor !== null) {\n            throwError(state, 'alias node should not have any properties');\n          }\n        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {\n          hasContent = true;\n\n          if (state.tag === null) {\n            state.tag = '?';\n          }\n        }\n\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    } else if (indentStatus === 0) {\n      // Special case: block sequences are allowed to have same indentation level as the parent.\n      // http://www.yaml.org/spec/1.2/spec.html#id2799784\n      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);\n    }\n  }\n\n  if (state.tag === null) {\n    if (state.anchor !== null) {\n      state.anchorMap[state.anchor] = state.result;\n    }\n  } else if (state.tag === '?') {\n    // Implicit resolving is not allowed for non-scalar types, and '?'\n    // non-specific tag is only automatically assigned to plain scalars.\n    //\n    // We only need to check kind conformity in case user explicitly assigns '?'\n    // tag, for example like this: \"!<?> [0]\"\n    //\n    if (state.result !== null && state.kind !== 'scalar') {\n      throwError(state, 'unacceptable node kind for !<?> tag; it should be \"scalar\", not \"' + state.kind + '\"');\n    }\n\n    for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {\n      type = state.implicitTypes[typeIndex];\n\n      if (type.resolve(state.result)) {\n        // `state.result` updated in resolver if matched\n        state.result = type.construct(state.result);\n        state.tag = type.tag;\n\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n\n        break;\n      }\n    }\n  } else if (state.tag !== '!') {\n    if (_hasOwnProperty.call(state.typeMap[state.kind || 'fallback'], state.tag)) {\n      type = state.typeMap[state.kind || 'fallback'][state.tag];\n    } else {\n      // looking for multi type\n      type = null;\n      typeList = state.typeMap.multi[state.kind || 'fallback'];\n\n      for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {\n        if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {\n          type = typeList[typeIndex];\n          break;\n        }\n      }\n    }\n\n    if (!type) {\n      throwError(state, 'unknown tag !<' + state.tag + '>');\n    }\n\n    if (state.result !== null && type.kind !== state.kind) {\n      throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be \"' + type.kind + '\", not \"' + state.kind + '\"');\n    }\n\n    if (!type.resolve(state.result, state.tag)) {\n      // `state.result` updated in resolver if matched\n      throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');\n    } else {\n      state.result = type.construct(state.result, state.tag);\n\n      if (state.anchor !== null) {\n        state.anchorMap[state.anchor] = state.result;\n      }\n    }\n  }\n\n  if (state.listener !== null) {\n    state.listener('close', state);\n  }\n\n  return state.tag !== null || state.anchor !== null || hasContent;\n}\n\nfunction readDocument(state) {\n  var documentStart = state.position,\n      _position,\n      directiveName,\n      directiveArgs,\n      hasDirectives = false,\n      ch;\n\n  state.version = null;\n  state.checkLineBreaks = state.legacy;\n  state.tagMap = Object.create(null);\n  state.anchorMap = Object.create(null);\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    skipSeparationSpace(state, true, -1);\n    ch = state.input.charCodeAt(state.position);\n\n    if (state.lineIndent > 0 || ch !== 0x25\n    /* % */\n    ) {\n      break;\n    }\n\n    hasDirectives = true;\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    directiveName = state.input.slice(_position, state.position);\n    directiveArgs = [];\n\n    if (directiveName.length < 1) {\n      throwError(state, 'directive name must not be less than one character in length');\n    }\n\n    while (ch !== 0) {\n      while (is_WHITE_SPACE(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      if (ch === 0x23\n      /* # */\n      ) {\n        do {\n          ch = state.input.charCodeAt(++state.position);\n        } while (ch !== 0 && !is_EOL(ch));\n\n        break;\n      }\n\n      if (is_EOL(ch)) break;\n      _position = state.position;\n\n      while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      directiveArgs.push(state.input.slice(_position, state.position));\n    }\n\n    if (ch !== 0) readLineBreak(state);\n\n    if (_hasOwnProperty.call(directiveHandlers, directiveName)) {\n      directiveHandlers[directiveName](state, directiveName, directiveArgs);\n    } else {\n      throwWarning(state, 'unknown document directive \"' + directiveName + '\"');\n    }\n  }\n\n  skipSeparationSpace(state, true, -1);\n\n  if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 0x2D\n  /* - */\n  && state.input.charCodeAt(state.position + 1) === 0x2D\n  /* - */\n  && state.input.charCodeAt(state.position + 2) === 0x2D\n  /* - */\n  ) {\n    state.position += 3;\n    skipSeparationSpace(state, true, -1);\n  } else if (hasDirectives) {\n    throwError(state, 'directives end mark is expected');\n  }\n\n  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);\n  skipSeparationSpace(state, true, -1);\n\n  if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {\n    throwWarning(state, 'non-ASCII line breaks are interpreted as content');\n  }\n\n  state.documents.push(state.result);\n\n  if (state.position === state.lineStart && testDocumentSeparator(state)) {\n    if (state.input.charCodeAt(state.position) === 0x2E\n    /* . */\n    ) {\n      state.position += 3;\n      skipSeparationSpace(state, true, -1);\n    }\n\n    return;\n  }\n\n  if (state.position < state.length - 1) {\n    throwError(state, 'end of the stream or a document separator is expected');\n  } else {\n    return;\n  }\n}\n\nfunction loadDocuments(input, options) {\n  input = String(input);\n  options = options || {};\n\n  if (input.length !== 0) {\n    // Add tailing `\\n` if not exists\n    if (input.charCodeAt(input.length - 1) !== 0x0A\n    /* LF */\n    && input.charCodeAt(input.length - 1) !== 0x0D\n    /* CR */\n    ) {\n      input += '\\n';\n    } // Strip BOM\n\n\n    if (input.charCodeAt(0) === 0xFEFF) {\n      input = input.slice(1);\n    }\n  }\n\n  var state = new State(input, options);\n  var nullpos = input.indexOf('\\0');\n\n  if (nullpos !== -1) {\n    state.position = nullpos;\n    throwError(state, 'null byte is not allowed in input');\n  } // Use 0 as string terminator. That significantly simplifies bounds check.\n\n\n  state.input += '\\0';\n\n  while (state.input.charCodeAt(state.position) === 0x20\n  /* Space */\n  ) {\n    state.lineIndent += 1;\n    state.position += 1;\n  }\n\n  while (state.position < state.length - 1) {\n    readDocument(state);\n  }\n\n  return state.documents;\n}\n\nfunction loadAll(input, iterator, options) {\n  if (iterator !== null && typeof iterator === 'object' && typeof options === 'undefined') {\n    options = iterator;\n    iterator = null;\n  }\n\n  var documents = loadDocuments(input, options);\n\n  if (typeof iterator !== 'function') {\n    return documents;\n  }\n\n  for (var index = 0, length = documents.length; index < length; index += 1) {\n    iterator(documents[index]);\n  }\n}\n\nfunction load(input, options) {\n  var documents = loadDocuments(input, options);\n\n  if (documents.length === 0) {\n    /*eslint-disable no-undefined*/\n    return undefined;\n  } else if (documents.length === 1) {\n    return documents[0];\n  }\n\n  throw new YAMLException('expected a single document in the stream, but found more');\n}\n\nmodule.exports.loadAll = loadAll;\nmodule.exports.load = load;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/lib/loader.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/schema.js":
/*!****************************************************!*\
  !*** ../shared/node_modules/js-yaml/lib/schema.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/*eslint-disable max-len*/\n\nvar YAMLException = __webpack_require__(/*! ./exception */ \"../shared/node_modules/js-yaml/lib/exception.js\");\n\nvar Type = __webpack_require__(/*! ./type */ \"../shared/node_modules/js-yaml/lib/type.js\");\n\nfunction compileList(schema, name) {\n  var result = [];\n  schema[name].forEach(function (currentType) {\n    var newIndex = result.length;\n    result.forEach(function (previousType, previousIndex) {\n      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) {\n        newIndex = previousIndex;\n      }\n    });\n    result[newIndex] = currentType;\n  });\n  return result;\n}\n\nfunction\n  /* lists... */\ncompileMap() {\n  var result = {\n    scalar: {},\n    sequence: {},\n    mapping: {},\n    fallback: {},\n    multi: {\n      scalar: [],\n      sequence: [],\n      mapping: [],\n      fallback: []\n    }\n  },\n      index,\n      length;\n\n  function collectType(type) {\n    if (type.multi) {\n      result.multi[type.kind].push(type);\n      result.multi['fallback'].push(type);\n    } else {\n      result[type.kind][type.tag] = result['fallback'][type.tag] = type;\n    }\n  }\n\n  for (index = 0, length = arguments.length; index < length; index += 1) {\n    arguments[index].forEach(collectType);\n  }\n\n  return result;\n}\n\nfunction Schema(definition) {\n  return this.extend(definition);\n}\n\nSchema.prototype.extend = function extend(definition) {\n  var implicit = [];\n  var explicit = [];\n\n  if (definition instanceof Type) {\n    // Schema.extend(type)\n    explicit.push(definition);\n  } else if (Array.isArray(definition)) {\n    // Schema.extend([ type1, type2, ... ])\n    explicit = explicit.concat(definition);\n  } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {\n    // Schema.extend({ explicit: [ type1, type2, ... ], implicit: [ type1, type2, ... ] })\n    if (definition.implicit) implicit = implicit.concat(definition.implicit);\n    if (definition.explicit) explicit = explicit.concat(definition.explicit);\n  } else {\n    throw new YAMLException('Schema.extend argument should be a Type, [ Type ], ' + 'or a schema definition ({ implicit: [...], explicit: [...] })');\n  }\n\n  implicit.forEach(function (type) {\n    if (!(type instanceof Type)) {\n      throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n    }\n\n    if (type.loadKind && type.loadKind !== 'scalar') {\n      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');\n    }\n\n    if (type.multi) {\n      throw new YAMLException('There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.');\n    }\n  });\n  explicit.forEach(function (type) {\n    if (!(type instanceof Type)) {\n      throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n    }\n  });\n  var result = Object.create(Schema.prototype);\n  result.implicit = (this.implicit || []).concat(implicit);\n  result.explicit = (this.explicit || []).concat(explicit);\n  result.compiledImplicit = compileList(result, 'implicit');\n  result.compiledExplicit = compileList(result, 'explicit');\n  result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);\n  return result;\n};\n\nmodule.exports = Schema;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/lib/schema.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/schema/core.js":
/*!*********************************************************!*\
  !*** ../shared/node_modules/js-yaml/lib/schema/core.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Standard YAML's Core schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2804923\n//\n// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.\n// So, Core schema has no distinctions from JSON schema is JS-YAML.\n\n\nmodule.exports = __webpack_require__(/*! ./json */ \"../shared/node_modules/js-yaml/lib/schema/json.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9zY2hlbWEvY29yZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR2E7O0FBR2JBLHVHQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4uL3NoYXJlZC9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvc2NoZW1hL2NvcmUuanM/NDdjNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTdGFuZGFyZCBZQU1MJ3MgQ29yZSBzY2hlbWEuXG4vLyBodHRwOi8vd3d3LnlhbWwub3JnL3NwZWMvMS4yL3NwZWMuaHRtbCNpZDI4MDQ5MjNcbi8vXG4vLyBOT1RFOiBKUy1ZQU1MIGRvZXMgbm90IHN1cHBvcnQgc2NoZW1hLXNwZWNpZmljIHRhZyByZXNvbHV0aW9uIHJlc3RyaWN0aW9ucy5cbi8vIFNvLCBDb3JlIHNjaGVtYSBoYXMgbm8gZGlzdGluY3Rpb25zIGZyb20gSlNPTiBzY2hlbWEgaXMgSlMtWUFNTC5cblxuXG4ndXNlIHN0cmljdCc7XG5cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2pzb24nKTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/lib/schema/core.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/schema/default.js":
/*!************************************************************!*\
  !*** ../shared/node_modules/js-yaml/lib/schema/default.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// JS-YAML's default schema for `safeLoad` function.\n// It is not described in the YAML specification.\n//\n// This schema is based on standard YAML's Core schema and includes most of\n// extra types described at YAML tag repository. (http://yaml.org/type/)\n\n\nmodule.exports = (__webpack_require__(/*! ./core */ \"../shared/node_modules/js-yaml/lib/schema/core.js\").extend)({\n  implicit: [__webpack_require__(/*! ../type/timestamp */ \"../shared/node_modules/js-yaml/lib/type/timestamp.js\"), __webpack_require__(/*! ../type/merge */ \"../shared/node_modules/js-yaml/lib/type/merge.js\")],\n  explicit: [__webpack_require__(/*! ../type/binary */ \"../shared/node_modules/js-yaml/lib/type/binary.js\"), __webpack_require__(/*! ../type/omap */ \"../shared/node_modules/js-yaml/lib/type/omap.js\"), __webpack_require__(/*! ../type/pairs */ \"../shared/node_modules/js-yaml/lib/type/pairs.js\"), __webpack_require__(/*! ../type/set */ \"../shared/node_modules/js-yaml/lib/type/set.js\")]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9zY2hlbWEvZGVmYXVsdC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR2E7O0FBR2JBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkMsK0ZBQUEsQ0FBeUI7QUFDeENFLEVBQUFBLFFBQVEsRUFBRSxDQUNSRixtQkFBTyxDQUFDLCtFQUFELENBREMsRUFFUkEsbUJBQU8sQ0FBQyx1RUFBRCxDQUZDLENBRDhCO0FBS3hDRyxFQUFBQSxRQUFRLEVBQUUsQ0FDUkgsbUJBQU8sQ0FBQyx5RUFBRCxDQURDLEVBRVJBLG1CQUFPLENBQUMscUVBQUQsQ0FGQyxFQUdSQSxtQkFBTyxDQUFDLHVFQUFELENBSEMsRUFJUkEsbUJBQU8sQ0FBQyxtRUFBRCxDQUpDO0FBTDhCLENBQXpCLENBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4uL3NoYXJlZC9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvc2NoZW1hL2RlZmF1bHQuanM/MzhiMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBKUy1ZQU1MJ3MgZGVmYXVsdCBzY2hlbWEgZm9yIGBzYWZlTG9hZGAgZnVuY3Rpb24uXG4vLyBJdCBpcyBub3QgZGVzY3JpYmVkIGluIHRoZSBZQU1MIHNwZWNpZmljYXRpb24uXG4vL1xuLy8gVGhpcyBzY2hlbWEgaXMgYmFzZWQgb24gc3RhbmRhcmQgWUFNTCdzIENvcmUgc2NoZW1hIGFuZCBpbmNsdWRlcyBtb3N0IG9mXG4vLyBleHRyYSB0eXBlcyBkZXNjcmliZWQgYXQgWUFNTCB0YWcgcmVwb3NpdG9yeS4gKGh0dHA6Ly95YW1sLm9yZy90eXBlLylcblxuXG4ndXNlIHN0cmljdCc7XG5cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvcmUnKS5leHRlbmQoe1xuICBpbXBsaWNpdDogW1xuICAgIHJlcXVpcmUoJy4uL3R5cGUvdGltZXN0YW1wJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9tZXJnZScpXG4gIF0sXG4gIGV4cGxpY2l0OiBbXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9iaW5hcnknKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL29tYXAnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL3BhaXJzJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9zZXQnKVxuICBdXG59KTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSIsImV4dGVuZCIsImltcGxpY2l0IiwiZXhwbGljaXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/lib/schema/default.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/schema/failsafe.js":
/*!*************************************************************!*\
  !*** ../shared/node_modules/js-yaml/lib/schema/failsafe.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Standard YAML's Failsafe schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2802346\n\n\nvar Schema = __webpack_require__(/*! ../schema */ \"../shared/node_modules/js-yaml/lib/schema.js\");\n\nmodule.exports = new Schema({\n  explicit: [__webpack_require__(/*! ../type/str */ \"../shared/node_modules/js-yaml/lib/type/str.js\"), __webpack_require__(/*! ../type/seq */ \"../shared/node_modules/js-yaml/lib/type/seq.js\"), __webpack_require__(/*! ../type/map */ \"../shared/node_modules/js-yaml/lib/type/map.js\")]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9zY2hlbWEvZmFpbHNhZmUuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUdhOztBQUdiLElBQUlBLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQywrREFBRCxDQUFwQjs7QUFHQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLElBQUlILE1BQUosQ0FBVztBQUMxQkksRUFBQUEsUUFBUSxFQUFFLENBQ1JILG1CQUFPLENBQUMsbUVBQUQsQ0FEQyxFQUVSQSxtQkFBTyxDQUFDLG1FQUFELENBRkMsRUFHUkEsbUJBQU8sQ0FBQyxtRUFBRCxDQUhDO0FBRGdCLENBQVgsQ0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9zY2hlbWEvZmFpbHNhZmUuanM/NmEwOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTdGFuZGFyZCBZQU1MJ3MgRmFpbHNhZmUgc2NoZW1hLlxuLy8gaHR0cDovL3d3dy55YW1sLm9yZy9zcGVjLzEuMi9zcGVjLmh0bWwjaWQyODAyMzQ2XG5cblxuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBTY2hlbWEgPSByZXF1aXJlKCcuLi9zY2hlbWEnKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBTY2hlbWEoe1xuICBleHBsaWNpdDogW1xuICAgIHJlcXVpcmUoJy4uL3R5cGUvc3RyJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9zZXEnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL21hcCcpXG4gIF1cbn0pO1xuIl0sIm5hbWVzIjpbIlNjaGVtYSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZXhwbGljaXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/lib/schema/failsafe.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/schema/json.js":
/*!*********************************************************!*\
  !*** ../shared/node_modules/js-yaml/lib/schema/json.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Standard YAML's JSON schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2803231\n//\n// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.\n// So, this schema is not such strict as defined in the YAML specification.\n// It allows numbers in binary notaion, use `Null` and `NULL` as `null`, etc.\n\n\nmodule.exports = (__webpack_require__(/*! ./failsafe */ \"../shared/node_modules/js-yaml/lib/schema/failsafe.js\").extend)({\n  implicit: [__webpack_require__(/*! ../type/null */ \"../shared/node_modules/js-yaml/lib/type/null.js\"), __webpack_require__(/*! ../type/bool */ \"../shared/node_modules/js-yaml/lib/type/bool.js\"), __webpack_require__(/*! ../type/int */ \"../shared/node_modules/js-yaml/lib/type/int.js\"), __webpack_require__(/*! ../type/float */ \"../shared/node_modules/js-yaml/lib/type/float.js\")]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9zY2hlbWEvanNvbi5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHYTs7QUFHYkEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCQyx1R0FBQSxDQUE2QjtBQUM1Q0UsRUFBQUEsUUFBUSxFQUFFLENBQ1JGLG1CQUFPLENBQUMscUVBQUQsQ0FEQyxFQUVSQSxtQkFBTyxDQUFDLHFFQUFELENBRkMsRUFHUkEsbUJBQU8sQ0FBQyxtRUFBRCxDQUhDLEVBSVJBLG1CQUFPLENBQUMsdUVBQUQsQ0FKQztBQURrQyxDQUE3QixDQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uLi9zaGFyZWQvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL3NjaGVtYS9qc29uLmpzPzljM2QiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU3RhbmRhcmQgWUFNTCdzIEpTT04gc2NoZW1hLlxuLy8gaHR0cDovL3d3dy55YW1sLm9yZy9zcGVjLzEuMi9zcGVjLmh0bWwjaWQyODAzMjMxXG4vL1xuLy8gTk9URTogSlMtWUFNTCBkb2VzIG5vdCBzdXBwb3J0IHNjaGVtYS1zcGVjaWZpYyB0YWcgcmVzb2x1dGlvbiByZXN0cmljdGlvbnMuXG4vLyBTbywgdGhpcyBzY2hlbWEgaXMgbm90IHN1Y2ggc3RyaWN0IGFzIGRlZmluZWQgaW4gdGhlIFlBTUwgc3BlY2lmaWNhdGlvbi5cbi8vIEl0IGFsbG93cyBudW1iZXJzIGluIGJpbmFyeSBub3RhaW9uLCB1c2UgYE51bGxgIGFuZCBgTlVMTGAgYXMgYG51bGxgLCBldGMuXG5cblxuJ3VzZSBzdHJpY3QnO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWlsc2FmZScpLmV4dGVuZCh7XG4gIGltcGxpY2l0OiBbXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9udWxsJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9ib29sJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9pbnQnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL2Zsb2F0JylcbiAgXVxufSk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiLCJleHRlbmQiLCJpbXBsaWNpdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/lib/schema/json.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/snippet.js":
/*!*****************************************************!*\
  !*** ../shared/node_modules/js-yaml/lib/snippet.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar common = __webpack_require__(/*! ./common */ \"../shared/node_modules/js-yaml/lib/common.js\"); // get snippet for a single line, respecting maxLength\n\n\nfunction getLine(buffer, lineStart, lineEnd, position, maxLineLength) {\n  var head = '';\n  var tail = '';\n  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;\n\n  if (position - lineStart > maxHalfLength) {\n    head = ' ... ';\n    lineStart = position - maxHalfLength + head.length;\n  }\n\n  if (lineEnd - position > maxHalfLength) {\n    tail = ' ...';\n    lineEnd = position + maxHalfLength - tail.length;\n  }\n\n  return {\n    str: head + buffer.slice(lineStart, lineEnd).replace(/\\t/g, '→') + tail,\n    pos: position - lineStart + head.length // relative position\n\n  };\n}\n\nfunction padStart(string, max) {\n  return common.repeat(' ', max - string.length) + string;\n}\n\nfunction makeSnippet(mark, options) {\n  options = Object.create(options || null);\n  if (!mark.buffer) return null;\n  if (!options.maxLength) options.maxLength = 79;\n  if (typeof options.indent !== 'number') options.indent = 1;\n  if (typeof options.linesBefore !== 'number') options.linesBefore = 3;\n  if (typeof options.linesAfter !== 'number') options.linesAfter = 2;\n  var re = /\\r?\\n|\\r|\\0/g;\n  var lineStarts = [0];\n  var lineEnds = [];\n  var match;\n  var foundLineNo = -1;\n\n  while (match = re.exec(mark.buffer)) {\n    lineEnds.push(match.index);\n    lineStarts.push(match.index + match[0].length);\n\n    if (mark.position <= match.index && foundLineNo < 0) {\n      foundLineNo = lineStarts.length - 2;\n    }\n  }\n\n  if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;\n  var result = '',\n      i,\n      line;\n  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;\n  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);\n\n  for (i = 1; i <= options.linesBefore; i++) {\n    if (foundLineNo - i < 0) break;\n    line = getLine(mark.buffer, lineStarts[foundLineNo - i], lineEnds[foundLineNo - i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]), maxLineLength);\n    result = common.repeat(' ', options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) + ' | ' + line.str + '\\n' + result;\n  }\n\n  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);\n  result += common.repeat(' ', options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + ' | ' + line.str + '\\n';\n  result += common.repeat('-', options.indent + lineNoLength + 3 + line.pos) + '^' + '\\n';\n\n  for (i = 1; i <= options.linesAfter; i++) {\n    if (foundLineNo + i >= lineEnds.length) break;\n    line = getLine(mark.buffer, lineStarts[foundLineNo + i], lineEnds[foundLineNo + i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]), maxLineLength);\n    result += common.repeat(' ', options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) + ' | ' + line.str + '\\n';\n  }\n\n  return result.replace(/\\n$/, '');\n}\n\nmodule.exports = makeSnippet;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/lib/snippet.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type.js":
/*!**************************************************!*\
  !*** ../shared/node_modules/js-yaml/lib/type.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar YAMLException = __webpack_require__(/*! ./exception */ \"../shared/node_modules/js-yaml/lib/exception.js\");\n\nvar TYPE_CONSTRUCTOR_OPTIONS = ['kind', 'multi', 'resolve', 'construct', 'instanceOf', 'predicate', 'represent', 'representName', 'defaultStyle', 'styleAliases'];\nvar YAML_NODE_KINDS = ['scalar', 'sequence', 'mapping'];\n\nfunction compileStyleAliases(map) {\n  var result = {};\n\n  if (map !== null) {\n    Object.keys(map).forEach(function (style) {\n      map[style].forEach(function (alias) {\n        result[String(alias)] = style;\n      });\n    });\n  }\n\n  return result;\n}\n\nfunction Type(tag, options) {\n  options = options || {};\n  Object.keys(options).forEach(function (name) {\n    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {\n      throw new YAMLException('Unknown option \"' + name + '\" is met in definition of \"' + tag + '\" YAML type.');\n    }\n  }); // TODO: Add tag format check.\n\n  this.options = options; // keep original options in case user wants to extend this type later\n\n  this.tag = tag;\n  this.kind = options['kind'] || null;\n\n  this.resolve = options['resolve'] || function () {\n    return true;\n  };\n\n  this.construct = options['construct'] || function (data) {\n    return data;\n  };\n\n  this.instanceOf = options['instanceOf'] || null;\n  this.predicate = options['predicate'] || null;\n  this.represent = options['represent'] || null;\n  this.representName = options['representName'] || null;\n  this.defaultStyle = options['defaultStyle'] || null;\n  this.multi = options['multi'] || false;\n  this.styleAliases = compileStyleAliases(options['styleAliases'] || null);\n\n  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {\n    throw new YAMLException('Unknown kind \"' + this.kind + '\" is specified for \"' + tag + '\" YAML type.');\n  }\n}\n\nmodule.exports = Type;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi90eXBlLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLGFBQWEsR0FBR0MsbUJBQU8sQ0FBQyxvRUFBRCxDQUEzQjs7QUFFQSxJQUFJQyx3QkFBd0IsR0FBRyxDQUM3QixNQUQ2QixFQUU3QixPQUY2QixFQUc3QixTQUg2QixFQUk3QixXQUo2QixFQUs3QixZQUw2QixFQU03QixXQU42QixFQU83QixXQVA2QixFQVE3QixlQVI2QixFQVM3QixjQVQ2QixFQVU3QixjQVY2QixDQUEvQjtBQWFBLElBQUlDLGVBQWUsR0FBRyxDQUNwQixRQURvQixFQUVwQixVQUZvQixFQUdwQixTQUhvQixDQUF0Qjs7QUFNQSxTQUFTQyxtQkFBVCxDQUE2QkMsR0FBN0IsRUFBa0M7QUFDaEMsTUFBSUMsTUFBTSxHQUFHLEVBQWI7O0FBRUEsTUFBSUQsR0FBRyxLQUFLLElBQVosRUFBa0I7QUFDaEJFLElBQUFBLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSCxHQUFaLEVBQWlCSSxPQUFqQixDQUF5QixVQUFVQyxLQUFWLEVBQWlCO0FBQ3hDTCxNQUFBQSxHQUFHLENBQUNLLEtBQUQsQ0FBSCxDQUFXRCxPQUFYLENBQW1CLFVBQVVFLEtBQVYsRUFBaUI7QUFDbENMLFFBQUFBLE1BQU0sQ0FBQ00sTUFBTSxDQUFDRCxLQUFELENBQVAsQ0FBTixHQUF3QkQsS0FBeEI7QUFDRCxPQUZEO0FBR0QsS0FKRDtBQUtEOztBQUVELFNBQU9KLE1BQVA7QUFDRDs7QUFFRCxTQUFTTyxJQUFULENBQWNDLEdBQWQsRUFBbUJDLE9BQW5CLEVBQTRCO0FBQzFCQSxFQUFBQSxPQUFPLEdBQUdBLE9BQU8sSUFBSSxFQUFyQjtBQUVBUixFQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWU8sT0FBWixFQUFxQk4sT0FBckIsQ0FBNkIsVUFBVU8sSUFBVixFQUFnQjtBQUMzQyxRQUFJZCx3QkFBd0IsQ0FBQ2UsT0FBekIsQ0FBaUNELElBQWpDLE1BQTJDLENBQUMsQ0FBaEQsRUFBbUQ7QUFDakQsWUFBTSxJQUFJaEIsYUFBSixDQUFrQixxQkFBcUJnQixJQUFyQixHQUE0Qiw2QkFBNUIsR0FBNERGLEdBQTVELEdBQWtFLGNBQXBGLENBQU47QUFDRDtBQUNGLEdBSkQsRUFIMEIsQ0FTMUI7O0FBQ0EsT0FBS0MsT0FBTCxHQUFxQkEsT0FBckIsQ0FWMEIsQ0FVSTs7QUFDOUIsT0FBS0QsR0FBTCxHQUFxQkEsR0FBckI7QUFDQSxPQUFLSSxJQUFMLEdBQXFCSCxPQUFPLENBQUMsTUFBRCxDQUFQLElBQTRCLElBQWpEOztBQUNBLE9BQUtJLE9BQUwsR0FBcUJKLE9BQU8sQ0FBQyxTQUFELENBQVAsSUFBNEIsWUFBWTtBQUFFLFdBQU8sSUFBUDtBQUFjLEdBQTdFOztBQUNBLE9BQUtLLFNBQUwsR0FBcUJMLE9BQU8sQ0FBQyxXQUFELENBQVAsSUFBNEIsVUFBVU0sSUFBVixFQUFnQjtBQUFFLFdBQU9BLElBQVA7QUFBYyxHQUFqRjs7QUFDQSxPQUFLQyxVQUFMLEdBQXFCUCxPQUFPLENBQUMsWUFBRCxDQUFQLElBQTRCLElBQWpEO0FBQ0EsT0FBS1EsU0FBTCxHQUFxQlIsT0FBTyxDQUFDLFdBQUQsQ0FBUCxJQUE0QixJQUFqRDtBQUNBLE9BQUtTLFNBQUwsR0FBcUJULE9BQU8sQ0FBQyxXQUFELENBQVAsSUFBNEIsSUFBakQ7QUFDQSxPQUFLVSxhQUFMLEdBQXFCVixPQUFPLENBQUMsZUFBRCxDQUFQLElBQTRCLElBQWpEO0FBQ0EsT0FBS1csWUFBTCxHQUFxQlgsT0FBTyxDQUFDLGNBQUQsQ0FBUCxJQUE0QixJQUFqRDtBQUNBLE9BQUtZLEtBQUwsR0FBcUJaLE9BQU8sQ0FBQyxPQUFELENBQVAsSUFBNEIsS0FBakQ7QUFDQSxPQUFLYSxZQUFMLEdBQXFCeEIsbUJBQW1CLENBQUNXLE9BQU8sQ0FBQyxjQUFELENBQVAsSUFBMkIsSUFBNUIsQ0FBeEM7O0FBRUEsTUFBSVosZUFBZSxDQUFDYyxPQUFoQixDQUF3QixLQUFLQyxJQUE3QixNQUF1QyxDQUFDLENBQTVDLEVBQStDO0FBQzdDLFVBQU0sSUFBSWxCLGFBQUosQ0FBa0IsbUJBQW1CLEtBQUtrQixJQUF4QixHQUErQixzQkFBL0IsR0FBd0RKLEdBQXhELEdBQThELGNBQWhGLENBQU47QUFDRDtBQUNGOztBQUVEZSxNQUFNLENBQUNDLE9BQVAsR0FBaUJqQixJQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uLi9zaGFyZWQvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL3R5cGUuanM/YzJkMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBZQU1MRXhjZXB0aW9uID0gcmVxdWlyZSgnLi9leGNlcHRpb24nKTtcblxudmFyIFRZUEVfQ09OU1RSVUNUT1JfT1BUSU9OUyA9IFtcbiAgJ2tpbmQnLFxuICAnbXVsdGknLFxuICAncmVzb2x2ZScsXG4gICdjb25zdHJ1Y3QnLFxuICAnaW5zdGFuY2VPZicsXG4gICdwcmVkaWNhdGUnLFxuICAncmVwcmVzZW50JyxcbiAgJ3JlcHJlc2VudE5hbWUnLFxuICAnZGVmYXVsdFN0eWxlJyxcbiAgJ3N0eWxlQWxpYXNlcydcbl07XG5cbnZhciBZQU1MX05PREVfS0lORFMgPSBbXG4gICdzY2FsYXInLFxuICAnc2VxdWVuY2UnLFxuICAnbWFwcGluZydcbl07XG5cbmZ1bmN0aW9uIGNvbXBpbGVTdHlsZUFsaWFzZXMobWFwKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcblxuICBpZiAobWFwICE9PSBudWxsKSB7XG4gICAgT2JqZWN0LmtleXMobWFwKS5mb3JFYWNoKGZ1bmN0aW9uIChzdHlsZSkge1xuICAgICAgbWFwW3N0eWxlXS5mb3JFYWNoKGZ1bmN0aW9uIChhbGlhcykge1xuICAgICAgICByZXN1bHRbU3RyaW5nKGFsaWFzKV0gPSBzdHlsZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gVHlwZSh0YWcsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgT2JqZWN0LmtleXMob3B0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmIChUWVBFX0NPTlNUUlVDVE9SX09QVElPTlMuaW5kZXhPZihuYW1lKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCdVbmtub3duIG9wdGlvbiBcIicgKyBuYW1lICsgJ1wiIGlzIG1ldCBpbiBkZWZpbml0aW9uIG9mIFwiJyArIHRhZyArICdcIiBZQU1MIHR5cGUuJyk7XG4gICAgfVxuICB9KTtcblxuICAvLyBUT0RPOiBBZGQgdGFnIGZvcm1hdCBjaGVjay5cbiAgdGhpcy5vcHRpb25zICAgICAgID0gb3B0aW9uczsgLy8ga2VlcCBvcmlnaW5hbCBvcHRpb25zIGluIGNhc2UgdXNlciB3YW50cyB0byBleHRlbmQgdGhpcyB0eXBlIGxhdGVyXG4gIHRoaXMudGFnICAgICAgICAgICA9IHRhZztcbiAgdGhpcy5raW5kICAgICAgICAgID0gb3B0aW9uc1sna2luZCddICAgICAgICAgIHx8IG51bGw7XG4gIHRoaXMucmVzb2x2ZSAgICAgICA9IG9wdGlvbnNbJ3Jlc29sdmUnXSAgICAgICB8fCBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9O1xuICB0aGlzLmNvbnN0cnVjdCAgICAgPSBvcHRpb25zWydjb25zdHJ1Y3QnXSAgICAgfHwgZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIGRhdGE7IH07XG4gIHRoaXMuaW5zdGFuY2VPZiAgICA9IG9wdGlvbnNbJ2luc3RhbmNlT2YnXSAgICB8fCBudWxsO1xuICB0aGlzLnByZWRpY2F0ZSAgICAgPSBvcHRpb25zWydwcmVkaWNhdGUnXSAgICAgfHwgbnVsbDtcbiAgdGhpcy5yZXByZXNlbnQgICAgID0gb3B0aW9uc1sncmVwcmVzZW50J10gICAgIHx8IG51bGw7XG4gIHRoaXMucmVwcmVzZW50TmFtZSA9IG9wdGlvbnNbJ3JlcHJlc2VudE5hbWUnXSB8fCBudWxsO1xuICB0aGlzLmRlZmF1bHRTdHlsZSAgPSBvcHRpb25zWydkZWZhdWx0U3R5bGUnXSAgfHwgbnVsbDtcbiAgdGhpcy5tdWx0aSAgICAgICAgID0gb3B0aW9uc1snbXVsdGknXSAgICAgICAgIHx8IGZhbHNlO1xuICB0aGlzLnN0eWxlQWxpYXNlcyAgPSBjb21waWxlU3R5bGVBbGlhc2VzKG9wdGlvbnNbJ3N0eWxlQWxpYXNlcyddIHx8IG51bGwpO1xuXG4gIGlmIChZQU1MX05PREVfS0lORFMuaW5kZXhPZih0aGlzLmtpbmQpID09PSAtMSkge1xuICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCdVbmtub3duIGtpbmQgXCInICsgdGhpcy5raW5kICsgJ1wiIGlzIHNwZWNpZmllZCBmb3IgXCInICsgdGFnICsgJ1wiIFlBTUwgdHlwZS4nKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFR5cGU7XG4iXSwibmFtZXMiOlsiWUFNTEV4Y2VwdGlvbiIsInJlcXVpcmUiLCJUWVBFX0NPTlNUUlVDVE9SX09QVElPTlMiLCJZQU1MX05PREVfS0lORFMiLCJjb21waWxlU3R5bGVBbGlhc2VzIiwibWFwIiwicmVzdWx0IiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJzdHlsZSIsImFsaWFzIiwiU3RyaW5nIiwiVHlwZSIsInRhZyIsIm9wdGlvbnMiLCJuYW1lIiwiaW5kZXhPZiIsImtpbmQiLCJyZXNvbHZlIiwiY29uc3RydWN0IiwiZGF0YSIsImluc3RhbmNlT2YiLCJwcmVkaWNhdGUiLCJyZXByZXNlbnQiLCJyZXByZXNlbnROYW1lIiwiZGVmYXVsdFN0eWxlIiwibXVsdGkiLCJzdHlsZUFsaWFzZXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/lib/type.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/binary.js":
/*!*********************************************************!*\
  !*** ../shared/node_modules/js-yaml/lib/type/binary.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/*eslint-disable no-bitwise*/\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/js-yaml/lib/type.js\"); // [ 64, 65, 66 ] -> [ padding, CR, LF ]\n\n\nvar BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\n\\r';\n\nfunction resolveYamlBinary(data) {\n  if (data === null) return false;\n  var code,\n      idx,\n      bitlen = 0,\n      max = data.length,\n      map = BASE64_MAP; // Convert one by one.\n\n  for (idx = 0; idx < max; idx++) {\n    code = map.indexOf(data.charAt(idx)); // Skip CR/LF\n\n    if (code > 64) continue; // Fail on illegal characters\n\n    if (code < 0) return false;\n    bitlen += 6;\n  } // If there are any bits left, source was corrupted\n\n\n  return bitlen % 8 === 0;\n}\n\nfunction constructYamlBinary(data) {\n  var idx,\n      tailbits,\n      input = data.replace(/[\\r\\n=]/g, ''),\n      // remove CR/LF & padding to simplify scan\n  max = input.length,\n      map = BASE64_MAP,\n      bits = 0,\n      result = []; // Collect by 6*4 bits (3 bytes)\n\n  for (idx = 0; idx < max; idx++) {\n    if (idx % 4 === 0 && idx) {\n      result.push(bits >> 16 & 0xFF);\n      result.push(bits >> 8 & 0xFF);\n      result.push(bits & 0xFF);\n    }\n\n    bits = bits << 6 | map.indexOf(input.charAt(idx));\n  } // Dump tail\n\n\n  tailbits = max % 4 * 6;\n\n  if (tailbits === 0) {\n    result.push(bits >> 16 & 0xFF);\n    result.push(bits >> 8 & 0xFF);\n    result.push(bits & 0xFF);\n  } else if (tailbits === 18) {\n    result.push(bits >> 10 & 0xFF);\n    result.push(bits >> 2 & 0xFF);\n  } else if (tailbits === 12) {\n    result.push(bits >> 4 & 0xFF);\n  }\n\n  return new Uint8Array(result);\n}\n\nfunction representYamlBinary(object\n/*, style*/\n) {\n  var result = '',\n      bits = 0,\n      idx,\n      tail,\n      max = object.length,\n      map = BASE64_MAP; // Convert every three bytes to 4 ASCII characters.\n\n  for (idx = 0; idx < max; idx++) {\n    if (idx % 3 === 0 && idx) {\n      result += map[bits >> 18 & 0x3F];\n      result += map[bits >> 12 & 0x3F];\n      result += map[bits >> 6 & 0x3F];\n      result += map[bits & 0x3F];\n    }\n\n    bits = (bits << 8) + object[idx];\n  } // Dump tail\n\n\n  tail = max % 3;\n\n  if (tail === 0) {\n    result += map[bits >> 18 & 0x3F];\n    result += map[bits >> 12 & 0x3F];\n    result += map[bits >> 6 & 0x3F];\n    result += map[bits & 0x3F];\n  } else if (tail === 2) {\n    result += map[bits >> 10 & 0x3F];\n    result += map[bits >> 4 & 0x3F];\n    result += map[bits << 2 & 0x3F];\n    result += map[64];\n  } else if (tail === 1) {\n    result += map[bits >> 2 & 0x3F];\n    result += map[bits << 4 & 0x3F];\n    result += map[64];\n    result += map[64];\n  }\n\n  return result;\n}\n\nfunction isBinary(obj) {\n  return Object.prototype.toString.call(obj) === '[object Uint8Array]';\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:binary', {\n  kind: 'scalar',\n  resolve: resolveYamlBinary,\n  construct: constructYamlBinary,\n  predicate: isBinary,\n  represent: representYamlBinary\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi90eXBlL2JpbmFyeS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViOztBQUdBLElBQUlBLElBQUksR0FBR0MsbUJBQU8sQ0FBQywyREFBRCxDQUFsQixDLENBR0E7OztBQUNBLElBQUlDLFVBQVUsR0FBRyx1RUFBakI7O0FBR0EsU0FBU0MsaUJBQVQsQ0FBMkJDLElBQTNCLEVBQWlDO0FBQy9CLE1BQUlBLElBQUksS0FBSyxJQUFiLEVBQW1CLE9BQU8sS0FBUDtBQUVuQixNQUFJQyxJQUFKO0FBQUEsTUFBVUMsR0FBVjtBQUFBLE1BQWVDLE1BQU0sR0FBRyxDQUF4QjtBQUFBLE1BQTJCQyxHQUFHLEdBQUdKLElBQUksQ0FBQ0ssTUFBdEM7QUFBQSxNQUE4Q0MsR0FBRyxHQUFHUixVQUFwRCxDQUgrQixDQUsvQjs7QUFDQSxPQUFLSSxHQUFHLEdBQUcsQ0FBWCxFQUFjQSxHQUFHLEdBQUdFLEdBQXBCLEVBQXlCRixHQUFHLEVBQTVCLEVBQWdDO0FBQzlCRCxJQUFBQSxJQUFJLEdBQUdLLEdBQUcsQ0FBQ0MsT0FBSixDQUFZUCxJQUFJLENBQUNRLE1BQUwsQ0FBWU4sR0FBWixDQUFaLENBQVAsQ0FEOEIsQ0FHOUI7O0FBQ0EsUUFBSUQsSUFBSSxHQUFHLEVBQVgsRUFBZSxTQUplLENBTTlCOztBQUNBLFFBQUlBLElBQUksR0FBRyxDQUFYLEVBQWMsT0FBTyxLQUFQO0FBRWRFLElBQUFBLE1BQU0sSUFBSSxDQUFWO0FBQ0QsR0FoQjhCLENBa0IvQjs7O0FBQ0EsU0FBUUEsTUFBTSxHQUFHLENBQVYsS0FBaUIsQ0FBeEI7QUFDRDs7QUFFRCxTQUFTTSxtQkFBVCxDQUE2QlQsSUFBN0IsRUFBbUM7QUFDakMsTUFBSUUsR0FBSjtBQUFBLE1BQVNRLFFBQVQ7QUFBQSxNQUNJQyxLQUFLLEdBQUdYLElBQUksQ0FBQ1ksT0FBTCxDQUFhLFVBQWIsRUFBeUIsRUFBekIsQ0FEWjtBQUFBLE1BQzBDO0FBQ3RDUixF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QUFFRCxTQUFTTSxRQUFULENBQWtCQyxHQUFsQixFQUF1QjtBQUNyQixTQUFPQyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCQyxJQUExQixDQUErQkosR0FBL0IsTUFBeUMscUJBQWhEO0FBQ0Q7O0FBRURLLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixJQUFJL0IsSUFBSixDQUFTLDBCQUFULEVBQXFDO0FBQ3BEZ0MsRUFBQUEsSUFBSSxFQUFFLFFBRDhDO0FBRXBEQyxFQUFBQSxPQUFPLEVBQUU5QixpQkFGMkM7QUFHcEQrQixFQUFBQSxTQUFTLEVBQUVyQixtQkFIeUM7QUFJcERzQixFQUFBQSxTQUFTLEVBQUVYLFFBSnlDO0FBS3BEWSxFQUFBQSxTQUFTLEVBQUVmO0FBTHlDLENBQXJDLENBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4uL3NoYXJlZC9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvdHlwZS9iaW5hcnkuanM/YjExZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSovXG5cblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cblxuLy8gWyA2NCwgNjUsIDY2IF0gLT4gWyBwYWRkaW5nLCBDUiwgTEYgXVxudmFyIEJBU0U2NF9NQVAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cXG5cXHInO1xuXG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sQmluYXJ5KGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICB2YXIgY29kZSwgaWR4LCBiaXRsZW4gPSAwLCBtYXggPSBkYXRhLmxlbmd0aCwgbWFwID0gQkFTRTY0X01BUDtcblxuICAvLyBDb252ZXJ0IG9uZSBieSBvbmUuXG4gIGZvciAoaWR4ID0gMDsgaWR4IDwgbWF4OyBpZHgrKykge1xuICAgIGNvZGUgPSBtYXAuaW5kZXhPZihkYXRhLmNoYXJBdChpZHgpKTtcblxuICAgIC8vIFNraXAgQ1IvTEZcbiAgICBpZiAoY29kZSA+IDY0KSBjb250aW51ZTtcblxuICAgIC8vIEZhaWwgb24gaWxsZWdhbCBjaGFyYWN0ZXJzXG4gICAgaWYgKGNvZGUgPCAwKSByZXR1cm4gZmFsc2U7XG5cbiAgICBiaXRsZW4gKz0gNjtcbiAgfVxuXG4gIC8vIElmIHRoZXJlIGFyZSBhbnkgYml0cyBsZWZ0LCBzb3VyY2Ugd2FzIGNvcnJ1cHRlZFxuICByZXR1cm4gKGJpdGxlbiAlIDgpID09PSAwO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sQmluYXJ5KGRhdGEpIHtcbiAgdmFyIGlkeCwgdGFpbGJpdHMsXG4gICAgICBpbnB1dCA9IGRhdGEucmVwbGFjZSgvW1xcclxcbj1dL2csICcnKSwgLy8gcmVtb3ZlIENSL0xGICYgcGFkZGluZyB0byBzaW1wbGlmeSBzY2FuXG4gICAgICBtYXggPSBpbnB1dC5sZW5ndGgsXG4gICAgICBtYXAgPSBCQVNFNjRfTUFQLFxuICAgICAgYml0cyA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICAvLyBDb2xsZWN0IGJ5IDYqNCBiaXRzICgzIGJ5dGVzKVxuXG4gIGZvciAoaWR4ID0gMDsgaWR4IDwgbWF4OyBpZHgrKykge1xuICAgIGlmICgoaWR4ICUgNCA9PT0gMCkgJiYgaWR4KSB7XG4gICAgICByZXN1bHQucHVzaCgoYml0cyA+PiAxNikgJiAweEZGKTtcbiAgICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDgpICYgMHhGRik7XG4gICAgICByZXN1bHQucHVzaChiaXRzICYgMHhGRik7XG4gICAgfVxuXG4gICAgYml0cyA9IChiaXRzIDw8IDYpIHwgbWFwLmluZGV4T2YoaW5wdXQuY2hhckF0KGlkeCkpO1xuICB9XG5cbiAgLy8gRHVtcCB0YWlsXG5cbiAgdGFpbGJpdHMgPSAobWF4ICUgNCkgKiA2O1xuXG4gIGlmICh0YWlsYml0cyA9PT0gMCkge1xuICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDE2KSAmIDB4RkYpO1xuICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDgpICYgMHhGRik7XG4gICAgcmVzdWx0LnB1c2goYml0cyAmIDB4RkYpO1xuICB9IGVsc2UgaWYgKHRhaWxiaXRzID09PSAxOCkge1xuICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDEwKSAmIDB4RkYpO1xuICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDIpICYgMHhGRik7XG4gIH0gZWxzZSBpZiAodGFpbGJpdHMgPT09IDEyKSB7XG4gICAgcmVzdWx0LnB1c2goKGJpdHMgPj4gNCkgJiAweEZGKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgVWludDhBcnJheShyZXN1bHQpO1xufVxuXG5mdW5jdGlvbiByZXByZXNlbnRZYW1sQmluYXJ5KG9iamVjdCAvKiwgc3R5bGUqLykge1xuICB2YXIgcmVzdWx0ID0gJycsIGJpdHMgPSAwLCBpZHgsIHRhaWwsXG4gICAgICBtYXggPSBvYmplY3QubGVuZ3RoLFxuICAgICAgbWFwID0gQkFTRTY0X01BUDtcblxuICAvLyBDb252ZXJ0IGV2ZXJ5IHRocmVlIGJ5dGVzIHRvIDQgQVNDSUkgY2hhcmFjdGVycy5cblxuICBmb3IgKGlkeCA9IDA7IGlkeCA8IG1heDsgaWR4KyspIHtcbiAgICBpZiAoKGlkeCAlIDMgPT09IDApICYmIGlkeCkge1xuICAgICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxOCkgJiAweDNGXTtcbiAgICAgIHJlc3VsdCArPSBtYXBbKGJpdHMgPj4gMTIpICYgMHgzRl07XG4gICAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDYpICYgMHgzRl07XG4gICAgICByZXN1bHQgKz0gbWFwW2JpdHMgJiAweDNGXTtcbiAgICB9XG5cbiAgICBiaXRzID0gKGJpdHMgPDwgOCkgKyBvYmplY3RbaWR4XTtcbiAgfVxuXG4gIC8vIER1bXAgdGFpbFxuXG4gIHRhaWwgPSBtYXggJSAzO1xuXG4gIGlmICh0YWlsID09PSAwKSB7XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxOCkgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDEyKSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbKGJpdHMgPj4gNikgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwW2JpdHMgJiAweDNGXTtcbiAgfSBlbHNlIGlmICh0YWlsID09PSAyKSB7XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxMCkgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDQpICYgMHgzRl07XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA8PCAyKSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbNjRdO1xuICB9IGVsc2UgaWYgKHRhaWwgPT09IDEpIHtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDIpICYgMHgzRl07XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA8PCA0KSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbNjRdO1xuICAgIHJlc3VsdCArPSBtYXBbNjRdO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gaXNCaW5hcnkob2JqKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gICdbb2JqZWN0IFVpbnQ4QXJyYXldJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6YmluYXJ5Jywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxCaW5hcnksXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbEJpbmFyeSxcbiAgcHJlZGljYXRlOiBpc0JpbmFyeSxcbiAgcmVwcmVzZW50OiByZXByZXNlbnRZYW1sQmluYXJ5XG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsIkJBU0U2NF9NQVAiLCJyZXNvbHZlWWFtbEJpbmFyeSIsImRhdGEiLCJjb2RlIiwiaWR4IiwiYml0bGVuIiwibWF4IiwibGVuZ3RoIiwibWFwIiwiaW5kZXhPZiIsImNoYXJBdCIsImNvbnN0cnVjdFlhbWxCaW5hcnkiLCJ0YWlsYml0cyIsImlucHV0IiwicmVwbGFjZSIsImJpdHMiLCJyZXN1bHQiLCJwdXNoIiwiVWludDhBcnJheSIsInJlcHJlc2VudFlhbWxCaW5hcnkiLCJvYmplY3QiLCJ0YWlsIiwiaXNCaW5hcnkiLCJvYmoiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJtb2R1bGUiLCJleHBvcnRzIiwia2luZCIsInJlc29sdmUiLCJjb25zdHJ1Y3QiLCJwcmVkaWNhdGUiLCJyZXByZXNlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/lib/type/binary.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/bool.js":
/*!*******************************************************!*\
  !*** ../shared/node_modules/js-yaml/lib/type/bool.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/js-yaml/lib/type.js\");\n\nfunction resolveYamlBoolean(data) {\n  if (data === null) return false;\n  var max = data.length;\n  return max === 4 && (data === 'true' || data === 'True' || data === 'TRUE') || max === 5 && (data === 'false' || data === 'False' || data === 'FALSE');\n}\n\nfunction constructYamlBoolean(data) {\n  return data === 'true' || data === 'True' || data === 'TRUE';\n}\n\nfunction isBoolean(object) {\n  return Object.prototype.toString.call(object) === '[object Boolean]';\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:bool', {\n  kind: 'scalar',\n  resolve: resolveYamlBoolean,\n  construct: constructYamlBoolean,\n  predicate: isBoolean,\n  represent: {\n    lowercase: function (object) {\n      return object ? 'true' : 'false';\n    },\n    uppercase: function (object) {\n      return object ? 'TRUE' : 'FALSE';\n    },\n    camelcase: function (object) {\n      return object ? 'True' : 'False';\n    }\n  },\n  defaultStyle: 'lowercase'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi90eXBlL2Jvb2wuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLDJEQUFELENBQWxCOztBQUVBLFNBQVNDLGtCQUFULENBQTRCQyxJQUE1QixFQUFrQztBQUNoQyxNQUFJQSxJQUFJLEtBQUssSUFBYixFQUFtQixPQUFPLEtBQVA7QUFFbkIsTUFBSUMsR0FBRyxHQUFHRCxJQUFJLENBQUNFLE1BQWY7QUFFQSxTQUFRRCxHQUFHLEtBQUssQ0FBUixLQUFjRCxJQUFJLEtBQUssTUFBVCxJQUFtQkEsSUFBSSxLQUFLLE1BQTVCLElBQXNDQSxJQUFJLEtBQUssTUFBN0QsQ0FBRCxJQUNDQyxHQUFHLEtBQUssQ0FBUixLQUFjRCxJQUFJLEtBQUssT0FBVCxJQUFvQkEsSUFBSSxLQUFLLE9BQTdCLElBQXdDQSxJQUFJLEtBQUssT0FBL0QsQ0FEUjtBQUVEOztBQUVELFNBQVNHLG9CQUFULENBQThCSCxJQUE5QixFQUFvQztBQUNsQyxTQUFPQSxJQUFJLEtBQUssTUFBVCxJQUNBQSxJQUFJLEtBQUssTUFEVCxJQUVBQSxJQUFJLEtBQUssTUFGaEI7QUFHRDs7QUFFRCxTQUFTSSxTQUFULENBQW1CQyxNQUFuQixFQUEyQjtBQUN6QixTQUFPQyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCQyxJQUExQixDQUErQkosTUFBL0IsTUFBMkMsa0JBQWxEO0FBQ0Q7O0FBRURLLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixJQUFJZCxJQUFKLENBQVMsd0JBQVQsRUFBbUM7QUFDbERlLEVBQUFBLElBQUksRUFBRSxRQUQ0QztBQUVsREMsRUFBQUEsT0FBTyxFQUFFZCxrQkFGeUM7QUFHbERlLEVBQUFBLFNBQVMsRUFBRVgsb0JBSHVDO0FBSWxEWSxFQUFBQSxTQUFTLEVBQUVYLFNBSnVDO0FBS2xEWSxFQUFBQSxTQUFTLEVBQUU7QUFDVEMsSUFBQUEsU0FBUyxFQUFFLFVBQVVaLE1BQVYsRUFBa0I7QUFBRSxhQUFPQSxNQUFNLEdBQUcsTUFBSCxHQUFZLE9BQXpCO0FBQW1DLEtBRHpEO0FBRVRhLElBQUFBLFNBQVMsRUFBRSxVQUFVYixNQUFWLEVBQWtCO0FBQUUsYUFBT0EsTUFBTSxHQUFHLE1BQUgsR0FBWSxPQUF6QjtBQUFtQyxLQUZ6RDtBQUdUYyxJQUFBQSxTQUFTLEVBQUUsVUFBVWQsTUFBVixFQUFrQjtBQUFFLGFBQU9BLE1BQU0sR0FBRyxNQUFILEdBQVksT0FBekI7QUFBbUM7QUFIekQsR0FMdUM7QUFVbERlLEVBQUFBLFlBQVksRUFBRTtBQVZvQyxDQUFuQyxDQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uLi9zaGFyZWQvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL3R5cGUvYm9vbC5qcz8zZDZjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sQm9vbGVhbihkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIG1heCA9IGRhdGEubGVuZ3RoO1xuXG4gIHJldHVybiAobWF4ID09PSA0ICYmIChkYXRhID09PSAndHJ1ZScgfHwgZGF0YSA9PT0gJ1RydWUnIHx8IGRhdGEgPT09ICdUUlVFJykpIHx8XG4gICAgICAgICAobWF4ID09PSA1ICYmIChkYXRhID09PSAnZmFsc2UnIHx8IGRhdGEgPT09ICdGYWxzZScgfHwgZGF0YSA9PT0gJ0ZBTFNFJykpO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sQm9vbGVhbihkYXRhKSB7XG4gIHJldHVybiBkYXRhID09PSAndHJ1ZScgfHxcbiAgICAgICAgIGRhdGEgPT09ICdUcnVlJyB8fFxuICAgICAgICAgZGF0YSA9PT0gJ1RSVUUnO1xufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4ob2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgQm9vbGVhbl0nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpib29sJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxCb29sZWFuLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxCb29sZWFuLFxuICBwcmVkaWNhdGU6IGlzQm9vbGVhbixcbiAgcmVwcmVzZW50OiB7XG4gICAgbG93ZXJjYXNlOiBmdW5jdGlvbiAob2JqZWN0KSB7IHJldHVybiBvYmplY3QgPyAndHJ1ZScgOiAnZmFsc2UnOyB9LFxuICAgIHVwcGVyY2FzZTogZnVuY3Rpb24gKG9iamVjdCkgeyByZXR1cm4gb2JqZWN0ID8gJ1RSVUUnIDogJ0ZBTFNFJzsgfSxcbiAgICBjYW1lbGNhc2U6IGZ1bmN0aW9uIChvYmplY3QpIHsgcmV0dXJuIG9iamVjdCA/ICdUcnVlJyA6ICdGYWxzZSc7IH1cbiAgfSxcbiAgZGVmYXVsdFN0eWxlOiAnbG93ZXJjYXNlJ1xufSk7XG4iXSwibmFtZXMiOlsiVHlwZSIsInJlcXVpcmUiLCJyZXNvbHZlWWFtbEJvb2xlYW4iLCJkYXRhIiwibWF4IiwibGVuZ3RoIiwiY29uc3RydWN0WWFtbEJvb2xlYW4iLCJpc0Jvb2xlYW4iLCJvYmplY3QiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJtb2R1bGUiLCJleHBvcnRzIiwia2luZCIsInJlc29sdmUiLCJjb25zdHJ1Y3QiLCJwcmVkaWNhdGUiLCJyZXByZXNlbnQiLCJsb3dlcmNhc2UiLCJ1cHBlcmNhc2UiLCJjYW1lbGNhc2UiLCJkZWZhdWx0U3R5bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/lib/type/bool.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/float.js":
/*!********************************************************!*\
  !*** ../shared/node_modules/js-yaml/lib/type/float.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar common = __webpack_require__(/*! ../common */ \"../shared/node_modules/js-yaml/lib/common.js\");\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/js-yaml/lib/type.js\");\n\nvar YAML_FLOAT_PATTERN = new RegExp( // 2.5e4, 2.5 and integers\n'^(?:[-+]?(?:[0-9][0-9_]*)(?:\\\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' + // .2e4, .2\n// special case, seems not from spec\n'|\\\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' + // .inf\n'|[-+]?\\\\.(?:inf|Inf|INF)' + // .nan\n'|\\\\.(?:nan|NaN|NAN))$');\n\nfunction resolveYamlFloat(data) {\n  if (data === null) return false;\n\n  if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`\n  // Probably should update regexp & check speed\n  data[data.length - 1] === '_') {\n    return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlFloat(data) {\n  var value, sign;\n  value = data.replace(/_/g, '').toLowerCase();\n  sign = value[0] === '-' ? -1 : 1;\n\n  if ('+-'.indexOf(value[0]) >= 0) {\n    value = value.slice(1);\n  }\n\n  if (value === '.inf') {\n    return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n  } else if (value === '.nan') {\n    return NaN;\n  }\n\n  return sign * parseFloat(value, 10);\n}\n\nvar SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;\n\nfunction representYamlFloat(object, style) {\n  var res;\n\n  if (isNaN(object)) {\n    switch (style) {\n      case 'lowercase':\n        return '.nan';\n\n      case 'uppercase':\n        return '.NAN';\n\n      case 'camelcase':\n        return '.NaN';\n    }\n  } else if (Number.POSITIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase':\n        return '.inf';\n\n      case 'uppercase':\n        return '.INF';\n\n      case 'camelcase':\n        return '.Inf';\n    }\n  } else if (Number.NEGATIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase':\n        return '-.inf';\n\n      case 'uppercase':\n        return '-.INF';\n\n      case 'camelcase':\n        return '-.Inf';\n    }\n  } else if (common.isNegativeZero(object)) {\n    return '-0.0';\n  }\n\n  res = object.toString(10); // JS stringifier can build scientific format without dots: 5e-100,\n  // while YAML requres dot: 5.e-100. Fix it with simple hack\n\n  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;\n}\n\nfunction isFloat(object) {\n  return Object.prototype.toString.call(object) === '[object Number]' && (object % 1 !== 0 || common.isNegativeZero(object));\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:float', {\n  kind: 'scalar',\n  resolve: resolveYamlFloat,\n  construct: constructYamlFloat,\n  predicate: isFloat,\n  represent: representYamlFloat,\n  defaultStyle: 'lowercase'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi90eXBlL2Zsb2F0LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQywrREFBRCxDQUFwQjs7QUFDQSxJQUFJQyxJQUFJLEdBQUtELG1CQUFPLENBQUMsMkRBQUQsQ0FBcEI7O0FBRUEsSUFBSUUsa0JBQWtCLEdBQUcsSUFBSUMsTUFBSixFQUN2QjtBQUNBLGlFQUNBO0FBQ0E7QUFDQSxpQ0FIQSxHQUlBO0FBQ0EsMEJBTEEsR0FNQTtBQUNBLHVCQVR1QixDQUF6Qjs7QUFXQSxTQUFTQyxnQkFBVCxDQUEwQkMsSUFBMUIsRUFBZ0M7QUFDOUIsTUFBSUEsSUFBSSxLQUFLLElBQWIsRUFBbUIsT0FBTyxLQUFQOztBQUVuQixNQUFJLENBQUNILGtCQUFrQixDQUFDSSxJQUFuQixDQUF3QkQsSUFBeEIsQ0FBRCxJQUNBO0FBQ0E7QUFDQUEsRUFBQUEsSUFBSSxDQUFDQSxJQUFJLENBQUNFLE1BQUwsR0FBYyxDQUFmLENBQUosS0FBMEIsR0FIOUIsRUFHbUM7QUFDakMsV0FBTyxLQUFQO0FBQ0Q7O0FBRUQsU0FBTyxJQUFQO0FBQ0Q7O0FBRUQsU0FBU0Msa0JBQVQsQ0FBNEJILElBQTVCLEVBQWtDO0FBQ2hDLE1BQUlJLEtBQUosRUFBV0MsSUFBWDtBQUVBRCxFQUFBQSxLQUFLLEdBQUlKLElBQUksQ0FBQ00sT0FBTCxDQUFhLElBQWIsRUFBbUIsRUFBbkIsRUFBdUJDLFdBQXZCLEVBQVQ7QUFDQUYsRUFBQUEsSUFBSSxHQUFLRCxLQUFLLENBQUMsQ0FBRCxDQUFMLEtBQWEsR0FBYixHQUFtQixDQUFDLENBQXBCLEdBQXdCLENBQWpDOztBQUVBLE1BQUksS0FBS0ksT0FBTCxDQUFhSixLQUFLLENBQUMsQ0FBRCxDQUFsQixLQUEwQixDQUE5QixFQUFpQztBQUMvQkEsSUFBQUEsS0FBSyxHQUFHQSxLQUFLLENBQUNLLEtBQU4sQ0FBWSxDQUFaLENBQVI7QUFDRDs7QUFFRCxNQUFJTCxLQUFLLEtBQUssTUFBZCxFQUFzQjtBQUNwQixXQUFRQyxJQUFJLEtBQUssQ0FBVixHQUFlSyxNQUFNLENBQUNDLGlCQUF0QixHQUEwQ0QsTUFBTSxDQUFDRSxpQkFBeEQ7QUFFRCxHQUhELE1BR08sSUFBSVIsS0FBSyxLQUFLLE1BQWQsRUFBc0I7QUFDM0IsV0FBT1MsR0FBUDtBQUNEOztBQUNELFNBQU9SLElBQUksR0FBR1MsVUFBVSxDQUFDVixLQUFELEVBQVEsRUFBUixDQUF4QjtBQUNEOztBQUdELElBQUlXLHNCQUFzQixHQUFHLGVBQTdCOztBQUVBLFNBQVNDLGtCQUFULENBQTRCQyxNQUE1QixFQUFvQ0MsS0FBcEMsRUFBMkM7QUFDekMsTUFBSUMsR0FBSjs7QUFFQSxNQUFJQyxLQUFLLENBQUNILE1BQUQsQ0FBVCxFQUFtQjtBQUNqQixZQUFRQyxLQUFSO0FBQ0UsV0FBSyxXQUFMO0FBQWtCLGVBQU8sTUFBUDs7QUFDbEIsV0FBSyxXQUFMO0FBQWtCLGVBQU8sTUFBUDs7QUFDbEIsV0FBSyxXQUFMO0FBQWtCLGVBQU8sTUFBUDtBQUhwQjtBQUtELEdBTkQsTUFNTyxJQUFJUixNQUFNLENBQUNDLGlCQUFQLEtBQTZCTSxNQUFqQyxFQUF5QztBQUM5QyxZQUFRQyxLQUFSO0FBQ0UsV0FBSyxXQUFMO0FBQWtCLGVBQU8sTUFBUDs7QUFDbEIsV0FBSyxXQUFMO0FBQWtCLGVBQU8sTUFBUDs7QUFDbEIsV0FBSyxXQUFMO0FBQWtCLGVBQU8sTUFBUDtBQUhwQjtBQUtELEdBTk0sTUFNQSxJQUFJUixNQUFNLENBQUNFLGlCQUFQLEtBQTZCSyxNQUFqQyxFQUF5QztBQUM5QyxZQUFRQyxLQUFSO0FBQ0UsV0FBSyxXQUFMO0FBQWtCLGVBQU8sT0FBUDs7QUFDbEIsV0FBSyxXQUFMO0FBQWtCLGVBQU8sT0FBUDs7QUFDbEIsV0FBSyxXQUFMO0FBQWtCLGVBQU8sT0FBUDtBQUhwQjtBQUtELEdBTk0sTUFNQSxJQUFJeEIsTUFBTSxDQUFDMkIsY0FBUCxDQUFzQkosTUFBdEIsQ0FBSixFQUFtQztBQUN4QyxXQUFPLE1BQVA7QUFDRDs7QUFFREUsRUFBQUEsR0FBRyxHQUFHRixNQUFNLENBQUNLLFFBQVAsQ0FBZ0IsRUFBaEIsQ0FBTixDQXpCeUMsQ0EyQnpDO0FBQ0E7O0FBRUEsU0FBT1Asc0JBQXNCLENBQUNkLElBQXZCLENBQTRCa0IsR0FBNUIsSUFBbUNBLEdBQUcsQ0FBQ2IsT0FBSixDQUFZLEdBQVosRUFBaUIsSUFBakIsQ0FBbkMsR0FBNERhLEdBQW5FO0FBQ0Q7O0FBRUQsU0FBU0ksT0FBVCxDQUFpQk4sTUFBakIsRUFBeUI7QUFDdkIsU0FBUU8sTUFBTSxDQUFDQyxTQUFQLENBQWlCSCxRQUFqQixDQUEwQkksSUFBMUIsQ0FBK0JULE1BQS9CLE1BQTJDLGlCQUE1QyxLQUNDQSxNQUFNLEdBQUcsQ0FBVCxLQUFlLENBQWYsSUFBb0J2QixNQUFNLENBQUMyQixjQUFQLENBQXNCSixNQUF0QixDQURyQixDQUFQO0FBRUQ7O0FBRURVLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixJQUFJaEMsSUFBSixDQUFTLHlCQUFULEVBQW9DO0FBQ25EaUMsRUFBQUEsSUFBSSxFQUFFLFFBRDZDO0FBRW5EQyxFQUFBQSxPQUFPLEVBQUUvQixnQkFGMEM7QUFHbkRnQyxFQUFBQSxTQUFTLEVBQUU1QixrQkFId0M7QUFJbkQ2QixFQUFBQSxTQUFTLEVBQUVULE9BSndDO0FBS25EVSxFQUFBQSxTQUFTLEVBQUVqQixrQkFMd0M7QUFNbkRrQixFQUFBQSxZQUFZLEVBQUU7QUFOcUMsQ0FBcEMsQ0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi90eXBlL2Zsb2F0LmpzP2ExMDciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG52YXIgVHlwZSAgID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG52YXIgWUFNTF9GTE9BVF9QQVRURVJOID0gbmV3IFJlZ0V4cChcbiAgLy8gMi41ZTQsIDIuNSBhbmQgaW50ZWdlcnNcbiAgJ14oPzpbLStdPyg/OlswLTldWzAtOV9dKikoPzpcXFxcLlswLTlfXSopPyg/OltlRV1bLStdP1swLTldKyk/JyArXG4gIC8vIC4yZTQsIC4yXG4gIC8vIHNwZWNpYWwgY2FzZSwgc2VlbXMgbm90IGZyb20gc3BlY1xuICAnfFxcXFwuWzAtOV9dKyg/OltlRV1bLStdP1swLTldKyk/JyArXG4gIC8vIC5pbmZcbiAgJ3xbLStdP1xcXFwuKD86aW5mfEluZnxJTkYpJyArXG4gIC8vIC5uYW5cbiAgJ3xcXFxcLig/Om5hbnxOYU58TkFOKSkkJyk7XG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sRmxvYXQoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICghWUFNTF9GTE9BVF9QQVRURVJOLnRlc3QoZGF0YSkgfHxcbiAgICAgIC8vIFF1aWNrIGhhY2sgdG8gbm90IGFsbG93IGludGVnZXJzIGVuZCB3aXRoIGBfYFxuICAgICAgLy8gUHJvYmFibHkgc2hvdWxkIHVwZGF0ZSByZWdleHAgJiBjaGVjayBzcGVlZFxuICAgICAgZGF0YVtkYXRhLmxlbmd0aCAtIDFdID09PSAnXycpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbEZsb2F0KGRhdGEpIHtcbiAgdmFyIHZhbHVlLCBzaWduO1xuXG4gIHZhbHVlICA9IGRhdGEucmVwbGFjZSgvXy9nLCAnJykudG9Mb3dlckNhc2UoKTtcbiAgc2lnbiAgID0gdmFsdWVbMF0gPT09ICctJyA/IC0xIDogMTtcblxuICBpZiAoJystJy5pbmRleE9mKHZhbHVlWzBdKSA+PSAwKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgxKTtcbiAgfVxuXG4gIGlmICh2YWx1ZSA9PT0gJy5pbmYnKSB7XG4gICAgcmV0dXJuIChzaWduID09PSAxKSA/IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSA6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcblxuICB9IGVsc2UgaWYgKHZhbHVlID09PSAnLm5hbicpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG4gIHJldHVybiBzaWduICogcGFyc2VGbG9hdCh2YWx1ZSwgMTApO1xufVxuXG5cbnZhciBTQ0lFTlRJRklDX1dJVEhPVVRfRE9UID0gL15bLStdP1swLTldK2UvO1xuXG5mdW5jdGlvbiByZXByZXNlbnRZYW1sRmxvYXQob2JqZWN0LCBzdHlsZSkge1xuICB2YXIgcmVzO1xuXG4gIGlmIChpc05hTihvYmplY3QpKSB7XG4gICAgc3dpdGNoIChzdHlsZSkge1xuICAgICAgY2FzZSAnbG93ZXJjYXNlJzogcmV0dXJuICcubmFuJztcbiAgICAgIGNhc2UgJ3VwcGVyY2FzZSc6IHJldHVybiAnLk5BTic7XG4gICAgICBjYXNlICdjYW1lbGNhc2UnOiByZXR1cm4gJy5OYU4nO1xuICAgIH1cbiAgfSBlbHNlIGlmIChOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgPT09IG9iamVjdCkge1xuICAgIHN3aXRjaCAoc3R5bGUpIHtcbiAgICAgIGNhc2UgJ2xvd2VyY2FzZSc6IHJldHVybiAnLmluZic7XG4gICAgICBjYXNlICd1cHBlcmNhc2UnOiByZXR1cm4gJy5JTkYnO1xuICAgICAgY2FzZSAnY2FtZWxjYXNlJzogcmV0dXJuICcuSW5mJztcbiAgICB9XG4gIH0gZWxzZSBpZiAoTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZID09PSBvYmplY3QpIHtcbiAgICBzd2l0Y2ggKHN0eWxlKSB7XG4gICAgICBjYXNlICdsb3dlcmNhc2UnOiByZXR1cm4gJy0uaW5mJztcbiAgICAgIGNhc2UgJ3VwcGVyY2FzZSc6IHJldHVybiAnLS5JTkYnO1xuICAgICAgY2FzZSAnY2FtZWxjYXNlJzogcmV0dXJuICctLkluZic7XG4gICAgfVxuICB9IGVsc2UgaWYgKGNvbW1vbi5pc05lZ2F0aXZlWmVybyhvYmplY3QpKSB7XG4gICAgcmV0dXJuICctMC4wJztcbiAgfVxuXG4gIHJlcyA9IG9iamVjdC50b1N0cmluZygxMCk7XG5cbiAgLy8gSlMgc3RyaW5naWZpZXIgY2FuIGJ1aWxkIHNjaWVudGlmaWMgZm9ybWF0IHdpdGhvdXQgZG90czogNWUtMTAwLFxuICAvLyB3aGlsZSBZQU1MIHJlcXVyZXMgZG90OiA1LmUtMTAwLiBGaXggaXQgd2l0aCBzaW1wbGUgaGFja1xuXG4gIHJldHVybiBTQ0lFTlRJRklDX1dJVEhPVVRfRE9ULnRlc3QocmVzKSA/IHJlcy5yZXBsYWNlKCdlJywgJy5lJykgOiByZXM7XG59XG5cbmZ1bmN0aW9uIGlzRmxvYXQob2JqZWN0KSB7XG4gIHJldHVybiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IE51bWJlcl0nKSAmJlxuICAgICAgICAgKG9iamVjdCAlIDEgIT09IDAgfHwgY29tbW9uLmlzTmVnYXRpdmVaZXJvKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpmbG9hdCcsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sRmxvYXQsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbEZsb2F0LFxuICBwcmVkaWNhdGU6IGlzRmxvYXQsXG4gIHJlcHJlc2VudDogcmVwcmVzZW50WWFtbEZsb2F0LFxuICBkZWZhdWx0U3R5bGU6ICdsb3dlcmNhc2UnXG59KTtcbiJdLCJuYW1lcyI6WyJjb21tb24iLCJyZXF1aXJlIiwiVHlwZSIsIllBTUxfRkxPQVRfUEFUVEVSTiIsIlJlZ0V4cCIsInJlc29sdmVZYW1sRmxvYXQiLCJkYXRhIiwidGVzdCIsImxlbmd0aCIsImNvbnN0cnVjdFlhbWxGbG9hdCIsInZhbHVlIiwic2lnbiIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsImluZGV4T2YiLCJzbGljZSIsIk51bWJlciIsIlBPU0lUSVZFX0lORklOSVRZIiwiTkVHQVRJVkVfSU5GSU5JVFkiLCJOYU4iLCJwYXJzZUZsb2F0IiwiU0NJRU5USUZJQ19XSVRIT1VUX0RPVCIsInJlcHJlc2VudFlhbWxGbG9hdCIsIm9iamVjdCIsInN0eWxlIiwicmVzIiwiaXNOYU4iLCJpc05lZ2F0aXZlWmVybyIsInRvU3RyaW5nIiwiaXNGbG9hdCIsIk9iamVjdCIsInByb3RvdHlwZSIsImNhbGwiLCJtb2R1bGUiLCJleHBvcnRzIiwia2luZCIsInJlc29sdmUiLCJjb25zdHJ1Y3QiLCJwcmVkaWNhdGUiLCJyZXByZXNlbnQiLCJkZWZhdWx0U3R5bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/lib/type/float.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/int.js":
/*!******************************************************!*\
  !*** ../shared/node_modules/js-yaml/lib/type/int.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar common = __webpack_require__(/*! ../common */ \"../shared/node_modules/js-yaml/lib/common.js\");\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/js-yaml/lib/type.js\");\n\nfunction isHexCode(c) {\n  return 0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  || 0x41\n  /* A */\n  <= c && c <= 0x46\n  /* F */\n  || 0x61\n  /* a */\n  <= c && c <= 0x66\n  /* f */\n  ;\n}\n\nfunction isOctCode(c) {\n  return 0x30\n  /* 0 */\n  <= c && c <= 0x37\n  /* 7 */\n  ;\n}\n\nfunction isDecCode(c) {\n  return 0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  ;\n}\n\nfunction resolveYamlInteger(data) {\n  if (data === null) return false;\n  var max = data.length,\n      index = 0,\n      hasDigits = false,\n      ch;\n  if (!max) return false;\n  ch = data[index]; // sign\n\n  if (ch === '-' || ch === '+') {\n    ch = data[++index];\n  }\n\n  if (ch === '0') {\n    // 0\n    if (index + 1 === max) return true;\n    ch = data[++index]; // base 2, base 8, base 16\n\n    if (ch === 'b') {\n      // base 2\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (ch !== '0' && ch !== '1') return false;\n        hasDigits = true;\n      }\n\n      return hasDigits && ch !== '_';\n    }\n\n    if (ch === 'x') {\n      // base 16\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isHexCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n\n      return hasDigits && ch !== '_';\n    }\n\n    if (ch === 'o') {\n      // base 8\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isOctCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n\n      return hasDigits && ch !== '_';\n    }\n  } // base 10 (except 0)\n  // value should not start with `_`;\n\n\n  if (ch === '_') return false;\n\n  for (; index < max; index++) {\n    ch = data[index];\n    if (ch === '_') continue;\n\n    if (!isDecCode(data.charCodeAt(index))) {\n      return false;\n    }\n\n    hasDigits = true;\n  } // Should have digits and should not end with `_`\n\n\n  if (!hasDigits || ch === '_') return false;\n  return true;\n}\n\nfunction constructYamlInteger(data) {\n  var value = data,\n      sign = 1,\n      ch;\n\n  if (value.indexOf('_') !== -1) {\n    value = value.replace(/_/g, '');\n  }\n\n  ch = value[0];\n\n  if (ch === '-' || ch === '+') {\n    if (ch === '-') sign = -1;\n    value = value.slice(1);\n    ch = value[0];\n  }\n\n  if (value === '0') return 0;\n\n  if (ch === '0') {\n    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);\n    if (value[1] === 'x') return sign * parseInt(value.slice(2), 16);\n    if (value[1] === 'o') return sign * parseInt(value.slice(2), 8);\n  }\n\n  return sign * parseInt(value, 10);\n}\n\nfunction isInteger(object) {\n  return Object.prototype.toString.call(object) === '[object Number]' && object % 1 === 0 && !common.isNegativeZero(object);\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:int', {\n  kind: 'scalar',\n  resolve: resolveYamlInteger,\n  construct: constructYamlInteger,\n  predicate: isInteger,\n  represent: {\n    binary: function (obj) {\n      return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1);\n    },\n    octal: function (obj) {\n      return obj >= 0 ? '0o' + obj.toString(8) : '-0o' + obj.toString(8).slice(1);\n    },\n    decimal: function (obj) {\n      return obj.toString(10);\n    },\n\n    /* eslint-disable max-len */\n    hexadecimal: function (obj) {\n      return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() : '-0x' + obj.toString(16).toUpperCase().slice(1);\n    }\n  },\n  defaultStyle: 'decimal',\n  styleAliases: {\n    binary: [2, 'bin'],\n    octal: [8, 'oct'],\n    decimal: [10, 'dec'],\n    hexadecimal: [16, 'hex']\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/lib/type/int.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/map.js":
/*!******************************************************!*\
  !*** ../shared/node_modules/js-yaml/lib/type/map.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/js-yaml/lib/type.js\");\n\nmodule.exports = new Type('tag:yaml.org,2002:map', {\n  kind: 'mapping',\n  construct: function (data) {\n    return data !== null ? data : {};\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi90eXBlL21hcC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxJQUFJLEdBQUdDLG1CQUFPLENBQUMsMkRBQUQsQ0FBbEI7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixJQUFJSCxJQUFKLENBQVMsdUJBQVQsRUFBa0M7QUFDakRJLEVBQUFBLElBQUksRUFBRSxTQUQyQztBQUVqREMsRUFBQUEsU0FBUyxFQUFFLFVBQVVDLElBQVYsRUFBZ0I7QUFBRSxXQUFPQSxJQUFJLEtBQUssSUFBVCxHQUFnQkEsSUFBaEIsR0FBdUIsRUFBOUI7QUFBbUM7QUFGZixDQUFsQyxDQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uLi9zaGFyZWQvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL3R5cGUvbWFwLmpzPzg5MGUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6bWFwJywge1xuICBraW5kOiAnbWFwcGluZycsXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIGRhdGEgIT09IG51bGwgPyBkYXRhIDoge307IH1cbn0pO1xuIl0sIm5hbWVzIjpbIlR5cGUiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImtpbmQiLCJjb25zdHJ1Y3QiLCJkYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/lib/type/map.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/merge.js":
/*!********************************************************!*\
  !*** ../shared/node_modules/js-yaml/lib/type/merge.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/js-yaml/lib/type.js\");\n\nfunction resolveYamlMerge(data) {\n  return data === '<<' || data === null;\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:merge', {\n  kind: 'scalar',\n  resolve: resolveYamlMerge\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi90eXBlL21lcmdlLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLElBQUksR0FBR0MsbUJBQU8sQ0FBQywyREFBRCxDQUFsQjs7QUFFQSxTQUFTQyxnQkFBVCxDQUEwQkMsSUFBMUIsRUFBZ0M7QUFDOUIsU0FBT0EsSUFBSSxLQUFLLElBQVQsSUFBaUJBLElBQUksS0FBSyxJQUFqQztBQUNEOztBQUVEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsSUFBSUwsSUFBSixDQUFTLHlCQUFULEVBQW9DO0FBQ25ETSxFQUFBQSxJQUFJLEVBQUUsUUFENkM7QUFFbkRDLEVBQUFBLE9BQU8sRUFBRUw7QUFGMEMsQ0FBcEMsQ0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi90eXBlL21lcmdlLmpzP2UyZmQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxNZXJnZShkYXRhKSB7XG4gIHJldHVybiBkYXRhID09PSAnPDwnIHx8IGRhdGEgPT09IG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOm1lcmdlJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxNZXJnZVxufSk7XG4iXSwibmFtZXMiOlsiVHlwZSIsInJlcXVpcmUiLCJyZXNvbHZlWWFtbE1lcmdlIiwiZGF0YSIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwicmVzb2x2ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/lib/type/merge.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/null.js":
/*!*******************************************************!*\
  !*** ../shared/node_modules/js-yaml/lib/type/null.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/js-yaml/lib/type.js\");\n\nfunction resolveYamlNull(data) {\n  if (data === null) return true;\n  var max = data.length;\n  return max === 1 && data === '~' || max === 4 && (data === 'null' || data === 'Null' || data === 'NULL');\n}\n\nfunction constructYamlNull() {\n  return null;\n}\n\nfunction isNull(object) {\n  return object === null;\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:null', {\n  kind: 'scalar',\n  resolve: resolveYamlNull,\n  construct: constructYamlNull,\n  predicate: isNull,\n  represent: {\n    canonical: function () {\n      return '~';\n    },\n    lowercase: function () {\n      return 'null';\n    },\n    uppercase: function () {\n      return 'NULL';\n    },\n    camelcase: function () {\n      return 'Null';\n    },\n    empty: function () {\n      return '';\n    }\n  },\n  defaultStyle: 'lowercase'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi90eXBlL251bGwuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLDJEQUFELENBQWxCOztBQUVBLFNBQVNDLGVBQVQsQ0FBeUJDLElBQXpCLEVBQStCO0FBQzdCLE1BQUlBLElBQUksS0FBSyxJQUFiLEVBQW1CLE9BQU8sSUFBUDtBQUVuQixNQUFJQyxHQUFHLEdBQUdELElBQUksQ0FBQ0UsTUFBZjtBQUVBLFNBQVFELEdBQUcsS0FBSyxDQUFSLElBQWFELElBQUksS0FBSyxHQUF2QixJQUNDQyxHQUFHLEtBQUssQ0FBUixLQUFjRCxJQUFJLEtBQUssTUFBVCxJQUFtQkEsSUFBSSxLQUFLLE1BQTVCLElBQXNDQSxJQUFJLEtBQUssTUFBN0QsQ0FEUjtBQUVEOztBQUVELFNBQVNHLGlCQUFULEdBQTZCO0FBQzNCLFNBQU8sSUFBUDtBQUNEOztBQUVELFNBQVNDLE1BQVQsQ0FBZ0JDLE1BQWhCLEVBQXdCO0FBQ3RCLFNBQU9BLE1BQU0sS0FBSyxJQUFsQjtBQUNEOztBQUVEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsSUFBSVYsSUFBSixDQUFTLHdCQUFULEVBQW1DO0FBQ2xEVyxFQUFBQSxJQUFJLEVBQUUsUUFENEM7QUFFbERDLEVBQUFBLE9BQU8sRUFBRVYsZUFGeUM7QUFHbERXLEVBQUFBLFNBQVMsRUFBRVAsaUJBSHVDO0FBSWxEUSxFQUFBQSxTQUFTLEVBQUVQLE1BSnVDO0FBS2xEUSxFQUFBQSxTQUFTLEVBQUU7QUFDVEMsSUFBQUEsU0FBUyxFQUFFLFlBQVk7QUFBRSxhQUFPLEdBQVA7QUFBZ0IsS0FEaEM7QUFFVEMsSUFBQUEsU0FBUyxFQUFFLFlBQVk7QUFBRSxhQUFPLE1BQVA7QUFBZ0IsS0FGaEM7QUFHVEMsSUFBQUEsU0FBUyxFQUFFLFlBQVk7QUFBRSxhQUFPLE1BQVA7QUFBZ0IsS0FIaEM7QUFJVEMsSUFBQUEsU0FBUyxFQUFFLFlBQVk7QUFBRSxhQUFPLE1BQVA7QUFBZ0IsS0FKaEM7QUFLVEMsSUFBQUEsS0FBSyxFQUFNLFlBQVk7QUFBRSxhQUFPLEVBQVA7QUFBZ0I7QUFMaEMsR0FMdUM7QUFZbERDLEVBQUFBLFlBQVksRUFBRTtBQVpvQyxDQUFuQyxDQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uLi9zaGFyZWQvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL3R5cGUvbnVsbC5qcz9mMWEyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sTnVsbChkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcblxuICB2YXIgbWF4ID0gZGF0YS5sZW5ndGg7XG5cbiAgcmV0dXJuIChtYXggPT09IDEgJiYgZGF0YSA9PT0gJ34nKSB8fFxuICAgICAgICAgKG1heCA9PT0gNCAmJiAoZGF0YSA9PT0gJ251bGwnIHx8IGRhdGEgPT09ICdOdWxsJyB8fCBkYXRhID09PSAnTlVMTCcpKTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbE51bGwoKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBpc051bGwob2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3QgPT09IG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOm51bGwnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbE51bGwsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbE51bGwsXG4gIHByZWRpY2F0ZTogaXNOdWxsLFxuICByZXByZXNlbnQ6IHtcbiAgICBjYW5vbmljYWw6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICd+JzsgICAgfSxcbiAgICBsb3dlcmNhc2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdudWxsJzsgfSxcbiAgICB1cHBlcmNhc2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdOVUxMJzsgfSxcbiAgICBjYW1lbGNhc2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdOdWxsJzsgfSxcbiAgICBlbXB0eTogICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuICcnOyAgICAgfVxuICB9LFxuICBkZWZhdWx0U3R5bGU6ICdsb3dlcmNhc2UnXG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsInJlc29sdmVZYW1sTnVsbCIsImRhdGEiLCJtYXgiLCJsZW5ndGgiLCJjb25zdHJ1Y3RZYW1sTnVsbCIsImlzTnVsbCIsIm9iamVjdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwicmVzb2x2ZSIsImNvbnN0cnVjdCIsInByZWRpY2F0ZSIsInJlcHJlc2VudCIsImNhbm9uaWNhbCIsImxvd2VyY2FzZSIsInVwcGVyY2FzZSIsImNhbWVsY2FzZSIsImVtcHR5IiwiZGVmYXVsdFN0eWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/lib/type/null.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/omap.js":
/*!*******************************************************!*\
  !*** ../shared/node_modules/js-yaml/lib/type/omap.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/js-yaml/lib/type.js\");\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar _toString = Object.prototype.toString;\n\nfunction resolveYamlOmap(data) {\n  if (data === null) return true;\n  var objectKeys = [],\n      index,\n      length,\n      pair,\n      pairKey,\n      pairHasKey,\n      object = data;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    pairHasKey = false;\n    if (_toString.call(pair) !== '[object Object]') return false;\n\n    for (pairKey in pair) {\n      if (_hasOwnProperty.call(pair, pairKey)) {\n        if (!pairHasKey) pairHasKey = true;else return false;\n      }\n    }\n\n    if (!pairHasKey) return false;\n    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);else return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlOmap(data) {\n  return data !== null ? data : [];\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:omap', {\n  kind: 'sequence',\n  resolve: resolveYamlOmap,\n  construct: constructYamlOmap\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi90eXBlL29tYXAuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLDJEQUFELENBQWxCOztBQUVBLElBQUlDLGVBQWUsR0FBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxjQUF2QztBQUNBLElBQUlDLFNBQVMsR0FBU0gsTUFBTSxDQUFDQyxTQUFQLENBQWlCRyxRQUF2Qzs7QUFFQSxTQUFTQyxlQUFULENBQXlCQyxJQUF6QixFQUErQjtBQUM3QixNQUFJQSxJQUFJLEtBQUssSUFBYixFQUFtQixPQUFPLElBQVA7QUFFbkIsTUFBSUMsVUFBVSxHQUFHLEVBQWpCO0FBQUEsTUFBcUJDLEtBQXJCO0FBQUEsTUFBNEJDLE1BQTVCO0FBQUEsTUFBb0NDLElBQXBDO0FBQUEsTUFBMENDLE9BQTFDO0FBQUEsTUFBbURDLFVBQW5EO0FBQUEsTUFDSUMsTUFBTSxHQUFHUCxJQURiOztBQUdBLE9BQUtFLEtBQUssR0FBRyxDQUFSLEVBQVdDLE1BQU0sR0FBR0ksTUFBTSxDQUFDSixNQUFoQyxFQUF3Q0QsS0FBSyxHQUFHQyxNQUFoRCxFQUF3REQsS0FBSyxJQUFJLENBQWpFLEVBQW9FO0FBQ2xFRSxJQUFBQSxJQUFJLEdBQUdHLE1BQU0sQ0FBQ0wsS0FBRCxDQUFiO0FBQ0FJLElBQUFBLFVBQVUsR0FBRyxLQUFiO0FBRUEsUUFBSVQsU0FBUyxDQUFDVyxJQUFWLENBQWVKLElBQWYsTUFBeUIsaUJBQTdCLEVBQWdELE9BQU8sS0FBUDs7QUFFaEQsU0FBS0MsT0FBTCxJQUFnQkQsSUFBaEIsRUFBc0I7QUFDcEIsVUFBSVgsZUFBZSxDQUFDZSxJQUFoQixDQUFxQkosSUFBckIsRUFBMkJDLE9BQTNCLENBQUosRUFBeUM7QUFDdkMsWUFBSSxDQUFDQyxVQUFMLEVBQWlCQSxVQUFVLEdBQUcsSUFBYixDQUFqQixLQUNLLE9BQU8sS0FBUDtBQUNOO0FBQ0Y7O0FBRUQsUUFBSSxDQUFDQSxVQUFMLEVBQWlCLE9BQU8sS0FBUDtBQUVqQixRQUFJTCxVQUFVLENBQUNRLE9BQVgsQ0FBbUJKLE9BQW5CLE1BQWdDLENBQUMsQ0FBckMsRUFBd0NKLFVBQVUsQ0FBQ1MsSUFBWCxDQUFnQkwsT0FBaEIsRUFBeEMsS0FDSyxPQUFPLEtBQVA7QUFDTjs7QUFFRCxTQUFPLElBQVA7QUFDRDs7QUFFRCxTQUFTTSxpQkFBVCxDQUEyQlgsSUFBM0IsRUFBaUM7QUFDL0IsU0FBT0EsSUFBSSxLQUFLLElBQVQsR0FBZ0JBLElBQWhCLEdBQXVCLEVBQTlCO0FBQ0Q7O0FBRURZLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixJQUFJdEIsSUFBSixDQUFTLHdCQUFULEVBQW1DO0FBQ2xEdUIsRUFBQUEsSUFBSSxFQUFFLFVBRDRDO0FBRWxEQyxFQUFBQSxPQUFPLEVBQUVoQixlQUZ5QztBQUdsRGlCLEVBQUFBLFNBQVMsRUFBRUw7QUFIdUMsQ0FBbkMsQ0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi90eXBlL29tYXAuanM/YzZhNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG52YXIgX2hhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfdG9TdHJpbmcgICAgICAgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbE9tYXAoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIHRydWU7XG5cbiAgdmFyIG9iamVjdEtleXMgPSBbXSwgaW5kZXgsIGxlbmd0aCwgcGFpciwgcGFpcktleSwgcGFpckhhc0tleSxcbiAgICAgIG9iamVjdCA9IGRhdGE7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgcGFpciA9IG9iamVjdFtpbmRleF07XG4gICAgcGFpckhhc0tleSA9IGZhbHNlO1xuXG4gICAgaWYgKF90b1N0cmluZy5jYWxsKHBhaXIpICE9PSAnW29iamVjdCBPYmplY3RdJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChwYWlyS2V5IGluIHBhaXIpIHtcbiAgICAgIGlmIChfaGFzT3duUHJvcGVydHkuY2FsbChwYWlyLCBwYWlyS2V5KSkge1xuICAgICAgICBpZiAoIXBhaXJIYXNLZXkpIHBhaXJIYXNLZXkgPSB0cnVlO1xuICAgICAgICBlbHNlIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXBhaXJIYXNLZXkpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChvYmplY3RLZXlzLmluZGV4T2YocGFpcktleSkgPT09IC0xKSBvYmplY3RLZXlzLnB1c2gocGFpcktleSk7XG4gICAgZWxzZSByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbE9tYXAoZGF0YSkge1xuICByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6b21hcCcsIHtcbiAga2luZDogJ3NlcXVlbmNlJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxPbWFwLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxPbWFwXG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsIl9oYXNPd25Qcm9wZXJ0eSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX3RvU3RyaW5nIiwidG9TdHJpbmciLCJyZXNvbHZlWWFtbE9tYXAiLCJkYXRhIiwib2JqZWN0S2V5cyIsImluZGV4IiwibGVuZ3RoIiwicGFpciIsInBhaXJLZXkiLCJwYWlySGFzS2V5Iiwib2JqZWN0IiwiY2FsbCIsImluZGV4T2YiLCJwdXNoIiwiY29uc3RydWN0WWFtbE9tYXAiLCJtb2R1bGUiLCJleHBvcnRzIiwia2luZCIsInJlc29sdmUiLCJjb25zdHJ1Y3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/lib/type/omap.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/pairs.js":
/*!********************************************************!*\
  !*** ../shared/node_modules/js-yaml/lib/type/pairs.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/js-yaml/lib/type.js\");\n\nvar _toString = Object.prototype.toString;\n\nfunction resolveYamlPairs(data) {\n  if (data === null) return true;\n  var index,\n      length,\n      pair,\n      keys,\n      result,\n      object = data;\n  result = new Array(object.length);\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    if (_toString.call(pair) !== '[object Object]') return false;\n    keys = Object.keys(pair);\n    if (keys.length !== 1) return false;\n    result[index] = [keys[0], pair[keys[0]]];\n  }\n\n  return true;\n}\n\nfunction constructYamlPairs(data) {\n  if (data === null) return [];\n  var index,\n      length,\n      pair,\n      keys,\n      result,\n      object = data;\n  result = new Array(object.length);\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    keys = Object.keys(pair);\n    result[index] = [keys[0], pair[keys[0]]];\n  }\n\n  return result;\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:pairs', {\n  kind: 'sequence',\n  resolve: resolveYamlPairs,\n  construct: constructYamlPairs\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi90eXBlL3BhaXJzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLElBQUksR0FBR0MsbUJBQU8sQ0FBQywyREFBRCxDQUFsQjs7QUFFQSxJQUFJQyxTQUFTLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFBakM7O0FBRUEsU0FBU0MsZ0JBQVQsQ0FBMEJDLElBQTFCLEVBQWdDO0FBQzlCLE1BQUlBLElBQUksS0FBSyxJQUFiLEVBQW1CLE9BQU8sSUFBUDtBQUVuQixNQUFJQyxLQUFKO0FBQUEsTUFBV0MsTUFBWDtBQUFBLE1BQW1CQyxJQUFuQjtBQUFBLE1BQXlCQyxJQUF6QjtBQUFBLE1BQStCQyxNQUEvQjtBQUFBLE1BQ0lDLE1BQU0sR0FBR04sSUFEYjtBQUdBSyxFQUFBQSxNQUFNLEdBQUcsSUFBSUUsS0FBSixDQUFVRCxNQUFNLENBQUNKLE1BQWpCLENBQVQ7O0FBRUEsT0FBS0QsS0FBSyxHQUFHLENBQVIsRUFBV0MsTUFBTSxHQUFHSSxNQUFNLENBQUNKLE1BQWhDLEVBQXdDRCxLQUFLLEdBQUdDLE1BQWhELEVBQXdERCxLQUFLLElBQUksQ0FBakUsRUFBb0U7QUFDbEVFLElBQUFBLElBQUksR0FBR0csTUFBTSxDQUFDTCxLQUFELENBQWI7QUFFQSxRQUFJTixTQUFTLENBQUNhLElBQVYsQ0FBZUwsSUFBZixNQUF5QixpQkFBN0IsRUFBZ0QsT0FBTyxLQUFQO0FBRWhEQyxJQUFBQSxJQUFJLEdBQUdSLE1BQU0sQ0FBQ1EsSUFBUCxDQUFZRCxJQUFaLENBQVA7QUFFQSxRQUFJQyxJQUFJLENBQUNGLE1BQUwsS0FBZ0IsQ0FBcEIsRUFBdUIsT0FBTyxLQUFQO0FBRXZCRyxJQUFBQSxNQUFNLENBQUNKLEtBQUQsQ0FBTixHQUFnQixDQUFFRyxJQUFJLENBQUMsQ0FBRCxDQUFOLEVBQVdELElBQUksQ0FBQ0MsSUFBSSxDQUFDLENBQUQsQ0FBTCxDQUFmLENBQWhCO0FBQ0Q7O0FBRUQsU0FBTyxJQUFQO0FBQ0Q7O0FBRUQsU0FBU0ssa0JBQVQsQ0FBNEJULElBQTVCLEVBQWtDO0FBQ2hDLE1BQUlBLElBQUksS0FBSyxJQUFiLEVBQW1CLE9BQU8sRUFBUDtBQUVuQixNQUFJQyxLQUFKO0FBQUEsTUFBV0MsTUFBWDtBQUFBLE1BQW1CQyxJQUFuQjtBQUFBLE1BQXlCQyxJQUF6QjtBQUFBLE1BQStCQyxNQUEvQjtBQUFBLE1BQ0lDLE1BQU0sR0FBR04sSUFEYjtBQUdBSyxFQUFBQSxNQUFNLEdBQUcsSUFBSUUsS0FBSixDQUFVRCxNQUFNLENBQUNKLE1BQWpCLENBQVQ7O0FBRUEsT0FBS0QsS0FBSyxHQUFHLENBQVIsRUFBV0MsTUFBTSxHQUFHSSxNQUFNLENBQUNKLE1BQWhDLEVBQXdDRCxLQUFLLEdBQUdDLE1BQWhELEVBQXdERCxLQUFLLElBQUksQ0FBakUsRUFBb0U7QUFDbEVFLElBQUFBLElBQUksR0FBR0csTUFBTSxDQUFDTCxLQUFELENBQWI7QUFFQUcsSUFBQUEsSUFBSSxHQUFHUixNQUFNLENBQUNRLElBQVAsQ0FBWUQsSUFBWixDQUFQO0FBRUFFLElBQUFBLE1BQU0sQ0FBQ0osS0FBRCxDQUFOLEdBQWdCLENBQUVHLElBQUksQ0FBQyxDQUFELENBQU4sRUFBV0QsSUFBSSxDQUFDQyxJQUFJLENBQUMsQ0FBRCxDQUFMLENBQWYsQ0FBaEI7QUFDRDs7QUFFRCxTQUFPQyxNQUFQO0FBQ0Q7O0FBRURLLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixJQUFJbEIsSUFBSixDQUFTLHlCQUFULEVBQW9DO0FBQ25EbUIsRUFBQUEsSUFBSSxFQUFFLFVBRDZDO0FBRW5EQyxFQUFBQSxPQUFPLEVBQUVkLGdCQUYwQztBQUduRGUsRUFBQUEsU0FBUyxFQUFFTDtBQUh3QyxDQUFwQyxDQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uLi9zaGFyZWQvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL3R5cGUvcGFpcnMuanM/MGIzOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxQYWlycyhkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcblxuICB2YXIgaW5kZXgsIGxlbmd0aCwgcGFpciwga2V5cywgcmVzdWx0LFxuICAgICAgb2JqZWN0ID0gZGF0YTtcblxuICByZXN1bHQgPSBuZXcgQXJyYXkob2JqZWN0Lmxlbmd0aCk7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgcGFpciA9IG9iamVjdFtpbmRleF07XG5cbiAgICBpZiAoX3RvU3RyaW5nLmNhbGwocGFpcikgIT09ICdbb2JqZWN0IE9iamVjdF0nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBrZXlzID0gT2JqZWN0LmtleXMocGFpcik7XG5cbiAgICBpZiAoa2V5cy5sZW5ndGggIT09IDEpIHJldHVybiBmYWxzZTtcblxuICAgIHJlc3VsdFtpbmRleF0gPSBbIGtleXNbMF0sIHBhaXJba2V5c1swXV0gXTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sUGFpcnMoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIFtdO1xuXG4gIHZhciBpbmRleCwgbGVuZ3RoLCBwYWlyLCBrZXlzLCByZXN1bHQsXG4gICAgICBvYmplY3QgPSBkYXRhO1xuXG4gIHJlc3VsdCA9IG5ldyBBcnJheShvYmplY3QubGVuZ3RoKTtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBwYWlyID0gb2JqZWN0W2luZGV4XTtcblxuICAgIGtleXMgPSBPYmplY3Qua2V5cyhwYWlyKTtcblxuICAgIHJlc3VsdFtpbmRleF0gPSBbIGtleXNbMF0sIHBhaXJba2V5c1swXV0gXTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOnBhaXJzJywge1xuICBraW5kOiAnc2VxdWVuY2UnLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbFBhaXJzLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxQYWlyc1xufSk7XG4iXSwibmFtZXMiOlsiVHlwZSIsInJlcXVpcmUiLCJfdG9TdHJpbmciLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsInJlc29sdmVZYW1sUGFpcnMiLCJkYXRhIiwiaW5kZXgiLCJsZW5ndGgiLCJwYWlyIiwia2V5cyIsInJlc3VsdCIsIm9iamVjdCIsIkFycmF5IiwiY2FsbCIsImNvbnN0cnVjdFlhbWxQYWlycyIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwicmVzb2x2ZSIsImNvbnN0cnVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/lib/type/pairs.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/seq.js":
/*!******************************************************!*\
  !*** ../shared/node_modules/js-yaml/lib/type/seq.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/js-yaml/lib/type.js\");\n\nmodule.exports = new Type('tag:yaml.org,2002:seq', {\n  kind: 'sequence',\n  construct: function (data) {\n    return data !== null ? data : [];\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi90eXBlL3NlcS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxJQUFJLEdBQUdDLG1CQUFPLENBQUMsMkRBQUQsQ0FBbEI7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixJQUFJSCxJQUFKLENBQVMsdUJBQVQsRUFBa0M7QUFDakRJLEVBQUFBLElBQUksRUFBRSxVQUQyQztBQUVqREMsRUFBQUEsU0FBUyxFQUFFLFVBQVVDLElBQVYsRUFBZ0I7QUFBRSxXQUFPQSxJQUFJLEtBQUssSUFBVCxHQUFnQkEsSUFBaEIsR0FBdUIsRUFBOUI7QUFBbUM7QUFGZixDQUFsQyxDQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uLi9zaGFyZWQvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL3R5cGUvc2VxLmpzP2EwMmMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6c2VxJywge1xuICBraW5kOiAnc2VxdWVuY2UnLFxuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBkYXRhICE9PSBudWxsID8gZGF0YSA6IFtdOyB9XG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwiY29uc3RydWN0IiwiZGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/lib/type/seq.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/set.js":
/*!******************************************************!*\
  !*** ../shared/node_modules/js-yaml/lib/type/set.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/js-yaml/lib/type.js\");\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction resolveYamlSet(data) {\n  if (data === null) return true;\n  var key,\n      object = data;\n\n  for (key in object) {\n    if (_hasOwnProperty.call(object, key)) {\n      if (object[key] !== null) return false;\n    }\n  }\n\n  return true;\n}\n\nfunction constructYamlSet(data) {\n  return data !== null ? data : {};\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:set', {\n  kind: 'mapping',\n  resolve: resolveYamlSet,\n  construct: constructYamlSet\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi90eXBlL3NldC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxJQUFJLEdBQUdDLG1CQUFPLENBQUMsMkRBQUQsQ0FBbEI7O0FBRUEsSUFBSUMsZUFBZSxHQUFHQyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLGNBQXZDOztBQUVBLFNBQVNDLGNBQVQsQ0FBd0JDLElBQXhCLEVBQThCO0FBQzVCLE1BQUlBLElBQUksS0FBSyxJQUFiLEVBQW1CLE9BQU8sSUFBUDtBQUVuQixNQUFJQyxHQUFKO0FBQUEsTUFBU0MsTUFBTSxHQUFHRixJQUFsQjs7QUFFQSxPQUFLQyxHQUFMLElBQVlDLE1BQVosRUFBb0I7QUFDbEIsUUFBSVAsZUFBZSxDQUFDUSxJQUFoQixDQUFxQkQsTUFBckIsRUFBNkJELEdBQTdCLENBQUosRUFBdUM7QUFDckMsVUFBSUMsTUFBTSxDQUFDRCxHQUFELENBQU4sS0FBZ0IsSUFBcEIsRUFBMEIsT0FBTyxLQUFQO0FBQzNCO0FBQ0Y7O0FBRUQsU0FBTyxJQUFQO0FBQ0Q7O0FBRUQsU0FBU0csZ0JBQVQsQ0FBMEJKLElBQTFCLEVBQWdDO0FBQzlCLFNBQU9BLElBQUksS0FBSyxJQUFULEdBQWdCQSxJQUFoQixHQUF1QixFQUE5QjtBQUNEOztBQUVESyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsSUFBSWIsSUFBSixDQUFTLHVCQUFULEVBQWtDO0FBQ2pEYyxFQUFBQSxJQUFJLEVBQUUsU0FEMkM7QUFFakRDLEVBQUFBLE9BQU8sRUFBRVQsY0FGd0M7QUFHakRVLEVBQUFBLFNBQVMsRUFBRUw7QUFIc0MsQ0FBbEMsQ0FBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi90eXBlL3NldC5qcz8wMTIzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbnZhciBfaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbFNldChkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcblxuICB2YXIga2V5LCBvYmplY3QgPSBkYXRhO1xuXG4gIGZvciAoa2V5IGluIG9iamVjdCkge1xuICAgIGlmIChfaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgIGlmIChvYmplY3Rba2V5XSAhPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sU2V0KGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEgIT09IG51bGwgPyBkYXRhIDoge307XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOnNldCcsIHtcbiAga2luZDogJ21hcHBpbmcnLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbFNldCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sU2V0XG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsIl9oYXNPd25Qcm9wZXJ0eSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicmVzb2x2ZVlhbWxTZXQiLCJkYXRhIiwia2V5Iiwib2JqZWN0IiwiY2FsbCIsImNvbnN0cnVjdFlhbWxTZXQiLCJtb2R1bGUiLCJleHBvcnRzIiwia2luZCIsInJlc29sdmUiLCJjb25zdHJ1Y3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/lib/type/set.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/str.js":
/*!******************************************************!*\
  !*** ../shared/node_modules/js-yaml/lib/type/str.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/js-yaml/lib/type.js\");\n\nmodule.exports = new Type('tag:yaml.org,2002:str', {\n  kind: 'scalar',\n  construct: function (data) {\n    return data !== null ? data : '';\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi90eXBlL3N0ci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxJQUFJLEdBQUdDLG1CQUFPLENBQUMsMkRBQUQsQ0FBbEI7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixJQUFJSCxJQUFKLENBQVMsdUJBQVQsRUFBa0M7QUFDakRJLEVBQUFBLElBQUksRUFBRSxRQUQyQztBQUVqREMsRUFBQUEsU0FBUyxFQUFFLFVBQVVDLElBQVYsRUFBZ0I7QUFBRSxXQUFPQSxJQUFJLEtBQUssSUFBVCxHQUFnQkEsSUFBaEIsR0FBdUIsRUFBOUI7QUFBbUM7QUFGZixDQUFsQyxDQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bjb21wZXRlbmNlZnJhbWV3b3JrL2Rldm9wcy13aWtpLXZhbGlkYXRlLXRhbXBlcm1vbmtleS8uLi9zaGFyZWQvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL3R5cGUvc3RyLmpzPzVlNjkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6c3RyJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgY29uc3RydWN0OiBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiAnJzsgfVxufSk7XG4iXSwibmFtZXMiOlsiVHlwZSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwia2luZCIsImNvbnN0cnVjdCIsImRhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/lib/type/str.js\n");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/timestamp.js":
/*!************************************************************!*\
  !*** ../shared/node_modules/js-yaml/lib/type/timestamp.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"../shared/node_modules/js-yaml/lib/type.js\");\n\nvar YAML_DATE_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' + // [1] year\n'-([0-9][0-9])' + // [2] month\n'-([0-9][0-9])$'); // [3] day\n\nvar YAML_TIMESTAMP_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' + // [1] year\n'-([0-9][0-9]?)' + // [2] month\n'-([0-9][0-9]?)' + // [3] day\n'(?:[Tt]|[ \\\\t]+)' + // ...\n'([0-9][0-9]?)' + // [4] hour\n':([0-9][0-9])' + // [5] minute\n':([0-9][0-9])' + // [6] second\n'(?:\\\\.([0-9]*))?' + // [7] fraction\n'(?:[ \\\\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour\n'(?::([0-9][0-9]))?))?$'); // [11] tz_minute\n\nfunction resolveYamlTimestamp(data) {\n  if (data === null) return false;\n  if (YAML_DATE_REGEXP.exec(data) !== null) return true;\n  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;\n  return false;\n}\n\nfunction constructYamlTimestamp(data) {\n  var match,\n      year,\n      month,\n      day,\n      hour,\n      minute,\n      second,\n      fraction = 0,\n      delta = null,\n      tz_hour,\n      tz_minute,\n      date;\n  match = YAML_DATE_REGEXP.exec(data);\n  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);\n  if (match === null) throw new Error('Date resolve error'); // match: [1] year [2] month [3] day\n\n  year = +match[1];\n  month = +match[2] - 1; // JS month starts with 0\n\n  day = +match[3];\n\n  if (!match[4]) {\n    // no hour\n    return new Date(Date.UTC(year, month, day));\n  } // match: [4] hour [5] minute [6] second [7] fraction\n\n\n  hour = +match[4];\n  minute = +match[5];\n  second = +match[6];\n\n  if (match[7]) {\n    fraction = match[7].slice(0, 3);\n\n    while (fraction.length < 3) {\n      // milli-seconds\n      fraction += '0';\n    }\n\n    fraction = +fraction;\n  } // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute\n\n\n  if (match[9]) {\n    tz_hour = +match[10];\n    tz_minute = +(match[11] || 0);\n    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds\n\n    if (match[9] === '-') delta = -delta;\n  }\n\n  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));\n  if (delta) date.setTime(date.getTime() - delta);\n  return date;\n}\n\nfunction representYamlTimestamp(object\n/*, style*/\n) {\n  return object.toISOString();\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:timestamp', {\n  kind: 'scalar',\n  resolve: resolveYamlTimestamp,\n  construct: constructYamlTimestamp,\n  instanceOf: Date,\n  represent: representYamlTimestamp\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi90eXBlL3RpbWVzdGFtcC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxJQUFJLEdBQUdDLG1CQUFPLENBQUMsMkRBQUQsQ0FBbEI7O0FBRUEsSUFBSUMsZ0JBQWdCLEdBQUcsSUFBSUMsTUFBSixDQUNyQiw0QkFBcUM7QUFDckMsZUFEQSxHQUNxQztBQUNyQyxnQkFIcUIsQ0FBdkIsQyxDQUd1Qzs7QUFFdkMsSUFBSUMscUJBQXFCLEdBQUcsSUFBSUQsTUFBSixDQUMxQiw0QkFBcUM7QUFDckMsZ0JBREEsR0FDcUM7QUFDckMsZ0JBRkEsR0FFcUM7QUFDckMsa0JBSEEsR0FHcUM7QUFDckMsZUFKQSxHQUlxQztBQUNyQyxlQUxBLEdBS3FDO0FBQ3JDLGVBTkEsR0FNcUM7QUFDckMsa0JBUEEsR0FPcUM7QUFDckMsa0NBUkEsR0FRcUM7QUFDckMsd0JBVjBCLENBQTVCLEMsQ0FVdUM7O0FBRXZDLFNBQVNFLG9CQUFULENBQThCQyxJQUE5QixFQUFvQztBQUNsQyxNQUFJQSxJQUFJLEtBQUssSUFBYixFQUFtQixPQUFPLEtBQVA7QUFDbkIsTUFBSUosZ0JBQWdCLENBQUNLLElBQWpCLENBQXNCRCxJQUF0QixNQUFnQyxJQUFwQyxFQUEwQyxPQUFPLElBQVA7QUFDMUMsTUFBSUYscUJBQXFCLENBQUNHLElBQXRCLENBQTJCRCxJQUEzQixNQUFxQyxJQUF6QyxFQUErQyxPQUFPLElBQVA7QUFDL0MsU0FBTyxLQUFQO0FBQ0Q7O0FBRUQsU0FBU0Usc0JBQVQsQ0FBZ0NGLElBQWhDLEVBQXNDO0FBQ3BDLE1BQUlHLEtBQUo7QUFBQSxNQUFXQyxJQUFYO0FBQUEsTUFBaUJDLEtBQWpCO0FBQUEsTUFBd0JDLEdBQXhCO0FBQUEsTUFBNkJDLElBQTdCO0FBQUEsTUFBbUNDLE1BQW5DO0FBQUEsTUFBMkNDLE1BQTNDO0FBQUEsTUFBbURDLFFBQVEsR0FBRyxDQUE5RDtBQUFBLE1BQ0lDLEtBQUssR0FBRyxJQURaO0FBQUEsTUFDa0JDLE9BRGxCO0FBQUEsTUFDMkJDLFNBRDNCO0FBQUEsTUFDc0NDLElBRHRDO0FBR0FYLEVBQUFBLEtBQUssR0FBR1AsZ0JBQWdCLENBQUNLLElBQWpCLENBQXNCRCxJQUF0QixDQUFSO0FBQ0EsTUFBSUcsS0FBSyxLQUFLLElBQWQsRUFBb0JBLEtBQUssR0FBR0wscUJBQXFCLENBQUNHLElBQXRCLENBQTJCRCxJQUEzQixDQUFSO0FBRXBCLE1BQUlHLEtBQUssS0FBSyxJQUFkLEVBQW9CLE1BQU0sSUFBSVksS0FBSixDQUFVLG9CQUFWLENBQU4sQ0FQZ0IsQ0FTcEM7O0FBRUFYLEVBQUFBLElBQUksR0FBRyxDQUFFRCxLQUFLLENBQUMsQ0FBRCxDQUFkO0FBQ0FFLEVBQUFBLEtBQUssR0FBRyxDQUFFRixLQUFLLENBQUMsQ0FBRCxDQUFQLEdBQWMsQ0FBdEIsQ0Fab0MsQ0FZWDs7QUFDekJHLEVBQUFBLEdBQUcsR0FBRyxDQUFFSCxLQUFLLENBQUMsQ0FBRCxDQUFiOztBQUVBLE1BQUksQ0FBQ0EsS0FBSyxDQUFDLENBQUQsQ0FBVixFQUFlO0FBQUU7QUFDZixXQUFPLElBQUlhLElBQUosQ0FBU0EsSUFBSSxDQUFDQyxHQUFMLENBQVNiLElBQVQsRUFBZUMsS0FBZixFQUFzQkMsR0FBdEIsQ0FBVCxDQUFQO0FBQ0QsR0FqQm1DLENBbUJwQzs7O0FBRUFDLEVBQUFBLElBQUksR0FBRyxDQUFFSixLQUFLLENBQUMsQ0FBRCxDQUFkO0FBQ0FLLEVBQUFBLE1BQU0sR0FBRyxDQUFFTCxLQUFLLENBQUMsQ0FBRCxDQUFoQjtBQUNBTSxFQUFBQSxNQUFNLEdBQUcsQ0FBRU4sS0FBSyxDQUFDLENBQUQsQ0FBaEI7O0FBRUEsTUFBSUEsS0FBSyxDQUFDLENBQUQsQ0FBVCxFQUFjO0FBQ1pPLElBQUFBLFFBQVEsR0FBR1AsS0FBSyxDQUFDLENBQUQsQ0FBTCxDQUFTZSxLQUFULENBQWUsQ0FBZixFQUFrQixDQUFsQixDQUFYOztBQUNBLFdBQU9SLFFBQVEsQ0FBQ1MsTUFBVCxHQUFrQixDQUF6QixFQUE0QjtBQUFFO0FBQzVCVCxNQUFBQSxRQUFRLElBQUksR0FBWjtBQUNEOztBQUNEQSxJQUFBQSxRQUFRLEdBQUcsQ0FBQ0EsUUFBWjtBQUNELEdBL0JtQyxDQWlDcEM7OztBQUVBLE1BQUlQLEtBQUssQ0FBQyxDQUFELENBQVQsRUFBYztBQUNaUyxJQUFBQSxPQUFPLEdBQUcsQ0FBRVQsS0FBSyxDQUFDLEVBQUQsQ0FBakI7QUFDQVUsSUFBQUEsU0FBUyxHQUFHLEVBQUVWLEtBQUssQ0FBQyxFQUFELENBQUwsSUFBYSxDQUFmLENBQVo7QUFDQVEsSUFBQUEsS0FBSyxHQUFHLENBQUNDLE9BQU8sR0FBRyxFQUFWLEdBQWVDLFNBQWhCLElBQTZCLEtBQXJDLENBSFksQ0FHZ0M7O0FBQzVDLFFBQUlWLEtBQUssQ0FBQyxDQUFELENBQUwsS0FBYSxHQUFqQixFQUFzQlEsS0FBSyxHQUFHLENBQUNBLEtBQVQ7QUFDdkI7O0FBRURHLEVBQUFBLElBQUksR0FBRyxJQUFJRSxJQUFKLENBQVNBLElBQUksQ0FBQ0MsR0FBTCxDQUFTYixJQUFULEVBQWVDLEtBQWYsRUFBc0JDLEdBQXRCLEVBQTJCQyxJQUEzQixFQUFpQ0MsTUFBakMsRUFBeUNDLE1BQXpDLEVBQWlEQyxRQUFqRCxDQUFULENBQVA7QUFFQSxNQUFJQyxLQUFKLEVBQVdHLElBQUksQ0FBQ00sT0FBTCxDQUFhTixJQUFJLENBQUNPLE9BQUwsS0FBaUJWLEtBQTlCO0FBRVgsU0FBT0csSUFBUDtBQUNEOztBQUVELFNBQVNRLHNCQUFULENBQWdDQztBQUFPO0FBQXZDLEVBQW9EO0FBQ2xELFNBQU9BLE1BQU0sQ0FBQ0MsV0FBUCxFQUFQO0FBQ0Q7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixJQUFJaEMsSUFBSixDQUFTLDZCQUFULEVBQXdDO0FBQ3ZEaUMsRUFBQUEsSUFBSSxFQUFFLFFBRGlEO0FBRXZEQyxFQUFBQSxPQUFPLEVBQUU3QixvQkFGOEM7QUFHdkQ4QixFQUFBQSxTQUFTLEVBQUUzQixzQkFINEM7QUFJdkQ0QixFQUFBQSxVQUFVLEVBQUVkLElBSjJDO0FBS3ZEZSxFQUFBQSxTQUFTLEVBQUVUO0FBTDRDLENBQXhDLENBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvbXBldGVuY2VmcmFtZXdvcmsvZGV2b3BzLXdpa2ktdmFsaWRhdGUtdGFtcGVybW9ua2V5Ly4uL3NoYXJlZC9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvdHlwZS90aW1lc3RhbXAuanM/YjY4MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG52YXIgWUFNTF9EQVRFX1JFR0VYUCA9IG5ldyBSZWdFeHAoXG4gICdeKFswLTldWzAtOV1bMC05XVswLTldKScgICAgICAgICAgKyAvLyBbMV0geWVhclxuICAnLShbMC05XVswLTldKScgICAgICAgICAgICAgICAgICAgICsgLy8gWzJdIG1vbnRoXG4gICctKFswLTldWzAtOV0pJCcpOyAgICAgICAgICAgICAgICAgICAvLyBbM10gZGF5XG5cbnZhciBZQU1MX1RJTUVTVEFNUF9SRUdFWFAgPSBuZXcgUmVnRXhwKFxuICAnXihbMC05XVswLTldWzAtOV1bMC05XSknICAgICAgICAgICsgLy8gWzFdIHllYXJcbiAgJy0oWzAtOV1bMC05XT8pJyAgICAgICAgICAgICAgICAgICArIC8vIFsyXSBtb250aFxuICAnLShbMC05XVswLTldPyknICAgICAgICAgICAgICAgICAgICsgLy8gWzNdIGRheVxuICAnKD86W1R0XXxbIFxcXFx0XSspJyAgICAgICAgICAgICAgICAgKyAvLyAuLi5cbiAgJyhbMC05XVswLTldPyknICAgICAgICAgICAgICAgICAgICArIC8vIFs0XSBob3VyXG4gICc6KFswLTldWzAtOV0pJyAgICAgICAgICAgICAgICAgICAgKyAvLyBbNV0gbWludXRlXG4gICc6KFswLTldWzAtOV0pJyAgICAgICAgICAgICAgICAgICAgKyAvLyBbNl0gc2Vjb25kXG4gICcoPzpcXFxcLihbMC05XSopKT8nICAgICAgICAgICAgICAgICArIC8vIFs3XSBmcmFjdGlvblxuICAnKD86WyBcXFxcdF0qKFp8KFstK10pKFswLTldWzAtOV0/KScgKyAvLyBbOF0gdHogWzldIHR6X3NpZ24gWzEwXSB0el9ob3VyXG4gICcoPzo6KFswLTldWzAtOV0pKT8pKT8kJyk7ICAgICAgICAgICAvLyBbMTFdIHR6X21pbnV0ZVxuXG5mdW5jdGlvbiByZXNvbHZlWWFtbFRpbWVzdGFtcChkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIGlmIChZQU1MX0RBVEVfUkVHRVhQLmV4ZWMoZGF0YSkgIT09IG51bGwpIHJldHVybiB0cnVlO1xuICBpZiAoWUFNTF9USU1FU1RBTVBfUkVHRVhQLmV4ZWMoZGF0YSkgIT09IG51bGwpIHJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxUaW1lc3RhbXAoZGF0YSkge1xuICB2YXIgbWF0Y2gsIHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBmcmFjdGlvbiA9IDAsXG4gICAgICBkZWx0YSA9IG51bGwsIHR6X2hvdXIsIHR6X21pbnV0ZSwgZGF0ZTtcblxuICBtYXRjaCA9IFlBTUxfREFURV9SRUdFWFAuZXhlYyhkYXRhKTtcbiAgaWYgKG1hdGNoID09PSBudWxsKSBtYXRjaCA9IFlBTUxfVElNRVNUQU1QX1JFR0VYUC5leGVjKGRhdGEpO1xuXG4gIGlmIChtYXRjaCA9PT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKCdEYXRlIHJlc29sdmUgZXJyb3InKTtcblxuICAvLyBtYXRjaDogWzFdIHllYXIgWzJdIG1vbnRoIFszXSBkYXlcblxuICB5ZWFyID0gKyhtYXRjaFsxXSk7XG4gIG1vbnRoID0gKyhtYXRjaFsyXSkgLSAxOyAvLyBKUyBtb250aCBzdGFydHMgd2l0aCAwXG4gIGRheSA9ICsobWF0Y2hbM10pO1xuXG4gIGlmICghbWF0Y2hbNF0pIHsgLy8gbm8gaG91clxuICAgIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQyh5ZWFyLCBtb250aCwgZGF5KSk7XG4gIH1cblxuICAvLyBtYXRjaDogWzRdIGhvdXIgWzVdIG1pbnV0ZSBbNl0gc2Vjb25kIFs3XSBmcmFjdGlvblxuXG4gIGhvdXIgPSArKG1hdGNoWzRdKTtcbiAgbWludXRlID0gKyhtYXRjaFs1XSk7XG4gIHNlY29uZCA9ICsobWF0Y2hbNl0pO1xuXG4gIGlmIChtYXRjaFs3XSkge1xuICAgIGZyYWN0aW9uID0gbWF0Y2hbN10uc2xpY2UoMCwgMyk7XG4gICAgd2hpbGUgKGZyYWN0aW9uLmxlbmd0aCA8IDMpIHsgLy8gbWlsbGktc2Vjb25kc1xuICAgICAgZnJhY3Rpb24gKz0gJzAnO1xuICAgIH1cbiAgICBmcmFjdGlvbiA9ICtmcmFjdGlvbjtcbiAgfVxuXG4gIC8vIG1hdGNoOiBbOF0gdHogWzldIHR6X3NpZ24gWzEwXSB0el9ob3VyIFsxMV0gdHpfbWludXRlXG5cbiAgaWYgKG1hdGNoWzldKSB7XG4gICAgdHpfaG91ciA9ICsobWF0Y2hbMTBdKTtcbiAgICB0el9taW51dGUgPSArKG1hdGNoWzExXSB8fCAwKTtcbiAgICBkZWx0YSA9ICh0el9ob3VyICogNjAgKyB0el9taW51dGUpICogNjAwMDA7IC8vIGRlbHRhIGluIG1pbGktc2Vjb25kc1xuICAgIGlmIChtYXRjaFs5XSA9PT0gJy0nKSBkZWx0YSA9IC1kZWx0YTtcbiAgfVxuXG4gIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQyh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgZnJhY3Rpb24pKTtcblxuICBpZiAoZGVsdGEpIGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSAtIGRlbHRhKTtcblxuICByZXR1cm4gZGF0ZTtcbn1cblxuZnVuY3Rpb24gcmVwcmVzZW50WWFtbFRpbWVzdGFtcChvYmplY3QgLyosIHN0eWxlKi8pIHtcbiAgcmV0dXJuIG9iamVjdC50b0lTT1N0cmluZygpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjp0aW1lc3RhbXAnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbFRpbWVzdGFtcCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sVGltZXN0YW1wLFxuICBpbnN0YW5jZU9mOiBEYXRlLFxuICByZXByZXNlbnQ6IHJlcHJlc2VudFlhbWxUaW1lc3RhbXBcbn0pO1xuIl0sIm5hbWVzIjpbIlR5cGUiLCJyZXF1aXJlIiwiWUFNTF9EQVRFX1JFR0VYUCIsIlJlZ0V4cCIsIllBTUxfVElNRVNUQU1QX1JFR0VYUCIsInJlc29sdmVZYW1sVGltZXN0YW1wIiwiZGF0YSIsImV4ZWMiLCJjb25zdHJ1Y3RZYW1sVGltZXN0YW1wIiwibWF0Y2giLCJ5ZWFyIiwibW9udGgiLCJkYXkiLCJob3VyIiwibWludXRlIiwic2Vjb25kIiwiZnJhY3Rpb24iLCJkZWx0YSIsInR6X2hvdXIiLCJ0el9taW51dGUiLCJkYXRlIiwiRXJyb3IiLCJEYXRlIiwiVVRDIiwic2xpY2UiLCJsZW5ndGgiLCJzZXRUaW1lIiwiZ2V0VGltZSIsInJlcHJlc2VudFlhbWxUaW1lc3RhbXAiLCJvYmplY3QiLCJ0b0lTT1N0cmluZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwicmVzb2x2ZSIsImNvbnN0cnVjdCIsImluc3RhbmNlT2YiLCJyZXByZXNlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/node_modules/js-yaml/lib/type/timestamp.js\n");

/***/ }),

/***/ "../shared/node_modules/natural-compare/index.js":
/*!*******************************************************!*\
  !*** ../shared/node_modules/natural-compare/index.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("/*\n * @version    1.4.0\n * @date       2015-10-26\n * @stability  3 - Stable\n * @author     Lauri Rooden (https://github.com/litejs/natural-compare-lite)\n * @license    MIT License\n */\nvar naturalCompare = function (a, b) {\n  var i,\n      codeA,\n      codeB = 1,\n      posA = 0,\n      posB = 0,\n      alphabet = String.alphabet;\n\n  function getCode(str, pos, code) {\n    if (code) {\n      for (i = pos; code = getCode(str, i), code < 76 && code > 65;) ++i;\n\n      return +str.slice(pos - 1, i);\n    }\n\n    code = alphabet && alphabet.indexOf(str.charAt(pos));\n    return code > -1 ? code + 76 : (code = str.charCodeAt(pos) || 0, code < 45 || code > 127) ? code : code < 46 ? 65 // -\n    : code < 48 ? code - 1 : code < 58 ? code + 18 // 0-9\n    : code < 65 ? code - 11 : code < 91 ? code + 11 // A-Z\n    : code < 97 ? code - 37 : code < 123 ? code + 5 // a-z\n    : code - 63;\n  }\n\n  if ((a += \"\") != (b += \"\")) for (; codeB;) {\n    codeA = getCode(a, posA++);\n    codeB = getCode(b, posB++);\n\n    if (codeA < 76 && codeB < 76 && codeA > 66 && codeB > 66) {\n      codeA = getCode(a, posA, posA);\n      codeB = getCode(b, posB, posA = i);\n      posB = i;\n    }\n\n    if (codeA != codeB) return codeA < codeB ? -1 : 1;\n  }\n  return 0;\n};\n\ntry {\n  module.exports = naturalCompare;\n} catch (e) {\n  String.naturalCompare = naturalCompare;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vc2hhcmVkL25vZGVfbW9kdWxlcy9uYXR1cmFsLWNvbXBhcmUvaW5kZXguanM/OWZmOCJdLCJuYW1lcyI6WyJuYXR1cmFsQ29tcGFyZSIsImEiLCJiIiwiaSIsImNvZGVBIiwiY29kZUIiLCJwb3NBIiwicG9zQiIsImFscGhhYmV0IiwiU3RyaW5nIiwiZ2V0Q29kZSIsInN0ciIsInBvcyIsImNvZGUiLCJzbGljZSIsImluZGV4T2YiLCJjaGFyQXQiLCJjaGFyQ29kZUF0IiwibW9kdWxlIiwiZXhwb3J0cyIsImUiXSwibWFwcGluZ3MiOiJBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0EsSUFBSUEsY0FBYyxHQUFHLFVBQVNDLENBQVQsRUFBWUMsQ0FBWixFQUFlO0FBQ25DLE1BQUlDLENBQUo7QUFBQSxNQUFPQyxLQUFQO0FBQUEsTUFDRUMsS0FBSyxHQUFHLENBRFY7QUFBQSxNQUVFQyxJQUFJLEdBQUcsQ0FGVDtBQUFBLE1BR0VDLElBQUksR0FBRyxDQUhUO0FBQUEsTUFJRUMsUUFBUSxHQUFHQyxNQUFNLENBQUNELFFBSnBCOztBQU1BLFdBQVNFLE9BQVQsQ0FBaUJDLEdBQWpCLEVBQXNCQyxHQUF0QixFQUEyQkMsSUFBM0IsRUFBaUM7QUFDaEMsUUFBSUEsSUFBSixFQUFVO0FBQ1QsV0FBS1YsQ0FBQyxHQUFHUyxHQUFULEVBQWNDLElBQUksR0FBR0gsT0FBTyxDQUFDQyxHQUFELEVBQU1SLENBQU4sQ0FBZCxFQUF3QlUsSUFBSSxHQUFHLEVBQVAsSUFBYUEsSUFBSSxHQUFHLEVBQTFELEdBQStELEVBQUVWLENBQUY7O0FBQy9ELGFBQU8sQ0FBQ1EsR0FBRyxDQUFDRyxLQUFKLENBQVVGLEdBQUcsR0FBRyxDQUFoQixFQUFtQlQsQ0FBbkIsQ0FBUjtBQUNBOztBQUNEVSxJQUFBQSxJQUFJLEdBQUdMLFFBQVEsSUFBSUEsUUFBUSxDQUFDTyxPQUFULENBQWlCSixHQUFHLENBQUNLLE1BQUosQ0FBV0osR0FBWCxDQUFqQixDQUFuQjtBQUNBLFdBQU9DLElBQUksR0FBRyxDQUFDLENBQVIsR0FBWUEsSUFBSSxHQUFHLEVBQW5CLEdBQXdCLENBQUVBLElBQUksR0FBR0YsR0FBRyxDQUFDTSxVQUFKLENBQWVMLEdBQWYsS0FBdUIsQ0FBL0IsRUFBbUNDLElBQUksR0FBRyxFQUFQLElBQWFBLElBQUksR0FBRyxHQUF4RCxJQUErREEsSUFBL0QsR0FDNUJBLElBQUksR0FBRyxFQUFQLEdBQVksRUFBWixDQUE2QjtBQUE3QixNQUNBQSxJQUFJLEdBQUcsRUFBUCxHQUFZQSxJQUFJLEdBQUcsQ0FBbkIsR0FDQUEsSUFBSSxHQUFHLEVBQVAsR0FBWUEsSUFBSSxHQUFHLEVBQW5CLENBQTZCO0FBQTdCLE1BQ0FBLElBQUksR0FBRyxFQUFQLEdBQVlBLElBQUksR0FBRyxFQUFuQixHQUNBQSxJQUFJLEdBQUcsRUFBUCxHQUFZQSxJQUFJLEdBQUcsRUFBbkIsQ0FBNkI7QUFBN0IsTUFDQUEsSUFBSSxHQUFHLEVBQVAsR0FBWUEsSUFBSSxHQUFHLEVBQW5CLEdBQ0FBLElBQUksR0FBRyxHQUFQLEdBQWFBLElBQUksR0FBRyxDQUFwQixDQUE2QjtBQUE3QixNQUNBQSxJQUFJLEdBQUcsRUFSVjtBQVNBOztBQUdELE1BQUksQ0FBQ1osQ0FBQyxJQUFFLEVBQUosTUFBWUMsQ0FBQyxJQUFFLEVBQWYsQ0FBSixFQUF3QixPQUFNRyxLQUFOLEdBQWM7QUFDckNELElBQUFBLEtBQUssR0FBR00sT0FBTyxDQUFDVCxDQUFELEVBQUlLLElBQUksRUFBUixDQUFmO0FBQ0FELElBQUFBLEtBQUssR0FBR0ssT0FBTyxDQUFDUixDQUFELEVBQUlLLElBQUksRUFBUixDQUFmOztBQUVBLFFBQUlILEtBQUssR0FBRyxFQUFSLElBQWNDLEtBQUssR0FBRyxFQUF0QixJQUE0QkQsS0FBSyxHQUFHLEVBQXBDLElBQTBDQyxLQUFLLEdBQUcsRUFBdEQsRUFBMEQ7QUFDekRELE1BQUFBLEtBQUssR0FBR00sT0FBTyxDQUFDVCxDQUFELEVBQUlLLElBQUosRUFBVUEsSUFBVixDQUFmO0FBQ0FELE1BQUFBLEtBQUssR0FBR0ssT0FBTyxDQUFDUixDQUFELEVBQUlLLElBQUosRUFBVUQsSUFBSSxHQUFHSCxDQUFqQixDQUFmO0FBQ0FJLE1BQUFBLElBQUksR0FBR0osQ0FBUDtBQUNBOztBQUVELFFBQUlDLEtBQUssSUFBSUMsS0FBYixFQUFvQixPQUFRRCxLQUFLLEdBQUdDLEtBQVQsR0FBa0IsQ0FBQyxDQUFuQixHQUF1QixDQUE5QjtBQUNwQjtBQUNELFNBQU8sQ0FBUDtBQUNBLENBdENEOztBQXdDQSxJQUFJO0FBQ0hhLEVBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQm5CLGNBQWpCO0FBQ0EsQ0FGRCxDQUVFLE9BQU9vQixDQUFQLEVBQVU7QUFDWFgsRUFBQUEsTUFBTSxDQUFDVCxjQUFQLEdBQXdCQSxjQUF4QjtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiXG5cblxuLypcbiAqIEB2ZXJzaW9uICAgIDEuNC4wXG4gKiBAZGF0ZSAgICAgICAyMDE1LTEwLTI2XG4gKiBAc3RhYmlsaXR5ICAzIC0gU3RhYmxlXG4gKiBAYXV0aG9yICAgICBMYXVyaSBSb29kZW4gKGh0dHBzOi8vZ2l0aHViLmNvbS9saXRlanMvbmF0dXJhbC1jb21wYXJlLWxpdGUpXG4gKiBAbGljZW5zZSAgICBNSVQgTGljZW5zZVxuICovXG5cblxudmFyIG5hdHVyYWxDb21wYXJlID0gZnVuY3Rpb24oYSwgYikge1xuXHR2YXIgaSwgY29kZUFcblx0LCBjb2RlQiA9IDFcblx0LCBwb3NBID0gMFxuXHQsIHBvc0IgPSAwXG5cdCwgYWxwaGFiZXQgPSBTdHJpbmcuYWxwaGFiZXRcblxuXHRmdW5jdGlvbiBnZXRDb2RlKHN0ciwgcG9zLCBjb2RlKSB7XG5cdFx0aWYgKGNvZGUpIHtcblx0XHRcdGZvciAoaSA9IHBvczsgY29kZSA9IGdldENvZGUoc3RyLCBpKSwgY29kZSA8IDc2ICYmIGNvZGUgPiA2NTspICsraTtcblx0XHRcdHJldHVybiArc3RyLnNsaWNlKHBvcyAtIDEsIGkpXG5cdFx0fVxuXHRcdGNvZGUgPSBhbHBoYWJldCAmJiBhbHBoYWJldC5pbmRleE9mKHN0ci5jaGFyQXQocG9zKSlcblx0XHRyZXR1cm4gY29kZSA+IC0xID8gY29kZSArIDc2IDogKChjb2RlID0gc3RyLmNoYXJDb2RlQXQocG9zKSB8fCAwKSwgY29kZSA8IDQ1IHx8IGNvZGUgPiAxMjcpID8gY29kZVxuXHRcdFx0OiBjb2RlIDwgNDYgPyA2NSAgICAgICAgICAgICAgIC8vIC1cblx0XHRcdDogY29kZSA8IDQ4ID8gY29kZSAtIDFcblx0XHRcdDogY29kZSA8IDU4ID8gY29kZSArIDE4ICAgICAgICAvLyAwLTlcblx0XHRcdDogY29kZSA8IDY1ID8gY29kZSAtIDExXG5cdFx0XHQ6IGNvZGUgPCA5MSA/IGNvZGUgKyAxMSAgICAgICAgLy8gQS1aXG5cdFx0XHQ6IGNvZGUgPCA5NyA/IGNvZGUgLSAzN1xuXHRcdFx0OiBjb2RlIDwgMTIzID8gY29kZSArIDUgICAgICAgIC8vIGEtelxuXHRcdFx0OiBjb2RlIC0gNjNcblx0fVxuXG5cblx0aWYgKChhKz1cIlwiKSAhPSAoYis9XCJcIikpIGZvciAoO2NvZGVCOykge1xuXHRcdGNvZGVBID0gZ2V0Q29kZShhLCBwb3NBKyspXG5cdFx0Y29kZUIgPSBnZXRDb2RlKGIsIHBvc0IrKylcblxuXHRcdGlmIChjb2RlQSA8IDc2ICYmIGNvZGVCIDwgNzYgJiYgY29kZUEgPiA2NiAmJiBjb2RlQiA+IDY2KSB7XG5cdFx0XHRjb2RlQSA9IGdldENvZGUoYSwgcG9zQSwgcG9zQSlcblx0XHRcdGNvZGVCID0gZ2V0Q29kZShiLCBwb3NCLCBwb3NBID0gaSlcblx0XHRcdHBvc0IgPSBpXG5cdFx0fVxuXG5cdFx0aWYgKGNvZGVBICE9IGNvZGVCKSByZXR1cm4gKGNvZGVBIDwgY29kZUIpID8gLTEgOiAxXG5cdH1cblx0cmV0dXJuIDBcbn1cblxudHJ5IHtcblx0bW9kdWxlLmV4cG9ydHMgPSBuYXR1cmFsQ29tcGFyZTtcbn0gY2F0Y2ggKGUpIHtcblx0U3RyaW5nLm5hdHVyYWxDb21wYXJlID0gbmF0dXJhbENvbXBhcmU7XG59XG4iXSwiZmlsZSI6Ii4uL3NoYXJlZC9ub2RlX21vZHVsZXMvbmF0dXJhbC1jb21wYXJlL2luZGV4LmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/node_modules/natural-compare/index.js\n");

/***/ }),

/***/ "../shared/node_modules/typecast/index.js":
/*!************************************************!*\
  !*** ../shared/node_modules/typecast/index.js ***!
  \************************************************/
/***/ ((module) => {

eval("module.exports = typecast;\n/**\n * Cast given `val` to `type`\n *\n * @param {Mixed} val\n * @param {String} type\n * @api public\n */\n\nfunction typecast(val, type) {\n  var fn = typecast[type];\n  if (typeof fn != 'function') throw new Error('cannot cast to ' + type);\n  return fn(val);\n}\n/**\n * Cast `val` to `String`\n *\n * @param {Mixed} val\n * @api public\n */\n\n\ntypecast.string = function (val) {\n  return val.toString();\n};\n/**\n * Cast `val` to `Number`\n *\n * @param {Mixed} val\n * @api public\n */\n\n\ntypecast.number = function (val) {\n  var num = parseFloat(val);\n  return isNaN(num) ? null : num;\n};\n/**\n * Cast `val` to a`Date`\n *\n * @param {Mixed} val\n * @api public\n */\n\n\ntypecast.date = function (val) {\n  var date = new Date(val);\n  return isNaN(date.valueOf()) ? null : date;\n};\n/**\n * Cast `val` to `Array`\n *\n * @param {Mixed} val\n * @api public\n */\n\n\ntypecast.array = function (val) {\n  if (val instanceof Array) return val;\n  var arr = val.toString().split(',');\n\n  for (var i = 0; i < arr.length; i++) {\n    arr[i] = arr[i].trim();\n  }\n\n  return arr;\n};\n/**\n * Cast `val` to `Boolean`\n *\n * @param {Mixed} val\n * @api public\n */\n\n\ntypecast.boolean = function (val) {\n  return !!val && val !== 'false';\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vc2hhcmVkL25vZGVfbW9kdWxlcy90eXBlY2FzdC9pbmRleC5qcz83NTI0Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ0eXBlY2FzdCIsInZhbCIsInR5cGUiLCJmbiIsIkVycm9yIiwic3RyaW5nIiwidG9TdHJpbmciLCJudW1iZXIiLCJudW0iLCJwYXJzZUZsb2F0IiwiaXNOYU4iLCJkYXRlIiwiRGF0ZSIsInZhbHVlT2YiLCJhcnJheSIsIkFycmF5IiwiYXJyIiwic3BsaXQiLCJpIiwibGVuZ3RoIiwidHJpbSIsImJvb2xlYW4iXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUJDLFFBQWpCO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsUUFBVCxDQUFtQkMsR0FBbkIsRUFBd0JDLElBQXhCLEVBQThCO0FBQzVCLE1BQUlDLEVBQUUsR0FBR0gsUUFBUSxDQUFDRSxJQUFELENBQWpCO0FBQ0EsTUFBSSxPQUFPQyxFQUFQLElBQWEsVUFBakIsRUFBNkIsTUFBTSxJQUFJQyxLQUFKLENBQVUsb0JBQW9CRixJQUE5QixDQUFOO0FBQzdCLFNBQU9DLEVBQUUsQ0FBQ0YsR0FBRCxDQUFUO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBRCxRQUFRLENBQUNLLE1BQVQsR0FBa0IsVUFBVUosR0FBVixFQUFlO0FBQy9CLFNBQU9BLEdBQUcsQ0FBQ0ssUUFBSixFQUFQO0FBQ0QsQ0FGRDtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUFOLFFBQVEsQ0FBQ08sTUFBVCxHQUFrQixVQUFVTixHQUFWLEVBQWU7QUFDL0IsTUFBSU8sR0FBRyxHQUFHQyxVQUFVLENBQUNSLEdBQUQsQ0FBcEI7QUFDQSxTQUFPUyxLQUFLLENBQUNGLEdBQUQsQ0FBTCxHQUNILElBREcsR0FFSEEsR0FGSjtBQUdELENBTEQ7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBUixRQUFRLENBQUNXLElBQVQsR0FBZ0IsVUFBVVYsR0FBVixFQUFlO0FBQzdCLE1BQUlVLElBQUksR0FBRyxJQUFJQyxJQUFKLENBQVNYLEdBQVQsQ0FBWDtBQUNBLFNBQU9TLEtBQUssQ0FBQ0MsSUFBSSxDQUFDRSxPQUFMLEVBQUQsQ0FBTCxHQUNILElBREcsR0FFSEYsSUFGSjtBQUdELENBTEQ7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBWCxRQUFRLENBQUNjLEtBQVQsR0FBaUIsVUFBVWIsR0FBVixFQUFlO0FBQzlCLE1BQUlBLEdBQUcsWUFBWWMsS0FBbkIsRUFBMEIsT0FBT2QsR0FBUDtBQUMxQixNQUFJZSxHQUFHLEdBQUdmLEdBQUcsQ0FBQ0ssUUFBSixHQUFlVyxLQUFmLENBQXFCLEdBQXJCLENBQVY7O0FBQ0EsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRixHQUFHLENBQUNHLE1BQXhCLEVBQWdDRCxDQUFDLEVBQWpDLEVBQXFDO0FBQ25DRixJQUFBQSxHQUFHLENBQUNFLENBQUQsQ0FBSCxHQUFTRixHQUFHLENBQUNFLENBQUQsQ0FBSCxDQUFPRSxJQUFQLEVBQVQ7QUFDRDs7QUFDRCxTQUFPSixHQUFQO0FBQ0QsQ0FQRDtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUFoQixRQUFRLENBQUNxQixPQUFULEdBQW1CLFVBQVVwQixHQUFWLEVBQWU7QUFDaEMsU0FBTyxDQUFDLENBQUVBLEdBQUgsSUFBVUEsR0FBRyxLQUFLLE9BQXpCO0FBQ0QsQ0FGRCIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gdHlwZWNhc3Q7XG5cbi8qKlxuICogQ2FzdCBnaXZlbiBgdmFsYCB0byBgdHlwZWBcbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHR5cGVjYXN0ICh2YWwsIHR5cGUpIHtcbiAgdmFyIGZuID0gdHlwZWNhc3RbdHlwZV07XG4gIGlmICh0eXBlb2YgZm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IEVycm9yKCdjYW5ub3QgY2FzdCB0byAnICsgdHlwZSk7XG4gIHJldHVybiBmbih2YWwpO1xufVxuXG4vKipcbiAqIENhc3QgYHZhbGAgdG8gYFN0cmluZ2BcbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqIEBhcGkgcHVibGljXG4gKi9cblxudHlwZWNhc3Quc3RyaW5nID0gZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4gdmFsLnRvU3RyaW5nKCk7XG59O1xuXG4vKipcbiAqIENhc3QgYHZhbGAgdG8gYE51bWJlcmBcbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqIEBhcGkgcHVibGljXG4gKi9cblxudHlwZWNhc3QubnVtYmVyID0gZnVuY3Rpb24gKHZhbCkge1xuICB2YXIgbnVtID0gcGFyc2VGbG9hdCh2YWwpO1xuICByZXR1cm4gaXNOYU4obnVtKVxuICAgID8gbnVsbFxuICAgIDogbnVtO1xufTtcblxuLyoqXG4gKiBDYXN0IGB2YWxgIHRvIGFgRGF0ZWBcbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqIEBhcGkgcHVibGljXG4gKi9cblxudHlwZWNhc3QuZGF0ZSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh2YWwpO1xuICByZXR1cm4gaXNOYU4oZGF0ZS52YWx1ZU9mKCkpXG4gICAgPyBudWxsXG4gICAgOiBkYXRlO1xufTtcblxuLyoqXG4gKiBDYXN0IGB2YWxgIHRvIGBBcnJheWBcbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqIEBhcGkgcHVibGljXG4gKi9cblxudHlwZWNhc3QuYXJyYXkgPSBmdW5jdGlvbiAodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBBcnJheSkgcmV0dXJuIHZhbDtcbiAgdmFyIGFyciA9IHZhbC50b1N0cmluZygpLnNwbGl0KCcsJyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgYXJyW2ldID0gYXJyW2ldLnRyaW0oKTtcbiAgfVxuICByZXR1cm4gYXJyO1xufTtcblxuLyoqXG4gKiBDYXN0IGB2YWxgIHRvIGBCb29sZWFuYFxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG50eXBlY2FzdC5ib29sZWFuID0gZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4gISEgdmFsICYmIHZhbCAhPT0gJ2ZhbHNlJztcbn07Il0sImZpbGUiOiIuLi9zaGFyZWQvbm9kZV9tb2R1bGVzL3R5cGVjYXN0L2luZGV4LmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/node_modules/typecast/index.js\n");

/***/ }),

/***/ "../shared/node_modules/validate/build/error.js":
/*!******************************************************!*\
  !*** ../shared/node_modules/validate/build/error.js ***!
  \******************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n/**\n * Custom errors.\n *\n * @private\n */\n\n\nvar ValidationError = /*#__PURE__*/function (_Error) {\n  _inherits(ValidationError, _Error);\n\n  var _super = _createSuper(ValidationError);\n\n  function ValidationError(message, path) {\n    var _this;\n\n    _classCallCheck(this, ValidationError);\n\n    _this = _super.call(this, message);\n    defineProp(_assertThisInitialized(_this), 'path', path);\n    defineProp(_assertThisInitialized(_this), 'expose', true);\n    defineProp(_assertThisInitialized(_this), 'status', 400);\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(_assertThisInitialized(_this), ValidationError);\n    }\n\n    return _this;\n  }\n\n  return _createClass(ValidationError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nexports[\"default\"] = ValidationError;\n\nvar defineProp = function defineProp(obj, prop, val) {\n  Object.defineProperty(obj, prop, {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: val\n  });\n};\n\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared/node_modules/validate/build/error.js\n");

/***/ }),

/***/ "../shared/node_modules/validate/build/messages.js":
/*!*********************************************************!*\
  !*** ../shared/node_modules/validate/build/messages.js ***!
  \*********************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n/**\n * Default error messages.\n *\n * @private\n */\n\nvar Messages = {\n  // Type message\n  type: function type(prop, ctx, _type) {\n    if (typeof _type == 'function') {\n      _type = _type.name;\n    }\n\n    return \"\".concat(prop, \" must be of type \").concat(_type, \".\");\n  },\n  // Required message\n  required: function required(prop) {\n    return \"\".concat(prop, \" is required.\");\n  },\n  // Match message\n  match: function match(prop, ctx, regexp) {\n    return \"\".concat(prop, \" must match \").concat(regexp, \".\");\n  },\n  // Length message\n  length: function length(prop, ctx, len) {\n    if (typeof len == 'number') {\n      return \"\".concat(prop, \" must have a length of \").concat(len, \".\");\n    }\n\n    var min = len.min,\n        max = len.max;\n\n    if (min && max) {\n      return \"\".concat(prop, \" must have a length between \").concat(min, \" and \").concat(max, \".\");\n    }\n\n    if (max) {\n      return \"\".concat(prop, \" must have a maximum length of \").concat(max, \".\");\n    }\n\n    if (min) {\n      return \"\".concat(prop, \" must have a minimum length of \").concat(min, \".\");\n    }\n  },\n  // Size message\n  size: function size(prop, ctx, _size) {\n    if (typeof _size == 'number') {\n      return \"\".concat(prop, \" must have a size of \").concat(_size, \".\");\n    }\n\n    var min = _size.min,\n        max = _size.max;\n\n    if (min !== undefined && max !== undefined) {\n      return \"\".concat(prop, \" must be between \").concat(min, \" and \").concat(max, \".\");\n    }\n\n    if (max !== undefined) {\n      return \"\".concat(prop, \" must be less than \").concat(max, \".\");\n    }\n\n    if (min !== undefined) {\n      return \"\".concat(prop, \" must be greater than \").concat(min, \".\");\n    }\n  },\n  // Enum message\n  \"enum\": function _enum(prop, ctx, enums) {\n    var copy = enums.slice();\n    var last = copy.pop();\n    return \"\".concat(prop, \" must be either \").concat(copy.join(', '), \" or \").concat(last, \".\");\n  },\n  // Illegal property\n  illegal: function illegal(prop) {\n    return \"\".concat(prop, \" is not allowed.\");\n  },\n  // Default message\n  \"default\": function _default(prop) {\n    return \"Validation failed for \".concat(prop, \".\");\n  }\n};\nvar _default2 = Messages;\nexports[\"default\"] = _default2;\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL25vZGVfbW9kdWxlcy92YWxpZGF0ZS9idWlsZC9tZXNzYWdlcy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsOENBQTZDO0FBQzNDRyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsa0JBQUEsR0FBcUIsS0FBSyxDQUExQjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBSUUsUUFBUSxHQUFHO0FBQ2I7QUFDQUMsRUFBQUEsSUFBSSxFQUFFLFNBQVNBLElBQVQsQ0FBY0MsSUFBZCxFQUFvQkMsR0FBcEIsRUFBeUJDLEtBQXpCLEVBQWdDO0FBQ3BDLFFBQUksT0FBT0EsS0FBUCxJQUFnQixVQUFwQixFQUFnQztBQUM5QkEsTUFBQUEsS0FBSyxHQUFHQSxLQUFLLENBQUNDLElBQWQ7QUFDRDs7QUFFRCxXQUFPLEdBQUdDLE1BQUgsQ0FBVUosSUFBVixFQUFnQixtQkFBaEIsRUFBcUNJLE1BQXJDLENBQTRDRixLQUE1QyxFQUFtRCxHQUFuRCxDQUFQO0FBQ0QsR0FSWTtBQVNiO0FBQ0FHLEVBQUFBLFFBQVEsRUFBRSxTQUFTQSxRQUFULENBQWtCTCxJQUFsQixFQUF3QjtBQUNoQyxXQUFPLEdBQUdJLE1BQUgsQ0FBVUosSUFBVixFQUFnQixlQUFoQixDQUFQO0FBQ0QsR0FaWTtBQWFiO0FBQ0FNLEVBQUFBLEtBQUssRUFBRSxTQUFTQSxLQUFULENBQWVOLElBQWYsRUFBcUJDLEdBQXJCLEVBQTBCTSxNQUExQixFQUFrQztBQUN2QyxXQUFPLEdBQUdILE1BQUgsQ0FBVUosSUFBVixFQUFnQixjQUFoQixFQUFnQ0ksTUFBaEMsQ0FBdUNHLE1BQXZDLEVBQStDLEdBQS9DLENBQVA7QUFDRCxHQWhCWTtBQWlCYjtBQUNBQyxFQUFBQSxNQUFNLEVBQUUsU0FBU0EsTUFBVCxDQUFnQlIsSUFBaEIsRUFBc0JDLEdBQXRCLEVBQTJCUSxHQUEzQixFQUFnQztBQUN0QyxRQUFJLE9BQU9BLEdBQVAsSUFBYyxRQUFsQixFQUE0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VCxDQUFrQnZCLElBQWxCLEVBQXdCO0FBQ2pDLFdBQU8seUJBQXlCSSxNQUF6QixDQUFnQ0osSUFBaEMsRUFBc0MsR0FBdEMsQ0FBUDtBQUNEO0FBeEVZLENBQWY7QUEwRUEsSUFBSXdCLFNBQVMsR0FBRzFCLFFBQWhCO0FBQ0FGLGtCQUFBLEdBQXFCNEIsU0FBckI7QUFDQUMsTUFBTSxDQUFDN0IsT0FBUCxHQUFpQkEsT0FBTyxDQUFDOEIsT0FBekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vc2hhcmVkL25vZGVfbW9kdWxlcy92YWxpZGF0ZS9idWlsZC9tZXNzYWdlcy5qcz9lMzVmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbi8qKlxuICogRGVmYXVsdCBlcnJvciBtZXNzYWdlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgTWVzc2FnZXMgPSB7XG4gIC8vIFR5cGUgbWVzc2FnZVxuICB0eXBlOiBmdW5jdGlvbiB0eXBlKHByb3AsIGN0eCwgX3R5cGUpIHtcbiAgICBpZiAodHlwZW9mIF90eXBlID09ICdmdW5jdGlvbicpIHtcbiAgICAgIF90eXBlID0gX3R5cGUubmFtZTtcbiAgICB9XG5cbiAgICByZXR1cm4gXCJcIi5jb25jYXQocHJvcCwgXCIgbXVzdCBiZSBvZiB0eXBlIFwiKS5jb25jYXQoX3R5cGUsIFwiLlwiKTtcbiAgfSxcbiAgLy8gUmVxdWlyZWQgbWVzc2FnZVxuICByZXF1aXJlZDogZnVuY3Rpb24gcmVxdWlyZWQocHJvcCkge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChwcm9wLCBcIiBpcyByZXF1aXJlZC5cIik7XG4gIH0sXG4gIC8vIE1hdGNoIG1lc3NhZ2VcbiAgbWF0Y2g6IGZ1bmN0aW9uIG1hdGNoKHByb3AsIGN0eCwgcmVnZXhwKSB7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KHByb3AsIFwiIG11c3QgbWF0Y2ggXCIpLmNvbmNhdChyZWdleHAsIFwiLlwiKTtcbiAgfSxcbiAgLy8gTGVuZ3RoIG1lc3NhZ2VcbiAgbGVuZ3RoOiBmdW5jdGlvbiBsZW5ndGgocHJvcCwgY3R4LCBsZW4pIHtcbiAgICBpZiAodHlwZW9mIGxlbiA9PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHByb3AsIFwiIG11c3QgaGF2ZSBhIGxlbmd0aCBvZiBcIikuY29uY2F0KGxlbiwgXCIuXCIpO1xuICAgIH1cblxuICAgIHZhciBtaW4gPSBsZW4ubWluLFxuICAgICAgICBtYXggPSBsZW4ubWF4O1xuXG4gICAgaWYgKG1pbiAmJiBtYXgpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChwcm9wLCBcIiBtdXN0IGhhdmUgYSBsZW5ndGggYmV0d2VlbiBcIikuY29uY2F0KG1pbiwgXCIgYW5kIFwiKS5jb25jYXQobWF4LCBcIi5cIik7XG4gICAgfVxuXG4gICAgaWYgKG1heCkge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHByb3AsIFwiIG11c3QgaGF2ZSBhIG1heGltdW0gbGVuZ3RoIG9mIFwiKS5jb25jYXQobWF4LCBcIi5cIik7XG4gICAgfVxuXG4gICAgaWYgKG1pbikge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHByb3AsIFwiIG11c3QgaGF2ZSBhIG1pbmltdW0gbGVuZ3RoIG9mIFwiKS5jb25jYXQobWluLCBcIi5cIik7XG4gICAgfVxuICB9LFxuICAvLyBTaXplIG1lc3NhZ2VcbiAgc2l6ZTogZnVuY3Rpb24gc2l6ZShwcm9wLCBjdHgsIF9zaXplKSB7XG4gICAgaWYgKHR5cGVvZiBfc2l6ZSA9PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHByb3AsIFwiIG11c3QgaGF2ZSBhIHNpemUgb2YgXCIpLmNvbmNhdChfc2l6ZSwgXCIuXCIpO1xuICAgIH1cblxuICAgIHZhciBtaW4gPSBfc2l6ZS5taW4sXG4gICAgICAgIG1heCA9IF9zaXplLm1heDtcblxuICAgIGlmIChtaW4gIT09IHVuZGVmaW5lZCAmJiBtYXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHByb3AsIFwiIG11c3QgYmUgYmV0d2VlbiBcIikuY29uY2F0KG1pbiwgXCIgYW5kIFwiKS5jb25jYXQobWF4LCBcIi5cIik7XG4gICAgfVxuXG4gICAgaWYgKG1heCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQocHJvcCwgXCIgbXVzdCBiZSBsZXNzIHRoYW4gXCIpLmNvbmNhdChtYXgsIFwiLlwiKTtcbiAgICB9XG5cbiAgICBpZiAobWluICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChwcm9wLCBcIiBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBcIikuY29uY2F0KG1pbiwgXCIuXCIpO1xuICAgIH1cbiAgfSxcbiAgLy8gRW51bSBtZXNzYWdlXG4gIFwiZW51bVwiOiBmdW5jdGlvbiBfZW51bShwcm9wLCBjdHgsIGVudW1zKSB7XG4gICAgdmFyIGNvcHkgPSBlbnVtcy5zbGljZSgpO1xuICAgIHZhciBsYXN0ID0gY29weS5wb3AoKTtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQocHJvcCwgXCIgbXVzdCBiZSBlaXRoZXIgXCIpLmNvbmNhdChjb3B5LmpvaW4oJywgJyksIFwiIG9yIFwiKS5jb25jYXQobGFzdCwgXCIuXCIpO1xuICB9LFxuICAvLyBJbGxlZ2FsIHByb3BlcnR5XG4gIGlsbGVnYWw6IGZ1bmN0aW9uIGlsbGVnYWwocHJvcCkge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChwcm9wLCBcIiBpcyBub3QgYWxsb3dlZC5cIik7XG4gIH0sXG4gIC8vIERlZmF1bHQgbWVzc2FnZVxuICBcImRlZmF1bHRcIjogZnVuY3Rpb24gX2RlZmF1bHQocHJvcCkge1xuICAgIHJldHVybiBcIlZhbGlkYXRpb24gZmFpbGVkIGZvciBcIi5jb25jYXQocHJvcCwgXCIuXCIpO1xuICB9XG59O1xudmFyIF9kZWZhdWx0MiA9IE1lc3NhZ2VzO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDI7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJNZXNzYWdlcyIsInR5cGUiLCJwcm9wIiwiY3R4IiwiX3R5cGUiLCJuYW1lIiwiY29uY2F0IiwicmVxdWlyZWQiLCJtYXRjaCIsInJlZ2V4cCIsImxlbmd0aCIsImxlbiIsIm1pbiIsIm1heCIsInNpemUiLCJfc2l6ZSIsInVuZGVmaW5lZCIsIl9lbnVtIiwiZW51bXMiLCJjb3B5Iiwic2xpY2UiLCJsYXN0IiwicG9wIiwiam9pbiIsImlsbGVnYWwiLCJfZGVmYXVsdCIsIl9kZWZhdWx0MiIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../shared/node_modules/validate/build/messages.js\n");

/***/ }),

/***/ "../shared/node_modules/validate/build/property.js":
/*!*********************************************************!*\
  !*** ../shared/node_modules/validate/build/property.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n\nvar _error2 = _interopRequireDefault(__webpack_require__(/*! ./error */ \"../shared/node_modules/validate/build/error.js\"));\n\nvar _utils = __webpack_require__(/*! ./utils */ \"../shared/node_modules/validate/build/utils.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n/**\n * A property instance gets returned whenever you call `schema.path()`.\n * Properties are also created internally when an object is passed to the Schema constructor.\n *\n * @param {String} name - the name of the property\n * @param {Schema} schema - parent schema\n */\n\n\nvar Property = /*#__PURE__*/function () {\n  function Property(name, schema) {\n    _classCallCheck(this, Property);\n\n    this.name = name;\n    this.registry = {};\n    this._schema = schema;\n    this._type = null;\n    this.messages = {};\n  }\n  /**\n   * Registers messages.\n   *\n   * @example\n   * prop.message('something is wrong')\n   * prop.message({ required: 'thing is required.' })\n   *\n   * @param {Object|String} messages\n   * @return {Property}\n   */\n\n\n  _createClass(Property, [{\n    key: \"message\",\n    value: function message(messages) {\n      if (typeof messages == 'string') {\n        messages = {\n          \"default\": messages\n        };\n      }\n\n      var entries = Object.entries(messages);\n\n      for (var _i = 0, _entries = entries; _i < _entries.length; _i++) {\n        var _entries$_i = _slicedToArray(_entries[_i], 2),\n            key = _entries$_i[0],\n            val = _entries$_i[1];\n\n        this.messages[key] = val;\n      }\n\n      return this;\n    }\n    /**\n     * Mount given `schema` on current path.\n     *\n     * @example\n     * const user = new Schema({ email: String })\n     * prop.schema(user)\n     *\n     * @param {Schema} schema - the schema to mount\n     * @return {Property}\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema(_schema) {\n      this._schema.path(this.name, _schema);\n\n      return this;\n    }\n    /**\n     * Validate using named functions from the given object.\n     * Error messages can be defined by providing an object with\n     * named error messages/generators to `schema.message()`\n     *\n     * The message generator receives the value being validated,\n     * the object it belongs to and any additional arguments.\n     *\n     * @example\n     * const schema = new Schema()\n     * const prop = schema.path('some.path')\n     *\n     * schema.message({\n     *   binary: (path, ctx) => `${path} must be binary.`,\n     *   bits: (path, ctx, bits) => `${path} must be ${bits}-bit`\n     * })\n     *\n     * prop.use({\n     *   binary: (val, ctx) => /^[01]+$/i.test(val),\n     *   bits: [(val, ctx, bits) => val.length == bits, 32]\n     * })\n     *\n     * @param {Object} fns - object with named validation functions to call\n     * @return {Property}\n     */\n\n  }, {\n    key: \"use\",\n    value: function use(fns) {\n      var _this = this;\n\n      Object.keys(fns).forEach(function (name) {\n        var arr = fns[name];\n        if (!Array.isArray(arr)) arr = [arr];\n        var fn = arr.shift();\n\n        _this._register(name, arr, fn);\n      });\n      return this;\n    }\n    /**\n     * Registers a validator that checks for presence.\n     *\n     * @example\n     * prop.required()\n     *\n     * @param {Boolean} [bool] - `true` if required, `false` otherwise\n     * @return {Property}\n     */\n\n  }, {\n    key: \"required\",\n    value: function required() {\n      var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      return this._register('required', [bool]);\n    }\n    /**\n     * Registers a validator that checks if a value is of a given `type`\n     *\n     * @example\n     * prop.type(String)\n     *\n     * @example\n     * prop.type('string')\n     *\n     * @param {String|Function} type - type to check for\n     * @return {Property}\n     */\n\n  }, {\n    key: \"type\",\n    value: function type(_type) {\n      this._type = _type;\n      return this._register('type', [_type]);\n    }\n    /**\n     * Convenience method for setting type to `String`\n     *\n     * @example\n     * prop.string()\n     *\n     * @return {Property}\n     */\n\n  }, {\n    key: \"string\",\n    value: function string() {\n      return this.type(String);\n    }\n    /**\n     * Convenience method for setting type to `Number`\n     *\n     * @example\n     * prop.number()\n     *\n     * @return {Property}\n     */\n\n  }, {\n    key: \"number\",\n    value: function number() {\n      return this.type(Number);\n    }\n    /**\n     * Convenience method for setting type to `Array`\n     *\n     * @example\n     * prop.array()\n     *\n     * @return {Property}\n     */\n\n  }, {\n    key: \"array\",\n    value: function array() {\n      return this.type(Array);\n    }\n    /**\n     * Convenience method for setting type to `Date`\n     *\n     * @example\n     * prop.date()\n     *\n     * @return {Property}\n     */\n\n  }, {\n    key: \"date\",\n    value: function date() {\n      return this.type(Date);\n    }\n    /**\n     * Registers a validator that checks length.\n     *\n     * @example\n     * prop.length({ min: 8, max: 255 })\n     * prop.length(10)\n     *\n     * @param {Object|Number} rules - object with `.min` and `.max` properties or a number\n     * @param {Number} rules.min - minimum length\n     * @param {Number} rules.max - maximum length\n     * @return {Property}\n     */\n\n  }, {\n    key: \"length\",\n    value: function length(rules) {\n      return this._register('length', [rules]);\n    }\n    /**\n     * Registers a validator that checks size.\n     *\n     * @example\n     * prop.size({ min: 8, max: 255 })\n     * prop.size(10)\n     *\n     * @param {Object|Number} rules - object with `.min` and `.max` properties or a number\n     * @param {Number} rules.min - minimum size\n     * @param {Number} rules.max - maximum size\n     * @return {Property}\n     */\n\n  }, {\n    key: \"size\",\n    value: function size(rules) {\n      return this._register('size', [rules]);\n    }\n    /**\n     * Registers a validator for enums.\n     *\n     * @example\n     * prop.enum(['cat', 'dog'])\n     *\n     * @param {Array} rules - allowed values\n     * @return {Property}\n     */\n\n  }, {\n    key: \"enum\",\n    value: function _enum(enums) {\n      return this._register('enum', [enums]);\n    }\n    /**\n     * Registers a validator that checks if a value matches given `regexp`.\n     *\n     * @example\n     * prop.match(/some\\sregular\\sexpression/)\n     *\n     * @param {RegExp} regexp - regular expression to match\n     * @return {Property}\n     */\n\n  }, {\n    key: \"match\",\n    value: function match(regexp) {\n      return this._register('match', [regexp]);\n    }\n    /**\n     * Registers a validator that checks each value in an array against given `rules`.\n     *\n     * @example\n     * prop.each({ type: String })\n     * prop.each([{ type: Number }])\n     * prop.each({ things: [{ type: String }]})\n     * prop.each(schema)\n     *\n     * @param {Array|Object|Schema|Property} rules - rules to use\n     * @return {Property}\n     */\n\n  }, {\n    key: \"each\",\n    value: function each(rules) {\n      this._schema.path((0, _utils.join)('$', this.name), rules);\n\n      return this;\n    }\n    /**\n     * Registers paths for array elements on the parent schema, with given array of rules.\n     *\n     * @example\n     * prop.elements([{ type: String }, { type: Number }])\n     *\n     * @param {Array} arr - array of rules to use\n     * @return {Property}\n     */\n\n  }, {\n    key: \"elements\",\n    value: function elements(arr) {\n      var _this2 = this;\n\n      arr.forEach(function (rules, i) {\n        _this2._schema.path((0, _utils.join)(i, _this2.name), rules);\n      });\n      return this;\n    }\n    /**\n     * Registers all properties from the given object as nested properties\n     *\n     * @example\n     * prop.properties({\n     *   name: String,\n     *   email: String\n     * })\n     *\n     * @param {Object} props - properties with rules\n     * @return {Property}\n     */\n\n  }, {\n    key: \"properties\",\n    value: function properties(props) {\n      for (var _i2 = 0, _Object$entries = Object.entries(props); _i2 < _Object$entries.length; _i2++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),\n            prop = _Object$entries$_i[0],\n            rule = _Object$entries$_i[1];\n\n        this._schema.path((0, _utils.join)(prop, this.name), rule);\n      }\n\n      return this;\n    }\n    /**\n     * Proxy method for schema path. Makes chaining properties together easier.\n     *\n     * @example\n     * schema\n     *   .path('name').type(String).required()\n     *   .path('email').type(String).required()\n     *\n     */\n\n  }, {\n    key: \"path\",\n    value: function path() {\n      var _this$_schema;\n\n      return (_this$_schema = this._schema).path.apply(_this$_schema, arguments);\n    }\n    /**\n     * Typecast given `value`\n     *\n     * @example\n     * prop.type(String)\n     * prop.typecast(123) // => '123'\n     *\n     * @param {Mixed} value - value to typecast\n     * @return {Mixed}\n     */\n\n  }, {\n    key: \"typecast\",\n    value: function typecast(value) {\n      var schema = this._schema;\n      var type = this._type;\n      if (!type) return value;\n\n      if (typeof type == 'function') {\n        type = type.name;\n      }\n\n      var cast = schema.typecasters[type] || schema.typecasters[type.toLowerCase()];\n\n      if (typeof cast != 'function') {\n        throw new Error(\"Typecasting failed: No typecaster defined for \".concat(type, \".\"));\n      }\n\n      return cast(value);\n    }\n    /**\n     * Validate given `value`\n     *\n     * @example\n     * prop.type(Number)\n     * assert(prop.validate(2) == null)\n     * assert(prop.validate('hello world') instanceof Error)\n     *\n     * @param {Mixed} value - value to validate\n     * @param {Object} ctx - the object containing the value\n     * @param {String} [path] - path of the value being validated\n     * @return {ValidationError}\n     */\n\n  }, {\n    key: \"validate\",\n    value: function validate(value, ctx) {\n      var path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.name;\n      var types = Object.keys(this.registry);\n\n      for (var _i3 = 0, _types = types; _i3 < _types.length; _i3++) {\n        var type = _types[_i3];\n\n        var err = this._run(type, value, ctx, path);\n\n        if (err) return err;\n      }\n\n      return null;\n    }\n    /**\n     * Run validator of given `type`\n     *\n     * @param {String} type - type of validator\n     * @param {Mixed} value - value to validate\n     * @param {Object} ctx - the object containing the value\n     * @param {String} path - path of the value being validated\n     * @return {ValidationError}\n     * @private\n     */\n\n  }, {\n    key: \"_run\",\n    value: function _run(type, value, ctx, path) {\n      if (!this.registry[type]) return;\n      var schema = this._schema;\n      var _this$registry$type = this.registry[type],\n          args = _this$registry$type.args,\n          fn = _this$registry$type.fn;\n      var validator = fn || schema.validators[type];\n      var valid = validator.apply(void 0, [value, ctx].concat(_toConsumableArray(args), [path]));\n      if (!valid) return this._error(type, ctx, args, path);\n    }\n    /**\n     * Register validator\n     *\n     * @param {String} type - type of validator\n     * @param {Array} args - argument to pass to validator\n     * @param {Function} [fn] - custom validation function to call\n     * @return {Property}\n     * @private\n     */\n\n  }, {\n    key: \"_register\",\n    value: function _register(type, args, fn) {\n      this.registry[type] = {\n        args: args,\n        fn: fn\n      };\n      return this;\n    }\n    /**\n     * Create an error\n     *\n     * @param {String} type - type of validator\n     * @param {Object} ctx - the object containing the value\n     * @param {Array} args - arguments to pass\n     * @param {String} path - path of the value being validated\n     * @return {ValidationError}\n     * @private\n     */\n\n  }, {\n    key: \"_error\",\n    value: function _error(type, ctx, args, path) {\n      var schema = this._schema;\n      var message = this.messages[type] || this.messages[\"default\"] || schema.messages[type] || schema.messages[\"default\"];\n\n      if (typeof message == 'function') {\n        message = message.apply(void 0, [path, ctx].concat(_toConsumableArray(args)));\n      }\n\n      return new _error2[\"default\"](message, path);\n    }\n  }]);\n\n  return Property;\n}();\n\nexports[\"default\"] = Property;\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared/node_modules/validate/build/property.js\n");

/***/ }),

/***/ "../shared/node_modules/validate/build/schema.js":
/*!*******************************************************!*\
  !*** ../shared/node_modules/validate/build/schema.js ***!
  \*******************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n\nvar _dot = _interopRequireDefault(__webpack_require__(/*! @eivifj/dot */ \"../shared/node_modules/@eivifj/dot/index.js\"));\n\nvar _typecast = _interopRequireDefault(__webpack_require__(/*! typecast */ \"../shared/node_modules/typecast/index.js\"));\n\nvar _property = _interopRequireDefault(__webpack_require__(/*! ./property */ \"../shared/node_modules/validate/build/property.js\"));\n\nvar _messages = _interopRequireDefault(__webpack_require__(/*! ./messages */ \"../shared/node_modules/validate/build/messages.js\"));\n\nvar _validators = _interopRequireDefault(__webpack_require__(/*! ./validators */ \"../shared/node_modules/validate/build/validators.js\"));\n\nvar _error = _interopRequireDefault(__webpack_require__(/*! ./error */ \"../shared/node_modules/validate/build/error.js\"));\n\nvar _utils = __webpack_require__(/*! ./utils */ \"../shared/node_modules/validate/build/utils.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n/**\n * A Schema defines the structure that objects should be validated against.\n *\n * @example\n * const post = new Schema({\n *   title: {\n *     type: String,\n *     required: true,\n *     length: { min: 1, max: 255 }\n *   },\n *   content: {\n *     type: String,\n *     required: true\n *   },\n *   published: {\n *     type: Date,\n *     required: true\n *   },\n *   keywords: [{ type: String }]\n * })\n *\n * @example\n * const author = new Schema({\n *   name: {\n *     type: String,\n *     required: true\n *   },\n *   email: {\n *     type: String,\n *     required: true\n *   },\n *   posts: [post]\n * })\n *\n * @param {Object} [obj] - schema definition\n * @param {Object} [opts] - options\n * @param {Boolean} [opts.typecast=false] - typecast values before validation\n * @param {Boolean} [opts.strip=true] - strip properties not defined in the schema\n * @param {Boolean} [opts.strict=false] - validation fails when object contains properties not defined in the schema\n */\n\n\nvar Schema = /*#__PURE__*/function () {\n  function Schema() {\n    var _this = this;\n\n    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Schema);\n\n    this.opts = opts;\n    this.hooks = [];\n    this.props = {};\n    this.messages = Object.assign({}, _messages[\"default\"]);\n    this.validators = Object.assign({}, _validators[\"default\"]);\n    this.typecasters = Object.assign({}, _typecast[\"default\"]);\n    Object.keys(obj).forEach(function (k) {\n      return _this.path(k, obj[k]);\n    });\n  }\n  /**\n   * Create or update `path` with given `rules`.\n   *\n   * @example\n   * const schema = new Schema()\n   * schema.path('name.first', { type: String })\n   * schema.path('name.last').type(String).required()\n   *\n   * @param {String} path - full path using dot-notation\n   * @param {Object|Array|String|Schema|Property} [rules] - rules to apply\n   * @return {Property}\n   */\n\n\n  _createClass(Schema, [{\n    key: \"path\",\n    value: function path(_path, rules) {\n      var _this2 = this;\n\n      var parts = _path.split('.');\n\n      var suffix = parts.pop();\n      var prefix = parts.join('.'); // Make sure full path is created\n\n      if (prefix) {\n        this.path(prefix);\n      } // Array index placeholder\n\n\n      if (suffix === '$') {\n        this.path(prefix).type(Array);\n      } // Nested schema\n\n\n      if (rules instanceof Schema) {\n        rules.hook(function (k, v) {\n          return _this2.path((0, _utils.join)(k, _path), v);\n        });\n        return this.path(_path, rules.props);\n      } // Return early when given a `Property`\n\n\n      if (rules instanceof _property[\"default\"]) {\n        this.props[_path] = rules; // Notify parents if mounted\n\n        this.propagate(_path, rules);\n        return rules;\n      }\n\n      var prop = this.props[_path] || new _property[\"default\"](_path, this);\n      this.props[_path] = prop; // Notify parents if mounted\n\n      this.propagate(_path, prop); // No rules?\n\n      if (!rules) return prop; // type shorthand\n      // `{ name: String }`\n\n      if (typeof rules == 'string' || typeof rules == 'function') {\n        prop.type(rules);\n        return prop;\n      } // Allow arrays to be defined implicitly:\n      // `{ keywords: [String] }`\n      // `{ keyVal: [[String, Number]] }`\n\n\n      if (Array.isArray(rules)) {\n        prop.type(Array);\n\n        if (rules.length === 1) {\n          prop.each(rules[0]);\n        } else {\n          prop.elements(rules);\n        }\n\n        return prop;\n      }\n\n      var keys = Object.keys(rules);\n      var nested = false; // Check for nested objects\n\n      for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {\n        var key = _keys[_i];\n        if (typeof prop[key] == 'function') continue;\n        prop.type(Object);\n        nested = true;\n        break;\n      }\n\n      keys.forEach(function (key) {\n        var rule = rules[key];\n\n        if (nested) {\n          return _this2.path((0, _utils.join)(key, _path), rule);\n        }\n\n        prop[key](rule);\n      });\n      return prop;\n    }\n    /**\n     * Typecast given `obj`.\n     *\n     * @param {Object} obj - the object to typecast\n     * @return {Schema}\n     * @private\n     */\n\n  }, {\n    key: \"typecast\",\n    value: function typecast(obj) {\n      var _loop = function _loop() {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),\n            path = _Object$entries$_i[0],\n            prop = _Object$entries$_i[1];\n\n        (0, _utils.enumerate)(path, obj, function (key, value) {\n          if (value == null) return;\n          var cast = prop.typecast(value);\n          if (cast === value) return;\n\n          _dot[\"default\"].set(obj, key, cast);\n        });\n      };\n\n      for (var _i2 = 0, _Object$entries = Object.entries(this.props); _i2 < _Object$entries.length; _i2++) {\n        _loop();\n      }\n\n      return this;\n    }\n    /**\n     * Strip all keys not defined in the schema\n     *\n     * @param {Object} obj - the object to strip\n     * @param {String} [prefix]\n     * @return {Schema}\n     * @private\n     */\n\n  }, {\n    key: \"strip\",\n    value: function strip(obj) {\n      var _this3 = this;\n\n      (0, _utils.walk)(obj, function (path, prop) {\n        if (_this3.props[prop]) return true;\n\n        _dot[\"default\"][\"delete\"](obj, path);\n\n        return false;\n      });\n      return this;\n    }\n    /**\n     * Create errors for all properties that are not defined in the schema\n     *\n     * @param {Object} obj - the object to check\n     * @return {Schema}\n     * @private\n     */\n\n  }, {\n    key: \"enforce\",\n    value: function enforce(obj) {\n      var _this4 = this;\n\n      var errors = [];\n      (0, _utils.walk)(obj, function (path, prop) {\n        if (_this4.props[prop]) return true;\n        var error = new _error[\"default\"](_messages[\"default\"].illegal(path), path);\n        errors.push(error);\n        return false;\n      });\n      return errors;\n    }\n    /**\n     * Validate given `obj`.\n     *\n     * @example\n     * const schema = new Schema({ name: { required: true }})\n     * const errors = schema.validate({})\n     * assert(errors.length == 1)\n     * assert(errors[0].message == 'name is required')\n     * assert(errors[0].path == 'name')\n     *\n     * @param {Object} obj - the object to validate\n     * @param {Object} [opts] - options, see [Schema](#schema-1)\n     * @return {Array}\n     */\n\n  }, {\n    key: \"validate\",\n    value: function validate(obj) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      opts = Object.assign(this.opts, opts);\n      var errors = [];\n\n      if (opts.typecast) {\n        this.typecast(obj);\n      }\n\n      if (opts.strict) {\n        errors.push.apply(errors, _toConsumableArray(this.enforce(obj)));\n      }\n\n      if (opts.strip !== false) {\n        this.strip(obj);\n      }\n\n      var _loop2 = function _loop2() {\n        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i3], 2),\n            path = _Object$entries2$_i[0],\n            prop = _Object$entries2$_i[1];\n\n        (0, _utils.enumerate)(path, obj, function (key, value) {\n          var err = prop.validate(value, obj, key);\n          if (err) errors.push(err);\n        });\n      };\n\n      for (var _i3 = 0, _Object$entries2 = Object.entries(this.props); _i3 < _Object$entries2.length; _i3++) {\n        _loop2();\n      }\n\n      return errors;\n    }\n    /**\n     * Assert that given `obj` is valid.\n     *\n     * @example\n     * const schema = new Schema({ name: String })\n     * schema.assert({ name: 1 }) // Throws an error\n     *\n     * @param {Object} obj\n     * @param {Object} [opts]\n     */\n\n  }, {\n    key: \"assert\",\n    value: function assert(obj, opts) {\n      var _this$validate = this.validate(obj, opts),\n          _this$validate2 = _slicedToArray(_this$validate, 1),\n          err = _this$validate2[0];\n\n      if (err) throw err;\n    }\n    /**\n     * Override default error messages.\n     *\n     * @example\n     * const hex = (val) => /^0x[0-9a-f]+$/.test(val)\n     * schema.path('some.path').use({ hex })\n     * schema.message('hex', path => `${path} must be hexadecimal`)\n     *\n     * @example\n     * schema.message({ hex: path => `${path} must be hexadecimal` })\n     *\n     * @param {String|Object} name - name of the validator or an object with name-message pairs\n     * @param {String|Function} [message] - the message or message generator to use\n     * @return {Schema}\n     */\n\n  }, {\n    key: \"message\",\n    value: function message(name, _message) {\n      (0, _utils.assign)(name, _message, this.messages);\n      return this;\n    }\n    /**\n     * Override default validators.\n     *\n     * @example\n     * schema.validator('required', val => val != null)\n     *\n     * @example\n     * schema.validator({ required: val => val != null })\n     *\n     * @param {String|Object} name - name of the validator or an object with name-function pairs\n     * @param {Function} [fn] - the function to use\n     * @return {Schema}\n     */\n\n  }, {\n    key: \"validator\",\n    value: function validator(name, fn) {\n      (0, _utils.assign)(name, fn, this.validators);\n      return this;\n    }\n    /**\n     * Override default typecasters.\n     *\n     * @example\n     * schema.typecaster('SomeClass', val => new SomeClass(val))\n     *\n     * @example\n     * schema.typecaster({ SomeClass: val => new SomeClass(val) })\n     *\n     * @param {String|Object} name - name of the validator or an object with name-function pairs\n     * @param {Function} [fn] - the function to use\n     * @return {Schema}\n     */\n\n  }, {\n    key: \"typecaster\",\n    value: function typecaster(name, fn) {\n      (0, _utils.assign)(name, fn, this.typecasters);\n      return this;\n    }\n    /**\n     * Accepts a function that is called whenever new props are added.\n     *\n     * @param {Function} fn - the function to call\n     * @return {Schema}\n     * @private\n     */\n\n  }, {\n    key: \"hook\",\n    value: function hook(fn) {\n      this.hooks.push(fn);\n      return this;\n    }\n    /**\n     * Notify all subscribers that a property has been added.\n     *\n     * @param {String} path - the path of the property\n     * @param {Property} prop - the new property\n     * @return {Schema}\n     * @private\n     */\n\n  }, {\n    key: \"propagate\",\n    value: function propagate(path, prop) {\n      this.hooks.forEach(function (fn) {\n        return fn(path, prop);\n      });\n      return this;\n    }\n  }]);\n\n  return Schema;\n}(); // Export ValidationError\n\n\nexports[\"default\"] = Schema;\nSchema.ValidationError = _error[\"default\"];\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared/node_modules/validate/build/schema.js\n");

/***/ }),

/***/ "../shared/node_modules/validate/build/utils.js":
/*!******************************************************!*\
  !*** ../shared/node_modules/validate/build/utils.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.assign = assign;\nexports.enumerate = enumerate;\nexports.join = join;\nexports.walk = walk;\n\nvar _dot = _interopRequireDefault(__webpack_require__(/*! @eivifj/dot */ \"../shared/node_modules/@eivifj/dot/index.js\"));\n\nvar _componentType = _interopRequireDefault(__webpack_require__(/*! component-type */ \"../shared/node_modules/component-type/index.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/**\n * Assign given key and value (or object) to given object\n *\n * @private\n */\n\n\nfunction assign(key, val, obj) {\n  if (typeof key == 'string') {\n    obj[key] = val;\n    return;\n  }\n\n  Object.keys(key).forEach(function (k) {\n    return obj[k] = key[k];\n  });\n}\n/**\n * Enumerate all permutations of `path`, replacing $ with array indices\n *\n * @private\n */\n\n\nfunction enumerate(path, obj, callback) {\n  var parts = path.split(/\\.\\$(?=\\.|$)/);\n  var first = parts.shift();\n\n  var arr = _dot[\"default\"].get(obj, first);\n\n  if (!parts.length) {\n    return callback(first, arr);\n  }\n\n  if (!Array.isArray(arr)) {\n    return;\n  }\n\n  for (var i = 0; i < arr.length; i++) {\n    var current = join(i, first);\n    var next = current + parts.join('.$');\n    enumerate(next, obj, callback);\n  }\n}\n/**\n * Walk object and call `callback` with path and prop name\n *\n * @private\n */\n\n\nfunction walk(obj, callback, path, prop) {\n  var type = (0, _componentType[\"default\"])(obj);\n\n  if (type === 'array') {\n    obj.forEach(function (v, i) {\n      return walk(v, callback, join(i, path), join('$', prop));\n    });\n    return;\n  }\n\n  if (type !== 'object') {\n    return;\n  }\n\n  for (var _i = 0, _Object$entries = Object.entries(obj); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        key = _Object$entries$_i[0],\n        val = _Object$entries$_i[1];\n\n    var newPath = join(key, path);\n    var newProp = join(key, prop);\n\n    if (callback(newPath, newProp)) {\n      walk(val, callback, newPath, newProp);\n    }\n  }\n}\n/**\n * Join `path` with `prefix`\n *\n * @private\n */\n\n\nfunction join(path, prefix) {\n  return prefix ? \"\".concat(prefix, \".\").concat(path) : path;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared/node_modules/validate/build/utils.js\n");

/***/ }),

/***/ "../shared/node_modules/validate/build/validators.js":
/*!***********************************************************!*\
  !*** ../shared/node_modules/validate/build/validators.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n\nvar _componentType = _interopRequireDefault(__webpack_require__(/*! component-type */ \"../shared/node_modules/component-type/index.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * Default validators.\n *\n * @private\n */\n\n\nvar Validators = {\n  /**\n   * Validates presence.\n   *\n   * @param {Mixed} value - the value being validated\n   * @param {Object} ctx - the object being validated\n   * @param {Bolean} required\n   * @return {Boolean}\n   */\n  required: function required(value, ctx, _required) {\n    if (_required === false) return true;\n    return value != null && value !== '';\n  },\n\n  /**\n   * Validates type.\n   *\n   * @param {Mixed} value - the value being validated\n   * @param {Object} ctx - the object being validated\n   * @param {String|Function} name name of the type or a constructor\n   * @return {Boolean}\n   */\n  type: function type(value, ctx, name) {\n    if (value == null) return true;\n\n    if (typeof name == 'function') {\n      return value.constructor === name;\n    }\n\n    return (0, _componentType[\"default\"])(value) === name;\n  },\n\n  /**\n   * Validates length.\n   *\n   * @param {String} value the string being validated\n   * @param {Object} ctx the object being validated\n   * @param {Object|Number} rules object with .min and/or .max props or a number\n   * @param {Number} [rules.min] - minimum length\n   * @param {Number} [rules.max] - maximum length\n   * @return {Boolean}\n   */\n  length: function length(value, ctx, len) {\n    if (value == null) return true;\n\n    if (typeof len == 'number') {\n      return value.length === len;\n    }\n\n    var min = len.min,\n        max = len.max;\n    if (min && value.length < min) return false;\n    if (max && value.length > max) return false;\n    return true;\n  },\n\n  /**\n   * Validates size.\n   *\n   * @param {Number} value the number being validated\n   * @param {Object} ctx the object being validated\n   * @param {Object|Number} size object with .min and/or .max props or a number\n   * @param {String|Number} [size.min] - minimum size\n   * @param {String|Number} [size.max] - maximum size\n   * @return {Boolean}\n   */\n  size: function size(value, ctx, _size) {\n    if (value == null) return true;\n\n    if (typeof _size == 'number') {\n      return value === _size;\n    }\n\n    var min = _size.min,\n        max = _size.max;\n    if (parseInt(min) != null && value < min) return false;\n    if (parseInt(max) != null && value > max) return false;\n    return true;\n  },\n\n  /**\n   * Validates enums.\n   *\n   * @param {String} value the string being validated\n   * @param {Object} ctx the object being validated\n   * @param {Array} enums array with allowed values\n   * @return {Boolean}\n   */\n  \"enum\": function _enum(value, ctx, enums) {\n    if (value == null) return true;\n    return enums.includes(value);\n  },\n\n  /**\n   * Validates against given `regexp`.\n   *\n   * @param {String} value the string beign validated\n   * @param {Object} ctx the object being validated\n   * @param {RegExp} regexp the regexp to validate against\n   * @return {Boolean}\n   */\n  match: function match(value, ctx, regexp) {\n    if (value == null) return true;\n    return regexp.test(value);\n  }\n};\nvar _default = Validators;\nexports[\"default\"] = _default;\nmodule.exports = exports.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../shared/node_modules/validate/build/validators.js\n");

/***/ }),

/***/ "../../../../node_modules/base64-js/index.js":
/*!***************************************************!*\
  !*** ../../../../node_modules/base64-js/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.byteLength = byteLength;\nexports.toByteArray = toByteArray;\nexports.fromByteArray = fromByteArray;\nvar lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i];\n  revLookup[code.charCodeAt(i)] = i;\n} // Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\n\n\nrevLookup['-'.charCodeAt(0)] = 62;\nrevLookup['_'.charCodeAt(0)] = 63;\n\nfunction getLens(b64) {\n  var len = b64.length;\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4');\n  } // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n\n\n  var validLen = b64.indexOf('=');\n  if (validLen === -1) validLen = len;\n  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n  return [validLen, placeHoldersLen];\n} // base64 is 4/3 + up to two characters of the original data\n\n\nfunction byteLength(b64) {\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\n\nfunction _byteLength(b64, validLen, placeHoldersLen) {\n  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\n\nfunction toByteArray(b64) {\n  var tmp;\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n  var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars\n\n  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n  var i;\n\n  for (i = 0; i < len; i += 4) {\n    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n    arr[curByte++] = tmp >> 16 & 0xFF;\n    arr[curByte++] = tmp >> 8 & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n    arr[curByte++] = tmp >> 8 & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  return arr;\n}\n\nfunction tripletToBase64(num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\n}\n\nfunction encodeChunk(uint8, start, end) {\n  var tmp;\n  var output = [];\n\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);\n    output.push(tripletToBase64(tmp));\n  }\n\n  return output.join('');\n}\n\nfunction fromByteArray(uint8) {\n  var tmp;\n  var len = uint8.length;\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n\n  var parts = [];\n  var maxChunkLength = 16383; // must be multiple of 3\n  // go through the array every three bytes, we'll deal with trailing stuff later\n\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n  } // pad the end with zeros, but make sure to not forget the extra bytes\n\n\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1];\n    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');\n  }\n\n  return parts.join('');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../../node_modules/base64-js/index.js\n");

/***/ }),

/***/ "../../../../node_modules/buffer/index.js":
/*!************************************************!*\
  !*** ../../../../node_modules/buffer/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n/* eslint-disable no-proto */\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"../../../../node_modules/base64-js/index.js\");\n\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"../../../../node_modules/ieee754/index.js\");\n\nvar customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' // eslint-disable-line dot-notation\n? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n: null;\nexports.Buffer = Buffer;\nexports.SlowBuffer = SlowBuffer;\nexports.INSPECT_MAX_BYTES = 50;\nvar K_MAX_LENGTH = 0x7fffffff;\nexports.kMaxLength = K_MAX_LENGTH;\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\n\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport();\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {\n  console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');\n}\n\nfunction typedArraySupport() {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1);\n    var proto = {\n      foo: function () {\n        return 42;\n      }\n    };\n    Object.setPrototypeOf(proto, Uint8Array.prototype);\n    Object.setPrototypeOf(arr, proto);\n    return arr.foo() === 42;\n  } catch (e) {\n    return false;\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined;\n    return this.buffer;\n  }\n});\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined;\n    return this.byteOffset;\n  }\n});\n\nfunction createBuffer(length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n  } // Return an augmented `Uint8Array` instance\n\n\n  var buf = new Uint8Array(length);\n  Object.setPrototypeOf(buf, Buffer.prototype);\n  return buf;\n}\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\n\nfunction Buffer(arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError('The \"string\" argument must be of type string. Received type number');\n    }\n\n    return allocUnsafe(arg);\n  }\n\n  return from(arg, encodingOrOffset, length);\n}\n\nBuffer.poolSize = 8192; // not used by this implementation\n\nfunction from(value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset);\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value);\n  }\n\n  if (value == null) {\n    throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);\n  }\n\n  if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {\n    return fromArrayBuffer(value, encodingOrOffset, length);\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length);\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n  }\n\n  var valueOf = value.valueOf && value.valueOf();\n\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length);\n  }\n\n  var b = fromObject(value);\n  if (b) return b;\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);\n  }\n\n  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);\n}\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\n\n\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length);\n}; // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\n\n\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);\nObject.setPrototypeOf(Buffer, Uint8Array);\n\nfunction assertSize(size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number');\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n  }\n}\n\nfunction alloc(size, fill, encoding) {\n  assertSize(size);\n\n  if (size <= 0) {\n    return createBuffer(size);\n  }\n\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n  }\n\n  return createBuffer(size);\n}\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\n\n\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding);\n};\n\nfunction allocUnsafe(size) {\n  assertSize(size);\n  return createBuffer(size < 0 ? 0 : checked(size) | 0);\n}\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\n\n\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size);\n};\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\n\n\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size);\n};\n\nfunction fromString(string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8';\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding);\n  }\n\n  var length = byteLength(string, encoding) | 0;\n  var buf = createBuffer(length);\n  var actual = buf.write(string, encoding);\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual);\n  }\n\n  return buf;\n}\n\nfunction fromArrayLike(array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0;\n  var buf = createBuffer(length);\n\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255;\n  }\n\n  return buf;\n}\n\nfunction fromArrayView(arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    var copy = new Uint8Array(arrayView);\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n  }\n\n  return fromArrayLike(arrayView);\n}\n\nfunction fromArrayBuffer(array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds');\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds');\n  }\n\n  var buf;\n\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array);\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset);\n  } else {\n    buf = new Uint8Array(array, byteOffset, length);\n  } // Return an augmented `Uint8Array` instance\n\n\n  Object.setPrototypeOf(buf, Buffer.prototype);\n  return buf;\n}\n\nfunction fromObject(obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0;\n    var buf = createBuffer(len);\n\n    if (buf.length === 0) {\n      return buf;\n    }\n\n    obj.copy(buf, 0, 0, len);\n    return buf;\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0);\n    }\n\n    return fromArrayLike(obj);\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data);\n  }\n}\n\nfunction checked(length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');\n  }\n\n  return length | 0;\n}\n\nfunction SlowBuffer(length) {\n  if (+length != length) {\n    // eslint-disable-line eqeqeq\n    length = 0;\n  }\n\n  return Buffer.alloc(+length);\n}\n\nBuffer.isBuffer = function isBuffer(b) {\n  return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false\n};\n\nBuffer.compare = function compare(a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);\n\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n  }\n\n  if (a === b) return 0;\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) return -1;\n  if (y < x) return 1;\n  return 0;\n};\n\nBuffer.isEncoding = function isEncoding(encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true;\n\n    default:\n      return false;\n  }\n};\n\nBuffer.concat = function concat(list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers');\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0);\n  }\n\n  var i;\n\n  if (length === undefined) {\n    length = 0;\n\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length;\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length);\n  var pos = 0;\n\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i];\n\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        Buffer.from(buf).copy(buffer, pos);\n      } else {\n        Uint8Array.prototype.set.call(buffer, buf, pos);\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers');\n    } else {\n      buf.copy(buffer, pos);\n    }\n\n    pos += buf.length;\n  }\n\n  return buffer;\n};\n\nfunction byteLength(string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length;\n  }\n\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength;\n  }\n\n  if (typeof string !== 'string') {\n    throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + typeof string);\n  }\n\n  var len = string.length;\n  var mustMatch = arguments.length > 2 && arguments[2] === true;\n  if (!mustMatch && len === 0) return 0; // Use a for loop to avoid recursion\n\n  var loweredCase = false;\n\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len;\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length;\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2;\n\n      case 'hex':\n        return len >>> 1;\n\n      case 'base64':\n        return base64ToBytes(string).length;\n\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8\n        }\n\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\n\nBuffer.byteLength = byteLength;\n\nfunction slowToString(encoding, start, end) {\n  var loweredCase = false; // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n\n  if (start === undefined || start < 0) {\n    start = 0;\n  } // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n\n\n  if (start > this.length) {\n    return '';\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length;\n  }\n\n  if (end <= 0) {\n    return '';\n  } // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n\n\n  end >>>= 0;\n  start >>>= 0;\n\n  if (end <= start) {\n    return '';\n  }\n\n  if (!encoding) encoding = 'utf8';\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end);\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end);\n\n      case 'ascii':\n        return asciiSlice(this, start, end);\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end);\n\n      case 'base64':\n        return base64Slice(this, start, end);\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end);\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n        encoding = (encoding + '').toLowerCase();\n        loweredCase = true;\n    }\n  }\n} // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\n\n\nBuffer.prototype._isBuffer = true;\n\nfunction swap(b, n, m) {\n  var i = b[n];\n  b[n] = b[m];\n  b[m] = i;\n}\n\nBuffer.prototype.swap16 = function swap16() {\n  var len = this.length;\n\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits');\n  }\n\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1);\n  }\n\n  return this;\n};\n\nBuffer.prototype.swap32 = function swap32() {\n  var len = this.length;\n\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits');\n  }\n\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3);\n    swap(this, i + 1, i + 2);\n  }\n\n  return this;\n};\n\nBuffer.prototype.swap64 = function swap64() {\n  var len = this.length;\n\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits');\n  }\n\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7);\n    swap(this, i + 1, i + 6);\n    swap(this, i + 2, i + 5);\n    swap(this, i + 3, i + 4);\n  }\n\n  return this;\n};\n\nBuffer.prototype.toString = function toString() {\n  var length = this.length;\n  if (length === 0) return '';\n  if (arguments.length === 0) return utf8Slice(this, 0, length);\n  return slowToString.apply(this, arguments);\n};\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString;\n\nBuffer.prototype.equals = function equals(b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');\n  if (this === b) return true;\n  return Buffer.compare(this, b) === 0;\n};\n\nBuffer.prototype.inspect = function inspect() {\n  var str = '';\n  var max = exports.INSPECT_MAX_BYTES;\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();\n  if (this.length > max) str += ' ... ';\n  return '<Buffer ' + str + '>';\n};\n\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;\n}\n\nBuffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength);\n  }\n\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + typeof target);\n  }\n\n  if (start === undefined) {\n    start = 0;\n  }\n\n  if (end === undefined) {\n    end = target ? target.length : 0;\n  }\n\n  if (thisStart === undefined) {\n    thisStart = 0;\n  }\n\n  if (thisEnd === undefined) {\n    thisEnd = this.length;\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index');\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0;\n  }\n\n  if (thisStart >= thisEnd) {\n    return -1;\n  }\n\n  if (start >= end) {\n    return 1;\n  }\n\n  start >>>= 0;\n  end >>>= 0;\n  thisStart >>>= 0;\n  thisEnd >>>= 0;\n  if (this === target) return 0;\n  var x = thisEnd - thisStart;\n  var y = end - start;\n  var len = Math.min(x, y);\n  var thisCopy = this.slice(thisStart, thisEnd);\n  var targetCopy = target.slice(start, end);\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i];\n      y = targetCopy[i];\n      break;\n    }\n  }\n\n  if (x < y) return -1;\n  if (y < x) return 1;\n  return 0;\n}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\n\n\nfunction bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1; // Normalize byteOffset\n\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset;\n    byteOffset = 0;\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff;\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000;\n  }\n\n  byteOffset = +byteOffset; // Coerce to Number.\n\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : buffer.length - 1;\n  } // Normalize byteOffset: negative offsets start from the end of the buffer\n\n\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1;else byteOffset = buffer.length - 1;\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0;else return -1;\n  } // Normalize val\n\n\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding);\n  } // Finally, search either indexOf (if dir is true) or lastIndexOf\n\n\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1;\n    }\n\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n  } else if (typeof val === 'number') {\n    val = val & 0xFF; // Search for a byte value [0-255]\n\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n      }\n    }\n\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n  }\n\n  throw new TypeError('val must be string, number or Buffer');\n}\n\nfunction arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1;\n  var arrLength = arr.length;\n  var valLength = val.length;\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase();\n\n    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1;\n      }\n\n      indexSize = 2;\n      arrLength /= 2;\n      valLength /= 2;\n      byteOffset /= 2;\n    }\n  }\n\n  function read(buf, i) {\n    if (indexSize === 1) {\n      return buf[i];\n    } else {\n      return buf.readUInt16BE(i * indexSize);\n    }\n  }\n\n  var i;\n\n  if (dir) {\n    var foundIndex = -1;\n\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i;\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex;\n        foundIndex = -1;\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true;\n\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false;\n          break;\n        }\n      }\n\n      if (found) return i;\n    }\n  }\n\n  return -1;\n}\n\nBuffer.prototype.includes = function includes(val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1;\n};\n\nBuffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n};\n\nBuffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n};\n\nfunction hexWrite(buf, string, offset, length) {\n  offset = Number(offset) || 0;\n  var remaining = buf.length - offset;\n\n  if (!length) {\n    length = remaining;\n  } else {\n    length = Number(length);\n\n    if (length > remaining) {\n      length = remaining;\n    }\n  }\n\n  var strLen = string.length;\n\n  if (length > strLen / 2) {\n    length = strLen / 2;\n  }\n\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16);\n    if (numberIsNaN(parsed)) return i;\n    buf[offset + i] = parsed;\n  }\n\n  return i;\n}\n\nfunction utf8Write(buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n}\n\nfunction asciiWrite(buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length);\n}\n\nfunction base64Write(buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length);\n}\n\nfunction ucs2Write(buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n}\n\nBuffer.prototype.write = function write(string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8';\n    length = this.length;\n    offset = 0; // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset;\n    length = this.length;\n    offset = 0; // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0;\n\n    if (isFinite(length)) {\n      length = length >>> 0;\n      if (encoding === undefined) encoding = 'utf8';\n    } else {\n      encoding = length;\n      length = undefined;\n    }\n  } else {\n    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');\n  }\n\n  var remaining = this.length - offset;\n  if (length === undefined || length > remaining) length = remaining;\n\n  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds');\n  }\n\n  if (!encoding) encoding = 'utf8';\n  var loweredCase = false;\n\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length);\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length);\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length);\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length);\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length);\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n};\n\nBuffer.prototype.toJSON = function toJSON() {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  };\n};\n\nfunction base64Slice(buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf);\n  } else {\n    return base64.fromByteArray(buf.slice(start, end));\n  }\n}\n\nfunction utf8Slice(buf, start, end) {\n  end = Math.min(buf.length, end);\n  var res = [];\n  var i = start;\n\n  while (i < end) {\n    var firstByte = buf[i];\n    var codePoint = null;\n    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte;\n          }\n\n          break;\n\n        case 2:\n          secondByte = buf[i + 1];\n\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n          break;\n\n        case 3:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n          break;\n\n        case 4:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          fourthByte = buf[i + 3];\n\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD;\n      bytesPerSequence = 1;\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000;\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n      codePoint = 0xDC00 | codePoint & 0x3FF;\n    }\n\n    res.push(codePoint);\n    i += bytesPerSequence;\n  }\n\n  return decodeCodePointsArray(res);\n} // Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\n\n\nvar MAX_ARGUMENTS_LENGTH = 0x1000;\n\nfunction decodeCodePointsArray(codePoints) {\n  var len = codePoints.length;\n\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\n  } // Decode in chunks to avoid \"call stack size exceeded\".\n\n\n  var res = '';\n  var i = 0;\n\n  while (i < len) {\n    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n  }\n\n  return res;\n}\n\nfunction asciiSlice(buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F);\n  }\n\n  return ret;\n}\n\nfunction latin1Slice(buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i]);\n  }\n\n  return ret;\n}\n\nfunction hexSlice(buf, start, end) {\n  var len = buf.length;\n  if (!start || start < 0) start = 0;\n  if (!end || end < 0 || end > len) end = len;\n  var out = '';\n\n  for (var i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]];\n  }\n\n  return out;\n}\n\nfunction utf16leSlice(buf, start, end) {\n  var bytes = buf.slice(start, end);\n  var res = ''; // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n\n  for (var i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n  }\n\n  return res;\n}\n\nBuffer.prototype.slice = function slice(start, end) {\n  var len = this.length;\n  start = ~~start;\n  end = end === undefined ? len : ~~end;\n\n  if (start < 0) {\n    start += len;\n    if (start < 0) start = 0;\n  } else if (start > len) {\n    start = len;\n  }\n\n  if (end < 0) {\n    end += len;\n    if (end < 0) end = 0;\n  } else if (end > len) {\n    end = len;\n  }\n\n  if (end < start) end = start;\n  var newBuf = this.subarray(start, end); // Return an augmented `Uint8Array` instance\n\n  Object.setPrototypeOf(newBuf, Buffer.prototype);\n  return newBuf;\n};\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\n\n\nfunction checkOffset(offset, ext, length) {\n  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');\n}\n\nBuffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n\n  return val;\n};\n\nBuffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length);\n  }\n\n  var val = this[offset + --byteLength];\n  var mul = 1;\n\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul;\n  }\n\n  return val;\n};\n\nBuffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  return this[offset];\n};\n\nBuffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] | this[offset + 1] << 8;\n};\n\nBuffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] << 8 | this[offset + 1];\n};\n\nBuffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\n};\n\nBuffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n};\n\nBuffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n\n  mul *= 0x80;\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n  return val;\n};\n\nBuffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var i = byteLength;\n  var mul = 1;\n  var val = this[offset + --i];\n\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul;\n  }\n\n  mul *= 0x80;\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n  return val;\n};\n\nBuffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  if (!(this[offset] & 0x80)) return this[offset];\n  return (0xff - this[offset] + 1) * -1;\n};\n\nBuffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset] | this[offset + 1] << 8;\n  return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\n\nBuffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset + 1] | this[offset] << 8;\n  return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\n\nBuffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n};\n\nBuffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n};\n\nBuffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return ieee754.read(this, offset, true, 23, 4);\n};\n\nBuffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return ieee754.read(this, offset, false, 23, 4);\n};\n\nBuffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return ieee754.read(this, offset, true, 52, 8);\n};\n\nBuffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return ieee754.read(this, offset, false, 52, 8);\n};\n\nfunction checkInt(buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n  if (offset + ext > buf.length) throw new RangeError('Index out of range');\n}\n\nBuffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var mul = 1;\n  var i = 0;\n  this[offset] = value & 0xFF;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = value / mul & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  this[offset + i] = value & 0xFF;\n\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = value / mul & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n  this[offset] = value & 0xff;\n  return offset + 1;\n};\n\nBuffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n  this[offset] = value & 0xff;\n  this[offset + 1] = value >>> 8;\n  return offset + 2;\n};\n\nBuffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n  this[offset] = value >>> 8;\n  this[offset + 1] = value & 0xff;\n  return offset + 2;\n};\n\nBuffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n  this[offset + 3] = value >>> 24;\n  this[offset + 2] = value >>> 16;\n  this[offset + 1] = value >>> 8;\n  this[offset] = value & 0xff;\n  return offset + 4;\n};\n\nBuffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n  this[offset] = value >>> 24;\n  this[offset + 1] = value >>> 16;\n  this[offset + 2] = value >>> 8;\n  this[offset + 3] = value & 0xff;\n  return offset + 4;\n};\n\nBuffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = 0;\n  var mul = 1;\n  var sub = 0;\n  this[offset] = value & 0xFF;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1;\n    }\n\n    this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  var sub = 0;\n  this[offset + i] = value & 0xFF;\n\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1;\n    }\n\n    this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n  if (value < 0) value = 0xff + value + 1;\n  this[offset] = value & 0xff;\n  return offset + 1;\n};\n\nBuffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n  this[offset] = value & 0xff;\n  this[offset + 1] = value >>> 8;\n  return offset + 2;\n};\n\nBuffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n  this[offset] = value >>> 8;\n  this[offset + 1] = value & 0xff;\n  return offset + 2;\n};\n\nBuffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  this[offset] = value & 0xff;\n  this[offset + 1] = value >>> 8;\n  this[offset + 2] = value >>> 16;\n  this[offset + 3] = value >>> 24;\n  return offset + 4;\n};\n\nBuffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (value < 0) value = 0xffffffff + value + 1;\n  this[offset] = value >>> 24;\n  this[offset + 1] = value >>> 16;\n  this[offset + 2] = value >>> 8;\n  this[offset + 3] = value & 0xff;\n  return offset + 4;\n};\n\nfunction checkIEEE754(buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range');\n  if (offset < 0) throw new RangeError('Index out of range');\n}\n\nfunction writeFloat(buf, value, offset, littleEndian, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);\n  }\n\n  ieee754.write(buf, value, offset, littleEndian, 23, 4);\n  return offset + 4;\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert);\n};\n\nBuffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert);\n};\n\nfunction writeDouble(buf, value, offset, littleEndian, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);\n  }\n\n  ieee754.write(buf, value, offset, littleEndian, 52, 8);\n  return offset + 8;\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert);\n};\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert);\n}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\n\nBuffer.prototype.copy = function copy(target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');\n  if (!start) start = 0;\n  if (!end && end !== 0) end = this.length;\n  if (targetStart >= target.length) targetStart = target.length;\n  if (!targetStart) targetStart = 0;\n  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done\n\n  if (end === start) return 0;\n  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions\n\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds');\n  }\n\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range');\n  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?\n\n  if (end > this.length) end = this.length;\n\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start;\n  }\n\n  var len = end - start;\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end);\n  } else {\n    Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);\n  }\n\n  return len;\n}; // Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\n\n\nBuffer.prototype.fill = function fill(val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start;\n      start = 0;\n      end = this.length;\n    } else if (typeof end === 'string') {\n      encoding = end;\n      end = this.length;\n    }\n\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string');\n    }\n\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding);\n    }\n\n    if (val.length === 1) {\n      var code = val.charCodeAt(0);\n\n      if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code;\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255;\n  } else if (typeof val === 'boolean') {\n    val = Number(val);\n  } // Invalid ranges are not set to a default, so can range check early.\n\n\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index');\n  }\n\n  if (end <= start) {\n    return this;\n  }\n\n  start = start >>> 0;\n  end = end === undefined ? this.length : end >>> 0;\n  if (!val) val = 0;\n  var i;\n\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val;\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);\n    var len = bytes.length;\n\n    if (len === 0) {\n      throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n    }\n\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len];\n    }\n  }\n\n  return this;\n}; // HELPER FUNCTIONS\n// ================\n\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n\nfunction base64clean(str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]; // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n\n  str = str.trim().replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''\n\n  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\n  while (str.length % 4 !== 0) {\n    str = str + '=';\n  }\n\n  return str;\n}\n\nfunction utf8ToBytes(string, units) {\n  units = units || Infinity;\n  var codePoint;\n  var length = string.length;\n  var leadSurrogate = null;\n  var bytes = [];\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i); // is surrogate component\n\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue;\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue;\n        } // valid lead\n\n\n        leadSurrogate = codePoint;\n        continue;\n      } // 2 leads in a row\n\n\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        leadSurrogate = codePoint;\n        continue;\n      } // valid surrogate pair\n\n\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n    }\n\n    leadSurrogate = null; // encode utf8\n\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break;\n      bytes.push(codePoint);\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break;\n      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break;\n      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break;\n      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n    } else {\n      throw new Error('Invalid code point');\n    }\n  }\n\n  return bytes;\n}\n\nfunction asciiToBytes(str) {\n  var byteArray = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF);\n  }\n\n  return byteArray;\n}\n\nfunction utf16leToBytes(str, units) {\n  var c, hi, lo;\n  var byteArray = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break;\n    c = str.charCodeAt(i);\n    hi = c >> 8;\n    lo = c % 256;\n    byteArray.push(lo);\n    byteArray.push(hi);\n  }\n\n  return byteArray;\n}\n\nfunction base64ToBytes(str) {\n  return base64.toByteArray(base64clean(str));\n}\n\nfunction blitBuffer(src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if (i + offset >= dst.length || i >= src.length) break;\n    dst[i + offset] = src[i];\n  }\n\n  return i;\n} // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\n\n\nfunction isInstance(obj, type) {\n  return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n}\n\nfunction numberIsNaN(obj) {\n  // For IE11 support\n  return obj !== obj; // eslint-disable-line no-self-compare\n} // Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\n\n\nvar hexSliceLookupTable = function () {\n  var alphabet = '0123456789abcdef';\n  var table = new Array(256);\n\n  for (var i = 0; i < 16; ++i) {\n    var i16 = i * 16;\n\n    for (var j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j];\n    }\n  }\n\n  return table;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFFQTs7QUFFQSxJQUFJQSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsOERBQUQsQ0FBcEI7O0FBQ0EsSUFBSUMsT0FBTyxHQUFHRCxtQkFBTyxDQUFDLDBEQUFELENBQXJCOztBQUNBLElBQUlFLG1CQUFtQixHQUNwQixPQUFPQyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDLE9BQU9BLE1BQU0sQ0FBQyxLQUFELENBQWIsS0FBeUIsVUFBMUQsQ0FBc0U7QUFBdEUsRUFDSUEsTUFBTSxDQUFDLEtBQUQsQ0FBTixDQUFjLDRCQUFkLENBREosQ0FDZ0Q7QUFEaEQsRUFFSSxJQUhOO0FBS0FDLGNBQUEsR0FBaUJDLE1BQWpCO0FBQ0FELGtCQUFBLEdBQXFCRSxVQUFyQjtBQUNBRix5QkFBQSxHQUE0QixFQUE1QjtBQUVBLElBQUlJLFlBQVksR0FBRyxVQUFuQjtBQUNBSixrQkFBQSxHQUFxQkksWUFBckI7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBSCxNQUFNLENBQUNLLG1CQUFQLEdBQTZCQyxpQkFBaUIsRUFBOUM7O0FBRUEsSUFBSSxDQUFDTixNQUFNLENBQUNLLG1CQUFSLElBQStCLE9BQU9FLE9BQVAsS0FBbUIsV0FBbEQsSUFDQSxPQUFPQSxPQUFPLENBQUNDLEtBQWYsS0FBeUIsVUFEN0IsRUFDeUM7QUFDdkNELEVBQUFBLE9BQU8sQ0FBQ0MsS0FBUixDQUNFLDhFQUNBLHNFQUZGO0FBSUQ7O0FBRUQsU0FBU0YsaUJBQVQsR0FBOEI7QUFDNUI7QUFDQSxNQUFJO0FBQ0YsUUFBSUcsR0FBRyxHQUFHLElBQUlDLFVBQUosQ0FBZSxDQUFmLENBQVY7QUFDQSxRQUFJQyxLQUFLLEdBQUc7QUFBRUMsTUFBQUEsR0FB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cEIsQyxDQUVEO0FBQ0E7OztBQUNBLElBQUl5RyxtQkFBbUIsR0FBSSxZQUFZO0FBQ3JDLE1BQUlxRixRQUFRLEdBQUcsa0JBQWY7QUFDQSxNQUFJQyxLQUFLLEdBQUcsSUFBSTNMLEtBQUosQ0FBVSxHQUFWLENBQVo7O0FBQ0EsT0FBSyxJQUFJUCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEVBQXBCLEVBQXdCLEVBQUVBLENBQTFCLEVBQTZCO0FBQzNCLFFBQUltTSxHQUFHLEdBQUduTSxDQUFDLEdBQUcsRUFBZDs7QUFDQSxTQUFLLElBQUl3RSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEVBQXBCLEVBQXdCLEVBQUVBLENBQTFCLEVBQTZCO0FBQzNCMEgsTUFBQUEsS0FBSyxDQUFDQyxHQUFHLEdBQUczSCxDQUFQLENBQUwsR0FBaUJ5SCxRQUFRLENBQUNqTSxDQUFELENBQVIsR0FBY2lNLFFBQVEsQ0FBQ3pILENBQUQsQ0FBdkM7QUFDRDtBQUNGOztBQUNELFNBQU8wSCxLQUFQO0FBQ0QsQ0FWeUIsRUFBMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AY29tcGV0ZW5jZWZyYW1ld29yay9kZXZvcHMtd2lraS12YWxpZGF0ZS10YW1wZXJtb25rZXkvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcz80NjRhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBjdXN0b21JbnNwZWN0U3ltYm9sID1cbiAgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbFsnZm9yJ10gPT09ICdmdW5jdGlvbicpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgPyBTeW1ib2xbJ2ZvciddKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgOiBudWxsXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxudmFyIEtfTUFYX0xFTkdUSCA9IDB4N2ZmZmZmZmZcbmV4cG9ydHMua01heExlbmd0aCA9IEtfTUFYX0xFTkdUSFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBQcmludCB3YXJuaW5nIGFuZCByZWNvbW1lbmQgdXNpbmcgYGJ1ZmZlcmAgdjQueCB3aGljaCBoYXMgYW4gT2JqZWN0XG4gKiAgICAgICAgICAgICAgIGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBXZSByZXBvcnQgdGhhdCB0aGUgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBpZiB0aGUgYXJlIG5vdCBzdWJjbGFzc2FibGVcbiAqIHVzaW5nIF9fcHJvdG9fXy4gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWBcbiAqIChTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOCkuIElFIDEwIGxhY2tzIHN1cHBvcnRcbiAqIGZvciBfX3Byb3RvX18gYW5kIGhhcyBhIGJ1Z2d5IHR5cGVkIGFycmF5IGltcGxlbWVudGF0aW9uLlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICBjb25zb2xlLmVycm9yKFxuICAgICdUaGlzIGJyb3dzZXIgbGFja3MgdHlwZWQgYXJyYXkgKFVpbnQ4QXJyYXkpIHN1cHBvcnQgd2hpY2ggaXMgcmVxdWlyZWQgYnkgJyArXG4gICAgJ2BidWZmZXJgIHY1LnguIFVzZSBgYnVmZmVyYCB2NC54IGlmIHlvdSByZXF1aXJlIG9sZCBicm93c2VyIHN1cHBvcnQuJ1xuICApXG59XG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgLy8gQ2FuIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkP1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIHZhciBwcm90byA9IHsgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9IH1cbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YocHJvdG8sIFVpbnQ4QXJyYXkucHJvdG90eXBlKVxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihhcnIsIHByb3RvKVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLnByb3RvdHlwZSwgJ3BhcmVudCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGhpcykpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5idWZmZXJcbiAgfVxufSlcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlci5wcm90b3R5cGUsICdvZmZzZXQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHRoaXMpKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXMuYnl0ZU9mZnNldFxuICB9XG59KVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAobGVuZ3RoID4gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyBsZW5ndGggKyAnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwic2l6ZVwiJylcbiAgfVxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICB2YXIgYnVmID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoYnVmLCBCdWZmZXIucHJvdG90eXBlKVxuICByZXR1cm4gYnVmXG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ1RoZSBcInN0cmluZ1wiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBzdHJpbmcuIFJlY2VpdmVkIHR5cGUgbnVtYmVyJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUoYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuZnVuY3Rpb24gZnJvbSAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5Vmlldyh2YWx1ZSlcbiAgfVxuXG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCAnICtcbiAgICAgICdvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB2YWx1ZSlcbiAgICApXG4gIH1cblxuICBpZiAoaXNJbnN0YW5jZSh2YWx1ZSwgQXJyYXlCdWZmZXIpIHx8XG4gICAgICAodmFsdWUgJiYgaXNJbnN0YW5jZSh2YWx1ZS5idWZmZXIsIEFycmF5QnVmZmVyKSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgKGlzSW5zdGFuY2UodmFsdWUsIFNoYXJlZEFycmF5QnVmZmVyKSB8fFxuICAgICAgKHZhbHVlICYmIGlzSW5zdGFuY2UodmFsdWUuYnVmZmVyLCBTaGFyZWRBcnJheUJ1ZmZlcikpKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG9mIHR5cGUgbnVtYmVyLiBSZWNlaXZlZCB0eXBlIG51bWJlcidcbiAgICApXG4gIH1cblxuICB2YXIgdmFsdWVPZiA9IHZhbHVlLnZhbHVlT2YgJiYgdmFsdWUudmFsdWVPZigpXG4gIGlmICh2YWx1ZU9mICE9IG51bGwgJiYgdmFsdWVPZiAhPT0gdmFsdWUpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWVPZiwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgdmFyIGIgPSBmcm9tT2JqZWN0KHZhbHVlKVxuICBpZiAoYikgcmV0dXJuIGJcblxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvUHJpbWl0aXZlICE9IG51bGwgJiZcbiAgICAgIHR5cGVvZiB2YWx1ZVtTeW1ib2wudG9QcmltaXRpdmVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKFxuICAgICAgdmFsdWVbU3ltYm9sLnRvUHJpbWl0aXZlXSgnc3RyaW5nJyksIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aFxuICAgIClcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksICcgK1xuICAgICdvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB2YWx1ZSlcbiAgKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIE5vdGU6IENoYW5nZSBwcm90b3R5cGUgKmFmdGVyKiBCdWZmZXIuZnJvbSBpcyBkZWZpbmVkIHRvIHdvcmthcm91bmQgQ2hyb21lIGJ1Zzpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvMTQ4XG5PYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyLnByb3RvdHlwZSwgVWludDhBcnJheS5wcm90b3R5cGUpXG5PYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyLCBVaW50OEFycmF5KVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInICsgc2l6ZSArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcihzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIoc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAoc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdmFyIGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IGJ1Zi53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgYnVmID0gYnVmLnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAoYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIGJ1ZltpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlWaWV3IChhcnJheVZpZXcpIHtcbiAgaWYgKGlzSW5zdGFuY2UoYXJyYXlWaWV3LCBVaW50OEFycmF5KSkge1xuICAgIHZhciBjb3B5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlWaWV3KVxuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIoY29weS5idWZmZXIsIGNvcHkuYnl0ZU9mZnNldCwgY29weS5ieXRlTGVuZ3RoKVxuICB9XG4gIHJldHVybiBmcm9tQXJyYXlMaWtlKGFycmF5Vmlldylcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyIChhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcIm9mZnNldFwiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wibGVuZ3RoXCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIHZhciBidWZcbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihidWYsIEJ1ZmZlci5wcm90b3R5cGUpXG5cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0IChvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdmFyIGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW4pXG5cbiAgICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGJ1ZlxuICAgIH1cblxuICAgIG9iai5jb3B5KGJ1ZiwgMCwgMCwgbGVuKVxuICAgIHJldHVybiBidWZcbiAgfVxuXG4gIGlmIChvYmoubGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IG51bWJlcklzTmFOKG9iai5sZW5ndGgpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKDApXG4gICAgfVxuICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKG9iailcbiAgfVxuXG4gIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgQXJyYXkuaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5TGlrZShvYmouZGF0YSlcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwgS19NQVhfTEVOR1RIYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IEtfTUFYX0xFTkdUSCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBLX01BWF9MRU5HVEgudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiBiICE9IG51bGwgJiYgYi5faXNCdWZmZXIgPT09IHRydWUgJiZcbiAgICBiICE9PSBCdWZmZXIucHJvdG90eXBlIC8vIHNvIEJ1ZmZlci5pc0J1ZmZlcihCdWZmZXIucHJvdG90eXBlKSB3aWxsIGJlIGZhbHNlXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoaXNJbnN0YW5jZShhLCBVaW50OEFycmF5KSkgYSA9IEJ1ZmZlci5mcm9tKGEsIGEub2Zmc2V0LCBhLmJ5dGVMZW5ndGgpXG4gIGlmIChpc0luc3RhbmNlKGIsIFVpbnQ4QXJyYXkpKSBiID0gQnVmZmVyLmZyb20oYiwgYi5vZmZzZXQsIGIuYnl0ZUxlbmd0aClcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwiYnVmMVwiLCBcImJ1ZjJcIiBhcmd1bWVudHMgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheSdcbiAgICApXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoaXNJbnN0YW5jZShidWYsIFVpbnQ4QXJyYXkpKSB7XG4gICAgICBpZiAocG9zICsgYnVmLmxlbmd0aCA+IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgQnVmZmVyLmZyb20oYnVmKS5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICAgICAgYnVmZmVyLFxuICAgICAgICAgIGJ1ZixcbiAgICAgICAgICBwb3NcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICB9XG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgaXNJbnN0YW5jZShzdHJpbmcsIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwic3RyaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgb3IgQXJyYXlCdWZmZXIuICcgK1xuICAgICAgJ1JlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBzdHJpbmdcbiAgICApXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbXVzdE1hdGNoID0gKGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSA9PT0gdHJ1ZSlcbiAgaWYgKCFtdXN0TWF0Y2ggJiYgbGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB7XG4gICAgICAgICAgcmV0dXJuIG11c3RNYXRjaCA/IC0xIDogdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgfVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJjaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoaXMgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCAoYW5kIHRoZSBgaXMtYnVmZmVyYCBucG0gcGFja2FnZSlcbi8vIHRvIGRldGVjdCBhIEJ1ZmZlciBpbnN0YW5jZS4gSXQncyBub3QgcG9zc2libGUgdG8gdXNlIGBpbnN0YW5jZW9mIEJ1ZmZlcmBcbi8vIHJlbGlhYmx5IGluIGEgYnJvd3NlcmlmeSBjb250ZXh0IGJlY2F1c2UgdGhlcmUgY291bGQgYmUgbXVsdGlwbGUgZGlmZmVyZW50XG4vLyBjb3BpZXMgb2YgdGhlICdidWZmZXInIHBhY2thZ2UgaW4gdXNlLiBUaGlzIG1ldGhvZCB3b3JrcyBldmVuIGZvciBCdWZmZXJcbi8vIGluc3RhbmNlcyB0aGF0IHdlcmUgY3JlYXRlZCBmcm9tIGFub3RoZXIgY29weSBvZiB0aGUgYGJ1ZmZlcmAgcGFja2FnZS5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzE1NFxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0xvY2FsZVN0cmluZyA9IEJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmdcblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5yZXBsYWNlKC8oLnsyfSkvZywgJyQxICcpLnRyaW0oKVxuICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5pZiAoY3VzdG9tSW5zcGVjdFN5bWJvbCkge1xuICBCdWZmZXIucHJvdG90eXBlW2N1c3RvbUluc3BlY3RTeW1ib2xdID0gQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmIChpc0luc3RhbmNlKHRhcmdldCwgVWludDhBcnJheSkpIHtcbiAgICB0YXJnZXQgPSBCdWZmZXIuZnJvbSh0YXJnZXQsIHRhcmdldC5vZmZzZXQsIHRhcmdldC5ieXRlTGVuZ3RoKVxuICB9XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInRhcmdldFwiIGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgQnVmZmVyIG9yIFVpbnQ4QXJyYXkuICcgK1xuICAgICAgJ1JlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdGFyZ2V0KVxuICAgIClcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKG51bWJlcklzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgW3ZhbF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChudW1iZXJJc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoID4+PiAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICB2YXIgcmVzID0gW11cblxuICB2YXIgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRilcbiAgICAgID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERilcbiAgICAgICAgICA/IDNcbiAgICAgICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKVxuICAgICAgICAgICAgICA/IDJcbiAgICAgICAgICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIHZhciByZXMgPSAnJ1xuICB2YXIgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IGhleFNsaWNlTG9va3VwVGFibGVbYnVmW2ldXVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICAvLyBJZiBieXRlcy5sZW5ndGggaXMgb2RkLCB0aGUgbGFzdCA4IGJpdHMgbXVzdCBiZSBpZ25vcmVkIChzYW1lIGFzIG5vZGUuanMpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoIC0gMTsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyAoYnl0ZXNbaSArIDFdICogMjU2KSlcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YobmV3QnVmLCBCdWZmZXIucHJvdG90eXBlKVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnRMRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludEJFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQ4ID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQxNkxFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDE2QkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50MzJMRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQzMkJFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnRMRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnRCRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQ4ID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDE2TEUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQxNkJFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MzJMRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDMyQkUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgKDggKiBieXRlTGVuZ3RoKSAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IHNob3VsZCBiZSBhIEJ1ZmZlcicpXG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gVXNlIGJ1aWx0LWluIHdoZW4gYXZhaWxhYmxlLCBtaXNzaW5nIGZyb20gSUUxMVxuICAgIHRoaXMuY29weVdpdGhpbih0YXJnZXRTdGFydCwgc3RhcnQsIGVuZClcbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZCksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoKGVuY29kaW5nID09PSAndXRmOCcgJiYgY29kZSA8IDEyOCkgfHxcbiAgICAgICAgICBlbmNvZGluZyA9PT0gJ2xhdGluMScpIHtcbiAgICAgICAgLy8gRmFzdCBwYXRoOiBJZiBgdmFsYCBmaXRzIGludG8gYSBzaW5nbGUgYnl0ZSwgdXNlIHRoYXQgbnVtZXJpYyB2YWx1ZS5cbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdib29sZWFuJykge1xuICAgIHZhbCA9IE51bWJlcih2YWwpXG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIHZhbHVlIFwiJyArIHZhbCArXG4gICAgICAgICdcIiBpcyBpbnZhbGlkIGZvciBhcmd1bWVudCBcInZhbHVlXCInKVxuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXisvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHRha2VzIGVxdWFsIHNpZ25zIGFzIGVuZCBvZiB0aGUgQmFzZTY0IGVuY29kaW5nXG4gIHN0ciA9IHN0ci5zcGxpdCgnPScpWzBdXG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHIudHJpbSgpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbi8vIEFycmF5QnVmZmVyIG9yIFVpbnQ4QXJyYXkgb2JqZWN0cyBmcm9tIG90aGVyIGNvbnRleHRzIChpLmUuIGlmcmFtZXMpIGRvIG5vdCBwYXNzXG4vLyB0aGUgYGluc3RhbmNlb2ZgIGNoZWNrIGJ1dCB0aGV5IHNob3VsZCBiZSB0cmVhdGVkIGFzIG9mIHRoYXQgdHlwZS5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzE2NlxuZnVuY3Rpb24gaXNJbnN0YW5jZSAob2JqLCB0eXBlKSB7XG4gIHJldHVybiBvYmogaW5zdGFuY2VvZiB0eXBlIHx8XG4gICAgKG9iaiAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3RvciAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3Rvci5uYW1lICE9IG51bGwgJiZcbiAgICAgIG9iai5jb25zdHJ1Y3Rvci5uYW1lID09PSB0eXBlLm5hbWUpXG59XG5mdW5jdGlvbiBudW1iZXJJc05hTiAob2JqKSB7XG4gIC8vIEZvciBJRTExIHN1cHBvcnRcbiAgcmV0dXJuIG9iaiAhPT0gb2JqIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG5cbi8vIENyZWF0ZSBsb29rdXAgdGFibGUgZm9yIGB0b1N0cmluZygnaGV4JylgXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8yMTlcbnZhciBoZXhTbGljZUxvb2t1cFRhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFscGhhYmV0ID0gJzAxMjM0NTY3ODlhYmNkZWYnXG4gIHZhciB0YWJsZSA9IG5ldyBBcnJheSgyNTYpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgIHZhciBpMTYgPSBpICogMTZcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IDE2OyArK2opIHtcbiAgICAgIHRhYmxlW2kxNiArIGpdID0gYWxwaGFiZXRbaV0gKyBhbHBoYWJldFtqXVxuICAgIH1cbiAgfVxuICByZXR1cm4gdGFibGVcbn0pKClcbiJdLCJuYW1lcyI6WyJiYXNlNjQiLCJyZXF1aXJlIiwiaWVlZTc1NCIsImN1c3RvbUluc3BlY3RTeW1ib2wiLCJTeW1ib2wiLCJleHBvcnRzIiwiQnVmZmVyIiwiU2xvd0J1ZmZlciIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiS19NQVhfTEVOR1RIIiwia01heExlbmd0aCIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJ0eXBlZEFycmF5U3VwcG9ydCIsImNvbnNvbGUiLCJlcnJvciIsImFyciIsIlVpbnQ4QXJyYXkiLCJwcm90byIsImZvbyIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwiZSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImlzQnVmZmVyIiwidW5kZWZpbmVkIiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsImNyZWF0ZUJ1ZmZlciIsImxlbmd0aCIsIlJhbmdlRXJyb3IiLCJidWYiLCJhcmciLCJlbmNvZGluZ09yT2Zmc2V0IiwiVHlwZUVycm9yIiwiYWxsb2NVbnNhZmUiLCJmcm9tIiwicG9vbFNpemUiLCJ2YWx1ZSIsImZyb21TdHJpbmciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImZyb21BcnJheVZpZXciLCJpc0luc3RhbmNlIiwiZnJvbUFycmF5QnVmZmVyIiwiU2hhcmVkQXJyYXlCdWZmZXIiLCJ2YWx1ZU9mIiwiYiIsImZyb21PYmplY3QiLCJ0b1ByaW1pdGl2ZSIsImFzc2VydFNpemUiLCJzaXplIiwiYWxsb2MiLCJmaWxsIiwiZW5jb2RpbmciLCJjaGVja2VkIiwiYWxsb2NVbnNhZmVTbG93Iiwic3RyaW5nIiwiaXNFbmNvZGluZyIsImJ5dGVMZW5ndGgiLCJhY3R1YWwiLCJ3cml0ZSIsInNsaWNlIiwiZnJvbUFycmF5TGlrZSIsImFycmF5IiwiaSIsImFycmF5VmlldyIsImNvcHkiLCJvYmoiLCJsZW4iLCJudW1iZXJJc05hTiIsInR5cGUiLCJBcnJheSIsImlzQXJyYXkiLCJkYXRhIiwidG9TdHJpbmciLCJfaXNCdWZmZXIiLCJjb21wYXJlIiwiYSIsIm9mZnNldCIsIngiLCJ5IiwiTWF0aCIsIm1pbiIsIlN0cmluZyIsInRvTG93ZXJDYXNlIiwiY29uY2F0IiwibGlzdCIsInBvcyIsInNldCIsImNhbGwiLCJtdXN0TWF0Y2giLCJhcmd1bWVudHMiLCJsb3dlcmVkQ2FzZSIsInV0ZjhUb0J5dGVzIiwiYmFzZTY0VG9CeXRlcyIsInNsb3dUb1N0cmluZyIsInN0YXJ0IiwiZW5kIiwiaGV4U2xpY2UiLCJ1dGY4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJiYXNlNjRTbGljZSIsInV0ZjE2bGVTbGljZSIsInN3YXAiLCJuIiwibSIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImFwcGx5IiwidG9Mb2NhbGVTdHJpbmciLCJlcXVhbHMiLCJpbnNwZWN0Iiwic3RyIiwibWF4IiwicmVwbGFjZSIsInRyaW0iLCJ0YXJnZXQiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJ2YWwiLCJkaXIiLCJhcnJheUluZGV4T2YiLCJpbmRleE9mIiwibGFzdEluZGV4T2YiLCJpbmRleFNpemUiLCJhcnJMZW5ndGgiLCJ2YWxMZW5ndGgiLCJyZWFkIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaiIsImluY2x1ZGVzIiwiaGV4V3JpdGUiLCJOdW1iZXIiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJwYXJzZUludCIsInN1YnN0ciIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwiYXNjaWlUb0J5dGVzIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1dGYxNmxlVG9CeXRlcyIsImlzRmluaXRlIiwiRXJyb3IiLCJ0b0pTT04iLCJfYXJyIiwiZnJvbUJ5dGVBcnJheSIsInJlcyIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJwdXNoIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiTUFYX0FSR1VNRU5UU19MRU5HVEgiLCJjb2RlUG9pbnRzIiwiZnJvbUNoYXJDb2RlIiwicmV0Iiwib3V0IiwiaGV4U2xpY2VMb29rdXBUYWJsZSIsImJ5dGVzIiwibmV3QnVmIiwic3ViYXJyYXkiLCJjaGVja09mZnNldCIsImV4dCIsInJlYWRVaW50TEUiLCJyZWFkVUludExFIiwibm9Bc3NlcnQiLCJtdWwiLCJyZWFkVWludEJFIiwicmVhZFVJbnRCRSIsInJlYWRVaW50OCIsInJlYWRVSW50OCIsInJlYWRVaW50MTZMRSIsInJlYWRVSW50MTZMRSIsInJlYWRVaW50MTZCRSIsInJlYWRVaW50MzJMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVaW50MzJCRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnRMRSIsInBvdyIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwiY2hlY2tJbnQiLCJ3cml0ZVVpbnRMRSIsIndyaXRlVUludExFIiwibWF4Qnl0ZXMiLCJ3cml0ZVVpbnRCRSIsIndyaXRlVUludEJFIiwid3JpdGVVaW50OCIsIndyaXRlVUludDgiLCJ3cml0ZVVpbnQxNkxFIiwid3JpdGVVSW50MTZMRSIsIndyaXRlVWludDE2QkUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVaW50MzJMRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVpbnQzMkJFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50TEUiLCJsaW1pdCIsInN1YiIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0IiwibGl0dGxlRW5kaWFuIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsInRhcmdldFN0YXJ0IiwiY29weVdpdGhpbiIsImNvZGUiLCJjaGFyQ29kZUF0IiwiSU5WQUxJRF9CQVNFNjRfUkUiLCJiYXNlNjRjbGVhbiIsInNwbGl0IiwidW5pdHMiLCJJbmZpbml0eSIsImxlYWRTdXJyb2dhdGUiLCJieXRlQXJyYXkiLCJjIiwiaGkiLCJsbyIsInRvQnl0ZUFycmF5Iiwic3JjIiwiZHN0IiwiY29uc3RydWN0b3IiLCJuYW1lIiwiYWxwaGFiZXQiLCJ0YWJsZSIsImkxNiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../../../node_modules/buffer/index.js\n");

/***/ }),

/***/ "../../../../node_modules/ieee754/index.js":
/*!*************************************************!*\
  !*** ../../../../node_modules/ieee754/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = -7;\n  var i = isLE ? nBytes - 1 : 0;\n  var d = isLE ? -1 : 1;\n  var s = buffer[offset + i];\n  i += d;\n  e = s & (1 << -nBits) - 1;\n  s >>= -nBits;\n  nBits += eLen;\n\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : (s ? -1 : 1) * Infinity;\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n  var i = isLE ? 0 : nBytes - 1;\n  var d = isLE ? 1 : -1;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = e << mLen | m;\n  eLen += mLen;\n\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../../node_modules/ieee754/index.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;