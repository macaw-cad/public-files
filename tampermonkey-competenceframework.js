// ==UserScript==
// @name        competenceframework-devops-wiki-validate-tampermonkey
// @namespace   https://macaw.nl/
// @version     1.0.3
// @author
// @source      https://github.com/Trim21/webpack-userscript-template
// @match       https://dev.azure.com/MacawCompetenceTeams/*
// @run-at      document-end
// ==/UserScript==


/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/ajv/lib/ajv.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var compileSchema = __webpack_require__("./node_modules/ajv/lib/compile/index.js"),
    resolve = __webpack_require__("./node_modules/ajv/lib/compile/resolve.js"),
    Cache = __webpack_require__("./node_modules/ajv/lib/cache.js"),
    SchemaObject = __webpack_require__("./node_modules/ajv/lib/compile/schema_obj.js"),
    stableStringify = __webpack_require__("./node_modules/fast-json-stable-stringify/index.js"),
    formats = __webpack_require__("./node_modules/ajv/lib/compile/formats.js"),
    rules = __webpack_require__("./node_modules/ajv/lib/compile/rules.js"),
    $dataMetaSchema = __webpack_require__("./node_modules/ajv/lib/data.js"),
    util = __webpack_require__("./node_modules/ajv/lib/compile/util.js");

module.exports = Ajv;
Ajv.prototype.validate = validate;
Ajv.prototype.compile = compile;
Ajv.prototype.addSchema = addSchema;
Ajv.prototype.addMetaSchema = addMetaSchema;
Ajv.prototype.validateSchema = validateSchema;
Ajv.prototype.getSchema = getSchema;
Ajv.prototype.removeSchema = removeSchema;
Ajv.prototype.addFormat = addFormat;
Ajv.prototype.errorsText = errorsText;
Ajv.prototype._addSchema = _addSchema;
Ajv.prototype._compile = _compile;
Ajv.prototype.compileAsync = __webpack_require__("./node_modules/ajv/lib/compile/async.js");

var customKeyword = __webpack_require__("./node_modules/ajv/lib/keyword.js");

Ajv.prototype.addKeyword = customKeyword.add;
Ajv.prototype.getKeyword = customKeyword.get;
Ajv.prototype.removeKeyword = customKeyword.remove;
Ajv.prototype.validateKeyword = customKeyword.validate;

var errorClasses = __webpack_require__("./node_modules/ajv/lib/compile/error_classes.js");

Ajv.ValidationError = errorClasses.Validation;
Ajv.MissingRefError = errorClasses.MissingRef;
Ajv.$dataMetaSchema = $dataMetaSchema;
var META_SCHEMA_ID = 'http://json-schema.org/draft-07/schema';
var META_IGNORE_OPTIONS = ['removeAdditional', 'useDefaults', 'coerceTypes', 'strictDefaults'];
var META_SUPPORT_DATA = ['/properties'];
/**
 * Creates validator instance.
 * Usage: `Ajv(opts)`
 * @param {Object} opts optional options
 * @return {Object} ajv instance
 */

function Ajv(opts) {
  if (!(this instanceof Ajv)) return new Ajv(opts);
  opts = this._opts = util.copy(opts) || {};
  setLogger(this);
  this._schemas = {};
  this._refs = {};
  this._fragments = {};
  this._formats = formats(opts.format);
  this._cache = opts.cache || new Cache();
  this._loadingSchemas = {};
  this._compilations = [];
  this.RULES = rules();
  this._getId = chooseGetId(opts);
  opts.loopRequired = opts.loopRequired || Infinity;
  if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;
  if (opts.serialize === undefined) opts.serialize = stableStringify;
  this._metaOpts = getMetaSchemaOptions(this);
  if (opts.formats) addInitialFormats(this);
  if (opts.keywords) addInitialKeywords(this);
  addDefaultMetaSchema(this);
  if (typeof opts.meta == 'object') this.addMetaSchema(opts.meta);
  if (opts.nullable) this.addKeyword('nullable', {
    metaSchema: {
      type: 'boolean'
    }
  });
  addInitialSchemas(this);
}
/**
 * Validate data using schema
 * Schema will be compiled and cached (using serialized JSON as key. [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify) is used to serialize.
 * @this   Ajv
 * @param  {String|Object} schemaKeyRef key, ref or schema object
 * @param  {Any} data to be validated
 * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).
 */


function validate(schemaKeyRef, data) {
  var v;

  if (typeof schemaKeyRef == 'string') {
    v = this.getSchema(schemaKeyRef);
    if (!v) throw new Error('no schema with key or ref "' + schemaKeyRef + '"');
  } else {
    var schemaObj = this._addSchema(schemaKeyRef);

    v = schemaObj.validate || this._compile(schemaObj);
  }

  var valid = v(data);
  if (v.$async !== true) this.errors = v.errors;
  return valid;
}
/**
 * Create validating function for passed schema.
 * @this   Ajv
 * @param  {Object} schema schema object
 * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.
 * @return {Function} validating function
 */


function compile(schema, _meta) {
  var schemaObj = this._addSchema(schema, undefined, _meta);

  return schemaObj.validate || this._compile(schemaObj);
}
/**
 * Adds schema to the instance.
 * @this   Ajv
 * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.
 * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
 * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.
 * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
 * @return {Ajv} this for method chaining
 */


function addSchema(schema, key, _skipValidation, _meta) {
  if (Array.isArray(schema)) {
    for (var i = 0; i < schema.length; i++) this.addSchema(schema[i], undefined, _skipValidation, _meta);

    return this;
  }

  var id = this._getId(schema);

  if (id !== undefined && typeof id != 'string') throw new Error('schema id must be string');
  key = resolve.normalizeId(key || id);
  checkUnique(this, key);
  this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);
  return this;
}
/**
 * Add schema that will be used to validate other schemas
 * options in META_IGNORE_OPTIONS are alway set to false
 * @this   Ajv
 * @param {Object} schema schema object
 * @param {String} key optional schema key
 * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema
 * @return {Ajv} this for method chaining
 */


function addMetaSchema(schema, key, skipValidation) {
  this.addSchema(schema, key, skipValidation, true);
  return this;
}
/**
 * Validate schema
 * @this   Ajv
 * @param {Object} schema schema to validate
 * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid
 * @return {Boolean} true if schema is valid
 */


function validateSchema(schema, throwOrLogError) {
  var $schema = schema.$schema;
  if ($schema !== undefined && typeof $schema != 'string') throw new Error('$schema must be a string');
  $schema = $schema || this._opts.defaultMeta || defaultMeta(this);

  if (!$schema) {
    this.logger.warn('meta-schema not available');
    this.errors = null;
    return true;
  }

  var valid = this.validate($schema, schema);

  if (!valid && throwOrLogError) {
    var message = 'schema is invalid: ' + this.errorsText();
    if (this._opts.validateSchema == 'log') this.logger.error(message);else throw new Error(message);
  }

  return valid;
}

function defaultMeta(self) {
  var meta = self._opts.meta;
  self._opts.defaultMeta = typeof meta == 'object' ? self._getId(meta) || meta : self.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined;
  return self._opts.defaultMeta;
}
/**
 * Get compiled schema from the instance by `key` or `ref`.
 * @this   Ajv
 * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).
 * @return {Function} schema validating function (with property `schema`).
 */


function getSchema(keyRef) {
  var schemaObj = _getSchemaObj(this, keyRef);

  switch (typeof schemaObj) {
    case 'object':
      return schemaObj.validate || this._compile(schemaObj);

    case 'string':
      return this.getSchema(schemaObj);

    case 'undefined':
      return _getSchemaFragment(this, keyRef);
  }
}

function _getSchemaFragment(self, ref) {
  var res = resolve.schema.call(self, {
    schema: {}
  }, ref);

  if (res) {
    var schema = res.schema,
        root = res.root,
        baseId = res.baseId;
    var v = compileSchema.call(self, schema, root, undefined, baseId);
    self._fragments[ref] = new SchemaObject({
      ref: ref,
      fragment: true,
      schema: schema,
      root: root,
      baseId: baseId,
      validate: v
    });
    return v;
  }
}

function _getSchemaObj(self, keyRef) {
  keyRef = resolve.normalizeId(keyRef);
  return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];
}
/**
 * Remove cached schema(s).
 * If no parameter is passed all schemas but meta-schemas are removed.
 * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
 * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
 * @this   Ajv
 * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object
 * @return {Ajv} this for method chaining
 */


function removeSchema(schemaKeyRef) {
  if (schemaKeyRef instanceof RegExp) {
    _removeAllSchemas(this, this._schemas, schemaKeyRef);

    _removeAllSchemas(this, this._refs, schemaKeyRef);

    return this;
  }

  switch (typeof schemaKeyRef) {
    case 'undefined':
      _removeAllSchemas(this, this._schemas);

      _removeAllSchemas(this, this._refs);

      this._cache.clear();

      return this;

    case 'string':
      var schemaObj = _getSchemaObj(this, schemaKeyRef);

      if (schemaObj) this._cache.del(schemaObj.cacheKey);
      delete this._schemas[schemaKeyRef];
      delete this._refs[schemaKeyRef];
      return this;

    case 'object':
      var serialize = this._opts.serialize;
      var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;

      this._cache.del(cacheKey);

      var id = this._getId(schemaKeyRef);

      if (id) {
        id = resolve.normalizeId(id);
        delete this._schemas[id];
        delete this._refs[id];
      }

  }

  return this;
}

function _removeAllSchemas(self, schemas, regex) {
  for (var keyRef in schemas) {
    var schemaObj = schemas[keyRef];

    if (!schemaObj.meta && (!regex || regex.test(keyRef))) {
      self._cache.del(schemaObj.cacheKey);

      delete schemas[keyRef];
    }
  }
}
/* @this   Ajv */


function _addSchema(schema, skipValidation, meta, shouldAddSchema) {
  if (typeof schema != 'object' && typeof schema != 'boolean') throw new Error('schema should be object or boolean');
  var serialize = this._opts.serialize;
  var cacheKey = serialize ? serialize(schema) : schema;

  var cached = this._cache.get(cacheKey);

  if (cached) return cached;
  shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;
  var id = resolve.normalizeId(this._getId(schema));
  if (id && shouldAddSchema) checkUnique(this, id);
  var willValidate = this._opts.validateSchema !== false && !skipValidation;
  var recursiveMeta;
  if (willValidate && !(recursiveMeta = id && id == resolve.normalizeId(schema.$schema))) this.validateSchema(schema, true);
  var localRefs = resolve.ids.call(this, schema);
  var schemaObj = new SchemaObject({
    id: id,
    schema: schema,
    localRefs: localRefs,
    cacheKey: cacheKey,
    meta: meta
  });
  if (id[0] != '#' && shouldAddSchema) this._refs[id] = schemaObj;

  this._cache.put(cacheKey, schemaObj);

  if (willValidate && recursiveMeta) this.validateSchema(schema, true);
  return schemaObj;
}
/* @this   Ajv */


function _compile(schemaObj, root) {
  if (schemaObj.compiling) {
    schemaObj.validate = callValidate;
    callValidate.schema = schemaObj.schema;
    callValidate.errors = null;
    callValidate.root = root ? root : callValidate;
    if (schemaObj.schema.$async === true) callValidate.$async = true;
    return callValidate;
  }

  schemaObj.compiling = true;
  var currentOpts;

  if (schemaObj.meta) {
    currentOpts = this._opts;
    this._opts = this._metaOpts;
  }

  var v;

  try {
    v = compileSchema.call(this, schemaObj.schema, root, schemaObj.localRefs);
  } catch (e) {
    delete schemaObj.validate;
    throw e;
  } finally {
    schemaObj.compiling = false;
    if (schemaObj.meta) this._opts = currentOpts;
  }

  schemaObj.validate = v;
  schemaObj.refs = v.refs;
  schemaObj.refVal = v.refVal;
  schemaObj.root = v.root;
  return v;
  /* @this   {*} - custom context, see passContext option */

  function callValidate() {
    /* jshint validthis: true */
    var _validate = schemaObj.validate;

    var result = _validate.apply(this, arguments);

    callValidate.errors = _validate.errors;
    return result;
  }
}

function chooseGetId(opts) {
  switch (opts.schemaId) {
    case 'auto':
      return _get$IdOrId;

    case 'id':
      return _getId;

    default:
      return _get$Id;
  }
}
/* @this   Ajv */


function _getId(schema) {
  if (schema.$id) this.logger.warn('schema $id ignored', schema.$id);
  return schema.id;
}
/* @this   Ajv */


function _get$Id(schema) {
  if (schema.id) this.logger.warn('schema id ignored', schema.id);
  return schema.$id;
}

function _get$IdOrId(schema) {
  if (schema.$id && schema.id && schema.$id != schema.id) throw new Error('schema $id is different from id');
  return schema.$id || schema.id;
}
/**
 * Convert array of error message objects to string
 * @this   Ajv
 * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.
 * @param  {Object} options optional options with properties `separator` and `dataVar`.
 * @return {String} human readable string with all errors descriptions
 */


function errorsText(errors, options) {
  errors = errors || this.errors;
  if (!errors) return 'No errors';
  options = options || {};
  var separator = options.separator === undefined ? ', ' : options.separator;
  var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;
  var text = '';

  for (var i = 0; i < errors.length; i++) {
    var e = errors[i];
    if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;
  }

  return text.slice(0, -separator.length);
}
/**
 * Add custom format
 * @this   Ajv
 * @param {String} name format name
 * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)
 * @return {Ajv} this for method chaining
 */


function addFormat(name, format) {
  if (typeof format == 'string') format = new RegExp(format);
  this._formats[name] = format;
  return this;
}

function addDefaultMetaSchema(self) {
  var $dataSchema;

  if (self._opts.$data) {
    $dataSchema = __webpack_require__("./node_modules/ajv/lib/refs/data.json");
    self.addMetaSchema($dataSchema, $dataSchema.$id, true);
  }

  if (self._opts.meta === false) return;

  var metaSchema = __webpack_require__("./node_modules/ajv/lib/refs/json-schema-draft-07.json");

  if (self._opts.$data) metaSchema = $dataMetaSchema(metaSchema, META_SUPPORT_DATA);
  self.addMetaSchema(metaSchema, META_SCHEMA_ID, true);
  self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;
}

function addInitialSchemas(self) {
  var optsSchemas = self._opts.schemas;
  if (!optsSchemas) return;
  if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas);else for (var key in optsSchemas) self.addSchema(optsSchemas[key], key);
}

function addInitialFormats(self) {
  for (var name in self._opts.formats) {
    var format = self._opts.formats[name];
    self.addFormat(name, format);
  }
}

function addInitialKeywords(self) {
  for (var name in self._opts.keywords) {
    var keyword = self._opts.keywords[name];
    self.addKeyword(name, keyword);
  }
}

function checkUnique(self, id) {
  if (self._schemas[id] || self._refs[id]) throw new Error('schema with key or id "' + id + '" already exists');
}

function getMetaSchemaOptions(self) {
  var metaOpts = util.copy(self._opts);

  for (var i = 0; i < META_IGNORE_OPTIONS.length; i++) delete metaOpts[META_IGNORE_OPTIONS[i]];

  return metaOpts;
}

function setLogger(self) {
  var logger = self._opts.logger;

  if (logger === false) {
    self.logger = {
      log: noop,
      warn: noop,
      error: noop
    };
  } else {
    if (logger === undefined) logger = console;
    if (!(typeof logger == 'object' && logger.log && logger.warn && logger.error)) throw new Error('logger must implement log, warn and error methods');
    self.logger = logger;
  }
}

function noop() {}

/***/ }),

/***/ "./node_modules/ajv/lib/cache.js":
/***/ ((module) => {

"use strict";


var Cache = module.exports = function Cache() {
  this._cache = {};
};

Cache.prototype.put = function Cache_put(key, value) {
  this._cache[key] = value;
};

Cache.prototype.get = function Cache_get(key) {
  return this._cache[key];
};

Cache.prototype.del = function Cache_del(key) {
  delete this._cache[key];
};

Cache.prototype.clear = function Cache_clear() {
  this._cache = {};
};

/***/ }),

/***/ "./node_modules/ajv/lib/compile/async.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var MissingRefError = (__webpack_require__("./node_modules/ajv/lib/compile/error_classes.js").MissingRef);

module.exports = compileAsync;
/**
 * Creates validating function for passed schema with asynchronous loading of missing schemas.
 * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.
 * @this  Ajv
 * @param {Object}   schema schema object
 * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped
 * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.
 * @return {Promise} promise that resolves with a validating function.
 */

function compileAsync(schema, meta, callback) {
  /* eslint no-shadow: 0 */

  /* global Promise */

  /* jshint validthis: true */
  var self = this;
  if (typeof this._opts.loadSchema != 'function') throw new Error('options.loadSchema should be a function');

  if (typeof meta == 'function') {
    callback = meta;
    meta = undefined;
  }

  var p = loadMetaSchemaOf(schema).then(function () {
    var schemaObj = self._addSchema(schema, undefined, meta);

    return schemaObj.validate || _compileAsync(schemaObj);
  });

  if (callback) {
    p.then(function (v) {
      callback(null, v);
    }, callback);
  }

  return p;

  function loadMetaSchemaOf(sch) {
    var $schema = sch.$schema;
    return $schema && !self.getSchema($schema) ? compileAsync.call(self, {
      $ref: $schema
    }, true) : Promise.resolve();
  }

  function _compileAsync(schemaObj) {
    try {
      return self._compile(schemaObj);
    } catch (e) {
      if (e instanceof MissingRefError) return loadMissingSchema(e);
      throw e;
    }

    function loadMissingSchema(e) {
      var ref = e.missingSchema;
      if (added(ref)) throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved');
      var schemaPromise = self._loadingSchemas[ref];

      if (!schemaPromise) {
        schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);
        schemaPromise.then(removePromise, removePromise);
      }

      return schemaPromise.then(function (sch) {
        if (!added(ref)) {
          return loadMetaSchemaOf(sch).then(function () {
            if (!added(ref)) self.addSchema(sch, ref, undefined, meta);
          });
        }
      }).then(function () {
        return _compileAsync(schemaObj);
      });

      function removePromise() {
        delete self._loadingSchemas[ref];
      }

      function added(ref) {
        return self._refs[ref] || self._schemas[ref];
      }
    }
  }
}

/***/ }),

/***/ "./node_modules/ajv/lib/compile/error_classes.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var resolve = __webpack_require__("./node_modules/ajv/lib/compile/resolve.js");

module.exports = {
  Validation: errorSubclass(ValidationError),
  MissingRef: errorSubclass(MissingRefError)
};

function ValidationError(errors) {
  this.message = 'validation failed';
  this.errors = errors;
  this.ajv = this.validation = true;
}

MissingRefError.message = function (baseId, ref) {
  return 'can\'t resolve reference ' + ref + ' from id ' + baseId;
};

function MissingRefError(baseId, ref, message) {
  this.message = message || MissingRefError.message(baseId, ref);
  this.missingRef = resolve.url(baseId, ref);
  this.missingSchema = resolve.normalizeId(resolve.fullPath(this.missingRef));
}

function errorSubclass(Subclass) {
  Subclass.prototype = Object.create(Error.prototype);
  Subclass.prototype.constructor = Subclass;
  return Subclass;
}

/***/ }),

/***/ "./node_modules/ajv/lib/compile/formats.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var util = __webpack_require__("./node_modules/ajv/lib/compile/util.js");

var DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
var DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var TIME = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i;
var HOSTNAME = /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i;
var URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
var URIREF = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i; // uri-template: https://tools.ietf.org/html/rfc6570

var URITEMPLATE = /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i; // For the source: https://gist.github.com/dperini/729294
// For test cases: https://mathiasbynens.be/demo/url-regex
// @todo Delete current URL in favour of the commented out URL rule when this issue is fixed https://github.com/eslint/eslint/issues/7983.
// var URL = /^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u{00a1}-\u{ffff}0-9]+-)*[a-z\u{00a1}-\u{ffff}0-9]+)(?:\.(?:[a-z\u{00a1}-\u{ffff}0-9]+-)*[a-z\u{00a1}-\u{ffff}0-9]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu;

var URL = /^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i;
var UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
var JSON_POINTER = /^(?:\/(?:[^~/]|~0|~1)*)*$/;
var JSON_POINTER_URI_FRAGMENT = /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;
var RELATIVE_JSON_POINTER = /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/;
module.exports = formats;

function formats(mode) {
  mode = mode == 'full' ? 'full' : 'fast';
  return util.copy(formats[mode]);
}

formats.fast = {
  // date: http://tools.ietf.org/html/rfc3339#section-5.6
  date: /^\d\d\d\d-[0-1]\d-[0-3]\d$/,
  // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
  time: /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i,
  'date-time': /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i,
  // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
  uri: /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,
  'uri-reference': /^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
  'uri-template': URITEMPLATE,
  url: URL,
  // email (sources from jsen validator):
  // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
  // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')
  email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
  hostname: HOSTNAME,
  // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
  ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
  // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
  ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
  regex: regex,
  // uuid: http://tools.ietf.org/html/rfc4122
  uuid: UUID,
  // JSON-pointer: https://tools.ietf.org/html/rfc6901
  // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
  'json-pointer': JSON_POINTER,
  'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,
  // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
  'relative-json-pointer': RELATIVE_JSON_POINTER
};
formats.full = {
  date: date,
  time: time,
  'date-time': date_time,
  uri: uri,
  'uri-reference': URIREF,
  'uri-template': URITEMPLATE,
  url: URL,
  email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
  hostname: HOSTNAME,
  ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
  ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
  regex: regex,
  uuid: UUID,
  'json-pointer': JSON_POINTER,
  'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,
  'relative-json-pointer': RELATIVE_JSON_POINTER
};

function isLeapYear(year) {
  // https://tools.ietf.org/html/rfc3339#appendix-C
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}

function date(str) {
  // full-date from http://tools.ietf.org/html/rfc3339#section-5.6
  var matches = str.match(DATE);
  if (!matches) return false;
  var year = +matches[1];
  var month = +matches[2];
  var day = +matches[3];
  return month >= 1 && month <= 12 && day >= 1 && day <= (month == 2 && isLeapYear(year) ? 29 : DAYS[month]);
}

function time(str, full) {
  var matches = str.match(TIME);
  if (!matches) return false;
  var hour = matches[1];
  var minute = matches[2];
  var second = matches[3];
  var timeZone = matches[5];
  return (hour <= 23 && minute <= 59 && second <= 59 || hour == 23 && minute == 59 && second == 60) && (!full || timeZone);
}

var DATE_TIME_SEPARATOR = /t|\s/i;

function date_time(str) {
  // http://tools.ietf.org/html/rfc3339#section-5.6
  var dateTime = str.split(DATE_TIME_SEPARATOR);
  return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true);
}

var NOT_URI_FRAGMENT = /\/|:/;

function uri(str) {
  // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required "."
  return NOT_URI_FRAGMENT.test(str) && URI.test(str);
}

var Z_ANCHOR = /[^\\]\\Z/;

function regex(str) {
  if (Z_ANCHOR.test(str)) return false;

  try {
    new RegExp(str);
    return true;
  } catch (e) {
    return false;
  }
}

/***/ }),

/***/ "./node_modules/ajv/lib/compile/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var resolve = __webpack_require__("./node_modules/ajv/lib/compile/resolve.js"),
    util = __webpack_require__("./node_modules/ajv/lib/compile/util.js"),
    errorClasses = __webpack_require__("./node_modules/ajv/lib/compile/error_classes.js"),
    stableStringify = __webpack_require__("./node_modules/fast-json-stable-stringify/index.js");

var validateGenerator = __webpack_require__("./node_modules/ajv/lib/dotjs/validate.js");
/**
 * Functions below are used inside compiled validations function
 */


var ucs2length = util.ucs2length;

var equal = __webpack_require__("./node_modules/fast-deep-equal/index.js"); // this error is thrown by async schemas to return validation errors via exception


var ValidationError = errorClasses.Validation;
module.exports = compile;
/**
 * Compiles schema to validation function
 * @this   Ajv
 * @param  {Object} schema schema object
 * @param  {Object} root object with information about the root schema for this schema
 * @param  {Object} localRefs the hash of local references inside the schema (created by resolve.id), used for inline resolution
 * @param  {String} baseId base ID for IDs in the schema
 * @return {Function} validation function
 */

function compile(schema, root, localRefs, baseId) {
  /* jshint validthis: true, evil: true */

  /* eslint no-shadow: 0 */
  var self = this,
      opts = this._opts,
      refVal = [undefined],
      refs = {},
      patterns = [],
      patternsHash = {},
      defaults = [],
      defaultsHash = {},
      customRules = [];
  root = root || {
    schema: schema,
    refVal: refVal,
    refs: refs
  };
  var c = checkCompiling.call(this, schema, root, baseId);
  var compilation = this._compilations[c.index];
  if (c.compiling) return compilation.callValidate = callValidate;
  var formats = this._formats;
  var RULES = this.RULES;

  try {
    var v = localCompile(schema, root, localRefs, baseId);
    compilation.validate = v;
    var cv = compilation.callValidate;

    if (cv) {
      cv.schema = v.schema;
      cv.errors = null;
      cv.refs = v.refs;
      cv.refVal = v.refVal;
      cv.root = v.root;
      cv.$async = v.$async;
      if (opts.sourceCode) cv.source = v.source;
    }

    return v;
  } finally {
    endCompiling.call(this, schema, root, baseId);
  }
  /* @this   {*} - custom context, see passContext option */


  function callValidate() {
    /* jshint validthis: true */
    var validate = compilation.validate;
    var result = validate.apply(this, arguments);
    callValidate.errors = validate.errors;
    return result;
  }

  function localCompile(_schema, _root, localRefs, baseId) {
    var isRoot = !_root || _root && _root.schema == _schema;
    if (_root.schema != root.schema) return compile.call(self, _schema, _root, localRefs, baseId);
    var $async = _schema.$async === true;
    var sourceCode = validateGenerator({
      isTop: true,
      schema: _schema,
      isRoot: isRoot,
      baseId: baseId,
      root: _root,
      schemaPath: '',
      errSchemaPath: '#',
      errorPath: '""',
      MissingRefError: errorClasses.MissingRef,
      RULES: RULES,
      validate: validateGenerator,
      util: util,
      resolve: resolve,
      resolveRef: resolveRef,
      usePattern: usePattern,
      useDefault: useDefault,
      useCustomRule: useCustomRule,
      opts: opts,
      formats: formats,
      logger: self.logger,
      self: self
    });
    sourceCode = vars(refVal, refValCode) + vars(patterns, patternCode) + vars(defaults, defaultCode) + vars(customRules, customRuleCode) + sourceCode;
    if (opts.processCode) sourceCode = opts.processCode(sourceCode, _schema); // console.log('\n\n\n *** \n', JSON.stringify(sourceCode));

    var validate;

    try {
      var makeValidate = new Function('self', 'RULES', 'formats', 'root', 'refVal', 'defaults', 'customRules', 'equal', 'ucs2length', 'ValidationError', sourceCode);
      validate = makeValidate(self, RULES, formats, root, refVal, defaults, customRules, equal, ucs2length, ValidationError);
      refVal[0] = validate;
    } catch (e) {
      self.logger.error('Error compiling schema, function code:', sourceCode);
      throw e;
    }

    validate.schema = _schema;
    validate.errors = null;
    validate.refs = refs;
    validate.refVal = refVal;
    validate.root = isRoot ? validate : _root;
    if ($async) validate.$async = true;

    if (opts.sourceCode === true) {
      validate.source = {
        code: sourceCode,
        patterns: patterns,
        defaults: defaults
      };
    }

    return validate;
  }

  function resolveRef(baseId, ref, isRoot) {
    ref = resolve.url(baseId, ref);
    var refIndex = refs[ref];

    var _refVal, refCode;

    if (refIndex !== undefined) {
      _refVal = refVal[refIndex];
      refCode = 'refVal[' + refIndex + ']';
      return resolvedRef(_refVal, refCode);
    }

    if (!isRoot && root.refs) {
      var rootRefId = root.refs[ref];

      if (rootRefId !== undefined) {
        _refVal = root.refVal[rootRefId];
        refCode = addLocalRef(ref, _refVal);
        return resolvedRef(_refVal, refCode);
      }
    }

    refCode = addLocalRef(ref);
    var v = resolve.call(self, localCompile, root, ref);

    if (v === undefined) {
      var localSchema = localRefs && localRefs[ref];

      if (localSchema) {
        v = resolve.inlineRef(localSchema, opts.inlineRefs) ? localSchema : compile.call(self, localSchema, root, localRefs, baseId);
      }
    }

    if (v === undefined) {
      removeLocalRef(ref);
    } else {
      replaceLocalRef(ref, v);
      return resolvedRef(v, refCode);
    }
  }

  function addLocalRef(ref, v) {
    var refId = refVal.length;
    refVal[refId] = v;
    refs[ref] = refId;
    return 'refVal' + refId;
  }

  function removeLocalRef(ref) {
    delete refs[ref];
  }

  function replaceLocalRef(ref, v) {
    var refId = refs[ref];
    refVal[refId] = v;
  }

  function resolvedRef(refVal, code) {
    return typeof refVal == 'object' || typeof refVal == 'boolean' ? {
      code: code,
      schema: refVal,
      inline: true
    } : {
      code: code,
      $async: refVal && !!refVal.$async
    };
  }

  function usePattern(regexStr) {
    var index = patternsHash[regexStr];

    if (index === undefined) {
      index = patternsHash[regexStr] = patterns.length;
      patterns[index] = regexStr;
    }

    return 'pattern' + index;
  }

  function useDefault(value) {
    switch (typeof value) {
      case 'boolean':
      case 'number':
        return '' + value;

      case 'string':
        return util.toQuotedString(value);

      case 'object':
        if (value === null) return 'null';
        var valueStr = stableStringify(value);
        var index = defaultsHash[valueStr];

        if (index === undefined) {
          index = defaultsHash[valueStr] = defaults.length;
          defaults[index] = value;
        }

        return 'default' + index;
    }
  }

  function useCustomRule(rule, schema, parentSchema, it) {
    if (self._opts.validateSchema !== false) {
      var deps = rule.definition.dependencies;
      if (deps && !deps.every(function (keyword) {
        return Object.prototype.hasOwnProperty.call(parentSchema, keyword);
      })) throw new Error('parent schema must have all required keywords: ' + deps.join(','));
      var validateSchema = rule.definition.validateSchema;

      if (validateSchema) {
        var valid = validateSchema(schema);

        if (!valid) {
          var message = 'keyword schema is invalid: ' + self.errorsText(validateSchema.errors);
          if (self._opts.validateSchema == 'log') self.logger.error(message);else throw new Error(message);
        }
      }
    }

    var compile = rule.definition.compile,
        inline = rule.definition.inline,
        macro = rule.definition.macro;
    var validate;

    if (compile) {
      validate = compile.call(self, schema, parentSchema, it);
    } else if (macro) {
      validate = macro.call(self, schema, parentSchema, it);
      if (opts.validateSchema !== false) self.validateSchema(validate, true);
    } else if (inline) {
      validate = inline.call(self, it, rule.keyword, schema, parentSchema);
    } else {
      validate = rule.definition.validate;
      if (!validate) return;
    }

    if (validate === undefined) throw new Error('custom keyword "' + rule.keyword + '"failed to compile');
    var index = customRules.length;
    customRules[index] = validate;
    return {
      code: 'customRule' + index,
      validate: validate
    };
  }
}
/**
 * Checks if the schema is currently compiled
 * @this   Ajv
 * @param  {Object} schema schema to compile
 * @param  {Object} root root object
 * @param  {String} baseId base schema ID
 * @return {Object} object with properties "index" (compilation index) and "compiling" (boolean)
 */


function checkCompiling(schema, root, baseId) {
  /* jshint validthis: true */
  var index = compIndex.call(this, schema, root, baseId);
  if (index >= 0) return {
    index: index,
    compiling: true
  };
  index = this._compilations.length;
  this._compilations[index] = {
    schema: schema,
    root: root,
    baseId: baseId
  };
  return {
    index: index,
    compiling: false
  };
}
/**
 * Removes the schema from the currently compiled list
 * @this   Ajv
 * @param  {Object} schema schema to compile
 * @param  {Object} root root object
 * @param  {String} baseId base schema ID
 */


function endCompiling(schema, root, baseId) {
  /* jshint validthis: true */
  var i = compIndex.call(this, schema, root, baseId);
  if (i >= 0) this._compilations.splice(i, 1);
}
/**
 * Index of schema compilation in the currently compiled list
 * @this   Ajv
 * @param  {Object} schema schema to compile
 * @param  {Object} root root object
 * @param  {String} baseId base schema ID
 * @return {Integer} compilation index
 */


function compIndex(schema, root, baseId) {
  /* jshint validthis: true */
  for (var i = 0; i < this._compilations.length; i++) {
    var c = this._compilations[i];
    if (c.schema == schema && c.root == root && c.baseId == baseId) return i;
  }

  return -1;
}

function patternCode(i, patterns) {
  return 'var pattern' + i + ' = new RegExp(' + util.toQuotedString(patterns[i]) + ');';
}

function defaultCode(i) {
  return 'var default' + i + ' = defaults[' + i + '];';
}

function refValCode(i, refVal) {
  return refVal[i] === undefined ? '' : 'var refVal' + i + ' = refVal[' + i + '];';
}

function customRuleCode(i) {
  return 'var customRule' + i + ' = customRules[' + i + '];';
}

function vars(arr, statement) {
  if (!arr.length) return '';
  var code = '';

  for (var i = 0; i < arr.length; i++) code += statement(i, arr);

  return code;
}

/***/ }),

/***/ "./node_modules/ajv/lib/compile/resolve.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var URI = __webpack_require__("./node_modules/uri-js/dist/es5/uri.all.js"),
    equal = __webpack_require__("./node_modules/fast-deep-equal/index.js"),
    util = __webpack_require__("./node_modules/ajv/lib/compile/util.js"),
    SchemaObject = __webpack_require__("./node_modules/ajv/lib/compile/schema_obj.js"),
    traverse = __webpack_require__("./node_modules/json-schema-traverse/index.js");

module.exports = resolve;
resolve.normalizeId = normalizeId;
resolve.fullPath = getFullPath;
resolve.url = resolveUrl;
resolve.ids = resolveIds;
resolve.inlineRef = inlineRef;
resolve.schema = resolveSchema;
/**
 * [resolve and compile the references ($ref)]
 * @this   Ajv
 * @param  {Function} compile reference to schema compilation funciton (localCompile)
 * @param  {Object} root object with information about the root schema for the current schema
 * @param  {String} ref reference to resolve
 * @return {Object|Function} schema object (if the schema can be inlined) or validation function
 */

function resolve(compile, root, ref) {
  /* jshint validthis: true */
  var refVal = this._refs[ref];

  if (typeof refVal == 'string') {
    if (this._refs[refVal]) refVal = this._refs[refVal];else return resolve.call(this, compile, root, refVal);
  }

  refVal = refVal || this._schemas[ref];

  if (refVal instanceof SchemaObject) {
    return inlineRef(refVal.schema, this._opts.inlineRefs) ? refVal.schema : refVal.validate || this._compile(refVal);
  }

  var res = resolveSchema.call(this, root, ref);
  var schema, v, baseId;

  if (res) {
    schema = res.schema;
    root = res.root;
    baseId = res.baseId;
  }

  if (schema instanceof SchemaObject) {
    v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);
  } else if (schema !== undefined) {
    v = inlineRef(schema, this._opts.inlineRefs) ? schema : compile.call(this, schema, root, undefined, baseId);
  }

  return v;
}
/**
 * Resolve schema, its root and baseId
 * @this Ajv
 * @param  {Object} root root object with properties schema, refVal, refs
 * @param  {String} ref  reference to resolve
 * @return {Object} object with properties schema, root, baseId
 */


function resolveSchema(root, ref) {
  /* jshint validthis: true */
  var p = URI.parse(ref),
      refPath = _getFullPath(p),
      baseId = getFullPath(this._getId(root.schema));

  if (Object.keys(root.schema).length === 0 || refPath !== baseId) {
    var id = normalizeId(refPath);
    var refVal = this._refs[id];

    if (typeof refVal == 'string') {
      return resolveRecursive.call(this, root, refVal, p);
    } else if (refVal instanceof SchemaObject) {
      if (!refVal.validate) this._compile(refVal);
      root = refVal;
    } else {
      refVal = this._schemas[id];

      if (refVal instanceof SchemaObject) {
        if (!refVal.validate) this._compile(refVal);
        if (id == normalizeId(ref)) return {
          schema: refVal,
          root: root,
          baseId: baseId
        };
        root = refVal;
      } else {
        return;
      }
    }

    if (!root.schema) return;
    baseId = getFullPath(this._getId(root.schema));
  }

  return getJsonPointer.call(this, p, baseId, root.schema, root);
}
/* @this Ajv */


function resolveRecursive(root, ref, parsedRef) {
  /* jshint validthis: true */
  var res = resolveSchema.call(this, root, ref);

  if (res) {
    var schema = res.schema;
    var baseId = res.baseId;
    root = res.root;

    var id = this._getId(schema);

    if (id) baseId = resolveUrl(baseId, id);
    return getJsonPointer.call(this, parsedRef, baseId, schema, root);
  }
}

var PREVENT_SCOPE_CHANGE = util.toHash(['properties', 'patternProperties', 'enum', 'dependencies', 'definitions']);
/* @this Ajv */

function getJsonPointer(parsedRef, baseId, schema, root) {
  /* jshint validthis: true */
  parsedRef.fragment = parsedRef.fragment || '';
  if (parsedRef.fragment.slice(0, 1) != '/') return;
  var parts = parsedRef.fragment.split('/');

  for (var i = 1; i < parts.length; i++) {
    var part = parts[i];

    if (part) {
      part = util.unescapeFragment(part);
      schema = schema[part];
      if (schema === undefined) break;
      var id;

      if (!PREVENT_SCOPE_CHANGE[part]) {
        id = this._getId(schema);
        if (id) baseId = resolveUrl(baseId, id);

        if (schema.$ref) {
          var $ref = resolveUrl(baseId, schema.$ref);
          var res = resolveSchema.call(this, root, $ref);

          if (res) {
            schema = res.schema;
            root = res.root;
            baseId = res.baseId;
          }
        }
      }
    }
  }

  if (schema !== undefined && schema !== root.schema) return {
    schema: schema,
    root: root,
    baseId: baseId
  };
}

var SIMPLE_INLINED = util.toHash(['type', 'format', 'pattern', 'maxLength', 'minLength', 'maxProperties', 'minProperties', 'maxItems', 'minItems', 'maximum', 'minimum', 'uniqueItems', 'multipleOf', 'required', 'enum']);

function inlineRef(schema, limit) {
  if (limit === false) return false;
  if (limit === undefined || limit === true) return checkNoRef(schema);else if (limit) return countKeys(schema) <= limit;
}

function checkNoRef(schema) {
  var item;

  if (Array.isArray(schema)) {
    for (var i = 0; i < schema.length; i++) {
      item = schema[i];
      if (typeof item == 'object' && !checkNoRef(item)) return false;
    }
  } else {
    for (var key in schema) {
      if (key == '$ref') return false;
      item = schema[key];
      if (typeof item == 'object' && !checkNoRef(item)) return false;
    }
  }

  return true;
}

function countKeys(schema) {
  var count = 0,
      item;

  if (Array.isArray(schema)) {
    for (var i = 0; i < schema.length; i++) {
      item = schema[i];
      if (typeof item == 'object') count += countKeys(item);
      if (count == Infinity) return Infinity;
    }
  } else {
    for (var key in schema) {
      if (key == '$ref') return Infinity;

      if (SIMPLE_INLINED[key]) {
        count++;
      } else {
        item = schema[key];
        if (typeof item == 'object') count += countKeys(item) + 1;
        if (count == Infinity) return Infinity;
      }
    }
  }

  return count;
}

function getFullPath(id, normalize) {
  if (normalize !== false) id = normalizeId(id);
  var p = URI.parse(id);
  return _getFullPath(p);
}

function _getFullPath(p) {
  return URI.serialize(p).split('#')[0] + '#';
}

var TRAILING_SLASH_HASH = /#\/?$/;

function normalizeId(id) {
  return id ? id.replace(TRAILING_SLASH_HASH, '') : '';
}

function resolveUrl(baseId, id) {
  id = normalizeId(id);
  return URI.resolve(baseId, id);
}
/* @this Ajv */


function resolveIds(schema) {
  var schemaId = normalizeId(this._getId(schema));
  var baseIds = {
    '': schemaId
  };
  var fullPaths = {
    '': getFullPath(schemaId, false)
  };
  var localRefs = {};
  var self = this;
  traverse(schema, {
    allKeys: true
  }, function (sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
    if (jsonPtr === '') return;

    var id = self._getId(sch);

    var baseId = baseIds[parentJsonPtr];
    var fullPath = fullPaths[parentJsonPtr] + '/' + parentKeyword;
    if (keyIndex !== undefined) fullPath += '/' + (typeof keyIndex == 'number' ? keyIndex : util.escapeFragment(keyIndex));

    if (typeof id == 'string') {
      id = baseId = normalizeId(baseId ? URI.resolve(baseId, id) : id);
      var refVal = self._refs[id];
      if (typeof refVal == 'string') refVal = self._refs[refVal];

      if (refVal && refVal.schema) {
        if (!equal(sch, refVal.schema)) throw new Error('id "' + id + '" resolves to more than one schema');
      } else if (id != normalizeId(fullPath)) {
        if (id[0] == '#') {
          if (localRefs[id] && !equal(sch, localRefs[id])) throw new Error('id "' + id + '" resolves to more than one schema');
          localRefs[id] = sch;
        } else {
          self._refs[id] = fullPath;
        }
      }
    }

    baseIds[jsonPtr] = baseId;
    fullPaths[jsonPtr] = fullPath;
  });
  return localRefs;
}

/***/ }),

/***/ "./node_modules/ajv/lib/compile/rules.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ruleModules = __webpack_require__("./node_modules/ajv/lib/dotjs/index.js"),
    toHash = (__webpack_require__("./node_modules/ajv/lib/compile/util.js").toHash);

module.exports = function rules() {
  var RULES = [{
    type: 'number',
    rules: [{
      'maximum': ['exclusiveMaximum']
    }, {
      'minimum': ['exclusiveMinimum']
    }, 'multipleOf', 'format']
  }, {
    type: 'string',
    rules: ['maxLength', 'minLength', 'pattern', 'format']
  }, {
    type: 'array',
    rules: ['maxItems', 'minItems', 'items', 'contains', 'uniqueItems']
  }, {
    type: 'object',
    rules: ['maxProperties', 'minProperties', 'required', 'dependencies', 'propertyNames', {
      'properties': ['additionalProperties', 'patternProperties']
    }]
  }, {
    rules: ['$ref', 'const', 'enum', 'not', 'anyOf', 'oneOf', 'allOf', 'if']
  }];
  var ALL = ['type', '$comment'];
  var KEYWORDS = ['$schema', '$id', 'id', '$data', '$async', 'title', 'description', 'default', 'definitions', 'examples', 'readOnly', 'writeOnly', 'contentMediaType', 'contentEncoding', 'additionalItems', 'then', 'else'];
  var TYPES = ['number', 'integer', 'string', 'array', 'object', 'boolean', 'null'];
  RULES.all = toHash(ALL);
  RULES.types = toHash(TYPES);
  RULES.forEach(function (group) {
    group.rules = group.rules.map(function (keyword) {
      var implKeywords;

      if (typeof keyword == 'object') {
        var key = Object.keys(keyword)[0];
        implKeywords = keyword[key];
        keyword = key;
        implKeywords.forEach(function (k) {
          ALL.push(k);
          RULES.all[k] = true;
        });
      }

      ALL.push(keyword);
      var rule = RULES.all[keyword] = {
        keyword: keyword,
        code: ruleModules[keyword],
        implements: implKeywords
      };
      return rule;
    });
    RULES.all.$comment = {
      keyword: '$comment',
      code: ruleModules.$comment
    };
    if (group.type) RULES.types[group.type] = group;
  });
  RULES.keywords = toHash(ALL.concat(KEYWORDS));
  RULES.custom = {};
  return RULES;
};

/***/ }),

/***/ "./node_modules/ajv/lib/compile/schema_obj.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var util = __webpack_require__("./node_modules/ajv/lib/compile/util.js");

module.exports = SchemaObject;

function SchemaObject(obj) {
  util.copy(obj, this);
}

/***/ }),

/***/ "./node_modules/ajv/lib/compile/ucs2length.js":
/***/ ((module) => {

"use strict";
 // https://mathiasbynens.be/notes/javascript-encoding
// https://github.com/bestiejs/punycode.js - punycode.ucs2.decode

module.exports = function ucs2length(str) {
  var length = 0,
      len = str.length,
      pos = 0,
      value;

  while (pos < len) {
    length++;
    value = str.charCodeAt(pos++);

    if (value >= 0xD800 && value <= 0xDBFF && pos < len) {
      // high surrogate, and there is a next character
      value = str.charCodeAt(pos);
      if ((value & 0xFC00) == 0xDC00) pos++; // low surrogate
    }
  }

  return length;
};

/***/ }),

/***/ "./node_modules/ajv/lib/compile/util.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


module.exports = {
  copy: copy,
  checkDataType: checkDataType,
  checkDataTypes: checkDataTypes,
  coerceToTypes: coerceToTypes,
  toHash: toHash,
  getProperty: getProperty,
  escapeQuotes: escapeQuotes,
  equal: __webpack_require__("./node_modules/fast-deep-equal/index.js"),
  ucs2length: __webpack_require__("./node_modules/ajv/lib/compile/ucs2length.js"),
  varOccurences: varOccurences,
  varReplace: varReplace,
  schemaHasRules: schemaHasRules,
  schemaHasRulesExcept: schemaHasRulesExcept,
  schemaUnknownRules: schemaUnknownRules,
  toQuotedString: toQuotedString,
  getPathExpr: getPathExpr,
  getPath: getPath,
  getData: getData,
  unescapeFragment: unescapeFragment,
  unescapeJsonPointer: unescapeJsonPointer,
  escapeFragment: escapeFragment,
  escapeJsonPointer: escapeJsonPointer
};

function copy(o, to) {
  to = to || {};

  for (var key in o) to[key] = o[key];

  return to;
}

function checkDataType(dataType, data, strictNumbers, negate) {
  var EQUAL = negate ? ' !== ' : ' === ',
      AND = negate ? ' || ' : ' && ',
      OK = negate ? '!' : '',
      NOT = negate ? '' : '!';

  switch (dataType) {
    case 'null':
      return data + EQUAL + 'null';

    case 'array':
      return OK + 'Array.isArray(' + data + ')';

    case 'object':
      return '(' + OK + data + AND + 'typeof ' + data + EQUAL + '"object"' + AND + NOT + 'Array.isArray(' + data + '))';

    case 'integer':
      return '(typeof ' + data + EQUAL + '"number"' + AND + NOT + '(' + data + ' % 1)' + AND + data + EQUAL + data + (strictNumbers ? AND + OK + 'isFinite(' + data + ')' : '') + ')';

    case 'number':
      return '(typeof ' + data + EQUAL + '"' + dataType + '"' + (strictNumbers ? AND + OK + 'isFinite(' + data + ')' : '') + ')';

    default:
      return 'typeof ' + data + EQUAL + '"' + dataType + '"';
  }
}

function checkDataTypes(dataTypes, data, strictNumbers) {
  switch (dataTypes.length) {
    case 1:
      return checkDataType(dataTypes[0], data, strictNumbers, true);

    default:
      var code = '';
      var types = toHash(dataTypes);

      if (types.array && types.object) {
        code = types.null ? '(' : '(!' + data + ' || ';
        code += 'typeof ' + data + ' !== "object")';
        delete types.null;
        delete types.array;
        delete types.object;
      }

      if (types.number) delete types.integer;

      for (var t in types) code += (code ? ' && ' : '') + checkDataType(t, data, strictNumbers, true);

      return code;
  }
}

var COERCE_TO_TYPES = toHash(['string', 'number', 'integer', 'boolean', 'null']);

function coerceToTypes(optionCoerceTypes, dataTypes) {
  if (Array.isArray(dataTypes)) {
    var types = [];

    for (var i = 0; i < dataTypes.length; i++) {
      var t = dataTypes[i];
      if (COERCE_TO_TYPES[t]) types[types.length] = t;else if (optionCoerceTypes === 'array' && t === 'array') types[types.length] = t;
    }

    if (types.length) return types;
  } else if (COERCE_TO_TYPES[dataTypes]) {
    return [dataTypes];
  } else if (optionCoerceTypes === 'array' && dataTypes === 'array') {
    return ['array'];
  }
}

function toHash(arr) {
  var hash = {};

  for (var i = 0; i < arr.length; i++) hash[arr[i]] = true;

  return hash;
}

var IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
var SINGLE_QUOTE = /'|\\/g;

function getProperty(key) {
  return typeof key == 'number' ? '[' + key + ']' : IDENTIFIER.test(key) ? '.' + key : "['" + escapeQuotes(key) + "']";
}

function escapeQuotes(str) {
  return str.replace(SINGLE_QUOTE, '\\$&').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\f/g, '\\f').replace(/\t/g, '\\t');
}

function varOccurences(str, dataVar) {
  dataVar += '[^0-9]';
  var matches = str.match(new RegExp(dataVar, 'g'));
  return matches ? matches.length : 0;
}

function varReplace(str, dataVar, expr) {
  dataVar += '([^0-9])';
  expr = expr.replace(/\$/g, '$$$$');
  return str.replace(new RegExp(dataVar, 'g'), expr + '$1');
}

function schemaHasRules(schema, rules) {
  if (typeof schema == 'boolean') return !schema;

  for (var key in schema) if (rules[key]) return true;
}

function schemaHasRulesExcept(schema, rules, exceptKeyword) {
  if (typeof schema == 'boolean') return !schema && exceptKeyword != 'not';

  for (var key in schema) if (key != exceptKeyword && rules[key]) return true;
}

function schemaUnknownRules(schema, rules) {
  if (typeof schema == 'boolean') return;

  for (var key in schema) if (!rules[key]) return key;
}

function toQuotedString(str) {
  return '\'' + escapeQuotes(str) + '\'';
}

function getPathExpr(currentPath, expr, jsonPointers, isNumber) {
  var path = jsonPointers // false by default
  ? '\'/\' + ' + expr + (isNumber ? '' : '.replace(/~/g, \'~0\').replace(/\\//g, \'~1\')') : isNumber ? '\'[\' + ' + expr + ' + \']\'' : '\'[\\\'\' + ' + expr + ' + \'\\\']\'';
  return joinPaths(currentPath, path);
}

function getPath(currentPath, prop, jsonPointers) {
  var path = jsonPointers // false by default
  ? toQuotedString('/' + escapeJsonPointer(prop)) : toQuotedString(getProperty(prop));
  return joinPaths(currentPath, path);
}

var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;

function getData($data, lvl, paths) {
  var up, jsonPointer, data, matches;
  if ($data === '') return 'rootData';

  if ($data[0] == '/') {
    if (!JSON_POINTER.test($data)) throw new Error('Invalid JSON-pointer: ' + $data);
    jsonPointer = $data;
    data = 'rootData';
  } else {
    matches = $data.match(RELATIVE_JSON_POINTER);
    if (!matches) throw new Error('Invalid JSON-pointer: ' + $data);
    up = +matches[1];
    jsonPointer = matches[2];

    if (jsonPointer == '#') {
      if (up >= lvl) throw new Error('Cannot access property/index ' + up + ' levels up, current level is ' + lvl);
      return paths[lvl - up];
    }

    if (up > lvl) throw new Error('Cannot access data ' + up + ' levels up, current level is ' + lvl);
    data = 'data' + (lvl - up || '');
    if (!jsonPointer) return data;
  }

  var expr = data;
  var segments = jsonPointer.split('/');

  for (var i = 0; i < segments.length; i++) {
    var segment = segments[i];

    if (segment) {
      data += getProperty(unescapeJsonPointer(segment));
      expr += ' && ' + data;
    }
  }

  return expr;
}

function joinPaths(a, b) {
  if (a == '""') return b;
  return (a + ' + ' + b).replace(/([^\\])' \+ '/g, '$1');
}

function unescapeFragment(str) {
  return unescapeJsonPointer(decodeURIComponent(str));
}

function escapeFragment(str) {
  return encodeURIComponent(escapeJsonPointer(str));
}

function escapeJsonPointer(str) {
  return str.replace(/~/g, '~0').replace(/\//g, '~1');
}

function unescapeJsonPointer(str) {
  return str.replace(/~1/g, '/').replace(/~0/g, '~');
}

/***/ }),

/***/ "./node_modules/ajv/lib/data.js":
/***/ ((module) => {

"use strict";


var KEYWORDS = ['multipleOf', 'maximum', 'exclusiveMaximum', 'minimum', 'exclusiveMinimum', 'maxLength', 'minLength', 'pattern', 'additionalItems', 'maxItems', 'minItems', 'uniqueItems', 'maxProperties', 'minProperties', 'required', 'additionalProperties', 'enum', 'format', 'const'];

module.exports = function (metaSchema, keywordsJsonPointers) {
  for (var i = 0; i < keywordsJsonPointers.length; i++) {
    metaSchema = JSON.parse(JSON.stringify(metaSchema));
    var segments = keywordsJsonPointers[i].split('/');
    var keywords = metaSchema;
    var j;

    for (j = 1; j < segments.length; j++) keywords = keywords[segments[j]];

    for (j = 0; j < KEYWORDS.length; j++) {
      var key = KEYWORDS[j];
      var schema = keywords[key];

      if (schema) {
        keywords[key] = {
          anyOf: [schema, {
            $ref: 'https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#'
          }]
        };
      }
    }
  }

  return metaSchema;
};

/***/ }),

/***/ "./node_modules/ajv/lib/definition_schema.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var metaSchema = __webpack_require__("./node_modules/ajv/lib/refs/json-schema-draft-07.json");

module.exports = {
  $id: 'https://github.com/ajv-validator/ajv/blob/master/lib/definition_schema.js',
  definitions: {
    simpleTypes: metaSchema.definitions.simpleTypes
  },
  type: 'object',
  dependencies: {
    schema: ['validate'],
    $data: ['validate'],
    statements: ['inline'],
    valid: {
      not: {
        required: ['macro']
      }
    }
  },
  properties: {
    type: metaSchema.properties.type,
    schema: {
      type: 'boolean'
    },
    statements: {
      type: 'boolean'
    },
    dependencies: {
      type: 'array',
      items: {
        type: 'string'
      }
    },
    metaSchema: {
      type: 'object'
    },
    modifying: {
      type: 'boolean'
    },
    valid: {
      type: 'boolean'
    },
    $data: {
      type: 'boolean'
    },
    async: {
      type: 'boolean'
    },
    errors: {
      anyOf: [{
        type: 'boolean'
      }, {
        const: 'full'
      }]
    }
  }
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/_limit.js":
/***/ ((module) => {

"use strict";


module.exports = function generate__limit(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }

  var $isMax = $keyword == 'maximum',
      $exclusiveKeyword = $isMax ? 'exclusiveMaximum' : 'exclusiveMinimum',
      $schemaExcl = it.schema[$exclusiveKeyword],
      $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data,
      $op = $isMax ? '<' : '>',
      $notOp = $isMax ? '>' : '<',
      $errorKeyword = undefined;

  if (!($isData || typeof $schema == 'number' || $schema === undefined)) {
    throw new Error($keyword + ' must be number');
  }

  if (!($isDataExcl || $schemaExcl === undefined || typeof $schemaExcl == 'number' || typeof $schemaExcl == 'boolean')) {
    throw new Error($exclusiveKeyword + ' must be number or boolean');
  }

  if ($isDataExcl) {
    var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),
        $exclusive = 'exclusive' + $lvl,
        $exclType = 'exclType' + $lvl,
        $exclIsNumber = 'exclIsNumber' + $lvl,
        $opExpr = 'op' + $lvl,
        $opStr = '\' + ' + $opExpr + ' + \'';
    out += ' var schemaExcl' + $lvl + ' = ' + $schemaValueExcl + '; ';
    $schemaValueExcl = 'schemaExcl' + $lvl;
    out += ' var ' + $exclusive + '; var ' + $exclType + ' = typeof ' + $schemaValueExcl + '; if (' + $exclType + ' != \'boolean\' && ' + $exclType + ' != \'undefined\' && ' + $exclType + ' != \'number\') { ';
    var $errorKeyword = $exclusiveKeyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    /* istanbul ignore else */

    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ($errorKeyword || '_exclusiveLimit') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';

      if (it.opts.messages !== false) {
        out += ' , message: \'' + $exclusiveKeyword + ' should be boolean\' ';
      }

      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }

      out += ' } ';
    } else {
      out += ' {} ';
    }

    var __err = out;
    out = $$outStack.pop();

    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + __err + ']); ';
      } else {
        out += ' validate.errors = [' + __err + ']; return false; ';
      }
    } else {
      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }

    out += ' } else if ( ';

    if ($isData) {
      out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
    }

    out += ' ' + $exclType + ' == \'number\' ? ( (' + $exclusive + ' = ' + $schemaValue + ' === undefined || ' + $schemaValueExcl + ' ' + $op + '= ' + $schemaValue + ') ? ' + $data + ' ' + $notOp + '= ' + $schemaValueExcl + ' : ' + $data + ' ' + $notOp + ' ' + $schemaValue + ' ) : ( (' + $exclusive + ' = ' + $schemaValueExcl + ' === true) ? ' + $data + ' ' + $notOp + '= ' + $schemaValue + ' : ' + $data + ' ' + $notOp + ' ' + $schemaValue + ' ) || ' + $data + ' !== ' + $data + ') { var op' + $lvl + ' = ' + $exclusive + ' ? \'' + $op + '\' : \'' + $op + '=\'; ';

    if ($schema === undefined) {
      $errorKeyword = $exclusiveKeyword;
      $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
      $schemaValue = $schemaValueExcl;
      $isData = $isDataExcl;
    }
  } else {
    var $exclIsNumber = typeof $schemaExcl == 'number',
        $opStr = $op;

    if ($exclIsNumber && $isData) {
      var $opExpr = '\'' + $opStr + '\'';
      out += ' if ( ';

      if ($isData) {
        out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
      }

      out += ' ( ' + $schemaValue + ' === undefined || ' + $schemaExcl + ' ' + $op + '= ' + $schemaValue + ' ? ' + $data + ' ' + $notOp + '= ' + $schemaExcl + ' : ' + $data + ' ' + $notOp + ' ' + $schemaValue + ' ) || ' + $data + ' !== ' + $data + ') { ';
    } else {
      if ($exclIsNumber && $schema === undefined) {
        $exclusive = true;
        $errorKeyword = $exclusiveKeyword;
        $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
        $schemaValue = $schemaExcl;
        $notOp += '=';
      } else {
        if ($exclIsNumber) $schemaValue = Math[$isMax ? 'min' : 'max']($schemaExcl, $schema);

        if ($schemaExcl === ($exclIsNumber ? $schemaValue : true)) {
          $exclusive = true;
          $errorKeyword = $exclusiveKeyword;
          $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
          $notOp += '=';
        } else {
          $exclusive = false;
          $opStr += '=';
        }
      }

      var $opExpr = '\'' + $opStr + '\'';
      out += ' if ( ';

      if ($isData) {
        out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
      }

      out += ' ' + $data + ' ' + $notOp + ' ' + $schemaValue + ' || ' + $data + ' !== ' + $data + ') { ';
    }
  }

  $errorKeyword = $errorKeyword || $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = '';
  /* istanbul ignore else */

  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ($errorKeyword || '_limit') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { comparison: ' + $opExpr + ', limit: ' + $schemaValue + ', exclusive: ' + $exclusive + ' } ';

    if (it.opts.messages !== false) {
      out += ' , message: \'should be ' + $opStr + ' ';

      if ($isData) {
        out += '\' + ' + $schemaValue;
      } else {
        out += '' + $schemaValue + '\'';
      }
    }

    if (it.opts.verbose) {
      out += ' , schema:  ';

      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + $schema;
      }

      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }

    out += ' } ';
  } else {
    out += ' {} ';
  }

  var __err = out;
  out = $$outStack.pop();

  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }

  out += ' } ';

  if ($breakOnError) {
    out += ' else { ';
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/_limitItems.js":
/***/ ((module) => {

"use strict";


module.exports = function generate__limitItems(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }

  if (!($isData || typeof $schema == 'number')) {
    throw new Error($keyword + ' must be number');
  }

  var $op = $keyword == 'maxItems' ? '>' : '<';
  out += 'if ( ';

  if ($isData) {
    out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
  }

  out += ' ' + $data + '.length ' + $op + ' ' + $schemaValue + ') { ';
  var $errorKeyword = $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = '';
  /* istanbul ignore else */

  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ($errorKeyword || '_limitItems') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { limit: ' + $schemaValue + ' } ';

    if (it.opts.messages !== false) {
      out += ' , message: \'should NOT have ';

      if ($keyword == 'maxItems') {
        out += 'more';
      } else {
        out += 'fewer';
      }

      out += ' than ';

      if ($isData) {
        out += '\' + ' + $schemaValue + ' + \'';
      } else {
        out += '' + $schema;
      }

      out += ' items\' ';
    }

    if (it.opts.verbose) {
      out += ' , schema:  ';

      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + $schema;
      }

      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }

    out += ' } ';
  } else {
    out += ' {} ';
  }

  var __err = out;
  out = $$outStack.pop();

  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }

  out += '} ';

  if ($breakOnError) {
    out += ' else { ';
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/_limitLength.js":
/***/ ((module) => {

"use strict";


module.exports = function generate__limitLength(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }

  if (!($isData || typeof $schema == 'number')) {
    throw new Error($keyword + ' must be number');
  }

  var $op = $keyword == 'maxLength' ? '>' : '<';
  out += 'if ( ';

  if ($isData) {
    out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
  }

  if (it.opts.unicode === false) {
    out += ' ' + $data + '.length ';
  } else {
    out += ' ucs2length(' + $data + ') ';
  }

  out += ' ' + $op + ' ' + $schemaValue + ') { ';
  var $errorKeyword = $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = '';
  /* istanbul ignore else */

  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ($errorKeyword || '_limitLength') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { limit: ' + $schemaValue + ' } ';

    if (it.opts.messages !== false) {
      out += ' , message: \'should NOT be ';

      if ($keyword == 'maxLength') {
        out += 'longer';
      } else {
        out += 'shorter';
      }

      out += ' than ';

      if ($isData) {
        out += '\' + ' + $schemaValue + ' + \'';
      } else {
        out += '' + $schema;
      }

      out += ' characters\' ';
    }

    if (it.opts.verbose) {
      out += ' , schema:  ';

      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + $schema;
      }

      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }

    out += ' } ';
  } else {
    out += ' {} ';
  }

  var __err = out;
  out = $$outStack.pop();

  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }

  out += '} ';

  if ($breakOnError) {
    out += ' else { ';
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/_limitProperties.js":
/***/ ((module) => {

"use strict";


module.exports = function generate__limitProperties(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }

  if (!($isData || typeof $schema == 'number')) {
    throw new Error($keyword + ' must be number');
  }

  var $op = $keyword == 'maxProperties' ? '>' : '<';
  out += 'if ( ';

  if ($isData) {
    out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
  }

  out += ' Object.keys(' + $data + ').length ' + $op + ' ' + $schemaValue + ') { ';
  var $errorKeyword = $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = '';
  /* istanbul ignore else */

  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ($errorKeyword || '_limitProperties') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { limit: ' + $schemaValue + ' } ';

    if (it.opts.messages !== false) {
      out += ' , message: \'should NOT have ';

      if ($keyword == 'maxProperties') {
        out += 'more';
      } else {
        out += 'fewer';
      }

      out += ' than ';

      if ($isData) {
        out += '\' + ' + $schemaValue + ' + \'';
      } else {
        out += '' + $schema;
      }

      out += ' properties\' ';
    }

    if (it.opts.verbose) {
      out += ' , schema:  ';

      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + $schema;
      }

      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }

    out += ' } ';
  } else {
    out += ' {} ';
  }

  var __err = out;
  out = $$outStack.pop();

  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }

  out += '} ';

  if ($breakOnError) {
    out += ' else { ';
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/allOf.js":
/***/ ((module) => {

"use strict";


module.exports = function generate_allOf(it, $keyword, $ruleType) {
  var out = ' ';
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $currentBaseId = $it.baseId,
      $allSchemasEmpty = true;
  var arr1 = $schema;

  if (arr1) {
    var $sch,
        $i = -1,
        l1 = arr1.length - 1;

    while ($i < l1) {
      $sch = arr1[$i += 1];

      if (it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
        $allSchemasEmpty = false;
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + '[' + $i + ']';
        $it.errSchemaPath = $errSchemaPath + '/' + $i;
        out += '  ' + it.validate($it) + ' ';
        $it.baseId = $currentBaseId;

        if ($breakOnError) {
          out += ' if (' + $nextValid + ') { ';
          $closingBraces += '}';
        }
      }
    }
  }

  if ($breakOnError) {
    if ($allSchemasEmpty) {
      out += ' if (true) { ';
    } else {
      out += ' ' + $closingBraces.slice(0, -1) + ' ';
    }
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/anyOf.js":
/***/ ((module) => {

"use strict";


module.exports = function generate_anyOf(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $noEmptySchema = $schema.every(function ($sch) {
    return it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all);
  });

  if ($noEmptySchema) {
    var $currentBaseId = $it.baseId;
    out += ' var ' + $errs + ' = errors; var ' + $valid + ' = false;  ';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var arr1 = $schema;

    if (arr1) {
      var $sch,
          $i = -1,
          l1 = arr1.length - 1;

      while ($i < l1) {
        $sch = arr1[$i += 1];
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + '[' + $i + ']';
        $it.errSchemaPath = $errSchemaPath + '/' + $i;
        out += '  ' + it.validate($it) + ' ';
        $it.baseId = $currentBaseId;
        out += ' ' + $valid + ' = ' + $valid + ' || ' + $nextValid + '; if (!' + $valid + ') { ';
        $closingBraces += '}';
      }
    }

    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' ' + $closingBraces + ' if (!' + $valid + ') {   var err =   ';
    /* istanbul ignore else */

    if (it.createErrors !== false) {
      out += ' { keyword: \'' + 'anyOf' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';

      if (it.opts.messages !== false) {
        out += ' , message: \'should match some schema in anyOf\' ';
      }

      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }

      out += ' } ';
    } else {
      out += ' {} ';
    }

    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';

    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError(vErrors); ';
      } else {
        out += ' validate.errors = vErrors; return false; ';
      }
    }

    out += ' } else {  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; } ';

    if (it.opts.allErrors) {
      out += ' } ';
    }
  } else {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/comment.js":
/***/ ((module) => {

"use strict";


module.exports = function generate_comment(it, $keyword, $ruleType) {
  var out = ' ';
  var $schema = it.schema[$keyword];
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $comment = it.util.toQuotedString($schema);

  if (it.opts.$comment === true) {
    out += ' console.log(' + $comment + ');';
  } else if (typeof it.opts.$comment == 'function') {
    out += ' self._opts.$comment(' + $comment + ', ' + it.util.toQuotedString($errSchemaPath) + ', validate.root.schema);';
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/const.js":
/***/ ((module) => {

"use strict";


module.exports = function generate_const(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }

  if (!$isData) {
    out += ' var schema' + $lvl + ' = validate.schema' + $schemaPath + ';';
  }

  out += 'var ' + $valid + ' = equal(' + $data + ', schema' + $lvl + '); if (!' + $valid + ') {   ';
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = '';
  /* istanbul ignore else */

  if (it.createErrors !== false) {
    out += ' { keyword: \'' + 'const' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { allowedValue: schema' + $lvl + ' } ';

    if (it.opts.messages !== false) {
      out += ' , message: \'should be equal to constant\' ';
    }

    if (it.opts.verbose) {
      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }

    out += ' } ';
  } else {
    out += ' {} ';
  }

  var __err = out;
  out = $$outStack.pop();

  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }

  out += ' }';

  if ($breakOnError) {
    out += ' else { ';
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/contains.js":
/***/ ((module) => {

"use strict";


module.exports = function generate_contains(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $idx = 'i' + $lvl,
      $dataNxt = $it.dataLevel = it.dataLevel + 1,
      $nextData = 'data' + $dataNxt,
      $currentBaseId = it.baseId,
      $nonEmptySchema = it.opts.strictKeywords ? typeof $schema == 'object' && Object.keys($schema).length > 0 || $schema === false : it.util.schemaHasRules($schema, it.RULES.all);
  out += 'var ' + $errs + ' = errors;var ' + $valid + ';';

  if ($nonEmptySchema) {
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += ' var ' + $nextValid + ' = false; for (var ' + $idx + ' = 0; ' + $idx + ' < ' + $data + '.length; ' + $idx + '++) { ';
    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
    var $passData = $data + '[' + $idx + ']';
    $it.dataPathArr[$dataNxt] = $idx;
    var $code = it.validate($it);
    $it.baseId = $currentBaseId;

    if (it.util.varOccurences($code, $nextData) < 2) {
      out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
    } else {
      out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
    }

    out += ' if (' + $nextValid + ') break; }  ';
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' ' + $closingBraces + ' if (!' + $nextValid + ') {';
  } else {
    out += ' if (' + $data + '.length == 0) {';
  }

  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = '';
  /* istanbul ignore else */

  if (it.createErrors !== false) {
    out += ' { keyword: \'' + 'contains' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';

    if (it.opts.messages !== false) {
      out += ' , message: \'should contain a valid item\' ';
    }

    if (it.opts.verbose) {
      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }

    out += ' } ';
  } else {
    out += ' {} ';
  }

  var __err = out;
  out = $$outStack.pop();

  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }

  out += ' } else { ';

  if ($nonEmptySchema) {
    out += '  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; } ';
  }

  if (it.opts.allErrors) {
    out += ' } ';
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/custom.js":
/***/ ((module) => {

"use strict";


module.exports = function generate_custom(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }

  var $rule = this,
      $definition = 'definition' + $lvl,
      $rDef = $rule.definition,
      $closingBraces = '';
  var $compile, $inline, $macro, $ruleValidate, $validateCode;

  if ($isData && $rDef.$data) {
    $validateCode = 'keywordValidate' + $lvl;
    var $validateSchema = $rDef.validateSchema;
    out += ' var ' + $definition + ' = RULES.custom[\'' + $keyword + '\'].definition; var ' + $validateCode + ' = ' + $definition + '.validate;';
  } else {
    $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);
    if (!$ruleValidate) return;
    $schemaValue = 'validate.schema' + $schemaPath;
    $validateCode = $ruleValidate.code;
    $compile = $rDef.compile;
    $inline = $rDef.inline;
    $macro = $rDef.macro;
  }

  var $ruleErrs = $validateCode + '.errors',
      $i = 'i' + $lvl,
      $ruleErr = 'ruleErr' + $lvl,
      $asyncKeyword = $rDef.async;
  if ($asyncKeyword && !it.async) throw new Error('async keyword in sync schema');

  if (!($inline || $macro)) {
    out += '' + $ruleErrs + ' = null;';
  }

  out += 'var ' + $errs + ' = errors;var ' + $valid + ';';

  if ($isData && $rDef.$data) {
    $closingBraces += '}';
    out += ' if (' + $schemaValue + ' === undefined) { ' + $valid + ' = true; } else { ';

    if ($validateSchema) {
      $closingBraces += '}';
      out += ' ' + $valid + ' = ' + $definition + '.validateSchema(' + $schemaValue + '); if (' + $valid + ') { ';
    }
  }

  if ($inline) {
    if ($rDef.statements) {
      out += ' ' + $ruleValidate.validate + ' ';
    } else {
      out += ' ' + $valid + ' = ' + $ruleValidate.validate + '; ';
    }
  } else if ($macro) {
    var $it = it.util.copy(it);
    var $closingBraces = '';
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    $it.schema = $ruleValidate.validate;
    $it.schemaPath = '';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var $code = it.validate($it).replace(/validate\.schema/g, $validateCode);
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' ' + $code;
  } else {
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    out += '  ' + $validateCode + '.call( ';

    if (it.opts.passContext) {
      out += 'this';
    } else {
      out += 'self';
    }

    if ($compile || $rDef.schema === false) {
      out += ' , ' + $data + ' ';
    } else {
      out += ' , ' + $schemaValue + ' , ' + $data + ' , validate.schema' + it.schemaPath + ' ';
    }

    out += ' , (dataPath || \'\')';

    if (it.errorPath != '""') {
      out += ' + ' + it.errorPath;
    }

    var $parentData = $dataLvl ? 'data' + ($dataLvl - 1 || '') : 'parentData',
        $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
    out += ' , ' + $parentData + ' , ' + $parentDataProperty + ' , rootData )  ';
    var def_callRuleValidate = out;
    out = $$outStack.pop();

    if ($rDef.errors === false) {
      out += ' ' + $valid + ' = ';

      if ($asyncKeyword) {
        out += 'await ';
      }

      out += '' + def_callRuleValidate + '; ';
    } else {
      if ($asyncKeyword) {
        $ruleErrs = 'customErrors' + $lvl;
        out += ' var ' + $ruleErrs + ' = null; try { ' + $valid + ' = await ' + def_callRuleValidate + '; } catch (e) { ' + $valid + ' = false; if (e instanceof ValidationError) ' + $ruleErrs + ' = e.errors; else throw e; } ';
      } else {
        out += ' ' + $ruleErrs + ' = null; ' + $valid + ' = ' + def_callRuleValidate + '; ';
      }
    }
  }

  if ($rDef.modifying) {
    out += ' if (' + $parentData + ') ' + $data + ' = ' + $parentData + '[' + $parentDataProperty + '];';
  }

  out += '' + $closingBraces;

  if ($rDef.valid) {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
  } else {
    out += ' if ( ';

    if ($rDef.valid === undefined) {
      out += ' !';

      if ($macro) {
        out += '' + $nextValid;
      } else {
        out += '' + $valid;
      }
    } else {
      out += ' ' + !$rDef.valid + ' ';
    }

    out += ') { ';
    $errorKeyword = $rule.keyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    /* istanbul ignore else */

    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ($errorKeyword || 'custom') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { keyword: \'' + $rule.keyword + '\' } ';

      if (it.opts.messages !== false) {
        out += ' , message: \'should pass "' + $rule.keyword + '" keyword validation\' ';
      }

      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }

      out += ' } ';
    } else {
      out += ' {} ';
    }

    var __err = out;
    out = $$outStack.pop();

    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + __err + ']); ';
      } else {
        out += ' validate.errors = [' + __err + ']; return false; ';
      }
    } else {
      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }

    var def_customError = out;
    out = $$outStack.pop();

    if ($inline) {
      if ($rDef.errors) {
        if ($rDef.errors != 'full') {
          out += '  for (var ' + $i + '=' + $errs + '; ' + $i + '<errors; ' + $i + '++) { var ' + $ruleErr + ' = vErrors[' + $i + ']; if (' + $ruleErr + '.dataPath === undefined) ' + $ruleErr + '.dataPath = (dataPath || \'\') + ' + it.errorPath + '; if (' + $ruleErr + '.schemaPath === undefined) { ' + $ruleErr + '.schemaPath = "' + $errSchemaPath + '"; } ';

          if (it.opts.verbose) {
            out += ' ' + $ruleErr + '.schema = ' + $schemaValue + '; ' + $ruleErr + '.data = ' + $data + '; ';
          }

          out += ' } ';
        }
      } else {
        if ($rDef.errors === false) {
          out += ' ' + def_customError + ' ';
        } else {
          out += ' if (' + $errs + ' == errors) { ' + def_customError + ' } else {  for (var ' + $i + '=' + $errs + '; ' + $i + '<errors; ' + $i + '++) { var ' + $ruleErr + ' = vErrors[' + $i + ']; if (' + $ruleErr + '.dataPath === undefined) ' + $ruleErr + '.dataPath = (dataPath || \'\') + ' + it.errorPath + '; if (' + $ruleErr + '.schemaPath === undefined) { ' + $ruleErr + '.schemaPath = "' + $errSchemaPath + '"; } ';

          if (it.opts.verbose) {
            out += ' ' + $ruleErr + '.schema = ' + $schemaValue + '; ' + $ruleErr + '.data = ' + $data + '; ';
          }

          out += ' } } ';
        }
      }
    } else if ($macro) {
      out += '   var err =   ';
      /* istanbul ignore else */

      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ($errorKeyword || 'custom') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { keyword: \'' + $rule.keyword + '\' } ';

        if (it.opts.messages !== false) {
          out += ' , message: \'should pass "' + $rule.keyword + '" keyword validation\' ';
        }

        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
        }

        out += ' } ';
      } else {
        out += ' {} ';
      }

      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';

      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError(vErrors); ';
        } else {
          out += ' validate.errors = vErrors; return false; ';
        }
      }
    } else {
      if ($rDef.errors === false) {
        out += ' ' + def_customError + ' ';
      } else {
        out += ' if (Array.isArray(' + $ruleErrs + ')) { if (vErrors === null) vErrors = ' + $ruleErrs + '; else vErrors = vErrors.concat(' + $ruleErrs + '); errors = vErrors.length;  for (var ' + $i + '=' + $errs + '; ' + $i + '<errors; ' + $i + '++) { var ' + $ruleErr + ' = vErrors[' + $i + ']; if (' + $ruleErr + '.dataPath === undefined) ' + $ruleErr + '.dataPath = (dataPath || \'\') + ' + it.errorPath + ';  ' + $ruleErr + '.schemaPath = "' + $errSchemaPath + '";  ';

        if (it.opts.verbose) {
          out += ' ' + $ruleErr + '.schema = ' + $schemaValue + '; ' + $ruleErr + '.data = ' + $data + '; ';
        }

        out += ' } } else { ' + def_customError + ' } ';
      }
    }

    out += ' } ';

    if ($breakOnError) {
      out += ' else { ';
    }
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/dependencies.js":
/***/ ((module) => {

"use strict";


module.exports = function generate_dependencies(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $schemaDeps = {},
      $propertyDeps = {},
      $ownProperties = it.opts.ownProperties;

  for ($property in $schema) {
    if ($property == '__proto__') continue;
    var $sch = $schema[$property];
    var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;
    $deps[$property] = $sch;
  }

  out += 'var ' + $errs + ' = errors;';
  var $currentErrorPath = it.errorPath;
  out += 'var missing' + $lvl + ';';

  for (var $property in $propertyDeps) {
    $deps = $propertyDeps[$property];

    if ($deps.length) {
      out += ' if ( ' + $data + it.util.getProperty($property) + ' !== undefined ';

      if ($ownProperties) {
        out += ' && Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($property) + '\') ';
      }

      if ($breakOnError) {
        out += ' && ( ';
        var arr1 = $deps;

        if (arr1) {
          var $propertyKey,
              $i = -1,
              l1 = arr1.length - 1;

          while ($i < l1) {
            $propertyKey = arr1[$i += 1];

            if ($i) {
              out += ' || ';
            }

            var $prop = it.util.getProperty($propertyKey),
                $useData = $data + $prop;
            out += ' ( ( ' + $useData + ' === undefined ';

            if ($ownProperties) {
              out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($propertyKey) + '\') ';
            }

            out += ') && (missing' + $lvl + ' = ' + it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop) + ') ) ';
          }
        }

        out += ')) {  ';
        var $propertyPath = 'missing' + $lvl,
            $missingProperty = '\' + ' + $propertyPath + ' + \'';

        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
        }

        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = '';
        /* istanbul ignore else */

        if (it.createErrors !== false) {
          out += ' { keyword: \'' + 'dependencies' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { property: \'' + it.util.escapeQuotes($property) + '\', missingProperty: \'' + $missingProperty + '\', depsCount: ' + $deps.length + ', deps: \'' + it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", ")) + '\' } ';

          if (it.opts.messages !== false) {
            out += ' , message: \'should have ';

            if ($deps.length == 1) {
              out += 'property ' + it.util.escapeQuotes($deps[0]);
            } else {
              out += 'properties ' + it.util.escapeQuotes($deps.join(", "));
            }

            out += ' when property ' + it.util.escapeQuotes($property) + ' is present\' ';
          }

          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
          }

          out += ' } ';
        } else {
          out += ' {} ';
        }

        var __err = out;
        out = $$outStack.pop();

        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + __err + ']); ';
          } else {
            out += ' validate.errors = [' + __err + ']; return false; ';
          }
        } else {
          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
      } else {
        out += ' ) { ';
        var arr2 = $deps;

        if (arr2) {
          var $propertyKey,
              i2 = -1,
              l2 = arr2.length - 1;

          while (i2 < l2) {
            $propertyKey = arr2[i2 += 1];
            var $prop = it.util.getProperty($propertyKey),
                $missingProperty = it.util.escapeQuotes($propertyKey),
                $useData = $data + $prop;

            if (it.opts._errorDataPathProperty) {
              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
            }

            out += ' if ( ' + $useData + ' === undefined ';

            if ($ownProperties) {
              out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($propertyKey) + '\') ';
            }

            out += ') {  var err =   ';
            /* istanbul ignore else */

            if (it.createErrors !== false) {
              out += ' { keyword: \'' + 'dependencies' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { property: \'' + it.util.escapeQuotes($property) + '\', missingProperty: \'' + $missingProperty + '\', depsCount: ' + $deps.length + ', deps: \'' + it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", ")) + '\' } ';

              if (it.opts.messages !== false) {
                out += ' , message: \'should have ';

                if ($deps.length == 1) {
                  out += 'property ' + it.util.escapeQuotes($deps[0]);
                } else {
                  out += 'properties ' + it.util.escapeQuotes($deps.join(", "));
                }

                out += ' when property ' + it.util.escapeQuotes($property) + ' is present\' ';
              }

              if (it.opts.verbose) {
                out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
              }

              out += ' } ';
            } else {
              out += ' {} ';
            }

            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
          }
        }
      }

      out += ' }   ';

      if ($breakOnError) {
        $closingBraces += '}';
        out += ' else { ';
      }
    }
  }

  it.errorPath = $currentErrorPath;
  var $currentBaseId = $it.baseId;

  for (var $property in $schemaDeps) {
    var $sch = $schemaDeps[$property];

    if (it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
      out += ' ' + $nextValid + ' = true; if ( ' + $data + it.util.getProperty($property) + ' !== undefined ';

      if ($ownProperties) {
        out += ' && Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($property) + '\') ';
      }

      out += ') { ';
      $it.schema = $sch;
      $it.schemaPath = $schemaPath + it.util.getProperty($property);
      $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($property);
      out += '  ' + it.validate($it) + ' ';
      $it.baseId = $currentBaseId;
      out += ' }  ';

      if ($breakOnError) {
        out += ' if (' + $nextValid + ') { ';
        $closingBraces += '}';
      }
    }
  }

  if ($breakOnError) {
    out += '   ' + $closingBraces + ' if (' + $errs + ' == errors) {';
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/enum.js":
/***/ ((module) => {

"use strict";


module.exports = function generate_enum(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }

  var $i = 'i' + $lvl,
      $vSchema = 'schema' + $lvl;

  if (!$isData) {
    out += ' var ' + $vSchema + ' = validate.schema' + $schemaPath + ';';
  }

  out += 'var ' + $valid + ';';

  if ($isData) {
    out += ' if (schema' + $lvl + ' === undefined) ' + $valid + ' = true; else if (!Array.isArray(schema' + $lvl + ')) ' + $valid + ' = false; else {';
  }

  out += '' + $valid + ' = false;for (var ' + $i + '=0; ' + $i + '<' + $vSchema + '.length; ' + $i + '++) if (equal(' + $data + ', ' + $vSchema + '[' + $i + '])) { ' + $valid + ' = true; break; }';

  if ($isData) {
    out += '  }  ';
  }

  out += ' if (!' + $valid + ') {   ';
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = '';
  /* istanbul ignore else */

  if (it.createErrors !== false) {
    out += ' { keyword: \'' + 'enum' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { allowedValues: schema' + $lvl + ' } ';

    if (it.opts.messages !== false) {
      out += ' , message: \'should be equal to one of the allowed values\' ';
    }

    if (it.opts.verbose) {
      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }

    out += ' } ';
  } else {
    out += ' {} ';
  }

  var __err = out;
  out = $$outStack.pop();

  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }

  out += ' }';

  if ($breakOnError) {
    out += ' else { ';
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/format.js":
/***/ ((module) => {

"use strict";


module.exports = function generate_format(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');

  if (it.opts.format === false) {
    if ($breakOnError) {
      out += ' if (true) { ';
    }

    return out;
  }

  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }

  var $unknownFormats = it.opts.unknownFormats,
      $allowUnknown = Array.isArray($unknownFormats);

  if ($isData) {
    var $format = 'format' + $lvl,
        $isObject = 'isObject' + $lvl,
        $formatType = 'formatType' + $lvl;
    out += ' var ' + $format + ' = formats[' + $schemaValue + ']; var ' + $isObject + ' = typeof ' + $format + ' == \'object\' && !(' + $format + ' instanceof RegExp) && ' + $format + '.validate; var ' + $formatType + ' = ' + $isObject + ' && ' + $format + '.type || \'string\'; if (' + $isObject + ') { ';

    if (it.async) {
      out += ' var async' + $lvl + ' = ' + $format + '.async; ';
    }

    out += ' ' + $format + ' = ' + $format + '.validate; } if (  ';

    if ($isData) {
      out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'string\') || ';
    }

    out += ' (';

    if ($unknownFormats != 'ignore') {
      out += ' (' + $schemaValue + ' && !' + $format + ' ';

      if ($allowUnknown) {
        out += ' && self._opts.unknownFormats.indexOf(' + $schemaValue + ') == -1 ';
      }

      out += ') || ';
    }

    out += ' (' + $format + ' && ' + $formatType + ' == \'' + $ruleType + '\' && !(typeof ' + $format + ' == \'function\' ? ';

    if (it.async) {
      out += ' (async' + $lvl + ' ? await ' + $format + '(' + $data + ') : ' + $format + '(' + $data + ')) ';
    } else {
      out += ' ' + $format + '(' + $data + ') ';
    }

    out += ' : ' + $format + '.test(' + $data + '))))) {';
  } else {
    var $format = it.formats[$schema];

    if (!$format) {
      if ($unknownFormats == 'ignore') {
        it.logger.warn('unknown format "' + $schema + '" ignored in schema at path "' + it.errSchemaPath + '"');

        if ($breakOnError) {
          out += ' if (true) { ';
        }

        return out;
      } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {
        if ($breakOnError) {
          out += ' if (true) { ';
        }

        return out;
      } else {
        throw new Error('unknown format "' + $schema + '" is used in schema at path "' + it.errSchemaPath + '"');
      }
    }

    var $isObject = typeof $format == 'object' && !($format instanceof RegExp) && $format.validate;
    var $formatType = $isObject && $format.type || 'string';

    if ($isObject) {
      var $async = $format.async === true;
      $format = $format.validate;
    }

    if ($formatType != $ruleType) {
      if ($breakOnError) {
        out += ' if (true) { ';
      }

      return out;
    }

    if ($async) {
      if (!it.async) throw new Error('async format in sync schema');
      var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';
      out += ' if (!(await ' + $formatRef + '(' + $data + '))) { ';
    } else {
      out += ' if (! ';
      var $formatRef = 'formats' + it.util.getProperty($schema);
      if ($isObject) $formatRef += '.validate';

      if (typeof $format == 'function') {
        out += ' ' + $formatRef + '(' + $data + ') ';
      } else {
        out += ' ' + $formatRef + '.test(' + $data + ') ';
      }

      out += ') { ';
    }
  }

  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = '';
  /* istanbul ignore else */

  if (it.createErrors !== false) {
    out += ' { keyword: \'' + 'format' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { format:  ';

    if ($isData) {
      out += '' + $schemaValue;
    } else {
      out += '' + it.util.toQuotedString($schema);
    }

    out += '  } ';

    if (it.opts.messages !== false) {
      out += ' , message: \'should match format "';

      if ($isData) {
        out += '\' + ' + $schemaValue + ' + \'';
      } else {
        out += '' + it.util.escapeQuotes($schema);
      }

      out += '"\' ';
    }

    if (it.opts.verbose) {
      out += ' , schema:  ';

      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + it.util.toQuotedString($schema);
      }

      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }

    out += ' } ';
  } else {
    out += ' {} ';
  }

  var __err = out;
  out = $$outStack.pop();

  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }

  out += ' } ';

  if ($breakOnError) {
    out += ' else { ';
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/if.js":
/***/ ((module) => {

"use strict";


module.exports = function generate_if(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $thenSch = it.schema['then'],
      $elseSch = it.schema['else'],
      $thenPresent = $thenSch !== undefined && (it.opts.strictKeywords ? typeof $thenSch == 'object' && Object.keys($thenSch).length > 0 || $thenSch === false : it.util.schemaHasRules($thenSch, it.RULES.all)),
      $elsePresent = $elseSch !== undefined && (it.opts.strictKeywords ? typeof $elseSch == 'object' && Object.keys($elseSch).length > 0 || $elseSch === false : it.util.schemaHasRules($elseSch, it.RULES.all)),
      $currentBaseId = $it.baseId;

  if ($thenPresent || $elsePresent) {
    var $ifClause;
    $it.createErrors = false;
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += ' var ' + $errs + ' = errors; var ' + $valid + ' = true;  ';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    out += '  ' + it.validate($it) + ' ';
    $it.baseId = $currentBaseId;
    $it.createErrors = true;
    out += '  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; }  ';
    it.compositeRule = $it.compositeRule = $wasComposite;

    if ($thenPresent) {
      out += ' if (' + $nextValid + ') {  ';
      $it.schema = it.schema['then'];
      $it.schemaPath = it.schemaPath + '.then';
      $it.errSchemaPath = it.errSchemaPath + '/then';
      out += '  ' + it.validate($it) + ' ';
      $it.baseId = $currentBaseId;
      out += ' ' + $valid + ' = ' + $nextValid + '; ';

      if ($thenPresent && $elsePresent) {
        $ifClause = 'ifClause' + $lvl;
        out += ' var ' + $ifClause + ' = \'then\'; ';
      } else {
        $ifClause = '\'then\'';
      }

      out += ' } ';

      if ($elsePresent) {
        out += ' else { ';
      }
    } else {
      out += ' if (!' + $nextValid + ') { ';
    }

    if ($elsePresent) {
      $it.schema = it.schema['else'];
      $it.schemaPath = it.schemaPath + '.else';
      $it.errSchemaPath = it.errSchemaPath + '/else';
      out += '  ' + it.validate($it) + ' ';
      $it.baseId = $currentBaseId;
      out += ' ' + $valid + ' = ' + $nextValid + '; ';

      if ($thenPresent && $elsePresent) {
        $ifClause = 'ifClause' + $lvl;
        out += ' var ' + $ifClause + ' = \'else\'; ';
      } else {
        $ifClause = '\'else\'';
      }

      out += ' } ';
    }

    out += ' if (!' + $valid + ') {   var err =   ';
    /* istanbul ignore else */

    if (it.createErrors !== false) {
      out += ' { keyword: \'' + 'if' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { failingKeyword: ' + $ifClause + ' } ';

      if (it.opts.messages !== false) {
        out += ' , message: \'should match "\' + ' + $ifClause + ' + \'" schema\' ';
      }

      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }

      out += ' } ';
    } else {
      out += ' {} ';
    }

    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';

    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError(vErrors); ';
      } else {
        out += ' validate.errors = vErrors; return false; ';
      }
    }

    out += ' }   ';

    if ($breakOnError) {
      out += ' else { ';
    }
  } else {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 //all requires must be explicit because browserify won't work with dynamic requires

module.exports = {
  '$ref': __webpack_require__("./node_modules/ajv/lib/dotjs/ref.js"),
  allOf: __webpack_require__("./node_modules/ajv/lib/dotjs/allOf.js"),
  anyOf: __webpack_require__("./node_modules/ajv/lib/dotjs/anyOf.js"),
  '$comment': __webpack_require__("./node_modules/ajv/lib/dotjs/comment.js"),
  const: __webpack_require__("./node_modules/ajv/lib/dotjs/const.js"),
  contains: __webpack_require__("./node_modules/ajv/lib/dotjs/contains.js"),
  dependencies: __webpack_require__("./node_modules/ajv/lib/dotjs/dependencies.js"),
  'enum': __webpack_require__("./node_modules/ajv/lib/dotjs/enum.js"),
  format: __webpack_require__("./node_modules/ajv/lib/dotjs/format.js"),
  'if': __webpack_require__("./node_modules/ajv/lib/dotjs/if.js"),
  items: __webpack_require__("./node_modules/ajv/lib/dotjs/items.js"),
  maximum: __webpack_require__("./node_modules/ajv/lib/dotjs/_limit.js"),
  minimum: __webpack_require__("./node_modules/ajv/lib/dotjs/_limit.js"),
  maxItems: __webpack_require__("./node_modules/ajv/lib/dotjs/_limitItems.js"),
  minItems: __webpack_require__("./node_modules/ajv/lib/dotjs/_limitItems.js"),
  maxLength: __webpack_require__("./node_modules/ajv/lib/dotjs/_limitLength.js"),
  minLength: __webpack_require__("./node_modules/ajv/lib/dotjs/_limitLength.js"),
  maxProperties: __webpack_require__("./node_modules/ajv/lib/dotjs/_limitProperties.js"),
  minProperties: __webpack_require__("./node_modules/ajv/lib/dotjs/_limitProperties.js"),
  multipleOf: __webpack_require__("./node_modules/ajv/lib/dotjs/multipleOf.js"),
  not: __webpack_require__("./node_modules/ajv/lib/dotjs/not.js"),
  oneOf: __webpack_require__("./node_modules/ajv/lib/dotjs/oneOf.js"),
  pattern: __webpack_require__("./node_modules/ajv/lib/dotjs/pattern.js"),
  properties: __webpack_require__("./node_modules/ajv/lib/dotjs/properties.js"),
  propertyNames: __webpack_require__("./node_modules/ajv/lib/dotjs/propertyNames.js"),
  required: __webpack_require__("./node_modules/ajv/lib/dotjs/required.js"),
  uniqueItems: __webpack_require__("./node_modules/ajv/lib/dotjs/uniqueItems.js"),
  validate: __webpack_require__("./node_modules/ajv/lib/dotjs/validate.js")
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/items.js":
/***/ ((module) => {

"use strict";


module.exports = function generate_items(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $idx = 'i' + $lvl,
      $dataNxt = $it.dataLevel = it.dataLevel + 1,
      $nextData = 'data' + $dataNxt,
      $currentBaseId = it.baseId;
  out += 'var ' + $errs + ' = errors;var ' + $valid + ';';

  if (Array.isArray($schema)) {
    var $additionalItems = it.schema.additionalItems;

    if ($additionalItems === false) {
      out += ' ' + $valid + ' = ' + $data + '.length <= ' + $schema.length + '; ';
      var $currErrSchemaPath = $errSchemaPath;
      $errSchemaPath = it.errSchemaPath + '/additionalItems';
      out += '  if (!' + $valid + ') {   ';
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = '';
      /* istanbul ignore else */

      if (it.createErrors !== false) {
        out += ' { keyword: \'' + 'additionalItems' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { limit: ' + $schema.length + ' } ';

        if (it.opts.messages !== false) {
          out += ' , message: \'should NOT have more than ' + $schema.length + ' items\' ';
        }

        if (it.opts.verbose) {
          out += ' , schema: false , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
        }

        out += ' } ';
      } else {
        out += ' {} ';
      }

      var __err = out;
      out = $$outStack.pop();

      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + __err + ']); ';
        } else {
          out += ' validate.errors = [' + __err + ']; return false; ';
        }
      } else {
        out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }

      out += ' } ';
      $errSchemaPath = $currErrSchemaPath;

      if ($breakOnError) {
        $closingBraces += '}';
        out += ' else { ';
      }
    }

    var arr1 = $schema;

    if (arr1) {
      var $sch,
          $i = -1,
          l1 = arr1.length - 1;

      while ($i < l1) {
        $sch = arr1[$i += 1];

        if (it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
          out += ' ' + $nextValid + ' = true; if (' + $data + '.length > ' + $i + ') { ';
          var $passData = $data + '[' + $i + ']';
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + '[' + $i + ']';
          $it.errSchemaPath = $errSchemaPath + '/' + $i;
          $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);
          $it.dataPathArr[$dataNxt] = $i;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;

          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
          } else {
            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
          }

          out += ' }  ';

          if ($breakOnError) {
            out += ' if (' + $nextValid + ') { ';
            $closingBraces += '}';
          }
        }
      }
    }

    if (typeof $additionalItems == 'object' && (it.opts.strictKeywords ? typeof $additionalItems == 'object' && Object.keys($additionalItems).length > 0 || $additionalItems === false : it.util.schemaHasRules($additionalItems, it.RULES.all))) {
      $it.schema = $additionalItems;
      $it.schemaPath = it.schemaPath + '.additionalItems';
      $it.errSchemaPath = it.errSchemaPath + '/additionalItems';
      out += ' ' + $nextValid + ' = true; if (' + $data + '.length > ' + $schema.length + ') {  for (var ' + $idx + ' = ' + $schema.length + '; ' + $idx + ' < ' + $data + '.length; ' + $idx + '++) { ';
      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
      var $passData = $data + '[' + $idx + ']';
      $it.dataPathArr[$dataNxt] = $idx;
      var $code = it.validate($it);
      $it.baseId = $currentBaseId;

      if (it.util.varOccurences($code, $nextData) < 2) {
        out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
      } else {
        out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
      }

      if ($breakOnError) {
        out += ' if (!' + $nextValid + ') break; ';
      }

      out += ' } }  ';

      if ($breakOnError) {
        out += ' if (' + $nextValid + ') { ';
        $closingBraces += '}';
      }
    }
  } else if (it.opts.strictKeywords ? typeof $schema == 'object' && Object.keys($schema).length > 0 || $schema === false : it.util.schemaHasRules($schema, it.RULES.all)) {
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += '  for (var ' + $idx + ' = ' + 0 + '; ' + $idx + ' < ' + $data + '.length; ' + $idx + '++) { ';
    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
    var $passData = $data + '[' + $idx + ']';
    $it.dataPathArr[$dataNxt] = $idx;
    var $code = it.validate($it);
    $it.baseId = $currentBaseId;

    if (it.util.varOccurences($code, $nextData) < 2) {
      out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
    } else {
      out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
    }

    if ($breakOnError) {
      out += ' if (!' + $nextValid + ') break; ';
    }

    out += ' }';
  }

  if ($breakOnError) {
    out += ' ' + $closingBraces + ' if (' + $errs + ' == errors) {';
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/multipleOf.js":
/***/ ((module) => {

"use strict";


module.exports = function generate_multipleOf(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }

  if (!($isData || typeof $schema == 'number')) {
    throw new Error($keyword + ' must be number');
  }

  out += 'var division' + $lvl + ';if (';

  if ($isData) {
    out += ' ' + $schemaValue + ' !== undefined && ( typeof ' + $schemaValue + ' != \'number\' || ';
  }

  out += ' (division' + $lvl + ' = ' + $data + ' / ' + $schemaValue + ', ';

  if (it.opts.multipleOfPrecision) {
    out += ' Math.abs(Math.round(division' + $lvl + ') - division' + $lvl + ') > 1e-' + it.opts.multipleOfPrecision + ' ';
  } else {
    out += ' division' + $lvl + ' !== parseInt(division' + $lvl + ') ';
  }

  out += ' ) ';

  if ($isData) {
    out += '  )  ';
  }

  out += ' ) {   ';
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = '';
  /* istanbul ignore else */

  if (it.createErrors !== false) {
    out += ' { keyword: \'' + 'multipleOf' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { multipleOf: ' + $schemaValue + ' } ';

    if (it.opts.messages !== false) {
      out += ' , message: \'should be multiple of ';

      if ($isData) {
        out += '\' + ' + $schemaValue;
      } else {
        out += '' + $schemaValue + '\'';
      }
    }

    if (it.opts.verbose) {
      out += ' , schema:  ';

      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + $schema;
      }

      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }

    out += ' } ';
  } else {
    out += ' {} ';
  }

  var __err = out;
  out = $$outStack.pop();

  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }

  out += '} ';

  if ($breakOnError) {
    out += ' else { ';
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/not.js":
/***/ ((module) => {

"use strict";


module.exports = function generate_not(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  $it.level++;
  var $nextValid = 'valid' + $it.level;

  if (it.opts.strictKeywords ? typeof $schema == 'object' && Object.keys($schema).length > 0 || $schema === false : it.util.schemaHasRules($schema, it.RULES.all)) {
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += ' var ' + $errs + ' = errors;  ';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    $it.createErrors = false;
    var $allErrorsOption;

    if ($it.opts.allErrors) {
      $allErrorsOption = $it.opts.allErrors;
      $it.opts.allErrors = false;
    }

    out += ' ' + it.validate($it) + ' ';
    $it.createErrors = true;
    if ($allErrorsOption) $it.opts.allErrors = $allErrorsOption;
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' if (' + $nextValid + ') {   ';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    /* istanbul ignore else */

    if (it.createErrors !== false) {
      out += ' { keyword: \'' + 'not' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';

      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT be valid\' ';
      }

      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }

      out += ' } ';
    } else {
      out += ' {} ';
    }

    var __err = out;
    out = $$outStack.pop();

    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + __err + ']); ';
      } else {
        out += ' validate.errors = [' + __err + ']; return false; ';
      }
    } else {
      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }

    out += ' } else {  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; } ';

    if (it.opts.allErrors) {
      out += ' } ';
    }
  } else {
    out += '  var err =   ';
    /* istanbul ignore else */

    if (it.createErrors !== false) {
      out += ' { keyword: \'' + 'not' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';

      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT be valid\' ';
      }

      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }

      out += ' } ';
    } else {
      out += ' {} ';
    }

    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';

    if ($breakOnError) {
      out += ' if (false) { ';
    }
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/oneOf.js":
/***/ ((module) => {

"use strict";


module.exports = function generate_oneOf(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $currentBaseId = $it.baseId,
      $prevValid = 'prevValid' + $lvl,
      $passingSchemas = 'passingSchemas' + $lvl;
  out += 'var ' + $errs + ' = errors , ' + $prevValid + ' = false , ' + $valid + ' = false , ' + $passingSchemas + ' = null; ';
  var $wasComposite = it.compositeRule;
  it.compositeRule = $it.compositeRule = true;
  var arr1 = $schema;

  if (arr1) {
    var $sch,
        $i = -1,
        l1 = arr1.length - 1;

    while ($i < l1) {
      $sch = arr1[$i += 1];

      if (it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + '[' + $i + ']';
        $it.errSchemaPath = $errSchemaPath + '/' + $i;
        out += '  ' + it.validate($it) + ' ';
        $it.baseId = $currentBaseId;
      } else {
        out += ' var ' + $nextValid + ' = true; ';
      }

      if ($i) {
        out += ' if (' + $nextValid + ' && ' + $prevValid + ') { ' + $valid + ' = false; ' + $passingSchemas + ' = [' + $passingSchemas + ', ' + $i + ']; } else { ';
        $closingBraces += '}';
      }

      out += ' if (' + $nextValid + ') { ' + $valid + ' = ' + $prevValid + ' = true; ' + $passingSchemas + ' = ' + $i + '; }';
    }
  }

  it.compositeRule = $it.compositeRule = $wasComposite;
  out += '' + $closingBraces + 'if (!' + $valid + ') {   var err =   ';
  /* istanbul ignore else */

  if (it.createErrors !== false) {
    out += ' { keyword: \'' + 'oneOf' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { passingSchemas: ' + $passingSchemas + ' } ';

    if (it.opts.messages !== false) {
      out += ' , message: \'should match exactly one schema in oneOf\' ';
    }

    if (it.opts.verbose) {
      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }

    out += ' } ';
  } else {
    out += ' {} ';
  }

  out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';

  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError(vErrors); ';
    } else {
      out += ' validate.errors = vErrors; return false; ';
    }
  }

  out += '} else {  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; }';

  if (it.opts.allErrors) {
    out += ' } ';
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/pattern.js":
/***/ ((module) => {

"use strict";


module.exports = function generate_pattern(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }

  var $regexp = $isData ? '(new RegExp(' + $schemaValue + '))' : it.usePattern($schema);
  out += 'if ( ';

  if ($isData) {
    out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'string\') || ';
  }

  out += ' !' + $regexp + '.test(' + $data + ') ) {   ';
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = '';
  /* istanbul ignore else */

  if (it.createErrors !== false) {
    out += ' { keyword: \'' + 'pattern' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { pattern:  ';

    if ($isData) {
      out += '' + $schemaValue;
    } else {
      out += '' + it.util.toQuotedString($schema);
    }

    out += '  } ';

    if (it.opts.messages !== false) {
      out += ' , message: \'should match pattern "';

      if ($isData) {
        out += '\' + ' + $schemaValue + ' + \'';
      } else {
        out += '' + it.util.escapeQuotes($schema);
      }

      out += '"\' ';
    }

    if (it.opts.verbose) {
      out += ' , schema:  ';

      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + it.util.toQuotedString($schema);
      }

      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }

    out += ' } ';
  } else {
    out += ' {} ';
  }

  var __err = out;
  out = $$outStack.pop();

  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }

  out += '} ';

  if ($breakOnError) {
    out += ' else { ';
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/properties.js":
/***/ ((module) => {

"use strict";


module.exports = function generate_properties(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $key = 'key' + $lvl,
      $idx = 'idx' + $lvl,
      $dataNxt = $it.dataLevel = it.dataLevel + 1,
      $nextData = 'data' + $dataNxt,
      $dataProperties = 'dataProperties' + $lvl;
  var $schemaKeys = Object.keys($schema || {}).filter(notProto),
      $pProperties = it.schema.patternProperties || {},
      $pPropertyKeys = Object.keys($pProperties).filter(notProto),
      $aProperties = it.schema.additionalProperties,
      $someProperties = $schemaKeys.length || $pPropertyKeys.length,
      $noAdditional = $aProperties === false,
      $additionalIsSchema = typeof $aProperties == 'object' && Object.keys($aProperties).length,
      $removeAdditional = it.opts.removeAdditional,
      $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,
      $ownProperties = it.opts.ownProperties,
      $currentBaseId = it.baseId;
  var $required = it.schema.required;

  if ($required && !(it.opts.$data && $required.$data) && $required.length < it.opts.loopRequired) {
    var $requiredHash = it.util.toHash($required);
  }

  function notProto(p) {
    return p !== '__proto__';
  }

  out += 'var ' + $errs + ' = errors;var ' + $nextValid + ' = true;';

  if ($ownProperties) {
    out += ' var ' + $dataProperties + ' = undefined;';
  }

  if ($checkAdditional) {
    if ($ownProperties) {
      out += ' ' + $dataProperties + ' = ' + $dataProperties + ' || Object.keys(' + $data + '); for (var ' + $idx + '=0; ' + $idx + '<' + $dataProperties + '.length; ' + $idx + '++) { var ' + $key + ' = ' + $dataProperties + '[' + $idx + ']; ';
    } else {
      out += ' for (var ' + $key + ' in ' + $data + ') { ';
    }

    if ($someProperties) {
      out += ' var isAdditional' + $lvl + ' = !(false ';

      if ($schemaKeys.length) {
        if ($schemaKeys.length > 8) {
          out += ' || validate.schema' + $schemaPath + '.hasOwnProperty(' + $key + ') ';
        } else {
          var arr1 = $schemaKeys;

          if (arr1) {
            var $propertyKey,
                i1 = -1,
                l1 = arr1.length - 1;

            while (i1 < l1) {
              $propertyKey = arr1[i1 += 1];
              out += ' || ' + $key + ' == ' + it.util.toQuotedString($propertyKey) + ' ';
            }
          }
        }
      }

      if ($pPropertyKeys.length) {
        var arr2 = $pPropertyKeys;

        if (arr2) {
          var $pProperty,
              $i = -1,
              l2 = arr2.length - 1;

          while ($i < l2) {
            $pProperty = arr2[$i += 1];
            out += ' || ' + it.usePattern($pProperty) + '.test(' + $key + ') ';
          }
        }
      }

      out += ' ); if (isAdditional' + $lvl + ') { ';
    }

    if ($removeAdditional == 'all') {
      out += ' delete ' + $data + '[' + $key + ']; ';
    } else {
      var $currentErrorPath = it.errorPath;
      var $additionalProperty = '\' + ' + $key + ' + \'';

      if (it.opts._errorDataPathProperty) {
        it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
      }

      if ($noAdditional) {
        if ($removeAdditional) {
          out += ' delete ' + $data + '[' + $key + ']; ';
        } else {
          out += ' ' + $nextValid + ' = false; ';
          var $currErrSchemaPath = $errSchemaPath;
          $errSchemaPath = it.errSchemaPath + '/additionalProperties';
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = '';
          /* istanbul ignore else */

          if (it.createErrors !== false) {
            out += ' { keyword: \'' + 'additionalProperties' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { additionalProperty: \'' + $additionalProperty + '\' } ';

            if (it.opts.messages !== false) {
              out += ' , message: \'';

              if (it.opts._errorDataPathProperty) {
                out += 'is an invalid additional property';
              } else {
                out += 'should NOT have additional properties';
              }

              out += '\' ';
            }

            if (it.opts.verbose) {
              out += ' , schema: false , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
            }

            out += ' } ';
          } else {
            out += ' {} ';
          }

          var __err = out;
          out = $$outStack.pop();

          if (!it.compositeRule && $breakOnError) {
            /* istanbul ignore if */
            if (it.async) {
              out += ' throw new ValidationError([' + __err + ']); ';
            } else {
              out += ' validate.errors = [' + __err + ']; return false; ';
            }
          } else {
            out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          }

          $errSchemaPath = $currErrSchemaPath;

          if ($breakOnError) {
            out += ' break; ';
          }
        }
      } else if ($additionalIsSchema) {
        if ($removeAdditional == 'failing') {
          out += ' var ' + $errs + ' = errors;  ';
          var $wasComposite = it.compositeRule;
          it.compositeRule = $it.compositeRule = true;
          $it.schema = $aProperties;
          $it.schemaPath = it.schemaPath + '.additionalProperties';
          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
          var $passData = $data + '[' + $key + ']';
          $it.dataPathArr[$dataNxt] = $key;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;

          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
          } else {
            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
          }

          out += ' if (!' + $nextValid + ') { errors = ' + $errs + '; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete ' + $data + '[' + $key + ']; }  ';
          it.compositeRule = $it.compositeRule = $wasComposite;
        } else {
          $it.schema = $aProperties;
          $it.schemaPath = it.schemaPath + '.additionalProperties';
          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
          var $passData = $data + '[' + $key + ']';
          $it.dataPathArr[$dataNxt] = $key;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;

          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
          } else {
            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
          }

          if ($breakOnError) {
            out += ' if (!' + $nextValid + ') break; ';
          }
        }
      }

      it.errorPath = $currentErrorPath;
    }

    if ($someProperties) {
      out += ' } ';
    }

    out += ' }  ';

    if ($breakOnError) {
      out += ' if (' + $nextValid + ') { ';
      $closingBraces += '}';
    }
  }

  var $useDefaults = it.opts.useDefaults && !it.compositeRule;

  if ($schemaKeys.length) {
    var arr3 = $schemaKeys;

    if (arr3) {
      var $propertyKey,
          i3 = -1,
          l3 = arr3.length - 1;

      while (i3 < l3) {
        $propertyKey = arr3[i3 += 1];
        var $sch = $schema[$propertyKey];

        if (it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
          var $prop = it.util.getProperty($propertyKey),
              $passData = $data + $prop,
              $hasDefault = $useDefaults && $sch.default !== undefined;
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + $prop;
          $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($propertyKey);
          $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);
          $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;

          if (it.util.varOccurences($code, $nextData) < 2) {
            $code = it.util.varReplace($code, $nextData, $passData);
            var $useData = $passData;
          } else {
            var $useData = $nextData;
            out += ' var ' + $nextData + ' = ' + $passData + '; ';
          }

          if ($hasDefault) {
            out += ' ' + $code + ' ';
          } else {
            if ($requiredHash && $requiredHash[$propertyKey]) {
              out += ' if ( ' + $useData + ' === undefined ';

              if ($ownProperties) {
                out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($propertyKey) + '\') ';
              }

              out += ') { ' + $nextValid + ' = false; ';
              var $currentErrorPath = it.errorPath,
                  $currErrSchemaPath = $errSchemaPath,
                  $missingProperty = it.util.escapeQuotes($propertyKey);

              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
              }

              $errSchemaPath = it.errSchemaPath + '/required';
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = '';
              /* istanbul ignore else */

              if (it.createErrors !== false) {
                out += ' { keyword: \'' + 'required' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';

                if (it.opts.messages !== false) {
                  out += ' , message: \'';

                  if (it.opts._errorDataPathProperty) {
                    out += 'is a required property';
                  } else {
                    out += 'should have required property \\\'' + $missingProperty + '\\\'';
                  }

                  out += '\' ';
                }

                if (it.opts.verbose) {
                  out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                }

                out += ' } ';
              } else {
                out += ' {} ';
              }

              var __err = out;
              out = $$outStack.pop();

              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + __err + ']); ';
                } else {
                  out += ' validate.errors = [' + __err + ']; return false; ';
                }
              } else {
                out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }

              $errSchemaPath = $currErrSchemaPath;
              it.errorPath = $currentErrorPath;
              out += ' } else { ';
            } else {
              if ($breakOnError) {
                out += ' if ( ' + $useData + ' === undefined ';

                if ($ownProperties) {
                  out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($propertyKey) + '\') ';
                }

                out += ') { ' + $nextValid + ' = true; } else { ';
              } else {
                out += ' if (' + $useData + ' !== undefined ';

                if ($ownProperties) {
                  out += ' &&   Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($propertyKey) + '\') ';
                }

                out += ' ) { ';
              }
            }

            out += ' ' + $code + ' } ';
          }
        }

        if ($breakOnError) {
          out += ' if (' + $nextValid + ') { ';
          $closingBraces += '}';
        }
      }
    }
  }

  if ($pPropertyKeys.length) {
    var arr4 = $pPropertyKeys;

    if (arr4) {
      var $pProperty,
          i4 = -1,
          l4 = arr4.length - 1;

      while (i4 < l4) {
        $pProperty = arr4[i4 += 1];
        var $sch = $pProperties[$pProperty];

        if (it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
          $it.schema = $sch;
          $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);
          $it.errSchemaPath = it.errSchemaPath + '/patternProperties/' + it.util.escapeFragment($pProperty);

          if ($ownProperties) {
            out += ' ' + $dataProperties + ' = ' + $dataProperties + ' || Object.keys(' + $data + '); for (var ' + $idx + '=0; ' + $idx + '<' + $dataProperties + '.length; ' + $idx + '++) { var ' + $key + ' = ' + $dataProperties + '[' + $idx + ']; ';
          } else {
            out += ' for (var ' + $key + ' in ' + $data + ') { ';
          }

          out += ' if (' + it.usePattern($pProperty) + '.test(' + $key + ')) { ';
          $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
          var $passData = $data + '[' + $key + ']';
          $it.dataPathArr[$dataNxt] = $key;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;

          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
          } else {
            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
          }

          if ($breakOnError) {
            out += ' if (!' + $nextValid + ') break; ';
          }

          out += ' } ';

          if ($breakOnError) {
            out += ' else ' + $nextValid + ' = true; ';
          }

          out += ' }  ';

          if ($breakOnError) {
            out += ' if (' + $nextValid + ') { ';
            $closingBraces += '}';
          }
        }
      }
    }
  }

  if ($breakOnError) {
    out += ' ' + $closingBraces + ' if (' + $errs + ' == errors) {';
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/propertyNames.js":
/***/ ((module) => {

"use strict";


module.exports = function generate_propertyNames(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  out += 'var ' + $errs + ' = errors;';

  if (it.opts.strictKeywords ? typeof $schema == 'object' && Object.keys($schema).length > 0 || $schema === false : it.util.schemaHasRules($schema, it.RULES.all)) {
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    var $key = 'key' + $lvl,
        $idx = 'idx' + $lvl,
        $i = 'i' + $lvl,
        $invalidName = '\' + ' + $key + ' + \'',
        $dataNxt = $it.dataLevel = it.dataLevel + 1,
        $nextData = 'data' + $dataNxt,
        $dataProperties = 'dataProperties' + $lvl,
        $ownProperties = it.opts.ownProperties,
        $currentBaseId = it.baseId;

    if ($ownProperties) {
      out += ' var ' + $dataProperties + ' = undefined; ';
    }

    if ($ownProperties) {
      out += ' ' + $dataProperties + ' = ' + $dataProperties + ' || Object.keys(' + $data + '); for (var ' + $idx + '=0; ' + $idx + '<' + $dataProperties + '.length; ' + $idx + '++) { var ' + $key + ' = ' + $dataProperties + '[' + $idx + ']; ';
    } else {
      out += ' for (var ' + $key + ' in ' + $data + ') { ';
    }

    out += ' var startErrs' + $lvl + ' = errors; ';
    var $passData = $key;
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var $code = it.validate($it);
    $it.baseId = $currentBaseId;

    if (it.util.varOccurences($code, $nextData) < 2) {
      out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
    } else {
      out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
    }

    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' if (!' + $nextValid + ') { for (var ' + $i + '=startErrs' + $lvl + '; ' + $i + '<errors; ' + $i + '++) { vErrors[' + $i + '].propertyName = ' + $key + '; }   var err =   ';
    /* istanbul ignore else */

    if (it.createErrors !== false) {
      out += ' { keyword: \'' + 'propertyNames' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { propertyName: \'' + $invalidName + '\' } ';

      if (it.opts.messages !== false) {
        out += ' , message: \'property name \\\'' + $invalidName + '\\\' is invalid\' ';
      }

      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }

      out += ' } ';
    } else {
      out += ' {} ';
    }

    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';

    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError(vErrors); ';
      } else {
        out += ' validate.errors = vErrors; return false; ';
      }
    }

    if ($breakOnError) {
      out += ' break; ';
    }

    out += ' } }';
  }

  if ($breakOnError) {
    out += ' ' + $closingBraces + ' if (' + $errs + ' == errors) {';
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/ref.js":
/***/ ((module) => {

"use strict";


module.exports = function generate_ref(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $async, $refCode;

  if ($schema == '#' || $schema == '#/') {
    if (it.isRoot) {
      $async = it.async;
      $refCode = 'validate';
    } else {
      $async = it.root.schema.$async === true;
      $refCode = 'root.refVal[0]';
    }
  } else {
    var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot);

    if ($refVal === undefined) {
      var $message = it.MissingRefError.message(it.baseId, $schema);

      if (it.opts.missingRefs == 'fail') {
        it.logger.error($message);
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = '';
        /* istanbul ignore else */

        if (it.createErrors !== false) {
          out += ' { keyword: \'' + '$ref' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { ref: \'' + it.util.escapeQuotes($schema) + '\' } ';

          if (it.opts.messages !== false) {
            out += ' , message: \'can\\\'t resolve reference ' + it.util.escapeQuotes($schema) + '\' ';
          }

          if (it.opts.verbose) {
            out += ' , schema: ' + it.util.toQuotedString($schema) + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
          }

          out += ' } ';
        } else {
          out += ' {} ';
        }

        var __err = out;
        out = $$outStack.pop();

        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + __err + ']); ';
          } else {
            out += ' validate.errors = [' + __err + ']; return false; ';
          }
        } else {
          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }

        if ($breakOnError) {
          out += ' if (false) { ';
        }
      } else if (it.opts.missingRefs == 'ignore') {
        it.logger.warn($message);

        if ($breakOnError) {
          out += ' if (true) { ';
        }
      } else {
        throw new it.MissingRefError(it.baseId, $schema, $message);
      }
    } else if ($refVal.inline) {
      var $it = it.util.copy(it);
      $it.level++;
      var $nextValid = 'valid' + $it.level;
      $it.schema = $refVal.schema;
      $it.schemaPath = '';
      $it.errSchemaPath = $schema;
      var $code = it.validate($it).replace(/validate\.schema/g, $refVal.code);
      out += ' ' + $code + ' ';

      if ($breakOnError) {
        out += ' if (' + $nextValid + ') { ';
      }
    } else {
      $async = $refVal.$async === true || it.async && $refVal.$async !== false;
      $refCode = $refVal.code;
    }
  }

  if ($refCode) {
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';

    if (it.opts.passContext) {
      out += ' ' + $refCode + '.call(this, ';
    } else {
      out += ' ' + $refCode + '( ';
    }

    out += ' ' + $data + ', (dataPath || \'\')';

    if (it.errorPath != '""') {
      out += ' + ' + it.errorPath;
    }

    var $parentData = $dataLvl ? 'data' + ($dataLvl - 1 || '') : 'parentData',
        $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
    out += ' , ' + $parentData + ' , ' + $parentDataProperty + ', rootData)  ';
    var __callValidate = out;
    out = $$outStack.pop();

    if ($async) {
      if (!it.async) throw new Error('async schema referenced by sync schema');

      if ($breakOnError) {
        out += ' var ' + $valid + '; ';
      }

      out += ' try { await ' + __callValidate + '; ';

      if ($breakOnError) {
        out += ' ' + $valid + ' = true; ';
      }

      out += ' } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ';

      if ($breakOnError) {
        out += ' ' + $valid + ' = false; ';
      }

      out += ' } ';

      if ($breakOnError) {
        out += ' if (' + $valid + ') { ';
      }
    } else {
      out += ' if (!' + __callValidate + ') { if (vErrors === null) vErrors = ' + $refCode + '.errors; else vErrors = vErrors.concat(' + $refCode + '.errors); errors = vErrors.length; } ';

      if ($breakOnError) {
        out += ' else { ';
      }
    }
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/required.js":
/***/ ((module) => {

"use strict";


module.exports = function generate_required(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }

  var $vSchema = 'schema' + $lvl;

  if (!$isData) {
    if ($schema.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {
      var $required = [];
      var arr1 = $schema;

      if (arr1) {
        var $property,
            i1 = -1,
            l1 = arr1.length - 1;

        while (i1 < l1) {
          $property = arr1[i1 += 1];
          var $propertySch = it.schema.properties[$property];

          if (!($propertySch && (it.opts.strictKeywords ? typeof $propertySch == 'object' && Object.keys($propertySch).length > 0 || $propertySch === false : it.util.schemaHasRules($propertySch, it.RULES.all)))) {
            $required[$required.length] = $property;
          }
        }
      }
    } else {
      var $required = $schema;
    }
  }

  if ($isData || $required.length) {
    var $currentErrorPath = it.errorPath,
        $loopRequired = $isData || $required.length >= it.opts.loopRequired,
        $ownProperties = it.opts.ownProperties;

    if ($breakOnError) {
      out += ' var missing' + $lvl + '; ';

      if ($loopRequired) {
        if (!$isData) {
          out += ' var ' + $vSchema + ' = validate.schema' + $schemaPath + '; ';
        }

        var $i = 'i' + $lvl,
            $propertyPath = 'schema' + $lvl + '[' + $i + ']',
            $missingProperty = '\' + ' + $propertyPath + ' + \'';

        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
        }

        out += ' var ' + $valid + ' = true; ';

        if ($isData) {
          out += ' if (schema' + $lvl + ' === undefined) ' + $valid + ' = true; else if (!Array.isArray(schema' + $lvl + ')) ' + $valid + ' = false; else {';
        }

        out += ' for (var ' + $i + ' = 0; ' + $i + ' < ' + $vSchema + '.length; ' + $i + '++) { ' + $valid + ' = ' + $data + '[' + $vSchema + '[' + $i + ']] !== undefined ';

        if ($ownProperties) {
          out += ' &&   Object.prototype.hasOwnProperty.call(' + $data + ', ' + $vSchema + '[' + $i + ']) ';
        }

        out += '; if (!' + $valid + ') break; } ';

        if ($isData) {
          out += '  }  ';
        }

        out += '  if (!' + $valid + ') {   ';
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = '';
        /* istanbul ignore else */

        if (it.createErrors !== false) {
          out += ' { keyword: \'' + 'required' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';

          if (it.opts.messages !== false) {
            out += ' , message: \'';

            if (it.opts._errorDataPathProperty) {
              out += 'is a required property';
            } else {
              out += 'should have required property \\\'' + $missingProperty + '\\\'';
            }

            out += '\' ';
          }

          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
          }

          out += ' } ';
        } else {
          out += ' {} ';
        }

        var __err = out;
        out = $$outStack.pop();

        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + __err + ']); ';
          } else {
            out += ' validate.errors = [' + __err + ']; return false; ';
          }
        } else {
          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }

        out += ' } else { ';
      } else {
        out += ' if ( ';
        var arr2 = $required;

        if (arr2) {
          var $propertyKey,
              $i = -1,
              l2 = arr2.length - 1;

          while ($i < l2) {
            $propertyKey = arr2[$i += 1];

            if ($i) {
              out += ' || ';
            }

            var $prop = it.util.getProperty($propertyKey),
                $useData = $data + $prop;
            out += ' ( ( ' + $useData + ' === undefined ';

            if ($ownProperties) {
              out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($propertyKey) + '\') ';
            }

            out += ') && (missing' + $lvl + ' = ' + it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop) + ') ) ';
          }
        }

        out += ') {  ';
        var $propertyPath = 'missing' + $lvl,
            $missingProperty = '\' + ' + $propertyPath + ' + \'';

        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
        }

        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = '';
        /* istanbul ignore else */

        if (it.createErrors !== false) {
          out += ' { keyword: \'' + 'required' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';

          if (it.opts.messages !== false) {
            out += ' , message: \'';

            if (it.opts._errorDataPathProperty) {
              out += 'is a required property';
            } else {
              out += 'should have required property \\\'' + $missingProperty + '\\\'';
            }

            out += '\' ';
          }

          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
          }

          out += ' } ';
        } else {
          out += ' {} ';
        }

        var __err = out;
        out = $$outStack.pop();

        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + __err + ']); ';
          } else {
            out += ' validate.errors = [' + __err + ']; return false; ';
          }
        } else {
          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }

        out += ' } else { ';
      }
    } else {
      if ($loopRequired) {
        if (!$isData) {
          out += ' var ' + $vSchema + ' = validate.schema' + $schemaPath + '; ';
        }

        var $i = 'i' + $lvl,
            $propertyPath = 'schema' + $lvl + '[' + $i + ']',
            $missingProperty = '\' + ' + $propertyPath + ' + \'';

        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
        }

        if ($isData) {
          out += ' if (' + $vSchema + ' && !Array.isArray(' + $vSchema + ')) {  var err =   ';
          /* istanbul ignore else */

          if (it.createErrors !== false) {
            out += ' { keyword: \'' + 'required' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';

            if (it.opts.messages !== false) {
              out += ' , message: \'';

              if (it.opts._errorDataPathProperty) {
                out += 'is a required property';
              } else {
                out += 'should have required property \\\'' + $missingProperty + '\\\'';
              }

              out += '\' ';
            }

            if (it.opts.verbose) {
              out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
            }

            out += ' } ';
          } else {
            out += ' {} ';
          }

          out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (' + $vSchema + ' !== undefined) { ';
        }

        out += ' for (var ' + $i + ' = 0; ' + $i + ' < ' + $vSchema + '.length; ' + $i + '++) { if (' + $data + '[' + $vSchema + '[' + $i + ']] === undefined ';

        if ($ownProperties) {
          out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', ' + $vSchema + '[' + $i + ']) ';
        }

        out += ') {  var err =   ';
        /* istanbul ignore else */

        if (it.createErrors !== false) {
          out += ' { keyword: \'' + 'required' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';

          if (it.opts.messages !== false) {
            out += ' , message: \'';

            if (it.opts._errorDataPathProperty) {
              out += 'is a required property';
            } else {
              out += 'should have required property \\\'' + $missingProperty + '\\\'';
            }

            out += '\' ';
          }

          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
          }

          out += ' } ';
        } else {
          out += ' {} ';
        }

        out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ';

        if ($isData) {
          out += '  }  ';
        }
      } else {
        var arr3 = $required;

        if (arr3) {
          var $propertyKey,
              i3 = -1,
              l3 = arr3.length - 1;

          while (i3 < l3) {
            $propertyKey = arr3[i3 += 1];
            var $prop = it.util.getProperty($propertyKey),
                $missingProperty = it.util.escapeQuotes($propertyKey),
                $useData = $data + $prop;

            if (it.opts._errorDataPathProperty) {
              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
            }

            out += ' if ( ' + $useData + ' === undefined ';

            if ($ownProperties) {
              out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($propertyKey) + '\') ';
            }

            out += ') {  var err =   ';
            /* istanbul ignore else */

            if (it.createErrors !== false) {
              out += ' { keyword: \'' + 'required' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';

              if (it.opts.messages !== false) {
                out += ' , message: \'';

                if (it.opts._errorDataPathProperty) {
                  out += 'is a required property';
                } else {
                  out += 'should have required property \\\'' + $missingProperty + '\\\'';
                }

                out += '\' ';
              }

              if (it.opts.verbose) {
                out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
              }

              out += ' } ';
            } else {
              out += ' {} ';
            }

            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
          }
        }
      }
    }

    it.errorPath = $currentErrorPath;
  } else if ($breakOnError) {
    out += ' if (true) {';
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/uniqueItems.js":
/***/ ((module) => {

"use strict";


module.exports = function generate_uniqueItems(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }

  if (($schema || $isData) && it.opts.uniqueItems !== false) {
    if ($isData) {
      out += ' var ' + $valid + '; if (' + $schemaValue + ' === false || ' + $schemaValue + ' === undefined) ' + $valid + ' = true; else if (typeof ' + $schemaValue + ' != \'boolean\') ' + $valid + ' = false; else { ';
    }

    out += ' var i = ' + $data + '.length , ' + $valid + ' = true , j; if (i > 1) { ';
    var $itemType = it.schema.items && it.schema.items.type,
        $typeIsArray = Array.isArray($itemType);

    if (!$itemType || $itemType == 'object' || $itemType == 'array' || $typeIsArray && ($itemType.indexOf('object') >= 0 || $itemType.indexOf('array') >= 0)) {
      out += ' outer: for (;i--;) { for (j = i; j--;) { if (equal(' + $data + '[i], ' + $data + '[j])) { ' + $valid + ' = false; break outer; } } } ';
    } else {
      out += ' var itemIndices = {}, item; for (;i--;) { var item = ' + $data + '[i]; ';
      var $method = 'checkDataType' + ($typeIsArray ? 's' : '');
      out += ' if (' + it.util[$method]($itemType, 'item', it.opts.strictNumbers, true) + ') continue; ';

      if ($typeIsArray) {
        out += ' if (typeof item == \'string\') item = \'"\' + item; ';
      }

      out += ' if (typeof itemIndices[item] == \'number\') { ' + $valid + ' = false; j = itemIndices[item]; break; } itemIndices[item] = i; } ';
    }

    out += ' } ';

    if ($isData) {
      out += '  }  ';
    }

    out += ' if (!' + $valid + ') {   ';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    /* istanbul ignore else */

    if (it.createErrors !== false) {
      out += ' { keyword: \'' + 'uniqueItems' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { i: i, j: j } ';

      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT have duplicate items (items ## \' + j + \' and \' + i + \' are identical)\' ';
      }

      if (it.opts.verbose) {
        out += ' , schema:  ';

        if ($isData) {
          out += 'validate.schema' + $schemaPath;
        } else {
          out += '' + $schema;
        }

        out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }

      out += ' } ';
    } else {
      out += ' {} ';
    }

    var __err = out;
    out = $$outStack.pop();

    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + __err + ']); ';
      } else {
        out += ' validate.errors = [' + __err + ']; return false; ';
      }
    } else {
      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }

    out += ' } ';

    if ($breakOnError) {
      out += ' else { ';
    }
  } else {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/validate.js":
/***/ ((module) => {

"use strict";


module.exports = function generate_validate(it, $keyword, $ruleType) {
  var out = '';

  var $async = it.schema.$async === true,
      $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref'),
      $id = it.self._getId(it.schema);

  if (it.opts.strictKeywords) {
    var $unknownKwd = it.util.schemaUnknownRules(it.schema, it.RULES.keywords);

    if ($unknownKwd) {
      var $keywordsMsg = 'unknown keyword: ' + $unknownKwd;
      if (it.opts.strictKeywords === 'log') it.logger.warn($keywordsMsg);else throw new Error($keywordsMsg);
    }
  }

  if (it.isTop) {
    out += ' var validate = ';

    if ($async) {
      it.async = true;
      out += 'async ';
    }

    out += 'function(data, dataPath, parentData, parentDataProperty, rootData) { \'use strict\'; ';

    if ($id && (it.opts.sourceCode || it.opts.processCode)) {
      out += ' ' + ('/\*# sourceURL=' + $id + ' */') + ' ';
    }
  }

  if (typeof it.schema == 'boolean' || !($refKeywords || it.schema.$ref)) {
    var $keyword = 'false schema';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;

    if (it.schema === false) {
      if (it.isTop) {
        $breakOnError = true;
      } else {
        out += ' var ' + $valid + ' = false; ';
      }

      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = '';
      /* istanbul ignore else */

      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ($errorKeyword || 'false schema') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';

        if (it.opts.messages !== false) {
          out += ' , message: \'boolean schema is false\' ';
        }

        if (it.opts.verbose) {
          out += ' , schema: false , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
        }

        out += ' } ';
      } else {
        out += ' {} ';
      }

      var __err = out;
      out = $$outStack.pop();

      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + __err + ']); ';
        } else {
          out += ' validate.errors = [' + __err + ']; return false; ';
        }
      } else {
        out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
    } else {
      if (it.isTop) {
        if ($async) {
          out += ' return data; ';
        } else {
          out += ' validate.errors = null; return true; ';
        }
      } else {
        out += ' var ' + $valid + ' = true; ';
      }
    }

    if (it.isTop) {
      out += ' }; return validate; ';
    }

    return out;
  }

  if (it.isTop) {
    var $top = it.isTop,
        $lvl = it.level = 0,
        $dataLvl = it.dataLevel = 0,
        $data = 'data';
    it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));
    it.baseId = it.baseId || it.rootId;
    delete it.isTop;
    it.dataPathArr = [""];

    if (it.schema.default !== undefined && it.opts.useDefaults && it.opts.strictDefaults) {
      var $defaultMsg = 'default is ignored in the schema root';
      if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);else throw new Error($defaultMsg);
    }

    out += ' var vErrors = null; ';
    out += ' var errors = 0;     ';
    out += ' if (rootData === undefined) rootData = data; ';
  } else {
    var $lvl = it.level,
        $dataLvl = it.dataLevel,
        $data = 'data' + ($dataLvl || '');
    if ($id) it.baseId = it.resolve.url(it.baseId, $id);
    if ($async && !it.async) throw new Error('async schema in sync schema');
    out += ' var errs_' + $lvl + ' = errors;';
  }

  var $valid = 'valid' + $lvl,
      $breakOnError = !it.opts.allErrors,
      $closingBraces1 = '',
      $closingBraces2 = '';
  var $errorKeyword;
  var $typeSchema = it.schema.type,
      $typeIsArray = Array.isArray($typeSchema);

  if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {
    if ($typeIsArray) {
      if ($typeSchema.indexOf('null') == -1) $typeSchema = $typeSchema.concat('null');
    } else if ($typeSchema != 'null') {
      $typeSchema = [$typeSchema, 'null'];
      $typeIsArray = true;
    }
  }

  if ($typeIsArray && $typeSchema.length == 1) {
    $typeSchema = $typeSchema[0];
    $typeIsArray = false;
  }

  if (it.schema.$ref && $refKeywords) {
    if (it.opts.extendRefs == 'fail') {
      throw new Error('$ref: validation keywords used in schema at path "' + it.errSchemaPath + '" (see option extendRefs)');
    } else if (it.opts.extendRefs !== true) {
      $refKeywords = false;
      it.logger.warn('$ref: keywords ignored in schema at path "' + it.errSchemaPath + '"');
    }
  }

  if (it.schema.$comment && it.opts.$comment) {
    out += ' ' + it.RULES.all.$comment.code(it, '$comment');
  }

  if ($typeSchema) {
    if (it.opts.coerceTypes) {
      var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);
    }

    var $rulesGroup = it.RULES.types[$typeSchema];

    if ($coerceToTypes || $typeIsArray || $rulesGroup === true || $rulesGroup && !$shouldUseGroup($rulesGroup)) {
      var $schemaPath = it.schemaPath + '.type',
          $errSchemaPath = it.errSchemaPath + '/type';
      var $schemaPath = it.schemaPath + '.type',
          $errSchemaPath = it.errSchemaPath + '/type',
          $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';
      out += ' if (' + it.util[$method]($typeSchema, $data, it.opts.strictNumbers, true) + ') { ';

      if ($coerceToTypes) {
        var $dataType = 'dataType' + $lvl,
            $coerced = 'coerced' + $lvl;
        out += ' var ' + $dataType + ' = typeof ' + $data + '; var ' + $coerced + ' = undefined; ';

        if (it.opts.coerceTypes == 'array') {
          out += ' if (' + $dataType + ' == \'object\' && Array.isArray(' + $data + ') && ' + $data + '.length == 1) { ' + $data + ' = ' + $data + '[0]; ' + $dataType + ' = typeof ' + $data + '; if (' + it.util.checkDataType(it.schema.type, $data, it.opts.strictNumbers) + ') ' + $coerced + ' = ' + $data + '; } ';
        }

        out += ' if (' + $coerced + ' !== undefined) ; ';
        var arr1 = $coerceToTypes;

        if (arr1) {
          var $type,
              $i = -1,
              l1 = arr1.length - 1;

          while ($i < l1) {
            $type = arr1[$i += 1];

            if ($type == 'string') {
              out += ' else if (' + $dataType + ' == \'number\' || ' + $dataType + ' == \'boolean\') ' + $coerced + ' = \'\' + ' + $data + '; else if (' + $data + ' === null) ' + $coerced + ' = \'\'; ';
            } else if ($type == 'number' || $type == 'integer') {
              out += ' else if (' + $dataType + ' == \'boolean\' || ' + $data + ' === null || (' + $dataType + ' == \'string\' && ' + $data + ' && ' + $data + ' == +' + $data + ' ';

              if ($type == 'integer') {
                out += ' && !(' + $data + ' % 1)';
              }

              out += ')) ' + $coerced + ' = +' + $data + '; ';
            } else if ($type == 'boolean') {
              out += ' else if (' + $data + ' === \'false\' || ' + $data + ' === 0 || ' + $data + ' === null) ' + $coerced + ' = false; else if (' + $data + ' === \'true\' || ' + $data + ' === 1) ' + $coerced + ' = true; ';
            } else if ($type == 'null') {
              out += ' else if (' + $data + ' === \'\' || ' + $data + ' === 0 || ' + $data + ' === false) ' + $coerced + ' = null; ';
            } else if (it.opts.coerceTypes == 'array' && $type == 'array') {
              out += ' else if (' + $dataType + ' == \'string\' || ' + $dataType + ' == \'number\' || ' + $dataType + ' == \'boolean\' || ' + $data + ' == null) ' + $coerced + ' = [' + $data + ']; ';
            }
          }
        }

        out += ' else {   ';
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = '';
        /* istanbul ignore else */

        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { type: \'';

          if ($typeIsArray) {
            out += '' + $typeSchema.join(",");
          } else {
            out += '' + $typeSchema;
          }

          out += '\' } ';

          if (it.opts.messages !== false) {
            out += ' , message: \'should be ';

            if ($typeIsArray) {
              out += '' + $typeSchema.join(",");
            } else {
              out += '' + $typeSchema;
            }

            out += '\' ';
          }

          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
          }

          out += ' } ';
        } else {
          out += ' {} ';
        }

        var __err = out;
        out = $$outStack.pop();

        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + __err + ']); ';
          } else {
            out += ' validate.errors = [' + __err + ']; return false; ';
          }
        } else {
          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }

        out += ' } if (' + $coerced + ' !== undefined) {  ';
        var $parentData = $dataLvl ? 'data' + ($dataLvl - 1 || '') : 'parentData',
            $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
        out += ' ' + $data + ' = ' + $coerced + '; ';

        if (!$dataLvl) {
          out += 'if (' + $parentData + ' !== undefined)';
        }

        out += ' ' + $parentData + '[' + $parentDataProperty + '] = ' + $coerced + '; } ';
      } else {
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = '';
        /* istanbul ignore else */

        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { type: \'';

          if ($typeIsArray) {
            out += '' + $typeSchema.join(",");
          } else {
            out += '' + $typeSchema;
          }

          out += '\' } ';

          if (it.opts.messages !== false) {
            out += ' , message: \'should be ';

            if ($typeIsArray) {
              out += '' + $typeSchema.join(",");
            } else {
              out += '' + $typeSchema;
            }

            out += '\' ';
          }

          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
          }

          out += ' } ';
        } else {
          out += ' {} ';
        }

        var __err = out;
        out = $$outStack.pop();

        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + __err + ']); ';
          } else {
            out += ' validate.errors = [' + __err + ']; return false; ';
          }
        } else {
          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
      }

      out += ' } ';
    }
  }

  if (it.schema.$ref && !$refKeywords) {
    out += ' ' + it.RULES.all.$ref.code(it, '$ref') + ' ';

    if ($breakOnError) {
      out += ' } if (errors === ';

      if ($top) {
        out += '0';
      } else {
        out += 'errs_' + $lvl;
      }

      out += ') { ';
      $closingBraces2 += '}';
    }
  } else {
    var arr2 = it.RULES;

    if (arr2) {
      var $rulesGroup,
          i2 = -1,
          l2 = arr2.length - 1;

      while (i2 < l2) {
        $rulesGroup = arr2[i2 += 1];

        if ($shouldUseGroup($rulesGroup)) {
          if ($rulesGroup.type) {
            out += ' if (' + it.util.checkDataType($rulesGroup.type, $data, it.opts.strictNumbers) + ') { ';
          }

          if (it.opts.useDefaults) {
            if ($rulesGroup.type == 'object' && it.schema.properties) {
              var $schema = it.schema.properties,
                  $schemaKeys = Object.keys($schema);
              var arr3 = $schemaKeys;

              if (arr3) {
                var $propertyKey,
                    i3 = -1,
                    l3 = arr3.length - 1;

                while (i3 < l3) {
                  $propertyKey = arr3[i3 += 1];
                  var $sch = $schema[$propertyKey];

                  if ($sch.default !== undefined) {
                    var $passData = $data + it.util.getProperty($propertyKey);

                    if (it.compositeRule) {
                      if (it.opts.strictDefaults) {
                        var $defaultMsg = 'default is ignored for: ' + $passData;
                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);else throw new Error($defaultMsg);
                      }
                    } else {
                      out += ' if (' + $passData + ' === undefined ';

                      if (it.opts.useDefaults == 'empty') {
                        out += ' || ' + $passData + ' === null || ' + $passData + ' === \'\' ';
                      }

                      out += ' ) ' + $passData + ' = ';

                      if (it.opts.useDefaults == 'shared') {
                        out += ' ' + it.useDefault($sch.default) + ' ';
                      } else {
                        out += ' ' + JSON.stringify($sch.default) + ' ';
                      }

                      out += '; ';
                    }
                  }
                }
              }
            } else if ($rulesGroup.type == 'array' && Array.isArray(it.schema.items)) {
              var arr4 = it.schema.items;

              if (arr4) {
                var $sch,
                    $i = -1,
                    l4 = arr4.length - 1;

                while ($i < l4) {
                  $sch = arr4[$i += 1];

                  if ($sch.default !== undefined) {
                    var $passData = $data + '[' + $i + ']';

                    if (it.compositeRule) {
                      if (it.opts.strictDefaults) {
                        var $defaultMsg = 'default is ignored for: ' + $passData;
                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);else throw new Error($defaultMsg);
                      }
                    } else {
                      out += ' if (' + $passData + ' === undefined ';

                      if (it.opts.useDefaults == 'empty') {
                        out += ' || ' + $passData + ' === null || ' + $passData + ' === \'\' ';
                      }

                      out += ' ) ' + $passData + ' = ';

                      if (it.opts.useDefaults == 'shared') {
                        out += ' ' + it.useDefault($sch.default) + ' ';
                      } else {
                        out += ' ' + JSON.stringify($sch.default) + ' ';
                      }

                      out += '; ';
                    }
                  }
                }
              }
            }
          }

          var arr5 = $rulesGroup.rules;

          if (arr5) {
            var $rule,
                i5 = -1,
                l5 = arr5.length - 1;

            while (i5 < l5) {
              $rule = arr5[i5 += 1];

              if ($shouldUseRule($rule)) {
                var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);

                if ($code) {
                  out += ' ' + $code + ' ';

                  if ($breakOnError) {
                    $closingBraces1 += '}';
                  }
                }
              }
            }
          }

          if ($breakOnError) {
            out += ' ' + $closingBraces1 + ' ';
            $closingBraces1 = '';
          }

          if ($rulesGroup.type) {
            out += ' } ';

            if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {
              out += ' else { ';
              var $schemaPath = it.schemaPath + '.type',
                  $errSchemaPath = it.errSchemaPath + '/type';
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = '';
              /* istanbul ignore else */

              if (it.createErrors !== false) {
                out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { type: \'';

                if ($typeIsArray) {
                  out += '' + $typeSchema.join(",");
                } else {
                  out += '' + $typeSchema;
                }

                out += '\' } ';

                if (it.opts.messages !== false) {
                  out += ' , message: \'should be ';

                  if ($typeIsArray) {
                    out += '' + $typeSchema.join(",");
                  } else {
                    out += '' + $typeSchema;
                  }

                  out += '\' ';
                }

                if (it.opts.verbose) {
                  out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                }

                out += ' } ';
              } else {
                out += ' {} ';
              }

              var __err = out;
              out = $$outStack.pop();

              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + __err + ']); ';
                } else {
                  out += ' validate.errors = [' + __err + ']; return false; ';
                }
              } else {
                out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }

              out += ' } ';
            }
          }

          if ($breakOnError) {
            out += ' if (errors === ';

            if ($top) {
              out += '0';
            } else {
              out += 'errs_' + $lvl;
            }

            out += ') { ';
            $closingBraces2 += '}';
          }
        }
      }
    }
  }

  if ($breakOnError) {
    out += ' ' + $closingBraces2 + ' ';
  }

  if ($top) {
    if ($async) {
      out += ' if (errors === 0) return data;           ';
      out += ' else throw new ValidationError(vErrors); ';
    } else {
      out += ' validate.errors = vErrors; ';
      out += ' return errors === 0;       ';
    }

    out += ' }; return validate;';
  } else {
    out += ' var ' + $valid + ' = errors === errs_' + $lvl + ';';
  }

  function $shouldUseGroup($rulesGroup) {
    var rules = $rulesGroup.rules;

    for (var i = 0; i < rules.length; i++) if ($shouldUseRule(rules[i])) return true;
  }

  function $shouldUseRule($rule) {
    return it.schema[$rule.keyword] !== undefined || $rule.implements && $ruleImplementsSomeKeyword($rule);
  }

  function $ruleImplementsSomeKeyword($rule) {
    var impl = $rule.implements;

    for (var i = 0; i < impl.length; i++) if (it.schema[impl[i]] !== undefined) return true;
  }

  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/keyword.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var IDENTIFIER = /^[a-z_$][a-z0-9_$-]*$/i;

var customRuleCode = __webpack_require__("./node_modules/ajv/lib/dotjs/custom.js");

var definitionSchema = __webpack_require__("./node_modules/ajv/lib/definition_schema.js");

module.exports = {
  add: addKeyword,
  get: getKeyword,
  remove: removeKeyword,
  validate: validateKeyword
};
/**
 * Define custom keyword
 * @this  Ajv
 * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).
 * @param {Object} definition keyword definition object with properties `type` (type(s) which the keyword applies to), `validate` or `compile`.
 * @return {Ajv} this for method chaining
 */

function addKeyword(keyword, definition) {
  /* jshint validthis: true */

  /* eslint no-shadow: 0 */
  var RULES = this.RULES;
  if (RULES.keywords[keyword]) throw new Error('Keyword ' + keyword + ' is already defined');
  if (!IDENTIFIER.test(keyword)) throw new Error('Keyword ' + keyword + ' is not a valid identifier');

  if (definition) {
    this.validateKeyword(definition, true);
    var dataType = definition.type;

    if (Array.isArray(dataType)) {
      for (var i = 0; i < dataType.length; i++) _addRule(keyword, dataType[i], definition);
    } else {
      _addRule(keyword, dataType, definition);
    }

    var metaSchema = definition.metaSchema;

    if (metaSchema) {
      if (definition.$data && this._opts.$data) {
        metaSchema = {
          anyOf: [metaSchema, {
            '$ref': 'https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#'
          }]
        };
      }

      definition.validateSchema = this.compile(metaSchema, true);
    }
  }

  RULES.keywords[keyword] = RULES.all[keyword] = true;

  function _addRule(keyword, dataType, definition) {
    var ruleGroup;

    for (var i = 0; i < RULES.length; i++) {
      var rg = RULES[i];

      if (rg.type == dataType) {
        ruleGroup = rg;
        break;
      }
    }

    if (!ruleGroup) {
      ruleGroup = {
        type: dataType,
        rules: []
      };
      RULES.push(ruleGroup);
    }

    var rule = {
      keyword: keyword,
      definition: definition,
      custom: true,
      code: customRuleCode,
      implements: definition.implements
    };
    ruleGroup.rules.push(rule);
    RULES.custom[keyword] = rule;
  }

  return this;
}
/**
 * Get keyword
 * @this  Ajv
 * @param {String} keyword pre-defined or custom keyword.
 * @return {Object|Boolean} custom keyword definition, `true` if it is a predefined keyword, `false` otherwise.
 */


function getKeyword(keyword) {
  /* jshint validthis: true */
  var rule = this.RULES.custom[keyword];
  return rule ? rule.definition : this.RULES.keywords[keyword] || false;
}
/**
 * Remove keyword
 * @this  Ajv
 * @param {String} keyword pre-defined or custom keyword.
 * @return {Ajv} this for method chaining
 */


function removeKeyword(keyword) {
  /* jshint validthis: true */
  var RULES = this.RULES;
  delete RULES.keywords[keyword];
  delete RULES.all[keyword];
  delete RULES.custom[keyword];

  for (var i = 0; i < RULES.length; i++) {
    var rules = RULES[i].rules;

    for (var j = 0; j < rules.length; j++) {
      if (rules[j].keyword == keyword) {
        rules.splice(j, 1);
        break;
      }
    }
  }

  return this;
}
/**
 * Validate keyword definition
 * @this  Ajv
 * @param {Object} definition keyword definition object.
 * @param {Boolean} throwError true to throw exception if definition is invalid
 * @return {boolean} validation result
 */


function validateKeyword(definition, throwError) {
  validateKeyword.errors = null;
  var v = this._validateKeyword = this._validateKeyword || this.compile(definitionSchema, true);
  if (v(definition)) return true;
  validateKeyword.errors = v.errors;
  if (throwError) throw new Error('custom keyword definition is invalid: ' + this.errorsText(v.errors));else return false;
}

/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Button/Button.Props.js":
/***/ (() => {



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Link/Link.Props.js":
/***/ (() => {



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/List/FixedHeightList.Props.js":
/***/ (() => {



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Observer/ItemsObserver.Props.js":
/***/ (() => {



/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/ResizeGroup/ResizeGroup.Props.js":
/***/ (() => {



/***/ }),

/***/ "./node_modules/azure-devops-ui/Core/find.js":
/***/ (() => {

// Polyfill Array.findIndex
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex
if (!Array.prototype.findIndex) {
  Object.defineProperty(Array.prototype, 'findIndex', {
    value: function (predicate) {
      // 1. Let O be ? ToObject(this value).
      if (this == null) {
        throw new TypeError('"this" is null or not defined');
      }

      var o = Object(this); // 2. Let len be ? ToLength(? Get(O, "length")).

      var len = o.length >>> 0; // 3. If IsCallable(predicate) is false, throw a TypeError exception.

      if (typeof predicate !== 'function') {
        throw new TypeError('predicate must be a function');
      } // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.


      var thisArg = arguments[1]; // 5. Let k be 0.

      var k = 0; // 6. Repeat, while k < len

      while (k < len) {
        // a. Let Pk be ! ToString(k).
        // b. Let kValue be ? Get(O, Pk).
        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
        // d. If testResult is true, return k.
        var kValue = o[k];

        if (predicate.call(thisArg, kValue, k, o)) {
          return k;
        } // e. Increase k by 1.


        k++;
      } // 7. Return -1.


      return -1;
    }
  });
} // Polyfill Array.find


if (!Array.prototype.find) {
  Object.defineProperty(Array.prototype, 'find', {
    value: function (predicate) {
      if (this == null) {
        throw new TypeError('"this" is null or not defined');
      }

      var i = this.findIndex(predicate);

      if (i === -1) {
        return undefined;
      } else {
        return this[i];
      }
    }
  });
}

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
} // Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications


revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function getLens(b64) {
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  } // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42


  var validLen = b64.indexOf('=');
  if (validLen === -1) validLen = len;
  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
} // base64 is 4/3 + up to two characters of the original data


function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars

  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
  var i;

  for (i = 0; i < len; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp >> 16 & 0xFF;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];

  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64(tmp));
  }

  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3
  // go through the array every three bytes, we'll deal with trailing stuff later

  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  } // pad the end with zeros, but make sure to not forget the extra bytes


  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
  }

  return parts.join('');
}

/***/ }),

/***/ "./node_modules/buffer/index.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var __webpack_unused_export__;
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

/* eslint-disable no-proto */


const base64 = __webpack_require__("./node_modules/base64-js/index.js");

const ieee754 = __webpack_require__("./node_modules/ieee754/index.js");

const customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' // eslint-disable-line dot-notation
? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
: null;
exports.lW = Buffer;
__webpack_unused_export__ = SlowBuffer;
exports.h2 = 50;
const K_MAX_LENGTH = 0x7fffffff;
__webpack_unused_export__ = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */

Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
  console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
}

function typedArraySupport() {
  // Can typed array instances can be augmented?
  try {
    const arr = new Uint8Array(1);
    const proto = {
      foo: function () {
        return 42;
      }
    };
    Object.setPrototypeOf(proto, Uint8Array.prototype);
    Object.setPrototypeOf(arr, proto);
    return arr.foo() === 42;
  } catch (e) {
    return false;
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined;
    return this.buffer;
  }
});
Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined;
    return this.byteOffset;
  }
});

function createBuffer(length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"');
  } // Return an augmented `Uint8Array` instance


  const buf = new Uint8Array(length);
  Object.setPrototypeOf(buf, Buffer.prototype);
  return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */


function Buffer(arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError('The "string" argument must be of type string. Received type number');
    }

    return allocUnsafe(arg);
  }

  return from(arg, encodingOrOffset, length);
}

Buffer.poolSize = 8192; // not used by this implementation

function from(value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset);
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayView(value);
  }

  if (value == null) {
    throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);
  }

  if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
    return fromArrayBuffer(value, encodingOrOffset, length);
  }

  if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length);
  }

  if (typeof value === 'number') {
    throw new TypeError('The "value" argument must not be of type number. Received type number');
  }

  const valueOf = value.valueOf && value.valueOf();

  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length);
  }

  const b = fromObject(value);
  if (b) return b;

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
  }

  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/


Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length);
}; // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148


Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number');
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"');
  }
}

function alloc(size, fill, encoding) {
  assertSize(size);

  if (size <= 0) {
    return createBuffer(size);
  }

  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
  }

  return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/


Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding);
};

function allocUnsafe(size) {
  assertSize(size);
  return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */


Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */


Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size);
};

function fromString(string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding);
  }

  const length = byteLength(string, encoding) | 0;
  let buf = createBuffer(length);
  const actual = buf.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
  }

  return buf;
}

function fromArrayLike(array) {
  const length = array.length < 0 ? 0 : checked(array.length) | 0;
  const buf = createBuffer(length);

  for (let i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255;
  }

  return buf;
}

function fromArrayView(arrayView) {
  if (isInstance(arrayView, Uint8Array)) {
    const copy = new Uint8Array(arrayView);
    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
  }

  return fromArrayLike(arrayView);
}

function fromArrayBuffer(array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds');
  }

  let buf;

  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array);
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset);
  } else {
    buf = new Uint8Array(array, byteOffset, length);
  } // Return an augmented `Uint8Array` instance


  Object.setPrototypeOf(buf, Buffer.prototype);
  return buf;
}

function fromObject(obj) {
  if (Buffer.isBuffer(obj)) {
    const len = checked(obj.length) | 0;
    const buf = createBuffer(len);

    if (buf.length === 0) {
      return buf;
    }

    obj.copy(buf, 0, 0, len);
    return buf;
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0);
    }

    return fromArrayLike(obj);
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data);
  }
}

function checked(length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
  }

  return length | 0;
}

function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }

  return Buffer.alloc(+length);
}

Buffer.isBuffer = function isBuffer(b) {
  return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false
};

Buffer.compare = function compare(a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);

  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
  }

  if (a === b) return 0;
  let x = a.length;
  let y = b.length;

  for (let i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;

    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  let i;

  if (length === undefined) {
    length = 0;

    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  const buffer = Buffer.allocUnsafe(length);
  let pos = 0;

  for (i = 0; i < list.length; ++i) {
    let buf = list[i];

    if (isInstance(buf, Uint8Array)) {
      if (pos + buf.length > buffer.length) {
        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
        buf.copy(buffer, pos);
      } else {
        Uint8Array.prototype.set.call(buffer, buf, pos);
      }
    } else if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    } else {
      buf.copy(buffer, pos);
    }

    pos += buf.length;
  }

  return buffer;
};

function byteLength(string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }

  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength;
  }

  if (typeof string !== 'string') {
    throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + typeof string);
  }

  const len = string.length;
  const mustMatch = arguments.length > 2 && arguments[2] === true;
  if (!mustMatch && len === 0) return 0; // Use a for loop to avoid recursion

  let loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;

      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length;

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;

      case 'hex':
        return len >>> 1;

      case 'base64':
        return base64ToBytes(string).length;

      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
        }

        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}

Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  let loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.
  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

  if (start === undefined || start < 0) {
    start = 0;
  } // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.


  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  } // Force coercion to uint32. This will also coerce falsey/NaN values to 0.


  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
} // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154


Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  const i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  const len = this.length;

  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }

  for (let i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }

  return this;
};

Buffer.prototype.swap32 = function swap32() {
  const len = this.length;

  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }

  for (let i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }

  return this;
};

Buffer.prototype.swap64 = function swap64() {
  const len = this.length;

  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }

  for (let i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }

  return this;
};

Buffer.prototype.toString = function toString() {
  const length = this.length;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.toLocaleString = Buffer.prototype.toString;

Buffer.prototype.equals = function equals(b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  let str = '';
  const max = exports.h2;
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
  if (this.length > max) str += ' ... ';
  return '<Buffer ' + str + '>';
};

if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
}

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength);
  }

  if (!Buffer.isBuffer(target)) {
    throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + typeof target);
  }

  if (start === undefined) {
    start = 0;
  }

  if (end === undefined) {
    end = target ? target.length : 0;
  }

  if (thisStart === undefined) {
    thisStart = 0;
  }

  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }

  if (thisStart >= thisEnd) {
    return -1;
  }

  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;
  if (this === target) return 0;
  let x = thisEnd - thisStart;
  let y = end - start;
  const len = Math.min(x, y);
  const thisCopy = this.slice(thisStart, thisEnd);
  const targetCopy = target.slice(start, end);

  for (let i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf


function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1; // Normalize byteOffset

  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }

  byteOffset = +byteOffset; // Coerce to Number.

  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  } // Normalize byteOffset: negative offsets start from the end of the buffer


  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  } // Normalize val


  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  } // Finally, search either indexOf (if dir is true) or lastIndexOf


  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }

    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]

    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }

    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  let indexSize = 1;
  let arrLength = arr.length;
  let valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();

    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }

      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  let i;

  if (dir) {
    let foundIndex = -1;

    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

    for (i = byteOffset; i >= 0; i--) {
      let found = true;

      for (let j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }

      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  const remaining = buf.length - offset;

  if (!length) {
    length = remaining;
  } else {
    length = Number(length);

    if (length > remaining) {
      length = remaining;
    }
  }

  const strLen = string.length;

  if (length > strLen / 2) {
    length = strLen / 2;
  }

  let i;

  for (i = 0; i < length; ++i) {
    const parsed = parseInt(string.substr(i * 2, 2), 16);
    if (numberIsNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }

  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0; // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0; // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0;

    if (isFinite(length)) {
      length = length >>> 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  const remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';
  let loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
      case 'latin1':
      case 'binary':
        return asciiWrite(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  const res = [];
  let i = start;

  while (i < end) {
    const firstByte = buf[i];
    let codePoint = null;
    let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      let secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }

          break;

        case 2:
          secondByte = buf[i + 1];

          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }

      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
} // Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety


const MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  const len = codePoints.length;

  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  } // Decode in chunks to avoid "call stack size exceeded".


  let res = '';
  let i = 0;

  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }

  return res;
}

function asciiSlice(buf, start, end) {
  let ret = '';
  end = Math.min(buf.length, end);

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }

  return ret;
}

function latin1Slice(buf, start, end) {
  let ret = '';
  end = Math.min(buf.length, end);

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }

  return ret;
}

function hexSlice(buf, start, end) {
  const len = buf.length;
  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;
  let out = '';

  for (let i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]];
  }

  return out;
}

function utf16leSlice(buf, start, end) {
  const bytes = buf.slice(start, end);
  let res = ''; // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)

  for (let i = 0; i < bytes.length - 1; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }

  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  const len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;
  const newBuf = this.subarray(start, end); // Return an augmented `Uint8Array` instance

  Object.setPrototypeOf(newBuf, Buffer.prototype);
  return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */


function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  let val = this[offset];
  let mul = 1;
  let i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;

  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  let val = this[offset + --byteLength];
  let mul = 1;

  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
  offset = offset >>> 0;
  validateNumber(offset, 'offset');
  const first = this[offset];
  const last = this[offset + 7];

  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8);
  }

  const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
  const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
  return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
  offset = offset >>> 0;
  validateNumber(offset, 'offset');
  const first = this[offset];
  const last = this[offset + 7];

  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8);
  }

  const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
  const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
  return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  let val = this[offset];
  let mul = 1;
  let i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  let i = byteLength;
  let mul = 1;
  let val = this[offset + --i];

  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  const val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  const val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
  offset = offset >>> 0;
  validateNumber(offset, 'offset');
  const first = this[offset];
  const last = this[offset + 7];

  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8);
  }

  const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24); // Overflow

  return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
});
Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
  offset = offset >>> 0;
  validateNumber(offset, 'offset');
  const first = this[offset];
  const last = this[offset + 7];

  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8);
  }

  const val = (first << 24) + // Overflow
  this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
  return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
});

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;

  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  let mul = 1;
  let i = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;

  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  let i = byteLength - 1;
  let mul = 1;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  this[offset] = value & 0xff;
  this[offset + 1] = value >>> 8;
  return offset + 2;
};

Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  this[offset] = value >>> 8;
  this[offset + 1] = value & 0xff;
  return offset + 2;
};

Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  this[offset + 3] = value >>> 24;
  this[offset + 2] = value >>> 16;
  this[offset + 1] = value >>> 8;
  this[offset] = value & 0xff;
  return offset + 4;
};

Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  this[offset] = value >>> 24;
  this[offset + 1] = value >>> 16;
  this[offset + 2] = value >>> 8;
  this[offset + 3] = value & 0xff;
  return offset + 4;
};

function wrtBigUInt64LE(buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7);
  let lo = Number(value & BigInt(0xffffffff));
  buf[offset++] = lo;
  lo = lo >> 8;
  buf[offset++] = lo;
  lo = lo >> 8;
  buf[offset++] = lo;
  lo = lo >> 8;
  buf[offset++] = lo;
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
  buf[offset++] = hi;
  hi = hi >> 8;
  buf[offset++] = hi;
  hi = hi >> 8;
  buf[offset++] = hi;
  hi = hi >> 8;
  buf[offset++] = hi;
  return offset;
}

function wrtBigUInt64BE(buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7);
  let lo = Number(value & BigInt(0xffffffff));
  buf[offset + 7] = lo;
  lo = lo >> 8;
  buf[offset + 6] = lo;
  lo = lo >> 8;
  buf[offset + 5] = lo;
  lo = lo >> 8;
  buf[offset + 4] = lo;
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
  buf[offset + 3] = hi;
  hi = hi >> 8;
  buf[offset + 2] = hi;
  hi = hi >> 8;
  buf[offset + 1] = hi;
  hi = hi >> 8;
  buf[offset] = hi;
  return offset + 8;
}

Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
});
Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
});

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;

  if (!noAssert) {
    const limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  let i = 0;
  let mul = 1;
  let sub = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;

  if (!noAssert) {
    const limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  let i = byteLength - 1;
  let mul = 1;
  let sub = 0;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  this[offset] = value & 0xff;
  this[offset + 1] = value >>> 8;
  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  this[offset] = value >>> 8;
  this[offset + 1] = value & 0xff;
  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  this[offset] = value & 0xff;
  this[offset + 1] = value >>> 8;
  this[offset + 2] = value >>> 16;
  this[offset + 3] = value >>> 24;
  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  this[offset] = value >>> 24;
  this[offset + 1] = value >>> 16;
  this[offset + 2] = value >>> 8;
  this[offset + 3] = value & 0xff;
  return offset + 4;
};

Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
});
Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
});

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  value = +value;
  offset = offset >>> 0;

  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }

  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  value = +value;
  offset = offset >>> 0;

  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }

  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }

  if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

  if (end > this.length) end = this.length;

  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  const len = end - start;

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
  }

  return len;
}; // Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])


Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }

    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }

    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }

    if (val.length === 1) {
      const code = val.charCodeAt(0);

      if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code;
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  } else if (typeof val === 'boolean') {
    val = Number(val);
  } // Invalid ranges are not set to a default, so can range check early.


  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;
  if (!val) val = 0;
  let i;

  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
    const len = bytes.length;

    if (len === 0) {
      throw new TypeError('The value "' + val + '" is invalid for argument "value"');
    }

    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
}; // CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage


const errors = {};

function E(sym, getMessage, Base) {
  errors[sym] = class NodeError extends Base {
    constructor() {
      super();
      Object.defineProperty(this, 'message', {
        value: getMessage.apply(this, arguments),
        writable: true,
        configurable: true
      }); // Add the error code to the name to include it in the stack trace.

      this.name = `${this.name} [${sym}]`; // Access the stack to generate the error message including the error code
      // from the name.

      this.stack; // eslint-disable-line no-unused-expressions
      // Reset the name to the actual name.

      delete this.name;
    }

    get code() {
      return sym;
    }

    set code(value) {
      Object.defineProperty(this, 'code', {
        configurable: true,
        enumerable: true,
        value,
        writable: true
      });
    }

    toString() {
      return `${this.name} [${sym}]: ${this.message}`;
    }

  };
}

E('ERR_BUFFER_OUT_OF_BOUNDS', function (name) {
  if (name) {
    return `${name} is outside of buffer bounds`;
  }

  return 'Attempt to access memory outside buffer bounds';
}, RangeError);
E('ERR_INVALID_ARG_TYPE', function (name, actual) {
  return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
E('ERR_OUT_OF_RANGE', function (str, range, input) {
  let msg = `The value of "${str}" is out of range.`;
  let received = input;

  if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
    received = addNumericalSeparator(String(input));
  } else if (typeof input === 'bigint') {
    received = String(input);

    if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
      received = addNumericalSeparator(received);
    }

    received += 'n';
  }

  msg += ` It must be ${range}. Received ${received}`;
  return msg;
}, RangeError);

function addNumericalSeparator(val) {
  let res = '';
  let i = val.length;
  const start = val[0] === '-' ? 1 : 0;

  for (; i >= start + 4; i -= 3) {
    res = `_${val.slice(i - 3, i)}${res}`;
  }

  return `${val.slice(0, i)}${res}`;
} // CHECK FUNCTIONS
// ===============


function checkBounds(buf, offset, byteLength) {
  validateNumber(offset, 'offset');

  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
    boundsError(offset, buf.length - (byteLength + 1));
  }
}

function checkIntBI(value, min, max, buf, offset, byteLength) {
  if (value > max || value < min) {
    const n = typeof min === 'bigint' ? 'n' : '';
    let range;

    if (byteLength > 3) {
      if (min === 0 || min === BigInt(0)) {
        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
      } else {
        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength + 1) * 8 - 1}${n}`;
      }
    } else {
      range = `>= ${min}${n} and <= ${max}${n}`;
    }

    throw new errors.ERR_OUT_OF_RANGE('value', range, value);
  }

  checkBounds(buf, offset, byteLength);
}

function validateNumber(value, name) {
  if (typeof value !== 'number') {
    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value);
  }
}

function boundsError(value, length, type) {
  if (Math.floor(value) !== value) {
    validateNumber(value, type);
    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value);
  }

  if (length < 0) {
    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
  }

  throw new errors.ERR_OUT_OF_RANGE(type || 'offset', `>= ${type ? 1 : 0} and <= ${length}`, value);
} // HELPER FUNCTIONS
// ================


const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]; // Node strips out invalid characters like \n and \t from the string, base64-js does not

  str = str.trim().replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

  while (str.length % 4 !== 0) {
    str = str + '=';
  }

  return str;
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  let codePoint;
  const length = string.length;
  let leadSurrogate = null;
  const bytes = [];

  for (let i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i); // is surrogate component

    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } // valid lead


        leadSurrogate = codePoint;
        continue;
      } // 2 leads in a row


      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      } // valid surrogate pair


      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null; // encode utf8

    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  const byteArray = [];

  for (let i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }

  return byteArray;
}

function utf16leToBytes(str, units) {
  let c, hi, lo;
  const byteArray = [];

  for (let i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return base64.toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  let i;

  for (i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }

  return i;
} // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166


function isInstance(obj, type) {
  return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}

function numberIsNaN(obj) {
  // For IE11 support
  return obj !== obj; // eslint-disable-line no-self-compare
} // Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219


const hexSliceLookupTable = function () {
  const alphabet = '0123456789abcdef';
  const table = new Array(256);

  for (let i = 0; i < 16; ++i) {
    const i16 = i * 16;

    for (let j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j];
    }
  }

  return table;
}(); // Return not function with Error if BigInt not supported


function defineBigIntMethod(fn) {
  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn;
}

function BufferBigIntNotDefined() {
  throw new Error('BigInt not supported');
}

/***/ }),

/***/ "./node_modules/compute-gcd/lib/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // MODULES //

var isArray = __webpack_require__("./node_modules/validate.io-array/lib/index.js"),
    isIntegerArray = __webpack_require__("./node_modules/validate.io-integer-array/lib/index.js"),
    isFunction = __webpack_require__("./node_modules/validate.io-function/lib/index.js"); // VARIABLES //


var MAXINT = Math.pow(2, 31) - 1; // FUNCTIONS //

/**
* FUNCTION: gcd( a, b )
*	Computes the greatest common divisor of two integers `a` and `b`, using the binary GCD algorithm.
*
* @param {Number} a - integer
* @param {Number} b - integer
* @returns {Number} greatest common divisor
*/

function gcd(a, b) {
  var k = 1,
      t; // Simple cases:

  if (a === 0) {
    return b;
  }

  if (b === 0) {
    return a;
  } // Reduce `a` and/or `b` to odd numbers and keep track of the greatest power of 2 dividing both `a` and `b`...


  while (a % 2 === 0 && b % 2 === 0) {
    a = a / 2; // right shift

    b = b / 2; // right shift

    k = k * 2; // left shift
  } // Reduce `a` to an odd number...


  while (a % 2 === 0) {
    a = a / 2; // right shift
  } // Henceforth, `a` is always odd...


  while (b) {
    // Remove all factors of 2 in `b`, as they are not common...
    while (b % 2 === 0) {
      b = b / 2; // right shift
    } // `a` and `b` are both odd. Swap values such that `b` is the larger of the two values, and then set `b` to the difference (which is even)...


    if (a > b) {
      t = b;
      b = a;
      a = t;
    }

    b = b - a; // b=0 iff b=a
  } // Restore common factors of 2...


  return k * a;
} // end FUNCTION gcd()

/**
* FUNCTION: bitwise( a, b )
*	Computes the greatest common divisor of two integers `a` and `b`, using the binary GCD algorithm and bitwise operations.
*
* @param {Number} a - safe integer
* @param {Number} b - safe integer
* @returns {Number} greatest common divisor
*/


function bitwise(a, b) {
  var k = 0,
      t; // Simple cases:

  if (a === 0) {
    return b;
  }

  if (b === 0) {
    return a;
  } // Reduce `a` and/or `b` to odd numbers and keep track of the greatest power of 2 dividing both `a` and `b`...


  while ((a & 1) === 0 && (b & 1) === 0) {
    a >>>= 1; // right shift

    b >>>= 1; // right shift

    k++;
  } // Reduce `a` to an odd number...


  while ((a & 1) === 0) {
    a >>>= 1; // right shift
  } // Henceforth, `a` is always odd...


  while (b) {
    // Remove all factors of 2 in `b`, as they are not common...
    while ((b & 1) === 0) {
      b >>>= 1; // right shift
    } // `a` and `b` are both odd. Swap values such that `b` is the larger of the two values, and then set `b` to the difference (which is even)...


    if (a > b) {
      t = b;
      b = a;
      a = t;
    }

    b = b - a; // b=0 iff b=a
  } // Restore common factors of 2...


  return a << k;
} // end FUNCTION bitwise()
// GREATEST COMMON DIVISOR //

/**
* FUNCTION: compute( arr[, clbk] )
*	Computes the greatest common divisor.
*
* @param {Number[]|Number} arr - input array of integers
* @param {Function|Number} [clbk] - accessor function for accessing array values
* @returns {Number|Null} greatest common divisor or null
*/


function compute() {
  var nargs = arguments.length,
      args,
      clbk,
      arr,
      len,
      a,
      b,
      i; // Copy the input arguments to an array...

  args = new Array(nargs);

  for (i = 0; i < nargs; i++) {
    args[i] = arguments[i];
  } // Have we been provided with integer arguments?


  if (isIntegerArray(args)) {
    if (nargs === 2) {
      a = args[0];
      b = args[1];

      if (a < 0) {
        a = -a;
      }

      if (b < 0) {
        b = -b;
      }

      if (a <= MAXINT && b <= MAXINT) {
        return bitwise(a, b);
      } else {
        return gcd(a, b);
      }
    }

    arr = args;
  } // If not integers, ensure the first argument is an array...
  else if (!isArray(args[0])) {
    throw new TypeError('gcd()::invalid input argument. Must provide an array of integers. Value: `' + args[0] + '`.');
  } // Have we been provided with more than one argument? If so, ensure that the accessor argument is a function...
  else if (nargs > 1) {
    arr = args[0];
    clbk = args[1];

    if (!isFunction(clbk)) {
      throw new TypeError('gcd()::invalid input argument. Accessor must be a function. Value: `' + clbk + '`.');
    }
  } // We have been provided an array...
  else {
    arr = args[0];
  }

  len = arr.length; // Check if a sufficient number of values have been provided...

  if (len < 2) {
    return null;
  } // If an accessor is provided, extract the array values...


  if (clbk) {
    a = new Array(len);

    for (i = 0; i < len; i++) {
      a[i] = clbk(arr[i], i);
    }

    arr = a;
  } // Given an input array, ensure all array values are integers...


  if (nargs < 3) {
    if (!isIntegerArray(arr)) {
      throw new TypeError('gcd()::invalid input argument. Accessed array values must be integers. Value: `' + arr + '`.');
    }
  } // Convert any negative integers to positive integers...


  for (i = 0; i < len; i++) {
    a = arr[i];

    if (a < 0) {
      arr[i] = -a;
    }
  } // Exploit the fact that the gcd is an associative function...


  a = arr[0];

  for (i = 1; i < len; i++) {
    b = arr[i];

    if (b <= MAXINT && a <= MAXINT) {
      a = bitwise(a, b);
    } else {
      a = gcd(a, b);
    }
  }

  return a;
} // end FUNCTION compute()
// EXPORTS //


module.exports = compute;

/***/ }),

/***/ "./node_modules/compute-lcm/lib/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
 // MODULES //

var gcd = __webpack_require__("./node_modules/compute-gcd/lib/index.js"),
    isArray = __webpack_require__("./node_modules/validate.io-array/lib/index.js"),
    isIntegerArray = __webpack_require__("./node_modules/validate.io-integer-array/lib/index.js"),
    isFunction = __webpack_require__("./node_modules/validate.io-function/lib/index.js"); // LEAST COMMON MULTIPLE //

/**
* FUNCTION: lcm( arr[, clbk] )
*	Computes the least common multiple (lcm).
*
* @param {Number[]|Number} arr - input array of integers
* @param {Function|Number} [accessor] - accessor function for accessing array values
* @returns {Number|Null} least common multiple or null
*/


function lcm() {
  var nargs = arguments.length,
      args,
      clbk,
      arr,
      len,
      a,
      b,
      i; // Copy the input arguments to an array...

  args = new Array(nargs);

  for (i = 0; i < nargs; i++) {
    args[i] = arguments[i];
  } // Have we been provided with integer arguments?


  if (isIntegerArray(args)) {
    if (nargs === 2) {
      a = args[0];
      b = args[1];

      if (a < 0) {
        a = -a;
      }

      if (b < 0) {
        b = -b;
      }

      if (a === 0 || b === 0) {
        return 0;
      }

      return a / gcd(a, b) * b;
    }

    arr = args;
  } // If not integers, ensure that the first argument is an array...
  else if (!isArray(args[0])) {
    throw new TypeError('lcm()::invalid input argument. Must provide an array of integers. Value: `' + args[0] + '`.');
  } // Have we been provided with more than one argument? If so, ensure that the accessor argument is a function...
  else if (nargs > 1) {
    arr = args[0];
    clbk = args[1];

    if (!isFunction(clbk)) {
      throw new TypeError('lcm()::invalid input argument. Accessor must be a function. Value: `' + clbk + '`.');
    }
  } // We have been provided an array...
  else {
    arr = args[0];
  }

  len = arr.length; // Check if a sufficient number of values have been provided...

  if (len < 2) {
    return null;
  } // If an accessor is provided, extract the array values...


  if (clbk) {
    a = new Array(len);

    for (i = 0; i < len; i++) {
      a[i] = clbk(arr[i], i);
    }

    arr = a;
  } // Given an input array, ensure all array values are integers...


  if (nargs < 3) {
    if (!isIntegerArray(arr)) {
      throw new TypeError('lcm()::invalid input argument. Accessed array values must be integers. Value: `' + arr + '`.');
    }
  } // Convert any negative integers to positive integers...


  for (i = 0; i < len; i++) {
    a = arr[i];

    if (a < 0) {
      arr[i] = -a;
    }
  } // Exploit the fact that the lcm is an associative function...


  a = arr[0];

  for (i = 1; i < len; i++) {
    b = arr[i];

    if (a === 0 || b === 0) {
      return 0;
    }

    a = a / gcd(a, b) * b;
  }

  return a;
} // end FUNCTION lcm()
// EXPORTS //


module.exports = lcm;

/***/ }),

/***/ "./node_modules/core-js-pure/actual/array/fill.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var parent = __webpack_require__("./node_modules/core-js-pure/stable/array/fill.js");

module.exports = parent;

/***/ }),

/***/ "./node_modules/core-js-pure/es/array/fill.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__("./node_modules/core-js-pure/modules/es.array.fill.js");

var entryUnbind = __webpack_require__("./node_modules/core-js-pure/internals/entry-unbind.js");

module.exports = entryUnbind('Array', 'fill');

/***/ }),

/***/ "./node_modules/core-js-pure/es/array/includes.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__("./node_modules/core-js-pure/modules/es.array.includes.js");

var entryUnbind = __webpack_require__("./node_modules/core-js-pure/internals/entry-unbind.js");

module.exports = entryUnbind('Array', 'includes');

/***/ }),

/***/ "./node_modules/core-js-pure/features/array/fill.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var parent = __webpack_require__("./node_modules/core-js-pure/actual/array/fill.js");

module.exports = parent;

/***/ }),

/***/ "./node_modules/core-js-pure/internals/a-callable.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__("./node_modules/core-js-pure/internals/global.js");

var isCallable = __webpack_require__("./node_modules/core-js-pure/internals/is-callable.js");

var tryToString = __webpack_require__("./node_modules/core-js-pure/internals/try-to-string.js");

var TypeError = global.TypeError; // `Assert: IsCallable(argument) is true`

module.exports = function (argument) {
  if (isCallable(argument)) return argument;
  throw TypeError(tryToString(argument) + ' is not a function');
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/add-to-unscopables.js":
/***/ ((module) => {

module.exports = function () {
  /* empty */
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/an-object.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__("./node_modules/core-js-pure/internals/global.js");

var isObject = __webpack_require__("./node_modules/core-js-pure/internals/is-object.js");

var String = global.String;
var TypeError = global.TypeError; // `Assert: Type(argument) is Object`

module.exports = function (argument) {
  if (isObject(argument)) return argument;
  throw TypeError(String(argument) + ' is not an object');
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/array-fill.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var toObject = __webpack_require__("./node_modules/core-js-pure/internals/to-object.js");

var toAbsoluteIndex = __webpack_require__("./node_modules/core-js-pure/internals/to-absolute-index.js");

var lengthOfArrayLike = __webpack_require__("./node_modules/core-js-pure/internals/length-of-array-like.js"); // `Array.prototype.fill` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.fill


module.exports = function fill(value
/* , start = 0, end = @length */
) {
  var O = toObject(this);
  var length = lengthOfArrayLike(O);
  var argumentsLength = arguments.length;
  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
  var end = argumentsLength > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);

  while (endPos > index) O[index++] = value;

  return O;
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/array-includes.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIndexedObject = __webpack_require__("./node_modules/core-js-pure/internals/to-indexed-object.js");

var toAbsoluteIndex = __webpack_require__("./node_modules/core-js-pure/internals/to-absolute-index.js");

var lengthOfArrayLike = __webpack_require__("./node_modules/core-js-pure/internals/length-of-array-like.js"); // `Array.prototype.{ indexOf, includes }` methods implementation


var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = lengthOfArrayLike(O);
    var index = toAbsoluteIndex(fromIndex, length);
    var value; // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check

    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++]; // eslint-disable-next-line no-self-compare -- NaN check

      if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
    } else for (; length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    }
    return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/classof-raw.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__("./node_modules/core-js-pure/internals/function-uncurry-this.js");

var toString = uncurryThis({}.toString);
var stringSlice = uncurryThis(''.slice);

module.exports = function (it) {
  return stringSlice(toString(it), 8, -1);
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/create-non-enumerable-property.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__("./node_modules/core-js-pure/internals/descriptors.js");

var definePropertyModule = __webpack_require__("./node_modules/core-js-pure/internals/object-define-property.js");

var createPropertyDescriptor = __webpack_require__("./node_modules/core-js-pure/internals/create-property-descriptor.js");

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/create-property-descriptor.js":
/***/ ((module) => {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/descriptors.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__("./node_modules/core-js-pure/internals/fails.js"); // Detect IE8's incomplete defineProperty implementation


module.exports = !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, {
    get: function () {
      return 7;
    }
  })[1] != 7;
});

/***/ }),

/***/ "./node_modules/core-js-pure/internals/document-create-element.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__("./node_modules/core-js-pure/internals/global.js");

var isObject = __webpack_require__("./node_modules/core-js-pure/internals/is-object.js");

var document = global.document; // typeof document.createElement is 'object' in old IE

var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/engine-user-agent.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__("./node_modules/core-js-pure/internals/get-built-in.js");

module.exports = getBuiltIn('navigator', 'userAgent') || '';

/***/ }),

/***/ "./node_modules/core-js-pure/internals/engine-v8-version.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__("./node_modules/core-js-pure/internals/global.js");

var userAgent = __webpack_require__("./node_modules/core-js-pure/internals/engine-user-agent.js");

var process = global.process;
var Deno = global.Deno;
var versions = process && process.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.'); // in old Chrome, versions of V8 isn't V8 = Chrome / 10
  // but their correct versions are not interesting for us

  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
} // BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
// so check `userAgent` even if `.v8` exists, but 0


if (!version && userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);

  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = +match[1];
  }
}

module.exports = version;

/***/ }),

/***/ "./node_modules/core-js-pure/internals/entry-unbind.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__("./node_modules/core-js-pure/internals/get-built-in.js");

module.exports = getBuiltIn;

/***/ }),

/***/ "./node_modules/core-js-pure/internals/export.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var global = __webpack_require__("./node_modules/core-js-pure/internals/global.js");

var apply = __webpack_require__("./node_modules/core-js-pure/internals/function-apply.js");

var uncurryThis = __webpack_require__("./node_modules/core-js-pure/internals/function-uncurry-this.js");

var isCallable = __webpack_require__("./node_modules/core-js-pure/internals/is-callable.js");

var getOwnPropertyDescriptor = (__webpack_require__("./node_modules/core-js-pure/internals/object-get-own-property-descriptor.js").f);

var isForced = __webpack_require__("./node_modules/core-js-pure/internals/is-forced.js");

var path = __webpack_require__("./node_modules/core-js-pure/internals/path.js");

var bind = __webpack_require__("./node_modules/core-js-pure/internals/function-bind-context.js");

var createNonEnumerableProperty = __webpack_require__("./node_modules/core-js-pure/internals/create-non-enumerable-property.js");

var hasOwn = __webpack_require__("./node_modules/core-js-pure/internals/has-own-property.js");

var wrapConstructor = function (NativeConstructor) {
  var Wrapper = function (a, b, c) {
    if (this instanceof Wrapper) {
      switch (arguments.length) {
        case 0:
          return new NativeConstructor();

        case 1:
          return new NativeConstructor(a);

        case 2:
          return new NativeConstructor(a, b);
      }

      return new NativeConstructor(a, b, c);
    }

    return apply(NativeConstructor, this, arguments);
  };

  Wrapper.prototype = NativeConstructor.prototype;
  return Wrapper;
};
/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
  options.name        - the .name of the function if it does not match the key
*/


module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var PROTO = options.proto;
  var nativeSource = GLOBAL ? global : STATIC ? global[TARGET] : (global[TARGET] || {}).prototype;
  var target = GLOBAL ? path : path[TARGET] || createNonEnumerableProperty(path, TARGET, {})[TARGET];
  var targetPrototype = target.prototype;
  var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
  var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;

  for (key in source) {
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced); // contains in native

    USE_NATIVE = !FORCED && nativeSource && hasOwn(nativeSource, key);
    targetProperty = target[key];
    if (USE_NATIVE) if (options.noTargetGet) {
      descriptor = getOwnPropertyDescriptor(nativeSource, key);
      nativeProperty = descriptor && descriptor.value;
    } else nativeProperty = nativeSource[key]; // export native or implementation

    sourceProperty = USE_NATIVE && nativeProperty ? nativeProperty : source[key];
    if (USE_NATIVE && typeof targetProperty == typeof sourceProperty) continue; // bind timers to global for call from export context

    if (options.bind && USE_NATIVE) resultProperty = bind(sourceProperty, global); // wrap global constructors for prevent changs in this version
    else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor(sourceProperty); // make static versions for prototype methods
    else if (PROTO && isCallable(sourceProperty)) resultProperty = uncurryThis(sourceProperty); // default case
    else resultProperty = sourceProperty; // add a flag to not completely full polyfills

    if (options.sham || sourceProperty && sourceProperty.sham || targetProperty && targetProperty.sham) {
      createNonEnumerableProperty(resultProperty, 'sham', true);
    }

    createNonEnumerableProperty(target, key, resultProperty);

    if (PROTO) {
      VIRTUAL_PROTOTYPE = TARGET + 'Prototype';

      if (!hasOwn(path, VIRTUAL_PROTOTYPE)) {
        createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});
      } // export virtual prototype methods


      createNonEnumerableProperty(path[VIRTUAL_PROTOTYPE], key, sourceProperty); // export real prototype methods

      if (options.real && targetPrototype && !targetPrototype[key]) {
        createNonEnumerableProperty(targetPrototype, key, sourceProperty);
      }
    }
  }
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/fails.js":
/***/ ((module) => {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/function-apply.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_BIND = __webpack_require__("./node_modules/core-js-pure/internals/function-bind-native.js");

var FunctionPrototype = Function.prototype;
var apply = FunctionPrototype.apply;
var call = FunctionPrototype.call; // eslint-disable-next-line es/no-reflect -- safe

module.exports = typeof Reflect == 'object' && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function () {
  return call.apply(apply, arguments);
});

/***/ }),

/***/ "./node_modules/core-js-pure/internals/function-bind-context.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__("./node_modules/core-js-pure/internals/function-uncurry-this.js");

var aCallable = __webpack_require__("./node_modules/core-js-pure/internals/a-callable.js");

var NATIVE_BIND = __webpack_require__("./node_modules/core-js-pure/internals/function-bind-native.js");

var bind = uncurryThis(uncurryThis.bind); // optional / simple context binding

module.exports = function (fn, that) {
  aCallable(fn);
  return that === undefined ? fn : NATIVE_BIND ? bind(fn, that) : function
    /* ...args */
  () {
    return fn.apply(that, arguments);
  };
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/function-bind-native.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__("./node_modules/core-js-pure/internals/fails.js");

module.exports = !fails(function () {
  var test = function () {
    /* empty */
  }.bind(); // eslint-disable-next-line no-prototype-builtins -- safe


  return typeof test != 'function' || test.hasOwnProperty('prototype');
});

/***/ }),

/***/ "./node_modules/core-js-pure/internals/function-call.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_BIND = __webpack_require__("./node_modules/core-js-pure/internals/function-bind-native.js");

var call = Function.prototype.call;
module.exports = NATIVE_BIND ? call.bind(call) : function () {
  return call.apply(call, arguments);
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/function-uncurry-this.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_BIND = __webpack_require__("./node_modules/core-js-pure/internals/function-bind-native.js");

var FunctionPrototype = Function.prototype;
var bind = FunctionPrototype.bind;
var call = FunctionPrototype.call;
var uncurryThis = NATIVE_BIND && bind.bind(call, call);
module.exports = NATIVE_BIND ? function (fn) {
  return fn && uncurryThis(fn);
} : function (fn) {
  return fn && function () {
    return call.apply(fn, arguments);
  };
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/get-built-in.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var path = __webpack_require__("./node_modules/core-js-pure/internals/path.js");

var global = __webpack_require__("./node_modules/core-js-pure/internals/global.js");

var isCallable = __webpack_require__("./node_modules/core-js-pure/internals/is-callable.js");

var aFunction = function (variable) {
  return isCallable(variable) ? variable : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace]) : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/get-method.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var aCallable = __webpack_require__("./node_modules/core-js-pure/internals/a-callable.js"); // `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod


module.exports = function (V, P) {
  var func = V[P];
  return func == null ? undefined : aCallable(func);
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/global.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var check = function (it) {
  return it && it.Math == Math && it;
}; // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028


module.exports = // eslint-disable-next-line es/no-global-this -- safe
check(typeof globalThis == 'object' && globalThis) || check(typeof window == 'object' && window) || // eslint-disable-next-line no-restricted-globals -- safe
check(typeof self == 'object' && self) || check(typeof __webpack_require__.g == 'object' && __webpack_require__.g) || // eslint-disable-next-line no-new-func -- fallback
function () {
  return this;
}() || Function('return this')();

/***/ }),

/***/ "./node_modules/core-js-pure/internals/has-own-property.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__("./node_modules/core-js-pure/internals/function-uncurry-this.js");

var toObject = __webpack_require__("./node_modules/core-js-pure/internals/to-object.js");

var hasOwnProperty = uncurryThis({}.hasOwnProperty); // `HasOwnProperty` abstract operation
// https://tc39.es/ecma262/#sec-hasownproperty

module.exports = Object.hasOwn || function hasOwn(it, key) {
  return hasOwnProperty(toObject(it), key);
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/ie8-dom-define.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__("./node_modules/core-js-pure/internals/descriptors.js");

var fails = __webpack_require__("./node_modules/core-js-pure/internals/fails.js");

var createElement = __webpack_require__("./node_modules/core-js-pure/internals/document-create-element.js"); // Thanks to IE8 for its funny defineProperty


module.exports = !DESCRIPTORS && !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () {
      return 7;
    }
  }).a != 7;
});

/***/ }),

/***/ "./node_modules/core-js-pure/internals/indexed-object.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__("./node_modules/core-js-pure/internals/global.js");

var uncurryThis = __webpack_require__("./node_modules/core-js-pure/internals/function-uncurry-this.js");

var fails = __webpack_require__("./node_modules/core-js-pure/internals/fails.js");

var classof = __webpack_require__("./node_modules/core-js-pure/internals/classof-raw.js");

var Object = global.Object;
var split = uncurryThis(''.split); // fallback for non-array-like ES3 and non-enumerable old V8 strings

module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split(it, '') : Object(it);
} : Object;

/***/ }),

/***/ "./node_modules/core-js-pure/internals/is-callable.js":
/***/ ((module) => {

// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
module.exports = function (argument) {
  return typeof argument == 'function';
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/is-forced.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__("./node_modules/core-js-pure/internals/fails.js");

var isCallable = __webpack_require__("./node_modules/core-js-pure/internals/is-callable.js");

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true : value == NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';
module.exports = isForced;

/***/ }),

/***/ "./node_modules/core-js-pure/internals/is-object.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isCallable = __webpack_require__("./node_modules/core-js-pure/internals/is-callable.js");

module.exports = function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it);
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/is-pure.js":
/***/ ((module) => {

module.exports = true;

/***/ }),

/***/ "./node_modules/core-js-pure/internals/is-symbol.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__("./node_modules/core-js-pure/internals/global.js");

var getBuiltIn = __webpack_require__("./node_modules/core-js-pure/internals/get-built-in.js");

var isCallable = __webpack_require__("./node_modules/core-js-pure/internals/is-callable.js");

var isPrototypeOf = __webpack_require__("./node_modules/core-js-pure/internals/object-is-prototype-of.js");

var USE_SYMBOL_AS_UID = __webpack_require__("./node_modules/core-js-pure/internals/use-symbol-as-uid.js");

var Object = global.Object;
module.exports = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  var $Symbol = getBuiltIn('Symbol');
  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, Object(it));
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/length-of-array-like.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toLength = __webpack_require__("./node_modules/core-js-pure/internals/to-length.js"); // `LengthOfArrayLike` abstract operation
// https://tc39.es/ecma262/#sec-lengthofarraylike


module.exports = function (obj) {
  return toLength(obj.length);
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/native-symbol.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable es/no-symbol -- required for testing */
var V8_VERSION = __webpack_require__("./node_modules/core-js-pure/internals/engine-v8-version.js");

var fails = __webpack_require__("./node_modules/core-js-pure/internals/fails.js"); // eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing


module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  var symbol = Symbol(); // Chrome 38 Symbol has incorrect toString conversion
  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances

  return !String(symbol) || !(Object(symbol) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
  !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});

/***/ }),

/***/ "./node_modules/core-js-pure/internals/object-define-property.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var global = __webpack_require__("./node_modules/core-js-pure/internals/global.js");

var DESCRIPTORS = __webpack_require__("./node_modules/core-js-pure/internals/descriptors.js");

var IE8_DOM_DEFINE = __webpack_require__("./node_modules/core-js-pure/internals/ie8-dom-define.js");

var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__("./node_modules/core-js-pure/internals/v8-prototype-define-bug.js");

var anObject = __webpack_require__("./node_modules/core-js-pure/internals/an-object.js");

var toPropertyKey = __webpack_require__("./node_modules/core-js-pure/internals/to-property-key.js");

var TypeError = global.TypeError; // eslint-disable-next-line es/no-object-defineproperty -- safe

var $defineProperty = Object.defineProperty; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe

var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var ENUMERABLE = 'enumerable';
var CONFIGURABLE = 'configurable';
var WRITABLE = 'writable'; // `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty

exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);

  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
    var current = $getOwnPropertyDescriptor(O, P);

    if (current && current[WRITABLE]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
        writable: false
      };
    }
  }

  return $defineProperty(O, P, Attributes);
} : $defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) {
    /* empty */
  }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/object-get-own-property-descriptor.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__("./node_modules/core-js-pure/internals/descriptors.js");

var call = __webpack_require__("./node_modules/core-js-pure/internals/function-call.js");

var propertyIsEnumerableModule = __webpack_require__("./node_modules/core-js-pure/internals/object-property-is-enumerable.js");

var createPropertyDescriptor = __webpack_require__("./node_modules/core-js-pure/internals/create-property-descriptor.js");

var toIndexedObject = __webpack_require__("./node_modules/core-js-pure/internals/to-indexed-object.js");

var toPropertyKey = __webpack_require__("./node_modules/core-js-pure/internals/to-property-key.js");

var hasOwn = __webpack_require__("./node_modules/core-js-pure/internals/has-own-property.js");

var IE8_DOM_DEFINE = __webpack_require__("./node_modules/core-js-pure/internals/ie8-dom-define.js"); // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe


var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor

exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPropertyKey(P);
  if (IE8_DOM_DEFINE) try {
    return $getOwnPropertyDescriptor(O, P);
  } catch (error) {
    /* empty */
  }
  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/object-is-prototype-of.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__("./node_modules/core-js-pure/internals/function-uncurry-this.js");

module.exports = uncurryThis({}.isPrototypeOf);

/***/ }),

/***/ "./node_modules/core-js-pure/internals/object-property-is-enumerable.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


var $propertyIsEnumerable = {}.propertyIsEnumerable; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe

var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // Nashorn ~ JDK8 bug

var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({
  1: 2
}, 1); // `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable

exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;

/***/ }),

/***/ "./node_modules/core-js-pure/internals/ordinary-to-primitive.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__("./node_modules/core-js-pure/internals/global.js");

var call = __webpack_require__("./node_modules/core-js-pure/internals/function-call.js");

var isCallable = __webpack_require__("./node_modules/core-js-pure/internals/is-callable.js");

var isObject = __webpack_require__("./node_modules/core-js-pure/internals/is-object.js");

var TypeError = global.TypeError; // `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive

module.exports = function (input, pref) {
  var fn, val;
  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;
  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  throw TypeError("Can't convert object to primitive value");
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/path.js":
/***/ ((module) => {

module.exports = {};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/require-object-coercible.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__("./node_modules/core-js-pure/internals/global.js");

var TypeError = global.TypeError; // `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible

module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on " + it);
  return it;
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/set-global.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__("./node_modules/core-js-pure/internals/global.js"); // eslint-disable-next-line es/no-object-defineproperty -- safe


var defineProperty = Object.defineProperty;

module.exports = function (key, value) {
  try {
    defineProperty(global, key, {
      value: value,
      configurable: true,
      writable: true
    });
  } catch (error) {
    global[key] = value;
  }

  return value;
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/shared-store.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__("./node_modules/core-js-pure/internals/global.js");

var setGlobal = __webpack_require__("./node_modules/core-js-pure/internals/set-global.js");

var SHARED = '__core-js_shared__';
var store = global[SHARED] || setGlobal(SHARED, {});
module.exports = store;

/***/ }),

/***/ "./node_modules/core-js-pure/internals/shared.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var IS_PURE = __webpack_require__("./node_modules/core-js-pure/internals/is-pure.js");

var store = __webpack_require__("./node_modules/core-js-pure/internals/shared-store.js");

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.21.1',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2014-2022 Denis Pushkarev (zloirock.ru)',
  license: 'https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE',
  source: 'https://github.com/zloirock/core-js'
});

/***/ }),

/***/ "./node_modules/core-js-pure/internals/to-absolute-index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIntegerOrInfinity = __webpack_require__("./node_modules/core-js-pure/internals/to-integer-or-infinity.js");

var max = Math.max;
var min = Math.min; // Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).

module.exports = function (index, length) {
  var integer = toIntegerOrInfinity(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/to-indexed-object.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__("./node_modules/core-js-pure/internals/indexed-object.js");

var requireObjectCoercible = __webpack_require__("./node_modules/core-js-pure/internals/require-object-coercible.js");

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/to-integer-or-infinity.js":
/***/ ((module) => {

var ceil = Math.ceil;
var floor = Math.floor; // `ToIntegerOrInfinity` abstract operation
// https://tc39.es/ecma262/#sec-tointegerorinfinity

module.exports = function (argument) {
  var number = +argument; // eslint-disable-next-line no-self-compare -- safe

  return number !== number || number === 0 ? 0 : (number > 0 ? floor : ceil)(number);
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/to-length.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIntegerOrInfinity = __webpack_require__("./node_modules/core-js-pure/internals/to-integer-or-infinity.js");

var min = Math.min; // `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength

module.exports = function (argument) {
  return argument > 0 ? min(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/to-object.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__("./node_modules/core-js-pure/internals/global.js");

var requireObjectCoercible = __webpack_require__("./node_modules/core-js-pure/internals/require-object-coercible.js");

var Object = global.Object; // `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject

module.exports = function (argument) {
  return Object(requireObjectCoercible(argument));
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/to-primitive.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__("./node_modules/core-js-pure/internals/global.js");

var call = __webpack_require__("./node_modules/core-js-pure/internals/function-call.js");

var isObject = __webpack_require__("./node_modules/core-js-pure/internals/is-object.js");

var isSymbol = __webpack_require__("./node_modules/core-js-pure/internals/is-symbol.js");

var getMethod = __webpack_require__("./node_modules/core-js-pure/internals/get-method.js");

var ordinaryToPrimitive = __webpack_require__("./node_modules/core-js-pure/internals/ordinary-to-primitive.js");

var wellKnownSymbol = __webpack_require__("./node_modules/core-js-pure/internals/well-known-symbol.js");

var TypeError = global.TypeError;
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive'); // `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive

module.exports = function (input, pref) {
  if (!isObject(input) || isSymbol(input)) return input;
  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
  var result;

  if (exoticToPrim) {
    if (pref === undefined) pref = 'default';
    result = call(exoticToPrim, input, pref);
    if (!isObject(result) || isSymbol(result)) return result;
    throw TypeError("Can't convert object to primitive value");
  }

  if (pref === undefined) pref = 'number';
  return ordinaryToPrimitive(input, pref);
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/to-property-key.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toPrimitive = __webpack_require__("./node_modules/core-js-pure/internals/to-primitive.js");

var isSymbol = __webpack_require__("./node_modules/core-js-pure/internals/is-symbol.js"); // `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey


module.exports = function (argument) {
  var key = toPrimitive(argument, 'string');
  return isSymbol(key) ? key : key + '';
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/try-to-string.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__("./node_modules/core-js-pure/internals/global.js");

var String = global.String;

module.exports = function (argument) {
  try {
    return String(argument);
  } catch (error) {
    return 'Object';
  }
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/uid.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__("./node_modules/core-js-pure/internals/function-uncurry-this.js");

var id = 0;
var postfix = Math.random();
var toString = uncurryThis(1.0.toString);

module.exports = function (key) {
  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);
};

/***/ }),

/***/ "./node_modules/core-js-pure/internals/use-symbol-as-uid.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable es/no-symbol -- required for testing */
var NATIVE_SYMBOL = __webpack_require__("./node_modules/core-js-pure/internals/native-symbol.js");

module.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == 'symbol';

/***/ }),

/***/ "./node_modules/core-js-pure/internals/v8-prototype-define-bug.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__("./node_modules/core-js-pure/internals/descriptors.js");

var fails = __webpack_require__("./node_modules/core-js-pure/internals/fails.js"); // V8 ~ Chrome 36-
// https://bugs.chromium.org/p/v8/issues/detail?id=3334


module.exports = DESCRIPTORS && fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty(function () {
    /* empty */
  }, 'prototype', {
    value: 42,
    writable: false
  }).prototype != 42;
});

/***/ }),

/***/ "./node_modules/core-js-pure/internals/well-known-symbol.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__("./node_modules/core-js-pure/internals/global.js");

var shared = __webpack_require__("./node_modules/core-js-pure/internals/shared.js");

var hasOwn = __webpack_require__("./node_modules/core-js-pure/internals/has-own-property.js");

var uid = __webpack_require__("./node_modules/core-js-pure/internals/uid.js");

var NATIVE_SYMBOL = __webpack_require__("./node_modules/core-js-pure/internals/native-symbol.js");

var USE_SYMBOL_AS_UID = __webpack_require__("./node_modules/core-js-pure/internals/use-symbol-as-uid.js");

var WellKnownSymbolsStore = shared('wks');
var Symbol = global.Symbol;
var symbolFor = Symbol && Symbol['for'];
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!hasOwn(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {
    var description = 'Symbol.' + name;

    if (NATIVE_SYMBOL && hasOwn(Symbol, name)) {
      WellKnownSymbolsStore[name] = Symbol[name];
    } else if (USE_SYMBOL_AS_UID && symbolFor) {
      WellKnownSymbolsStore[name] = symbolFor(description);
    } else {
      WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
    }
  }

  return WellKnownSymbolsStore[name];
};

/***/ }),

/***/ "./node_modules/core-js-pure/modules/es.array.fill.js":
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__("./node_modules/core-js-pure/internals/export.js");

var fill = __webpack_require__("./node_modules/core-js-pure/internals/array-fill.js");

var addToUnscopables = __webpack_require__("./node_modules/core-js-pure/internals/add-to-unscopables.js"); // `Array.prototype.fill` method
// https://tc39.es/ecma262/#sec-array.prototype.fill


$({
  target: 'Array',
  proto: true
}, {
  fill: fill
}); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

addToUnscopables('fill');

/***/ }),

/***/ "./node_modules/core-js-pure/modules/es.array.includes.js":
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__("./node_modules/core-js-pure/internals/export.js");

var $includes = (__webpack_require__("./node_modules/core-js-pure/internals/array-includes.js").includes);

var addToUnscopables = __webpack_require__("./node_modules/core-js-pure/internals/add-to-unscopables.js"); // `Array.prototype.includes` method
// https://tc39.es/ecma262/#sec-array.prototype.includes


$({
  target: 'Array',
  proto: true
}, {
  includes: function includes(el
  /* , fromIndex = 0 */
  ) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
}); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

addToUnscopables('includes');

/***/ }),

/***/ "./node_modules/core-js-pure/stable/array/fill.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var parent = __webpack_require__("./node_modules/core-js-pure/es/array/fill.js");

module.exports = parent;

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/***/ ((module) => {

"use strict";

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/

module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";

      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }

      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }

      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }

      content += cssWithMappingToString(item);

      if (needLayer) {
        content += "}";
      }

      if (item[2]) {
        content += "}";
      }

      if (item[4]) {
        content += "}";
      }

      return content;
    }).join("");
  }; // import a list of modules into the list


  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }

      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }

      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }

      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }

      list.push(item);
    }
  };

  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/getUrl.js":
/***/ ((module) => {

"use strict";


module.exports = function (url, options) {
  if (!options) {
    options = {};
  }

  if (!url) {
    return url;
  }

  url = String(url.__esModule ? url.default : url); // If url is already wrapped in quotes, remove them

  if (/^['"].*['"]$/.test(url)) {
    url = url.slice(1, -1);
  }

  if (options.hash) {
    url += options.hash;
  } // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls


  if (/["'() \t\n]|(%20)/.test(url) || options.needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, "\\n"), "\"");
  }

  return url;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/noSourceMaps.js":
/***/ ((module) => {

"use strict";


module.exports = function (i) {
  return i[1];
};

/***/ }),

/***/ "./node_modules/es6-object-assign/auto.js":
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


(__webpack_require__("./node_modules/es6-object-assign/index.js").polyfill)();

/***/ }),

/***/ "./node_modules/es6-object-assign/index.js":
/***/ ((module) => {

"use strict";
/**
 * Code refactored from Mozilla Developer Network:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 */


function assign(target, firstSource) {
  if (target === undefined || target === null) {
    throw new TypeError('Cannot convert first argument to object');
  }

  var to = Object(target);

  for (var i = 1; i < arguments.length; i++) {
    var nextSource = arguments[i];

    if (nextSource === undefined || nextSource === null) {
      continue;
    }

    var keysArray = Object.keys(Object(nextSource));

    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
      var nextKey = keysArray[nextIndex];
      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);

      if (desc !== undefined && desc.enumerable) {
        to[nextKey] = nextSource[nextKey];
      }
    }
  }

  return to;
}

function polyfill() {
  if (!Object.assign) {
    Object.defineProperty(Object, 'assign', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: assign
    });
  }
}

module.exports = {
  assign: assign,
  polyfill: polyfill
};

/***/ }),

/***/ "./node_modules/es6-promise/auto.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// This file can be required in Browserify and Node.js for automatic polyfill
// To use it:  require('es6-promise/auto');


module.exports = (__webpack_require__("./node_modules/es6-promise/dist/es6-promise.js").polyfill)();

/***/ }),

/***/ "./node_modules/es6-promise/dist/es6-promise.js":
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.8+1e68dce6
 */
(function (global, factory) {
   true ? module.exports = factory() : 0;
})(this, function () {
  'use strict';

  function objectOrFunction(x) {
    var type = typeof x;
    return x !== null && (type === 'object' || type === 'function');
  }

  function isFunction(x) {
    return typeof x === 'function';
  }

  var _isArray = void 0;

  if (Array.isArray) {
    _isArray = Array.isArray;
  } else {
    _isArray = function (x) {
      return Object.prototype.toString.call(x) === '[object Array]';
    };
  }

  var isArray = _isArray;
  var len = 0;
  var vertxNext = void 0;
  var customSchedulerFn = void 0;

  var asap = function asap(callback, arg) {
    queue[len] = callback;
    queue[len + 1] = arg;
    len += 2;

    if (len === 2) {
      // If len is 2, that means that we need to schedule an async flush.
      // If additional callbacks are queued before the queue is flushed, they
      // will be processed by this flush that we are scheduling.
      if (customSchedulerFn) {
        customSchedulerFn(flush);
      } else {
        scheduleFlush();
      }
    }
  };

  function setScheduler(scheduleFn) {
    customSchedulerFn = scheduleFn;
  }

  function setAsap(asapFn) {
    asap = asapFn;
  }

  var browserWindow = typeof window !== 'undefined' ? window : undefined;
  var browserGlobal = browserWindow || {};
  var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
  var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]'; // test for web worker but not in IE10

  var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined'; // node

  function useNextTick() {
    // node version 0.10.x displays a deprecation warning when nextTick is used recursively
    // see https://github.com/cujojs/when/issues/410 for details
    return function () {
      return process.nextTick(flush);
    };
  } // vertx


  function useVertxTimer() {
    if (typeof vertxNext !== 'undefined') {
      return function () {
        vertxNext(flush);
      };
    }

    return useSetTimeout();
  }

  function useMutationObserver() {
    var iterations = 0;
    var observer = new BrowserMutationObserver(flush);
    var node = document.createTextNode('');
    observer.observe(node, {
      characterData: true
    });
    return function () {
      node.data = iterations = ++iterations % 2;
    };
  } // web worker


  function useMessageChannel() {
    var channel = new MessageChannel();
    channel.port1.onmessage = flush;
    return function () {
      return channel.port2.postMessage(0);
    };
  }

  function useSetTimeout() {
    // Store setTimeout reference so es6-promise will be unaffected by
    // other code modifying setTimeout (like sinon.useFakeTimers())
    var globalSetTimeout = setTimeout;
    return function () {
      return globalSetTimeout(flush, 1);
    };
  }

  var queue = new Array(1000);

  function flush() {
    for (var i = 0; i < len; i += 2) {
      var callback = queue[i];
      var arg = queue[i + 1];
      callback(arg);
      queue[i] = undefined;
      queue[i + 1] = undefined;
    }

    len = 0;
  }

  function attemptVertx() {
    try {
      var vertx = Function('return this')().require('vertx');

      vertxNext = vertx.runOnLoop || vertx.runOnContext;
      return useVertxTimer();
    } catch (e) {
      return useSetTimeout();
    }
  }

  var scheduleFlush = void 0; // Decide what async method to use to triggering processing of queued callbacks:

  if (isNode) {
    scheduleFlush = useNextTick();
  } else if (BrowserMutationObserver) {
    scheduleFlush = useMutationObserver();
  } else if (isWorker) {
    scheduleFlush = useMessageChannel();
  } else if (browserWindow === undefined && "function" === 'function') {
    scheduleFlush = attemptVertx();
  } else {
    scheduleFlush = useSetTimeout();
  }

  function then(onFulfillment, onRejection) {
    var parent = this;
    var child = new this.constructor(noop);

    if (child[PROMISE_ID] === undefined) {
      makePromise(child);
    }

    var _state = parent._state;

    if (_state) {
      var callback = arguments[_state - 1];
      asap(function () {
        return invokeCallback(_state, child, callback, parent._result);
      });
    } else {
      subscribe(parent, child, onFulfillment, onRejection);
    }

    return child;
  }
  /**
    `Promise.resolve` returns a promise that will become resolved with the
    passed `value`. It is shorthand for the following:
  
    ```javascript
    let promise = new Promise(function(resolve, reject){
      resolve(1);
    });
  
    promise.then(function(value){
      // value === 1
    });
    ```
  
    Instead of writing the above, your code now simply becomes the following:
  
    ```javascript
    let promise = Promise.resolve(1);
  
    promise.then(function(value){
      // value === 1
    });
    ```
  
    @method resolve
    @static
    @param {Any} value value that the returned promise will be resolved with
    Useful for tooling.
    @return {Promise} a promise that will become fulfilled with the given
    `value`
  */


  function resolve$1(object) {
    /*jshint validthis:true */
    var Constructor = this;

    if (object && typeof object === 'object' && object.constructor === Constructor) {
      return object;
    }

    var promise = new Constructor(noop);
    resolve(promise, object);
    return promise;
  }

  var PROMISE_ID = Math.random().toString(36).substring(2);

  function noop() {}

  var PENDING = void 0;
  var FULFILLED = 1;
  var REJECTED = 2;

  function selfFulfillment() {
    return new TypeError("You cannot resolve a promise with itself");
  }

  function cannotReturnOwn() {
    return new TypeError('A promises callback cannot return that same promise.');
  }

  function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
    try {
      then$$1.call(value, fulfillmentHandler, rejectionHandler);
    } catch (e) {
      return e;
    }
  }

  function handleForeignThenable(promise, thenable, then$$1) {
    asap(function (promise) {
      var sealed = false;
      var error = tryThen(then$$1, thenable, function (value) {
        if (sealed) {
          return;
        }

        sealed = true;

        if (thenable !== value) {
          resolve(promise, value);
        } else {
          fulfill(promise, value);
        }
      }, function (reason) {
        if (sealed) {
          return;
        }

        sealed = true;
        reject(promise, reason);
      }, 'Settle: ' + (promise._label || ' unknown promise'));

      if (!sealed && error) {
        sealed = true;
        reject(promise, error);
      }
    }, promise);
  }

  function handleOwnThenable(promise, thenable) {
    if (thenable._state === FULFILLED) {
      fulfill(promise, thenable._result);
    } else if (thenable._state === REJECTED) {
      reject(promise, thenable._result);
    } else {
      subscribe(thenable, undefined, function (value) {
        return resolve(promise, value);
      }, function (reason) {
        return reject(promise, reason);
      });
    }
  }

  function handleMaybeThenable(promise, maybeThenable, then$$1) {
    if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {
      handleOwnThenable(promise, maybeThenable);
    } else {
      if (then$$1 === undefined) {
        fulfill(promise, maybeThenable);
      } else if (isFunction(then$$1)) {
        handleForeignThenable(promise, maybeThenable, then$$1);
      } else {
        fulfill(promise, maybeThenable);
      }
    }
  }

  function resolve(promise, value) {
    if (promise === value) {
      reject(promise, selfFulfillment());
    } else if (objectOrFunction(value)) {
      var then$$1 = void 0;

      try {
        then$$1 = value.then;
      } catch (error) {
        reject(promise, error);
        return;
      }

      handleMaybeThenable(promise, value, then$$1);
    } else {
      fulfill(promise, value);
    }
  }

  function publishRejection(promise) {
    if (promise._onerror) {
      promise._onerror(promise._result);
    }

    publish(promise);
  }

  function fulfill(promise, value) {
    if (promise._state !== PENDING) {
      return;
    }

    promise._result = value;
    promise._state = FULFILLED;

    if (promise._subscribers.length !== 0) {
      asap(publish, promise);
    }
  }

  function reject(promise, reason) {
    if (promise._state !== PENDING) {
      return;
    }

    promise._state = REJECTED;
    promise._result = reason;
    asap(publishRejection, promise);
  }

  function subscribe(parent, child, onFulfillment, onRejection) {
    var _subscribers = parent._subscribers;
    var length = _subscribers.length;
    parent._onerror = null;
    _subscribers[length] = child;
    _subscribers[length + FULFILLED] = onFulfillment;
    _subscribers[length + REJECTED] = onRejection;

    if (length === 0 && parent._state) {
      asap(publish, parent);
    }
  }

  function publish(promise) {
    var subscribers = promise._subscribers;
    var settled = promise._state;

    if (subscribers.length === 0) {
      return;
    }

    var child = void 0,
        callback = void 0,
        detail = promise._result;

    for (var i = 0; i < subscribers.length; i += 3) {
      child = subscribers[i];
      callback = subscribers[i + settled];

      if (child) {
        invokeCallback(settled, child, callback, detail);
      } else {
        callback(detail);
      }
    }

    promise._subscribers.length = 0;
  }

  function invokeCallback(settled, promise, callback, detail) {
    var hasCallback = isFunction(callback),
        value = void 0,
        error = void 0,
        succeeded = true;

    if (hasCallback) {
      try {
        value = callback(detail);
      } catch (e) {
        succeeded = false;
        error = e;
      }

      if (promise === value) {
        reject(promise, cannotReturnOwn());
        return;
      }
    } else {
      value = detail;
    }

    if (promise._state !== PENDING) {// noop
    } else if (hasCallback && succeeded) {
      resolve(promise, value);
    } else if (succeeded === false) {
      reject(promise, error);
    } else if (settled === FULFILLED) {
      fulfill(promise, value);
    } else if (settled === REJECTED) {
      reject(promise, value);
    }
  }

  function initializePromise(promise, resolver) {
    try {
      resolver(function resolvePromise(value) {
        resolve(promise, value);
      }, function rejectPromise(reason) {
        reject(promise, reason);
      });
    } catch (e) {
      reject(promise, e);
    }
  }

  var id = 0;

  function nextId() {
    return id++;
  }

  function makePromise(promise) {
    promise[PROMISE_ID] = id++;
    promise._state = undefined;
    promise._result = undefined;
    promise._subscribers = [];
  }

  function validationError() {
    return new Error('Array Methods must be provided an Array');
  }

  var Enumerator = function () {
    function Enumerator(Constructor, input) {
      this._instanceConstructor = Constructor;
      this.promise = new Constructor(noop);

      if (!this.promise[PROMISE_ID]) {
        makePromise(this.promise);
      }

      if (isArray(input)) {
        this.length = input.length;
        this._remaining = input.length;
        this._result = new Array(this.length);

        if (this.length === 0) {
          fulfill(this.promise, this._result);
        } else {
          this.length = this.length || 0;

          this._enumerate(input);

          if (this._remaining === 0) {
            fulfill(this.promise, this._result);
          }
        }
      } else {
        reject(this.promise, validationError());
      }
    }

    Enumerator.prototype._enumerate = function _enumerate(input) {
      for (var i = 0; this._state === PENDING && i < input.length; i++) {
        this._eachEntry(input[i], i);
      }
    };

    Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {
      var c = this._instanceConstructor;
      var resolve$$1 = c.resolve;

      if (resolve$$1 === resolve$1) {
        var _then = void 0;

        var error = void 0;
        var didError = false;

        try {
          _then = entry.then;
        } catch (e) {
          didError = true;
          error = e;
        }

        if (_then === then && entry._state !== PENDING) {
          this._settledAt(entry._state, i, entry._result);
        } else if (typeof _then !== 'function') {
          this._remaining--;
          this._result[i] = entry;
        } else if (c === Promise$1) {
          var promise = new c(noop);

          if (didError) {
            reject(promise, error);
          } else {
            handleMaybeThenable(promise, entry, _then);
          }

          this._willSettleAt(promise, i);
        } else {
          this._willSettleAt(new c(function (resolve$$1) {
            return resolve$$1(entry);
          }), i);
        }
      } else {
        this._willSettleAt(resolve$$1(entry), i);
      }
    };

    Enumerator.prototype._settledAt = function _settledAt(state, i, value) {
      var promise = this.promise;

      if (promise._state === PENDING) {
        this._remaining--;

        if (state === REJECTED) {
          reject(promise, value);
        } else {
          this._result[i] = value;
        }
      }

      if (this._remaining === 0) {
        fulfill(promise, this._result);
      }
    };

    Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {
      var enumerator = this;
      subscribe(promise, undefined, function (value) {
        return enumerator._settledAt(FULFILLED, i, value);
      }, function (reason) {
        return enumerator._settledAt(REJECTED, i, reason);
      });
    };

    return Enumerator;
  }();
  /**
    `Promise.all` accepts an array of promises, and returns a new promise which
    is fulfilled with an array of fulfillment values for the passed promises, or
    rejected with the reason of the first passed promise to be rejected. It casts all
    elements of the passed iterable to promises as it runs this algorithm.
  
    Example:
  
    ```javascript
    let promise1 = resolve(1);
    let promise2 = resolve(2);
    let promise3 = resolve(3);
    let promises = [ promise1, promise2, promise3 ];
  
    Promise.all(promises).then(function(array){
      // The array here would be [ 1, 2, 3 ];
    });
    ```
  
    If any of the `promises` given to `all` are rejected, the first promise
    that is rejected will be given as an argument to the returned promises's
    rejection handler. For example:
  
    Example:
  
    ```javascript
    let promise1 = resolve(1);
    let promise2 = reject(new Error("2"));
    let promise3 = reject(new Error("3"));
    let promises = [ promise1, promise2, promise3 ];
  
    Promise.all(promises).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(error) {
      // error.message === "2"
    });
    ```
  
    @method all
    @static
    @param {Array} entries array of promises
    @param {String} label optional string for labeling the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled when all `promises` have been
    fulfilled, or rejected if any of them become rejected.
    @static
  */


  function all(entries) {
    return new Enumerator(this, entries).promise;
  }
  /**
    `Promise.race` returns a new promise which is settled in the same way as the
    first passed promise to settle.
  
    Example:
  
    ```javascript
    let promise1 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });
  
    let promise2 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 2');
      }, 100);
    });
  
    Promise.race([promise1, promise2]).then(function(result){
      // result === 'promise 2' because it was resolved before promise1
      // was resolved.
    });
    ```
  
    `Promise.race` is deterministic in that only the state of the first
    settled promise matters. For example, even if other promises given to the
    `promises` array argument are resolved, but the first settled promise has
    become rejected before the other promises became fulfilled, the returned
    promise will become rejected:
  
    ```javascript
    let promise1 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });
  
    let promise2 = new Promise(function(resolve, reject){
      setTimeout(function(){
        reject(new Error('promise 2'));
      }, 100);
    });
  
    Promise.race([promise1, promise2]).then(function(result){
      // Code here never runs
    }, function(reason){
      // reason.message === 'promise 2' because promise 2 became rejected before
      // promise 1 became fulfilled
    });
    ```
  
    An example real-world use case is implementing timeouts:
  
    ```javascript
    Promise.race([ajax('foo.json'), timeout(5000)])
    ```
  
    @method race
    @static
    @param {Array} promises array of promises to observe
    Useful for tooling.
    @return {Promise} a promise which settles in the same way as the first passed
    promise to settle.
  */


  function race(entries) {
    /*jshint validthis:true */
    var Constructor = this;

    if (!isArray(entries)) {
      return new Constructor(function (_, reject) {
        return reject(new TypeError('You must pass an array to race.'));
      });
    } else {
      return new Constructor(function (resolve, reject) {
        var length = entries.length;

        for (var i = 0; i < length; i++) {
          Constructor.resolve(entries[i]).then(resolve, reject);
        }
      });
    }
  }
  /**
    `Promise.reject` returns a promise rejected with the passed `reason`.
    It is shorthand for the following:
  
    ```javascript
    let promise = new Promise(function(resolve, reject){
      reject(new Error('WHOOPS'));
    });
  
    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```
  
    Instead of writing the above, your code now simply becomes the following:
  
    ```javascript
    let promise = Promise.reject(new Error('WHOOPS'));
  
    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```
  
    @method reject
    @static
    @param {Any} reason value that the returned promise will be rejected with.
    Useful for tooling.
    @return {Promise} a promise rejected with the given `reason`.
  */


  function reject$1(reason) {
    /*jshint validthis:true */
    var Constructor = this;
    var promise = new Constructor(noop);
    reject(promise, reason);
    return promise;
  }

  function needsResolver() {
    throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
  }

  function needsNew() {
    throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
  }
  /**
    Promise objects represent the eventual result of an asynchronous operation. The
    primary way of interacting with a promise is through its `then` method, which
    registers callbacks to receive either a promise's eventual value or the reason
    why the promise cannot be fulfilled.
  
    Terminology
    -----------
  
    - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
    - `thenable` is an object or function that defines a `then` method.
    - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
    - `exception` is a value that is thrown using the throw statement.
    - `reason` is a value that indicates why a promise was rejected.
    - `settled` the final resting state of a promise, fulfilled or rejected.
  
    A promise can be in one of three states: pending, fulfilled, or rejected.
  
    Promises that are fulfilled have a fulfillment value and are in the fulfilled
    state.  Promises that are rejected have a rejection reason and are in the
    rejected state.  A fulfillment value is never a thenable.
  
    Promises can also be said to *resolve* a value.  If this value is also a
    promise, then the original promise's settled state will match the value's
    settled state.  So a promise that *resolves* a promise that rejects will
    itself reject, and a promise that *resolves* a promise that fulfills will
    itself fulfill.
  
  
    Basic Usage:
    ------------
  
    ```js
    let promise = new Promise(function(resolve, reject) {
      // on success
      resolve(value);
  
      // on failure
      reject(reason);
    });
  
    promise.then(function(value) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```
  
    Advanced Usage:
    ---------------
  
    Promises shine when abstracting away asynchronous interactions such as
    `XMLHttpRequest`s.
  
    ```js
    function getJSON(url) {
      return new Promise(function(resolve, reject){
        let xhr = new XMLHttpRequest();
  
        xhr.open('GET', url);
        xhr.onreadystatechange = handler;
        xhr.responseType = 'json';
        xhr.setRequestHeader('Accept', 'application/json');
        xhr.send();
  
        function handler() {
          if (this.readyState === this.DONE) {
            if (this.status === 200) {
              resolve(this.response);
            } else {
              reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
            }
          }
        };
      });
    }
  
    getJSON('/posts.json').then(function(json) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```
  
    Unlike callbacks, promises are great composable primitives.
  
    ```js
    Promise.all([
      getJSON('/posts'),
      getJSON('/comments')
    ]).then(function(values){
      values[0] // => postsJSON
      values[1] // => commentsJSON
  
      return values;
    });
    ```
  
    @class Promise
    @param {Function} resolver
    Useful for tooling.
    @constructor
  */


  var Promise$1 = function () {
    function Promise(resolver) {
      this[PROMISE_ID] = nextId();
      this._result = this._state = undefined;
      this._subscribers = [];

      if (noop !== resolver) {
        typeof resolver !== 'function' && needsResolver();
        this instanceof Promise ? initializePromise(this, resolver) : needsNew();
      }
    }
    /**
    The primary way of interacting with a promise is through its `then` method,
    which registers callbacks to receive either a promise's eventual value or the
    reason why the promise cannot be fulfilled.
     ```js
    findUser().then(function(user){
      // user is available
    }, function(reason){
      // user is unavailable, and you are given the reason why
    });
    ```
     Chaining
    --------
     The return value of `then` is itself a promise.  This second, 'downstream'
    promise is resolved with the return value of the first promise's fulfillment
    or rejection handler, or rejected if the handler throws an exception.
     ```js
    findUser().then(function (user) {
      return user.name;
    }, function (reason) {
      return 'default name';
    }).then(function (userName) {
      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
      // will be `'default name'`
    });
     findUser().then(function (user) {
      throw new Error('Found user, but still unhappy');
    }, function (reason) {
      throw new Error('`findUser` rejected and we're unhappy');
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
    });
    ```
    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
     ```js
    findUser().then(function (user) {
      throw new PedagogicalException('Upstream error');
    }).then(function (value) {
      // never reached
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // The `PedgagocialException` is propagated all the way down to here
    });
    ```
     Assimilation
    ------------
     Sometimes the value you want to propagate to a downstream promise can only be
    retrieved asynchronously. This can be achieved by returning a promise in the
    fulfillment or rejection handler. The downstream promise will then be pending
    until the returned promise is settled. This is called *assimilation*.
     ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // The user's comments are now available
    });
    ```
     If the assimliated promise rejects, then the downstream promise will also reject.
     ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // If `findCommentsByAuthor` fulfills, we'll have the value here
    }, function (reason) {
      // If `findCommentsByAuthor` rejects, we'll have the reason here
    });
    ```
     Simple Example
    --------------
     Synchronous Example
     ```javascript
    let result;
     try {
      result = findResult();
      // success
    } catch(reason) {
      // failure
    }
    ```
     Errback Example
     ```js
    findResult(function(result, err){
      if (err) {
        // failure
      } else {
        // success
      }
    });
    ```
     Promise Example;
     ```javascript
    findResult().then(function(result){
      // success
    }, function(reason){
      // failure
    });
    ```
     Advanced Example
    --------------
     Synchronous Example
     ```javascript
    let author, books;
     try {
      author = findAuthor();
      books  = findBooksByAuthor(author);
      // success
    } catch(reason) {
      // failure
    }
    ```
     Errback Example
     ```js
     function foundBooks(books) {
     }
     function failure(reason) {
     }
     findAuthor(function(author, err){
      if (err) {
        failure(err);
        // failure
      } else {
        try {
          findBoooksByAuthor(author, function(books, err) {
            if (err) {
              failure(err);
            } else {
              try {
                foundBooks(books);
              } catch(reason) {
                failure(reason);
              }
            }
          });
        } catch(error) {
          failure(err);
        }
        // success
      }
    });
    ```
     Promise Example;
     ```javascript
    findAuthor().
      then(findBooksByAuthor).
      then(function(books){
        // found books
    }).catch(function(reason){
      // something went wrong
    });
    ```
     @method then
    @param {Function} onFulfilled
    @param {Function} onRejected
    Useful for tooling.
    @return {Promise}
    */

    /**
    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
    as the catch block of a try/catch statement.
    ```js
    function findAuthor(){
    throw new Error('couldn't find that author');
    }
    // synchronous
    try {
    findAuthor();
    } catch(reason) {
    // something went wrong
    }
    // async with promises
    findAuthor().catch(function(reason){
    // something went wrong
    });
    ```
    @method catch
    @param {Function} onRejection
    Useful for tooling.
    @return {Promise}
    */


    Promise.prototype.catch = function _catch(onRejection) {
      return this.then(null, onRejection);
    };
    /**
      `finally` will be invoked regardless of the promise's fate just as native
      try/catch/finally behaves
    
      Synchronous example:
    
      ```js
      findAuthor() {
        if (Math.random() > 0.5) {
          throw new Error();
        }
        return new Author();
      }
    
      try {
        return findAuthor(); // succeed or fail
      } catch(error) {
        return findOtherAuther();
      } finally {
        // always runs
        // doesn't affect the return value
      }
      ```
    
      Asynchronous example:
    
      ```js
      findAuthor().catch(function(reason){
        return findOtherAuther();
      }).finally(function(){
        // author was either found, or not
      });
      ```
    
      @method finally
      @param {Function} callback
      @return {Promise}
    */


    Promise.prototype.finally = function _finally(callback) {
      var promise = this;
      var constructor = promise.constructor;

      if (isFunction(callback)) {
        return promise.then(function (value) {
          return constructor.resolve(callback()).then(function () {
            return value;
          });
        }, function (reason) {
          return constructor.resolve(callback()).then(function () {
            throw reason;
          });
        });
      }

      return promise.then(callback, callback);
    };

    return Promise;
  }();

  Promise$1.prototype.then = then;
  Promise$1.all = all;
  Promise$1.race = race;
  Promise$1.resolve = resolve$1;
  Promise$1.reject = reject$1;
  Promise$1._setScheduler = setScheduler;
  Promise$1._setAsap = setAsap;
  Promise$1._asap = asap;
  /*global self*/

  function polyfill() {
    var local = void 0;

    if (typeof __webpack_require__.g !== 'undefined') {
      local = __webpack_require__.g;
    } else if (typeof self !== 'undefined') {
      local = self;
    } else {
      try {
        local = Function('return this')();
      } catch (e) {
        throw new Error('polyfill failed because global object is unavailable in this environment');
      }
    }

    var P = local.Promise;

    if (P) {
      var promiseToString = null;

      try {
        promiseToString = Object.prototype.toString.call(P.resolve());
      } catch (e) {// silently ignored
      }

      if (promiseToString === '[object Promise]' && !P.cast) {
        return;
      }
    }

    local.Promise = Promise$1;
  } // Strange compat..


  Promise$1.polyfill = polyfill;
  Promise$1.Promise = Promise$1;
  return Promise$1;
});

/***/ }),

/***/ "./node_modules/es6-string-polyfills/polyfill.min.js":
/***/ (() => {

!function () {
  "use strict";

  function r(r) {
    for (var t = [], e = 0; e < r.length; e++) t.push(r[e]);

    return t;
  }

  String.prototype.codePointAt || !function () {
    var r = function () {
      try {
        var r = {},
            t = Object.defineProperty,
            e = t(r, r, r) && t;
      } catch (r) {}

      return e;
    }(),
        t = function (r) {
      if (null == this) throw TypeError();
      var t = this + "",
          e = t.length,
          n = r ? +r : 0;

      if (n != n && (n = 0), !(n < 0 || n >= e)) {
        var o,
            i = t.charCodeAt(n);
        return i >= 55296 && i <= 56319 && e > n + 1 && (o = t.charCodeAt(n + 1), o >= 56320 && o <= 57343) ? 1024 * (i - 55296) + o - 56320 + 65536 : i;
      }
    };

    r ? r(String.prototype, "codePointAt", {
      value: t,
      configurable: !0,
      writable: !0
    }) : String.prototype.codePointAt = t;
  }(), String.prototype.repeat || !function () {
    var r = function () {
      try {
        var r = {},
            t = Object.defineProperty,
            e = t(r, r, r) && t;
      } catch (r) {}

      return e;
    }(),
        t = function (r) {
      if (null == this) throw TypeError();
      var t = this + "",
          e = r ? +r : 0;
      if (e != e && (e = 0), e < 0 || e == 1 / 0) throw RangeError();

      for (var n = ""; e;) e % 2 == 1 && (n += t), e > 1 && (t += t), e >>= 1;

      return n;
    };

    r ? r(String.prototype, "repeat", {
      value: t,
      configurable: !0,
      writable: !0
    }) : String.prototype.repeat = t;
  }(), String.prototype.includes || !function () {
    var r = {}.toString,
        t = function () {
      try {
        var r = {},
            t = Object.defineProperty,
            e = t(r, r, r) && t;
      } catch (r) {}

      return e;
    }(),
        e = "".indexOf,
        n = function (t) {
      if (null == this) throw TypeError();
      var n = this + "";
      if (t && "[object RegExp]" == r.call(t)) throw TypeError();
      var o = n.length,
          i = t + "",
          a = i.length,
          c = arguments.length > 1 ? arguments[1] : void 0,
          u = c ? +c : 0;
      return u != u && (u = 0), !(a + Math.min(Math.max(u, 0), o) > o) && e.call(n, i, u) != -1;
    };

    t ? t(String.prototype, "includes", {
      value: n,
      configurable: !0,
      writable: !0
    }) : String.prototype.includes = n;
  }(), String.prototype.startsWith || !function () {
    var r = function () {
      try {
        var r = {},
            t = Object.defineProperty,
            e = t(r, r, r) && t;
      } catch (r) {}

      return e;
    }(),
        t = {}.toString,
        e = function (r) {
      if (null == this) throw TypeError();
      var e = this + "";
      if (r && "[object RegExp]" == t.call(r)) throw TypeError();
      var n = e.length,
          o = r + "",
          i = o.length,
          a = arguments.length > 1 ? arguments[1] : void 0,
          c = a ? +a : 0;
      c != c && (c = 0);
      var u = Math.min(Math.max(c, 0), n);
      if (i + u > n) return !1;

      for (var l = -1; ++l < i;) if (e.charCodeAt(u + l) != o.charCodeAt(l)) return !1;

      return !0;
    };

    r ? r(String.prototype, "startsWith", {
      value: e,
      configurable: !0,
      writable: !0
    }) : String.prototype.startsWith = e;
  }(), String.prototype.endsWith || !function () {
    var r = function () {
      try {
        var r = {},
            t = Object.defineProperty,
            e = t(r, r, r) && t;
      } catch (r) {}

      return e;
    }(),
        t = {}.toString,
        e = function (r) {
      if (null == this) throw TypeError();
      var e = this + "";
      if (r && "[object RegExp]" == t.call(r)) throw TypeError();
      var n = e.length,
          o = r + "",
          i = o.length,
          a = n;

      if (arguments.length > 1) {
        var c = arguments[1];
        void 0 !== c && (a = c ? +c : 0, a != a && (a = 0));
      }

      var u = Math.min(Math.max(a, 0), n),
          l = u - i;
      if (l < 0) return !1;

      for (var h = -1; ++h < i;) if (e.charCodeAt(l + h) != o.charCodeAt(h)) return !1;

      return !0;
    };

    r ? r(String.prototype, "endsWith", {
      value: e,
      configurable: !0,
      writable: !0
    }) : String.prototype.endsWith = e;
  }(), String.fromCodePoint || !function () {
    var r = function () {
      try {
        var r = {},
            t = Object.defineProperty,
            e = t(r, r, r) && t;
      } catch (r) {}

      return e;
    }(),
        t = String.fromCharCode,
        e = Math.floor,
        n = function (r) {
      var n,
          o,
          i = 16384,
          a = [],
          c = -1,
          u = arguments.length;
      if (!u) return "";

      for (var l = ""; ++c < u;) {
        var h = +arguments[c];
        if (!isFinite(h) || h < 0 || h > 1114111 || e(h) != h) throw RangeError("Invalid code point: " + h);
        h <= 65535 ? a.push(h) : (h -= 65536, n = (h >> 10) + 55296, o = h % 1024 + 56320, a.push(n, o)), (c + 1 == u || a.length > i) && (l += t.apply(null, a), a.length = 0);
      }

      return l;
    };

    r ? r(String, "fromCodePoint", {
      value: n,
      configurable: !0,
      writable: !0
    }) : String.fromCodePoint = n;
  }(), Object.defineProperty(String, "raw", {
    configurable: !0,
    enumerable: !1,
    writable: !0,
    value: function (t, e) {
      var n;
      t = null != t ? t : {}, e = arguments.length > 1 ? r(arguments).slice(1) : [];

      try {
        n = r(t.raw);
      } catch (r) {
        throw new TypeError("Cannot convert undefined or null to object");
      }

      return n.map(function (r, n) {
        return t.raw.length <= n ? r : null != e[n - 1] ? e[n - 1] + r : r;
      }).join("");
    }
  });
}();

/***/ }),

/***/ "./node_modules/esprima/dist/esprima.js":
/***/ (function(module) {

(function webpackUniversalModuleDefinition(root, factory) {
  /* istanbul ignore next */
  if (true) module.exports = factory();else {}
})(this, function () {
  return (
    /******/
    function (modules) {
      // webpackBootstrap

      /******/
      // The module cache

      /******/
      var installedModules = {};
      /******/
      // The require function

      /******/

      function __nested_webpack_require_646__(moduleId) {
        /******/
        // Check if module is in cache

        /* istanbul ignore if */

        /******/
        if (installedModules[moduleId])
          /******/
          return installedModules[moduleId].exports;
        /******/
        // Create a new module (and put it into the cache)

        /******/

        var module = installedModules[moduleId] = {
          /******/
          exports: {},

          /******/
          id: moduleId,

          /******/
          loaded: false
          /******/

        };
        /******/
        // Execute the module function

        /******/

        modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_646__);
        /******/
        // Flag the module as loaded

        /******/

        module.loaded = true;
        /******/
        // Return the exports of the module

        /******/

        return module.exports;
        /******/
      }
      /******/
      // expose the modules object (__webpack_modules__)

      /******/


      __nested_webpack_require_646__.m = modules;
      /******/
      // expose the module cache

      /******/

      __nested_webpack_require_646__.c = installedModules;
      /******/
      // __webpack_public_path__

      /******/

      __nested_webpack_require_646__.p = "";
      /******/
      // Load entry module and return exports

      /******/

      return __nested_webpack_require_646__(0);
      /******/
    }
    /************************************************************************/

    /******/
    ([
    /* 0 */

    /***/
    function (module, exports, __nested_webpack_require_2253__) {
      "use strict";
      /*
        Copyright JS Foundation and other contributors, https://js.foundation/
      	  Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:
      	    * Redistributions of source code must retain the above copyright
            notice, this list of conditions and the following disclaimer.
          * Redistributions in binary form must reproduce the above copyright
            notice, this list of conditions and the following disclaimer in the
            documentation and/or other materials provided with the distribution.
      	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
        DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
        ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
        THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
      */

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var comment_handler_1 = __nested_webpack_require_2253__(1);

      var jsx_parser_1 = __nested_webpack_require_2253__(3);

      var parser_1 = __nested_webpack_require_2253__(8);

      var tokenizer_1 = __nested_webpack_require_2253__(15);

      function parse(code, options, delegate) {
        var commentHandler = null;

        var proxyDelegate = function (node, metadata) {
          if (delegate) {
            delegate(node, metadata);
          }

          if (commentHandler) {
            commentHandler.visit(node, metadata);
          }
        };

        var parserDelegate = typeof delegate === 'function' ? proxyDelegate : null;
        var collectComment = false;

        if (options) {
          collectComment = typeof options.comment === 'boolean' && options.comment;
          var attachComment = typeof options.attachComment === 'boolean' && options.attachComment;

          if (collectComment || attachComment) {
            commentHandler = new comment_handler_1.CommentHandler();
            commentHandler.attach = attachComment;
            options.comment = true;
            parserDelegate = proxyDelegate;
          }
        }

        var isModule = false;

        if (options && typeof options.sourceType === 'string') {
          isModule = options.sourceType === 'module';
        }

        var parser;

        if (options && typeof options.jsx === 'boolean' && options.jsx) {
          parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);
        } else {
          parser = new parser_1.Parser(code, options, parserDelegate);
        }

        var program = isModule ? parser.parseModule() : parser.parseScript();
        var ast = program;

        if (collectComment && commentHandler) {
          ast.comments = commentHandler.comments;
        }

        if (parser.config.tokens) {
          ast.tokens = parser.tokens;
        }

        if (parser.config.tolerant) {
          ast.errors = parser.errorHandler.errors;
        }

        return ast;
      }

      exports.parse = parse;

      function parseModule(code, options, delegate) {
        var parsingOptions = options || {};
        parsingOptions.sourceType = 'module';
        return parse(code, parsingOptions, delegate);
      }

      exports.parseModule = parseModule;

      function parseScript(code, options, delegate) {
        var parsingOptions = options || {};
        parsingOptions.sourceType = 'script';
        return parse(code, parsingOptions, delegate);
      }

      exports.parseScript = parseScript;

      function tokenize(code, options, delegate) {
        var tokenizer = new tokenizer_1.Tokenizer(code, options);
        var tokens;
        tokens = [];

        try {
          while (true) {
            var token = tokenizer.getNextToken();

            if (!token) {
              break;
            }

            if (delegate) {
              token = delegate(token);
            }

            tokens.push(token);
          }
        } catch (e) {
          tokenizer.errorHandler.tolerate(e);
        }

        if (tokenizer.errorHandler.tolerant) {
          tokens.errors = tokenizer.errors();
        }

        return tokens;
      }

      exports.tokenize = tokenize;

      var syntax_1 = __nested_webpack_require_2253__(2);

      exports.Syntax = syntax_1.Syntax; // Sync with *.json manifests.

      exports.version = '4.0.1';
      /***/
    },
    /* 1 */

    /***/
    function (module, exports, __nested_webpack_require_7272__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var syntax_1 = __nested_webpack_require_7272__(2);

      var CommentHandler = function () {
        function CommentHandler() {
          this.attach = false;
          this.comments = [];
          this.stack = [];
          this.leading = [];
          this.trailing = [];
        }

        CommentHandler.prototype.insertInnerComments = function (node, metadata) {
          //  innnerComments for properties empty block
          //  `function a() {/** comments **\/}`
          if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {
            var innerComments = [];

            for (var i = this.leading.length - 1; i >= 0; --i) {
              var entry = this.leading[i];

              if (metadata.end.offset >= entry.start) {
                innerComments.unshift(entry.comment);
                this.leading.splice(i, 1);
                this.trailing.splice(i, 1);
              }
            }

            if (innerComments.length) {
              node.innerComments = innerComments;
            }
          }
        };

        CommentHandler.prototype.findTrailingComments = function (metadata) {
          var trailingComments = [];

          if (this.trailing.length > 0) {
            for (var i = this.trailing.length - 1; i >= 0; --i) {
              var entry_1 = this.trailing[i];

              if (entry_1.start >= metadata.end.offset) {
                trailingComments.unshift(entry_1.comment);
              }
            }

            this.trailing.length = 0;
            return trailingComments;
          }

          var entry = this.stack[this.stack.length - 1];

          if (entry && entry.node.trailingComments) {
            var firstComment = entry.node.trailingComments[0];

            if (firstComment && firstComment.range[0] >= metadata.end.offset) {
              trailingComments = entry.node.trailingComments;
              delete entry.node.trailingComments;
            }
          }

          return trailingComments;
        };

        CommentHandler.prototype.findLeadingComments = function (metadata) {
          var leadingComments = [];
          var target;

          while (this.stack.length > 0) {
            var entry = this.stack[this.stack.length - 1];

            if (entry && entry.start >= metadata.start.offset) {
              target = entry.node;
              this.stack.pop();
            } else {
              break;
            }
          }

          if (target) {
            var count = target.leadingComments ? target.leadingComments.length : 0;

            for (var i = count - 1; i >= 0; --i) {
              var comment = target.leadingComments[i];

              if (comment.range[1] <= metadata.start.offset) {
                leadingComments.unshift(comment);
                target.leadingComments.splice(i, 1);
              }
            }

            if (target.leadingComments && target.leadingComments.length === 0) {
              delete target.leadingComments;
            }

            return leadingComments;
          }

          for (var i = this.leading.length - 1; i >= 0; --i) {
            var entry = this.leading[i];

            if (entry.start <= metadata.start.offset) {
              leadingComments.unshift(entry.comment);
              this.leading.splice(i, 1);
            }
          }

          return leadingComments;
        };

        CommentHandler.prototype.visitNode = function (node, metadata) {
          if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {
            return;
          }

          this.insertInnerComments(node, metadata);
          var trailingComments = this.findTrailingComments(metadata);
          var leadingComments = this.findLeadingComments(metadata);

          if (leadingComments.length > 0) {
            node.leadingComments = leadingComments;
          }

          if (trailingComments.length > 0) {
            node.trailingComments = trailingComments;
          }

          this.stack.push({
            node: node,
            start: metadata.start.offset
          });
        };

        CommentHandler.prototype.visitComment = function (node, metadata) {
          var type = node.type[0] === 'L' ? 'Line' : 'Block';
          var comment = {
            type: type,
            value: node.value
          };

          if (node.range) {
            comment.range = node.range;
          }

          if (node.loc) {
            comment.loc = node.loc;
          }

          this.comments.push(comment);

          if (this.attach) {
            var entry = {
              comment: {
                type: type,
                value: node.value,
                range: [metadata.start.offset, metadata.end.offset]
              },
              start: metadata.start.offset
            };

            if (node.loc) {
              entry.comment.loc = node.loc;
            }

            node.type = type;
            this.leading.push(entry);
            this.trailing.push(entry);
          }
        };

        CommentHandler.prototype.visit = function (node, metadata) {
          if (node.type === 'LineComment') {
            this.visitComment(node, metadata);
          } else if (node.type === 'BlockComment') {
            this.visitComment(node, metadata);
          } else if (this.attach) {
            this.visitNode(node, metadata);
          }
        };

        return CommentHandler;
      }();

      exports.CommentHandler = CommentHandler;
      /***/
    },
    /* 2 */

    /***/
    function (module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Syntax = {
        AssignmentExpression: 'AssignmentExpression',
        AssignmentPattern: 'AssignmentPattern',
        ArrayExpression: 'ArrayExpression',
        ArrayPattern: 'ArrayPattern',
        ArrowFunctionExpression: 'ArrowFunctionExpression',
        AwaitExpression: 'AwaitExpression',
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ClassBody: 'ClassBody',
        ClassDeclaration: 'ClassDeclaration',
        ClassExpression: 'ClassExpression',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DoWhileStatement: 'DoWhileStatement',
        DebuggerStatement: 'DebuggerStatement',
        EmptyStatement: 'EmptyStatement',
        ExportAllDeclaration: 'ExportAllDeclaration',
        ExportDefaultDeclaration: 'ExportDefaultDeclaration',
        ExportNamedDeclaration: 'ExportNamedDeclaration',
        ExportSpecifier: 'ExportSpecifier',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForOfStatement: 'ForOfStatement',
        ForInStatement: 'ForInStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        ImportDeclaration: 'ImportDeclaration',
        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
        ImportSpecifier: 'ImportSpecifier',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        MetaProperty: 'MetaProperty',
        MethodDefinition: 'MethodDefinition',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        ObjectPattern: 'ObjectPattern',
        Program: 'Program',
        Property: 'Property',
        RestElement: 'RestElement',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SpreadElement: 'SpreadElement',
        Super: 'Super',
        SwitchCase: 'SwitchCase',
        SwitchStatement: 'SwitchStatement',
        TaggedTemplateExpression: 'TaggedTemplateExpression',
        TemplateElement: 'TemplateElement',
        TemplateLiteral: 'TemplateLiteral',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        YieldExpression: 'YieldExpression'
      };
      /***/
    },
    /* 3 */

    /***/
    function (module, exports, __nested_webpack_require_16100__) {
      "use strict";
      /* istanbul ignore next */

      var __extends = this && this.__extends || function () {
        var extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function (d, b) {
          d.__proto__ = b;
        } || function (d, b) {
          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        };

        return function (d, b) {
          extendStatics(d, b);

          function __() {
            this.constructor = d;
          }

          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var character_1 = __nested_webpack_require_16100__(4);

      var JSXNode = __nested_webpack_require_16100__(5);

      var jsx_syntax_1 = __nested_webpack_require_16100__(6);

      var Node = __nested_webpack_require_16100__(7);

      var parser_1 = __nested_webpack_require_16100__(8);

      var token_1 = __nested_webpack_require_16100__(13);

      var xhtml_entities_1 = __nested_webpack_require_16100__(14);

      token_1.TokenName[100
      /* Identifier */
      ] = 'JSXIdentifier';
      token_1.TokenName[101
      /* Text */
      ] = 'JSXText'; // Fully qualified element name, e.g. <svg:path> returns "svg:path"

      function getQualifiedElementName(elementName) {
        var qualifiedName;

        switch (elementName.type) {
          case jsx_syntax_1.JSXSyntax.JSXIdentifier:
            var id = elementName;
            qualifiedName = id.name;
            break;

          case jsx_syntax_1.JSXSyntax.JSXNamespacedName:
            var ns = elementName;
            qualifiedName = getQualifiedElementName(ns.namespace) + ':' + getQualifiedElementName(ns.name);
            break;

          case jsx_syntax_1.JSXSyntax.JSXMemberExpression:
            var expr = elementName;
            qualifiedName = getQualifiedElementName(expr.object) + '.' + getQualifiedElementName(expr.property);
            break;

          /* istanbul ignore next */

          default:
            break;
        }

        return qualifiedName;
      }

      var JSXParser = function (_super) {
        __extends(JSXParser, _super);

        function JSXParser(code, options, delegate) {
          return _super.call(this, code, options, delegate) || this;
        }

        JSXParser.prototype.parsePrimaryExpression = function () {
          return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);
        };

        JSXParser.prototype.startJSX = function () {
          // Unwind the scanner before the lookahead token.
          this.scanner.index = this.startMarker.index;
          this.scanner.lineNumber = this.startMarker.line;
          this.scanner.lineStart = this.startMarker.index - this.startMarker.column;
        };

        JSXParser.prototype.finishJSX = function () {
          // Prime the next lookahead.
          this.nextToken();
        };

        JSXParser.prototype.reenterJSX = function () {
          this.startJSX();
          this.expectJSX('}'); // Pop the closing '}' added from the lookahead.

          if (this.config.tokens) {
            this.tokens.pop();
          }
        };

        JSXParser.prototype.createJSXNode = function () {
          this.collectComments();
          return {
            index: this.scanner.index,
            line: this.scanner.lineNumber,
            column: this.scanner.index - this.scanner.lineStart
          };
        };

        JSXParser.prototype.createJSXChildNode = function () {
          return {
            index: this.scanner.index,
            line: this.scanner.lineNumber,
            column: this.scanner.index - this.scanner.lineStart
          };
        };

        JSXParser.prototype.scanXHTMLEntity = function (quote) {
          var result = '&';
          var valid = true;
          var terminated = false;
          var numeric = false;
          var hex = false;

          while (!this.scanner.eof() && valid && !terminated) {
            var ch = this.scanner.source[this.scanner.index];

            if (ch === quote) {
              break;
            }

            terminated = ch === ';';
            result += ch;
            ++this.scanner.index;

            if (!terminated) {
              switch (result.length) {
                case 2:
                  // e.g. '&#123;'
                  numeric = ch === '#';
                  break;

                case 3:
                  if (numeric) {
                    // e.g. '&#x41;'
                    hex = ch === 'x';
                    valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));
                    numeric = numeric && !hex;
                  }

                  break;

                default:
                  valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));
                  valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));
                  break;
              }
            }
          }

          if (valid && terminated && result.length > 2) {
            // e.g. '&#x41;' becomes just '#x41'
            var str = result.substr(1, result.length - 2);

            if (numeric && str.length > 1) {
              result = String.fromCharCode(parseInt(str.substr(1), 10));
            } else if (hex && str.length > 2) {
              result = String.fromCharCode(parseInt('0' + str.substr(1), 16));
            } else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {
              result = xhtml_entities_1.XHTMLEntities[str];
            }
          }

          return result;
        }; // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.


        JSXParser.prototype.lexJSX = function () {
          var cp = this.scanner.source.charCodeAt(this.scanner.index); // < > / : = { }

          if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {
            var value = this.scanner.source[this.scanner.index++];
            return {
              type: 7
              /* Punctuator */
              ,
              value: value,
              lineNumber: this.scanner.lineNumber,
              lineStart: this.scanner.lineStart,
              start: this.scanner.index - 1,
              end: this.scanner.index
            };
          } // " '


          if (cp === 34 || cp === 39) {
            var start = this.scanner.index;
            var quote = this.scanner.source[this.scanner.index++];
            var str = '';

            while (!this.scanner.eof()) {
              var ch = this.scanner.source[this.scanner.index++];

              if (ch === quote) {
                break;
              } else if (ch === '&') {
                str += this.scanXHTMLEntity(quote);
              } else {
                str += ch;
              }
            }

            return {
              type: 8
              /* StringLiteral */
              ,
              value: str,
              lineNumber: this.scanner.lineNumber,
              lineStart: this.scanner.lineStart,
              start: start,
              end: this.scanner.index
            };
          } // ... or .


          if (cp === 46) {
            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);
            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);
            var value = n1 === 46 && n2 === 46 ? '...' : '.';
            var start = this.scanner.index;
            this.scanner.index += value.length;
            return {
              type: 7
              /* Punctuator */
              ,
              value: value,
              lineNumber: this.scanner.lineNumber,
              lineStart: this.scanner.lineStart,
              start: start,
              end: this.scanner.index
            };
          } // `


          if (cp === 96) {
            // Only placeholder, since it will be rescanned as a real assignment expression.
            return {
              type: 10
              /* Template */
              ,
              value: '',
              lineNumber: this.scanner.lineNumber,
              lineStart: this.scanner.lineStart,
              start: this.scanner.index,
              end: this.scanner.index
            };
          } // Identifer can not contain backslash (char code 92).


          if (character_1.Character.isIdentifierStart(cp) && cp !== 92) {
            var start = this.scanner.index;
            ++this.scanner.index;

            while (!this.scanner.eof()) {
              var ch = this.scanner.source.charCodeAt(this.scanner.index);

              if (character_1.Character.isIdentifierPart(ch) && ch !== 92) {
                ++this.scanner.index;
              } else if (ch === 45) {
                // Hyphen (char code 45) can be part of an identifier.
                ++this.scanner.index;
              } else {
                break;
              }
            }

            var id = this.scanner.source.slice(start, this.scanner.index);
            return {
              type: 100
              /* Identifier */
              ,
              value: id,
              lineNumber: this.scanner.lineNumber,
              lineStart: this.scanner.lineStart,
              start: start,
              end: this.scanner.index
            };
          }

          return this.scanner.lex();
        };

        JSXParser.prototype.nextJSXToken = function () {
          this.collectComments();
          this.startMarker.index = this.scanner.index;
          this.startMarker.line = this.scanner.lineNumber;
          this.startMarker.column = this.scanner.index - this.scanner.lineStart;
          var token = this.lexJSX();
          this.lastMarker.index = this.scanner.index;
          this.lastMarker.line = this.scanner.lineNumber;
          this.lastMarker.column = this.scanner.index - this.scanner.lineStart;

          if (this.config.tokens) {
            this.tokens.push(this.convertToken(token));
          }

          return token;
        };

        JSXParser.prototype.nextJSXText = function () {
          this.startMarker.index = this.scanner.index;
          this.startMarker.line = this.scanner.lineNumber;
          this.startMarker.column = this.scanner.index - this.scanner.lineStart;
          var start = this.scanner.index;
          var text = '';

          while (!this.scanner.eof()) {
            var ch = this.scanner.source[this.scanner.index];

            if (ch === '{' || ch === '<') {
              break;
            }

            ++this.scanner.index;
            text += ch;

            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
              ++this.scanner.lineNumber;

              if (ch === '\r' && this.scanner.source[this.scanner.index] === '\n') {
                ++this.scanner.index;
              }

              this.scanner.lineStart = this.scanner.index;
            }
          }

          this.lastMarker.index = this.scanner.index;
          this.lastMarker.line = this.scanner.lineNumber;
          this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
          var token = {
            type: 101
            /* Text */
            ,
            value: text,
            lineNumber: this.scanner.lineNumber,
            lineStart: this.scanner.lineStart,
            start: start,
            end: this.scanner.index
          };

          if (text.length > 0 && this.config.tokens) {
            this.tokens.push(this.convertToken(token));
          }

          return token;
        };

        JSXParser.prototype.peekJSXToken = function () {
          var state = this.scanner.saveState();
          this.scanner.scanComments();
          var next = this.lexJSX();
          this.scanner.restoreState(state);
          return next;
        }; // Expect the next JSX token to match the specified punctuator.
        // If not, an exception will be thrown.


        JSXParser.prototype.expectJSX = function (value) {
          var token = this.nextJSXToken();

          if (token.type !== 7
          /* Punctuator */
          || token.value !== value) {
            this.throwUnexpectedToken(token);
          }
        }; // Return true if the next JSX token matches the specified punctuator.


        JSXParser.prototype.matchJSX = function (value) {
          var next = this.peekJSXToken();
          return next.type === 7
          /* Punctuator */
          && next.value === value;
        };

        JSXParser.prototype.parseJSXIdentifier = function () {
          var node = this.createJSXNode();
          var token = this.nextJSXToken();

          if (token.type !== 100
          /* Identifier */
          ) {
            this.throwUnexpectedToken(token);
          }

          return this.finalize(node, new JSXNode.JSXIdentifier(token.value));
        };

        JSXParser.prototype.parseJSXElementName = function () {
          var node = this.createJSXNode();
          var elementName = this.parseJSXIdentifier();

          if (this.matchJSX(':')) {
            var namespace = elementName;
            this.expectJSX(':');
            var name_1 = this.parseJSXIdentifier();
            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));
          } else if (this.matchJSX('.')) {
            while (this.matchJSX('.')) {
              var object = elementName;
              this.expectJSX('.');
              var property = this.parseJSXIdentifier();
              elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));
            }
          }

          return elementName;
        };

        JSXParser.prototype.parseJSXAttributeName = function () {
          var node = this.createJSXNode();
          var attributeName;
          var identifier = this.parseJSXIdentifier();

          if (this.matchJSX(':')) {
            var namespace = identifier;
            this.expectJSX(':');
            var name_2 = this.parseJSXIdentifier();
            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));
          } else {
            attributeName = identifier;
          }

          return attributeName;
        };

        JSXParser.prototype.parseJSXStringLiteralAttribute = function () {
          var node = this.createJSXNode();
          var token = this.nextJSXToken();

          if (token.type !== 8
          /* StringLiteral */
          ) {
            this.throwUnexpectedToken(token);
          }

          var raw = this.getTokenRaw(token);
          return this.finalize(node, new Node.Literal(token.value, raw));
        };

        JSXParser.prototype.parseJSXExpressionAttribute = function () {
          var node = this.createJSXNode();
          this.expectJSX('{');
          this.finishJSX();

          if (this.match('}')) {
            this.tolerateError('JSX attributes must only be assigned a non-empty expression');
          }

          var expression = this.parseAssignmentExpression();
          this.reenterJSX();
          return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
        };

        JSXParser.prototype.parseJSXAttributeValue = function () {
          return this.matchJSX('{') ? this.parseJSXExpressionAttribute() : this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();
        };

        JSXParser.prototype.parseJSXNameValueAttribute = function () {
          var node = this.createJSXNode();
          var name = this.parseJSXAttributeName();
          var value = null;

          if (this.matchJSX('=')) {
            this.expectJSX('=');
            value = this.parseJSXAttributeValue();
          }

          return this.finalize(node, new JSXNode.JSXAttribute(name, value));
        };

        JSXParser.prototype.parseJSXSpreadAttribute = function () {
          var node = this.createJSXNode();
          this.expectJSX('{');
          this.expectJSX('...');
          this.finishJSX();
          var argument = this.parseAssignmentExpression();
          this.reenterJSX();
          return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));
        };

        JSXParser.prototype.parseJSXAttributes = function () {
          var attributes = [];

          while (!this.matchJSX('/') && !this.matchJSX('>')) {
            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() : this.parseJSXNameValueAttribute();
            attributes.push(attribute);
          }

          return attributes;
        };

        JSXParser.prototype.parseJSXOpeningElement = function () {
          var node = this.createJSXNode();
          this.expectJSX('<');
          var name = this.parseJSXElementName();
          var attributes = this.parseJSXAttributes();
          var selfClosing = this.matchJSX('/');

          if (selfClosing) {
            this.expectJSX('/');
          }

          this.expectJSX('>');
          return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
        };

        JSXParser.prototype.parseJSXBoundaryElement = function () {
          var node = this.createJSXNode();
          this.expectJSX('<');

          if (this.matchJSX('/')) {
            this.expectJSX('/');
            var name_3 = this.parseJSXElementName();
            this.expectJSX('>');
            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));
          }

          var name = this.parseJSXElementName();
          var attributes = this.parseJSXAttributes();
          var selfClosing = this.matchJSX('/');

          if (selfClosing) {
            this.expectJSX('/');
          }

          this.expectJSX('>');
          return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
        };

        JSXParser.prototype.parseJSXEmptyExpression = function () {
          var node = this.createJSXChildNode();
          this.collectComments();
          this.lastMarker.index = this.scanner.index;
          this.lastMarker.line = this.scanner.lineNumber;
          this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
          return this.finalize(node, new JSXNode.JSXEmptyExpression());
        };

        JSXParser.prototype.parseJSXExpressionContainer = function () {
          var node = this.createJSXNode();
          this.expectJSX('{');
          var expression;

          if (this.matchJSX('}')) {
            expression = this.parseJSXEmptyExpression();
            this.expectJSX('}');
          } else {
            this.finishJSX();
            expression = this.parseAssignmentExpression();
            this.reenterJSX();
          }

          return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
        };

        JSXParser.prototype.parseJSXChildren = function () {
          var children = [];

          while (!this.scanner.eof()) {
            var node = this.createJSXChildNode();
            var token = this.nextJSXText();

            if (token.start < token.end) {
              var raw = this.getTokenRaw(token);
              var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));
              children.push(child);
            }

            if (this.scanner.source[this.scanner.index] === '{') {
              var container = this.parseJSXExpressionContainer();
              children.push(container);
            } else {
              break;
            }
          }

          return children;
        };

        JSXParser.prototype.parseComplexJSXElement = function (el) {
          var stack = [];

          while (!this.scanner.eof()) {
            el.children = el.children.concat(this.parseJSXChildren());
            var node = this.createJSXChildNode();
            var element = this.parseJSXBoundaryElement();

            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {
              var opening = element;

              if (opening.selfClosing) {
                var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));
                el.children.push(child);
              } else {
                stack.push(el);
                el = {
                  node: node,
                  opening: opening,
                  closing: null,
                  children: []
                };
              }
            }

            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {
              el.closing = element;
              var open_1 = getQualifiedElementName(el.opening.name);
              var close_1 = getQualifiedElementName(el.closing.name);

              if (open_1 !== close_1) {
                this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);
              }

              if (stack.length > 0) {
                var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));
                el = stack[stack.length - 1];
                el.children.push(child);
                stack.pop();
              } else {
                break;
              }
            }
          }

          return el;
        };

        JSXParser.prototype.parseJSXElement = function () {
          var node = this.createJSXNode();
          var opening = this.parseJSXOpeningElement();
          var children = [];
          var closing = null;

          if (!opening.selfClosing) {
            var el = this.parseComplexJSXElement({
              node: node,
              opening: opening,
              closing: closing,
              children: children
            });
            children = el.children;
            closing = el.closing;
          }

          return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));
        };

        JSXParser.prototype.parseJSXRoot = function () {
          // Pop the opening '<' added from the lookahead.
          if (this.config.tokens) {
            this.tokens.pop();
          }

          this.startJSX();
          var element = this.parseJSXElement();
          this.finishJSX();
          return element;
        };

        JSXParser.prototype.isStartOfExpression = function () {
          return _super.prototype.isStartOfExpression.call(this) || this.match('<');
        };

        return JSXParser;
      }(parser_1.Parser);

      exports.JSXParser = JSXParser;
      /***/
    },
    /* 4 */

    /***/
    function (module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      }); // See also tools/generate-unicode-regex.js.

      var Regex = {
        // Unicode v8.0.0 NonAsciiIdentifierStart:
        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
        // Unicode v8.0.0 NonAsciiIdentifierPart:
        NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
      };
      exports.Character = {
        /* tslint:disable:no-bitwise */
        fromCodePoint: function (cp) {
          return cp < 0x10000 ? String.fromCharCode(cp) : String.fromCharCode(0xD800 + (cp - 0x10000 >> 10)) + String.fromCharCode(0xDC00 + (cp - 0x10000 & 1023));
        },
        // https://tc39.github.io/ecma262/#sec-white-space
        isWhiteSpace: function (cp) {
          return cp === 0x20 || cp === 0x09 || cp === 0x0B || cp === 0x0C || cp === 0xA0 || cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0;
        },
        // https://tc39.github.io/ecma262/#sec-line-terminators
        isLineTerminator: function (cp) {
          return cp === 0x0A || cp === 0x0D || cp === 0x2028 || cp === 0x2029;
        },
        // https://tc39.github.io/ecma262/#sec-names-and-keywords
        isIdentifierStart: function (cp) {
          return cp === 0x24 || cp === 0x5F || cp >= 0x41 && cp <= 0x5A || cp >= 0x61 && cp <= 0x7A || cp === 0x5C || cp >= 0x80 && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp));
        },
        isIdentifierPart: function (cp) {
          return cp === 0x24 || cp === 0x5F || cp >= 0x41 && cp <= 0x5A || cp >= 0x61 && cp <= 0x7A || cp >= 0x30 && cp <= 0x39 || cp === 0x5C || cp >= 0x80 && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp));
        },
        // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
        isDecimalDigit: function (cp) {
          return cp >= 0x30 && cp <= 0x39; // 0..9
        },
        isHexDigit: function (cp) {
          return cp >= 0x30 && cp <= 0x39 || cp >= 0x41 && cp <= 0x46 || cp >= 0x61 && cp <= 0x66; // a..f
        },
        isOctalDigit: function (cp) {
          return cp >= 0x30 && cp <= 0x37; // 0..7
        }
      };
      /***/
    },
    /* 5 */

    /***/
    function (module, exports, __nested_webpack_require_55631__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var jsx_syntax_1 = __nested_webpack_require_55631__(6);
      /* tslint:disable:max-classes-per-file */


      var JSXClosingElement = function () {
        function JSXClosingElement(name) {
          this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;
          this.name = name;
        }

        return JSXClosingElement;
      }();

      exports.JSXClosingElement = JSXClosingElement;

      var JSXElement = function () {
        function JSXElement(openingElement, children, closingElement) {
          this.type = jsx_syntax_1.JSXSyntax.JSXElement;
          this.openingElement = openingElement;
          this.children = children;
          this.closingElement = closingElement;
        }

        return JSXElement;
      }();

      exports.JSXElement = JSXElement;

      var JSXEmptyExpression = function () {
        function JSXEmptyExpression() {
          this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;
        }

        return JSXEmptyExpression;
      }();

      exports.JSXEmptyExpression = JSXEmptyExpression;

      var JSXExpressionContainer = function () {
        function JSXExpressionContainer(expression) {
          this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;
          this.expression = expression;
        }

        return JSXExpressionContainer;
      }();

      exports.JSXExpressionContainer = JSXExpressionContainer;

      var JSXIdentifier = function () {
        function JSXIdentifier(name) {
          this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;
          this.name = name;
        }

        return JSXIdentifier;
      }();

      exports.JSXIdentifier = JSXIdentifier;

      var JSXMemberExpression = function () {
        function JSXMemberExpression(object, property) {
          this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;
          this.object = object;
          this.property = property;
        }

        return JSXMemberExpression;
      }();

      exports.JSXMemberExpression = JSXMemberExpression;

      var JSXAttribute = function () {
        function JSXAttribute(name, value) {
          this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;
          this.name = name;
          this.value = value;
        }

        return JSXAttribute;
      }();

      exports.JSXAttribute = JSXAttribute;

      var JSXNamespacedName = function () {
        function JSXNamespacedName(namespace, name) {
          this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;
          this.namespace = namespace;
          this.name = name;
        }

        return JSXNamespacedName;
      }();

      exports.JSXNamespacedName = JSXNamespacedName;

      var JSXOpeningElement = function () {
        function JSXOpeningElement(name, selfClosing, attributes) {
          this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;
          this.name = name;
          this.selfClosing = selfClosing;
          this.attributes = attributes;
        }

        return JSXOpeningElement;
      }();

      exports.JSXOpeningElement = JSXOpeningElement;

      var JSXSpreadAttribute = function () {
        function JSXSpreadAttribute(argument) {
          this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;
          this.argument = argument;
        }

        return JSXSpreadAttribute;
      }();

      exports.JSXSpreadAttribute = JSXSpreadAttribute;

      var JSXText = function () {
        function JSXText(value, raw) {
          this.type = jsx_syntax_1.JSXSyntax.JSXText;
          this.value = value;
          this.raw = raw;
        }

        return JSXText;
      }();

      exports.JSXText = JSXText;
      /***/
    },
    /* 6 */

    /***/
    function (module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.JSXSyntax = {
        JSXAttribute: 'JSXAttribute',
        JSXClosingElement: 'JSXClosingElement',
        JSXElement: 'JSXElement',
        JSXEmptyExpression: 'JSXEmptyExpression',
        JSXExpressionContainer: 'JSXExpressionContainer',
        JSXIdentifier: 'JSXIdentifier',
        JSXMemberExpression: 'JSXMemberExpression',
        JSXNamespacedName: 'JSXNamespacedName',
        JSXOpeningElement: 'JSXOpeningElement',
        JSXSpreadAttribute: 'JSXSpreadAttribute',
        JSXText: 'JSXText'
      };
      /***/
    },
    /* 7 */

    /***/
    function (module, exports, __nested_webpack_require_60144__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var syntax_1 = __nested_webpack_require_60144__(2);
      /* tslint:disable:max-classes-per-file */


      var ArrayExpression = function () {
        function ArrayExpression(elements) {
          this.type = syntax_1.Syntax.ArrayExpression;
          this.elements = elements;
        }

        return ArrayExpression;
      }();

      exports.ArrayExpression = ArrayExpression;

      var ArrayPattern = function () {
        function ArrayPattern(elements) {
          this.type = syntax_1.Syntax.ArrayPattern;
          this.elements = elements;
        }

        return ArrayPattern;
      }();

      exports.ArrayPattern = ArrayPattern;

      var ArrowFunctionExpression = function () {
        function ArrowFunctionExpression(params, body, expression) {
          this.type = syntax_1.Syntax.ArrowFunctionExpression;
          this.id = null;
          this.params = params;
          this.body = body;
          this.generator = false;
          this.expression = expression;
          this.async = false;
        }

        return ArrowFunctionExpression;
      }();

      exports.ArrowFunctionExpression = ArrowFunctionExpression;

      var AssignmentExpression = function () {
        function AssignmentExpression(operator, left, right) {
          this.type = syntax_1.Syntax.AssignmentExpression;
          this.operator = operator;
          this.left = left;
          this.right = right;
        }

        return AssignmentExpression;
      }();

      exports.AssignmentExpression = AssignmentExpression;

      var AssignmentPattern = function () {
        function AssignmentPattern(left, right) {
          this.type = syntax_1.Syntax.AssignmentPattern;
          this.left = left;
          this.right = right;
        }

        return AssignmentPattern;
      }();

      exports.AssignmentPattern = AssignmentPattern;

      var AsyncArrowFunctionExpression = function () {
        function AsyncArrowFunctionExpression(params, body, expression) {
          this.type = syntax_1.Syntax.ArrowFunctionExpression;
          this.id = null;
          this.params = params;
          this.body = body;
          this.generator = false;
          this.expression = expression;
          this.async = true;
        }

        return AsyncArrowFunctionExpression;
      }();

      exports.AsyncArrowFunctionExpression = AsyncArrowFunctionExpression;

      var AsyncFunctionDeclaration = function () {
        function AsyncFunctionDeclaration(id, params, body) {
          this.type = syntax_1.Syntax.FunctionDeclaration;
          this.id = id;
          this.params = params;
          this.body = body;
          this.generator = false;
          this.expression = false;
          this.async = true;
        }

        return AsyncFunctionDeclaration;
      }();

      exports.AsyncFunctionDeclaration = AsyncFunctionDeclaration;

      var AsyncFunctionExpression = function () {
        function AsyncFunctionExpression(id, params, body) {
          this.type = syntax_1.Syntax.FunctionExpression;
          this.id = id;
          this.params = params;
          this.body = body;
          this.generator = false;
          this.expression = false;
          this.async = true;
        }

        return AsyncFunctionExpression;
      }();

      exports.AsyncFunctionExpression = AsyncFunctionExpression;

      var AwaitExpression = function () {
        function AwaitExpression(argument) {
          this.type = syntax_1.Syntax.AwaitExpression;
          this.argument = argument;
        }

        return AwaitExpression;
      }();

      exports.AwaitExpression = AwaitExpression;

      var BinaryExpression = function () {
        function BinaryExpression(operator, left, right) {
          var logical = operator === '||' || operator === '&&';
          this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;
          this.operator = operator;
          this.left = left;
          this.right = right;
        }

        return BinaryExpression;
      }();

      exports.BinaryExpression = BinaryExpression;

      var BlockStatement = function () {
        function BlockStatement(body) {
          this.type = syntax_1.Syntax.BlockStatement;
          this.body = body;
        }

        return BlockStatement;
      }();

      exports.BlockStatement = BlockStatement;

      var BreakStatement = function () {
        function BreakStatement(label) {
          this.type = syntax_1.Syntax.BreakStatement;
          this.label = label;
        }

        return BreakStatement;
      }();

      exports.BreakStatement = BreakStatement;

      var CallExpression = function () {
        function CallExpression(callee, args) {
          this.type = syntax_1.Syntax.CallExpression;
          this.callee = callee;
          this.arguments = args;
        }

        return CallExpression;
      }();

      exports.CallExpression = CallExpression;

      var CatchClause = function () {
        function CatchClause(param, body) {
          this.type = syntax_1.Syntax.CatchClause;
          this.param = param;
          this.body = body;
        }

        return CatchClause;
      }();

      exports.CatchClause = CatchClause;

      var ClassBody = function () {
        function ClassBody(body) {
          this.type = syntax_1.Syntax.ClassBody;
          this.body = body;
        }

        return ClassBody;
      }();

      exports.ClassBody = ClassBody;

      var ClassDeclaration = function () {
        function ClassDeclaration(id, superClass, body) {
          this.type = syntax_1.Syntax.ClassDeclaration;
          this.id = id;
          this.superClass = superClass;
          this.body = body;
        }

        return ClassDeclaration;
      }();

      exports.ClassDeclaration = ClassDeclaration;

      var ClassExpression = function () {
        function ClassExpression(id, superClass, body) {
          this.type = syntax_1.Syntax.ClassExpression;
          this.id = id;
          this.superClass = superClass;
          this.body = body;
        }

        return ClassExpression;
      }();

      exports.ClassExpression = ClassExpression;

      var ComputedMemberExpression = function () {
        function ComputedMemberExpression(object, property) {
          this.type = syntax_1.Syntax.MemberExpression;
          this.computed = true;
          this.object = object;
          this.property = property;
        }

        return ComputedMemberExpression;
      }();

      exports.ComputedMemberExpression = ComputedMemberExpression;

      var ConditionalExpression = function () {
        function ConditionalExpression(test, consequent, alternate) {
          this.type = syntax_1.Syntax.ConditionalExpression;
          this.test = test;
          this.consequent = consequent;
          this.alternate = alternate;
        }

        return ConditionalExpression;
      }();

      exports.ConditionalExpression = ConditionalExpression;

      var ContinueStatement = function () {
        function ContinueStatement(label) {
          this.type = syntax_1.Syntax.ContinueStatement;
          this.label = label;
        }

        return ContinueStatement;
      }();

      exports.ContinueStatement = ContinueStatement;

      var DebuggerStatement = function () {
        function DebuggerStatement() {
          this.type = syntax_1.Syntax.DebuggerStatement;
        }

        return DebuggerStatement;
      }();

      exports.DebuggerStatement = DebuggerStatement;

      var Directive = function () {
        function Directive(expression, directive) {
          this.type = syntax_1.Syntax.ExpressionStatement;
          this.expression = expression;
          this.directive = directive;
        }

        return Directive;
      }();

      exports.Directive = Directive;

      var DoWhileStatement = function () {
        function DoWhileStatement(body, test) {
          this.type = syntax_1.Syntax.DoWhileStatement;
          this.body = body;
          this.test = test;
        }

        return DoWhileStatement;
      }();

      exports.DoWhileStatement = DoWhileStatement;

      var EmptyStatement = function () {
        function EmptyStatement() {
          this.type = syntax_1.Syntax.EmptyStatement;
        }

        return EmptyStatement;
      }();

      exports.EmptyStatement = EmptyStatement;

      var ExportAllDeclaration = function () {
        function ExportAllDeclaration(source) {
          this.type = syntax_1.Syntax.ExportAllDeclaration;
          this.source = source;
        }

        return ExportAllDeclaration;
      }();

      exports.ExportAllDeclaration = ExportAllDeclaration;

      var ExportDefaultDeclaration = function () {
        function ExportDefaultDeclaration(declaration) {
          this.type = syntax_1.Syntax.ExportDefaultDeclaration;
          this.declaration = declaration;
        }

        return ExportDefaultDeclaration;
      }();

      exports.ExportDefaultDeclaration = ExportDefaultDeclaration;

      var ExportNamedDeclaration = function () {
        function ExportNamedDeclaration(declaration, specifiers, source) {
          this.type = syntax_1.Syntax.ExportNamedDeclaration;
          this.declaration = declaration;
          this.specifiers = specifiers;
          this.source = source;
        }

        return ExportNamedDeclaration;
      }();

      exports.ExportNamedDeclaration = ExportNamedDeclaration;

      var ExportSpecifier = function () {
        function ExportSpecifier(local, exported) {
          this.type = syntax_1.Syntax.ExportSpecifier;
          this.exported = exported;
          this.local = local;
        }

        return ExportSpecifier;
      }();

      exports.ExportSpecifier = ExportSpecifier;

      var ExpressionStatement = function () {
        function ExpressionStatement(expression) {
          this.type = syntax_1.Syntax.ExpressionStatement;
          this.expression = expression;
        }

        return ExpressionStatement;
      }();

      exports.ExpressionStatement = ExpressionStatement;

      var ForInStatement = function () {
        function ForInStatement(left, right, body) {
          this.type = syntax_1.Syntax.ForInStatement;
          this.left = left;
          this.right = right;
          this.body = body;
          this.each = false;
        }

        return ForInStatement;
      }();

      exports.ForInStatement = ForInStatement;

      var ForOfStatement = function () {
        function ForOfStatement(left, right, body) {
          this.type = syntax_1.Syntax.ForOfStatement;
          this.left = left;
          this.right = right;
          this.body = body;
        }

        return ForOfStatement;
      }();

      exports.ForOfStatement = ForOfStatement;

      var ForStatement = function () {
        function ForStatement(init, test, update, body) {
          this.type = syntax_1.Syntax.ForStatement;
          this.init = init;
          this.test = test;
          this.update = update;
          this.body = body;
        }

        return ForStatement;
      }();

      exports.ForStatement = ForStatement;

      var FunctionDeclaration = function () {
        function FunctionDeclaration(id, params, body, generator) {
          this.type = syntax_1.Syntax.FunctionDeclaration;
          this.id = id;
          this.params = params;
          this.body = body;
          this.generator = generator;
          this.expression = false;
          this.async = false;
        }

        return FunctionDeclaration;
      }();

      exports.FunctionDeclaration = FunctionDeclaration;

      var FunctionExpression = function () {
        function FunctionExpression(id, params, body, generator) {
          this.type = syntax_1.Syntax.FunctionExpression;
          this.id = id;
          this.params = params;
          this.body = body;
          this.generator = generator;
          this.expression = false;
          this.async = false;
        }

        return FunctionExpression;
      }();

      exports.FunctionExpression = FunctionExpression;

      var Identifier = function () {
        function Identifier(name) {
          this.type = syntax_1.Syntax.Identifier;
          this.name = name;
        }

        return Identifier;
      }();

      exports.Identifier = Identifier;

      var IfStatement = function () {
        function IfStatement(test, consequent, alternate) {
          this.type = syntax_1.Syntax.IfStatement;
          this.test = test;
          this.consequent = consequent;
          this.alternate = alternate;
        }

        return IfStatement;
      }();

      exports.IfStatement = IfStatement;

      var ImportDeclaration = function () {
        function ImportDeclaration(specifiers, source) {
          this.type = syntax_1.Syntax.ImportDeclaration;
          this.specifiers = specifiers;
          this.source = source;
        }

        return ImportDeclaration;
      }();

      exports.ImportDeclaration = ImportDeclaration;

      var ImportDefaultSpecifier = function () {
        function ImportDefaultSpecifier(local) {
          this.type = syntax_1.Syntax.ImportDefaultSpecifier;
          this.local = local;
        }

        return ImportDefaultSpecifier;
      }();

      exports.ImportDefaultSpecifier = ImportDefaultSpecifier;

      var ImportNamespaceSpecifier = function () {
        function ImportNamespaceSpecifier(local) {
          this.type = syntax_1.Syntax.ImportNamespaceSpecifier;
          this.local = local;
        }

        return ImportNamespaceSpecifier;
      }();

      exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;

      var ImportSpecifier = function () {
        function ImportSpecifier(local, imported) {
          this.type = syntax_1.Syntax.ImportSpecifier;
          this.local = local;
          this.imported = imported;
        }

        return ImportSpecifier;
      }();

      exports.ImportSpecifier = ImportSpecifier;

      var LabeledStatement = function () {
        function LabeledStatement(label, body) {
          this.type = syntax_1.Syntax.LabeledStatement;
          this.label = label;
          this.body = body;
        }

        return LabeledStatement;
      }();

      exports.LabeledStatement = LabeledStatement;

      var Literal = function () {
        function Literal(value, raw) {
          this.type = syntax_1.Syntax.Literal;
          this.value = value;
          this.raw = raw;
        }

        return Literal;
      }();

      exports.Literal = Literal;

      var MetaProperty = function () {
        function MetaProperty(meta, property) {
          this.type = syntax_1.Syntax.MetaProperty;
          this.meta = meta;
          this.property = property;
        }

        return MetaProperty;
      }();

      exports.MetaProperty = MetaProperty;

      var MethodDefinition = function () {
        function MethodDefinition(key, computed, value, kind, isStatic) {
          this.type = syntax_1.Syntax.MethodDefinition;
          this.key = key;
          this.computed = computed;
          this.value = value;
          this.kind = kind;
          this.static = isStatic;
        }

        return MethodDefinition;
      }();

      exports.MethodDefinition = MethodDefinition;

      var Module = function () {
        function Module(body) {
          this.type = syntax_1.Syntax.Program;
          this.body = body;
          this.sourceType = 'module';
        }

        return Module;
      }();

      exports.Module = Module;

      var NewExpression = function () {
        function NewExpression(callee, args) {
          this.type = syntax_1.Syntax.NewExpression;
          this.callee = callee;
          this.arguments = args;
        }

        return NewExpression;
      }();

      exports.NewExpression = NewExpression;

      var ObjectExpression = function () {
        function ObjectExpression(properties) {
          this.type = syntax_1.Syntax.ObjectExpression;
          this.properties = properties;
        }

        return ObjectExpression;
      }();

      exports.ObjectExpression = ObjectExpression;

      var ObjectPattern = function () {
        function ObjectPattern(properties) {
          this.type = syntax_1.Syntax.ObjectPattern;
          this.properties = properties;
        }

        return ObjectPattern;
      }();

      exports.ObjectPattern = ObjectPattern;

      var Property = function () {
        function Property(kind, key, computed, value, method, shorthand) {
          this.type = syntax_1.Syntax.Property;
          this.key = key;
          this.computed = computed;
          this.value = value;
          this.kind = kind;
          this.method = method;
          this.shorthand = shorthand;
        }

        return Property;
      }();

      exports.Property = Property;

      var RegexLiteral = function () {
        function RegexLiteral(value, raw, pattern, flags) {
          this.type = syntax_1.Syntax.Literal;
          this.value = value;
          this.raw = raw;
          this.regex = {
            pattern: pattern,
            flags: flags
          };
        }

        return RegexLiteral;
      }();

      exports.RegexLiteral = RegexLiteral;

      var RestElement = function () {
        function RestElement(argument) {
          this.type = syntax_1.Syntax.RestElement;
          this.argument = argument;
        }

        return RestElement;
      }();

      exports.RestElement = RestElement;

      var ReturnStatement = function () {
        function ReturnStatement(argument) {
          this.type = syntax_1.Syntax.ReturnStatement;
          this.argument = argument;
        }

        return ReturnStatement;
      }();

      exports.ReturnStatement = ReturnStatement;

      var Script = function () {
        function Script(body) {
          this.type = syntax_1.Syntax.Program;
          this.body = body;
          this.sourceType = 'script';
        }

        return Script;
      }();

      exports.Script = Script;

      var SequenceExpression = function () {
        function SequenceExpression(expressions) {
          this.type = syntax_1.Syntax.SequenceExpression;
          this.expressions = expressions;
        }

        return SequenceExpression;
      }();

      exports.SequenceExpression = SequenceExpression;

      var SpreadElement = function () {
        function SpreadElement(argument) {
          this.type = syntax_1.Syntax.SpreadElement;
          this.argument = argument;
        }

        return SpreadElement;
      }();

      exports.SpreadElement = SpreadElement;

      var StaticMemberExpression = function () {
        function StaticMemberExpression(object, property) {
          this.type = syntax_1.Syntax.MemberExpression;
          this.computed = false;
          this.object = object;
          this.property = property;
        }

        return StaticMemberExpression;
      }();

      exports.StaticMemberExpression = StaticMemberExpression;

      var Super = function () {
        function Super() {
          this.type = syntax_1.Syntax.Super;
        }

        return Super;
      }();

      exports.Super = Super;

      var SwitchCase = function () {
        function SwitchCase(test, consequent) {
          this.type = syntax_1.Syntax.SwitchCase;
          this.test = test;
          this.consequent = consequent;
        }

        return SwitchCase;
      }();

      exports.SwitchCase = SwitchCase;

      var SwitchStatement = function () {
        function SwitchStatement(discriminant, cases) {
          this.type = syntax_1.Syntax.SwitchStatement;
          this.discriminant = discriminant;
          this.cases = cases;
        }

        return SwitchStatement;
      }();

      exports.SwitchStatement = SwitchStatement;

      var TaggedTemplateExpression = function () {
        function TaggedTemplateExpression(tag, quasi) {
          this.type = syntax_1.Syntax.TaggedTemplateExpression;
          this.tag = tag;
          this.quasi = quasi;
        }

        return TaggedTemplateExpression;
      }();

      exports.TaggedTemplateExpression = TaggedTemplateExpression;

      var TemplateElement = function () {
        function TemplateElement(value, tail) {
          this.type = syntax_1.Syntax.TemplateElement;
          this.value = value;
          this.tail = tail;
        }

        return TemplateElement;
      }();

      exports.TemplateElement = TemplateElement;

      var TemplateLiteral = function () {
        function TemplateLiteral(quasis, expressions) {
          this.type = syntax_1.Syntax.TemplateLiteral;
          this.quasis = quasis;
          this.expressions = expressions;
        }

        return TemplateLiteral;
      }();

      exports.TemplateLiteral = TemplateLiteral;

      var ThisExpression = function () {
        function ThisExpression() {
          this.type = syntax_1.Syntax.ThisExpression;
        }

        return ThisExpression;
      }();

      exports.ThisExpression = ThisExpression;

      var ThrowStatement = function () {
        function ThrowStatement(argument) {
          this.type = syntax_1.Syntax.ThrowStatement;
          this.argument = argument;
        }

        return ThrowStatement;
      }();

      exports.ThrowStatement = ThrowStatement;

      var TryStatement = function () {
        function TryStatement(block, handler, finalizer) {
          this.type = syntax_1.Syntax.TryStatement;
          this.block = block;
          this.handler = handler;
          this.finalizer = finalizer;
        }

        return TryStatement;
      }();

      exports.TryStatement = TryStatement;

      var UnaryExpression = function () {
        function UnaryExpression(operator, argument) {
          this.type = syntax_1.Syntax.UnaryExpression;
          this.operator = operator;
          this.argument = argument;
          this.prefix = true;
        }

        return UnaryExpression;
      }();

      exports.UnaryExpression = UnaryExpression;

      var UpdateExpression = function () {
        function UpdateExpression(operator, argument, prefix) {
          this.type = syntax_1.Syntax.UpdateExpression;
          this.operator = operator;
          this.argument = argument;
          this.prefix = prefix;
        }

        return UpdateExpression;
      }();

      exports.UpdateExpression = UpdateExpression;

      var VariableDeclaration = function () {
        function VariableDeclaration(declarations, kind) {
          this.type = syntax_1.Syntax.VariableDeclaration;
          this.declarations = declarations;
          this.kind = kind;
        }

        return VariableDeclaration;
      }();

      exports.VariableDeclaration = VariableDeclaration;

      var VariableDeclarator = function () {
        function VariableDeclarator(id, init) {
          this.type = syntax_1.Syntax.VariableDeclarator;
          this.id = id;
          this.init = init;
        }

        return VariableDeclarator;
      }();

      exports.VariableDeclarator = VariableDeclarator;

      var WhileStatement = function () {
        function WhileStatement(test, body) {
          this.type = syntax_1.Syntax.WhileStatement;
          this.test = test;
          this.body = body;
        }

        return WhileStatement;
      }();

      exports.WhileStatement = WhileStatement;

      var WithStatement = function () {
        function WithStatement(object, body) {
          this.type = syntax_1.Syntax.WithStatement;
          this.object = object;
          this.body = body;
        }

        return WithStatement;
      }();

      exports.WithStatement = WithStatement;

      var YieldExpression = function () {
        function YieldExpression(argument, delegate) {
          this.type = syntax_1.Syntax.YieldExpression;
          this.argument = argument;
          this.delegate = delegate;
        }

        return YieldExpression;
      }();

      exports.YieldExpression = YieldExpression;
      /***/
    },
    /* 8 */

    /***/
    function (module, exports, __nested_webpack_require_84347__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var assert_1 = __nested_webpack_require_84347__(9);

      var error_handler_1 = __nested_webpack_require_84347__(10);

      var messages_1 = __nested_webpack_require_84347__(11);

      var Node = __nested_webpack_require_84347__(7);

      var scanner_1 = __nested_webpack_require_84347__(12);

      var syntax_1 = __nested_webpack_require_84347__(2);

      var token_1 = __nested_webpack_require_84347__(13);

      var ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';

      var Parser = function () {
        function Parser(code, options, delegate) {
          if (options === void 0) {
            options = {};
          }

          this.config = {
            range: typeof options.range === 'boolean' && options.range,
            loc: typeof options.loc === 'boolean' && options.loc,
            source: null,
            tokens: typeof options.tokens === 'boolean' && options.tokens,
            comment: typeof options.comment === 'boolean' && options.comment,
            tolerant: typeof options.tolerant === 'boolean' && options.tolerant
          };

          if (this.config.loc && options.source && options.source !== null) {
            this.config.source = String(options.source);
          }

          this.delegate = delegate;
          this.errorHandler = new error_handler_1.ErrorHandler();
          this.errorHandler.tolerant = this.config.tolerant;
          this.scanner = new scanner_1.Scanner(code, this.errorHandler);
          this.scanner.trackComment = this.config.comment;
          this.operatorPrecedence = {
            ')': 0,
            ';': 0,
            ',': 0,
            '=': 0,
            ']': 0,
            '||': 1,
            '&&': 2,
            '|': 3,
            '^': 4,
            '&': 5,
            '==': 6,
            '!=': 6,
            '===': 6,
            '!==': 6,
            '<': 7,
            '>': 7,
            '<=': 7,
            '>=': 7,
            '<<': 8,
            '>>': 8,
            '>>>': 8,
            '+': 9,
            '-': 9,
            '*': 11,
            '/': 11,
            '%': 11
          };
          this.lookahead = {
            type: 2
            /* EOF */
            ,
            value: '',
            lineNumber: this.scanner.lineNumber,
            lineStart: 0,
            start: 0,
            end: 0
          };
          this.hasLineTerminator = false;
          this.context = {
            isModule: false,
            await: false,
            allowIn: true,
            allowStrictDirective: true,
            allowYield: true,
            firstCoverInitializedNameError: null,
            isAssignmentTarget: false,
            isBindingElement: false,
            inFunctionBody: false,
            inIteration: false,
            inSwitch: false,
            labelSet: {},
            strict: false
          };
          this.tokens = [];
          this.startMarker = {
            index: 0,
            line: this.scanner.lineNumber,
            column: 0
          };
          this.lastMarker = {
            index: 0,
            line: this.scanner.lineNumber,
            column: 0
          };
          this.nextToken();
          this.lastMarker = {
            index: this.scanner.index,
            line: this.scanner.lineNumber,
            column: this.scanner.index - this.scanner.lineStart
          };
        }

        Parser.prototype.throwError = function (messageFormat) {
          var values = [];

          for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
          }

          var args = Array.prototype.slice.call(arguments, 1);
          var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
            assert_1.assert(idx < args.length, 'Message reference must be in range');
            return args[idx];
          });
          var index = this.lastMarker.index;
          var line = this.lastMarker.line;
          var column = this.lastMarker.column + 1;
          throw this.errorHandler.createError(index, line, column, msg);
        };

        Parser.prototype.tolerateError = function (messageFormat) {
          var values = [];

          for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
          }

          var args = Array.prototype.slice.call(arguments, 1);
          var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
            assert_1.assert(idx < args.length, 'Message reference must be in range');
            return args[idx];
          });
          var index = this.lastMarker.index;
          var line = this.scanner.lineNumber;
          var column = this.lastMarker.column + 1;
          this.errorHandler.tolerateError(index, line, column, msg);
        }; // Throw an exception because of the token.


        Parser.prototype.unexpectedTokenError = function (token, message) {
          var msg = message || messages_1.Messages.UnexpectedToken;
          var value;

          if (token) {
            if (!message) {
              msg = token.type === 2
              /* EOF */
              ? messages_1.Messages.UnexpectedEOS : token.type === 3
              /* Identifier */
              ? messages_1.Messages.UnexpectedIdentifier : token.type === 6
              /* NumericLiteral */
              ? messages_1.Messages.UnexpectedNumber : token.type === 8
              /* StringLiteral */
              ? messages_1.Messages.UnexpectedString : token.type === 10
              /* Template */
              ? messages_1.Messages.UnexpectedTemplate : messages_1.Messages.UnexpectedToken;

              if (token.type === 4
              /* Keyword */
              ) {
                if (this.scanner.isFutureReservedWord(token.value)) {
                  msg = messages_1.Messages.UnexpectedReserved;
                } else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {
                  msg = messages_1.Messages.StrictReservedWord;
                }
              }
            }

            value = token.value;
          } else {
            value = 'ILLEGAL';
          }

          msg = msg.replace('%0', value);

          if (token && typeof token.lineNumber === 'number') {
            var index = token.start;
            var line = token.lineNumber;
            var lastMarkerLineStart = this.lastMarker.index - this.lastMarker.column;
            var column = token.start - lastMarkerLineStart + 1;
            return this.errorHandler.createError(index, line, column, msg);
          } else {
            var index = this.lastMarker.index;
            var line = this.lastMarker.line;
            var column = this.lastMarker.column + 1;
            return this.errorHandler.createError(index, line, column, msg);
          }
        };

        Parser.prototype.throwUnexpectedToken = function (token, message) {
          throw this.unexpectedTokenError(token, message);
        };

        Parser.prototype.tolerateUnexpectedToken = function (token, message) {
          this.errorHandler.tolerate(this.unexpectedTokenError(token, message));
        };

        Parser.prototype.collectComments = function () {
          if (!this.config.comment) {
            this.scanner.scanComments();
          } else {
            var comments = this.scanner.scanComments();

            if (comments.length > 0 && this.delegate) {
              for (var i = 0; i < comments.length; ++i) {
                var e = comments[i];
                var node = void 0;
                node = {
                  type: e.multiLine ? 'BlockComment' : 'LineComment',
                  value: this.scanner.source.slice(e.slice[0], e.slice[1])
                };

                if (this.config.range) {
                  node.range = e.range;
                }

                if (this.config.loc) {
                  node.loc = e.loc;
                }

                var metadata = {
                  start: {
                    line: e.loc.start.line,
                    column: e.loc.start.column,
                    offset: e.range[0]
                  },
                  end: {
                    line: e.loc.end.line,
                    column: e.loc.end.column,
                    offset: e.range[1]
                  }
                };
                this.delegate(node, metadata);
              }
            }
          }
        }; // From internal representation to an external structure


        Parser.prototype.getTokenRaw = function (token) {
          return this.scanner.source.slice(token.start, token.end);
        };

        Parser.prototype.convertToken = function (token) {
          var t = {
            type: token_1.TokenName[token.type],
            value: this.getTokenRaw(token)
          };

          if (this.config.range) {
            t.range = [token.start, token.end];
          }

          if (this.config.loc) {
            t.loc = {
              start: {
                line: this.startMarker.line,
                column: this.startMarker.column
              },
              end: {
                line: this.scanner.lineNumber,
                column: this.scanner.index - this.scanner.lineStart
              }
            };
          }

          if (token.type === 9
          /* RegularExpression */
          ) {
            var pattern = token.pattern;
            var flags = token.flags;
            t.regex = {
              pattern: pattern,
              flags: flags
            };
          }

          return t;
        };

        Parser.prototype.nextToken = function () {
          var token = this.lookahead;
          this.lastMarker.index = this.scanner.index;
          this.lastMarker.line = this.scanner.lineNumber;
          this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
          this.collectComments();

          if (this.scanner.index !== this.startMarker.index) {
            this.startMarker.index = this.scanner.index;
            this.startMarker.line = this.scanner.lineNumber;
            this.startMarker.column = this.scanner.index - this.scanner.lineStart;
          }

          var next = this.scanner.lex();
          this.hasLineTerminator = token.lineNumber !== next.lineNumber;

          if (next && this.context.strict && next.type === 3
          /* Identifier */
          ) {
            if (this.scanner.isStrictModeReservedWord(next.value)) {
              next.type = 4
              /* Keyword */
              ;
            }
          }

          this.lookahead = next;

          if (this.config.tokens && next.type !== 2
          /* EOF */
          ) {
            this.tokens.push(this.convertToken(next));
          }

          return token;
        };

        Parser.prototype.nextRegexToken = function () {
          this.collectComments();
          var token = this.scanner.scanRegExp();

          if (this.config.tokens) {
            // Pop the previous token, '/' or '/='
            // This is added from the lookahead token.
            this.tokens.pop();
            this.tokens.push(this.convertToken(token));
          } // Prime the next lookahead.


          this.lookahead = token;
          this.nextToken();
          return token;
        };

        Parser.prototype.createNode = function () {
          return {
            index: this.startMarker.index,
            line: this.startMarker.line,
            column: this.startMarker.column
          };
        };

        Parser.prototype.startNode = function (token, lastLineStart) {
          if (lastLineStart === void 0) {
            lastLineStart = 0;
          }

          var column = token.start - token.lineStart;
          var line = token.lineNumber;

          if (column < 0) {
            column += lastLineStart;
            line--;
          }

          return {
            index: token.start,
            line: line,
            column: column
          };
        };

        Parser.prototype.finalize = function (marker, node) {
          if (this.config.range) {
            node.range = [marker.index, this.lastMarker.index];
          }

          if (this.config.loc) {
            node.loc = {
              start: {
                line: marker.line,
                column: marker.column
              },
              end: {
                line: this.lastMarker.line,
                column: this.lastMarker.column
              }
            };

            if (this.config.source) {
              node.loc.source = this.config.source;
            }
          }

          if (this.delegate) {
            var metadata = {
              start: {
                line: marker.line,
                column: marker.column,
                offset: marker.index
              },
              end: {
                line: this.lastMarker.line,
                column: this.lastMarker.column,
                offset: this.lastMarker.index
              }
            };
            this.delegate(node, metadata);
          }

          return node;
        }; // Expect the next token to match the specified punctuator.
        // If not, an exception will be thrown.


        Parser.prototype.expect = function (value) {
          var token = this.nextToken();

          if (token.type !== 7
          /* Punctuator */
          || token.value !== value) {
            this.throwUnexpectedToken(token);
          }
        }; // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().


        Parser.prototype.expectCommaSeparator = function () {
          if (this.config.tolerant) {
            var token = this.lookahead;

            if (token.type === 7
            /* Punctuator */
            && token.value === ',') {
              this.nextToken();
            } else if (token.type === 7
            /* Punctuator */
            && token.value === ';') {
              this.nextToken();
              this.tolerateUnexpectedToken(token);
            } else {
              this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);
            }
          } else {
            this.expect(',');
          }
        }; // Expect the next token to match the specified keyword.
        // If not, an exception will be thrown.


        Parser.prototype.expectKeyword = function (keyword) {
          var token = this.nextToken();

          if (token.type !== 4
          /* Keyword */
          || token.value !== keyword) {
            this.throwUnexpectedToken(token);
          }
        }; // Return true if the next token matches the specified punctuator.


        Parser.prototype.match = function (value) {
          return this.lookahead.type === 7
          /* Punctuator */
          && this.lookahead.value === value;
        }; // Return true if the next token matches the specified keyword


        Parser.prototype.matchKeyword = function (keyword) {
          return this.lookahead.type === 4
          /* Keyword */
          && this.lookahead.value === keyword;
        }; // Return true if the next token matches the specified contextual keyword
        // (where an identifier is sometimes a keyword depending on the context)


        Parser.prototype.matchContextualKeyword = function (keyword) {
          return this.lookahead.type === 3
          /* Identifier */
          && this.lookahead.value === keyword;
        }; // Return true if the next token is an assignment operator


        Parser.prototype.matchAssign = function () {
          if (this.lookahead.type !== 7
          /* Punctuator */
          ) {
            return false;
          }

          var op = this.lookahead.value;
          return op === '=' || op === '*=' || op === '**=' || op === '/=' || op === '%=' || op === '+=' || op === '-=' || op === '<<=' || op === '>>=' || op === '>>>=' || op === '&=' || op === '^=' || op === '|=';
        }; // Cover grammar support.
        //
        // When an assignment expression position starts with an left parenthesis, the determination of the type
        // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)
        // or the first comma. This situation also defers the determination of all the expressions nested in the pair.
        //
        // There are three productions that can be parsed in a parentheses pair that needs to be determined
        // after the outermost pair is closed. They are:
        //
        //   1. AssignmentExpression
        //   2. BindingElements
        //   3. AssignmentTargets
        //
        // In order to avoid exponential backtracking, we use two flags to denote if the production can be
        // binding element or assignment target.
        //
        // The three productions have the relationship:
        //
        //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression
        //
        // with a single exception that CoverInitializedName when used directly in an Expression, generates
        // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the
        // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.
        //
        // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not
        // effect the current flags. This means the production the parser parses is only used as an expression. Therefore
        // the CoverInitializedName check is conducted.
        //
        // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates
        // the flags outside of the parser. This means the production the parser parses is used as a part of a potential
        // pattern. The CoverInitializedName check is deferred.


        Parser.prototype.isolateCoverGrammar = function (parseFunction) {
          var previousIsBindingElement = this.context.isBindingElement;
          var previousIsAssignmentTarget = this.context.isAssignmentTarget;
          var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
          this.context.isBindingElement = true;
          this.context.isAssignmentTarget = true;
          this.context.firstCoverInitializedNameError = null;
          var result = parseFunction.call(this);

          if (this.context.firstCoverInitializedNameError !== null) {
            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);
          }

          this.context.isBindingElement = previousIsBindingElement;
          this.context.isAssignmentTarget = previousIsAssignmentTarget;
          this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;
          return result;
        };

        Parser.prototype.inheritCoverGrammar = function (parseFunction) {
          var previousIsBindingElement = this.context.isBindingElement;
          var previousIsAssignmentTarget = this.context.isAssignmentTarget;
          var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
          this.context.isBindingElement = true;
          this.context.isAssignmentTarget = true;
          this.context.firstCoverInitializedNameError = null;
          var result = parseFunction.call(this);
          this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;
          this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;
          this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;
          return result;
        };

        Parser.prototype.consumeSemicolon = function () {
          if (this.match(';')) {
            this.nextToken();
          } else if (!this.hasLineTerminator) {
            if (this.lookahead.type !== 2
            /* EOF */
            && !this.match('}')) {
              this.throwUnexpectedToken(this.lookahead);
            }

            this.lastMarker.index = this.startMarker.index;
            this.lastMarker.line = this.startMarker.line;
            this.lastMarker.column = this.startMarker.column;
          }
        }; // https://tc39.github.io/ecma262/#sec-primary-expression


        Parser.prototype.parsePrimaryExpression = function () {
          var node = this.createNode();
          var expr;
          var token, raw;

          switch (this.lookahead.type) {
            case 3
            /* Identifier */
            :
              if ((this.context.isModule || this.context.await) && this.lookahead.value === 'await') {
                this.tolerateUnexpectedToken(this.lookahead);
              }

              expr = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node, new Node.Identifier(this.nextToken().value));
              break;

            case 6
            /* NumericLiteral */
            :
            case 8
            /* StringLiteral */
            :
              if (this.context.strict && this.lookahead.octal) {
                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);
              }

              this.context.isAssignmentTarget = false;
              this.context.isBindingElement = false;
              token = this.nextToken();
              raw = this.getTokenRaw(token);
              expr = this.finalize(node, new Node.Literal(token.value, raw));
              break;

            case 1
            /* BooleanLiteral */
            :
              this.context.isAssignmentTarget = false;
              this.context.isBindingElement = false;
              token = this.nextToken();
              raw = this.getTokenRaw(token);
              expr = this.finalize(node, new Node.Literal(token.value === 'true', raw));
              break;

            case 5
            /* NullLiteral */
            :
              this.context.isAssignmentTarget = false;
              this.context.isBindingElement = false;
              token = this.nextToken();
              raw = this.getTokenRaw(token);
              expr = this.finalize(node, new Node.Literal(null, raw));
              break;

            case 10
            /* Template */
            :
              expr = this.parseTemplateLiteral();
              break;

            case 7
            /* Punctuator */
            :
              switch (this.lookahead.value) {
                case '(':
                  this.context.isBindingElement = false;
                  expr = this.inheritCoverGrammar(this.parseGroupExpression);
                  break;

                case '[':
                  expr = this.inheritCoverGrammar(this.parseArrayInitializer);
                  break;

                case '{':
                  expr = this.inheritCoverGrammar(this.parseObjectInitializer);
                  break;

                case '/':
                case '/=':
                  this.context.isAssignmentTarget = false;
                  this.context.isBindingElement = false;
                  this.scanner.index = this.startMarker.index;
                  token = this.nextRegexToken();
                  raw = this.getTokenRaw(token);
                  expr = this.finalize(node, new Node.RegexLiteral(token.regex, raw, token.pattern, token.flags));
                  break;

                default:
                  expr = this.throwUnexpectedToken(this.nextToken());
              }

              break;

            case 4
            /* Keyword */
            :
              if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {
                expr = this.parseIdentifierName();
              } else if (!this.context.strict && this.matchKeyword('let')) {
                expr = this.finalize(node, new Node.Identifier(this.nextToken().value));
              } else {
                this.context.isAssignmentTarget = false;
                this.context.isBindingElement = false;

                if (this.matchKeyword('function')) {
                  expr = this.parseFunctionExpression();
                } else if (this.matchKeyword('this')) {
                  this.nextToken();
                  expr = this.finalize(node, new Node.ThisExpression());
                } else if (this.matchKeyword('class')) {
                  expr = this.parseClassExpression();
                } else {
                  expr = this.throwUnexpectedToken(this.nextToken());
                }
              }

              break;

            default:
              expr = this.throwUnexpectedToken(this.nextToken());
          }

          return expr;
        }; // https://tc39.github.io/ecma262/#sec-array-initializer


        Parser.prototype.parseSpreadElement = function () {
          var node = this.createNode();
          this.expect('...');
          var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);
          return this.finalize(node, new Node.SpreadElement(arg));
        };

        Parser.prototype.parseArrayInitializer = function () {
          var node = this.createNode();
          var elements = [];
          this.expect('[');

          while (!this.match(']')) {
            if (this.match(',')) {
              this.nextToken();
              elements.push(null);
            } else if (this.match('...')) {
              var element = this.parseSpreadElement();

              if (!this.match(']')) {
                this.context.isAssignmentTarget = false;
                this.context.isBindingElement = false;
                this.expect(',');
              }

              elements.push(element);
            } else {
              elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));

              if (!this.match(']')) {
                this.expect(',');
              }
            }
          }

          this.expect(']');
          return this.finalize(node, new Node.ArrayExpression(elements));
        }; // https://tc39.github.io/ecma262/#sec-object-initializer


        Parser.prototype.parsePropertyMethod = function (params) {
          this.context.isAssignmentTarget = false;
          this.context.isBindingElement = false;
          var previousStrict = this.context.strict;
          var previousAllowStrictDirective = this.context.allowStrictDirective;
          this.context.allowStrictDirective = params.simple;
          var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);

          if (this.context.strict && params.firstRestricted) {
            this.tolerateUnexpectedToken(params.firstRestricted, params.message);
          }

          if (this.context.strict && params.stricted) {
            this.tolerateUnexpectedToken(params.stricted, params.message);
          }

          this.context.strict = previousStrict;
          this.context.allowStrictDirective = previousAllowStrictDirective;
          return body;
        };

        Parser.prototype.parsePropertyMethodFunction = function () {
          var isGenerator = false;
          var node = this.createNode();
          var previousAllowYield = this.context.allowYield;
          this.context.allowYield = true;
          var params = this.parseFormalParameters();
          var method = this.parsePropertyMethod(params);
          this.context.allowYield = previousAllowYield;
          return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
        };

        Parser.prototype.parsePropertyMethodAsyncFunction = function () {
          var node = this.createNode();
          var previousAllowYield = this.context.allowYield;
          var previousAwait = this.context.await;
          this.context.allowYield = false;
          this.context.await = true;
          var params = this.parseFormalParameters();
          var method = this.parsePropertyMethod(params);
          this.context.allowYield = previousAllowYield;
          this.context.await = previousAwait;
          return this.finalize(node, new Node.AsyncFunctionExpression(null, params.params, method));
        };

        Parser.prototype.parseObjectPropertyKey = function () {
          var node = this.createNode();
          var token = this.nextToken();
          var key;

          switch (token.type) {
            case 8
            /* StringLiteral */
            :
            case 6
            /* NumericLiteral */
            :
              if (this.context.strict && token.octal) {
                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);
              }

              var raw = this.getTokenRaw(token);
              key = this.finalize(node, new Node.Literal(token.value, raw));
              break;

            case 3
            /* Identifier */
            :
            case 1
            /* BooleanLiteral */
            :
            case 5
            /* NullLiteral */
            :
            case 4
            /* Keyword */
            :
              key = this.finalize(node, new Node.Identifier(token.value));
              break;

            case 7
            /* Punctuator */
            :
              if (token.value === '[') {
                key = this.isolateCoverGrammar(this.parseAssignmentExpression);
                this.expect(']');
              } else {
                key = this.throwUnexpectedToken(token);
              }

              break;

            default:
              key = this.throwUnexpectedToken(token);
          }

          return key;
        };

        Parser.prototype.isPropertyKey = function (key, value) {
          return key.type === syntax_1.Syntax.Identifier && key.name === value || key.type === syntax_1.Syntax.Literal && key.value === value;
        };

        Parser.prototype.parseObjectProperty = function (hasProto) {
          var node = this.createNode();
          var token = this.lookahead;
          var kind;
          var key = null;
          var value = null;
          var computed = false;
          var method = false;
          var shorthand = false;
          var isAsync = false;

          if (token.type === 3
          /* Identifier */
          ) {
            var id = token.value;
            this.nextToken();
            computed = this.match('[');
            isAsync = !this.hasLineTerminator && id === 'async' && !this.match(':') && !this.match('(') && !this.match('*') && !this.match(',');
            key = isAsync ? this.parseObjectPropertyKey() : this.finalize(node, new Node.Identifier(id));
          } else if (this.match('*')) {
            this.nextToken();
          } else {
            computed = this.match('[');
            key = this.parseObjectPropertyKey();
          }

          var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);

          if (token.type === 3
          /* Identifier */
          && !isAsync && token.value === 'get' && lookaheadPropertyKey) {
            kind = 'get';
            computed = this.match('[');
            key = this.parseObjectPropertyKey();
            this.context.allowYield = false;
            value = this.parseGetterMethod();
          } else if (token.type === 3
          /* Identifier */
          && !isAsync && token.value === 'set' && lookaheadPropertyKey) {
            kind = 'set';
            computed = this.match('[');
            key = this.parseObjectPropertyKey();
            value = this.parseSetterMethod();
          } else if (token.type === 7
          /* Punctuator */
          && token.value === '*' && lookaheadPropertyKey) {
            kind = 'init';
            computed = this.match('[');
            key = this.parseObjectPropertyKey();
            value = this.parseGeneratorMethod();
            method = true;
          } else {
            if (!key) {
              this.throwUnexpectedToken(this.lookahead);
            }

            kind = 'init';

            if (this.match(':') && !isAsync) {
              if (!computed && this.isPropertyKey(key, '__proto__')) {
                if (hasProto.value) {
                  this.tolerateError(messages_1.Messages.DuplicateProtoProperty);
                }

                hasProto.value = true;
              }

              this.nextToken();
              value = this.inheritCoverGrammar(this.parseAssignmentExpression);
            } else if (this.match('(')) {
              value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
              method = true;
            } else if (token.type === 3
            /* Identifier */
            ) {
              var id = this.finalize(node, new Node.Identifier(token.value));

              if (this.match('=')) {
                this.context.firstCoverInitializedNameError = this.lookahead;
                this.nextToken();
                shorthand = true;
                var init = this.isolateCoverGrammar(this.parseAssignmentExpression);
                value = this.finalize(node, new Node.AssignmentPattern(id, init));
              } else {
                shorthand = true;
                value = id;
              }
            } else {
              this.throwUnexpectedToken(this.nextToken());
            }
          }

          return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));
        };

        Parser.prototype.parseObjectInitializer = function () {
          var node = this.createNode();
          this.expect('{');
          var properties = [];
          var hasProto = {
            value: false
          };

          while (!this.match('}')) {
            properties.push(this.parseObjectProperty(hasProto));

            if (!this.match('}')) {
              this.expectCommaSeparator();
            }
          }

          this.expect('}');
          return this.finalize(node, new Node.ObjectExpression(properties));
        }; // https://tc39.github.io/ecma262/#sec-template-literals


        Parser.prototype.parseTemplateHead = function () {
          assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');
          var node = this.createNode();
          var token = this.nextToken();
          var raw = token.value;
          var cooked = token.cooked;
          return this.finalize(node, new Node.TemplateElement({
            raw: raw,
            cooked: cooked
          }, token.tail));
        };

        Parser.prototype.parseTemplateElement = function () {
          if (this.lookahead.type !== 10
          /* Template */
          ) {
            this.throwUnexpectedToken();
          }

          var node = this.createNode();
          var token = this.nextToken();
          var raw = token.value;
          var cooked = token.cooked;
          return this.finalize(node, new Node.TemplateElement({
            raw: raw,
            cooked: cooked
          }, token.tail));
        };

        Parser.prototype.parseTemplateLiteral = function () {
          var node = this.createNode();
          var expressions = [];
          var quasis = [];
          var quasi = this.parseTemplateHead();
          quasis.push(quasi);

          while (!quasi.tail) {
            expressions.push(this.parseExpression());
            quasi = this.parseTemplateElement();
            quasis.push(quasi);
          }

          return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));
        }; // https://tc39.github.io/ecma262/#sec-grouping-operator


        Parser.prototype.reinterpretExpressionAsPattern = function (expr) {
          switch (expr.type) {
            case syntax_1.Syntax.Identifier:
            case syntax_1.Syntax.MemberExpression:
            case syntax_1.Syntax.RestElement:
            case syntax_1.Syntax.AssignmentPattern:
              break;

            case syntax_1.Syntax.SpreadElement:
              expr.type = syntax_1.Syntax.RestElement;
              this.reinterpretExpressionAsPattern(expr.argument);
              break;

            case syntax_1.Syntax.ArrayExpression:
              expr.type = syntax_1.Syntax.ArrayPattern;

              for (var i = 0; i < expr.elements.length; i++) {
                if (expr.elements[i] !== null) {
                  this.reinterpretExpressionAsPattern(expr.elements[i]);
                }
              }

              break;

            case syntax_1.Syntax.ObjectExpression:
              expr.type = syntax_1.Syntax.ObjectPattern;

              for (var i = 0; i < expr.properties.length; i++) {
                this.reinterpretExpressionAsPattern(expr.properties[i].value);
              }

              break;

            case syntax_1.Syntax.AssignmentExpression:
              expr.type = syntax_1.Syntax.AssignmentPattern;
              delete expr.operator;
              this.reinterpretExpressionAsPattern(expr.left);
              break;

            default:
              // Allow other node type for tolerant parsing.
              break;
          }
        };

        Parser.prototype.parseGroupExpression = function () {
          var expr;
          this.expect('(');

          if (this.match(')')) {
            this.nextToken();

            if (!this.match('=>')) {
              this.expect('=>');
            }

            expr = {
              type: ArrowParameterPlaceHolder,
              params: [],
              async: false
            };
          } else {
            var startToken = this.lookahead;
            var params = [];

            if (this.match('...')) {
              expr = this.parseRestElement(params);
              this.expect(')');

              if (!this.match('=>')) {
                this.expect('=>');
              }

              expr = {
                type: ArrowParameterPlaceHolder,
                params: [expr],
                async: false
              };
            } else {
              var arrow = false;
              this.context.isBindingElement = true;
              expr = this.inheritCoverGrammar(this.parseAssignmentExpression);

              if (this.match(',')) {
                var expressions = [];
                this.context.isAssignmentTarget = false;
                expressions.push(expr);

                while (this.lookahead.type !== 2
                /* EOF */
                ) {
                  if (!this.match(',')) {
                    break;
                  }

                  this.nextToken();

                  if (this.match(')')) {
                    this.nextToken();

                    for (var i = 0; i < expressions.length; i++) {
                      this.reinterpretExpressionAsPattern(expressions[i]);
                    }

                    arrow = true;
                    expr = {
                      type: ArrowParameterPlaceHolder,
                      params: expressions,
                      async: false
                    };
                  } else if (this.match('...')) {
                    if (!this.context.isBindingElement) {
                      this.throwUnexpectedToken(this.lookahead);
                    }

                    expressions.push(this.parseRestElement(params));
                    this.expect(')');

                    if (!this.match('=>')) {
                      this.expect('=>');
                    }

                    this.context.isBindingElement = false;

                    for (var i = 0; i < expressions.length; i++) {
                      this.reinterpretExpressionAsPattern(expressions[i]);
                    }

                    arrow = true;
                    expr = {
                      type: ArrowParameterPlaceHolder,
                      params: expressions,
                      async: false
                    };
                  } else {
                    expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
                  }

                  if (arrow) {
                    break;
                  }
                }

                if (!arrow) {
                  expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
                }
              }

              if (!arrow) {
                this.expect(')');

                if (this.match('=>')) {
                  if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {
                    arrow = true;
                    expr = {
                      type: ArrowParameterPlaceHolder,
                      params: [expr],
                      async: false
                    };
                  }

                  if (!arrow) {
                    if (!this.context.isBindingElement) {
                      this.throwUnexpectedToken(this.lookahead);
                    }

                    if (expr.type === syntax_1.Syntax.SequenceExpression) {
                      for (var i = 0; i < expr.expressions.length; i++) {
                        this.reinterpretExpressionAsPattern(expr.expressions[i]);
                      }
                    } else {
                      this.reinterpretExpressionAsPattern(expr);
                    }

                    var parameters = expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr];
                    expr = {
                      type: ArrowParameterPlaceHolder,
                      params: parameters,
                      async: false
                    };
                  }
                }

                this.context.isBindingElement = false;
              }
            }
          }

          return expr;
        }; // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions


        Parser.prototype.parseArguments = function () {
          this.expect('(');
          var args = [];

          if (!this.match(')')) {
            while (true) {
              var expr = this.match('...') ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAssignmentExpression);
              args.push(expr);

              if (this.match(')')) {
                break;
              }

              this.expectCommaSeparator();

              if (this.match(')')) {
                break;
              }
            }
          }

          this.expect(')');
          return args;
        };

        Parser.prototype.isIdentifierName = function (token) {
          return token.type === 3
          /* Identifier */
          || token.type === 4
          /* Keyword */
          || token.type === 1
          /* BooleanLiteral */
          || token.type === 5
          /* NullLiteral */
          ;
        };

        Parser.prototype.parseIdentifierName = function () {
          var node = this.createNode();
          var token = this.nextToken();

          if (!this.isIdentifierName(token)) {
            this.throwUnexpectedToken(token);
          }

          return this.finalize(node, new Node.Identifier(token.value));
        };

        Parser.prototype.parseNewExpression = function () {
          var node = this.createNode();
          var id = this.parseIdentifierName();
          assert_1.assert(id.name === 'new', 'New expression must start with `new`');
          var expr;

          if (this.match('.')) {
            this.nextToken();

            if (this.lookahead.type === 3
            /* Identifier */
            && this.context.inFunctionBody && this.lookahead.value === 'target') {
              var property = this.parseIdentifierName();
              expr = new Node.MetaProperty(id, property);
            } else {
              this.throwUnexpectedToken(this.lookahead);
            }
          } else {
            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);
            var args = this.match('(') ? this.parseArguments() : [];
            expr = new Node.NewExpression(callee, args);
            this.context.isAssignmentTarget = false;
            this.context.isBindingElement = false;
          }

          return this.finalize(node, expr);
        };

        Parser.prototype.parseAsyncArgument = function () {
          var arg = this.parseAssignmentExpression();
          this.context.firstCoverInitializedNameError = null;
          return arg;
        };

        Parser.prototype.parseAsyncArguments = function () {
          this.expect('(');
          var args = [];

          if (!this.match(')')) {
            while (true) {
              var expr = this.match('...') ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAsyncArgument);
              args.push(expr);

              if (this.match(')')) {
                break;
              }

              this.expectCommaSeparator();

              if (this.match(')')) {
                break;
              }
            }
          }

          this.expect(')');
          return args;
        };

        Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {
          var startToken = this.lookahead;
          var maybeAsync = this.matchContextualKeyword('async');
          var previousAllowIn = this.context.allowIn;
          this.context.allowIn = true;
          var expr;

          if (this.matchKeyword('super') && this.context.inFunctionBody) {
            expr = this.createNode();
            this.nextToken();
            expr = this.finalize(expr, new Node.Super());

            if (!this.match('(') && !this.match('.') && !this.match('[')) {
              this.throwUnexpectedToken(this.lookahead);
            }
          } else {
            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
          }

          while (true) {
            if (this.match('.')) {
              this.context.isBindingElement = false;
              this.context.isAssignmentTarget = true;
              this.expect('.');
              var property = this.parseIdentifierName();
              expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));
            } else if (this.match('(')) {
              var asyncArrow = maybeAsync && startToken.lineNumber === this.lookahead.lineNumber;
              this.context.isBindingElement = false;
              this.context.isAssignmentTarget = false;
              var args = asyncArrow ? this.parseAsyncArguments() : this.parseArguments();
              expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));

              if (asyncArrow && this.match('=>')) {
                for (var i = 0; i < args.length; ++i) {
                  this.reinterpretExpressionAsPattern(args[i]);
                }

                expr = {
                  type: ArrowParameterPlaceHolder,
                  params: args,
                  async: true
                };
              }
            } else if (this.match('[')) {
              this.context.isBindingElement = false;
              this.context.isAssignmentTarget = true;
              this.expect('[');
              var property = this.isolateCoverGrammar(this.parseExpression);
              this.expect(']');
              expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));
            } else if (this.lookahead.type === 10
            /* Template */
            && this.lookahead.head) {
              var quasi = this.parseTemplateLiteral();
              expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));
            } else {
              break;
            }
          }

          this.context.allowIn = previousAllowIn;
          return expr;
        };

        Parser.prototype.parseSuper = function () {
          var node = this.createNode();
          this.expectKeyword('super');

          if (!this.match('[') && !this.match('.')) {
            this.throwUnexpectedToken(this.lookahead);
          }

          return this.finalize(node, new Node.Super());
        };

        Parser.prototype.parseLeftHandSideExpression = function () {
          assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');
          var node = this.startNode(this.lookahead);
          var expr = this.matchKeyword('super') && this.context.inFunctionBody ? this.parseSuper() : this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);

          while (true) {
            if (this.match('[')) {
              this.context.isBindingElement = false;
              this.context.isAssignmentTarget = true;
              this.expect('[');
              var property = this.isolateCoverGrammar(this.parseExpression);
              this.expect(']');
              expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));
            } else if (this.match('.')) {
              this.context.isBindingElement = false;
              this.context.isAssignmentTarget = true;
              this.expect('.');
              var property = this.parseIdentifierName();
              expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));
            } else if (this.lookahead.type === 10
            /* Template */
            && this.lookahead.head) {
              var quasi = this.parseTemplateLiteral();
              expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));
            } else {
              break;
            }
          }

          return expr;
        }; // https://tc39.github.io/ecma262/#sec-update-expressions


        Parser.prototype.parseUpdateExpression = function () {
          var expr;
          var startToken = this.lookahead;

          if (this.match('++') || this.match('--')) {
            var node = this.startNode(startToken);
            var token = this.nextToken();
            expr = this.inheritCoverGrammar(this.parseUnaryExpression);

            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
              this.tolerateError(messages_1.Messages.StrictLHSPrefix);
            }

            if (!this.context.isAssignmentTarget) {
              this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
            }

            var prefix = true;
            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));
            this.context.isAssignmentTarget = false;
            this.context.isBindingElement = false;
          } else {
            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);

            if (!this.hasLineTerminator && this.lookahead.type === 7
            /* Punctuator */
            ) {
              if (this.match('++') || this.match('--')) {
                if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
                  this.tolerateError(messages_1.Messages.StrictLHSPostfix);
                }

                if (!this.context.isAssignmentTarget) {
                  this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
                }

                this.context.isAssignmentTarget = false;
                this.context.isBindingElement = false;
                var operator = this.nextToken().value;
                var prefix = false;
                expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));
              }
            }
          }

          return expr;
        }; // https://tc39.github.io/ecma262/#sec-unary-operators


        Parser.prototype.parseAwaitExpression = function () {
          var node = this.createNode();
          this.nextToken();
          var argument = this.parseUnaryExpression();
          return this.finalize(node, new Node.AwaitExpression(argument));
        };

        Parser.prototype.parseUnaryExpression = function () {
          var expr;

          if (this.match('+') || this.match('-') || this.match('~') || this.match('!') || this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {
            var node = this.startNode(this.lookahead);
            var token = this.nextToken();
            expr = this.inheritCoverGrammar(this.parseUnaryExpression);
            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));

            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {
              this.tolerateError(messages_1.Messages.StrictDelete);
            }

            this.context.isAssignmentTarget = false;
            this.context.isBindingElement = false;
          } else if (this.context.await && this.matchContextualKeyword('await')) {
            expr = this.parseAwaitExpression();
          } else {
            expr = this.parseUpdateExpression();
          }

          return expr;
        };

        Parser.prototype.parseExponentiationExpression = function () {
          var startToken = this.lookahead;
          var expr = this.inheritCoverGrammar(this.parseUnaryExpression);

          if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {
            this.nextToken();
            this.context.isAssignmentTarget = false;
            this.context.isBindingElement = false;
            var left = expr;
            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));
          }

          return expr;
        }; // https://tc39.github.io/ecma262/#sec-exp-operator
        // https://tc39.github.io/ecma262/#sec-multiplicative-operators
        // https://tc39.github.io/ecma262/#sec-additive-operators
        // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators
        // https://tc39.github.io/ecma262/#sec-relational-operators
        // https://tc39.github.io/ecma262/#sec-equality-operators
        // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators
        // https://tc39.github.io/ecma262/#sec-binary-logical-operators


        Parser.prototype.binaryPrecedence = function (token) {
          var op = token.value;
          var precedence;

          if (token.type === 7
          /* Punctuator */
          ) {
            precedence = this.operatorPrecedence[op] || 0;
          } else if (token.type === 4
          /* Keyword */
          ) {
            precedence = op === 'instanceof' || this.context.allowIn && op === 'in' ? 7 : 0;
          } else {
            precedence = 0;
          }

          return precedence;
        };

        Parser.prototype.parseBinaryExpression = function () {
          var startToken = this.lookahead;
          var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);
          var token = this.lookahead;
          var prec = this.binaryPrecedence(token);

          if (prec > 0) {
            this.nextToken();
            this.context.isAssignmentTarget = false;
            this.context.isBindingElement = false;
            var markers = [startToken, this.lookahead];
            var left = expr;
            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
            var stack = [left, token.value, right];
            var precedences = [prec];

            while (true) {
              prec = this.binaryPrecedence(this.lookahead);

              if (prec <= 0) {
                break;
              } // Reduce: make a binary expression from the three topmost entries.


              while (stack.length > 2 && prec <= precedences[precedences.length - 1]) {
                right = stack.pop();
                var operator = stack.pop();
                precedences.pop();
                left = stack.pop();
                markers.pop();
                var node = this.startNode(markers[markers.length - 1]);
                stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));
              } // Shift.


              stack.push(this.nextToken().value);
              precedences.push(prec);
              markers.push(this.lookahead);
              stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));
            } // Final reduce to clean-up the stack.


            var i = stack.length - 1;
            expr = stack[i];
            var lastMarker = markers.pop();

            while (i > 1) {
              var marker = markers.pop();
              var lastLineStart = lastMarker && lastMarker.lineStart;
              var node = this.startNode(marker, lastLineStart);
              var operator = stack[i - 1];
              expr = this.finalize(node, new Node.BinaryExpression(operator, stack[i - 2], expr));
              i -= 2;
              lastMarker = marker;
            }
          }

          return expr;
        }; // https://tc39.github.io/ecma262/#sec-conditional-operator


        Parser.prototype.parseConditionalExpression = function () {
          var startToken = this.lookahead;
          var expr = this.inheritCoverGrammar(this.parseBinaryExpression);

          if (this.match('?')) {
            this.nextToken();
            var previousAllowIn = this.context.allowIn;
            this.context.allowIn = true;
            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);
            this.context.allowIn = previousAllowIn;
            this.expect(':');
            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);
            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));
            this.context.isAssignmentTarget = false;
            this.context.isBindingElement = false;
          }

          return expr;
        }; // https://tc39.github.io/ecma262/#sec-assignment-operators


        Parser.prototype.checkPatternParam = function (options, param) {
          switch (param.type) {
            case syntax_1.Syntax.Identifier:
              this.validateParam(options, param, param.name);
              break;

            case syntax_1.Syntax.RestElement:
              this.checkPatternParam(options, param.argument);
              break;

            case syntax_1.Syntax.AssignmentPattern:
              this.checkPatternParam(options, param.left);
              break;

            case syntax_1.Syntax.ArrayPattern:
              for (var i = 0; i < param.elements.length; i++) {
                if (param.elements[i] !== null) {
                  this.checkPatternParam(options, param.elements[i]);
                }
              }

              break;

            case syntax_1.Syntax.ObjectPattern:
              for (var i = 0; i < param.properties.length; i++) {
                this.checkPatternParam(options, param.properties[i].value);
              }

              break;

            default:
              break;
          }

          options.simple = options.simple && param instanceof Node.Identifier;
        };

        Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {
          var params = [expr];
          var options;
          var asyncArrow = false;

          switch (expr.type) {
            case syntax_1.Syntax.Identifier:
              break;

            case ArrowParameterPlaceHolder:
              params = expr.params;
              asyncArrow = expr.async;
              break;

            default:
              return null;
          }

          options = {
            simple: true,
            paramSet: {}
          };

          for (var i = 0; i < params.length; ++i) {
            var param = params[i];

            if (param.type === syntax_1.Syntax.AssignmentPattern) {
              if (param.right.type === syntax_1.Syntax.YieldExpression) {
                if (param.right.argument) {
                  this.throwUnexpectedToken(this.lookahead);
                }

                param.right.type = syntax_1.Syntax.Identifier;
                param.right.name = 'yield';
                delete param.right.argument;
                delete param.right.delegate;
              }
            } else if (asyncArrow && param.type === syntax_1.Syntax.Identifier && param.name === 'await') {
              this.throwUnexpectedToken(this.lookahead);
            }

            this.checkPatternParam(options, param);
            params[i] = param;
          }

          if (this.context.strict || !this.context.allowYield) {
            for (var i = 0; i < params.length; ++i) {
              var param = params[i];

              if (param.type === syntax_1.Syntax.YieldExpression) {
                this.throwUnexpectedToken(this.lookahead);
              }
            }
          }

          if (options.message === messages_1.Messages.StrictParamDupe) {
            var token = this.context.strict ? options.stricted : options.firstRestricted;
            this.throwUnexpectedToken(token, options.message);
          }

          return {
            simple: options.simple,
            params: params,
            stricted: options.stricted,
            firstRestricted: options.firstRestricted,
            message: options.message
          };
        };

        Parser.prototype.parseAssignmentExpression = function () {
          var expr;

          if (!this.context.allowYield && this.matchKeyword('yield')) {
            expr = this.parseYieldExpression();
          } else {
            var startToken = this.lookahead;
            var token = startToken;
            expr = this.parseConditionalExpression();

            if (token.type === 3
            /* Identifier */
            && token.lineNumber === this.lookahead.lineNumber && token.value === 'async') {
              if (this.lookahead.type === 3
              /* Identifier */
              || this.matchKeyword('yield')) {
                var arg = this.parsePrimaryExpression();
                this.reinterpretExpressionAsPattern(arg);
                expr = {
                  type: ArrowParameterPlaceHolder,
                  params: [arg],
                  async: true
                };
              }
            }

            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {
              // https://tc39.github.io/ecma262/#sec-arrow-function-definitions
              this.context.isAssignmentTarget = false;
              this.context.isBindingElement = false;
              var isAsync = expr.async;
              var list = this.reinterpretAsCoverFormalsList(expr);

              if (list) {
                if (this.hasLineTerminator) {
                  this.tolerateUnexpectedToken(this.lookahead);
                }

                this.context.firstCoverInitializedNameError = null;
                var previousStrict = this.context.strict;
                var previousAllowStrictDirective = this.context.allowStrictDirective;
                this.context.allowStrictDirective = list.simple;
                var previousAllowYield = this.context.allowYield;
                var previousAwait = this.context.await;
                this.context.allowYield = true;
                this.context.await = isAsync;
                var node = this.startNode(startToken);
                this.expect('=>');
                var body = void 0;

                if (this.match('{')) {
                  var previousAllowIn = this.context.allowIn;
                  this.context.allowIn = true;
                  body = this.parseFunctionSourceElements();
                  this.context.allowIn = previousAllowIn;
                } else {
                  body = this.isolateCoverGrammar(this.parseAssignmentExpression);
                }

                var expression = body.type !== syntax_1.Syntax.BlockStatement;

                if (this.context.strict && list.firstRestricted) {
                  this.throwUnexpectedToken(list.firstRestricted, list.message);
                }

                if (this.context.strict && list.stricted) {
                  this.tolerateUnexpectedToken(list.stricted, list.message);
                }

                expr = isAsync ? this.finalize(node, new Node.AsyncArrowFunctionExpression(list.params, body, expression)) : this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));
                this.context.strict = previousStrict;
                this.context.allowStrictDirective = previousAllowStrictDirective;
                this.context.allowYield = previousAllowYield;
                this.context.await = previousAwait;
              }
            } else {
              if (this.matchAssign()) {
                if (!this.context.isAssignmentTarget) {
                  this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
                }

                if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {
                  var id = expr;

                  if (this.scanner.isRestrictedWord(id.name)) {
                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);
                  }

                  if (this.scanner.isStrictModeReservedWord(id.name)) {
                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
                  }
                }

                if (!this.match('=')) {
                  this.context.isAssignmentTarget = false;
                  this.context.isBindingElement = false;
                } else {
                  this.reinterpretExpressionAsPattern(expr);
                }

                token = this.nextToken();
                var operator = token.value;
                var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
                expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(operator, expr, right));
                this.context.firstCoverInitializedNameError = null;
              }
            }
          }

          return expr;
        }; // https://tc39.github.io/ecma262/#sec-comma-operator


        Parser.prototype.parseExpression = function () {
          var startToken = this.lookahead;
          var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);

          if (this.match(',')) {
            var expressions = [];
            expressions.push(expr);

            while (this.lookahead.type !== 2
            /* EOF */
            ) {
              if (!this.match(',')) {
                break;
              }

              this.nextToken();
              expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
            }

            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
          }

          return expr;
        }; // https://tc39.github.io/ecma262/#sec-block


        Parser.prototype.parseStatementListItem = function () {
          var statement;
          this.context.isAssignmentTarget = true;
          this.context.isBindingElement = true;

          if (this.lookahead.type === 4
          /* Keyword */
          ) {
            switch (this.lookahead.value) {
              case 'export':
                if (!this.context.isModule) {
                  this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);
                }

                statement = this.parseExportDeclaration();
                break;

              case 'import':
                if (!this.context.isModule) {
                  this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);
                }

                statement = this.parseImportDeclaration();
                break;

              case 'const':
                statement = this.parseLexicalDeclaration({
                  inFor: false
                });
                break;

              case 'function':
                statement = this.parseFunctionDeclaration();
                break;

              case 'class':
                statement = this.parseClassDeclaration();
                break;

              case 'let':
                statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({
                  inFor: false
                }) : this.parseStatement();
                break;

              default:
                statement = this.parseStatement();
                break;
            }
          } else {
            statement = this.parseStatement();
          }

          return statement;
        };

        Parser.prototype.parseBlock = function () {
          var node = this.createNode();
          this.expect('{');
          var block = [];

          while (true) {
            if (this.match('}')) {
              break;
            }

            block.push(this.parseStatementListItem());
          }

          this.expect('}');
          return this.finalize(node, new Node.BlockStatement(block));
        }; // https://tc39.github.io/ecma262/#sec-let-and-const-declarations


        Parser.prototype.parseLexicalBinding = function (kind, options) {
          var node = this.createNode();
          var params = [];
          var id = this.parsePattern(params, kind);

          if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
            if (this.scanner.isRestrictedWord(id.name)) {
              this.tolerateError(messages_1.Messages.StrictVarName);
            }
          }

          var init = null;

          if (kind === 'const') {
            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {
              if (this.match('=')) {
                this.nextToken();
                init = this.isolateCoverGrammar(this.parseAssignmentExpression);
              } else {
                this.throwError(messages_1.Messages.DeclarationMissingInitializer, 'const');
              }
            }
          } else if (!options.inFor && id.type !== syntax_1.Syntax.Identifier || this.match('=')) {
            this.expect('=');
            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
          }

          return this.finalize(node, new Node.VariableDeclarator(id, init));
        };

        Parser.prototype.parseBindingList = function (kind, options) {
          var list = [this.parseLexicalBinding(kind, options)];

          while (this.match(',')) {
            this.nextToken();
            list.push(this.parseLexicalBinding(kind, options));
          }

          return list;
        };

        Parser.prototype.isLexicalDeclaration = function () {
          var state = this.scanner.saveState();
          this.scanner.scanComments();
          var next = this.scanner.lex();
          this.scanner.restoreState(state);
          return next.type === 3
          /* Identifier */
          || next.type === 7
          /* Punctuator */
          && next.value === '[' || next.type === 7
          /* Punctuator */
          && next.value === '{' || next.type === 4
          /* Keyword */
          && next.value === 'let' || next.type === 4
          /* Keyword */
          && next.value === 'yield';
        };

        Parser.prototype.parseLexicalDeclaration = function (options) {
          var node = this.createNode();
          var kind = this.nextToken().value;
          assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');
          var declarations = this.parseBindingList(kind, options);
          this.consumeSemicolon();
          return this.finalize(node, new Node.VariableDeclaration(declarations, kind));
        }; // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns


        Parser.prototype.parseBindingRestElement = function (params, kind) {
          var node = this.createNode();
          this.expect('...');
          var arg = this.parsePattern(params, kind);
          return this.finalize(node, new Node.RestElement(arg));
        };

        Parser.prototype.parseArrayPattern = function (params, kind) {
          var node = this.createNode();
          this.expect('[');
          var elements = [];

          while (!this.match(']')) {
            if (this.match(',')) {
              this.nextToken();
              elements.push(null);
            } else {
              if (this.match('...')) {
                elements.push(this.parseBindingRestElement(params, kind));
                break;
              } else {
                elements.push(this.parsePatternWithDefault(params, kind));
              }

              if (!this.match(']')) {
                this.expect(',');
              }
            }
          }

          this.expect(']');
          return this.finalize(node, new Node.ArrayPattern(elements));
        };

        Parser.prototype.parsePropertyPattern = function (params, kind) {
          var node = this.createNode();
          var computed = false;
          var shorthand = false;
          var method = false;
          var key;
          var value;

          if (this.lookahead.type === 3
          /* Identifier */
          ) {
            var keyToken = this.lookahead;
            key = this.parseVariableIdentifier();
            var init = this.finalize(node, new Node.Identifier(keyToken.value));

            if (this.match('=')) {
              params.push(keyToken);
              shorthand = true;
              this.nextToken();
              var expr = this.parseAssignmentExpression();
              value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));
            } else if (!this.match(':')) {
              params.push(keyToken);
              shorthand = true;
              value = init;
            } else {
              this.expect(':');
              value = this.parsePatternWithDefault(params, kind);
            }
          } else {
            computed = this.match('[');
            key = this.parseObjectPropertyKey();
            this.expect(':');
            value = this.parsePatternWithDefault(params, kind);
          }

          return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));
        };

        Parser.prototype.parseObjectPattern = function (params, kind) {
          var node = this.createNode();
          var properties = [];
          this.expect('{');

          while (!this.match('}')) {
            properties.push(this.parsePropertyPattern(params, kind));

            if (!this.match('}')) {
              this.expect(',');
            }
          }

          this.expect('}');
          return this.finalize(node, new Node.ObjectPattern(properties));
        };

        Parser.prototype.parsePattern = function (params, kind) {
          var pattern;

          if (this.match('[')) {
            pattern = this.parseArrayPattern(params, kind);
          } else if (this.match('{')) {
            pattern = this.parseObjectPattern(params, kind);
          } else {
            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {
              this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.LetInLexicalBinding);
            }

            params.push(this.lookahead);
            pattern = this.parseVariableIdentifier(kind);
          }

          return pattern;
        };

        Parser.prototype.parsePatternWithDefault = function (params, kind) {
          var startToken = this.lookahead;
          var pattern = this.parsePattern(params, kind);

          if (this.match('=')) {
            this.nextToken();
            var previousAllowYield = this.context.allowYield;
            this.context.allowYield = true;
            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
            this.context.allowYield = previousAllowYield;
            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));
          }

          return pattern;
        }; // https://tc39.github.io/ecma262/#sec-variable-statement


        Parser.prototype.parseVariableIdentifier = function (kind) {
          var node = this.createNode();
          var token = this.nextToken();

          if (token.type === 4
          /* Keyword */
          && token.value === 'yield') {
            if (this.context.strict) {
              this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
            } else if (!this.context.allowYield) {
              this.throwUnexpectedToken(token);
            }
          } else if (token.type !== 3
          /* Identifier */
          ) {
            if (this.context.strict && token.type === 4
            /* Keyword */
            && this.scanner.isStrictModeReservedWord(token.value)) {
              this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
            } else {
              if (this.context.strict || token.value !== 'let' || kind !== 'var') {
                this.throwUnexpectedToken(token);
              }
            }
          } else if ((this.context.isModule || this.context.await) && token.type === 3
          /* Identifier */
          && token.value === 'await') {
            this.tolerateUnexpectedToken(token);
          }

          return this.finalize(node, new Node.Identifier(token.value));
        };

        Parser.prototype.parseVariableDeclaration = function (options) {
          var node = this.createNode();
          var params = [];
          var id = this.parsePattern(params, 'var');

          if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
            if (this.scanner.isRestrictedWord(id.name)) {
              this.tolerateError(messages_1.Messages.StrictVarName);
            }
          }

          var init = null;

          if (this.match('=')) {
            this.nextToken();
            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
          } else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {
            this.expect('=');
          }

          return this.finalize(node, new Node.VariableDeclarator(id, init));
        };

        Parser.prototype.parseVariableDeclarationList = function (options) {
          var opt = {
            inFor: options.inFor
          };
          var list = [];
          list.push(this.parseVariableDeclaration(opt));

          while (this.match(',')) {
            this.nextToken();
            list.push(this.parseVariableDeclaration(opt));
          }

          return list;
        };

        Parser.prototype.parseVariableStatement = function () {
          var node = this.createNode();
          this.expectKeyword('var');
          var declarations = this.parseVariableDeclarationList({
            inFor: false
          });
          this.consumeSemicolon();
          return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));
        }; // https://tc39.github.io/ecma262/#sec-empty-statement


        Parser.prototype.parseEmptyStatement = function () {
          var node = this.createNode();
          this.expect(';');
          return this.finalize(node, new Node.EmptyStatement());
        }; // https://tc39.github.io/ecma262/#sec-expression-statement


        Parser.prototype.parseExpressionStatement = function () {
          var node = this.createNode();
          var expr = this.parseExpression();
          this.consumeSemicolon();
          return this.finalize(node, new Node.ExpressionStatement(expr));
        }; // https://tc39.github.io/ecma262/#sec-if-statement


        Parser.prototype.parseIfClause = function () {
          if (this.context.strict && this.matchKeyword('function')) {
            this.tolerateError(messages_1.Messages.StrictFunction);
          }

          return this.parseStatement();
        };

        Parser.prototype.parseIfStatement = function () {
          var node = this.createNode();
          var consequent;
          var alternate = null;
          this.expectKeyword('if');
          this.expect('(');
          var test = this.parseExpression();

          if (!this.match(')') && this.config.tolerant) {
            this.tolerateUnexpectedToken(this.nextToken());
            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());
          } else {
            this.expect(')');
            consequent = this.parseIfClause();

            if (this.matchKeyword('else')) {
              this.nextToken();
              alternate = this.parseIfClause();
            }
          }

          return this.finalize(node, new Node.IfStatement(test, consequent, alternate));
        }; // https://tc39.github.io/ecma262/#sec-do-while-statement


        Parser.prototype.parseDoWhileStatement = function () {
          var node = this.createNode();
          this.expectKeyword('do');
          var previousInIteration = this.context.inIteration;
          this.context.inIteration = true;
          var body = this.parseStatement();
          this.context.inIteration = previousInIteration;
          this.expectKeyword('while');
          this.expect('(');
          var test = this.parseExpression();

          if (!this.match(')') && this.config.tolerant) {
            this.tolerateUnexpectedToken(this.nextToken());
          } else {
            this.expect(')');

            if (this.match(';')) {
              this.nextToken();
            }
          }

          return this.finalize(node, new Node.DoWhileStatement(body, test));
        }; // https://tc39.github.io/ecma262/#sec-while-statement


        Parser.prototype.parseWhileStatement = function () {
          var node = this.createNode();
          var body;
          this.expectKeyword('while');
          this.expect('(');
          var test = this.parseExpression();

          if (!this.match(')') && this.config.tolerant) {
            this.tolerateUnexpectedToken(this.nextToken());
            body = this.finalize(this.createNode(), new Node.EmptyStatement());
          } else {
            this.expect(')');
            var previousInIteration = this.context.inIteration;
            this.context.inIteration = true;
            body = this.parseStatement();
            this.context.inIteration = previousInIteration;
          }

          return this.finalize(node, new Node.WhileStatement(test, body));
        }; // https://tc39.github.io/ecma262/#sec-for-statement
        // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements


        Parser.prototype.parseForStatement = function () {
          var init = null;
          var test = null;
          var update = null;
          var forIn = true;
          var left, right;
          var node = this.createNode();
          this.expectKeyword('for');
          this.expect('(');

          if (this.match(';')) {
            this.nextToken();
          } else {
            if (this.matchKeyword('var')) {
              init = this.createNode();
              this.nextToken();
              var previousAllowIn = this.context.allowIn;
              this.context.allowIn = false;
              var declarations = this.parseVariableDeclarationList({
                inFor: true
              });
              this.context.allowIn = previousAllowIn;

              if (declarations.length === 1 && this.matchKeyword('in')) {
                var decl = declarations[0];

                if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {
                  this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');
                }

                init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
                this.nextToken();
                left = init;
                right = this.parseExpression();
                init = null;
              } else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
                init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
                this.nextToken();
                left = init;
                right = this.parseAssignmentExpression();
                init = null;
                forIn = false;
              } else {
                init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
                this.expect(';');
              }
            } else if (this.matchKeyword('const') || this.matchKeyword('let')) {
              init = this.createNode();
              var kind = this.nextToken().value;

              if (!this.context.strict && this.lookahead.value === 'in') {
                init = this.finalize(init, new Node.Identifier(kind));
                this.nextToken();
                left = init;
                right = this.parseExpression();
                init = null;
              } else {
                var previousAllowIn = this.context.allowIn;
                this.context.allowIn = false;
                var declarations = this.parseBindingList(kind, {
                  inFor: true
                });
                this.context.allowIn = previousAllowIn;

                if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {
                  init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
                  this.nextToken();
                  left = init;
                  right = this.parseExpression();
                  init = null;
                } else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
                  init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
                  this.nextToken();
                  left = init;
                  right = this.parseAssignmentExpression();
                  init = null;
                  forIn = false;
                } else {
                  this.consumeSemicolon();
                  init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
                }
              }
            } else {
              var initStartToken = this.lookahead;
              var previousAllowIn = this.context.allowIn;
              this.context.allowIn = false;
              init = this.inheritCoverGrammar(this.parseAssignmentExpression);
              this.context.allowIn = previousAllowIn;

              if (this.matchKeyword('in')) {
                if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
                  this.tolerateError(messages_1.Messages.InvalidLHSInForIn);
                }

                this.nextToken();
                this.reinterpretExpressionAsPattern(init);
                left = init;
                right = this.parseExpression();
                init = null;
              } else if (this.matchContextualKeyword('of')) {
                if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
                  this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);
                }

                this.nextToken();
                this.reinterpretExpressionAsPattern(init);
                left = init;
                right = this.parseAssignmentExpression();
                init = null;
                forIn = false;
              } else {
                if (this.match(',')) {
                  var initSeq = [init];

                  while (this.match(',')) {
                    this.nextToken();
                    initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
                  }

                  init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));
                }

                this.expect(';');
              }
            }
          }

          if (typeof left === 'undefined') {
            if (!this.match(';')) {
              test = this.parseExpression();
            }

            this.expect(';');

            if (!this.match(')')) {
              update = this.parseExpression();
            }
          }

          var body;

          if (!this.match(')') && this.config.tolerant) {
            this.tolerateUnexpectedToken(this.nextToken());
            body = this.finalize(this.createNode(), new Node.EmptyStatement());
          } else {
            this.expect(')');
            var previousInIteration = this.context.inIteration;
            this.context.inIteration = true;
            body = this.isolateCoverGrammar(this.parseStatement);
            this.context.inIteration = previousInIteration;
          }

          return typeof left === 'undefined' ? this.finalize(node, new Node.ForStatement(init, test, update, body)) : forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) : this.finalize(node, new Node.ForOfStatement(left, right, body));
        }; // https://tc39.github.io/ecma262/#sec-continue-statement


        Parser.prototype.parseContinueStatement = function () {
          var node = this.createNode();
          this.expectKeyword('continue');
          var label = null;

          if (this.lookahead.type === 3
          /* Identifier */
          && !this.hasLineTerminator) {
            var id = this.parseVariableIdentifier();
            label = id;
            var key = '$' + id.name;

            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
              this.throwError(messages_1.Messages.UnknownLabel, id.name);
            }
          }

          this.consumeSemicolon();

          if (label === null && !this.context.inIteration) {
            this.throwError(messages_1.Messages.IllegalContinue);
          }

          return this.finalize(node, new Node.ContinueStatement(label));
        }; // https://tc39.github.io/ecma262/#sec-break-statement


        Parser.prototype.parseBreakStatement = function () {
          var node = this.createNode();
          this.expectKeyword('break');
          var label = null;

          if (this.lookahead.type === 3
          /* Identifier */
          && !this.hasLineTerminator) {
            var id = this.parseVariableIdentifier();
            var key = '$' + id.name;

            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
              this.throwError(messages_1.Messages.UnknownLabel, id.name);
            }

            label = id;
          }

          this.consumeSemicolon();

          if (label === null && !this.context.inIteration && !this.context.inSwitch) {
            this.throwError(messages_1.Messages.IllegalBreak);
          }

          return this.finalize(node, new Node.BreakStatement(label));
        }; // https://tc39.github.io/ecma262/#sec-return-statement


        Parser.prototype.parseReturnStatement = function () {
          if (!this.context.inFunctionBody) {
            this.tolerateError(messages_1.Messages.IllegalReturn);
          }

          var node = this.createNode();
          this.expectKeyword('return');
          var hasArgument = !this.match(';') && !this.match('}') && !this.hasLineTerminator && this.lookahead.type !== 2
          /* EOF */
          || this.lookahead.type === 8
          /* StringLiteral */
          || this.lookahead.type === 10
          /* Template */
          ;
          var argument = hasArgument ? this.parseExpression() : null;
          this.consumeSemicolon();
          return this.finalize(node, new Node.ReturnStatement(argument));
        }; // https://tc39.github.io/ecma262/#sec-with-statement


        Parser.prototype.parseWithStatement = function () {
          if (this.context.strict) {
            this.tolerateError(messages_1.Messages.StrictModeWith);
          }

          var node = this.createNode();
          var body;
          this.expectKeyword('with');
          this.expect('(');
          var object = this.parseExpression();

          if (!this.match(')') && this.config.tolerant) {
            this.tolerateUnexpectedToken(this.nextToken());
            body = this.finalize(this.createNode(), new Node.EmptyStatement());
          } else {
            this.expect(')');
            body = this.parseStatement();
          }

          return this.finalize(node, new Node.WithStatement(object, body));
        }; // https://tc39.github.io/ecma262/#sec-switch-statement


        Parser.prototype.parseSwitchCase = function () {
          var node = this.createNode();
          var test;

          if (this.matchKeyword('default')) {
            this.nextToken();
            test = null;
          } else {
            this.expectKeyword('case');
            test = this.parseExpression();
          }

          this.expect(':');
          var consequent = [];

          while (true) {
            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {
              break;
            }

            consequent.push(this.parseStatementListItem());
          }

          return this.finalize(node, new Node.SwitchCase(test, consequent));
        };

        Parser.prototype.parseSwitchStatement = function () {
          var node = this.createNode();
          this.expectKeyword('switch');
          this.expect('(');
          var discriminant = this.parseExpression();
          this.expect(')');
          var previousInSwitch = this.context.inSwitch;
          this.context.inSwitch = true;
          var cases = [];
          var defaultFound = false;
          this.expect('{');

          while (true) {
            if (this.match('}')) {
              break;
            }

            var clause = this.parseSwitchCase();

            if (clause.test === null) {
              if (defaultFound) {
                this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);
              }

              defaultFound = true;
            }

            cases.push(clause);
          }

          this.expect('}');
          this.context.inSwitch = previousInSwitch;
          return this.finalize(node, new Node.SwitchStatement(discriminant, cases));
        }; // https://tc39.github.io/ecma262/#sec-labelled-statements


        Parser.prototype.parseLabelledStatement = function () {
          var node = this.createNode();
          var expr = this.parseExpression();
          var statement;

          if (expr.type === syntax_1.Syntax.Identifier && this.match(':')) {
            this.nextToken();
            var id = expr;
            var key = '$' + id.name;

            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
              this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);
            }

            this.context.labelSet[key] = true;
            var body = void 0;

            if (this.matchKeyword('class')) {
              this.tolerateUnexpectedToken(this.lookahead);
              body = this.parseClassDeclaration();
            } else if (this.matchKeyword('function')) {
              var token = this.lookahead;
              var declaration = this.parseFunctionDeclaration();

              if (this.context.strict) {
                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunction);
              } else if (declaration.generator) {
                this.tolerateUnexpectedToken(token, messages_1.Messages.GeneratorInLegacyContext);
              }

              body = declaration;
            } else {
              body = this.parseStatement();
            }

            delete this.context.labelSet[key];
            statement = new Node.LabeledStatement(id, body);
          } else {
            this.consumeSemicolon();
            statement = new Node.ExpressionStatement(expr);
          }

          return this.finalize(node, statement);
        }; // https://tc39.github.io/ecma262/#sec-throw-statement


        Parser.prototype.parseThrowStatement = function () {
          var node = this.createNode();
          this.expectKeyword('throw');

          if (this.hasLineTerminator) {
            this.throwError(messages_1.Messages.NewlineAfterThrow);
          }

          var argument = this.parseExpression();
          this.consumeSemicolon();
          return this.finalize(node, new Node.ThrowStatement(argument));
        }; // https://tc39.github.io/ecma262/#sec-try-statement


        Parser.prototype.parseCatchClause = function () {
          var node = this.createNode();
          this.expectKeyword('catch');
          this.expect('(');

          if (this.match(')')) {
            this.throwUnexpectedToken(this.lookahead);
          }

          var params = [];
          var param = this.parsePattern(params);
          var paramMap = {};

          for (var i = 0; i < params.length; i++) {
            var key = '$' + params[i].value;

            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {
              this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);
            }

            paramMap[key] = true;
          }

          if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {
            if (this.scanner.isRestrictedWord(param.name)) {
              this.tolerateError(messages_1.Messages.StrictCatchVariable);
            }
          }

          this.expect(')');
          var body = this.parseBlock();
          return this.finalize(node, new Node.CatchClause(param, body));
        };

        Parser.prototype.parseFinallyClause = function () {
          this.expectKeyword('finally');
          return this.parseBlock();
        };

        Parser.prototype.parseTryStatement = function () {
          var node = this.createNode();
          this.expectKeyword('try');
          var block = this.parseBlock();
          var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;
          var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;

          if (!handler && !finalizer) {
            this.throwError(messages_1.Messages.NoCatchOrFinally);
          }

          return this.finalize(node, new Node.TryStatement(block, handler, finalizer));
        }; // https://tc39.github.io/ecma262/#sec-debugger-statement


        Parser.prototype.parseDebuggerStatement = function () {
          var node = this.createNode();
          this.expectKeyword('debugger');
          this.consumeSemicolon();
          return this.finalize(node, new Node.DebuggerStatement());
        }; // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations


        Parser.prototype.parseStatement = function () {
          var statement;

          switch (this.lookahead.type) {
            case 1
            /* BooleanLiteral */
            :
            case 5
            /* NullLiteral */
            :
            case 6
            /* NumericLiteral */
            :
            case 8
            /* StringLiteral */
            :
            case 10
            /* Template */
            :
            case 9
            /* RegularExpression */
            :
              statement = this.parseExpressionStatement();
              break;

            case 7
            /* Punctuator */
            :
              var value = this.lookahead.value;

              if (value === '{') {
                statement = this.parseBlock();
              } else if (value === '(') {
                statement = this.parseExpressionStatement();
              } else if (value === ';') {
                statement = this.parseEmptyStatement();
              } else {
                statement = this.parseExpressionStatement();
              }

              break;

            case 3
            /* Identifier */
            :
              statement = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();
              break;

            case 4
            /* Keyword */
            :
              switch (this.lookahead.value) {
                case 'break':
                  statement = this.parseBreakStatement();
                  break;

                case 'continue':
                  statement = this.parseContinueStatement();
                  break;

                case 'debugger':
                  statement = this.parseDebuggerStatement();
                  break;

                case 'do':
                  statement = this.parseDoWhileStatement();
                  break;

                case 'for':
                  statement = this.parseForStatement();
                  break;

                case 'function':
                  statement = this.parseFunctionDeclaration();
                  break;

                case 'if':
                  statement = this.parseIfStatement();
                  break;

                case 'return':
                  statement = this.parseReturnStatement();
                  break;

                case 'switch':
                  statement = this.parseSwitchStatement();
                  break;

                case 'throw':
                  statement = this.parseThrowStatement();
                  break;

                case 'try':
                  statement = this.parseTryStatement();
                  break;

                case 'var':
                  statement = this.parseVariableStatement();
                  break;

                case 'while':
                  statement = this.parseWhileStatement();
                  break;

                case 'with':
                  statement = this.parseWithStatement();
                  break;

                default:
                  statement = this.parseExpressionStatement();
                  break;
              }

              break;

            default:
              statement = this.throwUnexpectedToken(this.lookahead);
          }

          return statement;
        }; // https://tc39.github.io/ecma262/#sec-function-definitions


        Parser.prototype.parseFunctionSourceElements = function () {
          var node = this.createNode();
          this.expect('{');
          var body = this.parseDirectivePrologues();
          var previousLabelSet = this.context.labelSet;
          var previousInIteration = this.context.inIteration;
          var previousInSwitch = this.context.inSwitch;
          var previousInFunctionBody = this.context.inFunctionBody;
          this.context.labelSet = {};
          this.context.inIteration = false;
          this.context.inSwitch = false;
          this.context.inFunctionBody = true;

          while (this.lookahead.type !== 2
          /* EOF */
          ) {
            if (this.match('}')) {
              break;
            }

            body.push(this.parseStatementListItem());
          }

          this.expect('}');
          this.context.labelSet = previousLabelSet;
          this.context.inIteration = previousInIteration;
          this.context.inSwitch = previousInSwitch;
          this.context.inFunctionBody = previousInFunctionBody;
          return this.finalize(node, new Node.BlockStatement(body));
        };

        Parser.prototype.validateParam = function (options, param, name) {
          var key = '$' + name;

          if (this.context.strict) {
            if (this.scanner.isRestrictedWord(name)) {
              options.stricted = param;
              options.message = messages_1.Messages.StrictParamName;
            }

            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
              options.stricted = param;
              options.message = messages_1.Messages.StrictParamDupe;
            }
          } else if (!options.firstRestricted) {
            if (this.scanner.isRestrictedWord(name)) {
              options.firstRestricted = param;
              options.message = messages_1.Messages.StrictParamName;
            } else if (this.scanner.isStrictModeReservedWord(name)) {
              options.firstRestricted = param;
              options.message = messages_1.Messages.StrictReservedWord;
            } else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
              options.stricted = param;
              options.message = messages_1.Messages.StrictParamDupe;
            }
          }
          /* istanbul ignore next */


          if (typeof Object.defineProperty === 'function') {
            Object.defineProperty(options.paramSet, key, {
              value: true,
              enumerable: true,
              writable: true,
              configurable: true
            });
          } else {
            options.paramSet[key] = true;
          }
        };

        Parser.prototype.parseRestElement = function (params) {
          var node = this.createNode();
          this.expect('...');
          var arg = this.parsePattern(params);

          if (this.match('=')) {
            this.throwError(messages_1.Messages.DefaultRestParameter);
          }

          if (!this.match(')')) {
            this.throwError(messages_1.Messages.ParameterAfterRestParameter);
          }

          return this.finalize(node, new Node.RestElement(arg));
        };

        Parser.prototype.parseFormalParameter = function (options) {
          var params = [];
          var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);

          for (var i = 0; i < params.length; i++) {
            this.validateParam(options, params[i], params[i].value);
          }

          options.simple = options.simple && param instanceof Node.Identifier;
          options.params.push(param);
        };

        Parser.prototype.parseFormalParameters = function (firstRestricted) {
          var options;
          options = {
            simple: true,
            params: [],
            firstRestricted: firstRestricted
          };
          this.expect('(');

          if (!this.match(')')) {
            options.paramSet = {};

            while (this.lookahead.type !== 2
            /* EOF */
            ) {
              this.parseFormalParameter(options);

              if (this.match(')')) {
                break;
              }

              this.expect(',');

              if (this.match(')')) {
                break;
              }
            }
          }

          this.expect(')');
          return {
            simple: options.simple,
            params: options.params,
            stricted: options.stricted,
            firstRestricted: options.firstRestricted,
            message: options.message
          };
        };

        Parser.prototype.matchAsyncFunction = function () {
          var match = this.matchContextualKeyword('async');

          if (match) {
            var state = this.scanner.saveState();
            this.scanner.scanComments();
            var next = this.scanner.lex();
            this.scanner.restoreState(state);
            match = state.lineNumber === next.lineNumber && next.type === 4
            /* Keyword */
            && next.value === 'function';
          }

          return match;
        };

        Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {
          var node = this.createNode();
          var isAsync = this.matchContextualKeyword('async');

          if (isAsync) {
            this.nextToken();
          }

          this.expectKeyword('function');
          var isGenerator = isAsync ? false : this.match('*');

          if (isGenerator) {
            this.nextToken();
          }

          var message;
          var id = null;
          var firstRestricted = null;

          if (!identifierIsOptional || !this.match('(')) {
            var token = this.lookahead;
            id = this.parseVariableIdentifier();

            if (this.context.strict) {
              if (this.scanner.isRestrictedWord(token.value)) {
                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
              }
            } else {
              if (this.scanner.isRestrictedWord(token.value)) {
                firstRestricted = token;
                message = messages_1.Messages.StrictFunctionName;
              } else if (this.scanner.isStrictModeReservedWord(token.value)) {
                firstRestricted = token;
                message = messages_1.Messages.StrictReservedWord;
              }
            }
          }

          var previousAllowAwait = this.context.await;
          var previousAllowYield = this.context.allowYield;
          this.context.await = isAsync;
          this.context.allowYield = !isGenerator;
          var formalParameters = this.parseFormalParameters(firstRestricted);
          var params = formalParameters.params;
          var stricted = formalParameters.stricted;
          firstRestricted = formalParameters.firstRestricted;

          if (formalParameters.message) {
            message = formalParameters.message;
          }

          var previousStrict = this.context.strict;
          var previousAllowStrictDirective = this.context.allowStrictDirective;
          this.context.allowStrictDirective = formalParameters.simple;
          var body = this.parseFunctionSourceElements();

          if (this.context.strict && firstRestricted) {
            this.throwUnexpectedToken(firstRestricted, message);
          }

          if (this.context.strict && stricted) {
            this.tolerateUnexpectedToken(stricted, message);
          }

          this.context.strict = previousStrict;
          this.context.allowStrictDirective = previousAllowStrictDirective;
          this.context.await = previousAllowAwait;
          this.context.allowYield = previousAllowYield;
          return isAsync ? this.finalize(node, new Node.AsyncFunctionDeclaration(id, params, body)) : this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));
        };

        Parser.prototype.parseFunctionExpression = function () {
          var node = this.createNode();
          var isAsync = this.matchContextualKeyword('async');

          if (isAsync) {
            this.nextToken();
          }

          this.expectKeyword('function');
          var isGenerator = isAsync ? false : this.match('*');

          if (isGenerator) {
            this.nextToken();
          }

          var message;
          var id = null;
          var firstRestricted;
          var previousAllowAwait = this.context.await;
          var previousAllowYield = this.context.allowYield;
          this.context.await = isAsync;
          this.context.allowYield = !isGenerator;

          if (!this.match('(')) {
            var token = this.lookahead;
            id = !this.context.strict && !isGenerator && this.matchKeyword('yield') ? this.parseIdentifierName() : this.parseVariableIdentifier();

            if (this.context.strict) {
              if (this.scanner.isRestrictedWord(token.value)) {
                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
              }
            } else {
              if (this.scanner.isRestrictedWord(token.value)) {
                firstRestricted = token;
                message = messages_1.Messages.StrictFunctionName;
              } else if (this.scanner.isStrictModeReservedWord(token.value)) {
                firstRestricted = token;
                message = messages_1.Messages.StrictReservedWord;
              }
            }
          }

          var formalParameters = this.parseFormalParameters(firstRestricted);
          var params = formalParameters.params;
          var stricted = formalParameters.stricted;
          firstRestricted = formalParameters.firstRestricted;

          if (formalParameters.message) {
            message = formalParameters.message;
          }

          var previousStrict = this.context.strict;
          var previousAllowStrictDirective = this.context.allowStrictDirective;
          this.context.allowStrictDirective = formalParameters.simple;
          var body = this.parseFunctionSourceElements();

          if (this.context.strict && firstRestricted) {
            this.throwUnexpectedToken(firstRestricted, message);
          }

          if (this.context.strict && stricted) {
            this.tolerateUnexpectedToken(stricted, message);
          }

          this.context.strict = previousStrict;
          this.context.allowStrictDirective = previousAllowStrictDirective;
          this.context.await = previousAllowAwait;
          this.context.allowYield = previousAllowYield;
          return isAsync ? this.finalize(node, new Node.AsyncFunctionExpression(id, params, body)) : this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));
        }; // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive


        Parser.prototype.parseDirective = function () {
          var token = this.lookahead;
          var node = this.createNode();
          var expr = this.parseExpression();
          var directive = expr.type === syntax_1.Syntax.Literal ? this.getTokenRaw(token).slice(1, -1) : null;
          this.consumeSemicolon();
          return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));
        };

        Parser.prototype.parseDirectivePrologues = function () {
          var firstRestricted = null;
          var body = [];

          while (true) {
            var token = this.lookahead;

            if (token.type !== 8
            /* StringLiteral */
            ) {
              break;
            }

            var statement = this.parseDirective();
            body.push(statement);
            var directive = statement.directive;

            if (typeof directive !== 'string') {
              break;
            }

            if (directive === 'use strict') {
              this.context.strict = true;

              if (firstRestricted) {
                this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);
              }

              if (!this.context.allowStrictDirective) {
                this.tolerateUnexpectedToken(token, messages_1.Messages.IllegalLanguageModeDirective);
              }
            } else {
              if (!firstRestricted && token.octal) {
                firstRestricted = token;
              }
            }
          }

          return body;
        }; // https://tc39.github.io/ecma262/#sec-method-definitions


        Parser.prototype.qualifiedPropertyName = function (token) {
          switch (token.type) {
            case 3
            /* Identifier */
            :
            case 8
            /* StringLiteral */
            :
            case 1
            /* BooleanLiteral */
            :
            case 5
            /* NullLiteral */
            :
            case 6
            /* NumericLiteral */
            :
            case 4
            /* Keyword */
            :
              return true;

            case 7
            /* Punctuator */
            :
              return token.value === '[';

            default:
              break;
          }

          return false;
        };

        Parser.prototype.parseGetterMethod = function () {
          var node = this.createNode();
          var isGenerator = false;
          var previousAllowYield = this.context.allowYield;
          this.context.allowYield = !isGenerator;
          var formalParameters = this.parseFormalParameters();

          if (formalParameters.params.length > 0) {
            this.tolerateError(messages_1.Messages.BadGetterArity);
          }

          var method = this.parsePropertyMethod(formalParameters);
          this.context.allowYield = previousAllowYield;
          return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
        };

        Parser.prototype.parseSetterMethod = function () {
          var node = this.createNode();
          var isGenerator = false;
          var previousAllowYield = this.context.allowYield;
          this.context.allowYield = !isGenerator;
          var formalParameters = this.parseFormalParameters();

          if (formalParameters.params.length !== 1) {
            this.tolerateError(messages_1.Messages.BadSetterArity);
          } else if (formalParameters.params[0] instanceof Node.RestElement) {
            this.tolerateError(messages_1.Messages.BadSetterRestParameter);
          }

          var method = this.parsePropertyMethod(formalParameters);
          this.context.allowYield = previousAllowYield;
          return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
        };

        Parser.prototype.parseGeneratorMethod = function () {
          var node = this.createNode();
          var isGenerator = true;
          var previousAllowYield = this.context.allowYield;
          this.context.allowYield = true;
          var params = this.parseFormalParameters();
          this.context.allowYield = false;
          var method = this.parsePropertyMethod(params);
          this.context.allowYield = previousAllowYield;
          return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
        }; // https://tc39.github.io/ecma262/#sec-generator-function-definitions


        Parser.prototype.isStartOfExpression = function () {
          var start = true;
          var value = this.lookahead.value;

          switch (this.lookahead.type) {
            case 7
            /* Punctuator */
            :
              start = value === '[' || value === '(' || value === '{' || value === '+' || value === '-' || value === '!' || value === '~' || value === '++' || value === '--' || value === '/' || value === '/='; // regular expression literal

              break;

            case 4
            /* Keyword */
            :
              start = value === 'class' || value === 'delete' || value === 'function' || value === 'let' || value === 'new' || value === 'super' || value === 'this' || value === 'typeof' || value === 'void' || value === 'yield';
              break;

            default:
              break;
          }

          return start;
        };

        Parser.prototype.parseYieldExpression = function () {
          var node = this.createNode();
          this.expectKeyword('yield');
          var argument = null;
          var delegate = false;

          if (!this.hasLineTerminator) {
            var previousAllowYield = this.context.allowYield;
            this.context.allowYield = false;
            delegate = this.match('*');

            if (delegate) {
              this.nextToken();
              argument = this.parseAssignmentExpression();
            } else if (this.isStartOfExpression()) {
              argument = this.parseAssignmentExpression();
            }

            this.context.allowYield = previousAllowYield;
          }

          return this.finalize(node, new Node.YieldExpression(argument, delegate));
        }; // https://tc39.github.io/ecma262/#sec-class-definitions


        Parser.prototype.parseClassElement = function (hasConstructor) {
          var token = this.lookahead;
          var node = this.createNode();
          var kind = '';
          var key = null;
          var value = null;
          var computed = false;
          var method = false;
          var isStatic = false;
          var isAsync = false;

          if (this.match('*')) {
            this.nextToken();
          } else {
            computed = this.match('[');
            key = this.parseObjectPropertyKey();
            var id = key;

            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {
              token = this.lookahead;
              isStatic = true;
              computed = this.match('[');

              if (this.match('*')) {
                this.nextToken();
              } else {
                key = this.parseObjectPropertyKey();
              }
            }

            if (token.type === 3
            /* Identifier */
            && !this.hasLineTerminator && token.value === 'async') {
              var punctuator = this.lookahead.value;

              if (punctuator !== ':' && punctuator !== '(' && punctuator !== '*') {
                isAsync = true;
                token = this.lookahead;
                key = this.parseObjectPropertyKey();

                if (token.type === 3
                /* Identifier */
                && token.value === 'constructor') {
                  this.tolerateUnexpectedToken(token, messages_1.Messages.ConstructorIsAsync);
                }
              }
            }
          }

          var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);

          if (token.type === 3
          /* Identifier */
          ) {
            if (token.value === 'get' && lookaheadPropertyKey) {
              kind = 'get';
              computed = this.match('[');
              key = this.parseObjectPropertyKey();
              this.context.allowYield = false;
              value = this.parseGetterMethod();
            } else if (token.value === 'set' && lookaheadPropertyKey) {
              kind = 'set';
              computed = this.match('[');
              key = this.parseObjectPropertyKey();
              value = this.parseSetterMethod();
            }
          } else if (token.type === 7
          /* Punctuator */
          && token.value === '*' && lookaheadPropertyKey) {
            kind = 'init';
            computed = this.match('[');
            key = this.parseObjectPropertyKey();
            value = this.parseGeneratorMethod();
            method = true;
          }

          if (!kind && key && this.match('(')) {
            kind = 'init';
            value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
            method = true;
          }

          if (!kind) {
            this.throwUnexpectedToken(this.lookahead);
          }

          if (kind === 'init') {
            kind = 'method';
          }

          if (!computed) {
            if (isStatic && this.isPropertyKey(key, 'prototype')) {
              this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);
            }

            if (!isStatic && this.isPropertyKey(key, 'constructor')) {
              if (kind !== 'method' || !method || value && value.generator) {
                this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);
              }

              if (hasConstructor.value) {
                this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);
              } else {
                hasConstructor.value = true;
              }

              kind = 'constructor';
            }
          }

          return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));
        };

        Parser.prototype.parseClassElementList = function () {
          var body = [];
          var hasConstructor = {
            value: false
          };
          this.expect('{');

          while (!this.match('}')) {
            if (this.match(';')) {
              this.nextToken();
            } else {
              body.push(this.parseClassElement(hasConstructor));
            }
          }

          this.expect('}');
          return body;
        };

        Parser.prototype.parseClassBody = function () {
          var node = this.createNode();
          var elementList = this.parseClassElementList();
          return this.finalize(node, new Node.ClassBody(elementList));
        };

        Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {
          var node = this.createNode();
          var previousStrict = this.context.strict;
          this.context.strict = true;
          this.expectKeyword('class');
          var id = identifierIsOptional && this.lookahead.type !== 3
          /* Identifier */
          ? null : this.parseVariableIdentifier();
          var superClass = null;

          if (this.matchKeyword('extends')) {
            this.nextToken();
            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
          }

          var classBody = this.parseClassBody();
          this.context.strict = previousStrict;
          return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));
        };

        Parser.prototype.parseClassExpression = function () {
          var node = this.createNode();
          var previousStrict = this.context.strict;
          this.context.strict = true;
          this.expectKeyword('class');
          var id = this.lookahead.type === 3
          /* Identifier */
          ? this.parseVariableIdentifier() : null;
          var superClass = null;

          if (this.matchKeyword('extends')) {
            this.nextToken();
            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
          }

          var classBody = this.parseClassBody();
          this.context.strict = previousStrict;
          return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));
        }; // https://tc39.github.io/ecma262/#sec-scripts
        // https://tc39.github.io/ecma262/#sec-modules


        Parser.prototype.parseModule = function () {
          this.context.strict = true;
          this.context.isModule = true;
          this.scanner.isModule = true;
          var node = this.createNode();
          var body = this.parseDirectivePrologues();

          while (this.lookahead.type !== 2
          /* EOF */
          ) {
            body.push(this.parseStatementListItem());
          }

          return this.finalize(node, new Node.Module(body));
        };

        Parser.prototype.parseScript = function () {
          var node = this.createNode();
          var body = this.parseDirectivePrologues();

          while (this.lookahead.type !== 2
          /* EOF */
          ) {
            body.push(this.parseStatementListItem());
          }

          return this.finalize(node, new Node.Script(body));
        }; // https://tc39.github.io/ecma262/#sec-imports


        Parser.prototype.parseModuleSpecifier = function () {
          var node = this.createNode();

          if (this.lookahead.type !== 8
          /* StringLiteral */
          ) {
            this.throwError(messages_1.Messages.InvalidModuleSpecifier);
          }

          var token = this.nextToken();
          var raw = this.getTokenRaw(token);
          return this.finalize(node, new Node.Literal(token.value, raw));
        }; // import {<foo as bar>} ...;


        Parser.prototype.parseImportSpecifier = function () {
          var node = this.createNode();
          var imported;
          var local;

          if (this.lookahead.type === 3
          /* Identifier */
          ) {
            imported = this.parseVariableIdentifier();
            local = imported;

            if (this.matchContextualKeyword('as')) {
              this.nextToken();
              local = this.parseVariableIdentifier();
            }
          } else {
            imported = this.parseIdentifierName();
            local = imported;

            if (this.matchContextualKeyword('as')) {
              this.nextToken();
              local = this.parseVariableIdentifier();
            } else {
              this.throwUnexpectedToken(this.nextToken());
            }
          }

          return this.finalize(node, new Node.ImportSpecifier(local, imported));
        }; // {foo, bar as bas}


        Parser.prototype.parseNamedImports = function () {
          this.expect('{');
          var specifiers = [];

          while (!this.match('}')) {
            specifiers.push(this.parseImportSpecifier());

            if (!this.match('}')) {
              this.expect(',');
            }
          }

          this.expect('}');
          return specifiers;
        }; // import <foo> ...;


        Parser.prototype.parseImportDefaultSpecifier = function () {
          var node = this.createNode();
          var local = this.parseIdentifierName();
          return this.finalize(node, new Node.ImportDefaultSpecifier(local));
        }; // import <* as foo> ...;


        Parser.prototype.parseImportNamespaceSpecifier = function () {
          var node = this.createNode();
          this.expect('*');

          if (!this.matchContextualKeyword('as')) {
            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);
          }

          this.nextToken();
          var local = this.parseIdentifierName();
          return this.finalize(node, new Node.ImportNamespaceSpecifier(local));
        };

        Parser.prototype.parseImportDeclaration = function () {
          if (this.context.inFunctionBody) {
            this.throwError(messages_1.Messages.IllegalImportDeclaration);
          }

          var node = this.createNode();
          this.expectKeyword('import');
          var src;
          var specifiers = [];

          if (this.lookahead.type === 8
          /* StringLiteral */
          ) {
            // import 'foo';
            src = this.parseModuleSpecifier();
          } else {
            if (this.match('{')) {
              // import {bar}
              specifiers = specifiers.concat(this.parseNamedImports());
            } else if (this.match('*')) {
              // import * as foo
              specifiers.push(this.parseImportNamespaceSpecifier());
            } else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {
              // import foo
              specifiers.push(this.parseImportDefaultSpecifier());

              if (this.match(',')) {
                this.nextToken();

                if (this.match('*')) {
                  // import foo, * as foo
                  specifiers.push(this.parseImportNamespaceSpecifier());
                } else if (this.match('{')) {
                  // import foo, {bar}
                  specifiers = specifiers.concat(this.parseNamedImports());
                } else {
                  this.throwUnexpectedToken(this.lookahead);
                }
              }
            } else {
              this.throwUnexpectedToken(this.nextToken());
            }

            if (!this.matchContextualKeyword('from')) {
              var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
              this.throwError(message, this.lookahead.value);
            }

            this.nextToken();
            src = this.parseModuleSpecifier();
          }

          this.consumeSemicolon();
          return this.finalize(node, new Node.ImportDeclaration(specifiers, src));
        }; // https://tc39.github.io/ecma262/#sec-exports


        Parser.prototype.parseExportSpecifier = function () {
          var node = this.createNode();
          var local = this.parseIdentifierName();
          var exported = local;

          if (this.matchContextualKeyword('as')) {
            this.nextToken();
            exported = this.parseIdentifierName();
          }

          return this.finalize(node, new Node.ExportSpecifier(local, exported));
        };

        Parser.prototype.parseExportDeclaration = function () {
          if (this.context.inFunctionBody) {
            this.throwError(messages_1.Messages.IllegalExportDeclaration);
          }

          var node = this.createNode();
          this.expectKeyword('export');
          var exportDeclaration;

          if (this.matchKeyword('default')) {
            // export default ...
            this.nextToken();

            if (this.matchKeyword('function')) {
              // export default function foo () {}
              // export default function () {}
              var declaration = this.parseFunctionDeclaration(true);
              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
            } else if (this.matchKeyword('class')) {
              // export default class foo {}
              var declaration = this.parseClassDeclaration(true);
              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
            } else if (this.matchContextualKeyword('async')) {
              // export default async function f () {}
              // export default async function () {}
              // export default async x => x
              var declaration = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();
              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
            } else {
              if (this.matchContextualKeyword('from')) {
                this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);
              } // export default {};
              // export default [];
              // export default (1 + 2);


              var declaration = this.match('{') ? this.parseObjectInitializer() : this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();
              this.consumeSemicolon();
              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
            }
          } else if (this.match('*')) {
            // export * from 'foo';
            this.nextToken();

            if (!this.matchContextualKeyword('from')) {
              var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
              this.throwError(message, this.lookahead.value);
            }

            this.nextToken();
            var src = this.parseModuleSpecifier();
            this.consumeSemicolon();
            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));
          } else if (this.lookahead.type === 4
          /* Keyword */
          ) {
            // export var f = 1;
            var declaration = void 0;

            switch (this.lookahead.value) {
              case 'let':
              case 'const':
                declaration = this.parseLexicalDeclaration({
                  inFor: false
                });
                break;

              case 'var':
              case 'class':
              case 'function':
                declaration = this.parseStatementListItem();
                break;

              default:
                this.throwUnexpectedToken(this.lookahead);
            }

            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
          } else if (this.matchAsyncFunction()) {
            var declaration = this.parseFunctionDeclaration();
            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
          } else {
            var specifiers = [];
            var source = null;
            var isExportFromIdentifier = false;
            this.expect('{');

            while (!this.match('}')) {
              isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');
              specifiers.push(this.parseExportSpecifier());

              if (!this.match('}')) {
                this.expect(',');
              }
            }

            this.expect('}');

            if (this.matchContextualKeyword('from')) {
              // export {default} from 'foo';
              // export {foo} from 'foo';
              this.nextToken();
              source = this.parseModuleSpecifier();
              this.consumeSemicolon();
            } else if (isExportFromIdentifier) {
              // export {default}; // missing fromClause
              var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
              this.throwError(message, this.lookahead.value);
            } else {
              // export {foo};
              this.consumeSemicolon();
            }

            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));
          }

          return exportDeclaration;
        };

        return Parser;
      }();

      exports.Parser = Parser;
      /***/
    },
    /* 9 */

    /***/
    function (module, exports) {
      "use strict"; // Ensure the condition is true, otherwise throw an error.
      // This is only to have a better contract semantic, i.e. another safety net
      // to catch a logic error. The condition shall be fulfilled in normal case.
      // Do NOT use this to enforce a certain condition on any user input.

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      function assert(condition, message) {
        /* istanbul ignore if */
        if (!condition) {
          throw new Error('ASSERT: ' + message);
        }
      }

      exports.assert = assert;
      /***/
    },
    /* 10 */

    /***/
    function (module, exports) {
      "use strict";
      /* tslint:disable:max-classes-per-file */

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var ErrorHandler = function () {
        function ErrorHandler() {
          this.errors = [];
          this.tolerant = false;
        }

        ErrorHandler.prototype.recordError = function (error) {
          this.errors.push(error);
        };

        ErrorHandler.prototype.tolerate = function (error) {
          if (this.tolerant) {
            this.recordError(error);
          } else {
            throw error;
          }
        };

        ErrorHandler.prototype.constructError = function (msg, column) {
          var error = new Error(msg);

          try {
            throw error;
          } catch (base) {
            /* istanbul ignore else */
            if (Object.create && Object.defineProperty) {
              error = Object.create(base);
              Object.defineProperty(error, 'column', {
                value: column
              });
            }
          }
          /* istanbul ignore next */


          return error;
        };

        ErrorHandler.prototype.createError = function (index, line, col, description) {
          var msg = 'Line ' + line + ': ' + description;
          var error = this.constructError(msg, col);
          error.index = index;
          error.lineNumber = line;
          error.description = description;
          return error;
        };

        ErrorHandler.prototype.throwError = function (index, line, col, description) {
          throw this.createError(index, line, col, description);
        };

        ErrorHandler.prototype.tolerateError = function (index, line, col, description) {
          var error = this.createError(index, line, col, description);

          if (this.tolerant) {
            this.recordError(error);
          } else {
            throw error;
          }
        };

        return ErrorHandler;
      }();

      exports.ErrorHandler = ErrorHandler;
      /***/
    },
    /* 11 */

    /***/
    function (module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      }); // Error messages should be identical to V8.

      exports.Messages = {
        BadGetterArity: 'Getter must not have any formal parameters',
        BadSetterArity: 'Setter must have exactly one formal parameter',
        BadSetterRestParameter: 'Setter function argument must not be a rest parameter',
        ConstructorIsAsync: 'Class constructor may not be an async method',
        ConstructorSpecialMethod: 'Class constructor may not be an accessor',
        DeclarationMissingInitializer: 'Missing initializer in %0 declaration',
        DefaultRestParameter: 'Unexpected token =',
        DuplicateBinding: 'Duplicate binding %0',
        DuplicateConstructor: 'A class may only have one constructor',
        DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',
        ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer',
        GeneratorInLegacyContext: 'Generator declarations are not allowed in legacy contexts',
        IllegalBreak: 'Illegal break statement',
        IllegalContinue: 'Illegal continue statement',
        IllegalExportDeclaration: 'Unexpected token',
        IllegalImportDeclaration: 'Unexpected token',
        IllegalLanguageModeDirective: 'Illegal \'use strict\' directive in function with non-simple parameter list',
        IllegalReturn: 'Illegal return statement',
        InvalidEscapedReservedWord: 'Keyword must not contain escaped characters',
        InvalidHexEscapeSequence: 'Invalid hexadecimal escape sequence',
        InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
        InvalidLHSInForIn: 'Invalid left-hand side in for-in',
        InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',
        InvalidModuleSpecifier: 'Unexpected token',
        InvalidRegExp: 'Invalid regular expression',
        LetInLexicalBinding: 'let is disallowed as a lexically bound name',
        MissingFromClause: 'Unexpected token',
        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
        NewlineAfterThrow: 'Illegal newline after throw',
        NoAsAfterImportNamespace: 'Unexpected token',
        NoCatchOrFinally: 'Missing catch or finally after try',
        ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',
        Redeclaration: '%0 \'%1\' has already been declared',
        StaticPrototype: 'Classes may not have static property named prototype',
        StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
        StrictDelete: 'Delete of an unqualified identifier in strict mode.',
        StrictFunction: 'In strict mode code, functions can only be declared at top level or inside a block',
        StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
        StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
        StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
        StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
        StrictModeWith: 'Strict mode code may not include a with statement',
        StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
        StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
        StrictReservedWord: 'Use of future reserved word in strict mode',
        StrictVarName: 'Variable name may not be eval or arguments in strict mode',
        TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',
        UnexpectedEOS: 'Unexpected end of input',
        UnexpectedIdentifier: 'Unexpected identifier',
        UnexpectedNumber: 'Unexpected number',
        UnexpectedReserved: 'Unexpected reserved word',
        UnexpectedString: 'Unexpected string',
        UnexpectedTemplate: 'Unexpected quasi %0',
        UnexpectedToken: 'Unexpected token %0',
        UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',
        UnknownLabel: 'Undefined label \'%0\'',
        UnterminatedRegExp: 'Invalid regular expression: missing /'
      };
      /***/
    },
    /* 12 */

    /***/
    function (module, exports, __nested_webpack_require_228499__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var assert_1 = __nested_webpack_require_228499__(9);

      var character_1 = __nested_webpack_require_228499__(4);

      var messages_1 = __nested_webpack_require_228499__(11);

      function hexValue(ch) {
        return '0123456789abcdef'.indexOf(ch.toLowerCase());
      }

      function octalValue(ch) {
        return '01234567'.indexOf(ch);
      }

      var Scanner = function () {
        function Scanner(code, handler) {
          this.source = code;
          this.errorHandler = handler;
          this.trackComment = false;
          this.isModule = false;
          this.length = code.length;
          this.index = 0;
          this.lineNumber = code.length > 0 ? 1 : 0;
          this.lineStart = 0;
          this.curlyStack = [];
        }

        Scanner.prototype.saveState = function () {
          return {
            index: this.index,
            lineNumber: this.lineNumber,
            lineStart: this.lineStart
          };
        };

        Scanner.prototype.restoreState = function (state) {
          this.index = state.index;
          this.lineNumber = state.lineNumber;
          this.lineStart = state.lineStart;
        };

        Scanner.prototype.eof = function () {
          return this.index >= this.length;
        };

        Scanner.prototype.throwUnexpectedToken = function (message) {
          if (message === void 0) {
            message = messages_1.Messages.UnexpectedTokenIllegal;
          }

          return this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
        };

        Scanner.prototype.tolerateUnexpectedToken = function (message) {
          if (message === void 0) {
            message = messages_1.Messages.UnexpectedTokenIllegal;
          }

          this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
        }; // https://tc39.github.io/ecma262/#sec-comments


        Scanner.prototype.skipSingleLineComment = function (offset) {
          var comments = [];
          var start, loc;

          if (this.trackComment) {
            comments = [];
            start = this.index - offset;
            loc = {
              start: {
                line: this.lineNumber,
                column: this.index - this.lineStart - offset
              },
              end: {}
            };
          }

          while (!this.eof()) {
            var ch = this.source.charCodeAt(this.index);
            ++this.index;

            if (character_1.Character.isLineTerminator(ch)) {
              if (this.trackComment) {
                loc.end = {
                  line: this.lineNumber,
                  column: this.index - this.lineStart - 1
                };
                var entry = {
                  multiLine: false,
                  slice: [start + offset, this.index - 1],
                  range: [start, this.index - 1],
                  loc: loc
                };
                comments.push(entry);
              }

              if (ch === 13 && this.source.charCodeAt(this.index) === 10) {
                ++this.index;
              }

              ++this.lineNumber;
              this.lineStart = this.index;
              return comments;
            }
          }

          if (this.trackComment) {
            loc.end = {
              line: this.lineNumber,
              column: this.index - this.lineStart
            };
            var entry = {
              multiLine: false,
              slice: [start + offset, this.index],
              range: [start, this.index],
              loc: loc
            };
            comments.push(entry);
          }

          return comments;
        };

        Scanner.prototype.skipMultiLineComment = function () {
          var comments = [];
          var start, loc;

          if (this.trackComment) {
            comments = [];
            start = this.index - 2;
            loc = {
              start: {
                line: this.lineNumber,
                column: this.index - this.lineStart - 2
              },
              end: {}
            };
          }

          while (!this.eof()) {
            var ch = this.source.charCodeAt(this.index);

            if (character_1.Character.isLineTerminator(ch)) {
              if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {
                ++this.index;
              }

              ++this.lineNumber;
              ++this.index;
              this.lineStart = this.index;
            } else if (ch === 0x2A) {
              // Block comment ends with '*/'.
              if (this.source.charCodeAt(this.index + 1) === 0x2F) {
                this.index += 2;

                if (this.trackComment) {
                  loc.end = {
                    line: this.lineNumber,
                    column: this.index - this.lineStart
                  };
                  var entry = {
                    multiLine: true,
                    slice: [start + 2, this.index - 2],
                    range: [start, this.index],
                    loc: loc
                  };
                  comments.push(entry);
                }

                return comments;
              }

              ++this.index;
            } else {
              ++this.index;
            }
          } // Ran off the end of the file - the whole thing is a comment


          if (this.trackComment) {
            loc.end = {
              line: this.lineNumber,
              column: this.index - this.lineStart
            };
            var entry = {
              multiLine: true,
              slice: [start + 2, this.index],
              range: [start, this.index],
              loc: loc
            };
            comments.push(entry);
          }

          this.tolerateUnexpectedToken();
          return comments;
        };

        Scanner.prototype.scanComments = function () {
          var comments;

          if (this.trackComment) {
            comments = [];
          }

          var start = this.index === 0;

          while (!this.eof()) {
            var ch = this.source.charCodeAt(this.index);

            if (character_1.Character.isWhiteSpace(ch)) {
              ++this.index;
            } else if (character_1.Character.isLineTerminator(ch)) {
              ++this.index;

              if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {
                ++this.index;
              }

              ++this.lineNumber;
              this.lineStart = this.index;
              start = true;
            } else if (ch === 0x2F) {
              ch = this.source.charCodeAt(this.index + 1);

              if (ch === 0x2F) {
                this.index += 2;
                var comment = this.skipSingleLineComment(2);

                if (this.trackComment) {
                  comments = comments.concat(comment);
                }

                start = true;
              } else if (ch === 0x2A) {
                this.index += 2;
                var comment = this.skipMultiLineComment();

                if (this.trackComment) {
                  comments = comments.concat(comment);
                }
              } else {
                break;
              }
            } else if (start && ch === 0x2D) {
              // U+003E is '>'
              if (this.source.charCodeAt(this.index + 1) === 0x2D && this.source.charCodeAt(this.index + 2) === 0x3E) {
                // '-->' is a single-line comment
                this.index += 3;
                var comment = this.skipSingleLineComment(3);

                if (this.trackComment) {
                  comments = comments.concat(comment);
                }
              } else {
                break;
              }
            } else if (ch === 0x3C && !this.isModule) {
              if (this.source.slice(this.index + 1, this.index + 4) === '!--') {
                this.index += 4; // `<!--`

                var comment = this.skipSingleLineComment(4);

                if (this.trackComment) {
                  comments = comments.concat(comment);
                }
              } else {
                break;
              }
            } else {
              break;
            }
          }

          return comments;
        }; // https://tc39.github.io/ecma262/#sec-future-reserved-words


        Scanner.prototype.isFutureReservedWord = function (id) {
          switch (id) {
            case 'enum':
            case 'export':
            case 'import':
            case 'super':
              return true;

            default:
              return false;
          }
        };

        Scanner.prototype.isStrictModeReservedWord = function (id) {
          switch (id) {
            case 'implements':
            case 'interface':
            case 'package':
            case 'private':
            case 'protected':
            case 'public':
            case 'static':
            case 'yield':
            case 'let':
              return true;

            default:
              return false;
          }
        };

        Scanner.prototype.isRestrictedWord = function (id) {
          return id === 'eval' || id === 'arguments';
        }; // https://tc39.github.io/ecma262/#sec-keywords


        Scanner.prototype.isKeyword = function (id) {
          switch (id.length) {
            case 2:
              return id === 'if' || id === 'in' || id === 'do';

            case 3:
              return id === 'var' || id === 'for' || id === 'new' || id === 'try' || id === 'let';

            case 4:
              return id === 'this' || id === 'else' || id === 'case' || id === 'void' || id === 'with' || id === 'enum';

            case 5:
              return id === 'while' || id === 'break' || id === 'catch' || id === 'throw' || id === 'const' || id === 'yield' || id === 'class' || id === 'super';

            case 6:
              return id === 'return' || id === 'typeof' || id === 'delete' || id === 'switch' || id === 'export' || id === 'import';

            case 7:
              return id === 'default' || id === 'finally' || id === 'extends';

            case 8:
              return id === 'function' || id === 'continue' || id === 'debugger';

            case 10:
              return id === 'instanceof';

            default:
              return false;
          }
        };

        Scanner.prototype.codePointAt = function (i) {
          var cp = this.source.charCodeAt(i);

          if (cp >= 0xD800 && cp <= 0xDBFF) {
            var second = this.source.charCodeAt(i + 1);

            if (second >= 0xDC00 && second <= 0xDFFF) {
              var first = cp;
              cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
            }
          }

          return cp;
        };

        Scanner.prototype.scanHexEscape = function (prefix) {
          var len = prefix === 'u' ? 4 : 2;
          var code = 0;

          for (var i = 0; i < len; ++i) {
            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
              code = code * 16 + hexValue(this.source[this.index++]);
            } else {
              return null;
            }
          }

          return String.fromCharCode(code);
        };

        Scanner.prototype.scanUnicodeCodePointEscape = function () {
          var ch = this.source[this.index];
          var code = 0; // At least, one hex digit is required.

          if (ch === '}') {
            this.throwUnexpectedToken();
          }

          while (!this.eof()) {
            ch = this.source[this.index++];

            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {
              break;
            }

            code = code * 16 + hexValue(ch);
          }

          if (code > 0x10FFFF || ch !== '}') {
            this.throwUnexpectedToken();
          }

          return character_1.Character.fromCodePoint(code);
        };

        Scanner.prototype.getIdentifier = function () {
          var start = this.index++;

          while (!this.eof()) {
            var ch = this.source.charCodeAt(this.index);

            if (ch === 0x5C) {
              // Blackslash (U+005C) marks Unicode escape sequence.
              this.index = start;
              return this.getComplexIdentifier();
            } else if (ch >= 0xD800 && ch < 0xDFFF) {
              // Need to handle surrogate pairs.
              this.index = start;
              return this.getComplexIdentifier();
            }

            if (character_1.Character.isIdentifierPart(ch)) {
              ++this.index;
            } else {
              break;
            }
          }

          return this.source.slice(start, this.index);
        };

        Scanner.prototype.getComplexIdentifier = function () {
          var cp = this.codePointAt(this.index);
          var id = character_1.Character.fromCodePoint(cp);
          this.index += id.length; // '\u' (U+005C, U+0075) denotes an escaped character.

          var ch;

          if (cp === 0x5C) {
            if (this.source.charCodeAt(this.index) !== 0x75) {
              this.throwUnexpectedToken();
            }

            ++this.index;

            if (this.source[this.index] === '{') {
              ++this.index;
              ch = this.scanUnicodeCodePointEscape();
            } else {
              ch = this.scanHexEscape('u');

              if (ch === null || ch === '\\' || !character_1.Character.isIdentifierStart(ch.charCodeAt(0))) {
                this.throwUnexpectedToken();
              }
            }

            id = ch;
          }

          while (!this.eof()) {
            cp = this.codePointAt(this.index);

            if (!character_1.Character.isIdentifierPart(cp)) {
              break;
            }

            ch = character_1.Character.fromCodePoint(cp);
            id += ch;
            this.index += ch.length; // '\u' (U+005C, U+0075) denotes an escaped character.

            if (cp === 0x5C) {
              id = id.substr(0, id.length - 1);

              if (this.source.charCodeAt(this.index) !== 0x75) {
                this.throwUnexpectedToken();
              }

              ++this.index;

              if (this.source[this.index] === '{') {
                ++this.index;
                ch = this.scanUnicodeCodePointEscape();
              } else {
                ch = this.scanHexEscape('u');

                if (ch === null || ch === '\\' || !character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
                  this.throwUnexpectedToken();
                }
              }

              id += ch;
            }
          }

          return id;
        };

        Scanner.prototype.octalToDecimal = function (ch) {
          // \0 is not octal escape sequence
          var octal = ch !== '0';
          var code = octalValue(ch);

          if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
            octal = true;
            code = code * 8 + octalValue(this.source[this.index++]); // 3 digits are only allowed when string starts
            // with 0, 1, 2, 3

            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
              code = code * 8 + octalValue(this.source[this.index++]);
            }
          }

          return {
            code: code,
            octal: octal
          };
        }; // https://tc39.github.io/ecma262/#sec-names-and-keywords


        Scanner.prototype.scanIdentifier = function () {
          var type;
          var start = this.index; // Backslash (U+005C) starts an escaped character.

          var id = this.source.charCodeAt(start) === 0x5C ? this.getComplexIdentifier() : this.getIdentifier(); // There is no keyword or literal with only one character.
          // Thus, it must be an identifier.

          if (id.length === 1) {
            type = 3
            /* Identifier */
            ;
          } else if (this.isKeyword(id)) {
            type = 4
            /* Keyword */
            ;
          } else if (id === 'null') {
            type = 5
            /* NullLiteral */
            ;
          } else if (id === 'true' || id === 'false') {
            type = 1
            /* BooleanLiteral */
            ;
          } else {
            type = 3
            /* Identifier */
            ;
          }

          if (type !== 3
          /* Identifier */
          && start + id.length !== this.index) {
            var restore = this.index;
            this.index = start;
            this.tolerateUnexpectedToken(messages_1.Messages.InvalidEscapedReservedWord);
            this.index = restore;
          }

          return {
            type: type,
            value: id,
            lineNumber: this.lineNumber,
            lineStart: this.lineStart,
            start: start,
            end: this.index
          };
        }; // https://tc39.github.io/ecma262/#sec-punctuators


        Scanner.prototype.scanPunctuator = function () {
          var start = this.index; // Check for most common single-character punctuators.

          var str = this.source[this.index];

          switch (str) {
            case '(':
            case '{':
              if (str === '{') {
                this.curlyStack.push('{');
              }

              ++this.index;
              break;

            case '.':
              ++this.index;

              if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {
                // Spread operator: ...
                this.index += 2;
                str = '...';
              }

              break;

            case '}':
              ++this.index;
              this.curlyStack.pop();
              break;

            case ')':
            case ';':
            case ',':
            case '[':
            case ']':
            case ':':
            case '?':
            case '~':
              ++this.index;
              break;

            default:
              // 4-character punctuator.
              str = this.source.substr(this.index, 4);

              if (str === '>>>=') {
                this.index += 4;
              } else {
                // 3-character punctuators.
                str = str.substr(0, 3);

                if (str === '===' || str === '!==' || str === '>>>' || str === '<<=' || str === '>>=' || str === '**=') {
                  this.index += 3;
                } else {
                  // 2-character punctuators.
                  str = str.substr(0, 2);

                  if (str === '&&' || str === '||' || str === '==' || str === '!=' || str === '+=' || str === '-=' || str === '*=' || str === '/=' || str === '++' || str === '--' || str === '<<' || str === '>>' || str === '&=' || str === '|=' || str === '^=' || str === '%=' || str === '<=' || str === '>=' || str === '=>' || str === '**') {
                    this.index += 2;
                  } else {
                    // 1-character punctuators.
                    str = this.source[this.index];

                    if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {
                      ++this.index;
                    }
                  }
                }
              }

          }

          if (this.index === start) {
            this.throwUnexpectedToken();
          }

          return {
            type: 7
            /* Punctuator */
            ,
            value: str,
            lineNumber: this.lineNumber,
            lineStart: this.lineStart,
            start: start,
            end: this.index
          };
        }; // https://tc39.github.io/ecma262/#sec-literals-numeric-literals


        Scanner.prototype.scanHexLiteral = function (start) {
          var num = '';

          while (!this.eof()) {
            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
              break;
            }

            num += this.source[this.index++];
          }

          if (num.length === 0) {
            this.throwUnexpectedToken();
          }

          if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
            this.throwUnexpectedToken();
          }

          return {
            type: 6
            /* NumericLiteral */
            ,
            value: parseInt('0x' + num, 16),
            lineNumber: this.lineNumber,
            lineStart: this.lineStart,
            start: start,
            end: this.index
          };
        };

        Scanner.prototype.scanBinaryLiteral = function (start) {
          var num = '';
          var ch;

          while (!this.eof()) {
            ch = this.source[this.index];

            if (ch !== '0' && ch !== '1') {
              break;
            }

            num += this.source[this.index++];
          }

          if (num.length === 0) {
            // only 0b or 0B
            this.throwUnexpectedToken();
          }

          if (!this.eof()) {
            ch = this.source.charCodeAt(this.index);
            /* istanbul ignore else */

            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {
              this.throwUnexpectedToken();
            }
          }

          return {
            type: 6
            /* NumericLiteral */
            ,
            value: parseInt(num, 2),
            lineNumber: this.lineNumber,
            lineStart: this.lineStart,
            start: start,
            end: this.index
          };
        };

        Scanner.prototype.scanOctalLiteral = function (prefix, start) {
          var num = '';
          var octal = false;

          if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {
            octal = true;
            num = '0' + this.source[this.index++];
          } else {
            ++this.index;
          }

          while (!this.eof()) {
            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
              break;
            }

            num += this.source[this.index++];
          }

          if (!octal && num.length === 0) {
            // only 0o or 0O
            this.throwUnexpectedToken();
          }

          if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
            this.throwUnexpectedToken();
          }

          return {
            type: 6
            /* NumericLiteral */
            ,
            value: parseInt(num, 8),
            octal: octal,
            lineNumber: this.lineNumber,
            lineStart: this.lineStart,
            start: start,
            end: this.index
          };
        };

        Scanner.prototype.isImplicitOctalLiteral = function () {
          // Implicit octal, unless there is a non-octal digit.
          // (Annex B.1.1 on Numeric Literals)
          for (var i = this.index + 1; i < this.length; ++i) {
            var ch = this.source[i];

            if (ch === '8' || ch === '9') {
              return false;
            }

            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
              return true;
            }
          }

          return true;
        };

        Scanner.prototype.scanNumericLiteral = function () {
          var start = this.index;
          var ch = this.source[start];
          assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || ch === '.', 'Numeric literal must start with a decimal digit or a decimal point');
          var num = '';

          if (ch !== '.') {
            num = this.source[this.index++];
            ch = this.source[this.index]; // Hex number starts with '0x'.
            // Octal number starts with '0'.
            // Octal number in ES6 starts with '0o'.
            // Binary number in ES6 starts with '0b'.

            if (num === '0') {
              if (ch === 'x' || ch === 'X') {
                ++this.index;
                return this.scanHexLiteral(start);
              }

              if (ch === 'b' || ch === 'B') {
                ++this.index;
                return this.scanBinaryLiteral(start);
              }

              if (ch === 'o' || ch === 'O') {
                return this.scanOctalLiteral(ch, start);
              }

              if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
                if (this.isImplicitOctalLiteral()) {
                  return this.scanOctalLiteral(ch, start);
                }
              }
            }

            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
              num += this.source[this.index++];
            }

            ch = this.source[this.index];
          }

          if (ch === '.') {
            num += this.source[this.index++];

            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
              num += this.source[this.index++];
            }

            ch = this.source[this.index];
          }

          if (ch === 'e' || ch === 'E') {
            num += this.source[this.index++];
            ch = this.source[this.index];

            if (ch === '+' || ch === '-') {
              num += this.source[this.index++];
            }

            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
              while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
                num += this.source[this.index++];
              }
            } else {
              this.throwUnexpectedToken();
            }
          }

          if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
            this.throwUnexpectedToken();
          }

          return {
            type: 6
            /* NumericLiteral */
            ,
            value: parseFloat(num),
            lineNumber: this.lineNumber,
            lineStart: this.lineStart,
            start: start,
            end: this.index
          };
        }; // https://tc39.github.io/ecma262/#sec-literals-string-literals


        Scanner.prototype.scanStringLiteral = function () {
          var start = this.index;
          var quote = this.source[start];
          assert_1.assert(quote === '\'' || quote === '"', 'String literal must starts with a quote');
          ++this.index;
          var octal = false;
          var str = '';

          while (!this.eof()) {
            var ch = this.source[this.index++];

            if (ch === quote) {
              quote = '';
              break;
            } else if (ch === '\\') {
              ch = this.source[this.index++];

              if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                switch (ch) {
                  case 'u':
                    if (this.source[this.index] === '{') {
                      ++this.index;
                      str += this.scanUnicodeCodePointEscape();
                    } else {
                      var unescaped_1 = this.scanHexEscape(ch);

                      if (unescaped_1 === null) {
                        this.throwUnexpectedToken();
                      }

                      str += unescaped_1;
                    }

                    break;

                  case 'x':
                    var unescaped = this.scanHexEscape(ch);

                    if (unescaped === null) {
                      this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
                    }

                    str += unescaped;
                    break;

                  case 'n':
                    str += '\n';
                    break;

                  case 'r':
                    str += '\r';
                    break;

                  case 't':
                    str += '\t';
                    break;

                  case 'b':
                    str += '\b';
                    break;

                  case 'f':
                    str += '\f';
                    break;

                  case 'v':
                    str += '\x0B';
                    break;

                  case '8':
                  case '9':
                    str += ch;
                    this.tolerateUnexpectedToken();
                    break;

                  default:
                    if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
                      var octToDec = this.octalToDecimal(ch);
                      octal = octToDec.octal || octal;
                      str += String.fromCharCode(octToDec.code);
                    } else {
                      str += ch;
                    }

                    break;
                }
              } else {
                ++this.lineNumber;

                if (ch === '\r' && this.source[this.index] === '\n') {
                  ++this.index;
                }

                this.lineStart = this.index;
              }
            } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
              break;
            } else {
              str += ch;
            }
          }

          if (quote !== '') {
            this.index = start;
            this.throwUnexpectedToken();
          }

          return {
            type: 8
            /* StringLiteral */
            ,
            value: str,
            octal: octal,
            lineNumber: this.lineNumber,
            lineStart: this.lineStart,
            start: start,
            end: this.index
          };
        }; // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components


        Scanner.prototype.scanTemplate = function () {
          var cooked = '';
          var terminated = false;
          var start = this.index;
          var head = this.source[start] === '`';
          var tail = false;
          var rawOffset = 2;
          ++this.index;

          while (!this.eof()) {
            var ch = this.source[this.index++];

            if (ch === '`') {
              rawOffset = 1;
              tail = true;
              terminated = true;
              break;
            } else if (ch === '$') {
              if (this.source[this.index] === '{') {
                this.curlyStack.push('${');
                ++this.index;
                terminated = true;
                break;
              }

              cooked += ch;
            } else if (ch === '\\') {
              ch = this.source[this.index++];

              if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                switch (ch) {
                  case 'n':
                    cooked += '\n';
                    break;

                  case 'r':
                    cooked += '\r';
                    break;

                  case 't':
                    cooked += '\t';
                    break;

                  case 'u':
                    if (this.source[this.index] === '{') {
                      ++this.index;
                      cooked += this.scanUnicodeCodePointEscape();
                    } else {
                      var restore = this.index;
                      var unescaped_2 = this.scanHexEscape(ch);

                      if (unescaped_2 !== null) {
                        cooked += unescaped_2;
                      } else {
                        this.index = restore;
                        cooked += ch;
                      }
                    }

                    break;

                  case 'x':
                    var unescaped = this.scanHexEscape(ch);

                    if (unescaped === null) {
                      this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
                    }

                    cooked += unescaped;
                    break;

                  case 'b':
                    cooked += '\b';
                    break;

                  case 'f':
                    cooked += '\f';
                    break;

                  case 'v':
                    cooked += '\v';
                    break;

                  default:
                    if (ch === '0') {
                      if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
                        // Illegal: \01 \02 and so on
                        this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
                      }

                      cooked += '\0';
                    } else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
                      // Illegal: \1 \2
                      this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
                    } else {
                      cooked += ch;
                    }

                    break;
                }
              } else {
                ++this.lineNumber;

                if (ch === '\r' && this.source[this.index] === '\n') {
                  ++this.index;
                }

                this.lineStart = this.index;
              }
            } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
              ++this.lineNumber;

              if (ch === '\r' && this.source[this.index] === '\n') {
                ++this.index;
              }

              this.lineStart = this.index;
              cooked += '\n';
            } else {
              cooked += ch;
            }
          }

          if (!terminated) {
            this.throwUnexpectedToken();
          }

          if (!head) {
            this.curlyStack.pop();
          }

          return {
            type: 10
            /* Template */
            ,
            value: this.source.slice(start + 1, this.index - rawOffset),
            cooked: cooked,
            head: head,
            tail: tail,
            lineNumber: this.lineNumber,
            lineStart: this.lineStart,
            start: start,
            end: this.index
          };
        }; // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals


        Scanner.prototype.testRegExp = function (pattern, flags) {
          // The BMP character to use as a replacement for astral symbols when
          // translating an ES6 "u"-flagged pattern to an ES5-compatible
          // approximation.
          // Note: replacing with '\uFFFF' enables false positives in unlikely
          // scenarios. For example, `[\u{1044f}-\u{10440}]` is an invalid
          // pattern that would not be detected by this substitution.
          var astralSubstitute = '\uFFFF';
          var tmp = pattern;
          var self = this;

          if (flags.indexOf('u') >= 0) {
            tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {
              var codePoint = parseInt($1 || $2, 16);

              if (codePoint > 0x10FFFF) {
                self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
              }

              if (codePoint <= 0xFFFF) {
                return String.fromCharCode(codePoint);
              }

              return astralSubstitute;
            }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, astralSubstitute);
          } // First, detect invalid regular expressions.


          try {
            RegExp(tmp);
          } catch (e) {
            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
          } // Return a regular expression object for this pattern-flag pair, or
          // `null` in case the current environment doesn't support the flags it
          // uses.


          try {
            return new RegExp(pattern, flags);
          } catch (exception) {
            /* istanbul ignore next */
            return null;
          }
        };

        Scanner.prototype.scanRegExpBody = function () {
          var ch = this.source[this.index];
          assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');
          var str = this.source[this.index++];
          var classMarker = false;
          var terminated = false;

          while (!this.eof()) {
            ch = this.source[this.index++];
            str += ch;

            if (ch === '\\') {
              ch = this.source[this.index++]; // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals

              if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
              }

              str += ch;
            } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
              this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
            } else if (classMarker) {
              if (ch === ']') {
                classMarker = false;
              }
            } else {
              if (ch === '/') {
                terminated = true;
                break;
              } else if (ch === '[') {
                classMarker = true;
              }
            }
          }

          if (!terminated) {
            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
          } // Exclude leading and trailing slash.


          return str.substr(1, str.length - 2);
        };

        Scanner.prototype.scanRegExpFlags = function () {
          var str = '';
          var flags = '';

          while (!this.eof()) {
            var ch = this.source[this.index];

            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
              break;
            }

            ++this.index;

            if (ch === '\\' && !this.eof()) {
              ch = this.source[this.index];

              if (ch === 'u') {
                ++this.index;
                var restore = this.index;
                var char = this.scanHexEscape('u');

                if (char !== null) {
                  flags += char;

                  for (str += '\\u'; restore < this.index; ++restore) {
                    str += this.source[restore];
                  }
                } else {
                  this.index = restore;
                  flags += 'u';
                  str += '\\u';
                }

                this.tolerateUnexpectedToken();
              } else {
                str += '\\';
                this.tolerateUnexpectedToken();
              }
            } else {
              flags += ch;
              str += ch;
            }
          }

          return flags;
        };

        Scanner.prototype.scanRegExp = function () {
          var start = this.index;
          var pattern = this.scanRegExpBody();
          var flags = this.scanRegExpFlags();
          var value = this.testRegExp(pattern, flags);
          return {
            type: 9
            /* RegularExpression */
            ,
            value: '',
            pattern: pattern,
            flags: flags,
            regex: value,
            lineNumber: this.lineNumber,
            lineStart: this.lineStart,
            start: start,
            end: this.index
          };
        };

        Scanner.prototype.lex = function () {
          if (this.eof()) {
            return {
              type: 2
              /* EOF */
              ,
              value: '',
              lineNumber: this.lineNumber,
              lineStart: this.lineStart,
              start: this.index,
              end: this.index
            };
          }

          var cp = this.source.charCodeAt(this.index);

          if (character_1.Character.isIdentifierStart(cp)) {
            return this.scanIdentifier();
          } // Very common: ( and ) and ;


          if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {
            return this.scanPunctuator();
          } // String literal starts with single quote (U+0027) or double quote (U+0022).


          if (cp === 0x27 || cp === 0x22) {
            return this.scanStringLiteral();
          } // Dot (.) U+002E can also start a floating-point number, hence the need
          // to check the next character.


          if (cp === 0x2E) {
            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {
              return this.scanNumericLiteral();
            }

            return this.scanPunctuator();
          }

          if (character_1.Character.isDecimalDigit(cp)) {
            return this.scanNumericLiteral();
          } // Template literals start with ` (U+0060) for template head
          // or } (U+007D) for template middle or template tail.


          if (cp === 0x60 || cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${') {
            return this.scanTemplate();
          } // Possible identifier start in a surrogate pair.


          if (cp >= 0xD800 && cp < 0xDFFF) {
            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {
              return this.scanIdentifier();
            }
          }

          return this.scanPunctuator();
        };

        return Scanner;
      }();

      exports.Scanner = Scanner;
      /***/
    },
    /* 13 */

    /***/
    function (module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.TokenName = {};
      exports.TokenName[1
      /* BooleanLiteral */
      ] = 'Boolean';
      exports.TokenName[2
      /* EOF */
      ] = '<end>';
      exports.TokenName[3
      /* Identifier */
      ] = 'Identifier';
      exports.TokenName[4
      /* Keyword */
      ] = 'Keyword';
      exports.TokenName[5
      /* NullLiteral */
      ] = 'Null';
      exports.TokenName[6
      /* NumericLiteral */
      ] = 'Numeric';
      exports.TokenName[7
      /* Punctuator */
      ] = 'Punctuator';
      exports.TokenName[8
      /* StringLiteral */
      ] = 'String';
      exports.TokenName[9
      /* RegularExpression */
      ] = 'RegularExpression';
      exports.TokenName[10
      /* Template */
      ] = 'Template';
      /***/
    },
    /* 14 */

    /***/
    function (module, exports) {
      "use strict"; // Generated by generate-xhtml-entities.js. DO NOT MODIFY!

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.XHTMLEntities = {
        quot: '\u0022',
        amp: '\u0026',
        apos: '\u0027',
        gt: '\u003E',
        nbsp: '\u00A0',
        iexcl: '\u00A1',
        cent: '\u00A2',
        pound: '\u00A3',
        curren: '\u00A4',
        yen: '\u00A5',
        brvbar: '\u00A6',
        sect: '\u00A7',
        uml: '\u00A8',
        copy: '\u00A9',
        ordf: '\u00AA',
        laquo: '\u00AB',
        not: '\u00AC',
        shy: '\u00AD',
        reg: '\u00AE',
        macr: '\u00AF',
        deg: '\u00B0',
        plusmn: '\u00B1',
        sup2: '\u00B2',
        sup3: '\u00B3',
        acute: '\u00B4',
        micro: '\u00B5',
        para: '\u00B6',
        middot: '\u00B7',
        cedil: '\u00B8',
        sup1: '\u00B9',
        ordm: '\u00BA',
        raquo: '\u00BB',
        frac14: '\u00BC',
        frac12: '\u00BD',
        frac34: '\u00BE',
        iquest: '\u00BF',
        Agrave: '\u00C0',
        Aacute: '\u00C1',
        Acirc: '\u00C2',
        Atilde: '\u00C3',
        Auml: '\u00C4',
        Aring: '\u00C5',
        AElig: '\u00C6',
        Ccedil: '\u00C7',
        Egrave: '\u00C8',
        Eacute: '\u00C9',
        Ecirc: '\u00CA',
        Euml: '\u00CB',
        Igrave: '\u00CC',
        Iacute: '\u00CD',
        Icirc: '\u00CE',
        Iuml: '\u00CF',
        ETH: '\u00D0',
        Ntilde: '\u00D1',
        Ograve: '\u00D2',
        Oacute: '\u00D3',
        Ocirc: '\u00D4',
        Otilde: '\u00D5',
        Ouml: '\u00D6',
        times: '\u00D7',
        Oslash: '\u00D8',
        Ugrave: '\u00D9',
        Uacute: '\u00DA',
        Ucirc: '\u00DB',
        Uuml: '\u00DC',
        Yacute: '\u00DD',
        THORN: '\u00DE',
        szlig: '\u00DF',
        agrave: '\u00E0',
        aacute: '\u00E1',
        acirc: '\u00E2',
        atilde: '\u00E3',
        auml: '\u00E4',
        aring: '\u00E5',
        aelig: '\u00E6',
        ccedil: '\u00E7',
        egrave: '\u00E8',
        eacute: '\u00E9',
        ecirc: '\u00EA',
        euml: '\u00EB',
        igrave: '\u00EC',
        iacute: '\u00ED',
        icirc: '\u00EE',
        iuml: '\u00EF',
        eth: '\u00F0',
        ntilde: '\u00F1',
        ograve: '\u00F2',
        oacute: '\u00F3',
        ocirc: '\u00F4',
        otilde: '\u00F5',
        ouml: '\u00F6',
        divide: '\u00F7',
        oslash: '\u00F8',
        ugrave: '\u00F9',
        uacute: '\u00FA',
        ucirc: '\u00FB',
        uuml: '\u00FC',
        yacute: '\u00FD',
        thorn: '\u00FE',
        yuml: '\u00FF',
        OElig: '\u0152',
        oelig: '\u0153',
        Scaron: '\u0160',
        scaron: '\u0161',
        Yuml: '\u0178',
        fnof: '\u0192',
        circ: '\u02C6',
        tilde: '\u02DC',
        Alpha: '\u0391',
        Beta: '\u0392',
        Gamma: '\u0393',
        Delta: '\u0394',
        Epsilon: '\u0395',
        Zeta: '\u0396',
        Eta: '\u0397',
        Theta: '\u0398',
        Iota: '\u0399',
        Kappa: '\u039A',
        Lambda: '\u039B',
        Mu: '\u039C',
        Nu: '\u039D',
        Xi: '\u039E',
        Omicron: '\u039F',
        Pi: '\u03A0',
        Rho: '\u03A1',
        Sigma: '\u03A3',
        Tau: '\u03A4',
        Upsilon: '\u03A5',
        Phi: '\u03A6',
        Chi: '\u03A7',
        Psi: '\u03A8',
        Omega: '\u03A9',
        alpha: '\u03B1',
        beta: '\u03B2',
        gamma: '\u03B3',
        delta: '\u03B4',
        epsilon: '\u03B5',
        zeta: '\u03B6',
        eta: '\u03B7',
        theta: '\u03B8',
        iota: '\u03B9',
        kappa: '\u03BA',
        lambda: '\u03BB',
        mu: '\u03BC',
        nu: '\u03BD',
        xi: '\u03BE',
        omicron: '\u03BF',
        pi: '\u03C0',
        rho: '\u03C1',
        sigmaf: '\u03C2',
        sigma: '\u03C3',
        tau: '\u03C4',
        upsilon: '\u03C5',
        phi: '\u03C6',
        chi: '\u03C7',
        psi: '\u03C8',
        omega: '\u03C9',
        thetasym: '\u03D1',
        upsih: '\u03D2',
        piv: '\u03D6',
        ensp: '\u2002',
        emsp: '\u2003',
        thinsp: '\u2009',
        zwnj: '\u200C',
        zwj: '\u200D',
        lrm: '\u200E',
        rlm: '\u200F',
        ndash: '\u2013',
        mdash: '\u2014',
        lsquo: '\u2018',
        rsquo: '\u2019',
        sbquo: '\u201A',
        ldquo: '\u201C',
        rdquo: '\u201D',
        bdquo: '\u201E',
        dagger: '\u2020',
        Dagger: '\u2021',
        bull: '\u2022',
        hellip: '\u2026',
        permil: '\u2030',
        prime: '\u2032',
        Prime: '\u2033',
        lsaquo: '\u2039',
        rsaquo: '\u203A',
        oline: '\u203E',
        frasl: '\u2044',
        euro: '\u20AC',
        image: '\u2111',
        weierp: '\u2118',
        real: '\u211C',
        trade: '\u2122',
        alefsym: '\u2135',
        larr: '\u2190',
        uarr: '\u2191',
        rarr: '\u2192',
        darr: '\u2193',
        harr: '\u2194',
        crarr: '\u21B5',
        lArr: '\u21D0',
        uArr: '\u21D1',
        rArr: '\u21D2',
        dArr: '\u21D3',
        hArr: '\u21D4',
        forall: '\u2200',
        part: '\u2202',
        exist: '\u2203',
        empty: '\u2205',
        nabla: '\u2207',
        isin: '\u2208',
        notin: '\u2209',
        ni: '\u220B',
        prod: '\u220F',
        sum: '\u2211',
        minus: '\u2212',
        lowast: '\u2217',
        radic: '\u221A',
        prop: '\u221D',
        infin: '\u221E',
        ang: '\u2220',
        and: '\u2227',
        or: '\u2228',
        cap: '\u2229',
        cup: '\u222A',
        int: '\u222B',
        there4: '\u2234',
        sim: '\u223C',
        cong: '\u2245',
        asymp: '\u2248',
        ne: '\u2260',
        equiv: '\u2261',
        le: '\u2264',
        ge: '\u2265',
        sub: '\u2282',
        sup: '\u2283',
        nsub: '\u2284',
        sube: '\u2286',
        supe: '\u2287',
        oplus: '\u2295',
        otimes: '\u2297',
        perp: '\u22A5',
        sdot: '\u22C5',
        lceil: '\u2308',
        rceil: '\u2309',
        lfloor: '\u230A',
        rfloor: '\u230B',
        loz: '\u25CA',
        spades: '\u2660',
        clubs: '\u2663',
        hearts: '\u2665',
        diams: '\u2666',
        lang: '\u27E8',
        rang: '\u27E9'
      };
      /***/
    },
    /* 15 */

    /***/
    function (module, exports, __nested_webpack_require_277271__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var error_handler_1 = __nested_webpack_require_277271__(10);

      var scanner_1 = __nested_webpack_require_277271__(12);

      var token_1 = __nested_webpack_require_277271__(13);

      var Reader = function () {
        function Reader() {
          this.values = [];
          this.curly = this.paren = -1;
        } // A function following one of those tokens is an expression.


        Reader.prototype.beforeFunctionExpression = function (t) {
          return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new', 'return', 'case', 'delete', 'throw', 'void', // assignment operators
          '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=', '&=', '|=', '^=', ',', // binary/unary operators
          '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&', '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=', '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;
        }; // Determine if forward slash (/) is an operator or part of a regular expression
        // https://github.com/mozilla/sweet.js/wiki/design


        Reader.prototype.isRegexStart = function () {
          var previous = this.values[this.values.length - 1];
          var regex = previous !== null;

          switch (previous) {
            case 'this':
            case ']':
              regex = false;
              break;

            case ')':
              var keyword = this.values[this.paren - 1];
              regex = keyword === 'if' || keyword === 'while' || keyword === 'for' || keyword === 'with';
              break;

            case '}':
              // Dividing a function by anything makes little sense,
              // but we have to check for that.
              regex = false;

              if (this.values[this.curly - 3] === 'function') {
                // Anonymous function, e.g. function(){} /42
                var check = this.values[this.curly - 4];
                regex = check ? !this.beforeFunctionExpression(check) : false;
              } else if (this.values[this.curly - 4] === 'function') {
                // Named function, e.g. function f(){} /42/
                var check = this.values[this.curly - 5];
                regex = check ? !this.beforeFunctionExpression(check) : true;
              }

              break;

            default:
              break;
          }

          return regex;
        };

        Reader.prototype.push = function (token) {
          if (token.type === 7
          /* Punctuator */
          || token.type === 4
          /* Keyword */
          ) {
            if (token.value === '{') {
              this.curly = this.values.length;
            } else if (token.value === '(') {
              this.paren = this.values.length;
            }

            this.values.push(token.value);
          } else {
            this.values.push(null);
          }
        };

        return Reader;
      }();

      var Tokenizer = function () {
        function Tokenizer(code, config) {
          this.errorHandler = new error_handler_1.ErrorHandler();
          this.errorHandler.tolerant = config ? typeof config.tolerant === 'boolean' && config.tolerant : false;
          this.scanner = new scanner_1.Scanner(code, this.errorHandler);
          this.scanner.trackComment = config ? typeof config.comment === 'boolean' && config.comment : false;
          this.trackRange = config ? typeof config.range === 'boolean' && config.range : false;
          this.trackLoc = config ? typeof config.loc === 'boolean' && config.loc : false;
          this.buffer = [];
          this.reader = new Reader();
        }

        Tokenizer.prototype.errors = function () {
          return this.errorHandler.errors;
        };

        Tokenizer.prototype.getNextToken = function () {
          if (this.buffer.length === 0) {
            var comments = this.scanner.scanComments();

            if (this.scanner.trackComment) {
              for (var i = 0; i < comments.length; ++i) {
                var e = comments[i];
                var value = this.scanner.source.slice(e.slice[0], e.slice[1]);
                var comment = {
                  type: e.multiLine ? 'BlockComment' : 'LineComment',
                  value: value
                };

                if (this.trackRange) {
                  comment.range = e.range;
                }

                if (this.trackLoc) {
                  comment.loc = e.loc;
                }

                this.buffer.push(comment);
              }
            }

            if (!this.scanner.eof()) {
              var loc = void 0;

              if (this.trackLoc) {
                loc = {
                  start: {
                    line: this.scanner.lineNumber,
                    column: this.scanner.index - this.scanner.lineStart
                  },
                  end: {}
                };
              }

              var startRegex = this.scanner.source[this.scanner.index] === '/' && this.reader.isRegexStart();
              var token = startRegex ? this.scanner.scanRegExp() : this.scanner.lex();
              this.reader.push(token);
              var entry = {
                type: token_1.TokenName[token.type],
                value: this.scanner.source.slice(token.start, token.end)
              };

              if (this.trackRange) {
                entry.range = [token.start, token.end];
              }

              if (this.trackLoc) {
                loc.end = {
                  line: this.scanner.lineNumber,
                  column: this.scanner.index - this.scanner.lineStart
                };
                entry.loc = loc;
              }

              if (token.type === 9
              /* RegularExpression */
              ) {
                var pattern = token.pattern;
                var flags = token.flags;
                entry.regex = {
                  pattern: pattern,
                  flags: flags
                };
              }

              this.buffer.push(entry);
            }
          }

          return this.buffer.shift();
        };

        return Tokenizer;
      }();

      exports.Tokenizer = Tokenizer;
      /***/
    }
    /******/
    ])
  );
});

;

/***/ }),

/***/ "./node_modules/fast-deep-equal/index.js":
/***/ ((module) => {

"use strict";
 // do not edit .js files directly - edit src/index.jst

module.exports = function equal(a, b) {
  if (a === b) return true;

  if (a && b && typeof a == 'object' && typeof b == 'object') {
    if (a.constructor !== b.constructor) return false;
    var length, i, keys;

    if (Array.isArray(a)) {
      length = a.length;
      if (length != b.length) return false;

      for (i = length; i-- !== 0;) if (!equal(a[i], b[i])) return false;

      return true;
    }

    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) return false;

    for (i = length; i-- !== 0;) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;

    for (i = length; i-- !== 0;) {
      var key = keys[i];
      if (!equal(a[key], b[key])) return false;
    }

    return true;
  } // true if both NaN, false otherwise


  return a !== a && b !== b;
};

/***/ }),

/***/ "./node_modules/fast-json-stable-stringify/index.js":
/***/ ((module) => {

"use strict";


module.exports = function (data, opts) {
  if (!opts) opts = {};
  if (typeof opts === 'function') opts = {
    cmp: opts
  };
  var cycles = typeof opts.cycles === 'boolean' ? opts.cycles : false;

  var cmp = opts.cmp && function (f) {
    return function (node) {
      return function (a, b) {
        var aobj = {
          key: a,
          value: node[a]
        };
        var bobj = {
          key: b,
          value: node[b]
        };
        return f(aobj, bobj);
      };
    };
  }(opts.cmp);

  var seen = [];
  return function stringify(node) {
    if (node && node.toJSON && typeof node.toJSON === 'function') {
      node = node.toJSON();
    }

    if (node === undefined) return;
    if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';
    if (typeof node !== 'object') return JSON.stringify(node);
    var i, out;

    if (Array.isArray(node)) {
      out = '[';

      for (i = 0; i < node.length; i++) {
        if (i) out += ',';
        out += stringify(node[i]) || 'null';
      }

      return out + ']';
    }

    if (node === null) return 'null';

    if (seen.indexOf(node) !== -1) {
      if (cycles) return JSON.stringify('__cycle__');
      throw new TypeError('Converting circular structure to JSON');
    }

    var seenIndex = seen.push(node) - 1;
    var keys = Object.keys(node).sort(cmp && cmp(node));
    out = '';

    for (i = 0; i < keys.length; i++) {
      var key = keys[i];
      var value = stringify(node[key]);
      if (!value) continue;
      if (out) out += ',';
      out += JSON.stringify(key) + ':' + value;
    }

    seen.splice(seenIndex, 1);
    return '{' + out + '}';
  }(data);
};

/***/ }),

/***/ "./node_modules/front-matter/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var parser = __webpack_require__("./node_modules/js-yaml/index.js");

var optionalByteOrderMark = '\\ufeff?';
var platform = typeof process !== 'undefined' ? process.platform : '';
var pattern = '^(' + optionalByteOrderMark + '(= yaml =|---)' + '$([\\s\\S]*?)' + '^(?:\\2|\\.\\.\\.)\\s*' + '$' + (platform === 'win32' ? '\\r?' : '') + '(?:\\n)?)'; // NOTE: If this pattern uses the 'g' flag the `regex` variable definition will
// need to be moved down into the functions that use it.

var regex = new RegExp(pattern, 'm');
module.exports = extractor;
module.exports.test = test;

function extractor(string, options) {
  string = string || '';
  var defaultOptions = {
    allowUnsafe: false
  };
  options = options instanceof Object ? { ...defaultOptions,
    ...options
  } : defaultOptions;
  options.allowUnsafe = Boolean(options.allowUnsafe);
  var lines = string.split(/(\r?\n)/);

  if (lines[0] && /= yaml =|---/.test(lines[0])) {
    return parse(string, options.allowUnsafe);
  } else {
    return {
      attributes: {},
      body: string,
      bodyBegin: 1
    };
  }
}

function computeLocation(match, body) {
  var line = 1;
  var pos = body.indexOf('\n');
  var offset = match.index + match[0].length;

  while (pos !== -1) {
    if (pos >= offset) {
      return line;
    }

    line++;
    pos = body.indexOf('\n', pos + 1);
  }

  return line;
}

function parse(string, allowUnsafe) {
  var match = regex.exec(string);

  if (!match) {
    return {
      attributes: {},
      body: string,
      bodyBegin: 1
    };
  }

  var loader = allowUnsafe ? parser.load : parser.safeLoad;
  var yaml = match[match.length - 1].replace(/^\s+|\s+$/g, '');
  var attributes = loader(yaml) || {};
  var body = string.replace(match[0], '');
  var line = computeLocation(match, string);
  return {
    attributes: attributes,
    body: body,
    bodyBegin: line,
    frontmatter: yaml
  };
}

function test(string) {
  string = string || '';
  return regex.test(string);
}

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/***/ ((__unused_webpack_module, exports) => {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;

  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;

  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }

  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);

    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }

    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }

    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;

  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

/***/ }),

/***/ "./node_modules/intersection-observer/intersection-observer.js":
/***/ (() => {

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.
 *
 *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document
 *
 */
(function (window, document) {
  'use strict'; // Exits early if all IntersectionObserver and IntersectionObserverEntry
  // features are natively supported.

  if ('IntersectionObserver' in window && 'IntersectionObserverEntry' in window && 'intersectionRatio' in window.IntersectionObserverEntry.prototype) {
    // Minimal polyfill for Edge 15's lack of `isIntersecting`
    // See: https://github.com/w3c/IntersectionObserver/issues/211
    if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {
      Object.defineProperty(window.IntersectionObserverEntry.prototype, 'isIntersecting', {
        get: function () {
          return this.intersectionRatio > 0;
        }
      });
    }

    return;
  }
  /**
   * An IntersectionObserver registry. This registry exists to hold a strong
   * reference to IntersectionObserver instances currently observing a target
   * element. Without this registry, instances without another reference may be
   * garbage collected.
   */


  var registry = [];
  /**
   * Creates the global IntersectionObserverEntry constructor.
   * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry
   * @param {Object} entry A dictionary of instance properties.
   * @constructor
   */

  function IntersectionObserverEntry(entry) {
    this.time = entry.time;
    this.target = entry.target;
    this.rootBounds = entry.rootBounds;
    this.boundingClientRect = entry.boundingClientRect;
    this.intersectionRect = entry.intersectionRect || getEmptyRect();
    this.isIntersecting = !!entry.intersectionRect; // Calculates the intersection ratio.

    var targetRect = this.boundingClientRect;
    var targetArea = targetRect.width * targetRect.height;
    var intersectionRect = this.intersectionRect;
    var intersectionArea = intersectionRect.width * intersectionRect.height; // Sets intersection ratio.

    if (targetArea) {
      // Round the intersection ratio to avoid floating point math issues:
      // https://github.com/w3c/IntersectionObserver/issues/324
      this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));
    } else {
      // If area is zero and is intersecting, sets to 1, otherwise to 0
      this.intersectionRatio = this.isIntersecting ? 1 : 0;
    }
  }
  /**
   * Creates the global IntersectionObserver constructor.
   * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface
   * @param {Function} callback The function to be invoked after intersection
   *     changes have queued. The function is not invoked if the queue has
   *     been emptied by calling the `takeRecords` method.
   * @param {Object=} opt_options Optional configuration options.
   * @constructor
   */


  function IntersectionObserver(callback, opt_options) {
    var options = opt_options || {};

    if (typeof callback != 'function') {
      throw new Error('callback must be a function');
    }

    if (options.root && options.root.nodeType != 1) {
      throw new Error('root must be an Element');
    } // Binds and throttles `this._checkForIntersections`.


    this._checkForIntersections = throttle(this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT); // Private properties.

    this._callback = callback;
    this._observationTargets = [];
    this._queuedEntries = [];
    this._rootMarginValues = this._parseRootMargin(options.rootMargin); // Public properties.

    this.thresholds = this._initThresholds(options.threshold);
    this.root = options.root || null;
    this.rootMargin = this._rootMarginValues.map(function (margin) {
      return margin.value + margin.unit;
    }).join(' ');
  }
  /**
   * The minimum interval within which the document will be checked for
   * intersection changes.
   */


  IntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;
  /**
   * The frequency in which the polyfill polls for intersection changes.
   * this can be updated on a per instance basis and must be set prior to
   * calling `observe` on the first target.
   */

  IntersectionObserver.prototype.POLL_INTERVAL = null;
  /**
   * Use a mutation observer on the root element
   * to detect intersection changes.
   */

  IntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;
  /**
   * Starts observing a target element for intersection changes based on
   * the thresholds values.
   * @param {Element} target The DOM element to observe.
   */

  IntersectionObserver.prototype.observe = function (target) {
    var isTargetAlreadyObserved = this._observationTargets.some(function (item) {
      return item.element == target;
    });

    if (isTargetAlreadyObserved) {
      return;
    }

    if (!(target && target.nodeType == 1)) {
      throw new Error('target must be an Element');
    }

    this._registerInstance();

    this._observationTargets.push({
      element: target,
      entry: null
    });

    this._monitorIntersections();

    this._checkForIntersections();
  };
  /**
   * Stops observing a target element for intersection changes.
   * @param {Element} target The DOM element to observe.
   */


  IntersectionObserver.prototype.unobserve = function (target) {
    this._observationTargets = this._observationTargets.filter(function (item) {
      return item.element != target;
    });

    if (!this._observationTargets.length) {
      this._unmonitorIntersections();

      this._unregisterInstance();
    }
  };
  /**
   * Stops observing all target elements for intersection changes.
   */


  IntersectionObserver.prototype.disconnect = function () {
    this._observationTargets = [];

    this._unmonitorIntersections();

    this._unregisterInstance();
  };
  /**
   * Returns any queue entries that have not yet been reported to the
   * callback and clears the queue. This can be used in conjunction with the
   * callback to obtain the absolute most up-to-date intersection information.
   * @return {Array} The currently queued entries.
   */


  IntersectionObserver.prototype.takeRecords = function () {
    var records = this._queuedEntries.slice();

    this._queuedEntries = [];
    return records;
  };
  /**
   * Accepts the threshold value from the user configuration object and
   * returns a sorted array of unique threshold values. If a value is not
   * between 0 and 1 and error is thrown.
   * @private
   * @param {Array|number=} opt_threshold An optional threshold value or
   *     a list of threshold values, defaulting to [0].
   * @return {Array} A sorted list of unique and valid threshold values.
   */


  IntersectionObserver.prototype._initThresholds = function (opt_threshold) {
    var threshold = opt_threshold || [0];
    if (!Array.isArray(threshold)) threshold = [threshold];
    return threshold.sort().filter(function (t, i, a) {
      if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {
        throw new Error('threshold must be a number between 0 and 1 inclusively');
      }

      return t !== a[i - 1];
    });
  };
  /**
   * Accepts the rootMargin value from the user configuration object
   * and returns an array of the four margin values as an object containing
   * the value and unit properties. If any of the values are not properly
   * formatted or use a unit other than px or %, and error is thrown.
   * @private
   * @param {string=} opt_rootMargin An optional rootMargin value,
   *     defaulting to '0px'.
   * @return {Array<Object>} An array of margin objects with the keys
   *     value and unit.
   */


  IntersectionObserver.prototype._parseRootMargin = function (opt_rootMargin) {
    var marginString = opt_rootMargin || '0px';
    var margins = marginString.split(/\s+/).map(function (margin) {
      var parts = /^(-?\d*\.?\d+)(px|%)$/.exec(margin);

      if (!parts) {
        throw new Error('rootMargin must be specified in pixels or percent');
      }

      return {
        value: parseFloat(parts[1]),
        unit: parts[2]
      };
    }); // Handles shorthand.

    margins[1] = margins[1] || margins[0];
    margins[2] = margins[2] || margins[0];
    margins[3] = margins[3] || margins[1];
    return margins;
  };
  /**
   * Starts polling for intersection changes if the polling is not already
   * happening, and if the page's visibility state is visible.
   * @private
   */


  IntersectionObserver.prototype._monitorIntersections = function () {
    if (!this._monitoringIntersections) {
      this._monitoringIntersections = true; // If a poll interval is set, use polling instead of listening to
      // resize and scroll events or DOM mutations.

      if (this.POLL_INTERVAL) {
        this._monitoringInterval = setInterval(this._checkForIntersections, this.POLL_INTERVAL);
      } else {
        addEvent(window, 'resize', this._checkForIntersections, true);
        addEvent(document, 'scroll', this._checkForIntersections, true);

        if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in window) {
          this._domObserver = new MutationObserver(this._checkForIntersections);

          this._domObserver.observe(document, {
            attributes: true,
            childList: true,
            characterData: true,
            subtree: true
          });
        }
      }
    }
  };
  /**
   * Stops polling for intersection changes.
   * @private
   */


  IntersectionObserver.prototype._unmonitorIntersections = function () {
    if (this._monitoringIntersections) {
      this._monitoringIntersections = false;
      clearInterval(this._monitoringInterval);
      this._monitoringInterval = null;
      removeEvent(window, 'resize', this._checkForIntersections, true);
      removeEvent(document, 'scroll', this._checkForIntersections, true);

      if (this._domObserver) {
        this._domObserver.disconnect();

        this._domObserver = null;
      }
    }
  };
  /**
   * Scans each observation target for intersection changes and adds them
   * to the internal entries queue. If new entries are found, it
   * schedules the callback to be invoked.
   * @private
   */


  IntersectionObserver.prototype._checkForIntersections = function () {
    var rootIsInDom = this._rootIsInDom();

    var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();

    this._observationTargets.forEach(function (item) {
      var target = item.element;
      var targetRect = getBoundingClientRect(target);

      var rootContainsTarget = this._rootContainsTarget(target);

      var oldEntry = item.entry;

      var intersectionRect = rootIsInDom && rootContainsTarget && this._computeTargetAndRootIntersection(target, rootRect);

      var newEntry = item.entry = new IntersectionObserverEntry({
        time: now(),
        target: target,
        boundingClientRect: targetRect,
        rootBounds: rootRect,
        intersectionRect: intersectionRect
      });

      if (!oldEntry) {
        this._queuedEntries.push(newEntry);
      } else if (rootIsInDom && rootContainsTarget) {
        // If the new entry intersection ratio has crossed any of the
        // thresholds, add a new entry.
        if (this._hasCrossedThreshold(oldEntry, newEntry)) {
          this._queuedEntries.push(newEntry);
        }
      } else {
        // If the root is not in the DOM or target is not contained within
        // root but the previous entry for this target had an intersection,
        // add a new record indicating removal.
        if (oldEntry && oldEntry.isIntersecting) {
          this._queuedEntries.push(newEntry);
        }
      }
    }, this);

    if (this._queuedEntries.length) {
      this._callback(this.takeRecords(), this);
    }
  };
  /**
   * Accepts a target and root rect computes the intersection between then
   * following the algorithm in the spec.
   * TODO(philipwalton): at this time clip-path is not considered.
   * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo
   * @param {Element} target The target DOM element
   * @param {Object} rootRect The bounding rect of the root after being
   *     expanded by the rootMargin value.
   * @return {?Object} The final intersection rect object or undefined if no
   *     intersection is found.
   * @private
   */


  IntersectionObserver.prototype._computeTargetAndRootIntersection = function (target, rootRect) {
    // If the element isn't displayed, an intersection can't happen.
    if (window.getComputedStyle(target).display == 'none') return;
    var targetRect = getBoundingClientRect(target);
    var intersectionRect = targetRect;
    var parent = getParentNode(target);
    var atRoot = false;

    while (!atRoot) {
      var parentRect = null;
      var parentComputedStyle = parent.nodeType == 1 ? window.getComputedStyle(parent) : {}; // If the parent isn't displayed, an intersection can't happen.

      if (parentComputedStyle.display == 'none') return;

      if (parent == this.root || parent == document) {
        atRoot = true;
        parentRect = rootRect;
      } else {
        // If the element has a non-visible overflow, and it's not the <body>
        // or <html> element, update the intersection rect.
        // Note: <body> and <html> cannot be clipped to a rect that's not also
        // the document rect, so no need to compute a new intersection.
        if (parent != document.body && parent != document.documentElement && parentComputedStyle.overflow != 'visible') {
          parentRect = getBoundingClientRect(parent);
        }
      } // If either of the above conditionals set a new parentRect,
      // calculate new intersection data.


      if (parentRect) {
        intersectionRect = computeRectIntersection(parentRect, intersectionRect);
        if (!intersectionRect) break;
      }

      parent = getParentNode(parent);
    }

    return intersectionRect;
  };
  /**
   * Returns the root rect after being expanded by the rootMargin value.
   * @return {Object} The expanded root rect.
   * @private
   */


  IntersectionObserver.prototype._getRootRect = function () {
    var rootRect;

    if (this.root) {
      rootRect = getBoundingClientRect(this.root);
    } else {
      // Use <html>/<body> instead of window since scroll bars affect size.
      var html = document.documentElement;
      var body = document.body;
      rootRect = {
        top: 0,
        left: 0,
        right: html.clientWidth || body.clientWidth,
        width: html.clientWidth || body.clientWidth,
        bottom: html.clientHeight || body.clientHeight,
        height: html.clientHeight || body.clientHeight
      };
    }

    return this._expandRectByRootMargin(rootRect);
  };
  /**
   * Accepts a rect and expands it by the rootMargin value.
   * @param {Object} rect The rect object to expand.
   * @return {Object} The expanded rect.
   * @private
   */


  IntersectionObserver.prototype._expandRectByRootMargin = function (rect) {
    var margins = this._rootMarginValues.map(function (margin, i) {
      return margin.unit == 'px' ? margin.value : margin.value * (i % 2 ? rect.width : rect.height) / 100;
    });

    var newRect = {
      top: rect.top - margins[0],
      right: rect.right + margins[1],
      bottom: rect.bottom + margins[2],
      left: rect.left - margins[3]
    };
    newRect.width = newRect.right - newRect.left;
    newRect.height = newRect.bottom - newRect.top;
    return newRect;
  };
  /**
   * Accepts an old and new entry and returns true if at least one of the
   * threshold values has been crossed.
   * @param {?IntersectionObserverEntry} oldEntry The previous entry for a
   *    particular target element or null if no previous entry exists.
   * @param {IntersectionObserverEntry} newEntry The current entry for a
   *    particular target element.
   * @return {boolean} Returns true if a any threshold has been crossed.
   * @private
   */


  IntersectionObserver.prototype._hasCrossedThreshold = function (oldEntry, newEntry) {
    // To make comparing easier, an entry that has a ratio of 0
    // but does not actually intersect is given a value of -1
    var oldRatio = oldEntry && oldEntry.isIntersecting ? oldEntry.intersectionRatio || 0 : -1;
    var newRatio = newEntry.isIntersecting ? newEntry.intersectionRatio || 0 : -1; // Ignore unchanged ratios

    if (oldRatio === newRatio) return;

    for (var i = 0; i < this.thresholds.length; i++) {
      var threshold = this.thresholds[i]; // Return true if an entry matches a threshold or if the new ratio
      // and the old ratio are on the opposite sides of a threshold.

      if (threshold == oldRatio || threshold == newRatio || threshold < oldRatio !== threshold < newRatio) {
        return true;
      }
    }
  };
  /**
   * Returns whether or not the root element is an element and is in the DOM.
   * @return {boolean} True if the root element is an element and is in the DOM.
   * @private
   */


  IntersectionObserver.prototype._rootIsInDom = function () {
    return !this.root || containsDeep(document, this.root);
  };
  /**
   * Returns whether or not the target element is a child of root.
   * @param {Element} target The target element to check.
   * @return {boolean} True if the target element is a child of root.
   * @private
   */


  IntersectionObserver.prototype._rootContainsTarget = function (target) {
    return containsDeep(this.root || document, target);
  };
  /**
   * Adds the instance to the global IntersectionObserver registry if it isn't
   * already present.
   * @private
   */


  IntersectionObserver.prototype._registerInstance = function () {
    if (registry.indexOf(this) < 0) {
      registry.push(this);
    }
  };
  /**
   * Removes the instance from the global IntersectionObserver registry.
   * @private
   */


  IntersectionObserver.prototype._unregisterInstance = function () {
    var index = registry.indexOf(this);
    if (index != -1) registry.splice(index, 1);
  };
  /**
   * Returns the result of the performance.now() method or null in browsers
   * that don't support the API.
   * @return {number} The elapsed time since the page was requested.
   */


  function now() {
    return window.performance && performance.now && performance.now();
  }
  /**
   * Throttles a function and delays its execution, so it's only called at most
   * once within a given time period.
   * @param {Function} fn The function to throttle.
   * @param {number} timeout The amount of time that must pass before the
   *     function can be called again.
   * @return {Function} The throttled function.
   */


  function throttle(fn, timeout) {
    var timer = null;
    return function () {
      if (!timer) {
        timer = setTimeout(function () {
          fn();
          timer = null;
        }, timeout);
      }
    };
  }
  /**
   * Adds an event handler to a DOM node ensuring cross-browser compatibility.
   * @param {Node} node The DOM node to add the event handler to.
   * @param {string} event The event name.
   * @param {Function} fn The event handler to add.
   * @param {boolean} opt_useCapture Optionally adds the even to the capture
   *     phase. Note: this only works in modern browsers.
   */


  function addEvent(node, event, fn, opt_useCapture) {
    if (typeof node.addEventListener == 'function') {
      node.addEventListener(event, fn, opt_useCapture || false);
    } else if (typeof node.attachEvent == 'function') {
      node.attachEvent('on' + event, fn);
    }
  }
  /**
   * Removes a previously added event handler from a DOM node.
   * @param {Node} node The DOM node to remove the event handler from.
   * @param {string} event The event name.
   * @param {Function} fn The event handler to remove.
   * @param {boolean} opt_useCapture If the event handler was added with this
   *     flag set to true, it should be set to true here in order to remove it.
   */


  function removeEvent(node, event, fn, opt_useCapture) {
    if (typeof node.removeEventListener == 'function') {
      node.removeEventListener(event, fn, opt_useCapture || false);
    } else if (typeof node.detatchEvent == 'function') {
      node.detatchEvent('on' + event, fn);
    }
  }
  /**
   * Returns the intersection between two rect objects.
   * @param {Object} rect1 The first rect.
   * @param {Object} rect2 The second rect.
   * @return {?Object} The intersection rect or undefined if no intersection
   *     is found.
   */


  function computeRectIntersection(rect1, rect2) {
    var top = Math.max(rect1.top, rect2.top);
    var bottom = Math.min(rect1.bottom, rect2.bottom);
    var left = Math.max(rect1.left, rect2.left);
    var right = Math.min(rect1.right, rect2.right);
    var width = right - left;
    var height = bottom - top;
    return width >= 0 && height >= 0 && {
      top: top,
      bottom: bottom,
      left: left,
      right: right,
      width: width,
      height: height
    };
  }
  /**
   * Shims the native getBoundingClientRect for compatibility with older IE.
   * @param {Element} el The element whose bounding rect to get.
   * @return {Object} The (possibly shimmed) rect of the element.
   */


  function getBoundingClientRect(el) {
    var rect;

    try {
      rect = el.getBoundingClientRect();
    } catch (err) {// Ignore Windows 7 IE11 "Unspecified error"
      // https://github.com/w3c/IntersectionObserver/pull/205
    }

    if (!rect) return getEmptyRect(); // Older IE

    if (!(rect.width && rect.height)) {
      rect = {
        top: rect.top,
        right: rect.right,
        bottom: rect.bottom,
        left: rect.left,
        width: rect.right - rect.left,
        height: rect.bottom - rect.top
      };
    }

    return rect;
  }
  /**
   * Returns an empty rect object. An empty rect is returned when an element
   * is not in the DOM.
   * @return {Object} The empty rect.
   */


  function getEmptyRect() {
    return {
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      width: 0,
      height: 0
    };
  }
  /**
   * Checks to see if a parent element contains a child element (including inside
   * shadow DOM).
   * @param {Node} parent The parent element.
   * @param {Node} child The child element.
   * @return {boolean} True if the parent node contains the child node.
   */


  function containsDeep(parent, child) {
    var node = child;

    while (node) {
      if (node == parent) return true;
      node = getParentNode(node);
    }

    return false;
  }
  /**
   * Gets the parent node of an element or its host element if the parent node
   * is a shadow root.
   * @param {Node} node The node whose parent to get.
   * @return {Node|null} The parent node or null if no parent exists.
   */


  function getParentNode(node) {
    var parent = node.parentNode;

    if (parent && parent.nodeType == 11 && parent.host) {
      // If the parent is a shadow root, return the host element.
      return parent.host;
    }

    return parent;
  } // Exposes the constructors globally.


  window.IntersectionObserver = IntersectionObserver;
  window.IntersectionObserverEntry = IntersectionObserverEntry;
})(window, document);

/***/ }),

/***/ "./node_modules/js-yaml/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var yaml = __webpack_require__("./node_modules/js-yaml/lib/js-yaml.js");

module.exports = yaml;

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var loader = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/loader.js");

var dumper = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/dumper.js");

function deprecated(name) {
  return function () {
    throw new Error('Function ' + name + ' is deprecated and cannot be used.');
  };
}

module.exports.Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");
module.exports.Schema = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema.js");
module.exports.FAILSAFE_SCHEMA = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/failsafe.js");
module.exports.JSON_SCHEMA = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/json.js");
module.exports.CORE_SCHEMA = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/core.js");
module.exports.DEFAULT_SAFE_SCHEMA = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js");
module.exports.DEFAULT_FULL_SCHEMA = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/default_full.js");
module.exports.load = loader.load;
module.exports.loadAll = loader.loadAll;
module.exports.safeLoad = loader.safeLoad;
module.exports.safeLoadAll = loader.safeLoadAll;
module.exports.dump = dumper.dump;
module.exports.safeDump = dumper.safeDump;
module.exports.YAMLException = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/exception.js"); // Deprecated schema names from JS-YAML 2.0.x

module.exports.MINIMAL_SCHEMA = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/failsafe.js");
module.exports.SAFE_SCHEMA = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js");
module.exports.DEFAULT_SCHEMA = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/default_full.js"); // Deprecated functions from JS-YAML 1.x.x

module.exports.scan = deprecated('scan');
module.exports.parse = deprecated('parse');
module.exports.compose = deprecated('compose');
module.exports.addConstructor = deprecated('addConstructor');

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/common.js":
/***/ ((module) => {

"use strict";


function isNothing(subject) {
  return typeof subject === 'undefined' || subject === null;
}

function isObject(subject) {
  return typeof subject === 'object' && subject !== null;
}

function toArray(sequence) {
  if (Array.isArray(sequence)) return sequence;else if (isNothing(sequence)) return [];
  return [sequence];
}

function extend(target, source) {
  var index, length, key, sourceKeys;

  if (source) {
    sourceKeys = Object.keys(source);

    for (index = 0, length = sourceKeys.length; index < length; index += 1) {
      key = sourceKeys[index];
      target[key] = source[key];
    }
  }

  return target;
}

function repeat(string, count) {
  var result = '',
      cycle;

  for (cycle = 0; cycle < count; cycle += 1) {
    result += string;
  }

  return result;
}

function isNegativeZero(number) {
  return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
}

module.exports.isNothing = isNothing;
module.exports.isObject = isObject;
module.exports.toArray = toArray;
module.exports.repeat = repeat;
module.exports.isNegativeZero = isNegativeZero;
module.exports.extend = extend;

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/dumper.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/*eslint-disable no-use-before-define*/

var common = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/common.js");

var YAMLException = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/exception.js");

var DEFAULT_FULL_SCHEMA = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/default_full.js");

var DEFAULT_SAFE_SCHEMA = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js");

var _toString = Object.prototype.toString;
var _hasOwnProperty = Object.prototype.hasOwnProperty;
var CHAR_TAB = 0x09;
/* Tab */

var CHAR_LINE_FEED = 0x0A;
/* LF */

var CHAR_CARRIAGE_RETURN = 0x0D;
/* CR */

var CHAR_SPACE = 0x20;
/* Space */

var CHAR_EXCLAMATION = 0x21;
/* ! */

var CHAR_DOUBLE_QUOTE = 0x22;
/* " */

var CHAR_SHARP = 0x23;
/* # */

var CHAR_PERCENT = 0x25;
/* % */

var CHAR_AMPERSAND = 0x26;
/* & */

var CHAR_SINGLE_QUOTE = 0x27;
/* ' */

var CHAR_ASTERISK = 0x2A;
/* * */

var CHAR_COMMA = 0x2C;
/* , */

var CHAR_MINUS = 0x2D;
/* - */

var CHAR_COLON = 0x3A;
/* : */

var CHAR_EQUALS = 0x3D;
/* = */

var CHAR_GREATER_THAN = 0x3E;
/* > */

var CHAR_QUESTION = 0x3F;
/* ? */

var CHAR_COMMERCIAL_AT = 0x40;
/* @ */

var CHAR_LEFT_SQUARE_BRACKET = 0x5B;
/* [ */

var CHAR_RIGHT_SQUARE_BRACKET = 0x5D;
/* ] */

var CHAR_GRAVE_ACCENT = 0x60;
/* ` */

var CHAR_LEFT_CURLY_BRACKET = 0x7B;
/* { */

var CHAR_VERTICAL_LINE = 0x7C;
/* | */

var CHAR_RIGHT_CURLY_BRACKET = 0x7D;
/* } */

var ESCAPE_SEQUENCES = {};
ESCAPE_SEQUENCES[0x00] = '\\0';
ESCAPE_SEQUENCES[0x07] = '\\a';
ESCAPE_SEQUENCES[0x08] = '\\b';
ESCAPE_SEQUENCES[0x09] = '\\t';
ESCAPE_SEQUENCES[0x0A] = '\\n';
ESCAPE_SEQUENCES[0x0B] = '\\v';
ESCAPE_SEQUENCES[0x0C] = '\\f';
ESCAPE_SEQUENCES[0x0D] = '\\r';
ESCAPE_SEQUENCES[0x1B] = '\\e';
ESCAPE_SEQUENCES[0x22] = '\\"';
ESCAPE_SEQUENCES[0x5C] = '\\\\';
ESCAPE_SEQUENCES[0x85] = '\\N';
ESCAPE_SEQUENCES[0xA0] = '\\_';
ESCAPE_SEQUENCES[0x2028] = '\\L';
ESCAPE_SEQUENCES[0x2029] = '\\P';
var DEPRECATED_BOOLEANS_SYNTAX = ['y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON', 'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'];

function compileStyleMap(schema, map) {
  var result, keys, index, length, tag, style, type;
  if (map === null) return {};
  result = {};
  keys = Object.keys(map);

  for (index = 0, length = keys.length; index < length; index += 1) {
    tag = keys[index];
    style = String(map[tag]);

    if (tag.slice(0, 2) === '!!') {
      tag = 'tag:yaml.org,2002:' + tag.slice(2);
    }

    type = schema.compiledTypeMap['fallback'][tag];

    if (type && _hasOwnProperty.call(type.styleAliases, style)) {
      style = type.styleAliases[style];
    }

    result[tag] = style;
  }

  return result;
}

function encodeHex(character) {
  var string, handle, length;
  string = character.toString(16).toUpperCase();

  if (character <= 0xFF) {
    handle = 'x';
    length = 2;
  } else if (character <= 0xFFFF) {
    handle = 'u';
    length = 4;
  } else if (character <= 0xFFFFFFFF) {
    handle = 'U';
    length = 8;
  } else {
    throw new YAMLException('code point within a string may not be greater than 0xFFFFFFFF');
  }

  return '\\' + handle + common.repeat('0', length - string.length) + string;
}

function State(options) {
  this.schema = options['schema'] || DEFAULT_FULL_SCHEMA;
  this.indent = Math.max(1, options['indent'] || 2);
  this.noArrayIndent = options['noArrayIndent'] || false;
  this.skipInvalid = options['skipInvalid'] || false;
  this.flowLevel = common.isNothing(options['flowLevel']) ? -1 : options['flowLevel'];
  this.styleMap = compileStyleMap(this.schema, options['styles'] || null);
  this.sortKeys = options['sortKeys'] || false;
  this.lineWidth = options['lineWidth'] || 80;
  this.noRefs = options['noRefs'] || false;
  this.noCompatMode = options['noCompatMode'] || false;
  this.condenseFlow = options['condenseFlow'] || false;
  this.implicitTypes = this.schema.compiledImplicit;
  this.explicitTypes = this.schema.compiledExplicit;
  this.tag = null;
  this.result = '';
  this.duplicates = [];
  this.usedDuplicates = null;
} // Indents every line in a string. Empty lines (\n only) are not indented.


function indentString(string, spaces) {
  var ind = common.repeat(' ', spaces),
      position = 0,
      next = -1,
      result = '',
      line,
      length = string.length;

  while (position < length) {
    next = string.indexOf('\n', position);

    if (next === -1) {
      line = string.slice(position);
      position = length;
    } else {
      line = string.slice(position, next + 1);
      position = next + 1;
    }

    if (line.length && line !== '\n') result += ind;
    result += line;
  }

  return result;
}

function generateNextLine(state, level) {
  return '\n' + common.repeat(' ', state.indent * level);
}

function testImplicitResolving(state, str) {
  var index, length, type;

  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
    type = state.implicitTypes[index];

    if (type.resolve(str)) {
      return true;
    }
  }

  return false;
} // [33] s-white ::= s-space | s-tab


function isWhitespace(c) {
  return c === CHAR_SPACE || c === CHAR_TAB;
} // Returns true if the character can be printed without escaping.
// From YAML 1.2: "any allowed characters known to be non-printable
// should also be escaped. [However,] This isn’t mandatory"
// Derived from nb-char - \t - #x85 - #xA0 - #x2028 - #x2029.


function isPrintable(c) {
  return 0x00020 <= c && c <= 0x00007E || 0x000A1 <= c && c <= 0x00D7FF && c !== 0x2028 && c !== 0x2029 || 0x0E000 <= c && c <= 0x00FFFD && c !== 0xFEFF
  /* BOM */
  || 0x10000 <= c && c <= 0x10FFFF;
} // [34] ns-char ::= nb-char - s-white
// [27] nb-char ::= c-printable - b-char - c-byte-order-mark
// [26] b-char  ::= b-line-feed | b-carriage-return
// [24] b-line-feed       ::=     #xA    /* LF */
// [25] b-carriage-return ::=     #xD    /* CR */
// [3]  c-byte-order-mark ::=     #xFEFF


function isNsChar(c) {
  return isPrintable(c) && !isWhitespace(c) // byte-order-mark
  && c !== 0xFEFF // b-char
  && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
} // Simplified test for values allowed after the first character in plain style.


function isPlainSafe(c, prev) {
  // Uses a subset of nb-char - c-flow-indicator - ":" - "#"
  // where nb-char ::= c-printable - b-char - c-byte-order-mark.
  return isPrintable(c) && c !== 0xFEFF // - c-flow-indicator
  && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET // - ":" - "#"
  // /* An ns-char preceding */ "#"
  && c !== CHAR_COLON && (c !== CHAR_SHARP || prev && isNsChar(prev));
} // Simplified test for values allowed as the first character in plain style.


function isPlainSafeFirst(c) {
  // Uses a subset of ns-char - c-indicator
  // where ns-char = nb-char - s-white.
  return isPrintable(c) && c !== 0xFEFF && !isWhitespace(c) // - s-white
  // - (c-indicator ::=
  // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”
  && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET // | “#” | “&” | “*” | “!” | “|” | “=” | “>” | “'” | “"”
  && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE // | “%” | “@” | “`”)
  && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
} // Determines whether block indentation indicator is required.


function needIndentIndicator(string) {
  var leadingSpaceRe = /^\n* /;
  return leadingSpaceRe.test(string);
}

var STYLE_PLAIN = 1,
    STYLE_SINGLE = 2,
    STYLE_LITERAL = 3,
    STYLE_FOLDED = 4,
    STYLE_DOUBLE = 5; // Determines which scalar styles are possible and returns the preferred style.
// lineWidth = -1 => no limit.
// Pre-conditions: str.length > 0.
// Post-conditions:
//    STYLE_PLAIN or STYLE_SINGLE => no \n are in the string.
//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).
//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).

function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType) {
  var i;
  var char, prev_char;
  var hasLineBreak = false;
  var hasFoldableLine = false; // only checked if shouldTrackWidth

  var shouldTrackWidth = lineWidth !== -1;
  var previousLineBreak = -1; // count the first line correctly

  var plain = isPlainSafeFirst(string.charCodeAt(0)) && !isWhitespace(string.charCodeAt(string.length - 1));

  if (singleLineOnly) {
    // Case: no block styles.
    // Check for disallowed characters to rule out plain and single.
    for (i = 0; i < string.length; i++) {
      char = string.charCodeAt(i);

      if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }

      prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
      plain = plain && isPlainSafe(char, prev_char);
    }
  } else {
    // Case: block styles permitted.
    for (i = 0; i < string.length; i++) {
      char = string.charCodeAt(i);

      if (char === CHAR_LINE_FEED) {
        hasLineBreak = true; // Check if any line can be folded.

        if (shouldTrackWidth) {
          hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.
          i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';
          previousLineBreak = i;
        }
      } else if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }

      prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
      plain = plain && isPlainSafe(char, prev_char);
    } // in case the end is missing a \n


    hasFoldableLine = hasFoldableLine || shouldTrackWidth && i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';
  } // Although every style can represent \n without escaping, prefer block styles
  // for multiline, since they're more readable and they don't add empty lines.
  // Also prefer folding a super-long line.


  if (!hasLineBreak && !hasFoldableLine) {
    // Strings interpretable as another type have to be quoted;
    // e.g. the string 'true' vs. the boolean true.
    return plain && !testAmbiguousType(string) ? STYLE_PLAIN : STYLE_SINGLE;
  } // Edge case: block indentation indicator can only have one digit.


  if (indentPerLevel > 9 && needIndentIndicator(string)) {
    return STYLE_DOUBLE;
  } // At this point we know block styles are valid.
  // Prefer literal style unless we want to fold.


  return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
} // Note: line breaking/folding is implemented for only the folded style.
// NB. We drop the last trailing newline (if any) of a returned block scalar
//  since the dumper adds its own newline. This always works:
//    • No ending newline => unaffected; already using strip "-" chomping.
//    • Ending newline    => removed then restored.
//  Importantly, this keeps the "+" chomp indicator from gaining an extra line.


function writeScalar(state, string, level, iskey) {
  state.dump = function () {
    if (string.length === 0) {
      return "''";
    }

    if (!state.noCompatMode && DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1) {
      return "'" + string + "'";
    }

    var indent = state.indent * Math.max(1, level); // no 0-indent scalars
    // As indentation gets deeper, let the width decrease monotonically
    // to the lower bound min(state.lineWidth, 40).
    // Note that this implies
    //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.
    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.
    // This behaves better than a constant minimum width which disallows narrower options,
    // or an indent threshold which causes the width to suddenly increase.

    var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent); // Without knowing if keys are implicit/explicit, assume implicit for safety.

    var singleLineOnly = iskey // No block styles in flow mode.
    || state.flowLevel > -1 && level >= state.flowLevel;

    function testAmbiguity(string) {
      return testImplicitResolving(state, string);
    }

    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity)) {
      case STYLE_PLAIN:
        return string;

      case STYLE_SINGLE:
        return "'" + string.replace(/'/g, "''") + "'";

      case STYLE_LITERAL:
        return '|' + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));

      case STYLE_FOLDED:
        return '>' + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));

      case STYLE_DOUBLE:
        return '"' + escapeString(string, lineWidth) + '"';

      default:
        throw new YAMLException('impossible error: invalid scalar style');
    }
  }();
} // Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.


function blockHeader(string, indentPerLevel) {
  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : ''; // note the special case: the string '\n' counts as a "trailing" empty line.

  var clip = string[string.length - 1] === '\n';
  var keep = clip && (string[string.length - 2] === '\n' || string === '\n');
  var chomp = keep ? '+' : clip ? '' : '-';
  return indentIndicator + chomp + '\n';
} // (See the note for writeScalar.)


function dropEndingNewline(string) {
  return string[string.length - 1] === '\n' ? string.slice(0, -1) : string;
} // Note: a long line without a suitable break point will exceed the width limit.
// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.


function foldString(string, width) {
  // In folded style, $k$ consecutive newlines output as $k+1$ newlines—
  // unless they're before or after a more-indented line, or at the very
  // beginning or end, in which case $k$ maps to $k$.
  // Therefore, parse each chunk as newline(s) followed by a content line.
  var lineRe = /(\n+)([^\n]*)/g; // first line (possibly an empty line)

  var result = function () {
    var nextLF = string.indexOf('\n');
    nextLF = nextLF !== -1 ? nextLF : string.length;
    lineRe.lastIndex = nextLF;
    return foldLine(string.slice(0, nextLF), width);
  }(); // If we haven't reached the first content line yet, don't add an extra \n.


  var prevMoreIndented = string[0] === '\n' || string[0] === ' ';
  var moreIndented; // rest of the lines

  var match;

  while (match = lineRe.exec(string)) {
    var prefix = match[1],
        line = match[2];
    moreIndented = line[0] === ' ';
    result += prefix + (!prevMoreIndented && !moreIndented && line !== '' ? '\n' : '') + foldLine(line, width);
    prevMoreIndented = moreIndented;
  }

  return result;
} // Greedy line breaking.
// Picks the longest line under the limit each time,
// otherwise settles for the shortest line over the limit.
// NB. More-indented lines *cannot* be folded, as that would add an extra \n.


function foldLine(line, width) {
  if (line === '' || line[0] === ' ') return line; // Since a more-indented line adds a \n, breaks can't be followed by a space.

  var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.

  var match; // start is an inclusive index. end, curr, and next are exclusive.

  var start = 0,
      end,
      curr = 0,
      next = 0;
  var result = ''; // Invariants: 0 <= start <= length-1.
  //   0 <= curr <= next <= max(0, length-2). curr - start <= width.
  // Inside the loop:
  //   A match implies length >= 2, so curr and next are <= length-2.

  while (match = breakRe.exec(line)) {
    next = match.index; // maintain invariant: curr - start <= width

    if (next - start > width) {
      end = curr > start ? curr : next; // derive end <= length-2

      result += '\n' + line.slice(start, end); // skip the space that was output as \n

      start = end + 1; // derive start <= length-1
    }

    curr = next;
  } // By the invariants, start <= length-1, so there is something left over.
  // It is either the whole string or a part starting from non-whitespace.


  result += '\n'; // Insert a break if the remainder is too long and there is a break available.

  if (line.length - start > width && curr > start) {
    result += line.slice(start, curr) + '\n' + line.slice(curr + 1);
  } else {
    result += line.slice(start);
  }

  return result.slice(1); // drop extra \n joiner
} // Escapes a double-quoted string.


function escapeString(string) {
  var result = '';
  var char, nextChar;
  var escapeSeq;

  for (var i = 0; i < string.length; i++) {
    char = string.charCodeAt(i); // Check for surrogate pairs (reference Unicode 3.0 section "3.7 Surrogates").

    if (char >= 0xD800 && char <= 0xDBFF
    /* high surrogate */
    ) {
      nextChar = string.charCodeAt(i + 1);

      if (nextChar >= 0xDC00 && nextChar <= 0xDFFF
      /* low surrogate */
      ) {
        // Combine the surrogate pair and store it escaped.
        result += encodeHex((char - 0xD800) * 0x400 + nextChar - 0xDC00 + 0x10000); // Advance index one extra since we already used that char here.

        i++;
        continue;
      }
    }

    escapeSeq = ESCAPE_SEQUENCES[char];
    result += !escapeSeq && isPrintable(char) ? string[i] : escapeSeq || encodeHex(char);
  }

  return result;
}

function writeFlowSequence(state, level, object) {
  var _result = '',
      _tag = state.tag,
      index,
      length;

  for (index = 0, length = object.length; index < length; index += 1) {
    // Write only valid elements.
    if (writeNode(state, level, object[index], false, false)) {
      if (index !== 0) _result += ',' + (!state.condenseFlow ? ' ' : '');
      _result += state.dump;
    }
  }

  state.tag = _tag;
  state.dump = '[' + _result + ']';
}

function writeBlockSequence(state, level, object, compact) {
  var _result = '',
      _tag = state.tag,
      index,
      length;

  for (index = 0, length = object.length; index < length; index += 1) {
    // Write only valid elements.
    if (writeNode(state, level + 1, object[index], true, true)) {
      if (!compact || index !== 0) {
        _result += generateNextLine(state, level);
      }

      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        _result += '-';
      } else {
        _result += '- ';
      }

      _result += state.dump;
    }
  }

  state.tag = _tag;
  state.dump = _result || '[]'; // Empty sequence if no valid values.
}

function writeFlowMapping(state, level, object) {
  var _result = '',
      _tag = state.tag,
      objectKeyList = Object.keys(object),
      index,
      length,
      objectKey,
      objectValue,
      pairBuffer;

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = '';
    if (index !== 0) pairBuffer += ', ';
    if (state.condenseFlow) pairBuffer += '"';
    objectKey = objectKeyList[index];
    objectValue = object[objectKey];

    if (!writeNode(state, level, objectKey, false, false)) {
      continue; // Skip this pair because of invalid key;
    }

    if (state.dump.length > 1024) pairBuffer += '? ';
    pairBuffer += state.dump + (state.condenseFlow ? '"' : '') + ':' + (state.condenseFlow ? '' : ' ');

    if (!writeNode(state, level, objectValue, false, false)) {
      continue; // Skip this pair because of invalid value.
    }

    pairBuffer += state.dump; // Both key and value are valid.

    _result += pairBuffer;
  }

  state.tag = _tag;
  state.dump = '{' + _result + '}';
}

function writeBlockMapping(state, level, object, compact) {
  var _result = '',
      _tag = state.tag,
      objectKeyList = Object.keys(object),
      index,
      length,
      objectKey,
      objectValue,
      explicitPair,
      pairBuffer; // Allow sorting keys so that the output file is deterministic

  if (state.sortKeys === true) {
    // Default sorting
    objectKeyList.sort();
  } else if (typeof state.sortKeys === 'function') {
    // Custom sort function
    objectKeyList.sort(state.sortKeys);
  } else if (state.sortKeys) {
    // Something is wrong
    throw new YAMLException('sortKeys must be a boolean or a function');
  }

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = '';

    if (!compact || index !== 0) {
      pairBuffer += generateNextLine(state, level);
    }

    objectKey = objectKeyList[index];
    objectValue = object[objectKey];

    if (!writeNode(state, level + 1, objectKey, true, true, true)) {
      continue; // Skip this pair because of invalid key.
    }

    explicitPair = state.tag !== null && state.tag !== '?' || state.dump && state.dump.length > 1024;

    if (explicitPair) {
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += '?';
      } else {
        pairBuffer += '? ';
      }
    }

    pairBuffer += state.dump;

    if (explicitPair) {
      pairBuffer += generateNextLine(state, level);
    }

    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
      continue; // Skip this pair because of invalid value.
    }

    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
      pairBuffer += ':';
    } else {
      pairBuffer += ': ';
    }

    pairBuffer += state.dump; // Both key and value are valid.

    _result += pairBuffer;
  }

  state.tag = _tag;
  state.dump = _result || '{}'; // Empty mapping if no valid pairs.
}

function detectType(state, object, explicit) {
  var _result, typeList, index, length, type, style;

  typeList = explicit ? state.explicitTypes : state.implicitTypes;

  for (index = 0, length = typeList.length; index < length; index += 1) {
    type = typeList[index];

    if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === 'object' && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {
      state.tag = explicit ? type.tag : '?';

      if (type.represent) {
        style = state.styleMap[type.tag] || type.defaultStyle;

        if (_toString.call(type.represent) === '[object Function]') {
          _result = type.represent(object, style);
        } else if (_hasOwnProperty.call(type.represent, style)) {
          _result = type.represent[style](object, style);
        } else {
          throw new YAMLException('!<' + type.tag + '> tag resolver accepts not "' + style + '" style');
        }

        state.dump = _result;
      }

      return true;
    }
  }

  return false;
} // Serializes `object` and writes it to global `result`.
// Returns true on success, or false on invalid object.
//


function writeNode(state, level, object, block, compact, iskey) {
  state.tag = null;
  state.dump = object;

  if (!detectType(state, object, false)) {
    detectType(state, object, true);
  }

  var type = _toString.call(state.dump);

  if (block) {
    block = state.flowLevel < 0 || state.flowLevel > level;
  }

  var objectOrArray = type === '[object Object]' || type === '[object Array]',
      duplicateIndex,
      duplicate;

  if (objectOrArray) {
    duplicateIndex = state.duplicates.indexOf(object);
    duplicate = duplicateIndex !== -1;
  }

  if (state.tag !== null && state.tag !== '?' || duplicate || state.indent !== 2 && level > 0) {
    compact = false;
  }

  if (duplicate && state.usedDuplicates[duplicateIndex]) {
    state.dump = '*ref_' + duplicateIndex;
  } else {
    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
      state.usedDuplicates[duplicateIndex] = true;
    }

    if (type === '[object Object]') {
      if (block && Object.keys(state.dump).length !== 0) {
        writeBlockMapping(state, level, state.dump, compact);

        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowMapping(state, level, state.dump);

        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object Array]') {
      var arrayLevel = state.noArrayIndent && level > 0 ? level - 1 : level;

      if (block && state.dump.length !== 0) {
        writeBlockSequence(state, arrayLevel, state.dump, compact);

        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowSequence(state, arrayLevel, state.dump);

        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object String]') {
      if (state.tag !== '?') {
        writeScalar(state, state.dump, level, iskey);
      }
    } else {
      if (state.skipInvalid) return false;
      throw new YAMLException('unacceptable kind of an object to dump ' + type);
    }

    if (state.tag !== null && state.tag !== '?') {
      state.dump = '!<' + state.tag + '> ' + state.dump;
    }
  }

  return true;
}

function getDuplicateReferences(object, state) {
  var objects = [],
      duplicatesIndexes = [],
      index,
      length;
  inspectNode(object, objects, duplicatesIndexes);

  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
    state.duplicates.push(objects[duplicatesIndexes[index]]);
  }

  state.usedDuplicates = new Array(length);
}

function inspectNode(object, objects, duplicatesIndexes) {
  var objectKeyList, index, length;

  if (object !== null && typeof object === 'object') {
    index = objects.indexOf(object);

    if (index !== -1) {
      if (duplicatesIndexes.indexOf(index) === -1) {
        duplicatesIndexes.push(index);
      }
    } else {
      objects.push(object);

      if (Array.isArray(object)) {
        for (index = 0, length = object.length; index < length; index += 1) {
          inspectNode(object[index], objects, duplicatesIndexes);
        }
      } else {
        objectKeyList = Object.keys(object);

        for (index = 0, length = objectKeyList.length; index < length; index += 1) {
          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
        }
      }
    }
  }
}

function dump(input, options) {
  options = options || {};
  var state = new State(options);
  if (!state.noRefs) getDuplicateReferences(input, state);
  if (writeNode(state, 0, input, true, true)) return state.dump + '\n';
  return '';
}

function safeDump(input, options) {
  return dump(input, common.extend({
    schema: DEFAULT_SAFE_SCHEMA
  }, options));
}

module.exports.dump = dump;
module.exports.safeDump = safeDump;

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/exception.js":
/***/ ((module) => {

"use strict";
// YAML error class. http://stackoverflow.com/questions/8458984
//


function YAMLException(reason, mark) {
  // Super constructor
  Error.call(this);
  this.name = 'YAMLException';
  this.reason = reason;
  this.mark = mark;
  this.message = (this.reason || '(unknown reason)') + (this.mark ? ' ' + this.mark.toString() : ''); // Include stack trace in error object

  if (Error.captureStackTrace) {
    // Chrome and NodeJS
    Error.captureStackTrace(this, this.constructor);
  } else {
    // FF, IE 10+ and Safari 6+. Fallback for others
    this.stack = new Error().stack || '';
  }
} // Inherit from Error


YAMLException.prototype = Object.create(Error.prototype);
YAMLException.prototype.constructor = YAMLException;

YAMLException.prototype.toString = function toString(compact) {
  var result = this.name + ': ';
  result += this.reason || '(unknown reason)';

  if (!compact && this.mark) {
    result += ' ' + this.mark.toString();
  }

  return result;
};

module.exports = YAMLException;

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/loader.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/*eslint-disable max-len,no-use-before-define*/

var common = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/common.js");

var YAMLException = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/exception.js");

var Mark = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/mark.js");

var DEFAULT_SAFE_SCHEMA = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js");

var DEFAULT_FULL_SCHEMA = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/default_full.js");

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var CONTEXT_FLOW_IN = 1;
var CONTEXT_FLOW_OUT = 2;
var CONTEXT_BLOCK_IN = 3;
var CONTEXT_BLOCK_OUT = 4;
var CHOMPING_CLIP = 1;
var CHOMPING_STRIP = 2;
var CHOMPING_KEEP = 3;
var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;

function _class(obj) {
  return Object.prototype.toString.call(obj);
}

function is_EOL(c) {
  return c === 0x0A
  /* LF */
  || c === 0x0D
  /* CR */
  ;
}

function is_WHITE_SPACE(c) {
  return c === 0x09
  /* Tab */
  || c === 0x20
  /* Space */
  ;
}

function is_WS_OR_EOL(c) {
  return c === 0x09
  /* Tab */
  || c === 0x20
  /* Space */
  || c === 0x0A
  /* LF */
  || c === 0x0D
  /* CR */
  ;
}

function is_FLOW_INDICATOR(c) {
  return c === 0x2C
  /* , */
  || c === 0x5B
  /* [ */
  || c === 0x5D
  /* ] */
  || c === 0x7B
  /* { */
  || c === 0x7D
  /* } */
  ;
}

function fromHexCode(c) {
  var lc;

  if (0x30
  /* 0 */
  <= c && c <= 0x39
  /* 9 */
  ) {
    return c - 0x30;
  }
  /*eslint-disable no-bitwise*/


  lc = c | 0x20;

  if (0x61
  /* a */
  <= lc && lc <= 0x66
  /* f */
  ) {
    return lc - 0x61 + 10;
  }

  return -1;
}

function escapedHexLen(c) {
  if (c === 0x78
  /* x */
  ) {
    return 2;
  }

  if (c === 0x75
  /* u */
  ) {
    return 4;
  }

  if (c === 0x55
  /* U */
  ) {
    return 8;
  }

  return 0;
}

function fromDecimalCode(c) {
  if (0x30
  /* 0 */
  <= c && c <= 0x39
  /* 9 */
  ) {
    return c - 0x30;
  }

  return -1;
}

function simpleEscapeSequence(c) {
  /* eslint-disable indent */
  return c === 0x30
  /* 0 */
  ? '\x00' : c === 0x61
  /* a */
  ? '\x07' : c === 0x62
  /* b */
  ? '\x08' : c === 0x74
  /* t */
  ? '\x09' : c === 0x09
  /* Tab */
  ? '\x09' : c === 0x6E
  /* n */
  ? '\x0A' : c === 0x76
  /* v */
  ? '\x0B' : c === 0x66
  /* f */
  ? '\x0C' : c === 0x72
  /* r */
  ? '\x0D' : c === 0x65
  /* e */
  ? '\x1B' : c === 0x20
  /* Space */
  ? ' ' : c === 0x22
  /* " */
  ? '\x22' : c === 0x2F
  /* / */
  ? '/' : c === 0x5C
  /* \ */
  ? '\x5C' : c === 0x4E
  /* N */
  ? '\x85' : c === 0x5F
  /* _ */
  ? '\xA0' : c === 0x4C
  /* L */
  ? '\u2028' : c === 0x50
  /* P */
  ? '\u2029' : '';
}

function charFromCodepoint(c) {
  if (c <= 0xFFFF) {
    return String.fromCharCode(c);
  } // Encode UTF-16 surrogate pair
  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF


  return String.fromCharCode((c - 0x010000 >> 10) + 0xD800, (c - 0x010000 & 0x03FF) + 0xDC00);
}

var simpleEscapeCheck = new Array(256); // integer, for fast access

var simpleEscapeMap = new Array(256);

for (var i = 0; i < 256; i++) {
  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
  simpleEscapeMap[i] = simpleEscapeSequence(i);
}

function State(input, options) {
  this.input = input;
  this.filename = options['filename'] || null;
  this.schema = options['schema'] || DEFAULT_FULL_SCHEMA;
  this.onWarning = options['onWarning'] || null;
  this.legacy = options['legacy'] || false;
  this.json = options['json'] || false;
  this.listener = options['listener'] || null;
  this.implicitTypes = this.schema.compiledImplicit;
  this.typeMap = this.schema.compiledTypeMap;
  this.length = input.length;
  this.position = 0;
  this.line = 0;
  this.lineStart = 0;
  this.lineIndent = 0;
  this.documents = [];
  /*
  this.version;
  this.checkLineBreaks;
  this.tagMap;
  this.anchorMap;
  this.tag;
  this.anchor;
  this.kind;
  this.result;*/
}

function generateError(state, message) {
  return new YAMLException(message, new Mark(state.filename, state.input, state.position, state.line, state.position - state.lineStart));
}

function throwError(state, message) {
  throw generateError(state, message);
}

function throwWarning(state, message) {
  if (state.onWarning) {
    state.onWarning.call(null, generateError(state, message));
  }
}

var directiveHandlers = {
  YAML: function handleYamlDirective(state, name, args) {
    var match, major, minor;

    if (state.version !== null) {
      throwError(state, 'duplication of %YAML directive');
    }

    if (args.length !== 1) {
      throwError(state, 'YAML directive accepts exactly one argument');
    }

    match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);

    if (match === null) {
      throwError(state, 'ill-formed argument of the YAML directive');
    }

    major = parseInt(match[1], 10);
    minor = parseInt(match[2], 10);

    if (major !== 1) {
      throwError(state, 'unacceptable YAML version of the document');
    }

    state.version = args[0];
    state.checkLineBreaks = minor < 2;

    if (minor !== 1 && minor !== 2) {
      throwWarning(state, 'unsupported YAML version of the document');
    }
  },
  TAG: function handleTagDirective(state, name, args) {
    var handle, prefix;

    if (args.length !== 2) {
      throwError(state, 'TAG directive accepts exactly two arguments');
    }

    handle = args[0];
    prefix = args[1];

    if (!PATTERN_TAG_HANDLE.test(handle)) {
      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');
    }

    if (_hasOwnProperty.call(state.tagMap, handle)) {
      throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
    }

    if (!PATTERN_TAG_URI.test(prefix)) {
      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');
    }

    state.tagMap[handle] = prefix;
  }
};

function captureSegment(state, start, end, checkJson) {
  var _position, _length, _character, _result;

  if (start < end) {
    _result = state.input.slice(start, end);

    if (checkJson) {
      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
        _character = _result.charCodeAt(_position);

        if (!(_character === 0x09 || 0x20 <= _character && _character <= 0x10FFFF)) {
          throwError(state, 'expected valid JSON character');
        }
      }
    } else if (PATTERN_NON_PRINTABLE.test(_result)) {
      throwError(state, 'the stream contains non-printable characters');
    }

    state.result += _result;
  }
}

function mergeMappings(state, destination, source, overridableKeys) {
  var sourceKeys, key, index, quantity;

  if (!common.isObject(source)) {
    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');
  }

  sourceKeys = Object.keys(source);

  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
    key = sourceKeys[index];

    if (!_hasOwnProperty.call(destination, key)) {
      destination[key] = source[key];
      overridableKeys[key] = true;
    }
  }
}

function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {
  var index, quantity; // The output is a plain object here, so keys can only be strings.
  // We need to convert keyNode to a string, but doing so can hang the process
  // (deeply nested arrays that explode exponentially using aliases).

  if (Array.isArray(keyNode)) {
    keyNode = Array.prototype.slice.call(keyNode);

    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
      if (Array.isArray(keyNode[index])) {
        throwError(state, 'nested arrays are not supported inside keys');
      }

      if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {
        keyNode[index] = '[object Object]';
      }
    }
  } // Avoid code execution in load() via toString property
  // (still use its own toString for arrays, timestamps,
  // and whatever user schema extensions happen to have @@toStringTag)


  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {
    keyNode = '[object Object]';
  }

  keyNode = String(keyNode);

  if (_result === null) {
    _result = {};
  }

  if (keyTag === 'tag:yaml.org,2002:merge') {
    if (Array.isArray(valueNode)) {
      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
        mergeMappings(state, _result, valueNode[index], overridableKeys);
      }
    } else {
      mergeMappings(state, _result, valueNode, overridableKeys);
    }
  } else {
    if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {
      state.line = startLine || state.line;
      state.position = startPos || state.position;
      throwError(state, 'duplicated mapping key');
    }

    _result[keyNode] = valueNode;
    delete overridableKeys[keyNode];
  }

  return _result;
}

function readLineBreak(state) {
  var ch;
  ch = state.input.charCodeAt(state.position);

  if (ch === 0x0A
  /* LF */
  ) {
    state.position++;
  } else if (ch === 0x0D
  /* CR */
  ) {
    state.position++;

    if (state.input.charCodeAt(state.position) === 0x0A
    /* LF */
    ) {
      state.position++;
    }
  } else {
    throwError(state, 'a line break is expected');
  }

  state.line += 1;
  state.lineStart = state.position;
}

function skipSeparationSpace(state, allowComments, checkIndent) {
  var lineBreaks = 0,
      ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    while (is_WHITE_SPACE(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }

    if (allowComments && ch === 0x23
    /* # */
    ) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 0x0A
      /* LF */
      && ch !== 0x0D
      /* CR */
      && ch !== 0);
    }

    if (is_EOL(ch)) {
      readLineBreak(state);
      ch = state.input.charCodeAt(state.position);
      lineBreaks++;
      state.lineIndent = 0;

      while (ch === 0x20
      /* Space */
      ) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
    } else {
      break;
    }
  }

  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
    throwWarning(state, 'deficient indentation');
  }

  return lineBreaks;
}

function testDocumentSeparator(state) {
  var _position = state.position,
      ch;
  ch = state.input.charCodeAt(_position); // Condition state.position === state.lineStart is tested
  // in parent on each call, for efficiency. No needs to test here again.

  if ((ch === 0x2D
  /* - */
  || ch === 0x2E
  /* . */
  ) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
    _position += 3;
    ch = state.input.charCodeAt(_position);

    if (ch === 0 || is_WS_OR_EOL(ch)) {
      return true;
    }
  }

  return false;
}

function writeFoldedLines(state, count) {
  if (count === 1) {
    state.result += ' ';
  } else if (count > 1) {
    state.result += common.repeat('\n', count - 1);
  }
}

function readPlainScalar(state, nodeIndent, withinFlowCollection) {
  var preceding,
      following,
      captureStart,
      captureEnd,
      hasPendingContent,
      _line,
      _lineStart,
      _lineIndent,
      _kind = state.kind,
      _result = state.result,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 0x23
  /* # */
  || ch === 0x26
  /* & */
  || ch === 0x2A
  /* * */
  || ch === 0x21
  /* ! */
  || ch === 0x7C
  /* | */
  || ch === 0x3E
  /* > */
  || ch === 0x27
  /* ' */
  || ch === 0x22
  /* " */
  || ch === 0x25
  /* % */
  || ch === 0x40
  /* @ */
  || ch === 0x60
  /* ` */
  ) {
    return false;
  }

  if (ch === 0x3F
  /* ? */
  || ch === 0x2D
  /* - */
  ) {
    following = state.input.charCodeAt(state.position + 1);

    if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
      return false;
    }
  }

  state.kind = 'scalar';
  state.result = '';
  captureStart = captureEnd = state.position;
  hasPendingContent = false;

  while (ch !== 0) {
    if (ch === 0x3A
    /* : */
    ) {
      following = state.input.charCodeAt(state.position + 1);

      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
        break;
      }
    } else if (ch === 0x23
    /* # */
    ) {
      preceding = state.input.charCodeAt(state.position - 1);

      if (is_WS_OR_EOL(preceding)) {
        break;
      }
    } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
      break;
    } else if (is_EOL(ch)) {
      _line = state.line;
      _lineStart = state.lineStart;
      _lineIndent = state.lineIndent;
      skipSeparationSpace(state, false, -1);

      if (state.lineIndent >= nodeIndent) {
        hasPendingContent = true;
        ch = state.input.charCodeAt(state.position);
        continue;
      } else {
        state.position = captureEnd;
        state.line = _line;
        state.lineStart = _lineStart;
        state.lineIndent = _lineIndent;
        break;
      }
    }

    if (hasPendingContent) {
      captureSegment(state, captureStart, captureEnd, false);
      writeFoldedLines(state, state.line - _line);
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
    }

    if (!is_WHITE_SPACE(ch)) {
      captureEnd = state.position + 1;
    }

    ch = state.input.charCodeAt(++state.position);
  }

  captureSegment(state, captureStart, captureEnd, false);

  if (state.result) {
    return true;
  }

  state.kind = _kind;
  state.result = _result;
  return false;
}

function readSingleQuotedScalar(state, nodeIndent) {
  var ch, captureStart, captureEnd;
  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x27
  /* ' */
  ) {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x27
    /* ' */
    ) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);

      if (ch === 0x27
      /* ' */
      ) {
        captureStart = state.position;
        state.position++;
        captureEnd = state.position;
      } else {
        return true;
      }
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a single quoted scalar');
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }

  throwError(state, 'unexpected end of the stream within a single quoted scalar');
}

function readDoubleQuotedScalar(state, nodeIndent) {
  var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x22
  /* " */
  ) {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x22
    /* " */
    ) {
      captureSegment(state, captureStart, state.position, true);
      state.position++;
      return true;
    } else if (ch === 0x5C
    /* \ */
    ) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);

      if (is_EOL(ch)) {
        skipSeparationSpace(state, false, nodeIndent); // TODO: rework to inline fn with no type cast?
      } else if (ch < 256 && simpleEscapeCheck[ch]) {
        state.result += simpleEscapeMap[ch];
        state.position++;
      } else if ((tmp = escapedHexLen(ch)) > 0) {
        hexLength = tmp;
        hexResult = 0;

        for (; hexLength > 0; hexLength--) {
          ch = state.input.charCodeAt(++state.position);

          if ((tmp = fromHexCode(ch)) >= 0) {
            hexResult = (hexResult << 4) + tmp;
          } else {
            throwError(state, 'expected hexadecimal character');
          }
        }

        state.result += charFromCodepoint(hexResult);
        state.position++;
      } else {
        throwError(state, 'unknown escape sequence');
      }

      captureStart = captureEnd = state.position;
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a double quoted scalar');
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }

  throwError(state, 'unexpected end of the stream within a double quoted scalar');
}

function readFlowCollection(state, nodeIndent) {
  var readNext = true,
      _line,
      _tag = state.tag,
      _result,
      _anchor = state.anchor,
      following,
      terminator,
      isPair,
      isExplicitPair,
      isMapping,
      overridableKeys = {},
      keyNode,
      keyTag,
      valueNode,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x5B
  /* [ */
  ) {
    terminator = 0x5D;
    /* ] */

    isMapping = false;
    _result = [];
  } else if (ch === 0x7B
  /* { */
  ) {
    terminator = 0x7D;
    /* } */

    isMapping = true;
    _result = {};
  } else {
    return false;
  }

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(++state.position);

  while (ch !== 0) {
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);

    if (ch === terminator) {
      state.position++;
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = isMapping ? 'mapping' : 'sequence';
      state.result = _result;
      return true;
    } else if (!readNext) {
      throwError(state, 'missed comma between flow collection entries');
    }

    keyTag = keyNode = valueNode = null;
    isPair = isExplicitPair = false;

    if (ch === 0x3F
    /* ? */
    ) {
      following = state.input.charCodeAt(state.position + 1);

      if (is_WS_OR_EOL(following)) {
        isPair = isExplicitPair = true;
        state.position++;
        skipSeparationSpace(state, true, nodeIndent);
      }
    }

    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
    keyTag = state.tag;
    keyNode = state.result;
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);

    if ((isExplicitPair || state.line === _line) && ch === 0x3A
    /* : */
    ) {
      isPair = true;
      ch = state.input.charCodeAt(++state.position);
      skipSeparationSpace(state, true, nodeIndent);
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
      valueNode = state.result;
    }

    if (isMapping) {
      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);
    } else if (isPair) {
      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));
    } else {
      _result.push(keyNode);
    }

    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);

    if (ch === 0x2C
    /* , */
    ) {
      readNext = true;
      ch = state.input.charCodeAt(++state.position);
    } else {
      readNext = false;
    }
  }

  throwError(state, 'unexpected end of the stream within a flow collection');
}

function readBlockScalar(state, nodeIndent) {
  var captureStart,
      folding,
      chomping = CHOMPING_CLIP,
      didReadContent = false,
      detectedIndent = false,
      textIndent = nodeIndent,
      emptyLines = 0,
      atMoreIndented = false,
      tmp,
      ch;
  ch = state.input.charCodeAt(state.position);

  if (ch === 0x7C
  /* | */
  ) {
    folding = false;
  } else if (ch === 0x3E
  /* > */
  ) {
    folding = true;
  } else {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';

  while (ch !== 0) {
    ch = state.input.charCodeAt(++state.position);

    if (ch === 0x2B
    /* + */
    || ch === 0x2D
    /* - */
    ) {
      if (CHOMPING_CLIP === chomping) {
        chomping = ch === 0x2B
        /* + */
        ? CHOMPING_KEEP : CHOMPING_STRIP;
      } else {
        throwError(state, 'repeat of a chomping mode identifier');
      }
    } else if ((tmp = fromDecimalCode(ch)) >= 0) {
      if (tmp === 0) {
        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');
      } else if (!detectedIndent) {
        textIndent = nodeIndent + tmp - 1;
        detectedIndent = true;
      } else {
        throwError(state, 'repeat of an indentation width identifier');
      }
    } else {
      break;
    }
  }

  if (is_WHITE_SPACE(ch)) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (is_WHITE_SPACE(ch));

    if (ch === 0x23
    /* # */
    ) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (!is_EOL(ch) && ch !== 0);
    }
  }

  while (ch !== 0) {
    readLineBreak(state);
    state.lineIndent = 0;
    ch = state.input.charCodeAt(state.position);

    while ((!detectedIndent || state.lineIndent < textIndent) && ch === 0x20
    /* Space */
    ) {
      state.lineIndent++;
      ch = state.input.charCodeAt(++state.position);
    }

    if (!detectedIndent && state.lineIndent > textIndent) {
      textIndent = state.lineIndent;
    }

    if (is_EOL(ch)) {
      emptyLines++;
      continue;
    } // End of the scalar.


    if (state.lineIndent < textIndent) {
      // Perform the chomping.
      if (chomping === CHOMPING_KEEP) {
        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
      } else if (chomping === CHOMPING_CLIP) {
        if (didReadContent) {
          // i.e. only if the scalar is not empty.
          state.result += '\n';
        }
      } // Break this `while` cycle and go to the funciton's epilogue.


      break;
    } // Folded style: use fancy rules to handle line breaks.


    if (folding) {
      // Lines starting with white space characters (more-indented lines) are not folded.
      if (is_WHITE_SPACE(ch)) {
        atMoreIndented = true; // except for the first content line (cf. Example 8.1)

        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines); // End of more-indented block.
      } else if (atMoreIndented) {
        atMoreIndented = false;
        state.result += common.repeat('\n', emptyLines + 1); // Just one line break - perceive as the same line.
      } else if (emptyLines === 0) {
        if (didReadContent) {
          // i.e. only if we have already read some scalar content.
          state.result += ' ';
        } // Several line breaks - perceive as different lines.

      } else {
        state.result += common.repeat('\n', emptyLines);
      } // Literal style: just add exact number of line breaks between content lines.

    } else {
      // Keep all line breaks except the header line break.
      state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
    }

    didReadContent = true;
    detectedIndent = true;
    emptyLines = 0;
    captureStart = state.position;

    while (!is_EOL(ch) && ch !== 0) {
      ch = state.input.charCodeAt(++state.position);
    }

    captureSegment(state, captureStart, state.position, false);
  }

  return true;
}

function readBlockSequence(state, nodeIndent) {
  var _line,
      _tag = state.tag,
      _anchor = state.anchor,
      _result = [],
      following,
      detected = false,
      ch;

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    if (ch !== 0x2D
    /* - */
    ) {
      break;
    }

    following = state.input.charCodeAt(state.position + 1);

    if (!is_WS_OR_EOL(following)) {
      break;
    }

    detected = true;
    state.position++;

    if (skipSeparationSpace(state, true, -1)) {
      if (state.lineIndent <= nodeIndent) {
        _result.push(null);

        ch = state.input.charCodeAt(state.position);
        continue;
      }
    }

    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);

    _result.push(state.result);

    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);

    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, 'bad indentation of a sequence entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }

  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'sequence';
    state.result = _result;
    return true;
  }

  return false;
}

function readBlockMapping(state, nodeIndent, flowIndent) {
  var following,
      allowCompact,
      _line,
      _pos,
      _tag = state.tag,
      _anchor = state.anchor,
      _result = {},
      overridableKeys = {},
      keyTag = null,
      keyNode = null,
      valueNode = null,
      atExplicitKey = false,
      detected = false,
      ch;

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    following = state.input.charCodeAt(state.position + 1);
    _line = state.line; // Save the current line.

    _pos = state.position; //
    // Explicit notation case. There are two separate blocks:
    // first for the key (denoted by "?") and second for the value (denoted by ":")
    //

    if ((ch === 0x3F
    /* ? */
    || ch === 0x3A
    /* : */
    ) && is_WS_OR_EOL(following)) {
      if (ch === 0x3F
      /* ? */
      ) {
        if (atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
          keyTag = keyNode = valueNode = null;
        }

        detected = true;
        atExplicitKey = true;
        allowCompact = true;
      } else if (atExplicitKey) {
        // i.e. 0x3A/* : */ === character after the explicit key.
        atExplicitKey = false;
        allowCompact = true;
      } else {
        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');
      }

      state.position += 1;
      ch = following; //
      // Implicit notation case. Flow-style node as the key first, then ":", and the value.
      //
    } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
      if (state.line === _line) {
        ch = state.input.charCodeAt(state.position);

        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }

        if (ch === 0x3A
        /* : */
        ) {
          ch = state.input.charCodeAt(++state.position);

          if (!is_WS_OR_EOL(ch)) {
            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');
          }

          if (atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
            keyTag = keyNode = valueNode = null;
          }

          detected = true;
          atExplicitKey = false;
          allowCompact = false;
          keyTag = state.tag;
          keyNode = state.result;
        } else if (detected) {
          throwError(state, 'can not read an implicit mapping pair; a colon is missed');
        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true; // Keep the result of `composeNode`.
        }
      } else if (detected) {
        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');
      } else {
        state.tag = _tag;
        state.anchor = _anchor;
        return true; // Keep the result of `composeNode`.
      }
    } else {
      break; // Reading is done. Go to the epilogue.
    } //
    // Common reading code for both explicit and implicit notations.
    //


    if (state.line === _line || state.lineIndent > nodeIndent) {
      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
        if (atExplicitKey) {
          keyNode = state.result;
        } else {
          valueNode = state.result;
        }
      }

      if (!atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);
        keyTag = keyNode = valueNode = null;
      }

      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
    }

    if (state.lineIndent > nodeIndent && ch !== 0) {
      throwError(state, 'bad indentation of a mapping entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  } //
  // Epilogue.
  //
  // Special case: last mapping's node contains only the key in explicit notation.


  if (atExplicitKey) {
    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
  } // Expose the resulting mapping.


  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'mapping';
    state.result = _result;
  }

  return detected;
}

function readTagProperty(state) {
  var _position,
      isVerbatim = false,
      isNamed = false,
      tagHandle,
      tagName,
      ch;

  ch = state.input.charCodeAt(state.position);
  if (ch !== 0x21
  /* ! */
  ) return false;

  if (state.tag !== null) {
    throwError(state, 'duplication of a tag property');
  }

  ch = state.input.charCodeAt(++state.position);

  if (ch === 0x3C
  /* < */
  ) {
    isVerbatim = true;
    ch = state.input.charCodeAt(++state.position);
  } else if (ch === 0x21
  /* ! */
  ) {
    isNamed = true;
    tagHandle = '!!';
    ch = state.input.charCodeAt(++state.position);
  } else {
    tagHandle = '!';
  }

  _position = state.position;

  if (isVerbatim) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (ch !== 0 && ch !== 0x3E
    /* > */
    );

    if (state.position < state.length) {
      tagName = state.input.slice(_position, state.position);
      ch = state.input.charCodeAt(++state.position);
    } else {
      throwError(state, 'unexpected end of the stream within a verbatim tag');
    }
  } else {
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      if (ch === 0x21
      /* ! */
      ) {
        if (!isNamed) {
          tagHandle = state.input.slice(_position - 1, state.position + 1);

          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
            throwError(state, 'named tag handle cannot contain such characters');
          }

          isNamed = true;
          _position = state.position + 1;
        } else {
          throwError(state, 'tag suffix cannot contain exclamation marks');
        }
      }

      ch = state.input.charCodeAt(++state.position);
    }

    tagName = state.input.slice(_position, state.position);

    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
      throwError(state, 'tag suffix cannot contain flow indicator characters');
    }
  }

  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
    throwError(state, 'tag name cannot contain such characters: ' + tagName);
  }

  if (isVerbatim) {
    state.tag = tagName;
  } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
    state.tag = state.tagMap[tagHandle] + tagName;
  } else if (tagHandle === '!') {
    state.tag = '!' + tagName;
  } else if (tagHandle === '!!') {
    state.tag = 'tag:yaml.org,2002:' + tagName;
  } else {
    throwError(state, 'undeclared tag handle "' + tagHandle + '"');
  }

  return true;
}

function readAnchorProperty(state) {
  var _position, ch;

  ch = state.input.charCodeAt(state.position);
  if (ch !== 0x26
  /* & */
  ) return false;

  if (state.anchor !== null) {
    throwError(state, 'duplication of an anchor property');
  }

  ch = state.input.charCodeAt(++state.position);
  _position = state.position;

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }

  if (state.position === _position) {
    throwError(state, 'name of an anchor node must contain at least one character');
  }

  state.anchor = state.input.slice(_position, state.position);
  return true;
}

function readAlias(state) {
  var _position, alias, ch;

  ch = state.input.charCodeAt(state.position);
  if (ch !== 0x2A
  /* * */
  ) return false;
  ch = state.input.charCodeAt(++state.position);
  _position = state.position;

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }

  if (state.position === _position) {
    throwError(state, 'name of an alias node must contain at least one character');
  }

  alias = state.input.slice(_position, state.position);

  if (!_hasOwnProperty.call(state.anchorMap, alias)) {
    throwError(state, 'unidentified alias "' + alias + '"');
  }

  state.result = state.anchorMap[alias];
  skipSeparationSpace(state, true, -1);
  return true;
}

function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
  var allowBlockStyles,
      allowBlockScalars,
      allowBlockCollections,
      indentStatus = 1,
      // 1: this>parent, 0: this=parent, -1: this<parent
  atNewLine = false,
      hasContent = false,
      typeIndex,
      typeQuantity,
      type,
      flowIndent,
      blockIndent;

  if (state.listener !== null) {
    state.listener('open', state);
  }

  state.tag = null;
  state.anchor = null;
  state.kind = null;
  state.result = null;
  allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;

  if (allowToSeek) {
    if (skipSeparationSpace(state, true, -1)) {
      atNewLine = true;

      if (state.lineIndent > parentIndent) {
        indentStatus = 1;
      } else if (state.lineIndent === parentIndent) {
        indentStatus = 0;
      } else if (state.lineIndent < parentIndent) {
        indentStatus = -1;
      }
    }
  }

  if (indentStatus === 1) {
    while (readTagProperty(state) || readAnchorProperty(state)) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        allowBlockCollections = allowBlockStyles;

        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      } else {
        allowBlockCollections = false;
      }
    }
  }

  if (allowBlockCollections) {
    allowBlockCollections = atNewLine || allowCompact;
  }

  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
      flowIndent = parentIndent;
    } else {
      flowIndent = parentIndent + 1;
    }

    blockIndent = state.position - state.lineStart;

    if (indentStatus === 1) {
      if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
        hasContent = true;
      } else {
        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
          hasContent = true;
        } else if (readAlias(state)) {
          hasContent = true;

          if (state.tag !== null || state.anchor !== null) {
            throwError(state, 'alias node should not have any properties');
          }
        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
          hasContent = true;

          if (state.tag === null) {
            state.tag = '?';
          }
        }

        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else if (indentStatus === 0) {
      // Special case: block sequences are allowed to have same indentation level as the parent.
      // http://www.yaml.org/spec/1.2/spec.html#id2799784
      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
    }
  }

  if (state.tag !== null && state.tag !== '!') {
    if (state.tag === '?') {
      // Implicit resolving is not allowed for non-scalar types, and '?'
      // non-specific tag is only automatically assigned to plain scalars.
      //
      // We only need to check kind conformity in case user explicitly assigns '?'
      // tag, for example like this: "!<?> [0]"
      //
      if (state.result !== null && state.kind !== 'scalar') {
        throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
      }

      for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
        type = state.implicitTypes[typeIndex];

        if (type.resolve(state.result)) {
          // `state.result` updated in resolver if matched
          state.result = type.construct(state.result);
          state.tag = type.tag;

          if (state.anchor !== null) {
            state.anchorMap[state.anchor] = state.result;
          }

          break;
        }
      }
    } else if (_hasOwnProperty.call(state.typeMap[state.kind || 'fallback'], state.tag)) {
      type = state.typeMap[state.kind || 'fallback'][state.tag];

      if (state.result !== null && type.kind !== state.kind) {
        throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
      }

      if (!type.resolve(state.result)) {
        // `state.result` updated in resolver if matched
        throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');
      } else {
        state.result = type.construct(state.result);

        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else {
      throwError(state, 'unknown tag !<' + state.tag + '>');
    }
  }

  if (state.listener !== null) {
    state.listener('close', state);
  }

  return state.tag !== null || state.anchor !== null || hasContent;
}

function readDocument(state) {
  var documentStart = state.position,
      _position,
      directiveName,
      directiveArgs,
      hasDirectives = false,
      ch;

  state.version = null;
  state.checkLineBreaks = state.legacy;
  state.tagMap = {};
  state.anchorMap = {};

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);

    if (state.lineIndent > 0 || ch !== 0x25
    /* % */
    ) {
      break;
    }

    hasDirectives = true;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;

    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }

    directiveName = state.input.slice(_position, state.position);
    directiveArgs = [];

    if (directiveName.length < 1) {
      throwError(state, 'directive name must not be less than one character in length');
    }

    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      if (ch === 0x23
      /* # */
      ) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && !is_EOL(ch));

        break;
      }

      if (is_EOL(ch)) break;
      _position = state.position;

      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      directiveArgs.push(state.input.slice(_position, state.position));
    }

    if (ch !== 0) readLineBreak(state);

    if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
      directiveHandlers[directiveName](state, directiveName, directiveArgs);
    } else {
      throwWarning(state, 'unknown document directive "' + directiveName + '"');
    }
  }

  skipSeparationSpace(state, true, -1);

  if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 0x2D
  /* - */
  && state.input.charCodeAt(state.position + 1) === 0x2D
  /* - */
  && state.input.charCodeAt(state.position + 2) === 0x2D
  /* - */
  ) {
    state.position += 3;
    skipSeparationSpace(state, true, -1);
  } else if (hasDirectives) {
    throwError(state, 'directives end mark is expected');
  }

  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
  skipSeparationSpace(state, true, -1);

  if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
    throwWarning(state, 'non-ASCII line breaks are interpreted as content');
  }

  state.documents.push(state.result);

  if (state.position === state.lineStart && testDocumentSeparator(state)) {
    if (state.input.charCodeAt(state.position) === 0x2E
    /* . */
    ) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    }

    return;
  }

  if (state.position < state.length - 1) {
    throwError(state, 'end of the stream or a document separator is expected');
  } else {
    return;
  }
}

function loadDocuments(input, options) {
  input = String(input);
  options = options || {};

  if (input.length !== 0) {
    // Add tailing `\n` if not exists
    if (input.charCodeAt(input.length - 1) !== 0x0A
    /* LF */
    && input.charCodeAt(input.length - 1) !== 0x0D
    /* CR */
    ) {
      input += '\n';
    } // Strip BOM


    if (input.charCodeAt(0) === 0xFEFF) {
      input = input.slice(1);
    }
  }

  var state = new State(input, options);
  var nullpos = input.indexOf('\0');

  if (nullpos !== -1) {
    state.position = nullpos;
    throwError(state, 'null byte is not allowed in input');
  } // Use 0 as string terminator. That significantly simplifies bounds check.


  state.input += '\0';

  while (state.input.charCodeAt(state.position) === 0x20
  /* Space */
  ) {
    state.lineIndent += 1;
    state.position += 1;
  }

  while (state.position < state.length - 1) {
    readDocument(state);
  }

  return state.documents;
}

function loadAll(input, iterator, options) {
  if (iterator !== null && typeof iterator === 'object' && typeof options === 'undefined') {
    options = iterator;
    iterator = null;
  }

  var documents = loadDocuments(input, options);

  if (typeof iterator !== 'function') {
    return documents;
  }

  for (var index = 0, length = documents.length; index < length; index += 1) {
    iterator(documents[index]);
  }
}

function load(input, options) {
  var documents = loadDocuments(input, options);

  if (documents.length === 0) {
    /*eslint-disable no-undefined*/
    return undefined;
  } else if (documents.length === 1) {
    return documents[0];
  }

  throw new YAMLException('expected a single document in the stream, but found more');
}

function safeLoadAll(input, iterator, options) {
  if (typeof iterator === 'object' && iterator !== null && typeof options === 'undefined') {
    options = iterator;
    iterator = null;
  }

  return loadAll(input, iterator, common.extend({
    schema: DEFAULT_SAFE_SCHEMA
  }, options));
}

function safeLoad(input, options) {
  return load(input, common.extend({
    schema: DEFAULT_SAFE_SCHEMA
  }, options));
}

module.exports.loadAll = loadAll;
module.exports.load = load;
module.exports.safeLoadAll = safeLoadAll;
module.exports.safeLoad = safeLoad;

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/mark.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var common = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/common.js");

function Mark(name, buffer, position, line, column) {
  this.name = name;
  this.buffer = buffer;
  this.position = position;
  this.line = line;
  this.column = column;
}

Mark.prototype.getSnippet = function getSnippet(indent, maxLength) {
  var head, start, tail, end, snippet;
  if (!this.buffer) return null;
  indent = indent || 4;
  maxLength = maxLength || 75;
  head = '';
  start = this.position;

  while (start > 0 && '\x00\r\n\x85\u2028\u2029'.indexOf(this.buffer.charAt(start - 1)) === -1) {
    start -= 1;

    if (this.position - start > maxLength / 2 - 1) {
      head = ' ... ';
      start += 5;
      break;
    }
  }

  tail = '';
  end = this.position;

  while (end < this.buffer.length && '\x00\r\n\x85\u2028\u2029'.indexOf(this.buffer.charAt(end)) === -1) {
    end += 1;

    if (end - this.position > maxLength / 2 - 1) {
      tail = ' ... ';
      end -= 5;
      break;
    }
  }

  snippet = this.buffer.slice(start, end);
  return common.repeat(' ', indent) + head + snippet + tail + '\n' + common.repeat(' ', indent + this.position - start + head.length) + '^';
};

Mark.prototype.toString = function toString(compact) {
  var snippet,
      where = '';

  if (this.name) {
    where += 'in "' + this.name + '" ';
  }

  where += 'at line ' + (this.line + 1) + ', column ' + (this.column + 1);

  if (!compact) {
    snippet = this.getSnippet();

    if (snippet) {
      where += ':\n' + snippet;
    }
  }

  return where;
};

module.exports = Mark;

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/schema.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/*eslint-disable max-len*/

var common = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/common.js");

var YAMLException = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/exception.js");

var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

function compileList(schema, name, result) {
  var exclude = [];
  schema.include.forEach(function (includedSchema) {
    result = compileList(includedSchema, name, result);
  });
  schema[name].forEach(function (currentType) {
    result.forEach(function (previousType, previousIndex) {
      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {
        exclude.push(previousIndex);
      }
    });
    result.push(currentType);
  });
  return result.filter(function (type, index) {
    return exclude.indexOf(index) === -1;
  });
}

function
  /* lists... */
compileMap() {
  var result = {
    scalar: {},
    sequence: {},
    mapping: {},
    fallback: {}
  },
      index,
      length;

  function collectType(type) {
    result[type.kind][type.tag] = result['fallback'][type.tag] = type;
  }

  for (index = 0, length = arguments.length; index < length; index += 1) {
    arguments[index].forEach(collectType);
  }

  return result;
}

function Schema(definition) {
  this.include = definition.include || [];
  this.implicit = definition.implicit || [];
  this.explicit = definition.explicit || [];
  this.implicit.forEach(function (type) {
    if (type.loadKind && type.loadKind !== 'scalar') {
      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');
    }
  });
  this.compiledImplicit = compileList(this, 'implicit', []);
  this.compiledExplicit = compileList(this, 'explicit', []);
  this.compiledTypeMap = compileMap(this.compiledImplicit, this.compiledExplicit);
}

Schema.DEFAULT = null;

Schema.create = function createSchema() {
  var schemas, types;

  switch (arguments.length) {
    case 1:
      schemas = Schema.DEFAULT;
      types = arguments[0];
      break;

    case 2:
      schemas = arguments[0];
      types = arguments[1];
      break;

    default:
      throw new YAMLException('Wrong number of arguments for Schema.create function');
  }

  schemas = common.toArray(schemas);
  types = common.toArray(types);

  if (!schemas.every(function (schema) {
    return schema instanceof Schema;
  })) {
    throw new YAMLException('Specified list of super schemas (or a single Schema object) contains a non-Schema object.');
  }

  if (!types.every(function (type) {
    return type instanceof Type;
  })) {
    throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');
  }

  return new Schema({
    include: schemas,
    explicit: types
  });
};

module.exports = Schema;

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/schema/core.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Standard YAML's Core schema.
// http://www.yaml.org/spec/1.2/spec.html#id2804923
//
// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
// So, Core schema has no distinctions from JSON schema is JS-YAML.


var Schema = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema.js");

module.exports = new Schema({
  include: [__webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/json.js")]
});

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/schema/default_full.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// JS-YAML's default schema for `load` function.
// It is not described in the YAML specification.
//
// This schema is based on JS-YAML's default safe schema and includes
// JavaScript-specific types: !!js/undefined, !!js/regexp and !!js/function.
//
// Also this schema is used as default base schema at `Schema.create` function.


var Schema = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema.js");

module.exports = Schema.DEFAULT = new Schema({
  include: [__webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js")],
  explicit: [__webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/js/undefined.js"), __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/js/regexp.js"), __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/js/function.js")]
});

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/schema/default_safe.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// JS-YAML's default schema for `safeLoad` function.
// It is not described in the YAML specification.
//
// This schema is based on standard YAML's Core schema and includes most of
// extra types described at YAML tag repository. (http://yaml.org/type/)


var Schema = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema.js");

module.exports = new Schema({
  include: [__webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/core.js")],
  implicit: [__webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/timestamp.js"), __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/merge.js")],
  explicit: [__webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/binary.js"), __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/omap.js"), __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/pairs.js"), __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/set.js")]
});

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/schema/failsafe.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Standard YAML's Failsafe schema.
// http://www.yaml.org/spec/1.2/spec.html#id2802346


var Schema = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema.js");

module.exports = new Schema({
  explicit: [__webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/str.js"), __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/seq.js"), __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/map.js")]
});

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/schema/json.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Standard YAML's JSON schema.
// http://www.yaml.org/spec/1.2/spec.html#id2803231
//
// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
// So, this schema is not such strict as defined in the YAML specification.
// It allows numbers in binary notaion, use `Null` and `NULL` as `null`, etc.


var Schema = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema.js");

module.exports = new Schema({
  include: [__webpack_require__("./node_modules/js-yaml/lib/js-yaml/schema/failsafe.js")],
  implicit: [__webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/null.js"), __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/bool.js"), __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/int.js"), __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type/float.js")]
});

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var YAMLException = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/exception.js");

var TYPE_CONSTRUCTOR_OPTIONS = ['kind', 'resolve', 'construct', 'instanceOf', 'predicate', 'represent', 'defaultStyle', 'styleAliases'];
var YAML_NODE_KINDS = ['scalar', 'sequence', 'mapping'];

function compileStyleAliases(map) {
  var result = {};

  if (map !== null) {
    Object.keys(map).forEach(function (style) {
      map[style].forEach(function (alias) {
        result[String(alias)] = style;
      });
    });
  }

  return result;
}

function Type(tag, options) {
  options = options || {};
  Object.keys(options).forEach(function (name) {
    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
      throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
    }
  }); // TODO: Add tag format check.

  this.tag = tag;
  this.kind = options['kind'] || null;

  this.resolve = options['resolve'] || function () {
    return true;
  };

  this.construct = options['construct'] || function (data) {
    return data;
  };

  this.instanceOf = options['instanceOf'] || null;
  this.predicate = options['predicate'] || null;
  this.represent = options['represent'] || null;
  this.defaultStyle = options['defaultStyle'] || null;
  this.styleAliases = compileStyleAliases(options['styleAliases'] || null);

  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
    throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
  }
}

module.exports = Type;

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/binary.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/*eslint-disable no-bitwise*/

var NodeBuffer;

try {
  // A trick for browserified version, to not include `Buffer` shim
  var _require = undefined;
  NodeBuffer = (__webpack_require__("./node_modules/buffer/index.js")/* .Buffer */ .lW);
} catch (__) {}

var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js"); // [ 64, 65, 66 ] -> [ padding, CR, LF ]


var BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r';

function resolveYamlBinary(data) {
  if (data === null) return false;
  var code,
      idx,
      bitlen = 0,
      max = data.length,
      map = BASE64_MAP; // Convert one by one.

  for (idx = 0; idx < max; idx++) {
    code = map.indexOf(data.charAt(idx)); // Skip CR/LF

    if (code > 64) continue; // Fail on illegal characters

    if (code < 0) return false;
    bitlen += 6;
  } // If there are any bits left, source was corrupted


  return bitlen % 8 === 0;
}

function constructYamlBinary(data) {
  var idx,
      tailbits,
      input = data.replace(/[\r\n=]/g, ''),
      // remove CR/LF & padding to simplify scan
  max = input.length,
      map = BASE64_MAP,
      bits = 0,
      result = []; // Collect by 6*4 bits (3 bytes)

  for (idx = 0; idx < max; idx++) {
    if (idx % 4 === 0 && idx) {
      result.push(bits >> 16 & 0xFF);
      result.push(bits >> 8 & 0xFF);
      result.push(bits & 0xFF);
    }

    bits = bits << 6 | map.indexOf(input.charAt(idx));
  } // Dump tail


  tailbits = max % 4 * 6;

  if (tailbits === 0) {
    result.push(bits >> 16 & 0xFF);
    result.push(bits >> 8 & 0xFF);
    result.push(bits & 0xFF);
  } else if (tailbits === 18) {
    result.push(bits >> 10 & 0xFF);
    result.push(bits >> 2 & 0xFF);
  } else if (tailbits === 12) {
    result.push(bits >> 4 & 0xFF);
  } // Wrap into Buffer for NodeJS and leave Array for browser


  if (NodeBuffer) {
    // Support node 6.+ Buffer API when available
    return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result);
  }

  return result;
}

function representYamlBinary(object
/*, style*/
) {
  var result = '',
      bits = 0,
      idx,
      tail,
      max = object.length,
      map = BASE64_MAP; // Convert every three bytes to 4 ASCII characters.

  for (idx = 0; idx < max; idx++) {
    if (idx % 3 === 0 && idx) {
      result += map[bits >> 18 & 0x3F];
      result += map[bits >> 12 & 0x3F];
      result += map[bits >> 6 & 0x3F];
      result += map[bits & 0x3F];
    }

    bits = (bits << 8) + object[idx];
  } // Dump tail


  tail = max % 3;

  if (tail === 0) {
    result += map[bits >> 18 & 0x3F];
    result += map[bits >> 12 & 0x3F];
    result += map[bits >> 6 & 0x3F];
    result += map[bits & 0x3F];
  } else if (tail === 2) {
    result += map[bits >> 10 & 0x3F];
    result += map[bits >> 4 & 0x3F];
    result += map[bits << 2 & 0x3F];
    result += map[64];
  } else if (tail === 1) {
    result += map[bits >> 2 & 0x3F];
    result += map[bits << 4 & 0x3F];
    result += map[64];
    result += map[64];
  }

  return result;
}

function isBinary(object) {
  return NodeBuffer && NodeBuffer.isBuffer(object);
}

module.exports = new Type('tag:yaml.org,2002:binary', {
  kind: 'scalar',
  resolve: resolveYamlBinary,
  construct: constructYamlBinary,
  predicate: isBinary,
  represent: representYamlBinary
});

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/bool.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

function resolveYamlBoolean(data) {
  if (data === null) return false;
  var max = data.length;
  return max === 4 && (data === 'true' || data === 'True' || data === 'TRUE') || max === 5 && (data === 'false' || data === 'False' || data === 'FALSE');
}

function constructYamlBoolean(data) {
  return data === 'true' || data === 'True' || data === 'TRUE';
}

function isBoolean(object) {
  return Object.prototype.toString.call(object) === '[object Boolean]';
}

module.exports = new Type('tag:yaml.org,2002:bool', {
  kind: 'scalar',
  resolve: resolveYamlBoolean,
  construct: constructYamlBoolean,
  predicate: isBoolean,
  represent: {
    lowercase: function (object) {
      return object ? 'true' : 'false';
    },
    uppercase: function (object) {
      return object ? 'TRUE' : 'FALSE';
    },
    camelcase: function (object) {
      return object ? 'True' : 'False';
    }
  },
  defaultStyle: 'lowercase'
});

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/float.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var common = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/common.js");

var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

var YAML_FLOAT_PATTERN = new RegExp( // 2.5e4, 2.5 and integers
'^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' + // .2e4, .2
// special case, seems not from spec
'|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' + // 20:59
'|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*' + // .inf
'|[-+]?\\.(?:inf|Inf|INF)' + // .nan
'|\\.(?:nan|NaN|NAN))$');

function resolveYamlFloat(data) {
  if (data === null) return false;

  if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`
  // Probably should update regexp & check speed
  data[data.length - 1] === '_') {
    return false;
  }

  return true;
}

function constructYamlFloat(data) {
  var value, sign, base, digits;
  value = data.replace(/_/g, '').toLowerCase();
  sign = value[0] === '-' ? -1 : 1;
  digits = [];

  if ('+-'.indexOf(value[0]) >= 0) {
    value = value.slice(1);
  }

  if (value === '.inf') {
    return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
  } else if (value === '.nan') {
    return NaN;
  } else if (value.indexOf(':') >= 0) {
    value.split(':').forEach(function (v) {
      digits.unshift(parseFloat(v, 10));
    });
    value = 0.0;
    base = 1;
    digits.forEach(function (d) {
      value += d * base;
      base *= 60;
    });
    return sign * value;
  }

  return sign * parseFloat(value, 10);
}

var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;

function representYamlFloat(object, style) {
  var res;

  if (isNaN(object)) {
    switch (style) {
      case 'lowercase':
        return '.nan';

      case 'uppercase':
        return '.NAN';

      case 'camelcase':
        return '.NaN';
    }
  } else if (Number.POSITIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase':
        return '.inf';

      case 'uppercase':
        return '.INF';

      case 'camelcase':
        return '.Inf';
    }
  } else if (Number.NEGATIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase':
        return '-.inf';

      case 'uppercase':
        return '-.INF';

      case 'camelcase':
        return '-.Inf';
    }
  } else if (common.isNegativeZero(object)) {
    return '-0.0';
  }

  res = object.toString(10); // JS stringifier can build scientific format without dots: 5e-100,
  // while YAML requres dot: 5.e-100. Fix it with simple hack

  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;
}

function isFloat(object) {
  return Object.prototype.toString.call(object) === '[object Number]' && (object % 1 !== 0 || common.isNegativeZero(object));
}

module.exports = new Type('tag:yaml.org,2002:float', {
  kind: 'scalar',
  resolve: resolveYamlFloat,
  construct: constructYamlFloat,
  predicate: isFloat,
  represent: representYamlFloat,
  defaultStyle: 'lowercase'
});

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/int.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var common = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/common.js");

var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

function isHexCode(c) {
  return 0x30
  /* 0 */
  <= c && c <= 0x39
  /* 9 */
  || 0x41
  /* A */
  <= c && c <= 0x46
  /* F */
  || 0x61
  /* a */
  <= c && c <= 0x66
  /* f */
  ;
}

function isOctCode(c) {
  return 0x30
  /* 0 */
  <= c && c <= 0x37
  /* 7 */
  ;
}

function isDecCode(c) {
  return 0x30
  /* 0 */
  <= c && c <= 0x39
  /* 9 */
  ;
}

function resolveYamlInteger(data) {
  if (data === null) return false;
  var max = data.length,
      index = 0,
      hasDigits = false,
      ch;
  if (!max) return false;
  ch = data[index]; // sign

  if (ch === '-' || ch === '+') {
    ch = data[++index];
  }

  if (ch === '0') {
    // 0
    if (index + 1 === max) return true;
    ch = data[++index]; // base 2, base 8, base 16

    if (ch === 'b') {
      // base 2
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (ch !== '0' && ch !== '1') return false;
        hasDigits = true;
      }

      return hasDigits && ch !== '_';
    }

    if (ch === 'x') {
      // base 16
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (!isHexCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }

      return hasDigits && ch !== '_';
    } // base 8


    for (; index < max; index++) {
      ch = data[index];
      if (ch === '_') continue;
      if (!isOctCode(data.charCodeAt(index))) return false;
      hasDigits = true;
    }

    return hasDigits && ch !== '_';
  } // base 10 (except 0) or base 60
  // value should not start with `_`;


  if (ch === '_') return false;

  for (; index < max; index++) {
    ch = data[index];
    if (ch === '_') continue;
    if (ch === ':') break;

    if (!isDecCode(data.charCodeAt(index))) {
      return false;
    }

    hasDigits = true;
  } // Should have digits and should not end with `_`


  if (!hasDigits || ch === '_') return false; // if !base60 - done;

  if (ch !== ':') return true; // base60 almost not used, no needs to optimize

  return /^(:[0-5]?[0-9])+$/.test(data.slice(index));
}

function constructYamlInteger(data) {
  var value = data,
      sign = 1,
      ch,
      base,
      digits = [];

  if (value.indexOf('_') !== -1) {
    value = value.replace(/_/g, '');
  }

  ch = value[0];

  if (ch === '-' || ch === '+') {
    if (ch === '-') sign = -1;
    value = value.slice(1);
    ch = value[0];
  }

  if (value === '0') return 0;

  if (ch === '0') {
    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);
    if (value[1] === 'x') return sign * parseInt(value, 16);
    return sign * parseInt(value, 8);
  }

  if (value.indexOf(':') !== -1) {
    value.split(':').forEach(function (v) {
      digits.unshift(parseInt(v, 10));
    });
    value = 0;
    base = 1;
    digits.forEach(function (d) {
      value += d * base;
      base *= 60;
    });
    return sign * value;
  }

  return sign * parseInt(value, 10);
}

function isInteger(object) {
  return Object.prototype.toString.call(object) === '[object Number]' && object % 1 === 0 && !common.isNegativeZero(object);
}

module.exports = new Type('tag:yaml.org,2002:int', {
  kind: 'scalar',
  resolve: resolveYamlInteger,
  construct: constructYamlInteger,
  predicate: isInteger,
  represent: {
    binary: function (obj) {
      return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1);
    },
    octal: function (obj) {
      return obj >= 0 ? '0' + obj.toString(8) : '-0' + obj.toString(8).slice(1);
    },
    decimal: function (obj) {
      return obj.toString(10);
    },

    /* eslint-disable max-len */
    hexadecimal: function (obj) {
      return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() : '-0x' + obj.toString(16).toUpperCase().slice(1);
    }
  },
  defaultStyle: 'decimal',
  styleAliases: {
    binary: [2, 'bin'],
    octal: [8, 'oct'],
    decimal: [10, 'dec'],
    hexadecimal: [16, 'hex']
  }
});

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/js/function.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var esprima; // Browserified version does not have esprima
//
// 1. For node.js just require module as deps
// 2. For browser try to require mudule via external AMD system.
//    If not found - try to fallback to window.esprima. If not
//    found too - then fail to parse.
//

try {
  // workaround to exclude package from browserify list.
  var _require = undefined;
  esprima = __webpack_require__("./node_modules/esprima/dist/esprima.js");
} catch (_) {
  /* eslint-disable no-redeclare */

  /* global window */
  if (typeof window !== 'undefined') esprima = window.esprima;
}

var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

function resolveJavascriptFunction(data) {
  if (data === null) return false;

  try {
    var source = '(' + data + ')',
        ast = esprima.parse(source, {
      range: true
    });

    if (ast.type !== 'Program' || ast.body.length !== 1 || ast.body[0].type !== 'ExpressionStatement' || ast.body[0].expression.type !== 'ArrowFunctionExpression' && ast.body[0].expression.type !== 'FunctionExpression') {
      return false;
    }

    return true;
  } catch (err) {
    return false;
  }
}

function constructJavascriptFunction(data) {
  /*jslint evil:true*/
  var source = '(' + data + ')',
      ast = esprima.parse(source, {
    range: true
  }),
      params = [],
      body;

  if (ast.type !== 'Program' || ast.body.length !== 1 || ast.body[0].type !== 'ExpressionStatement' || ast.body[0].expression.type !== 'ArrowFunctionExpression' && ast.body[0].expression.type !== 'FunctionExpression') {
    throw new Error('Failed to resolve function');
  }

  ast.body[0].expression.params.forEach(function (param) {
    params.push(param.name);
  });
  body = ast.body[0].expression.body.range; // Esprima's ranges include the first '{' and the last '}' characters on
  // function expressions. So cut them out.

  if (ast.body[0].expression.body.type === 'BlockStatement') {
    /*eslint-disable no-new-func*/
    return new Function(params, source.slice(body[0] + 1, body[1] - 1));
  } // ES6 arrow functions can omit the BlockStatement. In that case, just return
  // the body.

  /*eslint-disable no-new-func*/


  return new Function(params, 'return ' + source.slice(body[0], body[1]));
}

function representJavascriptFunction(object
/*, style*/
) {
  return object.toString();
}

function isFunction(object) {
  return Object.prototype.toString.call(object) === '[object Function]';
}

module.exports = new Type('tag:yaml.org,2002:js/function', {
  kind: 'scalar',
  resolve: resolveJavascriptFunction,
  construct: constructJavascriptFunction,
  predicate: isFunction,
  represent: representJavascriptFunction
});

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/js/regexp.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

function resolveJavascriptRegExp(data) {
  if (data === null) return false;
  if (data.length === 0) return false;
  var regexp = data,
      tail = /\/([gim]*)$/.exec(data),
      modifiers = ''; // if regexp starts with '/' it can have modifiers and must be properly closed
  // `/foo/gim` - modifiers tail can be maximum 3 chars

  if (regexp[0] === '/') {
    if (tail) modifiers = tail[1];
    if (modifiers.length > 3) return false; // if expression starts with /, is should be properly terminated

    if (regexp[regexp.length - modifiers.length - 1] !== '/') return false;
  }

  return true;
}

function constructJavascriptRegExp(data) {
  var regexp = data,
      tail = /\/([gim]*)$/.exec(data),
      modifiers = ''; // `/foo/gim` - tail can be maximum 4 chars

  if (regexp[0] === '/') {
    if (tail) modifiers = tail[1];
    regexp = regexp.slice(1, regexp.length - modifiers.length - 1);
  }

  return new RegExp(regexp, modifiers);
}

function representJavascriptRegExp(object
/*, style*/
) {
  var result = '/' + object.source + '/';
  if (object.global) result += 'g';
  if (object.multiline) result += 'm';
  if (object.ignoreCase) result += 'i';
  return result;
}

function isRegExp(object) {
  return Object.prototype.toString.call(object) === '[object RegExp]';
}

module.exports = new Type('tag:yaml.org,2002:js/regexp', {
  kind: 'scalar',
  resolve: resolveJavascriptRegExp,
  construct: constructJavascriptRegExp,
  predicate: isRegExp,
  represent: representJavascriptRegExp
});

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/js/undefined.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

function resolveJavascriptUndefined() {
  return true;
}

function constructJavascriptUndefined() {
  /*eslint-disable no-undefined*/
  return undefined;
}

function representJavascriptUndefined() {
  return '';
}

function isUndefined(object) {
  return typeof object === 'undefined';
}

module.exports = new Type('tag:yaml.org,2002:js/undefined', {
  kind: 'scalar',
  resolve: resolveJavascriptUndefined,
  construct: constructJavascriptUndefined,
  predicate: isUndefined,
  represent: representJavascriptUndefined
});

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/map.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

module.exports = new Type('tag:yaml.org,2002:map', {
  kind: 'mapping',
  construct: function (data) {
    return data !== null ? data : {};
  }
});

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/merge.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

function resolveYamlMerge(data) {
  return data === '<<' || data === null;
}

module.exports = new Type('tag:yaml.org,2002:merge', {
  kind: 'scalar',
  resolve: resolveYamlMerge
});

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/null.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

function resolveYamlNull(data) {
  if (data === null) return true;
  var max = data.length;
  return max === 1 && data === '~' || max === 4 && (data === 'null' || data === 'Null' || data === 'NULL');
}

function constructYamlNull() {
  return null;
}

function isNull(object) {
  return object === null;
}

module.exports = new Type('tag:yaml.org,2002:null', {
  kind: 'scalar',
  resolve: resolveYamlNull,
  construct: constructYamlNull,
  predicate: isNull,
  represent: {
    canonical: function () {
      return '~';
    },
    lowercase: function () {
      return 'null';
    },
    uppercase: function () {
      return 'NULL';
    },
    camelcase: function () {
      return 'Null';
    }
  },
  defaultStyle: 'lowercase'
});

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/omap.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _toString = Object.prototype.toString;

function resolveYamlOmap(data) {
  if (data === null) return true;
  var objectKeys = [],
      index,
      length,
      pair,
      pairKey,
      pairHasKey,
      object = data;

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    pairHasKey = false;
    if (_toString.call(pair) !== '[object Object]') return false;

    for (pairKey in pair) {
      if (_hasOwnProperty.call(pair, pairKey)) {
        if (!pairHasKey) pairHasKey = true;else return false;
      }
    }

    if (!pairHasKey) return false;
    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);else return false;
  }

  return true;
}

function constructYamlOmap(data) {
  return data !== null ? data : [];
}

module.exports = new Type('tag:yaml.org,2002:omap', {
  kind: 'sequence',
  resolve: resolveYamlOmap,
  construct: constructYamlOmap
});

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/pairs.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

var _toString = Object.prototype.toString;

function resolveYamlPairs(data) {
  if (data === null) return true;
  var index,
      length,
      pair,
      keys,
      result,
      object = data;
  result = new Array(object.length);

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    if (_toString.call(pair) !== '[object Object]') return false;
    keys = Object.keys(pair);
    if (keys.length !== 1) return false;
    result[index] = [keys[0], pair[keys[0]]];
  }

  return true;
}

function constructYamlPairs(data) {
  if (data === null) return [];
  var index,
      length,
      pair,
      keys,
      result,
      object = data;
  result = new Array(object.length);

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    keys = Object.keys(pair);
    result[index] = [keys[0], pair[keys[0]]];
  }

  return result;
}

module.exports = new Type('tag:yaml.org,2002:pairs', {
  kind: 'sequence',
  resolve: resolveYamlPairs,
  construct: constructYamlPairs
});

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/seq.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

module.exports = new Type('tag:yaml.org,2002:seq', {
  kind: 'sequence',
  construct: function (data) {
    return data !== null ? data : [];
  }
});

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/set.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

var _hasOwnProperty = Object.prototype.hasOwnProperty;

function resolveYamlSet(data) {
  if (data === null) return true;
  var key,
      object = data;

  for (key in object) {
    if (_hasOwnProperty.call(object, key)) {
      if (object[key] !== null) return false;
    }
  }

  return true;
}

function constructYamlSet(data) {
  return data !== null ? data : {};
}

module.exports = new Type('tag:yaml.org,2002:set', {
  kind: 'mapping',
  resolve: resolveYamlSet,
  construct: constructYamlSet
});

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/str.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

module.exports = new Type('tag:yaml.org,2002:str', {
  kind: 'scalar',
  construct: function (data) {
    return data !== null ? data : '';
  }
});

/***/ }),

/***/ "./node_modules/js-yaml/lib/js-yaml/type/timestamp.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("./node_modules/js-yaml/lib/js-yaml/type.js");

var YAML_DATE_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' + // [1] year
'-([0-9][0-9])' + // [2] month
'-([0-9][0-9])$'); // [3] day

var YAML_TIMESTAMP_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' + // [1] year
'-([0-9][0-9]?)' + // [2] month
'-([0-9][0-9]?)' + // [3] day
'(?:[Tt]|[ \\t]+)' + // ...
'([0-9][0-9]?)' + // [4] hour
':([0-9][0-9])' + // [5] minute
':([0-9][0-9])' + // [6] second
'(?:\\.([0-9]*))?' + // [7] fraction
'(?:[ \\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour
'(?::([0-9][0-9]))?))?$'); // [11] tz_minute

function resolveYamlTimestamp(data) {
  if (data === null) return false;
  if (YAML_DATE_REGEXP.exec(data) !== null) return true;
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
  return false;
}

function constructYamlTimestamp(data) {
  var match,
      year,
      month,
      day,
      hour,
      minute,
      second,
      fraction = 0,
      delta = null,
      tz_hour,
      tz_minute,
      date;
  match = YAML_DATE_REGEXP.exec(data);
  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);
  if (match === null) throw new Error('Date resolve error'); // match: [1] year [2] month [3] day

  year = +match[1];
  month = +match[2] - 1; // JS month starts with 0

  day = +match[3];

  if (!match[4]) {
    // no hour
    return new Date(Date.UTC(year, month, day));
  } // match: [4] hour [5] minute [6] second [7] fraction


  hour = +match[4];
  minute = +match[5];
  second = +match[6];

  if (match[7]) {
    fraction = match[7].slice(0, 3);

    while (fraction.length < 3) {
      // milli-seconds
      fraction += '0';
    }

    fraction = +fraction;
  } // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute


  if (match[9]) {
    tz_hour = +match[10];
    tz_minute = +(match[11] || 0);
    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds

    if (match[9] === '-') delta = -delta;
  }

  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
  if (delta) date.setTime(date.getTime() - delta);
  return date;
}

function representYamlTimestamp(object
/*, style*/
) {
  return object.toISOString();
}

module.exports = new Type('tag:yaml.org,2002:timestamp', {
  kind: 'scalar',
  resolve: resolveYamlTimestamp,
  construct: constructYamlTimestamp,
  instanceOf: Date,
  represent: representYamlTimestamp
});

/***/ }),

/***/ "./node_modules/json-schema-compare/src/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isEqual = __webpack_require__("./node_modules/lodash/isEqual.js");

var sortBy = __webpack_require__("./node_modules/lodash/sortBy.js");

var uniq = __webpack_require__("./node_modules/lodash/uniq.js");

var uniqWith = __webpack_require__("./node_modules/lodash/uniqWith.js");

var defaults = __webpack_require__("./node_modules/lodash/defaults.js");

var intersectionWith = __webpack_require__("./node_modules/lodash/intersectionWith.js");

var isPlainObject = __webpack_require__("./node_modules/lodash/isPlainObject.js");

var isBoolean = __webpack_require__("./node_modules/lodash/isBoolean.js");

var normalizeArray = val => Array.isArray(val) ? val : [val];

var undef = val => val === undefined;

var keys = obj => isPlainObject(obj) || Array.isArray(obj) ? Object.keys(obj) : [];

var has = (obj, key) => obj.hasOwnProperty(key);

var stringArray = arr => sortBy(uniq(arr));

var undefEmpty = val => undef(val) || Array.isArray(val) && val.length === 0;

var keyValEqual = (a, b, key, compare) => b && has(b, key) && a && has(a, key) && compare(a[key], b[key]);

var undefAndZero = (a, b) => undef(a) && b === 0 || undef(b) && a === 0 || isEqual(a, b);

var falseUndefined = (a, b) => undef(a) && b === false || undef(b) && a === false || isEqual(a, b);

var emptySchema = schema => undef(schema) || isEqual(schema, {}) || schema === true;

var emptyObjUndef = schema => undef(schema) || isEqual(schema, {});

var isSchema = val => undef(val) || isPlainObject(val) || val === true || val === false;

function undefArrayEqual(a, b) {
  if (undefEmpty(a) && undefEmpty(b)) {
    return true;
  } else {
    return isEqual(stringArray(a), stringArray(b));
  }
}

function unsortedNormalizedArray(a, b) {
  a = normalizeArray(a);
  b = normalizeArray(b);
  return isEqual(stringArray(a), stringArray(b));
}

function schemaGroup(a, b, key, compare) {
  var allProps = uniq(keys(a).concat(keys(b)));

  if (emptyObjUndef(a) && emptyObjUndef(b)) {
    return true;
  } else if (emptyObjUndef(a) && keys(b).length) {
    return false;
  } else if (emptyObjUndef(b) && keys(a).length) {
    return false;
  }

  return allProps.every(function (key) {
    var aVal = a[key];
    var bVal = b[key];

    if (Array.isArray(aVal) && Array.isArray(bVal)) {
      return isEqual(stringArray(a), stringArray(b));
    } else if (Array.isArray(aVal) && !Array.isArray(bVal)) {
      return false;
    } else if (Array.isArray(bVal) && !Array.isArray(aVal)) {
      return false;
    }

    return keyValEqual(a, b, key, compare);
  });
}

function items(a, b, key, compare) {
  if (isPlainObject(a) && isPlainObject(b)) {
    return compare(a, b);
  } else if (Array.isArray(a) && Array.isArray(b)) {
    return schemaGroup(a, b, key, compare);
  } else {
    return isEqual(a, b);
  }
}

function unsortedArray(a, b, key, compare) {
  var uniqueA = uniqWith(a, compare);
  var uniqueB = uniqWith(b, compare);
  var inter = intersectionWith(uniqueA, uniqueB, compare);
  return inter.length === Math.max(uniqueA.length, uniqueB.length);
}

var comparers = {
  title: isEqual,
  uniqueItems: falseUndefined,
  minLength: undefAndZero,
  minItems: undefAndZero,
  minProperties: undefAndZero,
  required: undefArrayEqual,
  enum: undefArrayEqual,
  type: unsortedNormalizedArray,
  items: items,
  anyOf: unsortedArray,
  allOf: unsortedArray,
  oneOf: unsortedArray,
  properties: schemaGroup,
  patternProperties: schemaGroup,
  dependencies: schemaGroup
};
var acceptsUndefined = ['properties', 'patternProperties', 'dependencies', 'uniqueItems', 'minLength', 'minItems', 'minProperties', 'required'];
var schemaProps = ['additionalProperties', 'additionalItems', 'contains', 'propertyNames', 'not'];

function compare(a, b, options) {
  options = defaults(options, {
    ignore: []
  });

  if (emptySchema(a) && emptySchema(b)) {
    return true;
  }

  if (!isSchema(a) || !isSchema(b)) {
    throw new Error('Either of the values are not a JSON schema.');
  }

  if (a === b) {
    return true;
  }

  if (isBoolean(a) && isBoolean(b)) {
    return a === b;
  }

  if (a === undefined && b === false || b === undefined && a === false) {
    return false;
  }

  if (undef(a) && !undef(b) || !undef(a) && undef(b)) {
    return false;
  }

  var allKeys = uniq(Object.keys(a).concat(Object.keys(b)));

  if (options.ignore.length) {
    allKeys = allKeys.filter(k => options.ignore.indexOf(k) === -1);
  }

  if (!allKeys.length) {
    return true;
  }

  function innerCompare(a, b) {
    return compare(a, b, options);
  }

  return allKeys.every(function (key) {
    var aValue = a[key];
    var bValue = b[key];

    if (schemaProps.indexOf(key) !== -1) {
      return compare(aValue, bValue, options);
    }

    var comparer = comparers[key];

    if (!comparer) {
      comparer = isEqual;
    } // do simple lodash check first


    if (isEqual(aValue, bValue)) {
      return true;
    }

    if (acceptsUndefined.indexOf(key) === -1) {
      if (!has(a, key) && has(b, key) || has(a, key) && !has(b, key)) {
        return aValue === bValue;
      }
    }

    var result = comparer(aValue, bValue, key, innerCompare);

    if (!isBoolean(result)) {
      throw new Error('Comparer must return true or false');
    }

    return result;
  });
}

module.exports = compare;

/***/ }),

/***/ "./node_modules/json-schema-merge-allof/src/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var cloneDeep = __webpack_require__("./node_modules/lodash/cloneDeep.js");

var compare = __webpack_require__("./node_modules/json-schema-compare/src/index.js");

var computeLcm = __webpack_require__("./node_modules/compute-lcm/lib/index.js");

var defaultsDeep = __webpack_require__("./node_modules/lodash/defaultsDeep.js");

var flatten = __webpack_require__("./node_modules/lodash/flatten.js");

var flattenDeep = __webpack_require__("./node_modules/lodash/flattenDeep.js");

var intersection = __webpack_require__("./node_modules/lodash/intersection.js");

var intersectionWith = __webpack_require__("./node_modules/lodash/intersectionWith.js");

var isEqual = __webpack_require__("./node_modules/lodash/isEqual.js");

var isPlainObject = __webpack_require__("./node_modules/lodash/isPlainObject.js");

var pullAll = __webpack_require__("./node_modules/lodash/pullAll.js");

var sortBy = __webpack_require__("./node_modules/lodash/sortBy.js");

var forEach = __webpack_require__("./node_modules/lodash/forEach.js");

var uniq = __webpack_require__("./node_modules/lodash/uniq.js");

var uniqWith = __webpack_require__("./node_modules/lodash/uniqWith.js");

var without = __webpack_require__("./node_modules/lodash/without.js");

var withoutArr = (arr, ...rest) => without.apply(null, [arr].concat(flatten(rest)));

var isPropertyRelated = key => contains(propertyRelated, key);

var isItemsRelated = key => contains(itemsRelated, key);

var contains = (arr, val) => arr.indexOf(val) !== -1;

var isEmptySchema = obj => !keys(obj).length && obj !== false && obj !== true;

var isSchema = val => isPlainObject(val) || val === true || val === false;

var isFalse = val => val === false;

var isTrue = val => val === true;

var schemaResolver = (compacted, key, mergeSchemas) => mergeSchemas(compacted);

var stringArray = values => sortBy(uniq(flattenDeep(values)));

var notUndefined = val => val !== undefined;

var allUniqueKeys = arr => uniq(flattenDeep(arr.map(keys))); // resolvers


var first = compacted => compacted[0];

var required = compacted => stringArray(compacted);

var maximumValue = compacted => Math.max.apply(Math, compacted);

var minimumValue = compacted => Math.min.apply(Math, compacted);

var uniqueItems = compacted => compacted.some(isTrue);

var examples = compacted => uniqWith(flatten(compacted), isEqual);

function compareProp(key) {
  return function (a, b) {
    return compare({
      [key]: a
    }, {
      [key]: b
    });
  };
}

function getAllOf(schema) {
  if (Array.isArray(schema.allOf)) {
    var allOf = schema.allOf;
    delete schema.allOf;
    return [schema].concat(allOf.map(function (allSchema) {
      return getAllOf(allSchema);
    }));
  } else {
    return [schema];
  }
}

function getValues(schemas, key) {
  return schemas.map(function (schema) {
    return schema && schema[key];
  });
}

function getItemSchemas(subSchemas, key) {
  return subSchemas.map(function (sub) {
    if (!sub) {
      return;
    }

    if (Array.isArray(sub.items)) {
      var schemaAtPos = sub.items[key];

      if (isSchema(schemaAtPos)) {
        return schemaAtPos;
      } else if (sub.hasOwnProperty('additionalItems')) {
        return sub.additionalItems;
      }
    } else {
      return sub.items;
    }
  });
}

function tryMergeSchemaGroups(schemaGroups, mergeSchemas) {
  return schemaGroups.map(function (schemas, index) {
    try {
      return mergeSchemas(schemas, index);
    } catch (e) {
      return undefined;
    }
  }).filter(notUndefined);
}

function getAdditionalSchemas(subSchemas) {
  return subSchemas.map(function (sub) {
    if (!sub) {
      return;
    }

    if (Array.isArray(sub.items)) {
      return sub.additionalItems;
    }

    return sub.items;
  });
}

function keys(obj) {
  if (isPlainObject(obj) || Array.isArray(obj)) {
    return Object.keys(obj);
  } else {
    return [];
  }
}

function getAnyOfCombinations(arrOfArrays, combinations) {
  combinations = combinations || [];

  if (!arrOfArrays.length) {
    return combinations;
  }

  var values = arrOfArrays.slice(0).shift();
  var rest = arrOfArrays.slice(1);

  if (combinations.length) {
    return getAnyOfCombinations(rest, flatten(combinations.map(combination => values.map(item => [item].concat(combination)))));
  }

  return getAnyOfCombinations(rest, values.map(item => item));
}

function mergeWithArray(base, newItems) {
  if (Array.isArray(base)) {
    base.splice.apply(base, [0, 0].concat(newItems));
    return base;
  } else {
    return newItems;
  }
}

function throwIncompatible(values, paths) {
  var asJSON;

  try {
    asJSON = values.map(function (val) {
      return JSON.stringify(val, null, 2);
    }).join('\n');
  } catch (variable) {
    asJSON = values.join(', ');
  }

  throw new Error('Could not resolve values for path:"' + paths.join('.') + '". They are probably incompatible. Values: \n' + asJSON);
}

function cleanupReturnValue(returnObject) {
  // cleanup empty
  for (var prop in returnObject) {
    if (returnObject.hasOwnProperty(prop) && isEmptySchema(returnObject[prop])) {
      delete returnObject[prop];
    }
  }

  return returnObject;
}

function createRequiredSubMerger(mergeSchemas, key, parents) {
  return function (schemas, subKey) {
    if (subKey === undefined) {
      throw new Error('You need to call merger with a key for the property name or index if array.');
    }

    subKey = String(subKey);
    return mergeSchemas(schemas, null, parents.concat(key, subKey));
  };
}

function callGroupResolver(keys, resolverName, schemas, mergeSchemas, options, parents) {
  if (keys.length) {
    var resolver = options.resolvers[resolverName];

    if (!resolver) {
      throw new Error('No resolver found for ' + resolverName);
    }

    var compacted = uniqWith(schemas.map(function (schema) {
      return keys.reduce(function (all, key) {
        if (schema[key] !== undefined) {
          all[key] = schema[key];
        }

        return all;
      }, {});
    }).filter(notUndefined), compare);
    var related = resolverName === 'properties' ? propertyRelated : itemsRelated;
    var mergers = related.reduce(function (all, key) {
      if (contains(schemaGroupProps, key)) {
        all[key] = createRequiredSubMerger(mergeSchemas, key, parents);
      } else {
        all[key] = function (schemas) {
          return mergeSchemas(schemas, null, parents.concat(key));
        };
      }

      return all;
    }, {});

    if (resolverName === 'items') {
      mergers.itemsArray = createRequiredSubMerger(mergeSchemas, 'items', parents);

      mergers.items = function (schemas) {
        return mergeSchemas(schemas, null, parents.concat('items'));
      };
    }

    var result = resolver(compacted, parents.concat(resolverName), mergers, options);

    if (!isPlainObject(result)) {
      throwIncompatible(compacted, parents.concat(resolverName));
    }

    return cleanupReturnValue(result);
  }
} // Provide source when array


function mergeSchemaGroup(group, mergeSchemas, source) {
  var allKeys = allUniqueKeys(source || group);
  var extractor = source ? getItemSchemas : getValues;
  return allKeys.reduce(function (all, key) {
    var schemas = extractor(group, key);
    var compacted = uniqWith(schemas.filter(notUndefined), compare);
    all[key] = mergeSchemas(compacted, key);
    return all;
  }, source ? [] : {});
}

function removeFalseSchemas(target) {
  forEach(target, function (schema, prop) {
    if (schema === false) {
      delete target[prop];
    }
  });
}

function removeFalseSchemasFromArray(target) {
  forEach(target, function (schema, index) {
    if (schema === false) {
      target.splice(index, 1);
    }
  });
}

function createRequiredMetaArray(arr) {
  return {
    required: arr
  };
}

var propertyRelated = ['properties', 'patternProperties', 'additionalProperties'];
var itemsRelated = ['items', 'additionalItems'];
var schemaGroupProps = ['properties', 'patternProperties', 'definitions', 'dependencies'];
var schemaArrays = ['anyOf', 'oneOf'];
var schemaProps = ['additionalProperties', 'additionalItems', 'contains', 'propertyNames', 'not', 'items'];
var defaultResolvers = {
  type(compacted) {
    if (compacted.some(Array.isArray)) {
      var normalized = compacted.map(function (val) {
        return Array.isArray(val) ? val : [val];
      });
      var common = intersection.apply(null, normalized);

      if (common.length === 1) {
        return common[0];
      } else if (common.length > 1) {
        return uniq(common);
      }
    }
  },

  properties(values, key, mergers, options) {
    // first get rid of all non permitted properties
    if (!options.ignoreAdditionalProperties) {
      values.forEach(function (subSchema) {
        var otherSubSchemas = values.filter(s => s !== subSchema);
        var ownKeys = keys(subSchema.properties);
        var ownPatternKeys = keys(subSchema.patternProperties);
        var ownPatterns = ownPatternKeys.map(k => new RegExp(k));
        otherSubSchemas.forEach(function (other) {
          var allOtherKeys = keys(other.properties);
          var keysMatchingPattern = allOtherKeys.filter(k => ownPatterns.some(pk => pk.test(k)));
          var additionalKeys = withoutArr(allOtherKeys, ownKeys, keysMatchingPattern);
          additionalKeys.forEach(function (key) {
            other.properties[key] = mergers.properties([other.properties[key], subSchema.additionalProperties], key);
          });
        });
      }); // remove disallowed patternProperties

      values.forEach(function (subSchema) {
        var otherSubSchemas = values.filter(s => s !== subSchema);
        var ownPatternKeys = keys(subSchema.patternProperties);

        if (subSchema.additionalProperties === false) {
          otherSubSchemas.forEach(function (other) {
            var allOtherPatterns = keys(other.patternProperties);
            var additionalPatternKeys = withoutArr(allOtherPatterns, ownPatternKeys);
            additionalPatternKeys.forEach(key => delete other.patternProperties[key]);
          });
        }
      });
    }

    var returnObject = {
      additionalProperties: mergers.additionalProperties(values.map(s => s.additionalProperties)),
      patternProperties: mergeSchemaGroup(values.map(s => s.patternProperties), mergers.patternProperties),
      properties: mergeSchemaGroup(values.map(s => s.properties), mergers.properties)
    };

    if (returnObject.additionalProperties === false) {
      removeFalseSchemas(returnObject.properties);
    }

    return returnObject;
  },

  dependencies(compacted, paths, mergeSchemas) {
    var allChildren = allUniqueKeys(compacted);
    return allChildren.reduce(function (all, childKey) {
      var childSchemas = getValues(compacted, childKey);
      var innerCompacted = uniqWith(childSchemas.filter(notUndefined), isEqual); // to support dependencies

      var innerArrays = innerCompacted.filter(Array.isArray);

      if (innerArrays.length) {
        if (innerArrays.length === innerCompacted.length) {
          all[childKey] = stringArray(innerCompacted);
        } else {
          var innerSchemas = innerCompacted.filter(isSchema);
          var arrayMetaScheams = innerArrays.map(createRequiredMetaArray);
          all[childKey] = mergeSchemas(innerSchemas.concat(arrayMetaScheams), childKey);
        }

        return all;
      }

      innerCompacted = uniqWith(innerCompacted, compare);
      all[childKey] = mergeSchemas(innerCompacted, childKey);
      return all;
    }, {});
  },

  items(values, paths, mergers) {
    var items = values.map(s => s.items);
    var itemsCompacted = items.filter(notUndefined);
    var returnObject = {};

    if (itemsCompacted.every(isSchema)) {
      returnObject.items = mergers.items(items);
    } else {
      returnObject.items = mergeSchemaGroup(values, mergers.itemsArray, items);
    }

    var schemasAtLastPos;

    if (itemsCompacted.every(Array.isArray)) {
      schemasAtLastPos = values.map(s => s.additionalItems);
    } else if (itemsCompacted.some(Array.isArray)) {
      schemasAtLastPos = getAdditionalSchemas(values);
    }

    if (schemasAtLastPos) {
      returnObject.additionalItems = mergers.additionalItems(schemasAtLastPos);
    }

    if (returnObject.additionalItems === false && Array.isArray(returnObject.items)) {
      removeFalseSchemasFromArray(returnObject.items);
    }

    return returnObject;
  },

  oneOf(compacted, paths, mergeSchemas) {
    var combinations = getAnyOfCombinations(cloneDeep(compacted));
    var result = tryMergeSchemaGroups(combinations, mergeSchemas);
    var unique = uniqWith(result, compare);

    if (unique.length) {
      return unique;
    }
  },

  not(compacted) {
    return {
      anyOf: compacted
    };
  },

  pattern(compacted, paths, mergeSchemas, options, reportUnresolved) {
    var key = paths.pop();
    reportUnresolved(compacted.map(function (regexp) {
      return {
        [key]: regexp
      };
    }));
  },

  multipleOf(compacted) {
    var integers = compacted.slice(0);
    var factor = 1;

    while (integers.some(n => !Number.isInteger(n))) {
      integers = integers.map(n => n * 10);
      factor = factor * 10;
    }

    return computeLcm(integers) / factor;
  },

  enum(compacted) {
    var enums = intersectionWith.apply(null, compacted.concat(isEqual));

    if (enums.length) {
      return sortBy(enums);
    }
  }

};
defaultResolvers.$id = first;
defaultResolvers.$ref = first;
defaultResolvers.$schema = first;
defaultResolvers.additionalItems = schemaResolver;
defaultResolvers.additionalProperties = schemaResolver;
defaultResolvers.anyOf = defaultResolvers.oneOf;
defaultResolvers.contains = schemaResolver;
defaultResolvers.default = first;
defaultResolvers.definitions = defaultResolvers.dependencies;
defaultResolvers.description = first;
defaultResolvers.examples = examples;
defaultResolvers.exclusiveMaximum = minimumValue;
defaultResolvers.exclusiveMinimum = maximumValue;
defaultResolvers.maximum = minimumValue;
defaultResolvers.maxItems = minimumValue;
defaultResolvers.maxLength = minimumValue;
defaultResolvers.maxProperties = minimumValue;
defaultResolvers.minimum = maximumValue;
defaultResolvers.minItems = maximumValue;
defaultResolvers.minLength = maximumValue;
defaultResolvers.minProperties = maximumValue;
defaultResolvers.propertyNames = schemaResolver;
defaultResolvers.required = required;
defaultResolvers.title = first;
defaultResolvers.uniqueItems = uniqueItems;

function merger(rootSchema, options, totalSchemas) {
  totalSchemas = totalSchemas || [];
  options = defaultsDeep(options, {
    ignoreAdditionalProperties: false,
    resolvers: defaultResolvers
  });

  function mergeSchemas(schemas, base, parents) {
    schemas = cloneDeep(schemas.filter(notUndefined));
    parents = parents || [];
    var merged = isPlainObject(base) ? base : {}; // return undefined, an empty schema

    if (!schemas.length) {
      return;
    }

    if (schemas.some(isFalse)) {
      return false;
    }

    if (schemas.every(isTrue)) {
      return true;
    } // there are no false and we don't need the true ones as they accept everything


    schemas = schemas.filter(isPlainObject);
    var allKeys = allUniqueKeys(schemas);

    if (contains(allKeys, 'allOf')) {
      return merger({
        allOf: schemas
      }, options, totalSchemas);
    }

    var propertyKeys = allKeys.filter(isPropertyRelated);
    pullAll(allKeys, propertyKeys);
    var itemKeys = allKeys.filter(isItemsRelated);
    pullAll(allKeys, itemKeys);
    allKeys.forEach(function (key) {
      var values = getValues(schemas, key);
      var compacted = uniqWith(values.filter(notUndefined), compareProp(key)); // arrayprops like anyOf and oneOf must be merged first, as they contains schemas
      // allOf is treated differently alltogether

      if (compacted.length === 1 && contains(schemaArrays, key)) {
        merged[key] = compacted[0].map(function (schema) {
          return mergeSchemas([schema], schema);
        }); // prop groups must always be resolved
      } else if (compacted.length === 1 && !contains(schemaGroupProps, key) && !contains(schemaProps, key)) {
        merged[key] = compacted[0];
      } else {
        var resolver = options.resolvers[key] || options.resolvers.defaultResolver;

        if (!resolver) {
          throw new Error('No resolver found for key ' + key + '. You can provide a resolver for this keyword in the options, or provide a default resolver.');
        }

        var merger; // get custom merger for groups

        if (contains(schemaGroupProps, key) || contains(schemaArrays, key)) {
          merger = createRequiredSubMerger(mergeSchemas, key, parents);
        } else {
          merger = function (schemas) {
            return mergeSchemas(schemas, null, parents.concat(key));
          };
        }

        var calledWithArray = false;
        merged[key] = resolver(compacted, parents.concat(key), merger, options, function (unresolvedSchemas) {
          calledWithArray = Array.isArray(unresolvedSchemas);
          return addToAllOf(unresolvedSchemas);
        });

        if (merged[key] === undefined && !calledWithArray) {
          throwIncompatible(compacted, parents.concat(key));
        } else if (merged[key] === undefined) {
          delete merged[key];
        }
      }
    });
    Object.assign(merged, callGroupResolver(propertyKeys, 'properties', schemas, mergeSchemas, options, parents));
    Object.assign(merged, callGroupResolver(itemKeys, 'items', schemas, mergeSchemas, options, parents));

    function addToAllOf(unresolvedSchemas) {
      merged.allOf = mergeWithArray(merged.allOf, unresolvedSchemas);
    }

    return merged;
  }

  var allSchemas = flattenDeep(getAllOf(rootSchema));
  var merged = mergeSchemas(allSchemas, rootSchema);
  return merged;
}

merger.options = {
  resolvers: defaultResolvers
};
module.exports = merger;

/***/ }),

/***/ "./node_modules/json-schema-traverse/index.js":
/***/ ((module) => {

"use strict";


var traverse = module.exports = function (schema, opts, cb) {
  // Legacy support for v0.3.1 and earlier.
  if (typeof opts == 'function') {
    cb = opts;
    opts = {};
  }

  cb = opts.cb || cb;
  var pre = typeof cb == 'function' ? cb : cb.pre || function () {};

  var post = cb.post || function () {};

  _traverse(opts, pre, post, schema, '', schema);
};

traverse.keywords = {
  additionalItems: true,
  items: true,
  contains: true,
  additionalProperties: true,
  propertyNames: true,
  not: true
};
traverse.arrayKeywords = {
  items: true,
  allOf: true,
  anyOf: true,
  oneOf: true
};
traverse.propsKeywords = {
  definitions: true,
  properties: true,
  patternProperties: true,
  dependencies: true
};
traverse.skipKeywords = {
  default: true,
  enum: true,
  const: true,
  required: true,
  maximum: true,
  minimum: true,
  exclusiveMaximum: true,
  exclusiveMinimum: true,
  multipleOf: true,
  maxLength: true,
  minLength: true,
  pattern: true,
  format: true,
  maxItems: true,
  minItems: true,
  uniqueItems: true,
  maxProperties: true,
  minProperties: true
};

function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
  if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
    pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);

    for (var key in schema) {
      var sch = schema[key];

      if (Array.isArray(sch)) {
        if (key in traverse.arrayKeywords) {
          for (var i = 0; i < sch.length; i++) _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);
        }
      } else if (key in traverse.propsKeywords) {
        if (sch && typeof sch == 'object') {
          for (var prop in sch) _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
        }
      } else if (key in traverse.keywords || opts.allKeys && !(key in traverse.skipKeywords)) {
        _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
      }
    }

    post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
  }
}

function escapeJsonPtr(str) {
  return str.replace(/~/g, '~0').replace(/\//g, '~1');
}

/***/ }),

/***/ "./node_modules/jsonpointer/jsonpointer.js":
/***/ ((__unused_webpack_module, exports) => {

var hasExcape = /~/;
var escapeMatcher = /~[01]/g;

function escapeReplacer(m) {
  switch (m) {
    case '~1':
      return '/';

    case '~0':
      return '~';
  }

  throw new Error('Invalid tilde escape: ' + m);
}

function untilde(str) {
  if (!hasExcape.test(str)) return str;
  return str.replace(escapeMatcher, escapeReplacer);
}

function setter(obj, pointer, value) {
  var part;
  var hasNextPart;

  for (var p = 1, len = pointer.length; p < len;) {
    if (pointer[p] === 'constructor' || pointer[p] === 'prototype' || pointer[p] === '__proto__') return obj;
    part = untilde(pointer[p++]);
    hasNextPart = len > p;

    if (typeof obj[part] === 'undefined') {
      // support setting of /-
      if (Array.isArray(obj) && part === '-') {
        part = obj.length;
      } // support nested objects/array when setting values


      if (hasNextPart) {
        if (pointer[p] !== '' && pointer[p] < Infinity || pointer[p] === '-') obj[part] = [];else obj[part] = {};
      }
    }

    if (!hasNextPart) break;
    obj = obj[part];
  }

  var oldValue = obj[part];
  if (value === undefined) delete obj[part];else obj[part] = value;
  return oldValue;
}

function compilePointer(pointer) {
  if (typeof pointer === 'string') {
    pointer = pointer.split('/');
    if (pointer[0] === '') return pointer;
    throw new Error('Invalid JSON pointer.');
  } else if (Array.isArray(pointer)) {
    for (const part of pointer) {
      if (typeof part !== 'string' && typeof part !== 'number') {
        throw new Error('Invalid JSON pointer. Must be of type string or number.');
      }
    }

    return pointer;
  }

  throw new Error('Invalid JSON pointer.');
}

function get(obj, pointer) {
  if (typeof obj !== 'object') throw new Error('Invalid input object.');
  pointer = compilePointer(pointer);
  var len = pointer.length;
  if (len === 1) return obj;

  for (var p = 1; p < len;) {
    obj = obj[untilde(pointer[p++])];
    if (len === p) return obj;
    if (typeof obj !== 'object') return undefined;
  }
}

function set(obj, pointer, value) {
  if (typeof obj !== 'object') throw new Error('Invalid input object.');
  pointer = compilePointer(pointer);
  if (pointer.length === 0) throw new Error('Invalid JSON pointer for set.');
  return setter(obj, pointer, value);
}

function compile(pointer) {
  var compiled = compilePointer(pointer);
  return {
    get: function (object) {
      return get(object, compiled);
    },
    set: function (object, value) {
      return set(object, compiled, value);
    }
  };
}

exports.get = get;
exports.set = set;
exports.compile = compile;

/***/ }),

/***/ "./node_modules/lodash/_DataView.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__("./node_modules/lodash/_getNative.js"),
    root = __webpack_require__("./node_modules/lodash/_root.js");
/* Built-in method references that are verified to be native. */


var DataView = getNative(root, 'DataView');
module.exports = DataView;

/***/ }),

/***/ "./node_modules/lodash/_Hash.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hashClear = __webpack_require__("./node_modules/lodash/_hashClear.js"),
    hashDelete = __webpack_require__("./node_modules/lodash/_hashDelete.js"),
    hashGet = __webpack_require__("./node_modules/lodash/_hashGet.js"),
    hashHas = __webpack_require__("./node_modules/lodash/_hashHas.js"),
    hashSet = __webpack_require__("./node_modules/lodash/_hashSet.js");
/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */


function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
} // Add methods to `Hash`.


Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
module.exports = Hash;

/***/ }),

/***/ "./node_modules/lodash/_ListCache.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var listCacheClear = __webpack_require__("./node_modules/lodash/_listCacheClear.js"),
    listCacheDelete = __webpack_require__("./node_modules/lodash/_listCacheDelete.js"),
    listCacheGet = __webpack_require__("./node_modules/lodash/_listCacheGet.js"),
    listCacheHas = __webpack_require__("./node_modules/lodash/_listCacheHas.js"),
    listCacheSet = __webpack_require__("./node_modules/lodash/_listCacheSet.js");
/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */


function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
} // Add methods to `ListCache`.


ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
module.exports = ListCache;

/***/ }),

/***/ "./node_modules/lodash/_Map.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__("./node_modules/lodash/_getNative.js"),
    root = __webpack_require__("./node_modules/lodash/_root.js");
/* Built-in method references that are verified to be native. */


var Map = getNative(root, 'Map');
module.exports = Map;

/***/ }),

/***/ "./node_modules/lodash/_MapCache.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mapCacheClear = __webpack_require__("./node_modules/lodash/_mapCacheClear.js"),
    mapCacheDelete = __webpack_require__("./node_modules/lodash/_mapCacheDelete.js"),
    mapCacheGet = __webpack_require__("./node_modules/lodash/_mapCacheGet.js"),
    mapCacheHas = __webpack_require__("./node_modules/lodash/_mapCacheHas.js"),
    mapCacheSet = __webpack_require__("./node_modules/lodash/_mapCacheSet.js");
/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */


function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
} // Add methods to `MapCache`.


MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
module.exports = MapCache;

/***/ }),

/***/ "./node_modules/lodash/_Promise.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__("./node_modules/lodash/_getNative.js"),
    root = __webpack_require__("./node_modules/lodash/_root.js");
/* Built-in method references that are verified to be native. */


var Promise = getNative(root, 'Promise');
module.exports = Promise;

/***/ }),

/***/ "./node_modules/lodash/_Set.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__("./node_modules/lodash/_getNative.js"),
    root = __webpack_require__("./node_modules/lodash/_root.js");
/* Built-in method references that are verified to be native. */


var Set = getNative(root, 'Set');
module.exports = Set;

/***/ }),

/***/ "./node_modules/lodash/_SetCache.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var MapCache = __webpack_require__("./node_modules/lodash/_MapCache.js"),
    setCacheAdd = __webpack_require__("./node_modules/lodash/_setCacheAdd.js"),
    setCacheHas = __webpack_require__("./node_modules/lodash/_setCacheHas.js");
/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */


function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;
  this.__data__ = new MapCache();

  while (++index < length) {
    this.add(values[index]);
  }
} // Add methods to `SetCache`.


SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;
module.exports = SetCache;

/***/ }),

/***/ "./node_modules/lodash/_Stack.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ListCache = __webpack_require__("./node_modules/lodash/_ListCache.js"),
    stackClear = __webpack_require__("./node_modules/lodash/_stackClear.js"),
    stackDelete = __webpack_require__("./node_modules/lodash/_stackDelete.js"),
    stackGet = __webpack_require__("./node_modules/lodash/_stackGet.js"),
    stackHas = __webpack_require__("./node_modules/lodash/_stackHas.js"),
    stackSet = __webpack_require__("./node_modules/lodash/_stackSet.js");
/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */


function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
} // Add methods to `Stack`.


Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;
module.exports = Stack;

/***/ }),

/***/ "./node_modules/lodash/_Symbol.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__("./node_modules/lodash/_root.js");
/** Built-in value references. */


var Symbol = root.Symbol;
module.exports = Symbol;

/***/ }),

/***/ "./node_modules/lodash/_Uint8Array.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__("./node_modules/lodash/_root.js");
/** Built-in value references. */


var Uint8Array = root.Uint8Array;
module.exports = Uint8Array;

/***/ }),

/***/ "./node_modules/lodash/_WeakMap.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__("./node_modules/lodash/_getNative.js"),
    root = __webpack_require__("./node_modules/lodash/_root.js");
/* Built-in method references that are verified to be native. */


var WeakMap = getNative(root, 'WeakMap');
module.exports = WeakMap;

/***/ }),

/***/ "./node_modules/lodash/_apply.js":
/***/ ((module) => {

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0:
      return func.call(thisArg);

    case 1:
      return func.call(thisArg, args[0]);

    case 2:
      return func.call(thisArg, args[0], args[1]);

    case 3:
      return func.call(thisArg, args[0], args[1], args[2]);
  }

  return func.apply(thisArg, args);
}

module.exports = apply;

/***/ }),

/***/ "./node_modules/lodash/_arrayEach.js":
/***/ ((module) => {

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }

  return array;
}

module.exports = arrayEach;

/***/ }),

/***/ "./node_modules/lodash/_arrayFilter.js":
/***/ ((module) => {

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];

    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }

  return result;
}

module.exports = arrayFilter;

/***/ }),

/***/ "./node_modules/lodash/_arrayIncludes.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIndexOf = __webpack_require__("./node_modules/lodash/_baseIndexOf.js");
/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */


function arrayIncludes(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

module.exports = arrayIncludes;

/***/ }),

/***/ "./node_modules/lodash/_arrayIncludesWith.js":
/***/ ((module) => {

/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }

  return false;
}

module.exports = arrayIncludesWith;

/***/ }),

/***/ "./node_modules/lodash/_arrayLikeKeys.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseTimes = __webpack_require__("./node_modules/lodash/_baseTimes.js"),
    isArguments = __webpack_require__("./node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__("./node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__("./node_modules/lodash/isBuffer.js"),
    isIndex = __webpack_require__("./node_modules/lodash/_isIndex.js"),
    isTypedArray = __webpack_require__("./node_modules/lodash/isTypedArray.js");
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */

function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.
    key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
    isIndex(key, length)))) {
      result.push(key);
    }
  }

  return result;
}

module.exports = arrayLikeKeys;

/***/ }),

/***/ "./node_modules/lodash/_arrayMap.js":
/***/ ((module) => {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }

  return result;
}

module.exports = arrayMap;

/***/ }),

/***/ "./node_modules/lodash/_arrayPush.js":
/***/ ((module) => {

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }

  return array;
}

module.exports = arrayPush;

/***/ }),

/***/ "./node_modules/lodash/_arraySome.js":
/***/ ((module) => {

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }

  return false;
}

module.exports = arraySome;

/***/ }),

/***/ "./node_modules/lodash/_assignMergeValue.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseAssignValue = __webpack_require__("./node_modules/lodash/_baseAssignValue.js"),
    eq = __webpack_require__("./node_modules/lodash/eq.js");
/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */


function assignMergeValue(object, key, value) {
  if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignMergeValue;

/***/ }),

/***/ "./node_modules/lodash/_assignValue.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseAssignValue = __webpack_require__("./node_modules/lodash/_baseAssignValue.js"),
    eq = __webpack_require__("./node_modules/lodash/eq.js");
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */

function assignValue(object, key, value) {
  var objValue = object[key];

  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;

/***/ }),

/***/ "./node_modules/lodash/_assocIndexOf.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var eq = __webpack_require__("./node_modules/lodash/eq.js");
/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */


function assocIndexOf(array, key) {
  var length = array.length;

  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }

  return -1;
}

module.exports = assocIndexOf;

/***/ }),

/***/ "./node_modules/lodash/_baseAssign.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__("./node_modules/lodash/_copyObject.js"),
    keys = __webpack_require__("./node_modules/lodash/keys.js");
/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */


function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;

/***/ }),

/***/ "./node_modules/lodash/_baseAssignIn.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__("./node_modules/lodash/_copyObject.js"),
    keysIn = __webpack_require__("./node_modules/lodash/keysIn.js");
/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */


function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn(source), object);
}

module.exports = baseAssignIn;

/***/ }),

/***/ "./node_modules/lodash/_baseAssignValue.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var defineProperty = __webpack_require__("./node_modules/lodash/_defineProperty.js");
/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */


function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;

/***/ }),

/***/ "./node_modules/lodash/_baseClone.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stack = __webpack_require__("./node_modules/lodash/_Stack.js"),
    arrayEach = __webpack_require__("./node_modules/lodash/_arrayEach.js"),
    assignValue = __webpack_require__("./node_modules/lodash/_assignValue.js"),
    baseAssign = __webpack_require__("./node_modules/lodash/_baseAssign.js"),
    baseAssignIn = __webpack_require__("./node_modules/lodash/_baseAssignIn.js"),
    cloneBuffer = __webpack_require__("./node_modules/lodash/_cloneBuffer.js"),
    copyArray = __webpack_require__("./node_modules/lodash/_copyArray.js"),
    copySymbols = __webpack_require__("./node_modules/lodash/_copySymbols.js"),
    copySymbolsIn = __webpack_require__("./node_modules/lodash/_copySymbolsIn.js"),
    getAllKeys = __webpack_require__("./node_modules/lodash/_getAllKeys.js"),
    getAllKeysIn = __webpack_require__("./node_modules/lodash/_getAllKeysIn.js"),
    getTag = __webpack_require__("./node_modules/lodash/_getTag.js"),
    initCloneArray = __webpack_require__("./node_modules/lodash/_initCloneArray.js"),
    initCloneByTag = __webpack_require__("./node_modules/lodash/_initCloneByTag.js"),
    initCloneObject = __webpack_require__("./node_modules/lodash/_initCloneObject.js"),
    isArray = __webpack_require__("./node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__("./node_modules/lodash/isBuffer.js"),
    isMap = __webpack_require__("./node_modules/lodash/isMap.js"),
    isObject = __webpack_require__("./node_modules/lodash/isObject.js"),
    isSet = __webpack_require__("./node_modules/lodash/isSet.js"),
    keys = __webpack_require__("./node_modules/lodash/keys.js"),
    keysIn = __webpack_require__("./node_modules/lodash/keysIn.js");
/** Used to compose bitmasks for cloning. */


var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;
/** `Object#toString` result references. */

var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values supported by `_.clone`. */

var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */

function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }

  if (result !== undefined) {
    return result;
  }

  if (!isObject(value)) {
    return value;
  }

  var isArr = isArray(value);

  if (isArr) {
    result = initCloneArray(value);

    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }

    if (tag == objectTag || tag == argsTag || isFunc && !object) {
      result = isFlat || isFunc ? {} : initCloneObject(value);

      if (!isDeep) {
        return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }

      result = initCloneByTag(value, tag, isDeep);
    }
  } // Check for circular references and return its corresponding clone.


  stack || (stack = new Stack());
  var stacked = stack.get(value);

  if (stacked) {
    return stacked;
  }

  stack.set(value, result);

  if (isSet(value)) {
    value.forEach(function (subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap(value)) {
    value.forEach(function (subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function (subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    } // Recursively populate clone (susceptible to call stack limits).


    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

module.exports = baseClone;

/***/ }),

/***/ "./node_modules/lodash/_baseCreate.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__("./node_modules/lodash/isObject.js");
/** Built-in value references. */


var objectCreate = Object.create;
/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */

var baseCreate = function () {
  function object() {}

  return function (proto) {
    if (!isObject(proto)) {
      return {};
    }

    if (objectCreate) {
      return objectCreate(proto);
    }

    object.prototype = proto;
    var result = new object();
    object.prototype = undefined;
    return result;
  };
}();

module.exports = baseCreate;

/***/ }),

/***/ "./node_modules/lodash/_baseDifference.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var SetCache = __webpack_require__("./node_modules/lodash/_SetCache.js"),
    arrayIncludes = __webpack_require__("./node_modules/lodash/_arrayIncludes.js"),
    arrayIncludesWith = __webpack_require__("./node_modules/lodash/_arrayIncludesWith.js"),
    arrayMap = __webpack_require__("./node_modules/lodash/_arrayMap.js"),
    baseUnary = __webpack_require__("./node_modules/lodash/_baseUnary.js"),
    cacheHas = __webpack_require__("./node_modules/lodash/_cacheHas.js");
/** Used as the size to enable large array optimizations. */


var LARGE_ARRAY_SIZE = 200;
/**
 * The base implementation of methods like `_.difference` without support
 * for excluding multiple arrays or iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Array} values The values to exclude.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 */

function baseDifference(array, values, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      isCommon = true,
      length = array.length,
      result = [],
      valuesLength = values.length;

  if (!length) {
    return result;
  }

  if (iteratee) {
    values = arrayMap(values, baseUnary(iteratee));
  }

  if (comparator) {
    includes = arrayIncludesWith;
    isCommon = false;
  } else if (values.length >= LARGE_ARRAY_SIZE) {
    includes = cacheHas;
    isCommon = false;
    values = new SetCache(values);
  }

  outer: while (++index < length) {
    var value = array[index],
        computed = iteratee == null ? value : iteratee(value);
    value = comparator || value !== 0 ? value : 0;

    if (isCommon && computed === computed) {
      var valuesIndex = valuesLength;

      while (valuesIndex--) {
        if (values[valuesIndex] === computed) {
          continue outer;
        }
      }

      result.push(value);
    } else if (!includes(values, computed, comparator)) {
      result.push(value);
    }
  }

  return result;
}

module.exports = baseDifference;

/***/ }),

/***/ "./node_modules/lodash/_baseEach.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseForOwn = __webpack_require__("./node_modules/lodash/_baseForOwn.js"),
    createBaseEach = __webpack_require__("./node_modules/lodash/_createBaseEach.js");
/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */


var baseEach = createBaseEach(baseForOwn);
module.exports = baseEach;

/***/ }),

/***/ "./node_modules/lodash/_baseFindIndex.js":
/***/ ((module) => {

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while (fromRight ? index-- : ++index < length) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }

  return -1;
}

module.exports = baseFindIndex;

/***/ }),

/***/ "./node_modules/lodash/_baseFlatten.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayPush = __webpack_require__("./node_modules/lodash/_arrayPush.js"),
    isFlattenable = __webpack_require__("./node_modules/lodash/_isFlattenable.js");
/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */


function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;
  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];

    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }

  return result;
}

module.exports = baseFlatten;

/***/ }),

/***/ "./node_modules/lodash/_baseFor.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var createBaseFor = __webpack_require__("./node_modules/lodash/_createBaseFor.js");
/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */


var baseFor = createBaseFor();
module.exports = baseFor;

/***/ }),

/***/ "./node_modules/lodash/_baseForOwn.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFor = __webpack_require__("./node_modules/lodash/_baseFor.js"),
    keys = __webpack_require__("./node_modules/lodash/keys.js");
/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */


function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;

/***/ }),

/***/ "./node_modules/lodash/_baseGet.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var castPath = __webpack_require__("./node_modules/lodash/_castPath.js"),
    toKey = __webpack_require__("./node_modules/lodash/_toKey.js");
/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */


function baseGet(object, path) {
  path = castPath(path, object);
  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }

  return index && index == length ? object : undefined;
}

module.exports = baseGet;

/***/ }),

/***/ "./node_modules/lodash/_baseGetAllKeys.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayPush = __webpack_require__("./node_modules/lodash/_arrayPush.js"),
    isArray = __webpack_require__("./node_modules/lodash/isArray.js");
/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */


function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;

/***/ }),

/***/ "./node_modules/lodash/_baseGetTag.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__("./node_modules/lodash/_Symbol.js"),
    getRawTag = __webpack_require__("./node_modules/lodash/_getRawTag.js"),
    objectToString = __webpack_require__("./node_modules/lodash/_objectToString.js");
/** `Object#toString` result references. */


var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';
/** Built-in value references. */

var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }

  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}

module.exports = baseGetTag;

/***/ }),

/***/ "./node_modules/lodash/_baseHasIn.js":
/***/ ((module) => {

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;

/***/ }),

/***/ "./node_modules/lodash/_baseIndexOf.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFindIndex = __webpack_require__("./node_modules/lodash/_baseFindIndex.js"),
    baseIsNaN = __webpack_require__("./node_modules/lodash/_baseIsNaN.js"),
    strictIndexOf = __webpack_require__("./node_modules/lodash/_strictIndexOf.js");
/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */


function baseIndexOf(array, value, fromIndex) {
  return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
}

module.exports = baseIndexOf;

/***/ }),

/***/ "./node_modules/lodash/_baseIndexOfWith.js":
/***/ ((module) => {

/**
 * This function is like `baseIndexOf` except that it accepts a comparator.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOfWith(array, value, fromIndex, comparator) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (comparator(array[index], value)) {
      return index;
    }
  }

  return -1;
}

module.exports = baseIndexOfWith;

/***/ }),

/***/ "./node_modules/lodash/_baseIntersection.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var SetCache = __webpack_require__("./node_modules/lodash/_SetCache.js"),
    arrayIncludes = __webpack_require__("./node_modules/lodash/_arrayIncludes.js"),
    arrayIncludesWith = __webpack_require__("./node_modules/lodash/_arrayIncludesWith.js"),
    arrayMap = __webpack_require__("./node_modules/lodash/_arrayMap.js"),
    baseUnary = __webpack_require__("./node_modules/lodash/_baseUnary.js"),
    cacheHas = __webpack_require__("./node_modules/lodash/_cacheHas.js");
/* Built-in method references for those with the same name as other `lodash` methods. */


var nativeMin = Math.min;
/**
 * The base implementation of methods like `_.intersection`, without support
 * for iteratee shorthands, that accepts an array of arrays to inspect.
 *
 * @private
 * @param {Array} arrays The arrays to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of shared values.
 */

function baseIntersection(arrays, iteratee, comparator) {
  var includes = comparator ? arrayIncludesWith : arrayIncludes,
      length = arrays[0].length,
      othLength = arrays.length,
      othIndex = othLength,
      caches = Array(othLength),
      maxLength = Infinity,
      result = [];

  while (othIndex--) {
    var array = arrays[othIndex];

    if (othIndex && iteratee) {
      array = arrayMap(array, baseUnary(iteratee));
    }

    maxLength = nativeMin(array.length, maxLength);
    caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
  }

  array = arrays[0];
  var index = -1,
      seen = caches[0];

  outer: while (++index < length && result.length < maxLength) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;
    value = comparator || value !== 0 ? value : 0;

    if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
      othIndex = othLength;

      while (--othIndex) {
        var cache = caches[othIndex];

        if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
          continue outer;
        }
      }

      if (seen) {
        seen.push(computed);
      }

      result.push(value);
    }
  }

  return result;
}

module.exports = baseIntersection;

/***/ }),

/***/ "./node_modules/lodash/_baseIsArguments.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__("./node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__("./node_modules/lodash/isObjectLike.js");
/** `Object#toString` result references. */


var argsTag = '[object Arguments]';
/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */

function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;

/***/ }),

/***/ "./node_modules/lodash/_baseIsEqual.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsEqualDeep = __webpack_require__("./node_modules/lodash/_baseIsEqualDeep.js"),
    isObjectLike = __webpack_require__("./node_modules/lodash/isObjectLike.js");
/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */


function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }

  if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
    return value !== value && other !== other;
  }

  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;

/***/ }),

/***/ "./node_modules/lodash/_baseIsEqualDeep.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stack = __webpack_require__("./node_modules/lodash/_Stack.js"),
    equalArrays = __webpack_require__("./node_modules/lodash/_equalArrays.js"),
    equalByTag = __webpack_require__("./node_modules/lodash/_equalByTag.js"),
    equalObjects = __webpack_require__("./node_modules/lodash/_equalObjects.js"),
    getTag = __webpack_require__("./node_modules/lodash/_getTag.js"),
    isArray = __webpack_require__("./node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__("./node_modules/lodash/isBuffer.js"),
    isTypedArray = __webpack_require__("./node_modules/lodash/isTypedArray.js");
/** Used to compose bitmasks for value comparisons. */


var COMPARE_PARTIAL_FLAG = 1;
/** `Object#toString` result references. */

var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';
/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);
  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;
  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }

    objIsArr = true;
    objIsObj = false;
  }

  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack());
    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }

  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;
      stack || (stack = new Stack());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }

  if (!isSameTag) {
    return false;
  }

  stack || (stack = new Stack());
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;

/***/ }),

/***/ "./node_modules/lodash/_baseIsMap.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getTag = __webpack_require__("./node_modules/lodash/_getTag.js"),
    isObjectLike = __webpack_require__("./node_modules/lodash/isObjectLike.js");
/** `Object#toString` result references. */


var mapTag = '[object Map]';
/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */

function baseIsMap(value) {
  return isObjectLike(value) && getTag(value) == mapTag;
}

module.exports = baseIsMap;

/***/ }),

/***/ "./node_modules/lodash/_baseIsMatch.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stack = __webpack_require__("./node_modules/lodash/_Stack.js"),
    baseIsEqual = __webpack_require__("./node_modules/lodash/_baseIsEqual.js");
/** Used to compose bitmasks for value comparisons. */


var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;
/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */

function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }

  object = Object(object);

  while (index--) {
    var data = matchData[index];

    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
      return false;
    }
  }

  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack();

      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }

      if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
        return false;
      }
    }
  }

  return true;
}

module.exports = baseIsMatch;

/***/ }),

/***/ "./node_modules/lodash/_baseIsNaN.js":
/***/ ((module) => {

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

module.exports = baseIsNaN;

/***/ }),

/***/ "./node_modules/lodash/_baseIsNative.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isFunction = __webpack_require__("./node_modules/lodash/isFunction.js"),
    isMasked = __webpack_require__("./node_modules/lodash/_isMasked.js"),
    isObject = __webpack_require__("./node_modules/lodash/isObject.js"),
    toSource = __webpack_require__("./node_modules/lodash/_toSource.js");
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */


var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to detect host constructors (Safari). */

var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used for built-in method references. */

var funcProto = Function.prototype,
    objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */

var funcToString = funcProto.toString;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to detect if a method is native. */

var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */

function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }

  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;

/***/ }),

/***/ "./node_modules/lodash/_baseIsSet.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getTag = __webpack_require__("./node_modules/lodash/_getTag.js"),
    isObjectLike = __webpack_require__("./node_modules/lodash/isObjectLike.js");
/** `Object#toString` result references. */


var setTag = '[object Set]';
/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */

function baseIsSet(value) {
  return isObjectLike(value) && getTag(value) == setTag;
}

module.exports = baseIsSet;

/***/ }),

/***/ "./node_modules/lodash/_baseIsTypedArray.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__("./node_modules/lodash/_baseGetTag.js"),
    isLength = __webpack_require__("./node_modules/lodash/isLength.js"),
    isObjectLike = __webpack_require__("./node_modules/lodash/isObjectLike.js");
/** `Object#toString` result references. */


var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values of typed arrays. */

var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */

function baseIsTypedArray(value) {
  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;

/***/ }),

/***/ "./node_modules/lodash/_baseIteratee.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseMatches = __webpack_require__("./node_modules/lodash/_baseMatches.js"),
    baseMatchesProperty = __webpack_require__("./node_modules/lodash/_baseMatchesProperty.js"),
    identity = __webpack_require__("./node_modules/lodash/identity.js"),
    isArray = __webpack_require__("./node_modules/lodash/isArray.js"),
    property = __webpack_require__("./node_modules/lodash/property.js");
/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */


function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }

  if (value == null) {
    return identity;
  }

  if (typeof value == 'object') {
    return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
  }

  return property(value);
}

module.exports = baseIteratee;

/***/ }),

/***/ "./node_modules/lodash/_baseKeys.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isPrototype = __webpack_require__("./node_modules/lodash/_isPrototype.js"),
    nativeKeys = __webpack_require__("./node_modules/lodash/_nativeKeys.js");
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }

  var result = [];

  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }

  return result;
}

module.exports = baseKeys;

/***/ }),

/***/ "./node_modules/lodash/_baseKeysIn.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__("./node_modules/lodash/isObject.js"),
    isPrototype = __webpack_require__("./node_modules/lodash/_isPrototype.js"),
    nativeKeysIn = __webpack_require__("./node_modules/lodash/_nativeKeysIn.js");
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }

  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }

  return result;
}

module.exports = baseKeysIn;

/***/ }),

/***/ "./node_modules/lodash/_baseMap.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseEach = __webpack_require__("./node_modules/lodash/_baseEach.js"),
    isArrayLike = __webpack_require__("./node_modules/lodash/isArrayLike.js");
/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */


function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];
  baseEach(collection, function (value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

module.exports = baseMap;

/***/ }),

/***/ "./node_modules/lodash/_baseMatches.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsMatch = __webpack_require__("./node_modules/lodash/_baseIsMatch.js"),
    getMatchData = __webpack_require__("./node_modules/lodash/_getMatchData.js"),
    matchesStrictComparable = __webpack_require__("./node_modules/lodash/_matchesStrictComparable.js");
/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */


function baseMatches(source) {
  var matchData = getMatchData(source);

  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }

  return function (object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;

/***/ }),

/***/ "./node_modules/lodash/_baseMatchesProperty.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsEqual = __webpack_require__("./node_modules/lodash/_baseIsEqual.js"),
    get = __webpack_require__("./node_modules/lodash/get.js"),
    hasIn = __webpack_require__("./node_modules/lodash/hasIn.js"),
    isKey = __webpack_require__("./node_modules/lodash/_isKey.js"),
    isStrictComparable = __webpack_require__("./node_modules/lodash/_isStrictComparable.js"),
    matchesStrictComparable = __webpack_require__("./node_modules/lodash/_matchesStrictComparable.js"),
    toKey = __webpack_require__("./node_modules/lodash/_toKey.js");
/** Used to compose bitmasks for value comparisons. */


var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;
/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */

function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }

  return function (object) {
    var objValue = get(object, path);
    return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;

/***/ }),

/***/ "./node_modules/lodash/_baseMerge.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stack = __webpack_require__("./node_modules/lodash/_Stack.js"),
    assignMergeValue = __webpack_require__("./node_modules/lodash/_assignMergeValue.js"),
    baseFor = __webpack_require__("./node_modules/lodash/_baseFor.js"),
    baseMergeDeep = __webpack_require__("./node_modules/lodash/_baseMergeDeep.js"),
    isObject = __webpack_require__("./node_modules/lodash/isObject.js"),
    keysIn = __webpack_require__("./node_modules/lodash/keysIn.js"),
    safeGet = __webpack_require__("./node_modules/lodash/_safeGet.js");
/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */


function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }

  baseFor(source, function (srcValue, key) {
    stack || (stack = new Stack());

    if (isObject(srcValue)) {
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    } else {
      var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }

      assignMergeValue(object, key, newValue);
    }
  }, keysIn);
}

module.exports = baseMerge;

/***/ }),

/***/ "./node_modules/lodash/_baseMergeDeep.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assignMergeValue = __webpack_require__("./node_modules/lodash/_assignMergeValue.js"),
    cloneBuffer = __webpack_require__("./node_modules/lodash/_cloneBuffer.js"),
    cloneTypedArray = __webpack_require__("./node_modules/lodash/_cloneTypedArray.js"),
    copyArray = __webpack_require__("./node_modules/lodash/_copyArray.js"),
    initCloneObject = __webpack_require__("./node_modules/lodash/_initCloneObject.js"),
    isArguments = __webpack_require__("./node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__("./node_modules/lodash/isArray.js"),
    isArrayLikeObject = __webpack_require__("./node_modules/lodash/isArrayLikeObject.js"),
    isBuffer = __webpack_require__("./node_modules/lodash/isBuffer.js"),
    isFunction = __webpack_require__("./node_modules/lodash/isFunction.js"),
    isObject = __webpack_require__("./node_modules/lodash/isObject.js"),
    isPlainObject = __webpack_require__("./node_modules/lodash/isPlainObject.js"),
    isTypedArray = __webpack_require__("./node_modules/lodash/isTypedArray.js"),
    safeGet = __webpack_require__("./node_modules/lodash/_safeGet.js"),
    toPlainObject = __webpack_require__("./node_modules/lodash/toPlainObject.js");
/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */


function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet(object, key),
      srcValue = safeGet(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }

  var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray(srcValue),
        isBuff = !isArr && isBuffer(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray(srcValue);
    newValue = srcValue;

    if (isArr || isBuff || isTyped) {
      if (isArray(objValue)) {
        newValue = objValue;
      } else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      } else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      } else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      } else {
        newValue = [];
      }
    } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
      newValue = objValue;

      if (isArguments(objValue)) {
        newValue = toPlainObject(objValue);
      } else if (!isObject(objValue) || isFunction(objValue)) {
        newValue = initCloneObject(srcValue);
      }
    } else {
      isCommon = false;
    }
  }

  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }

  assignMergeValue(object, key, newValue);
}

module.exports = baseMergeDeep;

/***/ }),

/***/ "./node_modules/lodash/_baseOrderBy.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayMap = __webpack_require__("./node_modules/lodash/_arrayMap.js"),
    baseGet = __webpack_require__("./node_modules/lodash/_baseGet.js"),
    baseIteratee = __webpack_require__("./node_modules/lodash/_baseIteratee.js"),
    baseMap = __webpack_require__("./node_modules/lodash/_baseMap.js"),
    baseSortBy = __webpack_require__("./node_modules/lodash/_baseSortBy.js"),
    baseUnary = __webpack_require__("./node_modules/lodash/_baseUnary.js"),
    compareMultiple = __webpack_require__("./node_modules/lodash/_compareMultiple.js"),
    identity = __webpack_require__("./node_modules/lodash/identity.js"),
    isArray = __webpack_require__("./node_modules/lodash/isArray.js");
/**
 * The base implementation of `_.orderBy` without param guards.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
 * @param {string[]} orders The sort orders of `iteratees`.
 * @returns {Array} Returns the new sorted array.
 */


function baseOrderBy(collection, iteratees, orders) {
  if (iteratees.length) {
    iteratees = arrayMap(iteratees, function (iteratee) {
      if (isArray(iteratee)) {
        return function (value) {
          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
        };
      }

      return iteratee;
    });
  } else {
    iteratees = [identity];
  }

  var index = -1;
  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));
  var result = baseMap(collection, function (value, key, collection) {
    var criteria = arrayMap(iteratees, function (iteratee) {
      return iteratee(value);
    });
    return {
      'criteria': criteria,
      'index': ++index,
      'value': value
    };
  });
  return baseSortBy(result, function (object, other) {
    return compareMultiple(object, other, orders);
  });
}

module.exports = baseOrderBy;

/***/ }),

/***/ "./node_modules/lodash/_basePick.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var basePickBy = __webpack_require__("./node_modules/lodash/_basePickBy.js"),
    hasIn = __webpack_require__("./node_modules/lodash/hasIn.js");
/**
 * The base implementation of `_.pick` without support for individual
 * property identifiers.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @returns {Object} Returns the new object.
 */


function basePick(object, paths) {
  return basePickBy(object, paths, function (value, path) {
    return hasIn(object, path);
  });
}

module.exports = basePick;

/***/ }),

/***/ "./node_modules/lodash/_basePickBy.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGet = __webpack_require__("./node_modules/lodash/_baseGet.js"),
    baseSet = __webpack_require__("./node_modules/lodash/_baseSet.js"),
    castPath = __webpack_require__("./node_modules/lodash/_castPath.js");
/**
 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */


function basePickBy(object, paths, predicate) {
  var index = -1,
      length = paths.length,
      result = {};

  while (++index < length) {
    var path = paths[index],
        value = baseGet(object, path);

    if (predicate(value, path)) {
      baseSet(result, castPath(path, object), value);
    }
  }

  return result;
}

module.exports = basePickBy;

/***/ }),

/***/ "./node_modules/lodash/_baseProperty.js":
/***/ ((module) => {

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function (object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;

/***/ }),

/***/ "./node_modules/lodash/_basePropertyDeep.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGet = __webpack_require__("./node_modules/lodash/_baseGet.js");
/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */


function basePropertyDeep(path) {
  return function (object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;

/***/ }),

/***/ "./node_modules/lodash/_basePullAll.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayMap = __webpack_require__("./node_modules/lodash/_arrayMap.js"),
    baseIndexOf = __webpack_require__("./node_modules/lodash/_baseIndexOf.js"),
    baseIndexOfWith = __webpack_require__("./node_modules/lodash/_baseIndexOfWith.js"),
    baseUnary = __webpack_require__("./node_modules/lodash/_baseUnary.js"),
    copyArray = __webpack_require__("./node_modules/lodash/_copyArray.js");
/** Used for built-in method references. */


var arrayProto = Array.prototype;
/** Built-in value references. */

var splice = arrayProto.splice;
/**
 * The base implementation of `_.pullAllBy` without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to remove.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns `array`.
 */

function basePullAll(array, values, iteratee, comparator) {
  var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
      index = -1,
      length = values.length,
      seen = array;

  if (array === values) {
    values = copyArray(values);
  }

  if (iteratee) {
    seen = arrayMap(array, baseUnary(iteratee));
  }

  while (++index < length) {
    var fromIndex = 0,
        value = values[index],
        computed = iteratee ? iteratee(value) : value;

    while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
      if (seen !== array) {
        splice.call(seen, fromIndex, 1);
      }

      splice.call(array, fromIndex, 1);
    }
  }

  return array;
}

module.exports = basePullAll;

/***/ }),

/***/ "./node_modules/lodash/_baseRest.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var identity = __webpack_require__("./node_modules/lodash/identity.js"),
    overRest = __webpack_require__("./node_modules/lodash/_overRest.js"),
    setToString = __webpack_require__("./node_modules/lodash/_setToString.js");
/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */


function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;

/***/ }),

/***/ "./node_modules/lodash/_baseSet.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assignValue = __webpack_require__("./node_modules/lodash/_assignValue.js"),
    castPath = __webpack_require__("./node_modules/lodash/_castPath.js"),
    isIndex = __webpack_require__("./node_modules/lodash/_isIndex.js"),
    isObject = __webpack_require__("./node_modules/lodash/isObject.js"),
    toKey = __webpack_require__("./node_modules/lodash/_toKey.js");
/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */


function baseSet(object, path, value, customizer) {
  if (!isObject(object)) {
    return object;
  }

  path = castPath(path, object);
  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
      return object;
    }

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;

      if (newValue === undefined) {
        newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
      }
    }

    assignValue(nested, key, newValue);
    nested = nested[key];
  }

  return object;
}

module.exports = baseSet;

/***/ }),

/***/ "./node_modules/lodash/_baseSetToString.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var constant = __webpack_require__("./node_modules/lodash/constant.js"),
    defineProperty = __webpack_require__("./node_modules/lodash/_defineProperty.js"),
    identity = __webpack_require__("./node_modules/lodash/identity.js");
/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */


var baseSetToString = !defineProperty ? identity : function (func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};
module.exports = baseSetToString;

/***/ }),

/***/ "./node_modules/lodash/_baseSortBy.js":
/***/ ((module) => {

/**
 * The base implementation of `_.sortBy` which uses `comparer` to define the
 * sort order of `array` and replaces criteria objects with their corresponding
 * values.
 *
 * @private
 * @param {Array} array The array to sort.
 * @param {Function} comparer The function to define sort order.
 * @returns {Array} Returns `array`.
 */
function baseSortBy(array, comparer) {
  var length = array.length;
  array.sort(comparer);

  while (length--) {
    array[length] = array[length].value;
  }

  return array;
}

module.exports = baseSortBy;

/***/ }),

/***/ "./node_modules/lodash/_baseTimes.js":
/***/ ((module) => {

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }

  return result;
}

module.exports = baseTimes;

/***/ }),

/***/ "./node_modules/lodash/_baseToString.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__("./node_modules/lodash/_Symbol.js"),
    arrayMap = __webpack_require__("./node_modules/lodash/_arrayMap.js"),
    isArray = __webpack_require__("./node_modules/lodash/isArray.js"),
    isSymbol = __webpack_require__("./node_modules/lodash/isSymbol.js");
/** Used as references for various `Number` constants. */


var INFINITY = 1 / 0;
/** Used to convert symbols to primitives and strings. */

var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;
/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */

function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }

  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }

  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }

  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

module.exports = baseToString;

/***/ }),

/***/ "./node_modules/lodash/_baseUnary.js":
/***/ ((module) => {

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function (value) {
    return func(value);
  };
}

module.exports = baseUnary;

/***/ }),

/***/ "./node_modules/lodash/_baseUniq.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var SetCache = __webpack_require__("./node_modules/lodash/_SetCache.js"),
    arrayIncludes = __webpack_require__("./node_modules/lodash/_arrayIncludes.js"),
    arrayIncludesWith = __webpack_require__("./node_modules/lodash/_arrayIncludesWith.js"),
    cacheHas = __webpack_require__("./node_modules/lodash/_cacheHas.js"),
    createSet = __webpack_require__("./node_modules/lodash/_createSet.js"),
    setToArray = __webpack_require__("./node_modules/lodash/_setToArray.js");
/** Used as the size to enable large array optimizations. */


var LARGE_ARRAY_SIZE = 200;
/**
 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 */

function baseUniq(array, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      length = array.length,
      isCommon = true,
      result = [],
      seen = result;

  if (comparator) {
    isCommon = false;
    includes = arrayIncludesWith;
  } else if (length >= LARGE_ARRAY_SIZE) {
    var set = iteratee ? null : createSet(array);

    if (set) {
      return setToArray(set);
    }

    isCommon = false;
    includes = cacheHas;
    seen = new SetCache();
  } else {
    seen = iteratee ? [] : result;
  }

  outer: while (++index < length) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;
    value = comparator || value !== 0 ? value : 0;

    if (isCommon && computed === computed) {
      var seenIndex = seen.length;

      while (seenIndex--) {
        if (seen[seenIndex] === computed) {
          continue outer;
        }
      }

      if (iteratee) {
        seen.push(computed);
      }

      result.push(value);
    } else if (!includes(seen, computed, comparator)) {
      if (seen !== result) {
        seen.push(computed);
      }

      result.push(value);
    }
  }

  return result;
}

module.exports = baseUniq;

/***/ }),

/***/ "./node_modules/lodash/_cacheHas.js":
/***/ ((module) => {

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;

/***/ }),

/***/ "./node_modules/lodash/_castArrayLikeObject.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArrayLikeObject = __webpack_require__("./node_modules/lodash/isArrayLikeObject.js");
/**
 * Casts `value` to an empty array if it's not an array like object.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array|Object} Returns the cast array-like object.
 */


function castArrayLikeObject(value) {
  return isArrayLikeObject(value) ? value : [];
}

module.exports = castArrayLikeObject;

/***/ }),

/***/ "./node_modules/lodash/_castFunction.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var identity = __webpack_require__("./node_modules/lodash/identity.js");
/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */


function castFunction(value) {
  return typeof value == 'function' ? value : identity;
}

module.exports = castFunction;

/***/ }),

/***/ "./node_modules/lodash/_castPath.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArray = __webpack_require__("./node_modules/lodash/isArray.js"),
    isKey = __webpack_require__("./node_modules/lodash/_isKey.js"),
    stringToPath = __webpack_require__("./node_modules/lodash/_stringToPath.js"),
    toString = __webpack_require__("./node_modules/lodash/toString.js");
/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */


function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }

  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;

/***/ }),

/***/ "./node_modules/lodash/_cloneArrayBuffer.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Uint8Array = __webpack_require__("./node_modules/lodash/_Uint8Array.js");
/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */


function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

module.exports = cloneArrayBuffer;

/***/ }),

/***/ "./node_modules/lodash/_cloneBuffer.js":
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
var root = __webpack_require__("./node_modules/lodash/_root.js");
/** Detect free variable `exports`. */


var freeExports =  true && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */

var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */

var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */

var Buffer = moduleExports ? root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */

function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }

  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;

/***/ }),

/***/ "./node_modules/lodash/_cloneDataView.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var cloneArrayBuffer = __webpack_require__("./node_modules/lodash/_cloneArrayBuffer.js");
/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */


function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

module.exports = cloneDataView;

/***/ }),

/***/ "./node_modules/lodash/_cloneRegExp.js":
/***/ ((module) => {

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;
/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */

function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

module.exports = cloneRegExp;

/***/ }),

/***/ "./node_modules/lodash/_cloneSymbol.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__("./node_modules/lodash/_Symbol.js");
/** Used to convert symbols to primitives and strings. */


var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */

function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

module.exports = cloneSymbol;

/***/ }),

/***/ "./node_modules/lodash/_cloneTypedArray.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var cloneArrayBuffer = __webpack_require__("./node_modules/lodash/_cloneArrayBuffer.js");
/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */


function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

module.exports = cloneTypedArray;

/***/ }),

/***/ "./node_modules/lodash/_compareAscending.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isSymbol = __webpack_require__("./node_modules/lodash/isSymbol.js");
/**
 * Compares values to sort them in ascending order.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {number} Returns the sort order indicator for `value`.
 */


function compareAscending(value, other) {
  if (value !== other) {
    var valIsDefined = value !== undefined,
        valIsNull = value === null,
        valIsReflexive = value === value,
        valIsSymbol = isSymbol(value);
    var othIsDefined = other !== undefined,
        othIsNull = other === null,
        othIsReflexive = other === other,
        othIsSymbol = isSymbol(other);

    if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
      return 1;
    }

    if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
      return -1;
    }
  }

  return 0;
}

module.exports = compareAscending;

/***/ }),

/***/ "./node_modules/lodash/_compareMultiple.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var compareAscending = __webpack_require__("./node_modules/lodash/_compareAscending.js");
/**
 * Used by `_.orderBy` to compare multiple properties of a value to another
 * and stable sort them.
 *
 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
 * specify an order of "desc" for descending or "asc" for ascending sort order
 * of corresponding values.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {boolean[]|string[]} orders The order to sort by for each property.
 * @returns {number} Returns the sort order indicator for `object`.
 */


function compareMultiple(object, other, orders) {
  var index = -1,
      objCriteria = object.criteria,
      othCriteria = other.criteria,
      length = objCriteria.length,
      ordersLength = orders.length;

  while (++index < length) {
    var result = compareAscending(objCriteria[index], othCriteria[index]);

    if (result) {
      if (index >= ordersLength) {
        return result;
      }

      var order = orders[index];
      return result * (order == 'desc' ? -1 : 1);
    }
  } // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
  // that causes it, under certain circumstances, to provide the same value for
  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
  // for more details.
  //
  // This also ensures a stable sort in V8 and other engines.
  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.


  return object.index - other.index;
}

module.exports = compareMultiple;

/***/ }),

/***/ "./node_modules/lodash/_copyArray.js":
/***/ ((module) => {

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;
  array || (array = Array(length));

  while (++index < length) {
    array[index] = source[index];
  }

  return array;
}

module.exports = copyArray;

/***/ }),

/***/ "./node_modules/lodash/_copyObject.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assignValue = __webpack_require__("./node_modules/lodash/_assignValue.js"),
    baseAssignValue = __webpack_require__("./node_modules/lodash/_baseAssignValue.js");
/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */


function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});
  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];
    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }

    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }

  return object;
}

module.exports = copyObject;

/***/ }),

/***/ "./node_modules/lodash/_copySymbols.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__("./node_modules/lodash/_copyObject.js"),
    getSymbols = __webpack_require__("./node_modules/lodash/_getSymbols.js");
/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */


function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

module.exports = copySymbols;

/***/ }),

/***/ "./node_modules/lodash/_copySymbolsIn.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__("./node_modules/lodash/_copyObject.js"),
    getSymbolsIn = __webpack_require__("./node_modules/lodash/_getSymbolsIn.js");
/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */


function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn(source), object);
}

module.exports = copySymbolsIn;

/***/ }),

/***/ "./node_modules/lodash/_coreJsData.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__("./node_modules/lodash/_root.js");
/** Used to detect overreaching core-js shims. */


var coreJsData = root['__core-js_shared__'];
module.exports = coreJsData;

/***/ }),

/***/ "./node_modules/lodash/_createAssigner.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseRest = __webpack_require__("./node_modules/lodash/_baseRest.js"),
    isIterateeCall = __webpack_require__("./node_modules/lodash/_isIterateeCall.js");
/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */


function createAssigner(assigner) {
  return baseRest(function (object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;
    customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }

    object = Object(object);

    while (++index < length) {
      var source = sources[index];

      if (source) {
        assigner(object, source, index, customizer);
      }
    }

    return object;
  });
}

module.exports = createAssigner;

/***/ }),

/***/ "./node_modules/lodash/_createBaseEach.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArrayLike = __webpack_require__("./node_modules/lodash/isArrayLike.js");
/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */


function createBaseEach(eachFunc, fromRight) {
  return function (collection, iteratee) {
    if (collection == null) {
      return collection;
    }

    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }

    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while (fromRight ? index-- : ++index < length) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }

    return collection;
  };
}

module.exports = createBaseEach;

/***/ }),

/***/ "./node_modules/lodash/_createBaseFor.js":
/***/ ((module) => {

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function (object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];

      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }

    return object;
  };
}

module.exports = createBaseFor;

/***/ }),

/***/ "./node_modules/lodash/_createSet.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Set = __webpack_require__("./node_modules/lodash/_Set.js"),
    noop = __webpack_require__("./node_modules/lodash/noop.js"),
    setToArray = __webpack_require__("./node_modules/lodash/_setToArray.js");
/** Used as references for various `Number` constants. */


var INFINITY = 1 / 0;
/**
 * Creates a set object of `values`.
 *
 * @private
 * @param {Array} values The values to add to the set.
 * @returns {Object} Returns the new set.
 */

var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
  return new Set(values);
};
module.exports = createSet;

/***/ }),

/***/ "./node_modules/lodash/_customDefaultsMerge.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseMerge = __webpack_require__("./node_modules/lodash/_baseMerge.js"),
    isObject = __webpack_require__("./node_modules/lodash/isObject.js");
/**
 * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
 * objects into destination objects that are passed thru.
 *
 * @private
 * @param {*} objValue The destination value.
 * @param {*} srcValue The source value.
 * @param {string} key The key of the property to merge.
 * @param {Object} object The parent object of `objValue`.
 * @param {Object} source The parent object of `srcValue`.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 * @returns {*} Returns the value to assign.
 */


function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
  if (isObject(objValue) && isObject(srcValue)) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, objValue);
    baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
    stack['delete'](srcValue);
  }

  return objValue;
}

module.exports = customDefaultsMerge;

/***/ }),

/***/ "./node_modules/lodash/_defineProperty.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__("./node_modules/lodash/_getNative.js");

var defineProperty = function () {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}();

module.exports = defineProperty;

/***/ }),

/***/ "./node_modules/lodash/_equalArrays.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var SetCache = __webpack_require__("./node_modules/lodash/_SetCache.js"),
    arraySome = __webpack_require__("./node_modules/lodash/_arraySome.js"),
    cacheHas = __webpack_require__("./node_modules/lodash/_cacheHas.js");
/** Used to compose bitmasks for value comparisons. */


var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;
/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */

function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  } // Check that cyclic values are equal.


  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);

  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }

  var index = -1,
      result = true,
      seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
  stack.set(array, other);
  stack.set(other, array); // Ignore non-index properties.

  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
    }

    if (compared !== undefined) {
      if (compared) {
        continue;
      }

      result = false;
      break;
    } // Recursively compare arrays (susceptible to call stack limits).


    if (seen) {
      if (!arraySome(other, function (othValue, othIndex) {
        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result = false;
      break;
    }
  }

  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;

/***/ }),

/***/ "./node_modules/lodash/_equalByTag.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__("./node_modules/lodash/_Symbol.js"),
    Uint8Array = __webpack_require__("./node_modules/lodash/_Uint8Array.js"),
    eq = __webpack_require__("./node_modules/lodash/eq.js"),
    equalArrays = __webpack_require__("./node_modules/lodash/_equalArrays.js"),
    mapToArray = __webpack_require__("./node_modules/lodash/_mapToArray.js"),
    setToArray = __webpack_require__("./node_modules/lodash/_setToArray.js");
/** Used to compose bitmasks for value comparisons. */


var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;
/** `Object#toString` result references. */

var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';
var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';
/** Used to convert symbols to primitives and strings. */

var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
        return false;
      }

      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }

      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == other + '';

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      } // Assume cyclic values are equal.


      var stacked = stack.get(object);

      if (stacked) {
        return stacked == other;
      }

      bitmask |= COMPARE_UNORDERED_FLAG; // Recursively compare objects (susceptible to call stack limits).

      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }

  }

  return false;
}

module.exports = equalByTag;

/***/ }),

/***/ "./node_modules/lodash/_equalObjects.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getAllKeys = __webpack_require__("./node_modules/lodash/_getAllKeys.js");
/** Used to compose bitmasks for value comparisons. */


var COMPARE_PARTIAL_FLAG = 1;
/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }

  var index = objLength;

  while (index--) {
    var key = objProps[index];

    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  } // Check that cyclic values are equal.


  var objStacked = stack.get(object);
  var othStacked = stack.get(other);

  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }

  var result = true;
  stack.set(object, other);
  stack.set(other, object);
  var skipCtor = isPartial;

  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
    } // Recursively compare objects (susceptible to call stack limits).


    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result = false;
      break;
    }

    skipCtor || (skipCtor = key == 'constructor');
  }

  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.

    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }

  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;

/***/ }),

/***/ "./node_modules/lodash/_flatRest.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var flatten = __webpack_require__("./node_modules/lodash/flatten.js"),
    overRest = __webpack_require__("./node_modules/lodash/_overRest.js"),
    setToString = __webpack_require__("./node_modules/lodash/_setToString.js");
/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */


function flatRest(func) {
  return setToString(overRest(func, undefined, flatten), func + '');
}

module.exports = flatRest;

/***/ }),

/***/ "./node_modules/lodash/_freeGlobal.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;
module.exports = freeGlobal;

/***/ }),

/***/ "./node_modules/lodash/_getAllKeys.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetAllKeys = __webpack_require__("./node_modules/lodash/_baseGetAllKeys.js"),
    getSymbols = __webpack_require__("./node_modules/lodash/_getSymbols.js"),
    keys = __webpack_require__("./node_modules/lodash/keys.js");
/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */


function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;

/***/ }),

/***/ "./node_modules/lodash/_getAllKeysIn.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetAllKeys = __webpack_require__("./node_modules/lodash/_baseGetAllKeys.js"),
    getSymbolsIn = __webpack_require__("./node_modules/lodash/_getSymbolsIn.js"),
    keysIn = __webpack_require__("./node_modules/lodash/keysIn.js");
/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */


function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn);
}

module.exports = getAllKeysIn;

/***/ }),

/***/ "./node_modules/lodash/_getMapData.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isKeyable = __webpack_require__("./node_modules/lodash/_isKeyable.js");
/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */


function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}

module.exports = getMapData;

/***/ }),

/***/ "./node_modules/lodash/_getMatchData.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isStrictComparable = __webpack_require__("./node_modules/lodash/_isStrictComparable.js"),
    keys = __webpack_require__("./node_modules/lodash/keys.js");
/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */


function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];
    result[length] = [key, value, isStrictComparable(value)];
  }

  return result;
}

module.exports = getMatchData;

/***/ }),

/***/ "./node_modules/lodash/_getNative.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsNative = __webpack_require__("./node_modules/lodash/_baseIsNative.js"),
    getValue = __webpack_require__("./node_modules/lodash/_getValue.js");
/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */


function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;

/***/ }),

/***/ "./node_modules/lodash/_getPrototype.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var overArg = __webpack_require__("./node_modules/lodash/_overArg.js");
/** Built-in value references. */


var getPrototype = overArg(Object.getPrototypeOf, Object);
module.exports = getPrototype;

/***/ }),

/***/ "./node_modules/lodash/_getRawTag.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__("./node_modules/lodash/_Symbol.js");
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var nativeObjectToString = objectProto.toString;
/** Built-in value references. */

var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */

function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);

  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }

  return result;
}

module.exports = getRawTag;

/***/ }),

/***/ "./node_modules/lodash/_getSymbols.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayFilter = __webpack_require__("./node_modules/lodash/_arrayFilter.js"),
    stubArray = __webpack_require__("./node_modules/lodash/stubArray.js");
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Built-in value references. */

var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */

var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
  if (object == null) {
    return [];
  }

  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function (symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};
module.exports = getSymbols;

/***/ }),

/***/ "./node_modules/lodash/_getSymbolsIn.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayPush = __webpack_require__("./node_modules/lodash/_arrayPush.js"),
    getPrototype = __webpack_require__("./node_modules/lodash/_getPrototype.js"),
    getSymbols = __webpack_require__("./node_modules/lodash/_getSymbols.js"),
    stubArray = __webpack_require__("./node_modules/lodash/stubArray.js");
/* Built-in method references for those with the same name as other `lodash` methods. */


var nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */

var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
  var result = [];

  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }

  return result;
};
module.exports = getSymbolsIn;

/***/ }),

/***/ "./node_modules/lodash/_getTag.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DataView = __webpack_require__("./node_modules/lodash/_DataView.js"),
    Map = __webpack_require__("./node_modules/lodash/_Map.js"),
    Promise = __webpack_require__("./node_modules/lodash/_Promise.js"),
    Set = __webpack_require__("./node_modules/lodash/_Set.js"),
    WeakMap = __webpack_require__("./node_modules/lodash/_WeakMap.js"),
    baseGetTag = __webpack_require__("./node_modules/lodash/_baseGetTag.js"),
    toSource = __webpack_require__("./node_modules/lodash/_toSource.js");
/** `Object#toString` result references. */


var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';
var dataViewTag = '[object DataView]';
/** Used to detect maps, sets, and weakmaps. */

var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);
/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

var getTag = baseGetTag; // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
  getTag = function (value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag;

        case mapCtorString:
          return mapTag;

        case promiseCtorString:
          return promiseTag;

        case setCtorString:
          return setTag;

        case weakMapCtorString:
          return weakMapTag;
      }
    }

    return result;
  };
}

module.exports = getTag;

/***/ }),

/***/ "./node_modules/lodash/_getValue.js":
/***/ ((module) => {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;

/***/ }),

/***/ "./node_modules/lodash/_hasPath.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var castPath = __webpack_require__("./node_modules/lodash/_castPath.js"),
    isArguments = __webpack_require__("./node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__("./node_modules/lodash/isArray.js"),
    isIndex = __webpack_require__("./node_modules/lodash/_isIndex.js"),
    isLength = __webpack_require__("./node_modules/lodash/isLength.js"),
    toKey = __webpack_require__("./node_modules/lodash/_toKey.js");
/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */


function hasPath(object, path, hasFunc) {
  path = castPath(path, object);
  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);

    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }

    object = object[key];
  }

  if (result || ++index != length) {
    return result;
  }

  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
}

module.exports = hasPath;

/***/ }),

/***/ "./node_modules/lodash/_hashClear.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__("./node_modules/lodash/_nativeCreate.js");
/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */


function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;

/***/ }),

/***/ "./node_modules/lodash/_hashDelete.js":
/***/ ((module) => {

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;

/***/ }),

/***/ "./node_modules/lodash/_hashGet.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__("./node_modules/lodash/_nativeCreate.js");
/** Used to stand-in for `undefined` hash values. */


var HASH_UNDEFINED = '__lodash_hash_undefined__';
/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

function hashGet(key) {
  var data = this.__data__;

  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }

  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;

/***/ }),

/***/ "./node_modules/lodash/_hashHas.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__("./node_modules/lodash/_nativeCreate.js");
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

module.exports = hashHas;

/***/ }),

/***/ "./node_modules/lodash/_hashSet.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__("./node_modules/lodash/_nativeCreate.js");
/** Used to stand-in for `undefined` hash values. */


var HASH_UNDEFINED = '__lodash_hash_undefined__';
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */

function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;

/***/ }),

/***/ "./node_modules/lodash/_initCloneArray.js":
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */

function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length); // Add properties assigned by `RegExp#exec`.

  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }

  return result;
}

module.exports = initCloneArray;

/***/ }),

/***/ "./node_modules/lodash/_initCloneByTag.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var cloneArrayBuffer = __webpack_require__("./node_modules/lodash/_cloneArrayBuffer.js"),
    cloneDataView = __webpack_require__("./node_modules/lodash/_cloneDataView.js"),
    cloneRegExp = __webpack_require__("./node_modules/lodash/_cloneRegExp.js"),
    cloneSymbol = __webpack_require__("./node_modules/lodash/_cloneSymbol.js"),
    cloneTypedArray = __webpack_require__("./node_modules/lodash/_cloneTypedArray.js");
/** `Object#toString` result references. */


var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';
var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';
/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */

function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;

  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag:
    case float64Tag:
    case int8Tag:
    case int16Tag:
    case int32Tag:
    case uint8Tag:
    case uint8ClampedTag:
    case uint16Tag:
    case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return new Ctor();

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return new Ctor();

    case symbolTag:
      return cloneSymbol(object);
  }
}

module.exports = initCloneByTag;

/***/ }),

/***/ "./node_modules/lodash/_initCloneObject.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseCreate = __webpack_require__("./node_modules/lodash/_baseCreate.js"),
    getPrototype = __webpack_require__("./node_modules/lodash/_getPrototype.js"),
    isPrototype = __webpack_require__("./node_modules/lodash/_isPrototype.js");
/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */


function initCloneObject(object) {
  return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
}

module.exports = initCloneObject;

/***/ }),

/***/ "./node_modules/lodash/_isFlattenable.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__("./node_modules/lodash/_Symbol.js"),
    isArguments = __webpack_require__("./node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__("./node_modules/lodash/isArray.js");
/** Built-in value references. */


var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;
/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */

function isFlattenable(value) {
  return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
}

module.exports = isFlattenable;

/***/ }),

/***/ "./node_modules/lodash/_isIndex.js":
/***/ ((module) => {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;
/** Used to detect unsigned integer values. */

var reIsUint = /^(?:0|[1-9]\d*)$/;
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */

function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}

module.exports = isIndex;

/***/ }),

/***/ "./node_modules/lodash/_isIterateeCall.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var eq = __webpack_require__("./node_modules/lodash/eq.js"),
    isArrayLike = __webpack_require__("./node_modules/lodash/isArrayLike.js"),
    isIndex = __webpack_require__("./node_modules/lodash/_isIndex.js"),
    isObject = __webpack_require__("./node_modules/lodash/isObject.js");
/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */


function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }

  var type = typeof index;

  if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
    return eq(object[index], value);
  }

  return false;
}

module.exports = isIterateeCall;

/***/ }),

/***/ "./node_modules/lodash/_isKey.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArray = __webpack_require__("./node_modules/lodash/isArray.js"),
    isSymbol = __webpack_require__("./node_modules/lodash/isSymbol.js");
/** Used to match property names within property paths. */


var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;
/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */

function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }

  var type = typeof value;

  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
    return true;
  }

  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}

module.exports = isKey;

/***/ }),

/***/ "./node_modules/lodash/_isKeyable.js":
/***/ ((module) => {

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}

module.exports = isKeyable;

/***/ }),

/***/ "./node_modules/lodash/_isMasked.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var coreJsData = __webpack_require__("./node_modules/lodash/_coreJsData.js");
/** Used to detect methods masquerading as native. */


var maskSrcKey = function () {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? 'Symbol(src)_1.' + uid : '';
}();
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */


function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}

module.exports = isMasked;

/***/ }),

/***/ "./node_modules/lodash/_isPrototype.js":
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */

function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
  return value === proto;
}

module.exports = isPrototype;

/***/ }),

/***/ "./node_modules/lodash/_isStrictComparable.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__("./node_modules/lodash/isObject.js");
/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */


function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;

/***/ }),

/***/ "./node_modules/lodash/_listCacheClear.js":
/***/ ((module) => {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;

/***/ }),

/***/ "./node_modules/lodash/_listCacheDelete.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__("./node_modules/lodash/_assocIndexOf.js");
/** Used for built-in method references. */


var arrayProto = Array.prototype;
/** Built-in value references. */

var splice = arrayProto.splice;
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }

  var lastIndex = data.length - 1;

  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }

  --this.size;
  return true;
}

module.exports = listCacheDelete;

/***/ }),

/***/ "./node_modules/lodash/_listCacheGet.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__("./node_modules/lodash/_assocIndexOf.js");
/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);
  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;

/***/ }),

/***/ "./node_modules/lodash/_listCacheHas.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__("./node_modules/lodash/_assocIndexOf.js");
/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;

/***/ }),

/***/ "./node_modules/lodash/_listCacheSet.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__("./node_modules/lodash/_assocIndexOf.js");
/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */


function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }

  return this;
}

module.exports = listCacheSet;

/***/ }),

/***/ "./node_modules/lodash/_mapCacheClear.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Hash = __webpack_require__("./node_modules/lodash/_Hash.js"),
    ListCache = __webpack_require__("./node_modules/lodash/_ListCache.js"),
    Map = __webpack_require__("./node_modules/lodash/_Map.js");
/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */


function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash(),
    'map': new (Map || ListCache)(),
    'string': new Hash()
  };
}

module.exports = mapCacheClear;

/***/ }),

/***/ "./node_modules/lodash/_mapCacheDelete.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__("./node_modules/lodash/_getMapData.js");
/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */


function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;

/***/ }),

/***/ "./node_modules/lodash/_mapCacheGet.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__("./node_modules/lodash/_getMapData.js");
/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;

/***/ }),

/***/ "./node_modules/lodash/_mapCacheHas.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__("./node_modules/lodash/_getMapData.js");
/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;

/***/ }),

/***/ "./node_modules/lodash/_mapCacheSet.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__("./node_modules/lodash/_getMapData.js");
/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */


function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;
  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;

/***/ }),

/***/ "./node_modules/lodash/_mapToArray.js":
/***/ ((module) => {

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);
  map.forEach(function (value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;

/***/ }),

/***/ "./node_modules/lodash/_matchesStrictComparable.js":
/***/ ((module) => {

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function (object) {
    if (object == null) {
      return false;
    }

    return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
  };
}

module.exports = matchesStrictComparable;

/***/ }),

/***/ "./node_modules/lodash/_memoizeCapped.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var memoize = __webpack_require__("./node_modules/lodash/memoize.js");
/** Used as the maximum memoize cache size. */


var MAX_MEMOIZE_SIZE = 500;
/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */

function memoizeCapped(func) {
  var result = memoize(func, function (key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }

    return key;
  });
  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;

/***/ }),

/***/ "./node_modules/lodash/_nativeCreate.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__("./node_modules/lodash/_getNative.js");
/* Built-in method references that are verified to be native. */


var nativeCreate = getNative(Object, 'create');
module.exports = nativeCreate;

/***/ }),

/***/ "./node_modules/lodash/_nativeKeys.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var overArg = __webpack_require__("./node_modules/lodash/_overArg.js");
/* Built-in method references for those with the same name as other `lodash` methods. */


var nativeKeys = overArg(Object.keys, Object);
module.exports = nativeKeys;

/***/ }),

/***/ "./node_modules/lodash/_nativeKeysIn.js":
/***/ ((module) => {

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];

  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }

  return result;
}

module.exports = nativeKeysIn;

/***/ }),

/***/ "./node_modules/lodash/_nodeUtil.js":
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
var freeGlobal = __webpack_require__("./node_modules/lodash/_freeGlobal.js");
/** Detect free variable `exports`. */


var freeExports =  true && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */

var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */

var moduleExports = freeModule && freeModule.exports === freeExports;
/** Detect free variable `process` from Node.js. */

var freeProcess = moduleExports && freeGlobal.process;
/** Used to access faster Node.js helpers. */

var nodeUtil = function () {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    } // Legacy `process.binding('util')` for Node.js < 10.


    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}();

module.exports = nodeUtil;

/***/ }),

/***/ "./node_modules/lodash/_objectToString.js":
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var nativeObjectToString = objectProto.toString;
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */

function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

/***/ }),

/***/ "./node_modules/lodash/_overArg.js":
/***/ ((module) => {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function (arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;

/***/ }),

/***/ "./node_modules/lodash/_overRest.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var apply = __webpack_require__("./node_modules/lodash/_apply.js");
/* Built-in method references for those with the same name as other `lodash` methods. */


var nativeMax = Math.max;
/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */

function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? func.length - 1 : start, 0);
  return function () {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }

    index = -1;
    var otherArgs = Array(start + 1);

    while (++index < start) {
      otherArgs[index] = args[index];
    }

    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;

/***/ }),

/***/ "./node_modules/lodash/_root.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var freeGlobal = __webpack_require__("./node_modules/lodash/_freeGlobal.js");
/** Detect free variable `self`. */


var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */

var root = freeGlobal || freeSelf || Function('return this')();
module.exports = root;

/***/ }),

/***/ "./node_modules/lodash/_safeGet.js":
/***/ ((module) => {

/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function safeGet(object, key) {
  if (key === 'constructor' && typeof object[key] === 'function') {
    return;
  }

  if (key == '__proto__') {
    return;
  }

  return object[key];
}

module.exports = safeGet;

/***/ }),

/***/ "./node_modules/lodash/_setCacheAdd.js":
/***/ ((module) => {

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';
/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */

function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);

  return this;
}

module.exports = setCacheAdd;

/***/ }),

/***/ "./node_modules/lodash/_setCacheHas.js":
/***/ ((module) => {

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;

/***/ }),

/***/ "./node_modules/lodash/_setToArray.js":
/***/ ((module) => {

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);
  set.forEach(function (value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;

/***/ }),

/***/ "./node_modules/lodash/_setToString.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseSetToString = __webpack_require__("./node_modules/lodash/_baseSetToString.js"),
    shortOut = __webpack_require__("./node_modules/lodash/_shortOut.js");
/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */


var setToString = shortOut(baseSetToString);
module.exports = setToString;

/***/ }),

/***/ "./node_modules/lodash/_shortOut.js":
/***/ ((module) => {

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeNow = Date.now;
/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */

function shortOut(func) {
  var count = 0,
      lastCalled = 0;
  return function () {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);
    lastCalled = stamp;

    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }

    return func.apply(undefined, arguments);
  };
}

module.exports = shortOut;

/***/ }),

/***/ "./node_modules/lodash/_stackClear.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ListCache = __webpack_require__("./node_modules/lodash/_ListCache.js");
/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */


function stackClear() {
  this.__data__ = new ListCache();
  this.size = 0;
}

module.exports = stackClear;

/***/ }),

/***/ "./node_modules/lodash/_stackDelete.js":
/***/ ((module) => {

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);
  this.size = data.size;
  return result;
}

module.exports = stackDelete;

/***/ }),

/***/ "./node_modules/lodash/_stackGet.js":
/***/ ((module) => {

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;

/***/ }),

/***/ "./node_modules/lodash/_stackHas.js":
/***/ ((module) => {

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;

/***/ }),

/***/ "./node_modules/lodash/_stackSet.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ListCache = __webpack_require__("./node_modules/lodash/_ListCache.js"),
    Map = __webpack_require__("./node_modules/lodash/_Map.js"),
    MapCache = __webpack_require__("./node_modules/lodash/_MapCache.js");
/** Used as the size to enable large array optimizations. */


var LARGE_ARRAY_SIZE = 200;
/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */

function stackSet(key, value) {
  var data = this.__data__;

  if (data instanceof ListCache) {
    var pairs = data.__data__;

    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }

    data = this.__data__ = new MapCache(pairs);
  }

  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;

/***/ }),

/***/ "./node_modules/lodash/_strictIndexOf.js":
/***/ ((module) => {

/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }

  return -1;
}

module.exports = strictIndexOf;

/***/ }),

/***/ "./node_modules/lodash/_stringToPath.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var memoizeCapped = __webpack_require__("./node_modules/lodash/_memoizeCapped.js");
/** Used to match property names within property paths. */


var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
/** Used to match backslashes in property paths. */

var reEscapeChar = /\\(\\)?/g;
/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */

var stringToPath = memoizeCapped(function (string) {
  var result = [];

  if (string.charCodeAt(0) === 46
  /* . */
  ) {
    result.push('');
  }

  string.replace(rePropName, function (match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
  });
  return result;
});
module.exports = stringToPath;

/***/ }),

/***/ "./node_modules/lodash/_toKey.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isSymbol = __webpack_require__("./node_modules/lodash/isSymbol.js");
/** Used as references for various `Number` constants. */


var INFINITY = 1 / 0;
/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */

function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }

  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

module.exports = toKey;

/***/ }),

/***/ "./node_modules/lodash/_toSource.js":
/***/ ((module) => {

/** Used for built-in method references. */
var funcProto = Function.prototype;
/** Used to resolve the decompiled source of functions. */

var funcToString = funcProto.toString;
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */

function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}

    try {
      return func + '';
    } catch (e) {}
  }

  return '';
}

module.exports = toSource;

/***/ }),

/***/ "./node_modules/lodash/cloneDeep.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseClone = __webpack_require__("./node_modules/lodash/_baseClone.js");
/** Used to compose bitmasks for cloning. */


var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;
/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */

function cloneDeep(value) {
  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}

module.exports = cloneDeep;

/***/ }),

/***/ "./node_modules/lodash/constant.js":
/***/ ((module) => {

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function () {
    return value;
  };
}

module.exports = constant;

/***/ }),

/***/ "./node_modules/lodash/defaults.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseRest = __webpack_require__("./node_modules/lodash/_baseRest.js"),
    eq = __webpack_require__("./node_modules/lodash/eq.js"),
    isIterateeCall = __webpack_require__("./node_modules/lodash/_isIterateeCall.js"),
    keysIn = __webpack_require__("./node_modules/lodash/keysIn.js");
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Assigns own and inherited enumerable string keyed properties of source
 * objects to the destination object for all destination properties that
 * resolve to `undefined`. Source objects are applied from left to right.
 * Once a property is set, additional values of the same property are ignored.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.defaultsDeep
 * @example
 *
 * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
 * // => { 'a': 1, 'b': 2 }
 */

var defaults = baseRest(function (object, sources) {
  object = Object(object);
  var index = -1;
  var length = sources.length;
  var guard = length > 2 ? sources[2] : undefined;

  if (guard && isIterateeCall(sources[0], sources[1], guard)) {
    length = 1;
  }

  while (++index < length) {
    var source = sources[index];
    var props = keysIn(source);
    var propsIndex = -1;
    var propsLength = props.length;

    while (++propsIndex < propsLength) {
      var key = props[propsIndex];
      var value = object[key];

      if (value === undefined || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
        object[key] = source[key];
      }
    }
  }

  return object;
});
module.exports = defaults;

/***/ }),

/***/ "./node_modules/lodash/defaultsDeep.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var apply = __webpack_require__("./node_modules/lodash/_apply.js"),
    baseRest = __webpack_require__("./node_modules/lodash/_baseRest.js"),
    customDefaultsMerge = __webpack_require__("./node_modules/lodash/_customDefaultsMerge.js"),
    mergeWith = __webpack_require__("./node_modules/lodash/mergeWith.js");
/**
 * This method is like `_.defaults` except that it recursively assigns
 * default properties.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 3.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.defaults
 * @example
 *
 * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
 * // => { 'a': { 'b': 2, 'c': 3 } }
 */


var defaultsDeep = baseRest(function (args) {
  args.push(undefined, customDefaultsMerge);
  return apply(mergeWith, undefined, args);
});
module.exports = defaultsDeep;

/***/ }),

/***/ "./node_modules/lodash/eq.js":
/***/ ((module) => {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || value !== value && other !== other;
}

module.exports = eq;

/***/ }),

/***/ "./node_modules/lodash/flatten.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFlatten = __webpack_require__("./node_modules/lodash/_baseFlatten.js");
/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */


function flatten(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten(array, 1) : [];
}

module.exports = flatten;

/***/ }),

/***/ "./node_modules/lodash/flattenDeep.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFlatten = __webpack_require__("./node_modules/lodash/_baseFlatten.js");
/** Used as references for various `Number` constants. */


var INFINITY = 1 / 0;
/**
 * Recursively flattens `array`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flattenDeep([1, [2, [3, [4]], 5]]);
 * // => [1, 2, 3, 4, 5]
 */

function flattenDeep(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten(array, INFINITY) : [];
}

module.exports = flattenDeep;

/***/ }),

/***/ "./node_modules/lodash/forEach.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayEach = __webpack_require__("./node_modules/lodash/_arrayEach.js"),
    baseEach = __webpack_require__("./node_modules/lodash/_baseEach.js"),
    castFunction = __webpack_require__("./node_modules/lodash/_castFunction.js"),
    isArray = __webpack_require__("./node_modules/lodash/isArray.js");
/**
 * Iterates over elements of `collection` and invokes `iteratee` for each element.
 * The iteratee is invoked with three arguments: (value, index|key, collection).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * **Note:** As with other "Collections" methods, objects with a "length"
 * property are iterated like arrays. To avoid this behavior use `_.forIn`
 * or `_.forOwn` for object iteration.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @alias each
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 * @see _.forEachRight
 * @example
 *
 * _.forEach([1, 2], function(value) {
 *   console.log(value);
 * });
 * // => Logs `1` then `2`.
 *
 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */


function forEach(collection, iteratee) {
  var func = isArray(collection) ? arrayEach : baseEach;
  return func(collection, castFunction(iteratee));
}

module.exports = forEach;

/***/ }),

/***/ "./node_modules/lodash/get.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGet = __webpack_require__("./node_modules/lodash/_baseGet.js");
/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */


function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;

/***/ }),

/***/ "./node_modules/lodash/hasIn.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseHasIn = __webpack_require__("./node_modules/lodash/_baseHasIn.js"),
    hasPath = __webpack_require__("./node_modules/lodash/_hasPath.js");
/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */


function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;

/***/ }),

/***/ "./node_modules/lodash/identity.js":
/***/ ((module) => {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;

/***/ }),

/***/ "./node_modules/lodash/intersection.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayMap = __webpack_require__("./node_modules/lodash/_arrayMap.js"),
    baseIntersection = __webpack_require__("./node_modules/lodash/_baseIntersection.js"),
    baseRest = __webpack_require__("./node_modules/lodash/_baseRest.js"),
    castArrayLikeObject = __webpack_require__("./node_modules/lodash/_castArrayLikeObject.js");
/**
 * Creates an array of unique values that are included in all given arrays
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons. The order and references of result values are
 * determined by the first array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @returns {Array} Returns the new array of intersecting values.
 * @example
 *
 * _.intersection([2, 1], [2, 3]);
 * // => [2]
 */


var intersection = baseRest(function (arrays) {
  var mapped = arrayMap(arrays, castArrayLikeObject);
  return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
});
module.exports = intersection;

/***/ }),

/***/ "./node_modules/lodash/intersectionWith.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayMap = __webpack_require__("./node_modules/lodash/_arrayMap.js"),
    baseIntersection = __webpack_require__("./node_modules/lodash/_baseIntersection.js"),
    baseRest = __webpack_require__("./node_modules/lodash/_baseRest.js"),
    castArrayLikeObject = __webpack_require__("./node_modules/lodash/_castArrayLikeObject.js"),
    last = __webpack_require__("./node_modules/lodash/last.js");
/**
 * This method is like `_.intersection` except that it accepts `comparator`
 * which is invoked to compare elements of `arrays`. The order and references
 * of result values are determined by the first array. The comparator is
 * invoked with two arguments: (arrVal, othVal).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of intersecting values.
 * @example
 *
 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
 *
 * _.intersectionWith(objects, others, _.isEqual);
 * // => [{ 'x': 1, 'y': 2 }]
 */


var intersectionWith = baseRest(function (arrays) {
  var comparator = last(arrays),
      mapped = arrayMap(arrays, castArrayLikeObject);
  comparator = typeof comparator == 'function' ? comparator : undefined;

  if (comparator) {
    mapped.pop();
  }

  return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
});
module.exports = intersectionWith;

/***/ }),

/***/ "./node_modules/lodash/isArguments.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsArguments = __webpack_require__("./node_modules/lodash/_baseIsArguments.js"),
    isObjectLike = __webpack_require__("./node_modules/lodash/isObjectLike.js");
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/** Built-in value references. */

var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */

var isArguments = baseIsArguments(function () {
  return arguments;
}()) ? baseIsArguments : function (value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};
module.exports = isArguments;

/***/ }),

/***/ "./node_modules/lodash/isArray.js":
/***/ ((module) => {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;
module.exports = isArray;

/***/ }),

/***/ "./node_modules/lodash/isArrayLike.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isFunction = __webpack_require__("./node_modules/lodash/isFunction.js"),
    isLength = __webpack_require__("./node_modules/lodash/isLength.js");
/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */


function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;

/***/ }),

/***/ "./node_modules/lodash/isArrayLikeObject.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArrayLike = __webpack_require__("./node_modules/lodash/isArrayLike.js"),
    isObjectLike = __webpack_require__("./node_modules/lodash/isObjectLike.js");
/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */


function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

module.exports = isArrayLikeObject;

/***/ }),

/***/ "./node_modules/lodash/isBoolean.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__("./node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__("./node_modules/lodash/isObjectLike.js");
/** `Object#toString` result references. */


var boolTag = '[object Boolean]';
/**
 * Checks if `value` is classified as a boolean primitive or object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
 * @example
 *
 * _.isBoolean(false);
 * // => true
 *
 * _.isBoolean(null);
 * // => false
 */

function isBoolean(value) {
  return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
}

module.exports = isBoolean;

/***/ }),

/***/ "./node_modules/lodash/isBuffer.js":
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
var root = __webpack_require__("./node_modules/lodash/_root.js"),
    stubFalse = __webpack_require__("./node_modules/lodash/stubFalse.js");
/** Detect free variable `exports`. */


var freeExports =  true && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */

var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */

var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */

var Buffer = moduleExports ? root.Buffer : undefined;
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */

var isBuffer = nativeIsBuffer || stubFalse;
module.exports = isBuffer;

/***/ }),

/***/ "./node_modules/lodash/isEmpty.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseKeys = __webpack_require__("./node_modules/lodash/_baseKeys.js"),
    getTag = __webpack_require__("./node_modules/lodash/_getTag.js"),
    isArguments = __webpack_require__("./node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__("./node_modules/lodash/isArray.js"),
    isArrayLike = __webpack_require__("./node_modules/lodash/isArrayLike.js"),
    isBuffer = __webpack_require__("./node_modules/lodash/isBuffer.js"),
    isPrototype = __webpack_require__("./node_modules/lodash/_isPrototype.js"),
    isTypedArray = __webpack_require__("./node_modules/lodash/isTypedArray.js");
/** `Object#toString` result references. */


var mapTag = '[object Map]',
    setTag = '[object Set]';
/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */

function isEmpty(value) {
  if (value == null) {
    return true;
  }

  if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
    return !value.length;
  }

  var tag = getTag(value);

  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }

  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }

  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }

  return true;
}

module.exports = isEmpty;

/***/ }),

/***/ "./node_modules/lodash/isEqual.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsEqual = __webpack_require__("./node_modules/lodash/_baseIsEqual.js");
/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */


function isEqual(value, other) {
  return baseIsEqual(value, other);
}

module.exports = isEqual;

/***/ }),

/***/ "./node_modules/lodash/isFunction.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__("./node_modules/lodash/_baseGetTag.js"),
    isObject = __webpack_require__("./node_modules/lodash/isObject.js");
/** `Object#toString` result references. */


var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */

function isFunction(value) {
  if (!isObject(value)) {
    return false;
  } // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.


  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;

/***/ }),

/***/ "./node_modules/lodash/isLength.js":
/***/ ((module) => {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */

function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

/***/ }),

/***/ "./node_modules/lodash/isMap.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsMap = __webpack_require__("./node_modules/lodash/_baseIsMap.js"),
    baseUnary = __webpack_require__("./node_modules/lodash/_baseUnary.js"),
    nodeUtil = __webpack_require__("./node_modules/lodash/_nodeUtil.js");
/* Node.js helper references. */


var nodeIsMap = nodeUtil && nodeUtil.isMap;
/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */

var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
module.exports = isMap;

/***/ }),

/***/ "./node_modules/lodash/isObject.js":
/***/ ((module) => {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

/***/ }),

/***/ "./node_modules/lodash/isObjectLike.js":
/***/ ((module) => {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;

/***/ }),

/***/ "./node_modules/lodash/isPlainObject.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__("./node_modules/lodash/_baseGetTag.js"),
    getPrototype = __webpack_require__("./node_modules/lodash/_getPrototype.js"),
    isObjectLike = __webpack_require__("./node_modules/lodash/isObjectLike.js");
/** `Object#toString` result references. */


var objectTag = '[object Object]';
/** Used for built-in method references. */

var funcProto = Function.prototype,
    objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */

var funcToString = funcProto.toString;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to infer the `Object` constructor. */

var objectCtorString = funcToString.call(Object);
/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */

function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }

  var proto = getPrototype(value);

  if (proto === null) {
    return true;
  }

  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;

/***/ }),

/***/ "./node_modules/lodash/isSet.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsSet = __webpack_require__("./node_modules/lodash/_baseIsSet.js"),
    baseUnary = __webpack_require__("./node_modules/lodash/_baseUnary.js"),
    nodeUtil = __webpack_require__("./node_modules/lodash/_nodeUtil.js");
/* Node.js helper references. */


var nodeIsSet = nodeUtil && nodeUtil.isSet;
/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */

var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
module.exports = isSet;

/***/ }),

/***/ "./node_modules/lodash/isSymbol.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__("./node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__("./node_modules/lodash/isObjectLike.js");
/** `Object#toString` result references. */


var symbolTag = '[object Symbol]';
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */

function isSymbol(value) {
  return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
}

module.exports = isSymbol;

/***/ }),

/***/ "./node_modules/lodash/isTypedArray.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsTypedArray = __webpack_require__("./node_modules/lodash/_baseIsTypedArray.js"),
    baseUnary = __webpack_require__("./node_modules/lodash/_baseUnary.js"),
    nodeUtil = __webpack_require__("./node_modules/lodash/_nodeUtil.js");
/* Node.js helper references. */


var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */

var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
module.exports = isTypedArray;

/***/ }),

/***/ "./node_modules/lodash/keys.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayLikeKeys = __webpack_require__("./node_modules/lodash/_arrayLikeKeys.js"),
    baseKeys = __webpack_require__("./node_modules/lodash/_baseKeys.js"),
    isArrayLike = __webpack_require__("./node_modules/lodash/isArrayLike.js");
/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */


function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;

/***/ }),

/***/ "./node_modules/lodash/keysIn.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayLikeKeys = __webpack_require__("./node_modules/lodash/_arrayLikeKeys.js"),
    baseKeysIn = __webpack_require__("./node_modules/lodash/_baseKeysIn.js"),
    isArrayLike = __webpack_require__("./node_modules/lodash/isArrayLike.js");
/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */


function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

module.exports = keysIn;

/***/ }),

/***/ "./node_modules/lodash/last.js":
/***/ ((module) => {

/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */
function last(array) {
  var length = array == null ? 0 : array.length;
  return length ? array[length - 1] : undefined;
}

module.exports = last;

/***/ }),

/***/ "./node_modules/lodash/memoize.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var MapCache = __webpack_require__("./node_modules/lodash/_MapCache.js");
/** Error message constants. */


var FUNC_ERROR_TEXT = 'Expected a function';
/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */

function memoize(func, resolver) {
  if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }

  var memoized = function () {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }

    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };

  memoized.cache = new (memoize.Cache || MapCache)();
  return memoized;
} // Expose `MapCache`.


memoize.Cache = MapCache;
module.exports = memoize;

/***/ }),

/***/ "./node_modules/lodash/mergeWith.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseMerge = __webpack_require__("./node_modules/lodash/_baseMerge.js"),
    createAssigner = __webpack_require__("./node_modules/lodash/_createAssigner.js");
/**
 * This method is like `_.merge` except that it accepts `customizer` which
 * is invoked to produce the merged values of the destination and source
 * properties. If `customizer` returns `undefined`, merging is handled by the
 * method instead. The `customizer` is invoked with six arguments:
 * (objValue, srcValue, key, object, source, stack).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} customizer The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   if (_.isArray(objValue)) {
 *     return objValue.concat(srcValue);
 *   }
 * }
 *
 * var object = { 'a': [1], 'b': [2] };
 * var other = { 'a': [3], 'b': [4] };
 *
 * _.mergeWith(object, other, customizer);
 * // => { 'a': [1, 3], 'b': [2, 4] }
 */


var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
  baseMerge(object, source, srcIndex, customizer);
});
module.exports = mergeWith;

/***/ }),

/***/ "./node_modules/lodash/noop.js":
/***/ ((module) => {

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {// No operation performed.
}

module.exports = noop;

/***/ }),

/***/ "./node_modules/lodash/pick.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var basePick = __webpack_require__("./node_modules/lodash/_basePick.js"),
    flatRest = __webpack_require__("./node_modules/lodash/_flatRest.js");
/**
 * Creates an object composed of the picked `object` properties.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to pick.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pick(object, ['a', 'c']);
 * // => { 'a': 1, 'c': 3 }
 */


var pick = flatRest(function (object, paths) {
  return object == null ? {} : basePick(object, paths);
});
module.exports = pick;

/***/ }),

/***/ "./node_modules/lodash/property.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseProperty = __webpack_require__("./node_modules/lodash/_baseProperty.js"),
    basePropertyDeep = __webpack_require__("./node_modules/lodash/_basePropertyDeep.js"),
    isKey = __webpack_require__("./node_modules/lodash/_isKey.js"),
    toKey = __webpack_require__("./node_modules/lodash/_toKey.js");
/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */


function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;

/***/ }),

/***/ "./node_modules/lodash/pullAll.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var basePullAll = __webpack_require__("./node_modules/lodash/_basePullAll.js");
/**
 * This method is like `_.pull` except that it accepts an array of values to remove.
 *
 * **Note:** Unlike `_.difference`, this method mutates `array`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @param {Array} values The values to remove.
 * @returns {Array} Returns `array`.
 * @example
 *
 * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
 *
 * _.pullAll(array, ['a', 'c']);
 * console.log(array);
 * // => ['b', 'b']
 */


function pullAll(array, values) {
  return array && array.length && values && values.length ? basePullAll(array, values) : array;
}

module.exports = pullAll;

/***/ }),

/***/ "./node_modules/lodash/sortBy.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFlatten = __webpack_require__("./node_modules/lodash/_baseFlatten.js"),
    baseOrderBy = __webpack_require__("./node_modules/lodash/_baseOrderBy.js"),
    baseRest = __webpack_require__("./node_modules/lodash/_baseRest.js"),
    isIterateeCall = __webpack_require__("./node_modules/lodash/_isIterateeCall.js");
/**
 * Creates an array of elements, sorted in ascending order by the results of
 * running each element in a collection thru each iteratee. This method
 * performs a stable sort, that is, it preserves the original sort order of
 * equal elements. The iteratees are invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {...(Function|Function[])} [iteratees=[_.identity]]
 *  The iteratees to sort by.
 * @returns {Array} Returns the new sorted array.
 * @example
 *
 * var users = [
 *   { 'user': 'fred',   'age': 48 },
 *   { 'user': 'barney', 'age': 36 },
 *   { 'user': 'fred',   'age': 30 },
 *   { 'user': 'barney', 'age': 34 }
 * ];
 *
 * _.sortBy(users, [function(o) { return o.user; }]);
 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
 *
 * _.sortBy(users, ['user', 'age']);
 * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
 */


var sortBy = baseRest(function (collection, iteratees) {
  if (collection == null) {
    return [];
  }

  var length = iteratees.length;

  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
    iteratees = [];
  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
    iteratees = [iteratees[0]];
  }

  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
});
module.exports = sortBy;

/***/ }),

/***/ "./node_modules/lodash/stubArray.js":
/***/ ((module) => {

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;

/***/ }),

/***/ "./node_modules/lodash/stubFalse.js":
/***/ ((module) => {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;

/***/ }),

/***/ "./node_modules/lodash/toPath.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayMap = __webpack_require__("./node_modules/lodash/_arrayMap.js"),
    copyArray = __webpack_require__("./node_modules/lodash/_copyArray.js"),
    isArray = __webpack_require__("./node_modules/lodash/isArray.js"),
    isSymbol = __webpack_require__("./node_modules/lodash/isSymbol.js"),
    stringToPath = __webpack_require__("./node_modules/lodash/_stringToPath.js"),
    toKey = __webpack_require__("./node_modules/lodash/_toKey.js"),
    toString = __webpack_require__("./node_modules/lodash/toString.js");
/**
 * Converts `value` to a property path array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {*} value The value to convert.
 * @returns {Array} Returns the new property path array.
 * @example
 *
 * _.toPath('a.b.c');
 * // => ['a', 'b', 'c']
 *
 * _.toPath('a[0].b.c');
 * // => ['a', '0', 'b', 'c']
 */


function toPath(value) {
  if (isArray(value)) {
    return arrayMap(value, toKey);
  }

  return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
}

module.exports = toPath;

/***/ }),

/***/ "./node_modules/lodash/toPlainObject.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__("./node_modules/lodash/_copyObject.js"),
    keysIn = __webpack_require__("./node_modules/lodash/keysIn.js");
/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */


function toPlainObject(value) {
  return copyObject(value, keysIn(value));
}

module.exports = toPlainObject;

/***/ }),

/***/ "./node_modules/lodash/toString.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseToString = __webpack_require__("./node_modules/lodash/_baseToString.js");
/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */


function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;

/***/ }),

/***/ "./node_modules/lodash/union.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFlatten = __webpack_require__("./node_modules/lodash/_baseFlatten.js"),
    baseRest = __webpack_require__("./node_modules/lodash/_baseRest.js"),
    baseUniq = __webpack_require__("./node_modules/lodash/_baseUniq.js"),
    isArrayLikeObject = __webpack_require__("./node_modules/lodash/isArrayLikeObject.js");
/**
 * Creates an array of unique values, in order, from all given arrays using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @returns {Array} Returns the new array of combined values.
 * @example
 *
 * _.union([2], [1, 2]);
 * // => [2, 1]
 */


var union = baseRest(function (arrays) {
  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
});
module.exports = union;

/***/ }),

/***/ "./node_modules/lodash/uniq.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseUniq = __webpack_require__("./node_modules/lodash/_baseUniq.js");
/**
 * Creates a duplicate-free version of an array, using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons, in which only the first occurrence of each element
 * is kept. The order of result values is determined by the order they occur
 * in the array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * _.uniq([2, 1, 2]);
 * // => [2, 1]
 */


function uniq(array) {
  return array && array.length ? baseUniq(array) : [];
}

module.exports = uniq;

/***/ }),

/***/ "./node_modules/lodash/uniqWith.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseUniq = __webpack_require__("./node_modules/lodash/_baseUniq.js");
/**
 * This method is like `_.uniq` except that it accepts `comparator` which
 * is invoked to compare elements of `array`. The order of result values is
 * determined by the order they occur in the array.The comparator is invoked
 * with two arguments: (arrVal, othVal).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
 *
 * _.uniqWith(objects, _.isEqual);
 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
 */


function uniqWith(array, comparator) {
  comparator = typeof comparator == 'function' ? comparator : undefined;
  return array && array.length ? baseUniq(array, undefined, comparator) : [];
}

module.exports = uniqWith;

/***/ }),

/***/ "./node_modules/lodash/without.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseDifference = __webpack_require__("./node_modules/lodash/_baseDifference.js"),
    baseRest = __webpack_require__("./node_modules/lodash/_baseRest.js"),
    isArrayLikeObject = __webpack_require__("./node_modules/lodash/isArrayLikeObject.js");
/**
 * Creates an array excluding all given values using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * **Note:** Unlike `_.pull`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...*} [values] The values to exclude.
 * @returns {Array} Returns the new array of filtered values.
 * @see _.difference, _.xor
 * @example
 *
 * _.without([2, 1, 2, 3], 1, 2);
 * // => [3]
 */


var without = baseRest(function (array, values) {
  return isArrayLikeObject(array) ? baseDifference(array, values) : [];
});
module.exports = without;

/***/ }),

/***/ "./node_modules/object-assign/index.js":
/***/ ((module) => {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }

  return Object(val);
}

function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    } // Detect buggy property enumeration order in older V8 versions.
    // https://bugs.chromium.org/p/v8/issues/detail?id=4118


    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

    test1[5] = 'de';

    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test2 = {};

    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }

    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });

    if (order2.join('') !== '0123456789') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test3 = {};
    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
      test3[letter] = letter;
    });

    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }

    return true;
  } catch (err) {
    // We don't expect any of the above to throw, but better to be safe.
    return false;
  }
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
  var from;
  var to = toObject(target);
  var symbols;

  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }

    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);

      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }

  return to;
};

/***/ }),

/***/ "./node_modules/prop-types/factoryWithThrowingShims.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var ReactPropTypesSecret = __webpack_require__("./node_modules/prop-types/lib/ReactPropTypesSecret.js");

function emptyFunction() {}

function emptyFunctionWithReset() {}

emptyFunctionWithReset.resetWarningCache = emptyFunction;

module.exports = function () {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }

    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
    err.name = 'Invariant Violation';
    throw err;
  }

  ;
  shim.isRequired = shim;

  function getShim() {
    return shim;
  }

  ; // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

  var ReactPropTypes = {
    array: shim,
    bigint: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,
    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,
    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};

/***/ }),

/***/ "./node_modules/prop-types/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
if (false) { var throwOnDirectAccess, ReactIs; } else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = __webpack_require__("./node_modules/prop-types/factoryWithThrowingShims.js")();
}

/***/ }),

/***/ "./node_modules/prop-types/lib/ReactPropTypesSecret.js":
/***/ ((module) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
module.exports = ReactPropTypesSecret;

/***/ }),

/***/ "./node_modules/react-dom/cjs/react-dom.production.min.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/** @license React v16.14.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/


var aa = __webpack_require__("./node_modules/react/index.js"),
    n = __webpack_require__("./node_modules/object-assign/index.js"),
    r = __webpack_require__("./node_modules/scheduler/index.js");

function u(a) {
  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) b += "&args[]=" + encodeURIComponent(arguments[c]);

  return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}

if (!aa) throw Error(u(227));

function ba(a, b, c, d, e, f, g, h, k) {
  var l = Array.prototype.slice.call(arguments, 3);

  try {
    b.apply(c, l);
  } catch (m) {
    this.onError(m);
  }
}

var da = !1,
    ea = null,
    fa = !1,
    ha = null,
    ia = {
  onError: function (a) {
    da = !0;
    ea = a;
  }
};

function ja(a, b, c, d, e, f, g, h, k) {
  da = !1;
  ea = null;
  ba.apply(ia, arguments);
}

function ka(a, b, c, d, e, f, g, h, k) {
  ja.apply(this, arguments);

  if (da) {
    if (da) {
      var l = ea;
      da = !1;
      ea = null;
    } else throw Error(u(198));

    fa || (fa = !0, ha = l);
  }
}

var la = null,
    ma = null,
    na = null;

function oa(a, b, c) {
  var d = a.type || "unknown-event";
  a.currentTarget = na(c);
  ka(d, b, void 0, a);
  a.currentTarget = null;
}

var pa = null,
    qa = {};

function ra() {
  if (pa) for (var a in qa) {
    var b = qa[a],
        c = pa.indexOf(a);
    if (!(-1 < c)) throw Error(u(96, a));

    if (!sa[c]) {
      if (!b.extractEvents) throw Error(u(97, a));
      sa[c] = b;
      c = b.eventTypes;

      for (var d in c) {
        var e = void 0;
        var f = c[d],
            g = b,
            h = d;
        if (ta.hasOwnProperty(h)) throw Error(u(99, h));
        ta[h] = f;
        var k = f.phasedRegistrationNames;

        if (k) {
          for (e in k) k.hasOwnProperty(e) && ua(k[e], g, h);

          e = !0;
        } else f.registrationName ? (ua(f.registrationName, g, h), e = !0) : e = !1;

        if (!e) throw Error(u(98, d, a));
      }
    }
  }
}

function ua(a, b, c) {
  if (va[a]) throw Error(u(100, a));
  va[a] = b;
  wa[a] = b.eventTypes[c].dependencies;
}

var sa = [],
    ta = {},
    va = {},
    wa = {};

function xa(a) {
  var b = !1,
      c;

  for (c in a) if (a.hasOwnProperty(c)) {
    var d = a[c];

    if (!qa.hasOwnProperty(c) || qa[c] !== d) {
      if (qa[c]) throw Error(u(102, c));
      qa[c] = d;
      b = !0;
    }
  }

  b && ra();
}

var ya = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement),
    za = null,
    Aa = null,
    Ba = null;

function Ca(a) {
  if (a = ma(a)) {
    if ("function" !== typeof za) throw Error(u(280));
    var b = a.stateNode;
    b && (b = la(b), za(a.stateNode, a.type, b));
  }
}

function Da(a) {
  Aa ? Ba ? Ba.push(a) : Ba = [a] : Aa = a;
}

function Ea() {
  if (Aa) {
    var a = Aa,
        b = Ba;
    Ba = Aa = null;
    Ca(a);
    if (b) for (a = 0; a < b.length; a++) Ca(b[a]);
  }
}

function Fa(a, b) {
  return a(b);
}

function Ga(a, b, c, d, e) {
  return a(b, c, d, e);
}

function Ha() {}

var Ia = Fa,
    Ja = !1,
    Ka = !1;

function La() {
  if (null !== Aa || null !== Ba) Ha(), Ea();
}

function Ma(a, b, c) {
  if (Ka) return a(b, c);
  Ka = !0;

  try {
    return Ia(a, b, c);
  } finally {
    Ka = !1, La();
  }
}

var Na = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,
    Oa = Object.prototype.hasOwnProperty,
    Pa = {},
    Qa = {};

function Ra(a) {
  if (Oa.call(Qa, a)) return !0;
  if (Oa.call(Pa, a)) return !1;
  if (Na.test(a)) return Qa[a] = !0;
  Pa[a] = !0;
  return !1;
}

function Sa(a, b, c, d) {
  if (null !== c && 0 === c.type) return !1;

  switch (typeof b) {
    case "function":
    case "symbol":
      return !0;

    case "boolean":
      if (d) return !1;
      if (null !== c) return !c.acceptsBooleans;
      a = a.toLowerCase().slice(0, 5);
      return "data-" !== a && "aria-" !== a;

    default:
      return !1;
  }
}

function Ta(a, b, c, d) {
  if (null === b || "undefined" === typeof b || Sa(a, b, c, d)) return !0;
  if (d) return !1;
  if (null !== c) switch (c.type) {
    case 3:
      return !b;

    case 4:
      return !1 === b;

    case 5:
      return isNaN(b);

    case 6:
      return isNaN(b) || 1 > b;
  }
  return !1;
}

function v(a, b, c, d, e, f) {
  this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
  this.attributeName = d;
  this.attributeNamespace = e;
  this.mustUseProperty = c;
  this.propertyName = a;
  this.type = b;
  this.sanitizeURL = f;
}

var C = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function (a) {
  C[a] = new v(a, 0, !1, a, null, !1);
});
[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function (a) {
  var b = a[0];
  C[b] = new v(b, 1, !1, a[1], null, !1);
});
["contentEditable", "draggable", "spellCheck", "value"].forEach(function (a) {
  C[a] = new v(a, 2, !1, a.toLowerCase(), null, !1);
});
["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function (a) {
  C[a] = new v(a, 2, !1, a, null, !1);
});
"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function (a) {
  C[a] = new v(a, 3, !1, a.toLowerCase(), null, !1);
});
["checked", "multiple", "muted", "selected"].forEach(function (a) {
  C[a] = new v(a, 3, !0, a, null, !1);
});
["capture", "download"].forEach(function (a) {
  C[a] = new v(a, 4, !1, a, null, !1);
});
["cols", "rows", "size", "span"].forEach(function (a) {
  C[a] = new v(a, 6, !1, a, null, !1);
});
["rowSpan", "start"].forEach(function (a) {
  C[a] = new v(a, 5, !1, a.toLowerCase(), null, !1);
});
var Ua = /[\-:]([a-z])/g;

function Va(a) {
  return a[1].toUpperCase();
}

"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function (a) {
  var b = a.replace(Ua, Va);
  C[b] = new v(b, 1, !1, a, null, !1);
});
"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function (a) {
  var b = a.replace(Ua, Va);
  C[b] = new v(b, 1, !1, a, "http://www.w3.org/1999/xlink", !1);
});
["xml:base", "xml:lang", "xml:space"].forEach(function (a) {
  var b = a.replace(Ua, Va);
  C[b] = new v(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace", !1);
});
["tabIndex", "crossOrigin"].forEach(function (a) {
  C[a] = new v(a, 1, !1, a.toLowerCase(), null, !1);
});
C.xlinkHref = new v("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0);
["src", "href", "action", "formAction"].forEach(function (a) {
  C[a] = new v(a, 1, !1, a.toLowerCase(), null, !0);
});
var Wa = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
Wa.hasOwnProperty("ReactCurrentDispatcher") || (Wa.ReactCurrentDispatcher = {
  current: null
});
Wa.hasOwnProperty("ReactCurrentBatchConfig") || (Wa.ReactCurrentBatchConfig = {
  suspense: null
});

function Xa(a, b, c, d) {
  var e = C.hasOwnProperty(b) ? C[b] : null;
  var f = null !== e ? 0 === e.type : d ? !1 : !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1] ? !1 : !0;
  f || (Ta(b, c, e, d) && (c = null), d || null === e ? Ra(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c))));
}

var Ya = /^(.*)[\\\/]/,
    E = "function" === typeof Symbol && Symbol.for,
    Za = E ? Symbol.for("react.element") : 60103,
    $a = E ? Symbol.for("react.portal") : 60106,
    ab = E ? Symbol.for("react.fragment") : 60107,
    bb = E ? Symbol.for("react.strict_mode") : 60108,
    cb = E ? Symbol.for("react.profiler") : 60114,
    db = E ? Symbol.for("react.provider") : 60109,
    eb = E ? Symbol.for("react.context") : 60110,
    fb = E ? Symbol.for("react.concurrent_mode") : 60111,
    gb = E ? Symbol.for("react.forward_ref") : 60112,
    hb = E ? Symbol.for("react.suspense") : 60113,
    ib = E ? Symbol.for("react.suspense_list") : 60120,
    jb = E ? Symbol.for("react.memo") : 60115,
    kb = E ? Symbol.for("react.lazy") : 60116,
    lb = E ? Symbol.for("react.block") : 60121,
    mb = "function" === typeof Symbol && Symbol.iterator;

function nb(a) {
  if (null === a || "object" !== typeof a) return null;
  a = mb && a[mb] || a["@@iterator"];
  return "function" === typeof a ? a : null;
}

function ob(a) {
  if (-1 === a._status) {
    a._status = 0;
    var b = a._ctor;
    b = b();
    a._result = b;
    b.then(function (b) {
      0 === a._status && (b = b.default, a._status = 1, a._result = b);
    }, function (b) {
      0 === a._status && (a._status = 2, a._result = b);
    });
  }
}

function pb(a) {
  if (null == a) return null;
  if ("function" === typeof a) return a.displayName || a.name || null;
  if ("string" === typeof a) return a;

  switch (a) {
    case ab:
      return "Fragment";

    case $a:
      return "Portal";

    case cb:
      return "Profiler";

    case bb:
      return "StrictMode";

    case hb:
      return "Suspense";

    case ib:
      return "SuspenseList";
  }

  if ("object" === typeof a) switch (a.$$typeof) {
    case eb:
      return "Context.Consumer";

    case db:
      return "Context.Provider";

    case gb:
      var b = a.render;
      b = b.displayName || b.name || "";
      return a.displayName || ("" !== b ? "ForwardRef(" + b + ")" : "ForwardRef");

    case jb:
      return pb(a.type);

    case lb:
      return pb(a.render);

    case kb:
      if (a = 1 === a._status ? a._result : null) return pb(a);
  }
  return null;
}

function qb(a) {
  var b = "";

  do {
    a: switch (a.tag) {
      case 3:
      case 4:
      case 6:
      case 7:
      case 10:
      case 9:
        var c = "";
        break a;

      default:
        var d = a._debugOwner,
            e = a._debugSource,
            f = pb(a.type);
        c = null;
        d && (c = pb(d.type));
        d = f;
        f = "";
        e ? f = " (at " + e.fileName.replace(Ya, "") + ":" + e.lineNumber + ")" : c && (f = " (created by " + c + ")");
        c = "\n    in " + (d || "Unknown") + f;
    }

    b += c;
    a = a.return;
  } while (a);

  return b;
}

function rb(a) {
  switch (typeof a) {
    case "boolean":
    case "number":
    case "object":
    case "string":
    case "undefined":
      return a;

    default:
      return "";
  }
}

function sb(a) {
  var b = a.type;
  return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
}

function tb(a) {
  var b = sb(a) ? "checked" : "value",
      c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),
      d = "" + a[b];

  if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
    var e = c.get,
        f = c.set;
    Object.defineProperty(a, b, {
      configurable: !0,
      get: function () {
        return e.call(this);
      },
      set: function (a) {
        d = "" + a;
        f.call(this, a);
      }
    });
    Object.defineProperty(a, b, {
      enumerable: c.enumerable
    });
    return {
      getValue: function () {
        return d;
      },
      setValue: function (a) {
        d = "" + a;
      },
      stopTracking: function () {
        a._valueTracker = null;
        delete a[b];
      }
    };
  }
}

function xb(a) {
  a._valueTracker || (a._valueTracker = tb(a));
}

function yb(a) {
  if (!a) return !1;
  var b = a._valueTracker;
  if (!b) return !0;
  var c = b.getValue();
  var d = "";
  a && (d = sb(a) ? a.checked ? "true" : "false" : a.value);
  a = d;
  return a !== c ? (b.setValue(a), !0) : !1;
}

function zb(a, b) {
  var c = b.checked;
  return n({}, b, {
    defaultChecked: void 0,
    defaultValue: void 0,
    value: void 0,
    checked: null != c ? c : a._wrapperState.initialChecked
  });
}

function Ab(a, b) {
  var c = null == b.defaultValue ? "" : b.defaultValue,
      d = null != b.checked ? b.checked : b.defaultChecked;
  c = rb(null != b.value ? b.value : c);
  a._wrapperState = {
    initialChecked: d,
    initialValue: c,
    controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value
  };
}

function Bb(a, b) {
  b = b.checked;
  null != b && Xa(a, "checked", b, !1);
}

function Cb(a, b) {
  Bb(a, b);
  var c = rb(b.value),
      d = b.type;
  if (null != c) {
    if ("number" === d) {
      if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
    } else a.value !== "" + c && (a.value = "" + c);
  } else if ("submit" === d || "reset" === d) {
    a.removeAttribute("value");
    return;
  }
  b.hasOwnProperty("value") ? Db(a, b.type, c) : b.hasOwnProperty("defaultValue") && Db(a, b.type, rb(b.defaultValue));
  null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
}

function Eb(a, b, c) {
  if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
    var d = b.type;
    if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;
    b = "" + a._wrapperState.initialValue;
    c || b === a.value || (a.value = b);
    a.defaultValue = b;
  }

  c = a.name;
  "" !== c && (a.name = "");
  a.defaultChecked = !!a._wrapperState.initialChecked;
  "" !== c && (a.name = c);
}

function Db(a, b, c) {
  if ("number" !== b || a.ownerDocument.activeElement !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
}

function Fb(a) {
  var b = "";
  aa.Children.forEach(a, function (a) {
    null != a && (b += a);
  });
  return b;
}

function Gb(a, b) {
  a = n({
    children: void 0
  }, b);
  if (b = Fb(b.children)) a.children = b;
  return a;
}

function Hb(a, b, c, d) {
  a = a.options;

  if (b) {
    b = {};

    for (var e = 0; e < c.length; e++) b["$" + c[e]] = !0;

    for (c = 0; c < a.length; c++) e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);
  } else {
    c = "" + rb(c);
    b = null;

    for (e = 0; e < a.length; e++) {
      if (a[e].value === c) {
        a[e].selected = !0;
        d && (a[e].defaultSelected = !0);
        return;
      }

      null !== b || a[e].disabled || (b = a[e]);
    }

    null !== b && (b.selected = !0);
  }
}

function Ib(a, b) {
  if (null != b.dangerouslySetInnerHTML) throw Error(u(91));
  return n({}, b, {
    value: void 0,
    defaultValue: void 0,
    children: "" + a._wrapperState.initialValue
  });
}

function Jb(a, b) {
  var c = b.value;

  if (null == c) {
    c = b.children;
    b = b.defaultValue;

    if (null != c) {
      if (null != b) throw Error(u(92));

      if (Array.isArray(c)) {
        if (!(1 >= c.length)) throw Error(u(93));
        c = c[0];
      }

      b = c;
    }

    null == b && (b = "");
    c = b;
  }

  a._wrapperState = {
    initialValue: rb(c)
  };
}

function Kb(a, b) {
  var c = rb(b.value),
      d = rb(b.defaultValue);
  null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
  null != d && (a.defaultValue = "" + d);
}

function Lb(a) {
  var b = a.textContent;
  b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);
}

var Mb = {
  html: "http://www.w3.org/1999/xhtml",
  mathml: "http://www.w3.org/1998/Math/MathML",
  svg: "http://www.w3.org/2000/svg"
};

function Nb(a) {
  switch (a) {
    case "svg":
      return "http://www.w3.org/2000/svg";

    case "math":
      return "http://www.w3.org/1998/Math/MathML";

    default:
      return "http://www.w3.org/1999/xhtml";
  }
}

function Ob(a, b) {
  return null == a || "http://www.w3.org/1999/xhtml" === a ? Nb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
}

var Pb,
    Qb = function (a) {
  return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {
    MSApp.execUnsafeLocalFunction(function () {
      return a(b, c, d, e);
    });
  } : a;
}(function (a, b) {
  if (a.namespaceURI !== Mb.svg || "innerHTML" in a) a.innerHTML = b;else {
    Pb = Pb || document.createElement("div");
    Pb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";

    for (b = Pb.firstChild; a.firstChild;) a.removeChild(a.firstChild);

    for (; b.firstChild;) a.appendChild(b.firstChild);
  }
});

function Rb(a, b) {
  if (b) {
    var c = a.firstChild;

    if (c && c === a.lastChild && 3 === c.nodeType) {
      c.nodeValue = b;
      return;
    }
  }

  a.textContent = b;
}

function Sb(a, b) {
  var c = {};
  c[a.toLowerCase()] = b.toLowerCase();
  c["Webkit" + a] = "webkit" + b;
  c["Moz" + a] = "moz" + b;
  return c;
}

var Tb = {
  animationend: Sb("Animation", "AnimationEnd"),
  animationiteration: Sb("Animation", "AnimationIteration"),
  animationstart: Sb("Animation", "AnimationStart"),
  transitionend: Sb("Transition", "TransitionEnd")
},
    Ub = {},
    Vb = {};
ya && (Vb = document.createElement("div").style, "AnimationEvent" in window || (delete Tb.animationend.animation, delete Tb.animationiteration.animation, delete Tb.animationstart.animation), "TransitionEvent" in window || delete Tb.transitionend.transition);

function Wb(a) {
  if (Ub[a]) return Ub[a];
  if (!Tb[a]) return a;
  var b = Tb[a],
      c;

  for (c in b) if (b.hasOwnProperty(c) && c in Vb) return Ub[a] = b[c];

  return a;
}

var Xb = Wb("animationend"),
    Yb = Wb("animationiteration"),
    Zb = Wb("animationstart"),
    $b = Wb("transitionend"),
    ac = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),
    bc = new ("function" === typeof WeakMap ? WeakMap : Map)();

function cc(a) {
  var b = bc.get(a);
  void 0 === b && (b = new Map(), bc.set(a, b));
  return b;
}

function dc(a) {
  var b = a,
      c = a;
  if (a.alternate) for (; b.return;) b = b.return;else {
    a = b;

    do b = a, 0 !== (b.effectTag & 1026) && (c = b.return), a = b.return; while (a);
  }
  return 3 === b.tag ? c : null;
}

function ec(a) {
  if (13 === a.tag) {
    var b = a.memoizedState;
    null === b && (a = a.alternate, null !== a && (b = a.memoizedState));
    if (null !== b) return b.dehydrated;
  }

  return null;
}

function fc(a) {
  if (dc(a) !== a) throw Error(u(188));
}

function gc(a) {
  var b = a.alternate;

  if (!b) {
    b = dc(a);
    if (null === b) throw Error(u(188));
    return b !== a ? null : a;
  }

  for (var c = a, d = b;;) {
    var e = c.return;
    if (null === e) break;
    var f = e.alternate;

    if (null === f) {
      d = e.return;

      if (null !== d) {
        c = d;
        continue;
      }

      break;
    }

    if (e.child === f.child) {
      for (f = e.child; f;) {
        if (f === c) return fc(e), a;
        if (f === d) return fc(e), b;
        f = f.sibling;
      }

      throw Error(u(188));
    }

    if (c.return !== d.return) c = e, d = f;else {
      for (var g = !1, h = e.child; h;) {
        if (h === c) {
          g = !0;
          c = e;
          d = f;
          break;
        }

        if (h === d) {
          g = !0;
          d = e;
          c = f;
          break;
        }

        h = h.sibling;
      }

      if (!g) {
        for (h = f.child; h;) {
          if (h === c) {
            g = !0;
            c = f;
            d = e;
            break;
          }

          if (h === d) {
            g = !0;
            d = f;
            c = e;
            break;
          }

          h = h.sibling;
        }

        if (!g) throw Error(u(189));
      }
    }
    if (c.alternate !== d) throw Error(u(190));
  }

  if (3 !== c.tag) throw Error(u(188));
  return c.stateNode.current === c ? a : b;
}

function hc(a) {
  a = gc(a);
  if (!a) return null;

  for (var b = a;;) {
    if (5 === b.tag || 6 === b.tag) return b;
    if (b.child) b.child.return = b, b = b.child;else {
      if (b === a) break;

      for (; !b.sibling;) {
        if (!b.return || b.return === a) return null;
        b = b.return;
      }

      b.sibling.return = b.return;
      b = b.sibling;
    }
  }

  return null;
}

function ic(a, b) {
  if (null == b) throw Error(u(30));
  if (null == a) return b;

  if (Array.isArray(a)) {
    if (Array.isArray(b)) return a.push.apply(a, b), a;
    a.push(b);
    return a;
  }

  return Array.isArray(b) ? [a].concat(b) : [a, b];
}

function jc(a, b, c) {
  Array.isArray(a) ? a.forEach(b, c) : a && b.call(c, a);
}

var kc = null;

function lc(a) {
  if (a) {
    var b = a._dispatchListeners,
        c = a._dispatchInstances;
    if (Array.isArray(b)) for (var d = 0; d < b.length && !a.isPropagationStopped(); d++) oa(a, b[d], c[d]);else b && oa(a, b, c);
    a._dispatchListeners = null;
    a._dispatchInstances = null;
    a.isPersistent() || a.constructor.release(a);
  }
}

function mc(a) {
  null !== a && (kc = ic(kc, a));
  a = kc;
  kc = null;

  if (a) {
    jc(a, lc);
    if (kc) throw Error(u(95));
    if (fa) throw a = ha, fa = !1, ha = null, a;
  }
}

function nc(a) {
  a = a.target || a.srcElement || window;
  a.correspondingUseElement && (a = a.correspondingUseElement);
  return 3 === a.nodeType ? a.parentNode : a;
}

function oc(a) {
  if (!ya) return !1;
  a = "on" + a;
  var b = (a in document);
  b || (b = document.createElement("div"), b.setAttribute(a, "return;"), b = "function" === typeof b[a]);
  return b;
}

var pc = [];

function qc(a) {
  a.topLevelType = null;
  a.nativeEvent = null;
  a.targetInst = null;
  a.ancestors.length = 0;
  10 > pc.length && pc.push(a);
}

function rc(a, b, c, d) {
  if (pc.length) {
    var e = pc.pop();
    e.topLevelType = a;
    e.eventSystemFlags = d;
    e.nativeEvent = b;
    e.targetInst = c;
    return e;
  }

  return {
    topLevelType: a,
    eventSystemFlags: d,
    nativeEvent: b,
    targetInst: c,
    ancestors: []
  };
}

function sc(a) {
  var b = a.targetInst,
      c = b;

  do {
    if (!c) {
      a.ancestors.push(c);
      break;
    }

    var d = c;
    if (3 === d.tag) d = d.stateNode.containerInfo;else {
      for (; d.return;) d = d.return;

      d = 3 !== d.tag ? null : d.stateNode.containerInfo;
    }
    if (!d) break;
    b = c.tag;
    5 !== b && 6 !== b || a.ancestors.push(c);
    c = tc(d);
  } while (c);

  for (c = 0; c < a.ancestors.length; c++) {
    b = a.ancestors[c];
    var e = nc(a.nativeEvent);
    d = a.topLevelType;
    var f = a.nativeEvent,
        g = a.eventSystemFlags;
    0 === c && (g |= 64);

    for (var h = null, k = 0; k < sa.length; k++) {
      var l = sa[k];
      l && (l = l.extractEvents(d, b, f, e, g)) && (h = ic(h, l));
    }

    mc(h);
  }
}

function uc(a, b, c) {
  if (!c.has(a)) {
    switch (a) {
      case "scroll":
        vc(b, "scroll", !0);
        break;

      case "focus":
      case "blur":
        vc(b, "focus", !0);
        vc(b, "blur", !0);
        c.set("blur", null);
        c.set("focus", null);
        break;

      case "cancel":
      case "close":
        oc(a) && vc(b, a, !0);
        break;

      case "invalid":
      case "submit":
      case "reset":
        break;

      default:
        -1 === ac.indexOf(a) && F(a, b);
    }

    c.set(a, null);
  }
}

var wc,
    xc,
    yc,
    zc = !1,
    Ac = [],
    Bc = null,
    Cc = null,
    Dc = null,
    Ec = new Map(),
    Fc = new Map(),
    Gc = [],
    Hc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),
    Ic = "focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");

function Jc(a, b) {
  var c = cc(b);
  Hc.forEach(function (a) {
    uc(a, b, c);
  });
  Ic.forEach(function (a) {
    uc(a, b, c);
  });
}

function Kc(a, b, c, d, e) {
  return {
    blockedOn: a,
    topLevelType: b,
    eventSystemFlags: c | 32,
    nativeEvent: e,
    container: d
  };
}

function Lc(a, b) {
  switch (a) {
    case "focus":
    case "blur":
      Bc = null;
      break;

    case "dragenter":
    case "dragleave":
      Cc = null;
      break;

    case "mouseover":
    case "mouseout":
      Dc = null;
      break;

    case "pointerover":
    case "pointerout":
      Ec.delete(b.pointerId);
      break;

    case "gotpointercapture":
    case "lostpointercapture":
      Fc.delete(b.pointerId);
  }
}

function Mc(a, b, c, d, e, f) {
  if (null === a || a.nativeEvent !== f) return a = Kc(b, c, d, e, f), null !== b && (b = Nc(b), null !== b && xc(b)), a;
  a.eventSystemFlags |= d;
  return a;
}

function Oc(a, b, c, d, e) {
  switch (b) {
    case "focus":
      return Bc = Mc(Bc, a, b, c, d, e), !0;

    case "dragenter":
      return Cc = Mc(Cc, a, b, c, d, e), !0;

    case "mouseover":
      return Dc = Mc(Dc, a, b, c, d, e), !0;

    case "pointerover":
      var f = e.pointerId;
      Ec.set(f, Mc(Ec.get(f) || null, a, b, c, d, e));
      return !0;

    case "gotpointercapture":
      return f = e.pointerId, Fc.set(f, Mc(Fc.get(f) || null, a, b, c, d, e)), !0;
  }

  return !1;
}

function Pc(a) {
  var b = tc(a.target);

  if (null !== b) {
    var c = dc(b);
    if (null !== c) if (b = c.tag, 13 === b) {
      if (b = ec(c), null !== b) {
        a.blockedOn = b;
        r.unstable_runWithPriority(a.priority, function () {
          yc(c);
        });
        return;
      }
    } else if (3 === b && c.stateNode.hydrate) {
      a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
      return;
    }
  }

  a.blockedOn = null;
}

function Qc(a) {
  if (null !== a.blockedOn) return !1;
  var b = Rc(a.topLevelType, a.eventSystemFlags, a.container, a.nativeEvent);

  if (null !== b) {
    var c = Nc(b);
    null !== c && xc(c);
    a.blockedOn = b;
    return !1;
  }

  return !0;
}

function Sc(a, b, c) {
  Qc(a) && c.delete(b);
}

function Tc() {
  for (zc = !1; 0 < Ac.length;) {
    var a = Ac[0];

    if (null !== a.blockedOn) {
      a = Nc(a.blockedOn);
      null !== a && wc(a);
      break;
    }

    var b = Rc(a.topLevelType, a.eventSystemFlags, a.container, a.nativeEvent);
    null !== b ? a.blockedOn = b : Ac.shift();
  }

  null !== Bc && Qc(Bc) && (Bc = null);
  null !== Cc && Qc(Cc) && (Cc = null);
  null !== Dc && Qc(Dc) && (Dc = null);
  Ec.forEach(Sc);
  Fc.forEach(Sc);
}

function Uc(a, b) {
  a.blockedOn === b && (a.blockedOn = null, zc || (zc = !0, r.unstable_scheduleCallback(r.unstable_NormalPriority, Tc)));
}

function Vc(a) {
  function b(b) {
    return Uc(b, a);
  }

  if (0 < Ac.length) {
    Uc(Ac[0], a);

    for (var c = 1; c < Ac.length; c++) {
      var d = Ac[c];
      d.blockedOn === a && (d.blockedOn = null);
    }
  }

  null !== Bc && Uc(Bc, a);
  null !== Cc && Uc(Cc, a);
  null !== Dc && Uc(Dc, a);
  Ec.forEach(b);
  Fc.forEach(b);

  for (c = 0; c < Gc.length; c++) d = Gc[c], d.blockedOn === a && (d.blockedOn = null);

  for (; 0 < Gc.length && (c = Gc[0], null === c.blockedOn);) Pc(c), null === c.blockedOn && Gc.shift();
}

var Wc = {},
    Yc = new Map(),
    Zc = new Map(),
    $c = ["abort", "abort", Xb, "animationEnd", Yb, "animationIteration", Zb, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", $b, "transitionEnd", "waiting", "waiting"];

function ad(a, b) {
  for (var c = 0; c < a.length; c += 2) {
    var d = a[c],
        e = a[c + 1],
        f = "on" + (e[0].toUpperCase() + e.slice(1));
    f = {
      phasedRegistrationNames: {
        bubbled: f,
        captured: f + "Capture"
      },
      dependencies: [d],
      eventPriority: b
    };
    Zc.set(d, b);
    Yc.set(d, f);
    Wc[e] = f;
  }
}

ad("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "), 0);
ad("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "), 1);
ad($c, 2);

for (var bd = "change selectionchange textInput compositionstart compositionend compositionupdate".split(" "), cd = 0; cd < bd.length; cd++) Zc.set(bd[cd], 0);

var dd = r.unstable_UserBlockingPriority,
    ed = r.unstable_runWithPriority,
    fd = !0;

function F(a, b) {
  vc(b, a, !1);
}

function vc(a, b, c) {
  var d = Zc.get(b);

  switch (void 0 === d ? 2 : d) {
    case 0:
      d = gd.bind(null, b, 1, a);
      break;

    case 1:
      d = hd.bind(null, b, 1, a);
      break;

    default:
      d = id.bind(null, b, 1, a);
  }

  c ? a.addEventListener(b, d, !0) : a.addEventListener(b, d, !1);
}

function gd(a, b, c, d) {
  Ja || Ha();
  var e = id,
      f = Ja;
  Ja = !0;

  try {
    Ga(e, a, b, c, d);
  } finally {
    (Ja = f) || La();
  }
}

function hd(a, b, c, d) {
  ed(dd, id.bind(null, a, b, c, d));
}

function id(a, b, c, d) {
  if (fd) if (0 < Ac.length && -1 < Hc.indexOf(a)) a = Kc(null, a, b, c, d), Ac.push(a);else {
    var e = Rc(a, b, c, d);
    if (null === e) Lc(a, d);else if (-1 < Hc.indexOf(a)) a = Kc(e, a, b, c, d), Ac.push(a);else if (!Oc(e, a, b, c, d)) {
      Lc(a, d);
      a = rc(a, d, null, b);

      try {
        Ma(sc, a);
      } finally {
        qc(a);
      }
    }
  }
}

function Rc(a, b, c, d) {
  c = nc(d);
  c = tc(c);

  if (null !== c) {
    var e = dc(c);
    if (null === e) c = null;else {
      var f = e.tag;

      if (13 === f) {
        c = ec(e);
        if (null !== c) return c;
        c = null;
      } else if (3 === f) {
        if (e.stateNode.hydrate) return 3 === e.tag ? e.stateNode.containerInfo : null;
        c = null;
      } else e !== c && (c = null);
    }
  }

  a = rc(a, d, c, b);

  try {
    Ma(sc, a);
  } finally {
    qc(a);
  }

  return null;
}

var jd = {
  animationIterationCount: !0,
  borderImageOutset: !0,
  borderImageSlice: !0,
  borderImageWidth: !0,
  boxFlex: !0,
  boxFlexGroup: !0,
  boxOrdinalGroup: !0,
  columnCount: !0,
  columns: !0,
  flex: !0,
  flexGrow: !0,
  flexPositive: !0,
  flexShrink: !0,
  flexNegative: !0,
  flexOrder: !0,
  gridArea: !0,
  gridRow: !0,
  gridRowEnd: !0,
  gridRowSpan: !0,
  gridRowStart: !0,
  gridColumn: !0,
  gridColumnEnd: !0,
  gridColumnSpan: !0,
  gridColumnStart: !0,
  fontWeight: !0,
  lineClamp: !0,
  lineHeight: !0,
  opacity: !0,
  order: !0,
  orphans: !0,
  tabSize: !0,
  widows: !0,
  zIndex: !0,
  zoom: !0,
  fillOpacity: !0,
  floodOpacity: !0,
  stopOpacity: !0,
  strokeDasharray: !0,
  strokeDashoffset: !0,
  strokeMiterlimit: !0,
  strokeOpacity: !0,
  strokeWidth: !0
},
    kd = ["Webkit", "ms", "Moz", "O"];
Object.keys(jd).forEach(function (a) {
  kd.forEach(function (b) {
    b = b + a.charAt(0).toUpperCase() + a.substring(1);
    jd[b] = jd[a];
  });
});

function ld(a, b, c) {
  return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || jd.hasOwnProperty(a) && jd[a] ? ("" + b).trim() : b + "px";
}

function md(a, b) {
  a = a.style;

  for (var c in b) if (b.hasOwnProperty(c)) {
    var d = 0 === c.indexOf("--"),
        e = ld(c, b[c], d);
    "float" === c && (c = "cssFloat");
    d ? a.setProperty(c, e) : a[c] = e;
  }
}

var nd = n({
  menuitem: !0
}, {
  area: !0,
  base: !0,
  br: !0,
  col: !0,
  embed: !0,
  hr: !0,
  img: !0,
  input: !0,
  keygen: !0,
  link: !0,
  meta: !0,
  param: !0,
  source: !0,
  track: !0,
  wbr: !0
});

function od(a, b) {
  if (b) {
    if (nd[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(u(137, a, ""));

    if (null != b.dangerouslySetInnerHTML) {
      if (null != b.children) throw Error(u(60));
      if (!("object" === typeof b.dangerouslySetInnerHTML && "__html" in b.dangerouslySetInnerHTML)) throw Error(u(61));
    }

    if (null != b.style && "object" !== typeof b.style) throw Error(u(62, ""));
  }
}

function pd(a, b) {
  if (-1 === a.indexOf("-")) return "string" === typeof b.is;

  switch (a) {
    case "annotation-xml":
    case "color-profile":
    case "font-face":
    case "font-face-src":
    case "font-face-uri":
    case "font-face-format":
    case "font-face-name":
    case "missing-glyph":
      return !1;

    default:
      return !0;
  }
}

var qd = Mb.html;

function rd(a, b) {
  a = 9 === a.nodeType || 11 === a.nodeType ? a : a.ownerDocument;
  var c = cc(a);
  b = wa[b];

  for (var d = 0; d < b.length; d++) uc(b[d], a, c);
}

function sd() {}

function td(a) {
  a = a || ("undefined" !== typeof document ? document : void 0);
  if ("undefined" === typeof a) return null;

  try {
    return a.activeElement || a.body;
  } catch (b) {
    return a.body;
  }
}

function ud(a) {
  for (; a && a.firstChild;) a = a.firstChild;

  return a;
}

function vd(a, b) {
  var c = ud(a);
  a = 0;

  for (var d; c;) {
    if (3 === c.nodeType) {
      d = a + c.textContent.length;
      if (a <= b && d >= b) return {
        node: c,
        offset: b - a
      };
      a = d;
    }

    a: {
      for (; c;) {
        if (c.nextSibling) {
          c = c.nextSibling;
          break a;
        }

        c = c.parentNode;
      }

      c = void 0;
    }

    c = ud(c);
  }
}

function wd(a, b) {
  return a && b ? a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? wd(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;
}

function xd() {
  for (var a = window, b = td(); b instanceof a.HTMLIFrameElement;) {
    try {
      var c = "string" === typeof b.contentWindow.location.href;
    } catch (d) {
      c = !1;
    }

    if (c) a = b.contentWindow;else break;
    b = td(a.document);
  }

  return b;
}

function yd(a) {
  var b = a && a.nodeName && a.nodeName.toLowerCase();
  return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
}

var zd = "$",
    Ad = "/$",
    Bd = "$?",
    Cd = "$!",
    Dd = null,
    Ed = null;

function Fd(a, b) {
  switch (a) {
    case "button":
    case "input":
    case "select":
    case "textarea":
      return !!b.autoFocus;
  }

  return !1;
}

function Gd(a, b) {
  return "textarea" === a || "option" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
}

var Hd = "function" === typeof setTimeout ? setTimeout : void 0,
    Id = "function" === typeof clearTimeout ? clearTimeout : void 0;

function Jd(a) {
  for (; null != a; a = a.nextSibling) {
    var b = a.nodeType;
    if (1 === b || 3 === b) break;
  }

  return a;
}

function Kd(a) {
  a = a.previousSibling;

  for (var b = 0; a;) {
    if (8 === a.nodeType) {
      var c = a.data;

      if (c === zd || c === Cd || c === Bd) {
        if (0 === b) return a;
        b--;
      } else c === Ad && b++;
    }

    a = a.previousSibling;
  }

  return null;
}

var Ld = Math.random().toString(36).slice(2),
    Md = "__reactInternalInstance$" + Ld,
    Nd = "__reactEventHandlers$" + Ld,
    Od = "__reactContainere$" + Ld;

function tc(a) {
  var b = a[Md];
  if (b) return b;

  for (var c = a.parentNode; c;) {
    if (b = c[Od] || c[Md]) {
      c = b.alternate;
      if (null !== b.child || null !== c && null !== c.child) for (a = Kd(a); null !== a;) {
        if (c = a[Md]) return c;
        a = Kd(a);
      }
      return b;
    }

    a = c;
    c = a.parentNode;
  }

  return null;
}

function Nc(a) {
  a = a[Md] || a[Od];
  return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
}

function Pd(a) {
  if (5 === a.tag || 6 === a.tag) return a.stateNode;
  throw Error(u(33));
}

function Qd(a) {
  return a[Nd] || null;
}

function Rd(a) {
  do a = a.return; while (a && 5 !== a.tag);

  return a ? a : null;
}

function Sd(a, b) {
  var c = a.stateNode;
  if (!c) return null;
  var d = la(c);
  if (!d) return null;
  c = d[b];

  a: switch (b) {
    case "onClick":
    case "onClickCapture":
    case "onDoubleClick":
    case "onDoubleClickCapture":
    case "onMouseDown":
    case "onMouseDownCapture":
    case "onMouseMove":
    case "onMouseMoveCapture":
    case "onMouseUp":
    case "onMouseUpCapture":
    case "onMouseEnter":
      (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
      a = !d;
      break a;

    default:
      a = !1;
  }

  if (a) return null;
  if (c && "function" !== typeof c) throw Error(u(231, b, typeof c));
  return c;
}

function Td(a, b, c) {
  if (b = Sd(a, c.dispatchConfig.phasedRegistrationNames[b])) c._dispatchListeners = ic(c._dispatchListeners, b), c._dispatchInstances = ic(c._dispatchInstances, a);
}

function Ud(a) {
  if (a && a.dispatchConfig.phasedRegistrationNames) {
    for (var b = a._targetInst, c = []; b;) c.push(b), b = Rd(b);

    for (b = c.length; 0 < b--;) Td(c[b], "captured", a);

    for (b = 0; b < c.length; b++) Td(c[b], "bubbled", a);
  }
}

function Vd(a, b, c) {
  a && c && c.dispatchConfig.registrationName && (b = Sd(a, c.dispatchConfig.registrationName)) && (c._dispatchListeners = ic(c._dispatchListeners, b), c._dispatchInstances = ic(c._dispatchInstances, a));
}

function Wd(a) {
  a && a.dispatchConfig.registrationName && Vd(a._targetInst, null, a);
}

function Xd(a) {
  jc(a, Ud);
}

var Yd = null,
    Zd = null,
    $d = null;

function ae() {
  if ($d) return $d;
  var a,
      b = Zd,
      c = b.length,
      d,
      e = "value" in Yd ? Yd.value : Yd.textContent,
      f = e.length;

  for (a = 0; a < c && b[a] === e[a]; a++);

  var g = c - a;

  for (d = 1; d <= g && b[c - d] === e[f - d]; d++);

  return $d = e.slice(a, 1 < d ? 1 - d : void 0);
}

function be() {
  return !0;
}

function ce() {
  return !1;
}

function G(a, b, c, d) {
  this.dispatchConfig = a;
  this._targetInst = b;
  this.nativeEvent = c;
  a = this.constructor.Interface;

  for (var e in a) a.hasOwnProperty(e) && ((b = a[e]) ? this[e] = b(c) : "target" === e ? this.target = d : this[e] = c[e]);

  this.isDefaultPrevented = (null != c.defaultPrevented ? c.defaultPrevented : !1 === c.returnValue) ? be : ce;
  this.isPropagationStopped = ce;
  return this;
}

n(G.prototype, {
  preventDefault: function () {
    this.defaultPrevented = !0;
    var a = this.nativeEvent;
    a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = be);
  },
  stopPropagation: function () {
    var a = this.nativeEvent;
    a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = be);
  },
  persist: function () {
    this.isPersistent = be;
  },
  isPersistent: ce,
  destructor: function () {
    var a = this.constructor.Interface,
        b;

    for (b in a) this[b] = null;

    this.nativeEvent = this._targetInst = this.dispatchConfig = null;
    this.isPropagationStopped = this.isDefaultPrevented = ce;
    this._dispatchInstances = this._dispatchListeners = null;
  }
});
G.Interface = {
  type: null,
  target: null,
  currentTarget: function () {
    return null;
  },
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (a) {
    return a.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

G.extend = function (a) {
  function b() {}

  function c() {
    return d.apply(this, arguments);
  }

  var d = this;
  b.prototype = d.prototype;
  var e = new b();
  n(e, c.prototype);
  c.prototype = e;
  c.prototype.constructor = c;
  c.Interface = n({}, d.Interface, a);
  c.extend = d.extend;
  de(c);
  return c;
};

de(G);

function ee(a, b, c, d) {
  if (this.eventPool.length) {
    var e = this.eventPool.pop();
    this.call(e, a, b, c, d);
    return e;
  }

  return new this(a, b, c, d);
}

function fe(a) {
  if (!(a instanceof this)) throw Error(u(279));
  a.destructor();
  10 > this.eventPool.length && this.eventPool.push(a);
}

function de(a) {
  a.eventPool = [];
  a.getPooled = ee;
  a.release = fe;
}

var ge = G.extend({
  data: null
}),
    he = G.extend({
  data: null
}),
    ie = [9, 13, 27, 32],
    je = ya && "CompositionEvent" in window,
    ke = null;
ya && "documentMode" in document && (ke = document.documentMode);
var le = ya && "TextEvent" in window && !ke,
    me = ya && (!je || ke && 8 < ke && 11 >= ke),
    ne = String.fromCharCode(32),
    oe = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: "onBeforeInput",
      captured: "onBeforeInputCapture"
    },
    dependencies: ["compositionend", "keypress", "textInput", "paste"]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: "onCompositionEnd",
      captured: "onCompositionEndCapture"
    },
    dependencies: "blur compositionend keydown keypress keyup mousedown".split(" ")
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: "onCompositionStart",
      captured: "onCompositionStartCapture"
    },
    dependencies: "blur compositionstart keydown keypress keyup mousedown".split(" ")
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: "onCompositionUpdate",
      captured: "onCompositionUpdateCapture"
    },
    dependencies: "blur compositionupdate keydown keypress keyup mousedown".split(" ")
  }
},
    pe = !1;

function qe(a, b) {
  switch (a) {
    case "keyup":
      return -1 !== ie.indexOf(b.keyCode);

    case "keydown":
      return 229 !== b.keyCode;

    case "keypress":
    case "mousedown":
    case "blur":
      return !0;

    default:
      return !1;
  }
}

function re(a) {
  a = a.detail;
  return "object" === typeof a && "data" in a ? a.data : null;
}

var se = !1;

function te(a, b) {
  switch (a) {
    case "compositionend":
      return re(b);

    case "keypress":
      if (32 !== b.which) return null;
      pe = !0;
      return ne;

    case "textInput":
      return a = b.data, a === ne && pe ? null : a;

    default:
      return null;
  }
}

function ue(a, b) {
  if (se) return "compositionend" === a || !je && qe(a, b) ? (a = ae(), $d = Zd = Yd = null, se = !1, a) : null;

  switch (a) {
    case "paste":
      return null;

    case "keypress":
      if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
        if (b.char && 1 < b.char.length) return b.char;
        if (b.which) return String.fromCharCode(b.which);
      }

      return null;

    case "compositionend":
      return me && "ko" !== b.locale ? null : b.data;

    default:
      return null;
  }
}

var ve = {
  eventTypes: oe,
  extractEvents: function (a, b, c, d) {
    var e;
    if (je) b: {
      switch (a) {
        case "compositionstart":
          var f = oe.compositionStart;
          break b;

        case "compositionend":
          f = oe.compositionEnd;
          break b;

        case "compositionupdate":
          f = oe.compositionUpdate;
          break b;
      }

      f = void 0;
    } else se ? qe(a, c) && (f = oe.compositionEnd) : "keydown" === a && 229 === c.keyCode && (f = oe.compositionStart);
    f ? (me && "ko" !== c.locale && (se || f !== oe.compositionStart ? f === oe.compositionEnd && se && (e = ae()) : (Yd = d, Zd = "value" in Yd ? Yd.value : Yd.textContent, se = !0)), f = ge.getPooled(f, b, c, d), e ? f.data = e : (e = re(c), null !== e && (f.data = e)), Xd(f), e = f) : e = null;
    (a = le ? te(a, c) : ue(a, c)) ? (b = he.getPooled(oe.beforeInput, b, c, d), b.data = a, Xd(b)) : b = null;
    return null === e ? b : null === b ? e : [e, b];
  }
},
    we = {
  color: !0,
  date: !0,
  datetime: !0,
  "datetime-local": !0,
  email: !0,
  month: !0,
  number: !0,
  password: !0,
  range: !0,
  search: !0,
  tel: !0,
  text: !0,
  time: !0,
  url: !0,
  week: !0
};

function xe(a) {
  var b = a && a.nodeName && a.nodeName.toLowerCase();
  return "input" === b ? !!we[a.type] : "textarea" === b ? !0 : !1;
}

var ye = {
  change: {
    phasedRegistrationNames: {
      bubbled: "onChange",
      captured: "onChangeCapture"
    },
    dependencies: "blur change click focus input keydown keyup selectionchange".split(" ")
  }
};

function ze(a, b, c) {
  a = G.getPooled(ye.change, a, b, c);
  a.type = "change";
  Da(c);
  Xd(a);
  return a;
}

var Ae = null,
    Be = null;

function Ce(a) {
  mc(a);
}

function De(a) {
  var b = Pd(a);
  if (yb(b)) return a;
}

function Ee(a, b) {
  if ("change" === a) return b;
}

var Fe = !1;
ya && (Fe = oc("input") && (!document.documentMode || 9 < document.documentMode));

function Ge() {
  Ae && (Ae.detachEvent("onpropertychange", He), Be = Ae = null);
}

function He(a) {
  if ("value" === a.propertyName && De(Be)) if (a = ze(Be, a, nc(a)), Ja) mc(a);else {
    Ja = !0;

    try {
      Fa(Ce, a);
    } finally {
      Ja = !1, La();
    }
  }
}

function Ie(a, b, c) {
  "focus" === a ? (Ge(), Ae = b, Be = c, Ae.attachEvent("onpropertychange", He)) : "blur" === a && Ge();
}

function Je(a) {
  if ("selectionchange" === a || "keyup" === a || "keydown" === a) return De(Be);
}

function Ke(a, b) {
  if ("click" === a) return De(b);
}

function Le(a, b) {
  if ("input" === a || "change" === a) return De(b);
}

var Me = {
  eventTypes: ye,
  _isInputEventSupported: Fe,
  extractEvents: function (a, b, c, d) {
    var e = b ? Pd(b) : window,
        f = e.nodeName && e.nodeName.toLowerCase();
    if ("select" === f || "input" === f && "file" === e.type) var g = Ee;else if (xe(e)) {
      if (Fe) g = Le;else {
        g = Je;
        var h = Ie;
      }
    } else (f = e.nodeName) && "input" === f.toLowerCase() && ("checkbox" === e.type || "radio" === e.type) && (g = Ke);
    if (g && (g = g(a, b))) return ze(g, c, d);
    h && h(a, e, b);
    "blur" === a && (a = e._wrapperState) && a.controlled && "number" === e.type && Db(e, "number", e.value);
  }
},
    Ne = G.extend({
  view: null,
  detail: null
}),
    Oe = {
  Alt: "altKey",
  Control: "ctrlKey",
  Meta: "metaKey",
  Shift: "shiftKey"
};

function Pe(a) {
  var b = this.nativeEvent;
  return b.getModifierState ? b.getModifierState(a) : (a = Oe[a]) ? !!b[a] : !1;
}

function Qe() {
  return Pe;
}

var Re = 0,
    Se = 0,
    Te = !1,
    Ue = !1,
    Ve = Ne.extend({
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  pageX: null,
  pageY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: Qe,
  button: null,
  buttons: null,
  relatedTarget: function (a) {
    return a.relatedTarget || (a.fromElement === a.srcElement ? a.toElement : a.fromElement);
  },
  movementX: function (a) {
    if ("movementX" in a) return a.movementX;
    var b = Re;
    Re = a.screenX;
    return Te ? "mousemove" === a.type ? a.screenX - b : 0 : (Te = !0, 0);
  },
  movementY: function (a) {
    if ("movementY" in a) return a.movementY;
    var b = Se;
    Se = a.screenY;
    return Ue ? "mousemove" === a.type ? a.screenY - b : 0 : (Ue = !0, 0);
  }
}),
    We = Ve.extend({
  pointerId: null,
  width: null,
  height: null,
  pressure: null,
  tangentialPressure: null,
  tiltX: null,
  tiltY: null,
  twist: null,
  pointerType: null,
  isPrimary: null
}),
    Xe = {
  mouseEnter: {
    registrationName: "onMouseEnter",
    dependencies: ["mouseout", "mouseover"]
  },
  mouseLeave: {
    registrationName: "onMouseLeave",
    dependencies: ["mouseout", "mouseover"]
  },
  pointerEnter: {
    registrationName: "onPointerEnter",
    dependencies: ["pointerout", "pointerover"]
  },
  pointerLeave: {
    registrationName: "onPointerLeave",
    dependencies: ["pointerout", "pointerover"]
  }
},
    Ye = {
  eventTypes: Xe,
  extractEvents: function (a, b, c, d, e) {
    var f = "mouseover" === a || "pointerover" === a,
        g = "mouseout" === a || "pointerout" === a;
    if (f && 0 === (e & 32) && (c.relatedTarget || c.fromElement) || !g && !f) return null;
    f = d.window === d ? d : (f = d.ownerDocument) ? f.defaultView || f.parentWindow : window;

    if (g) {
      if (g = b, b = (b = c.relatedTarget || c.toElement) ? tc(b) : null, null !== b) {
        var h = dc(b);
        if (b !== h || 5 !== b.tag && 6 !== b.tag) b = null;
      }
    } else g = null;

    if (g === b) return null;

    if ("mouseout" === a || "mouseover" === a) {
      var k = Ve;
      var l = Xe.mouseLeave;
      var m = Xe.mouseEnter;
      var p = "mouse";
    } else if ("pointerout" === a || "pointerover" === a) k = We, l = Xe.pointerLeave, m = Xe.pointerEnter, p = "pointer";

    a = null == g ? f : Pd(g);
    f = null == b ? f : Pd(b);
    l = k.getPooled(l, g, c, d);
    l.type = p + "leave";
    l.target = a;
    l.relatedTarget = f;
    c = k.getPooled(m, b, c, d);
    c.type = p + "enter";
    c.target = f;
    c.relatedTarget = a;
    d = g;
    p = b;
    if (d && p) a: {
      k = d;
      m = p;
      g = 0;

      for (a = k; a; a = Rd(a)) g++;

      a = 0;

      for (b = m; b; b = Rd(b)) a++;

      for (; 0 < g - a;) k = Rd(k), g--;

      for (; 0 < a - g;) m = Rd(m), a--;

      for (; g--;) {
        if (k === m || k === m.alternate) break a;
        k = Rd(k);
        m = Rd(m);
      }

      k = null;
    } else k = null;
    m = k;

    for (k = []; d && d !== m;) {
      g = d.alternate;
      if (null !== g && g === m) break;
      k.push(d);
      d = Rd(d);
    }

    for (d = []; p && p !== m;) {
      g = p.alternate;
      if (null !== g && g === m) break;
      d.push(p);
      p = Rd(p);
    }

    for (p = 0; p < k.length; p++) Vd(k[p], "bubbled", l);

    for (p = d.length; 0 < p--;) Vd(d[p], "captured", c);

    return 0 === (e & 64) ? [l] : [l, c];
  }
};

function Ze(a, b) {
  return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
}

var $e = "function" === typeof Object.is ? Object.is : Ze,
    af = Object.prototype.hasOwnProperty;

function bf(a, b) {
  if ($e(a, b)) return !0;
  if ("object" !== typeof a || null === a || "object" !== typeof b || null === b) return !1;
  var c = Object.keys(a),
      d = Object.keys(b);
  if (c.length !== d.length) return !1;

  for (d = 0; d < c.length; d++) if (!af.call(b, c[d]) || !$e(a[c[d]], b[c[d]])) return !1;

  return !0;
}

var cf = ya && "documentMode" in document && 11 >= document.documentMode,
    df = {
  select: {
    phasedRegistrationNames: {
      bubbled: "onSelect",
      captured: "onSelectCapture"
    },
    dependencies: "blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")
  }
},
    ef = null,
    ff = null,
    gf = null,
    hf = !1;

function jf(a, b) {
  var c = b.window === b ? b.document : 9 === b.nodeType ? b : b.ownerDocument;
  if (hf || null == ef || ef !== td(c)) return null;
  c = ef;
  "selectionStart" in c && yd(c) ? c = {
    start: c.selectionStart,
    end: c.selectionEnd
  } : (c = (c.ownerDocument && c.ownerDocument.defaultView || window).getSelection(), c = {
    anchorNode: c.anchorNode,
    anchorOffset: c.anchorOffset,
    focusNode: c.focusNode,
    focusOffset: c.focusOffset
  });
  return gf && bf(gf, c) ? null : (gf = c, a = G.getPooled(df.select, ff, a, b), a.type = "select", a.target = ef, Xd(a), a);
}

var kf = {
  eventTypes: df,
  extractEvents: function (a, b, c, d, e, f) {
    e = f || (d.window === d ? d.document : 9 === d.nodeType ? d : d.ownerDocument);

    if (!(f = !e)) {
      a: {
        e = cc(e);
        f = wa.onSelect;

        for (var g = 0; g < f.length; g++) if (!e.has(f[g])) {
          e = !1;
          break a;
        }

        e = !0;
      }

      f = !e;
    }

    if (f) return null;
    e = b ? Pd(b) : window;

    switch (a) {
      case "focus":
        if (xe(e) || "true" === e.contentEditable) ef = e, ff = b, gf = null;
        break;

      case "blur":
        gf = ff = ef = null;
        break;

      case "mousedown":
        hf = !0;
        break;

      case "contextmenu":
      case "mouseup":
      case "dragend":
        return hf = !1, jf(c, d);

      case "selectionchange":
        if (cf) break;

      case "keydown":
      case "keyup":
        return jf(c, d);
    }

    return null;
  }
},
    lf = G.extend({
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
}),
    mf = G.extend({
  clipboardData: function (a) {
    return "clipboardData" in a ? a.clipboardData : window.clipboardData;
  }
}),
    nf = Ne.extend({
  relatedTarget: null
});

function of(a) {
  var b = a.keyCode;
  "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
  10 === a && (a = 13);
  return 32 <= a || 13 === a ? a : 0;
}

var pf = {
  Esc: "Escape",
  Spacebar: " ",
  Left: "ArrowLeft",
  Up: "ArrowUp",
  Right: "ArrowRight",
  Down: "ArrowDown",
  Del: "Delete",
  Win: "OS",
  Menu: "ContextMenu",
  Apps: "ContextMenu",
  Scroll: "ScrollLock",
  MozPrintableKey: "Unidentified"
},
    qf = {
  8: "Backspace",
  9: "Tab",
  12: "Clear",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  19: "Pause",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  45: "Insert",
  46: "Delete",
  112: "F1",
  113: "F2",
  114: "F3",
  115: "F4",
  116: "F5",
  117: "F6",
  118: "F7",
  119: "F8",
  120: "F9",
  121: "F10",
  122: "F11",
  123: "F12",
  144: "NumLock",
  145: "ScrollLock",
  224: "Meta"
},
    rf = Ne.extend({
  key: function (a) {
    if (a.key) {
      var b = pf[a.key] || a.key;
      if ("Unidentified" !== b) return b;
    }

    return "keypress" === a.type ? (a = of(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? qf[a.keyCode] || "Unidentified" : "";
  },
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: Qe,
  charCode: function (a) {
    return "keypress" === a.type ? of(a) : 0;
  },
  keyCode: function (a) {
    return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
  },
  which: function (a) {
    return "keypress" === a.type ? of(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
  }
}),
    sf = Ve.extend({
  dataTransfer: null
}),
    tf = Ne.extend({
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: Qe
}),
    uf = G.extend({
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
}),
    vf = Ve.extend({
  deltaX: function (a) {
    return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
  },
  deltaY: function (a) {
    return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
  },
  deltaZ: null,
  deltaMode: null
}),
    wf = {
  eventTypes: Wc,
  extractEvents: function (a, b, c, d) {
    var e = Yc.get(a);
    if (!e) return null;

    switch (a) {
      case "keypress":
        if (0 === of(c)) return null;

      case "keydown":
      case "keyup":
        a = rf;
        break;

      case "blur":
      case "focus":
        a = nf;
        break;

      case "click":
        if (2 === c.button) return null;

      case "auxclick":
      case "dblclick":
      case "mousedown":
      case "mousemove":
      case "mouseup":
      case "mouseout":
      case "mouseover":
      case "contextmenu":
        a = Ve;
        break;

      case "drag":
      case "dragend":
      case "dragenter":
      case "dragexit":
      case "dragleave":
      case "dragover":
      case "dragstart":
      case "drop":
        a = sf;
        break;

      case "touchcancel":
      case "touchend":
      case "touchmove":
      case "touchstart":
        a = tf;
        break;

      case Xb:
      case Yb:
      case Zb:
        a = lf;
        break;

      case $b:
        a = uf;
        break;

      case "scroll":
        a = Ne;
        break;

      case "wheel":
        a = vf;
        break;

      case "copy":
      case "cut":
      case "paste":
        a = mf;
        break;

      case "gotpointercapture":
      case "lostpointercapture":
      case "pointercancel":
      case "pointerdown":
      case "pointermove":
      case "pointerout":
      case "pointerover":
      case "pointerup":
        a = We;
        break;

      default:
        a = G;
    }

    b = a.getPooled(e, b, c, d);
    Xd(b);
    return b;
  }
};
if (pa) throw Error(u(101));
pa = Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));
ra();
var xf = Nc;
la = Qd;
ma = xf;
na = Pd;
xa({
  SimpleEventPlugin: wf,
  EnterLeaveEventPlugin: Ye,
  ChangeEventPlugin: Me,
  SelectEventPlugin: kf,
  BeforeInputEventPlugin: ve
});
var yf = [],
    zf = -1;

function H(a) {
  0 > zf || (a.current = yf[zf], yf[zf] = null, zf--);
}

function I(a, b) {
  zf++;
  yf[zf] = a.current;
  a.current = b;
}

var Af = {},
    J = {
  current: Af
},
    K = {
  current: !1
},
    Bf = Af;

function Cf(a, b) {
  var c = a.type.contextTypes;
  if (!c) return Af;
  var d = a.stateNode;
  if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;
  var e = {},
      f;

  for (f in c) e[f] = b[f];

  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
  return e;
}

function L(a) {
  a = a.childContextTypes;
  return null !== a && void 0 !== a;
}

function Df() {
  H(K);
  H(J);
}

function Ef(a, b, c) {
  if (J.current !== Af) throw Error(u(168));
  I(J, b);
  I(K, c);
}

function Ff(a, b, c) {
  var d = a.stateNode;
  a = b.childContextTypes;
  if ("function" !== typeof d.getChildContext) return c;
  d = d.getChildContext();

  for (var e in d) if (!(e in a)) throw Error(u(108, pb(b) || "Unknown", e));

  return n({}, c, {}, d);
}

function Gf(a) {
  a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Af;
  Bf = J.current;
  I(J, a);
  I(K, K.current);
  return !0;
}

function Hf(a, b, c) {
  var d = a.stateNode;
  if (!d) throw Error(u(169));
  c ? (a = Ff(a, b, Bf), d.__reactInternalMemoizedMergedChildContext = a, H(K), H(J), I(J, a)) : H(K);
  I(K, c);
}

var If = r.unstable_runWithPriority,
    Jf = r.unstable_scheduleCallback,
    Kf = r.unstable_cancelCallback,
    Lf = r.unstable_requestPaint,
    Mf = r.unstable_now,
    Nf = r.unstable_getCurrentPriorityLevel,
    Of = r.unstable_ImmediatePriority,
    Pf = r.unstable_UserBlockingPriority,
    Qf = r.unstable_NormalPriority,
    Rf = r.unstable_LowPriority,
    Sf = r.unstable_IdlePriority,
    Tf = {},
    Uf = r.unstable_shouldYield,
    Vf = void 0 !== Lf ? Lf : function () {},
    Wf = null,
    Xf = null,
    Yf = !1,
    Zf = Mf(),
    $f = 1E4 > Zf ? Mf : function () {
  return Mf() - Zf;
};

function ag() {
  switch (Nf()) {
    case Of:
      return 99;

    case Pf:
      return 98;

    case Qf:
      return 97;

    case Rf:
      return 96;

    case Sf:
      return 95;

    default:
      throw Error(u(332));
  }
}

function bg(a) {
  switch (a) {
    case 99:
      return Of;

    case 98:
      return Pf;

    case 97:
      return Qf;

    case 96:
      return Rf;

    case 95:
      return Sf;

    default:
      throw Error(u(332));
  }
}

function cg(a, b) {
  a = bg(a);
  return If(a, b);
}

function dg(a, b, c) {
  a = bg(a);
  return Jf(a, b, c);
}

function eg(a) {
  null === Wf ? (Wf = [a], Xf = Jf(Of, fg)) : Wf.push(a);
  return Tf;
}

function gg() {
  if (null !== Xf) {
    var a = Xf;
    Xf = null;
    Kf(a);
  }

  fg();
}

function fg() {
  if (!Yf && null !== Wf) {
    Yf = !0;
    var a = 0;

    try {
      var b = Wf;
      cg(99, function () {
        for (; a < b.length; a++) {
          var c = b[a];

          do c = c(!0); while (null !== c);
        }
      });
      Wf = null;
    } catch (c) {
      throw null !== Wf && (Wf = Wf.slice(a + 1)), Jf(Of, gg), c;
    } finally {
      Yf = !1;
    }
  }
}

function hg(a, b, c) {
  c /= 10;
  return 1073741821 - (((1073741821 - a + b / 10) / c | 0) + 1) * c;
}

function ig(a, b) {
  if (a && a.defaultProps) {
    b = n({}, b);
    a = a.defaultProps;

    for (var c in a) void 0 === b[c] && (b[c] = a[c]);
  }

  return b;
}

var jg = {
  current: null
},
    kg = null,
    lg = null,
    mg = null;

function ng() {
  mg = lg = kg = null;
}

function og(a) {
  var b = jg.current;
  H(jg);
  a.type._context._currentValue = b;
}

function pg(a, b) {
  for (; null !== a;) {
    var c = a.alternate;
    if (a.childExpirationTime < b) a.childExpirationTime = b, null !== c && c.childExpirationTime < b && (c.childExpirationTime = b);else if (null !== c && c.childExpirationTime < b) c.childExpirationTime = b;else break;
    a = a.return;
  }
}

function qg(a, b) {
  kg = a;
  mg = lg = null;
  a = a.dependencies;
  null !== a && null !== a.firstContext && (a.expirationTime >= b && (rg = !0), a.firstContext = null);
}

function sg(a, b) {
  if (mg !== a && !1 !== b && 0 !== b) {
    if ("number" !== typeof b || 1073741823 === b) mg = a, b = 1073741823;
    b = {
      context: a,
      observedBits: b,
      next: null
    };

    if (null === lg) {
      if (null === kg) throw Error(u(308));
      lg = b;
      kg.dependencies = {
        expirationTime: 0,
        firstContext: b,
        responders: null
      };
    } else lg = lg.next = b;
  }

  return a._currentValue;
}

var tg = !1;

function ug(a) {
  a.updateQueue = {
    baseState: a.memoizedState,
    baseQueue: null,
    shared: {
      pending: null
    },
    effects: null
  };
}

function vg(a, b) {
  a = a.updateQueue;
  b.updateQueue === a && (b.updateQueue = {
    baseState: a.baseState,
    baseQueue: a.baseQueue,
    shared: a.shared,
    effects: a.effects
  });
}

function wg(a, b) {
  a = {
    expirationTime: a,
    suspenseConfig: b,
    tag: 0,
    payload: null,
    callback: null,
    next: null
  };
  return a.next = a;
}

function xg(a, b) {
  a = a.updateQueue;

  if (null !== a) {
    a = a.shared;
    var c = a.pending;
    null === c ? b.next = b : (b.next = c.next, c.next = b);
    a.pending = b;
  }
}

function yg(a, b) {
  var c = a.alternate;
  null !== c && vg(c, a);
  a = a.updateQueue;
  c = a.baseQueue;
  null === c ? (a.baseQueue = b.next = b, b.next = b) : (b.next = c.next, c.next = b);
}

function zg(a, b, c, d) {
  var e = a.updateQueue;
  tg = !1;
  var f = e.baseQueue,
      g = e.shared.pending;

  if (null !== g) {
    if (null !== f) {
      var h = f.next;
      f.next = g.next;
      g.next = h;
    }

    f = g;
    e.shared.pending = null;
    h = a.alternate;
    null !== h && (h = h.updateQueue, null !== h && (h.baseQueue = g));
  }

  if (null !== f) {
    h = f.next;
    var k = e.baseState,
        l = 0,
        m = null,
        p = null,
        x = null;

    if (null !== h) {
      var z = h;

      do {
        g = z.expirationTime;

        if (g < d) {
          var ca = {
            expirationTime: z.expirationTime,
            suspenseConfig: z.suspenseConfig,
            tag: z.tag,
            payload: z.payload,
            callback: z.callback,
            next: null
          };
          null === x ? (p = x = ca, m = k) : x = x.next = ca;
          g > l && (l = g);
        } else {
          null !== x && (x = x.next = {
            expirationTime: 1073741823,
            suspenseConfig: z.suspenseConfig,
            tag: z.tag,
            payload: z.payload,
            callback: z.callback,
            next: null
          });
          Ag(g, z.suspenseConfig);

          a: {
            var D = a,
                t = z;
            g = b;
            ca = c;

            switch (t.tag) {
              case 1:
                D = t.payload;

                if ("function" === typeof D) {
                  k = D.call(ca, k, g);
                  break a;
                }

                k = D;
                break a;

              case 3:
                D.effectTag = D.effectTag & -4097 | 64;

              case 0:
                D = t.payload;
                g = "function" === typeof D ? D.call(ca, k, g) : D;
                if (null === g || void 0 === g) break a;
                k = n({}, k, g);
                break a;

              case 2:
                tg = !0;
            }
          }

          null !== z.callback && (a.effectTag |= 32, g = e.effects, null === g ? e.effects = [z] : g.push(z));
        }

        z = z.next;
        if (null === z || z === h) if (g = e.shared.pending, null === g) break;else z = f.next = g.next, g.next = h, e.baseQueue = f = g, e.shared.pending = null;
      } while (1);
    }

    null === x ? m = k : x.next = p;
    e.baseState = m;
    e.baseQueue = x;
    Bg(l);
    a.expirationTime = l;
    a.memoizedState = k;
  }
}

function Cg(a, b, c) {
  a = b.effects;
  b.effects = null;
  if (null !== a) for (b = 0; b < a.length; b++) {
    var d = a[b],
        e = d.callback;

    if (null !== e) {
      d.callback = null;
      d = e;
      e = c;
      if ("function" !== typeof d) throw Error(u(191, d));
      d.call(e);
    }
  }
}

var Dg = Wa.ReactCurrentBatchConfig,
    Eg = new aa.Component().refs;

function Fg(a, b, c, d) {
  b = a.memoizedState;
  c = c(d, b);
  c = null === c || void 0 === c ? b : n({}, b, c);
  a.memoizedState = c;
  0 === a.expirationTime && (a.updateQueue.baseState = c);
}

var Jg = {
  isMounted: function (a) {
    return (a = a._reactInternalFiber) ? dc(a) === a : !1;
  },
  enqueueSetState: function (a, b, c) {
    a = a._reactInternalFiber;
    var d = Gg(),
        e = Dg.suspense;
    d = Hg(d, a, e);
    e = wg(d, e);
    e.payload = b;
    void 0 !== c && null !== c && (e.callback = c);
    xg(a, e);
    Ig(a, d);
  },
  enqueueReplaceState: function (a, b, c) {
    a = a._reactInternalFiber;
    var d = Gg(),
        e = Dg.suspense;
    d = Hg(d, a, e);
    e = wg(d, e);
    e.tag = 1;
    e.payload = b;
    void 0 !== c && null !== c && (e.callback = c);
    xg(a, e);
    Ig(a, d);
  },
  enqueueForceUpdate: function (a, b) {
    a = a._reactInternalFiber;
    var c = Gg(),
        d = Dg.suspense;
    c = Hg(c, a, d);
    d = wg(c, d);
    d.tag = 2;
    void 0 !== b && null !== b && (d.callback = b);
    xg(a, d);
    Ig(a, c);
  }
};

function Kg(a, b, c, d, e, f, g) {
  a = a.stateNode;
  return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !bf(c, d) || !bf(e, f) : !0;
}

function Lg(a, b, c) {
  var d = !1,
      e = Af;
  var f = b.contextType;
  "object" === typeof f && null !== f ? f = sg(f) : (e = L(b) ? Bf : J.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Cf(a, e) : Af);
  b = new b(c, f);
  a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
  b.updater = Jg;
  a.stateNode = b;
  b._reactInternalFiber = a;
  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
  return b;
}

function Mg(a, b, c, d) {
  a = b.state;
  "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
  "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
  b.state !== a && Jg.enqueueReplaceState(b, b.state, null);
}

function Ng(a, b, c, d) {
  var e = a.stateNode;
  e.props = c;
  e.state = a.memoizedState;
  e.refs = Eg;
  ug(a);
  var f = b.contextType;
  "object" === typeof f && null !== f ? e.context = sg(f) : (f = L(b) ? Bf : J.current, e.context = Cf(a, f));
  zg(a, c, e, d);
  e.state = a.memoizedState;
  f = b.getDerivedStateFromProps;
  "function" === typeof f && (Fg(a, b, f, c), e.state = a.memoizedState);
  "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && Jg.enqueueReplaceState(e, e.state, null), zg(a, c, e, d), e.state = a.memoizedState);
  "function" === typeof e.componentDidMount && (a.effectTag |= 4);
}

var Og = Array.isArray;

function Pg(a, b, c) {
  a = c.ref;

  if (null !== a && "function" !== typeof a && "object" !== typeof a) {
    if (c._owner) {
      c = c._owner;

      if (c) {
        if (1 !== c.tag) throw Error(u(309));
        var d = c.stateNode;
      }

      if (!d) throw Error(u(147, a));
      var e = "" + a;
      if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === e) return b.ref;

      b = function (a) {
        var b = d.refs;
        b === Eg && (b = d.refs = {});
        null === a ? delete b[e] : b[e] = a;
      };

      b._stringRef = e;
      return b;
    }

    if ("string" !== typeof a) throw Error(u(284));
    if (!c._owner) throw Error(u(290, a));
  }

  return a;
}

function Qg(a, b) {
  if ("textarea" !== a.type) throw Error(u(31, "[object Object]" === Object.prototype.toString.call(b) ? "object with keys {" + Object.keys(b).join(", ") + "}" : b, ""));
}

function Rg(a) {
  function b(b, c) {
    if (a) {
      var d = b.lastEffect;
      null !== d ? (d.nextEffect = c, b.lastEffect = c) : b.firstEffect = b.lastEffect = c;
      c.nextEffect = null;
      c.effectTag = 8;
    }
  }

  function c(c, d) {
    if (!a) return null;

    for (; null !== d;) b(c, d), d = d.sibling;

    return null;
  }

  function d(a, b) {
    for (a = new Map(); null !== b;) null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;

    return a;
  }

  function e(a, b) {
    a = Sg(a, b);
    a.index = 0;
    a.sibling = null;
    return a;
  }

  function f(b, c, d) {
    b.index = d;
    if (!a) return c;
    d = b.alternate;
    if (null !== d) return d = d.index, d < c ? (b.effectTag = 2, c) : d;
    b.effectTag = 2;
    return c;
  }

  function g(b) {
    a && null === b.alternate && (b.effectTag = 2);
    return b;
  }

  function h(a, b, c, d) {
    if (null === b || 6 !== b.tag) return b = Tg(c, a.mode, d), b.return = a, b;
    b = e(b, c);
    b.return = a;
    return b;
  }

  function k(a, b, c, d) {
    if (null !== b && b.elementType === c.type) return d = e(b, c.props), d.ref = Pg(a, b, c), d.return = a, d;
    d = Ug(c.type, c.key, c.props, null, a.mode, d);
    d.ref = Pg(a, b, c);
    d.return = a;
    return d;
  }

  function l(a, b, c, d) {
    if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = Vg(c, a.mode, d), b.return = a, b;
    b = e(b, c.children || []);
    b.return = a;
    return b;
  }

  function m(a, b, c, d, f) {
    if (null === b || 7 !== b.tag) return b = Wg(c, a.mode, d, f), b.return = a, b;
    b = e(b, c);
    b.return = a;
    return b;
  }

  function p(a, b, c) {
    if ("string" === typeof b || "number" === typeof b) return b = Tg("" + b, a.mode, c), b.return = a, b;

    if ("object" === typeof b && null !== b) {
      switch (b.$$typeof) {
        case Za:
          return c = Ug(b.type, b.key, b.props, null, a.mode, c), c.ref = Pg(a, null, b), c.return = a, c;

        case $a:
          return b = Vg(b, a.mode, c), b.return = a, b;
      }

      if (Og(b) || nb(b)) return b = Wg(b, a.mode, c, null), b.return = a, b;
      Qg(a, b);
    }

    return null;
  }

  function x(a, b, c, d) {
    var e = null !== b ? b.key : null;
    if ("string" === typeof c || "number" === typeof c) return null !== e ? null : h(a, b, "" + c, d);

    if ("object" === typeof c && null !== c) {
      switch (c.$$typeof) {
        case Za:
          return c.key === e ? c.type === ab ? m(a, b, c.props.children, d, e) : k(a, b, c, d) : null;

        case $a:
          return c.key === e ? l(a, b, c, d) : null;
      }

      if (Og(c) || nb(c)) return null !== e ? null : m(a, b, c, d, null);
      Qg(a, c);
    }

    return null;
  }

  function z(a, b, c, d, e) {
    if ("string" === typeof d || "number" === typeof d) return a = a.get(c) || null, h(b, a, "" + d, e);

    if ("object" === typeof d && null !== d) {
      switch (d.$$typeof) {
        case Za:
          return a = a.get(null === d.key ? c : d.key) || null, d.type === ab ? m(b, a, d.props.children, e, d.key) : k(b, a, d, e);

        case $a:
          return a = a.get(null === d.key ? c : d.key) || null, l(b, a, d, e);
      }

      if (Og(d) || nb(d)) return a = a.get(c) || null, m(b, a, d, e, null);
      Qg(b, d);
    }

    return null;
  }

  function ca(e, g, h, k) {
    for (var l = null, t = null, m = g, y = g = 0, A = null; null !== m && y < h.length; y++) {
      m.index > y ? (A = m, m = null) : A = m.sibling;
      var q = x(e, m, h[y], k);

      if (null === q) {
        null === m && (m = A);
        break;
      }

      a && m && null === q.alternate && b(e, m);
      g = f(q, g, y);
      null === t ? l = q : t.sibling = q;
      t = q;
      m = A;
    }

    if (y === h.length) return c(e, m), l;

    if (null === m) {
      for (; y < h.length; y++) m = p(e, h[y], k), null !== m && (g = f(m, g, y), null === t ? l = m : t.sibling = m, t = m);

      return l;
    }

    for (m = d(e, m); y < h.length; y++) A = z(m, e, y, h[y], k), null !== A && (a && null !== A.alternate && m.delete(null === A.key ? y : A.key), g = f(A, g, y), null === t ? l = A : t.sibling = A, t = A);

    a && m.forEach(function (a) {
      return b(e, a);
    });
    return l;
  }

  function D(e, g, h, l) {
    var k = nb(h);
    if ("function" !== typeof k) throw Error(u(150));
    h = k.call(h);
    if (null == h) throw Error(u(151));

    for (var m = k = null, t = g, y = g = 0, A = null, q = h.next(); null !== t && !q.done; y++, q = h.next()) {
      t.index > y ? (A = t, t = null) : A = t.sibling;
      var D = x(e, t, q.value, l);

      if (null === D) {
        null === t && (t = A);
        break;
      }

      a && t && null === D.alternate && b(e, t);
      g = f(D, g, y);
      null === m ? k = D : m.sibling = D;
      m = D;
      t = A;
    }

    if (q.done) return c(e, t), k;

    if (null === t) {
      for (; !q.done; y++, q = h.next()) q = p(e, q.value, l), null !== q && (g = f(q, g, y), null === m ? k = q : m.sibling = q, m = q);

      return k;
    }

    for (t = d(e, t); !q.done; y++, q = h.next()) q = z(t, e, y, q.value, l), null !== q && (a && null !== q.alternate && t.delete(null === q.key ? y : q.key), g = f(q, g, y), null === m ? k = q : m.sibling = q, m = q);

    a && t.forEach(function (a) {
      return b(e, a);
    });
    return k;
  }

  return function (a, d, f, h) {
    var k = "object" === typeof f && null !== f && f.type === ab && null === f.key;
    k && (f = f.props.children);
    var l = "object" === typeof f && null !== f;
    if (l) switch (f.$$typeof) {
      case Za:
        a: {
          l = f.key;

          for (k = d; null !== k;) {
            if (k.key === l) {
              switch (k.tag) {
                case 7:
                  if (f.type === ab) {
                    c(a, k.sibling);
                    d = e(k, f.props.children);
                    d.return = a;
                    a = d;
                    break a;
                  }

                  break;

                default:
                  if (k.elementType === f.type) {
                    c(a, k.sibling);
                    d = e(k, f.props);
                    d.ref = Pg(a, k, f);
                    d.return = a;
                    a = d;
                    break a;
                  }

              }

              c(a, k);
              break;
            } else b(a, k);

            k = k.sibling;
          }

          f.type === ab ? (d = Wg(f.props.children, a.mode, h, f.key), d.return = a, a = d) : (h = Ug(f.type, f.key, f.props, null, a.mode, h), h.ref = Pg(a, d, f), h.return = a, a = h);
        }

        return g(a);

      case $a:
        a: {
          for (k = f.key; null !== d;) {
            if (d.key === k) {
              if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {
                c(a, d.sibling);
                d = e(d, f.children || []);
                d.return = a;
                a = d;
                break a;
              } else {
                c(a, d);
                break;
              }
            } else b(a, d);
            d = d.sibling;
          }

          d = Vg(f, a.mode, h);
          d.return = a;
          a = d;
        }

        return g(a);
    }
    if ("string" === typeof f || "number" === typeof f) return f = "" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f), d.return = a, a = d) : (c(a, d), d = Tg(f, a.mode, h), d.return = a, a = d), g(a);
    if (Og(f)) return ca(a, d, f, h);
    if (nb(f)) return D(a, d, f, h);
    l && Qg(a, f);
    if ("undefined" === typeof f && !k) switch (a.tag) {
      case 1:
      case 0:
        throw a = a.type, Error(u(152, a.displayName || a.name || "Component"));
    }
    return c(a, d);
  };
}

var Xg = Rg(!0),
    Yg = Rg(!1),
    Zg = {},
    $g = {
  current: Zg
},
    ah = {
  current: Zg
},
    bh = {
  current: Zg
};

function ch(a) {
  if (a === Zg) throw Error(u(174));
  return a;
}

function dh(a, b) {
  I(bh, b);
  I(ah, a);
  I($g, Zg);
  a = b.nodeType;

  switch (a) {
    case 9:
    case 11:
      b = (b = b.documentElement) ? b.namespaceURI : Ob(null, "");
      break;

    default:
      a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = Ob(b, a);
  }

  H($g);
  I($g, b);
}

function eh() {
  H($g);
  H(ah);
  H(bh);
}

function fh(a) {
  ch(bh.current);
  var b = ch($g.current);
  var c = Ob(b, a.type);
  b !== c && (I(ah, a), I($g, c));
}

function gh(a) {
  ah.current === a && (H($g), H(ah));
}

var M = {
  current: 0
};

function hh(a) {
  for (var b = a; null !== b;) {
    if (13 === b.tag) {
      var c = b.memoizedState;
      if (null !== c && (c = c.dehydrated, null === c || c.data === Bd || c.data === Cd)) return b;
    } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
      if (0 !== (b.effectTag & 64)) return b;
    } else if (null !== b.child) {
      b.child.return = b;
      b = b.child;
      continue;
    }

    if (b === a) break;

    for (; null === b.sibling;) {
      if (null === b.return || b.return === a) return null;
      b = b.return;
    }

    b.sibling.return = b.return;
    b = b.sibling;
  }

  return null;
}

function ih(a, b) {
  return {
    responder: a,
    props: b
  };
}

var jh = Wa.ReactCurrentDispatcher,
    kh = Wa.ReactCurrentBatchConfig,
    lh = 0,
    N = null,
    O = null,
    P = null,
    mh = !1;

function Q() {
  throw Error(u(321));
}

function nh(a, b) {
  if (null === b) return !1;

  for (var c = 0; c < b.length && c < a.length; c++) if (!$e(a[c], b[c])) return !1;

  return !0;
}

function oh(a, b, c, d, e, f) {
  lh = f;
  N = b;
  b.memoizedState = null;
  b.updateQueue = null;
  b.expirationTime = 0;
  jh.current = null === a || null === a.memoizedState ? ph : qh;
  a = c(d, e);

  if (b.expirationTime === lh) {
    f = 0;

    do {
      b.expirationTime = 0;
      if (!(25 > f)) throw Error(u(301));
      f += 1;
      P = O = null;
      b.updateQueue = null;
      jh.current = rh;
      a = c(d, e);
    } while (b.expirationTime === lh);
  }

  jh.current = sh;
  b = null !== O && null !== O.next;
  lh = 0;
  P = O = N = null;
  mh = !1;
  if (b) throw Error(u(300));
  return a;
}

function th() {
  var a = {
    memoizedState: null,
    baseState: null,
    baseQueue: null,
    queue: null,
    next: null
  };
  null === P ? N.memoizedState = P = a : P = P.next = a;
  return P;
}

function uh() {
  if (null === O) {
    var a = N.alternate;
    a = null !== a ? a.memoizedState : null;
  } else a = O.next;

  var b = null === P ? N.memoizedState : P.next;
  if (null !== b) P = b, O = a;else {
    if (null === a) throw Error(u(310));
    O = a;
    a = {
      memoizedState: O.memoizedState,
      baseState: O.baseState,
      baseQueue: O.baseQueue,
      queue: O.queue,
      next: null
    };
    null === P ? N.memoizedState = P = a : P = P.next = a;
  }
  return P;
}

function vh(a, b) {
  return "function" === typeof b ? b(a) : b;
}

function wh(a) {
  var b = uh(),
      c = b.queue;
  if (null === c) throw Error(u(311));
  c.lastRenderedReducer = a;
  var d = O,
      e = d.baseQueue,
      f = c.pending;

  if (null !== f) {
    if (null !== e) {
      var g = e.next;
      e.next = f.next;
      f.next = g;
    }

    d.baseQueue = e = f;
    c.pending = null;
  }

  if (null !== e) {
    e = e.next;
    d = d.baseState;
    var h = g = f = null,
        k = e;

    do {
      var l = k.expirationTime;

      if (l < lh) {
        var m = {
          expirationTime: k.expirationTime,
          suspenseConfig: k.suspenseConfig,
          action: k.action,
          eagerReducer: k.eagerReducer,
          eagerState: k.eagerState,
          next: null
        };
        null === h ? (g = h = m, f = d) : h = h.next = m;
        l > N.expirationTime && (N.expirationTime = l, Bg(l));
      } else null !== h && (h = h.next = {
        expirationTime: 1073741823,
        suspenseConfig: k.suspenseConfig,
        action: k.action,
        eagerReducer: k.eagerReducer,
        eagerState: k.eagerState,
        next: null
      }), Ag(l, k.suspenseConfig), d = k.eagerReducer === a ? k.eagerState : a(d, k.action);

      k = k.next;
    } while (null !== k && k !== e);

    null === h ? f = d : h.next = g;
    $e(d, b.memoizedState) || (rg = !0);
    b.memoizedState = d;
    b.baseState = f;
    b.baseQueue = h;
    c.lastRenderedState = d;
  }

  return [b.memoizedState, c.dispatch];
}

function xh(a) {
  var b = uh(),
      c = b.queue;
  if (null === c) throw Error(u(311));
  c.lastRenderedReducer = a;
  var d = c.dispatch,
      e = c.pending,
      f = b.memoizedState;

  if (null !== e) {
    c.pending = null;
    var g = e = e.next;

    do f = a(f, g.action), g = g.next; while (g !== e);

    $e(f, b.memoizedState) || (rg = !0);
    b.memoizedState = f;
    null === b.baseQueue && (b.baseState = f);
    c.lastRenderedState = f;
  }

  return [f, d];
}

function yh(a) {
  var b = th();
  "function" === typeof a && (a = a());
  b.memoizedState = b.baseState = a;
  a = b.queue = {
    pending: null,
    dispatch: null,
    lastRenderedReducer: vh,
    lastRenderedState: a
  };
  a = a.dispatch = zh.bind(null, N, a);
  return [b.memoizedState, a];
}

function Ah(a, b, c, d) {
  a = {
    tag: a,
    create: b,
    destroy: c,
    deps: d,
    next: null
  };
  b = N.updateQueue;
  null === b ? (b = {
    lastEffect: null
  }, N.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));
  return a;
}

function Bh() {
  return uh().memoizedState;
}

function Ch(a, b, c, d) {
  var e = th();
  N.effectTag |= a;
  e.memoizedState = Ah(1 | b, c, void 0, void 0 === d ? null : d);
}

function Dh(a, b, c, d) {
  var e = uh();
  d = void 0 === d ? null : d;
  var f = void 0;

  if (null !== O) {
    var g = O.memoizedState;
    f = g.destroy;

    if (null !== d && nh(d, g.deps)) {
      Ah(b, c, f, d);
      return;
    }
  }

  N.effectTag |= a;
  e.memoizedState = Ah(1 | b, c, f, d);
}

function Eh(a, b) {
  return Ch(516, 4, a, b);
}

function Fh(a, b) {
  return Dh(516, 4, a, b);
}

function Gh(a, b) {
  return Dh(4, 2, a, b);
}

function Hh(a, b) {
  if ("function" === typeof b) return a = a(), b(a), function () {
    b(null);
  };
  if (null !== b && void 0 !== b) return a = a(), b.current = a, function () {
    b.current = null;
  };
}

function Ih(a, b, c) {
  c = null !== c && void 0 !== c ? c.concat([a]) : null;
  return Dh(4, 2, Hh.bind(null, b, a), c);
}

function Jh() {}

function Kh(a, b) {
  th().memoizedState = [a, void 0 === b ? null : b];
  return a;
}

function Lh(a, b) {
  var c = uh();
  b = void 0 === b ? null : b;
  var d = c.memoizedState;
  if (null !== d && null !== b && nh(b, d[1])) return d[0];
  c.memoizedState = [a, b];
  return a;
}

function Mh(a, b) {
  var c = uh();
  b = void 0 === b ? null : b;
  var d = c.memoizedState;
  if (null !== d && null !== b && nh(b, d[1])) return d[0];
  a = a();
  c.memoizedState = [a, b];
  return a;
}

function Nh(a, b, c) {
  var d = ag();
  cg(98 > d ? 98 : d, function () {
    a(!0);
  });
  cg(97 < d ? 97 : d, function () {
    var d = kh.suspense;
    kh.suspense = void 0 === b ? null : b;

    try {
      a(!1), c();
    } finally {
      kh.suspense = d;
    }
  });
}

function zh(a, b, c) {
  var d = Gg(),
      e = Dg.suspense;
  d = Hg(d, a, e);
  e = {
    expirationTime: d,
    suspenseConfig: e,
    action: c,
    eagerReducer: null,
    eagerState: null,
    next: null
  };
  var f = b.pending;
  null === f ? e.next = e : (e.next = f.next, f.next = e);
  b.pending = e;
  f = a.alternate;
  if (a === N || null !== f && f === N) mh = !0, e.expirationTime = lh, N.expirationTime = lh;else {
    if (0 === a.expirationTime && (null === f || 0 === f.expirationTime) && (f = b.lastRenderedReducer, null !== f)) try {
      var g = b.lastRenderedState,
          h = f(g, c);
      e.eagerReducer = f;
      e.eagerState = h;
      if ($e(h, g)) return;
    } catch (k) {} finally {}
    Ig(a, d);
  }
}

var sh = {
  readContext: sg,
  useCallback: Q,
  useContext: Q,
  useEffect: Q,
  useImperativeHandle: Q,
  useLayoutEffect: Q,
  useMemo: Q,
  useReducer: Q,
  useRef: Q,
  useState: Q,
  useDebugValue: Q,
  useResponder: Q,
  useDeferredValue: Q,
  useTransition: Q
},
    ph = {
  readContext: sg,
  useCallback: Kh,
  useContext: sg,
  useEffect: Eh,
  useImperativeHandle: function (a, b, c) {
    c = null !== c && void 0 !== c ? c.concat([a]) : null;
    return Ch(4, 2, Hh.bind(null, b, a), c);
  },
  useLayoutEffect: function (a, b) {
    return Ch(4, 2, a, b);
  },
  useMemo: function (a, b) {
    var c = th();
    b = void 0 === b ? null : b;
    a = a();
    c.memoizedState = [a, b];
    return a;
  },
  useReducer: function (a, b, c) {
    var d = th();
    b = void 0 !== c ? c(b) : b;
    d.memoizedState = d.baseState = b;
    a = d.queue = {
      pending: null,
      dispatch: null,
      lastRenderedReducer: a,
      lastRenderedState: b
    };
    a = a.dispatch = zh.bind(null, N, a);
    return [d.memoizedState, a];
  },
  useRef: function (a) {
    var b = th();
    a = {
      current: a
    };
    return b.memoizedState = a;
  },
  useState: yh,
  useDebugValue: Jh,
  useResponder: ih,
  useDeferredValue: function (a, b) {
    var c = yh(a),
        d = c[0],
        e = c[1];
    Eh(function () {
      var c = kh.suspense;
      kh.suspense = void 0 === b ? null : b;

      try {
        e(a);
      } finally {
        kh.suspense = c;
      }
    }, [a, b]);
    return d;
  },
  useTransition: function (a) {
    var b = yh(!1),
        c = b[0];
    b = b[1];
    return [Kh(Nh.bind(null, b, a), [b, a]), c];
  }
},
    qh = {
  readContext: sg,
  useCallback: Lh,
  useContext: sg,
  useEffect: Fh,
  useImperativeHandle: Ih,
  useLayoutEffect: Gh,
  useMemo: Mh,
  useReducer: wh,
  useRef: Bh,
  useState: function () {
    return wh(vh);
  },
  useDebugValue: Jh,
  useResponder: ih,
  useDeferredValue: function (a, b) {
    var c = wh(vh),
        d = c[0],
        e = c[1];
    Fh(function () {
      var c = kh.suspense;
      kh.suspense = void 0 === b ? null : b;

      try {
        e(a);
      } finally {
        kh.suspense = c;
      }
    }, [a, b]);
    return d;
  },
  useTransition: function (a) {
    var b = wh(vh),
        c = b[0];
    b = b[1];
    return [Lh(Nh.bind(null, b, a), [b, a]), c];
  }
},
    rh = {
  readContext: sg,
  useCallback: Lh,
  useContext: sg,
  useEffect: Fh,
  useImperativeHandle: Ih,
  useLayoutEffect: Gh,
  useMemo: Mh,
  useReducer: xh,
  useRef: Bh,
  useState: function () {
    return xh(vh);
  },
  useDebugValue: Jh,
  useResponder: ih,
  useDeferredValue: function (a, b) {
    var c = xh(vh),
        d = c[0],
        e = c[1];
    Fh(function () {
      var c = kh.suspense;
      kh.suspense = void 0 === b ? null : b;

      try {
        e(a);
      } finally {
        kh.suspense = c;
      }
    }, [a, b]);
    return d;
  },
  useTransition: function (a) {
    var b = xh(vh),
        c = b[0];
    b = b[1];
    return [Lh(Nh.bind(null, b, a), [b, a]), c];
  }
},
    Oh = null,
    Ph = null,
    Qh = !1;

function Rh(a, b) {
  var c = Sh(5, null, null, 0);
  c.elementType = "DELETED";
  c.type = "DELETED";
  c.stateNode = b;
  c.return = a;
  c.effectTag = 8;
  null !== a.lastEffect ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;
}

function Th(a, b) {
  switch (a.tag) {
    case 5:
      var c = a.type;
      b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
      return null !== b ? (a.stateNode = b, !0) : !1;

    case 6:
      return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, !0) : !1;

    case 13:
      return !1;

    default:
      return !1;
  }
}

function Uh(a) {
  if (Qh) {
    var b = Ph;

    if (b) {
      var c = b;

      if (!Th(a, b)) {
        b = Jd(c.nextSibling);

        if (!b || !Th(a, b)) {
          a.effectTag = a.effectTag & -1025 | 2;
          Qh = !1;
          Oh = a;
          return;
        }

        Rh(Oh, c);
      }

      Oh = a;
      Ph = Jd(b.firstChild);
    } else a.effectTag = a.effectTag & -1025 | 2, Qh = !1, Oh = a;
  }
}

function Vh(a) {
  for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag;) a = a.return;

  Oh = a;
}

function Wh(a) {
  if (a !== Oh) return !1;
  if (!Qh) return Vh(a), Qh = !0, !1;
  var b = a.type;
  if (5 !== a.tag || "head" !== b && "body" !== b && !Gd(b, a.memoizedProps)) for (b = Ph; b;) Rh(a, b), b = Jd(b.nextSibling);
  Vh(a);

  if (13 === a.tag) {
    a = a.memoizedState;
    a = null !== a ? a.dehydrated : null;
    if (!a) throw Error(u(317));

    a: {
      a = a.nextSibling;

      for (b = 0; a;) {
        if (8 === a.nodeType) {
          var c = a.data;

          if (c === Ad) {
            if (0 === b) {
              Ph = Jd(a.nextSibling);
              break a;
            }

            b--;
          } else c !== zd && c !== Cd && c !== Bd || b++;
        }

        a = a.nextSibling;
      }

      Ph = null;
    }
  } else Ph = Oh ? Jd(a.stateNode.nextSibling) : null;

  return !0;
}

function Xh() {
  Ph = Oh = null;
  Qh = !1;
}

var Yh = Wa.ReactCurrentOwner,
    rg = !1;

function R(a, b, c, d) {
  b.child = null === a ? Yg(b, null, c, d) : Xg(b, a.child, c, d);
}

function Zh(a, b, c, d, e) {
  c = c.render;
  var f = b.ref;
  qg(b, e);
  d = oh(a, b, c, d, f, e);
  if (null !== a && !rg) return b.updateQueue = a.updateQueue, b.effectTag &= -517, a.expirationTime <= e && (a.expirationTime = 0), $h(a, b, e);
  b.effectTag |= 1;
  R(a, b, d, e);
  return b.child;
}

function ai(a, b, c, d, e, f) {
  if (null === a) {
    var g = c.type;
    if ("function" === typeof g && !bi(g) && void 0 === g.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = g, ci(a, b, g, d, e, f);
    a = Ug(c.type, null, d, null, b.mode, f);
    a.ref = b.ref;
    a.return = b;
    return b.child = a;
  }

  g = a.child;
  if (e < f && (e = g.memoizedProps, c = c.compare, c = null !== c ? c : bf, c(e, d) && a.ref === b.ref)) return $h(a, b, f);
  b.effectTag |= 1;
  a = Sg(g, d);
  a.ref = b.ref;
  a.return = b;
  return b.child = a;
}

function ci(a, b, c, d, e, f) {
  return null !== a && bf(a.memoizedProps, d) && a.ref === b.ref && (rg = !1, e < f) ? (b.expirationTime = a.expirationTime, $h(a, b, f)) : di(a, b, c, d, f);
}

function ei(a, b) {
  var c = b.ref;
  if (null === a && null !== c || null !== a && a.ref !== c) b.effectTag |= 128;
}

function di(a, b, c, d, e) {
  var f = L(c) ? Bf : J.current;
  f = Cf(b, f);
  qg(b, e);
  c = oh(a, b, c, d, f, e);
  if (null !== a && !rg) return b.updateQueue = a.updateQueue, b.effectTag &= -517, a.expirationTime <= e && (a.expirationTime = 0), $h(a, b, e);
  b.effectTag |= 1;
  R(a, b, c, e);
  return b.child;
}

function fi(a, b, c, d, e) {
  if (L(c)) {
    var f = !0;
    Gf(b);
  } else f = !1;

  qg(b, e);
  if (null === b.stateNode) null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2), Lg(b, c, d), Ng(b, c, d, e), d = !0;else if (null === a) {
    var g = b.stateNode,
        h = b.memoizedProps;
    g.props = h;
    var k = g.context,
        l = c.contextType;
    "object" === typeof l && null !== l ? l = sg(l) : (l = L(c) ? Bf : J.current, l = Cf(b, l));
    var m = c.getDerivedStateFromProps,
        p = "function" === typeof m || "function" === typeof g.getSnapshotBeforeUpdate;
    p || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Mg(b, g, d, l);
    tg = !1;
    var x = b.memoizedState;
    g.state = x;
    zg(b, d, g, e);
    k = b.memoizedState;
    h !== d || x !== k || K.current || tg ? ("function" === typeof m && (Fg(b, c, m, d), k = b.memoizedState), (h = tg || Kg(b, c, h, d, x, k, l)) ? (p || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.effectTag |= 4)) : ("function" === typeof g.componentDidMount && (b.effectTag |= 4), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.effectTag |= 4), d = !1);
  } else g = b.stateNode, vg(a, b), h = b.memoizedProps, g.props = b.type === b.elementType ? h : ig(b.type, h), k = g.context, l = c.contextType, "object" === typeof l && null !== l ? l = sg(l) : (l = L(c) ? Bf : J.current, l = Cf(b, l)), m = c.getDerivedStateFromProps, (p = "function" === typeof m || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Mg(b, g, d, l), tg = !1, k = b.memoizedState, g.state = k, zg(b, d, g, e), x = b.memoizedState, h !== d || k !== x || K.current || tg ? ("function" === typeof m && (Fg(b, c, m, d), x = b.memoizedState), (m = tg || Kg(b, c, h, d, k, x, l)) ? (p || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, x, l), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, x, l)), "function" === typeof g.componentDidUpdate && (b.effectTag |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.effectTag |= 256)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && k === a.memoizedState || (b.effectTag |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && k === a.memoizedState || (b.effectTag |= 256), b.memoizedProps = d, b.memoizedState = x), g.props = d, g.state = x, g.context = l, d = m) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && k === a.memoizedState || (b.effectTag |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && k === a.memoizedState || (b.effectTag |= 256), d = !1);
  return gi(a, b, c, d, f, e);
}

function gi(a, b, c, d, e, f) {
  ei(a, b);
  var g = 0 !== (b.effectTag & 64);
  if (!d && !g) return e && Hf(b, c, !1), $h(a, b, f);
  d = b.stateNode;
  Yh.current = b;
  var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
  b.effectTag |= 1;
  null !== a && g ? (b.child = Xg(b, a.child, null, f), b.child = Xg(b, null, h, f)) : R(a, b, h, f);
  b.memoizedState = d.state;
  e && Hf(b, c, !0);
  return b.child;
}

function hi(a) {
  var b = a.stateNode;
  b.pendingContext ? Ef(a, b.pendingContext, b.pendingContext !== b.context) : b.context && Ef(a, b.context, !1);
  dh(a, b.containerInfo);
}

var ii = {
  dehydrated: null,
  retryTime: 0
};

function ji(a, b, c) {
  var d = b.mode,
      e = b.pendingProps,
      f = M.current,
      g = !1,
      h;
  (h = 0 !== (b.effectTag & 64)) || (h = 0 !== (f & 2) && (null === a || null !== a.memoizedState));
  h ? (g = !0, b.effectTag &= -65) : null !== a && null === a.memoizedState || void 0 === e.fallback || !0 === e.unstable_avoidThisFallback || (f |= 1);
  I(M, f & 1);

  if (null === a) {
    void 0 !== e.fallback && Uh(b);

    if (g) {
      g = e.fallback;
      e = Wg(null, d, 0, null);
      e.return = b;
      if (0 === (b.mode & 2)) for (a = null !== b.memoizedState ? b.child.child : b.child, e.child = a; null !== a;) a.return = e, a = a.sibling;
      c = Wg(g, d, c, null);
      c.return = b;
      e.sibling = c;
      b.memoizedState = ii;
      b.child = e;
      return c;
    }

    d = e.children;
    b.memoizedState = null;
    return b.child = Yg(b, null, d, c);
  }

  if (null !== a.memoizedState) {
    a = a.child;
    d = a.sibling;

    if (g) {
      e = e.fallback;
      c = Sg(a, a.pendingProps);
      c.return = b;
      if (0 === (b.mode & 2) && (g = null !== b.memoizedState ? b.child.child : b.child, g !== a.child)) for (c.child = g; null !== g;) g.return = c, g = g.sibling;
      d = Sg(d, e);
      d.return = b;
      c.sibling = d;
      c.childExpirationTime = 0;
      b.memoizedState = ii;
      b.child = c;
      return d;
    }

    c = Xg(b, a.child, e.children, c);
    b.memoizedState = null;
    return b.child = c;
  }

  a = a.child;

  if (g) {
    g = e.fallback;
    e = Wg(null, d, 0, null);
    e.return = b;
    e.child = a;
    null !== a && (a.return = e);
    if (0 === (b.mode & 2)) for (a = null !== b.memoizedState ? b.child.child : b.child, e.child = a; null !== a;) a.return = e, a = a.sibling;
    c = Wg(g, d, c, null);
    c.return = b;
    e.sibling = c;
    c.effectTag |= 2;
    e.childExpirationTime = 0;
    b.memoizedState = ii;
    b.child = e;
    return c;
  }

  b.memoizedState = null;
  return b.child = Xg(b, a, e.children, c);
}

function ki(a, b) {
  a.expirationTime < b && (a.expirationTime = b);
  var c = a.alternate;
  null !== c && c.expirationTime < b && (c.expirationTime = b);
  pg(a.return, b);
}

function li(a, b, c, d, e, f) {
  var g = a.memoizedState;
  null === g ? a.memoizedState = {
    isBackwards: b,
    rendering: null,
    renderingStartTime: 0,
    last: d,
    tail: c,
    tailExpiration: 0,
    tailMode: e,
    lastEffect: f
  } : (g.isBackwards = b, g.rendering = null, g.renderingStartTime = 0, g.last = d, g.tail = c, g.tailExpiration = 0, g.tailMode = e, g.lastEffect = f);
}

function mi(a, b, c) {
  var d = b.pendingProps,
      e = d.revealOrder,
      f = d.tail;
  R(a, b, d.children, c);
  d = M.current;
  if (0 !== (d & 2)) d = d & 1 | 2, b.effectTag |= 64;else {
    if (null !== a && 0 !== (a.effectTag & 64)) a: for (a = b.child; null !== a;) {
      if (13 === a.tag) null !== a.memoizedState && ki(a, c);else if (19 === a.tag) ki(a, c);else if (null !== a.child) {
        a.child.return = a;
        a = a.child;
        continue;
      }
      if (a === b) break a;

      for (; null === a.sibling;) {
        if (null === a.return || a.return === b) break a;
        a = a.return;
      }

      a.sibling.return = a.return;
      a = a.sibling;
    }
    d &= 1;
  }
  I(M, d);
  if (0 === (b.mode & 2)) b.memoizedState = null;else switch (e) {
    case "forwards":
      c = b.child;

      for (e = null; null !== c;) a = c.alternate, null !== a && null === hh(a) && (e = c), c = c.sibling;

      c = e;
      null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
      li(b, !1, e, c, f, b.lastEffect);
      break;

    case "backwards":
      c = null;
      e = b.child;

      for (b.child = null; null !== e;) {
        a = e.alternate;

        if (null !== a && null === hh(a)) {
          b.child = e;
          break;
        }

        a = e.sibling;
        e.sibling = c;
        c = e;
        e = a;
      }

      li(b, !0, c, null, f, b.lastEffect);
      break;

    case "together":
      li(b, !1, null, null, void 0, b.lastEffect);
      break;

    default:
      b.memoizedState = null;
  }
  return b.child;
}

function $h(a, b, c) {
  null !== a && (b.dependencies = a.dependencies);
  var d = b.expirationTime;
  0 !== d && Bg(d);
  if (b.childExpirationTime < c) return null;
  if (null !== a && b.child !== a.child) throw Error(u(153));

  if (null !== b.child) {
    a = b.child;
    c = Sg(a, a.pendingProps);
    b.child = c;

    for (c.return = b; null !== a.sibling;) a = a.sibling, c = c.sibling = Sg(a, a.pendingProps), c.return = b;

    c.sibling = null;
  }

  return b.child;
}

var ni, oi, pi, qi;

ni = function (a, b) {
  for (var c = b.child; null !== c;) {
    if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);else if (4 !== c.tag && null !== c.child) {
      c.child.return = c;
      c = c.child;
      continue;
    }
    if (c === b) break;

    for (; null === c.sibling;) {
      if (null === c.return || c.return === b) return;
      c = c.return;
    }

    c.sibling.return = c.return;
    c = c.sibling;
  }
};

oi = function () {};

pi = function (a, b, c, d, e) {
  var f = a.memoizedProps;

  if (f !== d) {
    var g = b.stateNode;
    ch($g.current);
    a = null;

    switch (c) {
      case "input":
        f = zb(g, f);
        d = zb(g, d);
        a = [];
        break;

      case "option":
        f = Gb(g, f);
        d = Gb(g, d);
        a = [];
        break;

      case "select":
        f = n({}, f, {
          value: void 0
        });
        d = n({}, d, {
          value: void 0
        });
        a = [];
        break;

      case "textarea":
        f = Ib(g, f);
        d = Ib(g, d);
        a = [];
        break;

      default:
        "function" !== typeof f.onClick && "function" === typeof d.onClick && (g.onclick = sd);
    }

    od(c, d);
    var h, k;
    c = null;

    for (h in f) if (!d.hasOwnProperty(h) && f.hasOwnProperty(h) && null != f[h]) if ("style" === h) for (k in g = f[h], g) g.hasOwnProperty(k) && (c || (c = {}), c[k] = "");else "dangerouslySetInnerHTML" !== h && "children" !== h && "suppressContentEditableWarning" !== h && "suppressHydrationWarning" !== h && "autoFocus" !== h && (va.hasOwnProperty(h) ? a || (a = []) : (a = a || []).push(h, null));

    for (h in d) {
      var l = d[h];
      g = null != f ? f[h] : void 0;
      if (d.hasOwnProperty(h) && l !== g && (null != l || null != g)) if ("style" === h) {
        if (g) {
          for (k in g) !g.hasOwnProperty(k) || l && l.hasOwnProperty(k) || (c || (c = {}), c[k] = "");

          for (k in l) l.hasOwnProperty(k) && g[k] !== l[k] && (c || (c = {}), c[k] = l[k]);
        } else c || (a || (a = []), a.push(h, c)), c = l;
      } else "dangerouslySetInnerHTML" === h ? (l = l ? l.__html : void 0, g = g ? g.__html : void 0, null != l && g !== l && (a = a || []).push(h, l)) : "children" === h ? g === l || "string" !== typeof l && "number" !== typeof l || (a = a || []).push(h, "" + l) : "suppressContentEditableWarning" !== h && "suppressHydrationWarning" !== h && (va.hasOwnProperty(h) ? (null != l && rd(e, h), a || g === l || (a = [])) : (a = a || []).push(h, l));
    }

    c && (a = a || []).push("style", c);
    e = a;
    if (b.updateQueue = e) b.effectTag |= 4;
  }
};

qi = function (a, b, c, d) {
  c !== d && (b.effectTag |= 4);
};

function ri(a, b) {
  switch (a.tailMode) {
    case "hidden":
      b = a.tail;

      for (var c = null; null !== b;) null !== b.alternate && (c = b), b = b.sibling;

      null === c ? a.tail = null : c.sibling = null;
      break;

    case "collapsed":
      c = a.tail;

      for (var d = null; null !== c;) null !== c.alternate && (d = c), c = c.sibling;

      null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
  }
}

function si(a, b, c) {
  var d = b.pendingProps;

  switch (b.tag) {
    case 2:
    case 16:
    case 15:
    case 0:
    case 11:
    case 7:
    case 8:
    case 12:
    case 9:
    case 14:
      return null;

    case 1:
      return L(b.type) && Df(), null;

    case 3:
      return eh(), H(K), H(J), c = b.stateNode, c.pendingContext && (c.context = c.pendingContext, c.pendingContext = null), null !== a && null !== a.child || !Wh(b) || (b.effectTag |= 4), oi(b), null;

    case 5:
      gh(b);
      c = ch(bh.current);
      var e = b.type;
      if (null !== a && null != b.stateNode) pi(a, b, e, d, c), a.ref !== b.ref && (b.effectTag |= 128);else {
        if (!d) {
          if (null === b.stateNode) throw Error(u(166));
          return null;
        }

        a = ch($g.current);

        if (Wh(b)) {
          d = b.stateNode;
          e = b.type;
          var f = b.memoizedProps;
          d[Md] = b;
          d[Nd] = f;

          switch (e) {
            case "iframe":
            case "object":
            case "embed":
              F("load", d);
              break;

            case "video":
            case "audio":
              for (a = 0; a < ac.length; a++) F(ac[a], d);

              break;

            case "source":
              F("error", d);
              break;

            case "img":
            case "image":
            case "link":
              F("error", d);
              F("load", d);
              break;

            case "form":
              F("reset", d);
              F("submit", d);
              break;

            case "details":
              F("toggle", d);
              break;

            case "input":
              Ab(d, f);
              F("invalid", d);
              rd(c, "onChange");
              break;

            case "select":
              d._wrapperState = {
                wasMultiple: !!f.multiple
              };
              F("invalid", d);
              rd(c, "onChange");
              break;

            case "textarea":
              Jb(d, f), F("invalid", d), rd(c, "onChange");
          }

          od(e, f);
          a = null;

          for (var g in f) if (f.hasOwnProperty(g)) {
            var h = f[g];
            "children" === g ? "string" === typeof h ? d.textContent !== h && (a = ["children", h]) : "number" === typeof h && d.textContent !== "" + h && (a = ["children", "" + h]) : va.hasOwnProperty(g) && null != h && rd(c, g);
          }

          switch (e) {
            case "input":
              xb(d);
              Eb(d, f, !0);
              break;

            case "textarea":
              xb(d);
              Lb(d);
              break;

            case "select":
            case "option":
              break;

            default:
              "function" === typeof f.onClick && (d.onclick = sd);
          }

          c = a;
          b.updateQueue = c;
          null !== c && (b.effectTag |= 4);
        } else {
          g = 9 === c.nodeType ? c : c.ownerDocument;
          a === qd && (a = Nb(e));
          a === qd ? "script" === e ? (a = g.createElement("div"), a.innerHTML = "<script>\x3c/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(e, {
            is: d.is
          }) : (a = g.createElement(e), "select" === e && (g = a, d.multiple ? g.multiple = !0 : d.size && (g.size = d.size))) : a = g.createElementNS(a, e);
          a[Md] = b;
          a[Nd] = d;
          ni(a, b, !1, !1);
          b.stateNode = a;
          g = pd(e, d);

          switch (e) {
            case "iframe":
            case "object":
            case "embed":
              F("load", a);
              h = d;
              break;

            case "video":
            case "audio":
              for (h = 0; h < ac.length; h++) F(ac[h], a);

              h = d;
              break;

            case "source":
              F("error", a);
              h = d;
              break;

            case "img":
            case "image":
            case "link":
              F("error", a);
              F("load", a);
              h = d;
              break;

            case "form":
              F("reset", a);
              F("submit", a);
              h = d;
              break;

            case "details":
              F("toggle", a);
              h = d;
              break;

            case "input":
              Ab(a, d);
              h = zb(a, d);
              F("invalid", a);
              rd(c, "onChange");
              break;

            case "option":
              h = Gb(a, d);
              break;

            case "select":
              a._wrapperState = {
                wasMultiple: !!d.multiple
              };
              h = n({}, d, {
                value: void 0
              });
              F("invalid", a);
              rd(c, "onChange");
              break;

            case "textarea":
              Jb(a, d);
              h = Ib(a, d);
              F("invalid", a);
              rd(c, "onChange");
              break;

            default:
              h = d;
          }

          od(e, h);
          var k = h;

          for (f in k) if (k.hasOwnProperty(f)) {
            var l = k[f];
            "style" === f ? md(a, l) : "dangerouslySetInnerHTML" === f ? (l = l ? l.__html : void 0, null != l && Qb(a, l)) : "children" === f ? "string" === typeof l ? ("textarea" !== e || "" !== l) && Rb(a, l) : "number" === typeof l && Rb(a, "" + l) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && (va.hasOwnProperty(f) ? null != l && rd(c, f) : null != l && Xa(a, f, l, g));
          }

          switch (e) {
            case "input":
              xb(a);
              Eb(a, d, !1);
              break;

            case "textarea":
              xb(a);
              Lb(a);
              break;

            case "option":
              null != d.value && a.setAttribute("value", "" + rb(d.value));
              break;

            case "select":
              a.multiple = !!d.multiple;
              c = d.value;
              null != c ? Hb(a, !!d.multiple, c, !1) : null != d.defaultValue && Hb(a, !!d.multiple, d.defaultValue, !0);
              break;

            default:
              "function" === typeof h.onClick && (a.onclick = sd);
          }

          Fd(e, d) && (b.effectTag |= 4);
        }

        null !== b.ref && (b.effectTag |= 128);
      }
      return null;

    case 6:
      if (a && null != b.stateNode) qi(a, b, a.memoizedProps, d);else {
        if ("string" !== typeof d && null === b.stateNode) throw Error(u(166));
        c = ch(bh.current);
        ch($g.current);
        Wh(b) ? (c = b.stateNode, d = b.memoizedProps, c[Md] = b, c.nodeValue !== d && (b.effectTag |= 4)) : (c = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), c[Md] = b, b.stateNode = c);
      }
      return null;

    case 13:
      H(M);
      d = b.memoizedState;
      if (0 !== (b.effectTag & 64)) return b.expirationTime = c, b;
      c = null !== d;
      d = !1;
      null === a ? void 0 !== b.memoizedProps.fallback && Wh(b) : (e = a.memoizedState, d = null !== e, c || null === e || (e = a.child.sibling, null !== e && (f = b.firstEffect, null !== f ? (b.firstEffect = e, e.nextEffect = f) : (b.firstEffect = b.lastEffect = e, e.nextEffect = null), e.effectTag = 8)));
      if (c && !d && 0 !== (b.mode & 2)) if (null === a && !0 !== b.memoizedProps.unstable_avoidThisFallback || 0 !== (M.current & 1)) S === ti && (S = ui);else {
        if (S === ti || S === ui) S = vi;
        0 !== wi && null !== T && (xi(T, U), yi(T, wi));
      }
      if (c || d) b.effectTag |= 4;
      return null;

    case 4:
      return eh(), oi(b), null;

    case 10:
      return og(b), null;

    case 17:
      return L(b.type) && Df(), null;

    case 19:
      H(M);
      d = b.memoizedState;
      if (null === d) return null;
      e = 0 !== (b.effectTag & 64);
      f = d.rendering;
      if (null === f) {
        if (e) ri(d, !1);else {
          if (S !== ti || null !== a && 0 !== (a.effectTag & 64)) for (f = b.child; null !== f;) {
            a = hh(f);

            if (null !== a) {
              b.effectTag |= 64;
              ri(d, !1);
              e = a.updateQueue;
              null !== e && (b.updateQueue = e, b.effectTag |= 4);
              null === d.lastEffect && (b.firstEffect = null);
              b.lastEffect = d.lastEffect;

              for (d = b.child; null !== d;) e = d, f = c, e.effectTag &= 2, e.nextEffect = null, e.firstEffect = null, e.lastEffect = null, a = e.alternate, null === a ? (e.childExpirationTime = 0, e.expirationTime = f, e.child = null, e.memoizedProps = null, e.memoizedState = null, e.updateQueue = null, e.dependencies = null) : (e.childExpirationTime = a.childExpirationTime, e.expirationTime = a.expirationTime, e.child = a.child, e.memoizedProps = a.memoizedProps, e.memoizedState = a.memoizedState, e.updateQueue = a.updateQueue, f = a.dependencies, e.dependencies = null === f ? null : {
                expirationTime: f.expirationTime,
                firstContext: f.firstContext,
                responders: f.responders
              }), d = d.sibling;

              I(M, M.current & 1 | 2);
              return b.child;
            }

            f = f.sibling;
          }
        }
      } else {
        if (!e) if (a = hh(f), null !== a) {
          if (b.effectTag |= 64, e = !0, c = a.updateQueue, null !== c && (b.updateQueue = c, b.effectTag |= 4), ri(d, !0), null === d.tail && "hidden" === d.tailMode && !f.alternate) return b = b.lastEffect = d.lastEffect, null !== b && (b.nextEffect = null), null;
        } else 2 * $f() - d.renderingStartTime > d.tailExpiration && 1 < c && (b.effectTag |= 64, e = !0, ri(d, !1), b.expirationTime = b.childExpirationTime = c - 1);
        d.isBackwards ? (f.sibling = b.child, b.child = f) : (c = d.last, null !== c ? c.sibling = f : b.child = f, d.last = f);
      }
      return null !== d.tail ? (0 === d.tailExpiration && (d.tailExpiration = $f() + 500), c = d.tail, d.rendering = c, d.tail = c.sibling, d.lastEffect = b.lastEffect, d.renderingStartTime = $f(), c.sibling = null, b = M.current, I(M, e ? b & 1 | 2 : b & 1), c) : null;
  }

  throw Error(u(156, b.tag));
}

function zi(a) {
  switch (a.tag) {
    case 1:
      L(a.type) && Df();
      var b = a.effectTag;
      return b & 4096 ? (a.effectTag = b & -4097 | 64, a) : null;

    case 3:
      eh();
      H(K);
      H(J);
      b = a.effectTag;
      if (0 !== (b & 64)) throw Error(u(285));
      a.effectTag = b & -4097 | 64;
      return a;

    case 5:
      return gh(a), null;

    case 13:
      return H(M), b = a.effectTag, b & 4096 ? (a.effectTag = b & -4097 | 64, a) : null;

    case 19:
      return H(M), null;

    case 4:
      return eh(), null;

    case 10:
      return og(a), null;

    default:
      return null;
  }
}

function Ai(a, b) {
  return {
    value: a,
    source: b,
    stack: qb(b)
  };
}

var Bi = "function" === typeof WeakSet ? WeakSet : Set;

function Ci(a, b) {
  var c = b.source,
      d = b.stack;
  null === d && null !== c && (d = qb(c));
  null !== c && pb(c.type);
  b = b.value;
  null !== a && 1 === a.tag && pb(a.type);

  try {
    console.error(b);
  } catch (e) {
    setTimeout(function () {
      throw e;
    });
  }
}

function Di(a, b) {
  try {
    b.props = a.memoizedProps, b.state = a.memoizedState, b.componentWillUnmount();
  } catch (c) {
    Ei(a, c);
  }
}

function Fi(a) {
  var b = a.ref;
  if (null !== b) if ("function" === typeof b) try {
    b(null);
  } catch (c) {
    Ei(a, c);
  } else b.current = null;
}

function Gi(a, b) {
  switch (b.tag) {
    case 0:
    case 11:
    case 15:
    case 22:
      return;

    case 1:
      if (b.effectTag & 256 && null !== a) {
        var c = a.memoizedProps,
            d = a.memoizedState;
        a = b.stateNode;
        b = a.getSnapshotBeforeUpdate(b.elementType === b.type ? c : ig(b.type, c), d);
        a.__reactInternalSnapshotBeforeUpdate = b;
      }

      return;

    case 3:
    case 5:
    case 6:
    case 4:
    case 17:
      return;
  }

  throw Error(u(163));
}

function Hi(a, b) {
  b = b.updateQueue;
  b = null !== b ? b.lastEffect : null;

  if (null !== b) {
    var c = b = b.next;

    do {
      if ((c.tag & a) === a) {
        var d = c.destroy;
        c.destroy = void 0;
        void 0 !== d && d();
      }

      c = c.next;
    } while (c !== b);
  }
}

function Ii(a, b) {
  b = b.updateQueue;
  b = null !== b ? b.lastEffect : null;

  if (null !== b) {
    var c = b = b.next;

    do {
      if ((c.tag & a) === a) {
        var d = c.create;
        c.destroy = d();
      }

      c = c.next;
    } while (c !== b);
  }
}

function Ji(a, b, c) {
  switch (c.tag) {
    case 0:
    case 11:
    case 15:
    case 22:
      Ii(3, c);
      return;

    case 1:
      a = c.stateNode;
      if (c.effectTag & 4) if (null === b) a.componentDidMount();else {
        var d = c.elementType === c.type ? b.memoizedProps : ig(c.type, b.memoizedProps);
        a.componentDidUpdate(d, b.memoizedState, a.__reactInternalSnapshotBeforeUpdate);
      }
      b = c.updateQueue;
      null !== b && Cg(c, b, a);
      return;

    case 3:
      b = c.updateQueue;

      if (null !== b) {
        a = null;
        if (null !== c.child) switch (c.child.tag) {
          case 5:
            a = c.child.stateNode;
            break;

          case 1:
            a = c.child.stateNode;
        }
        Cg(c, b, a);
      }

      return;

    case 5:
      a = c.stateNode;
      null === b && c.effectTag & 4 && Fd(c.type, c.memoizedProps) && a.focus();
      return;

    case 6:
      return;

    case 4:
      return;

    case 12:
      return;

    case 13:
      null === c.memoizedState && (c = c.alternate, null !== c && (c = c.memoizedState, null !== c && (c = c.dehydrated, null !== c && Vc(c))));
      return;

    case 19:
    case 17:
    case 20:
    case 21:
      return;
  }

  throw Error(u(163));
}

function Ki(a, b, c) {
  "function" === typeof Li && Li(b);

  switch (b.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
    case 22:
      a = b.updateQueue;

      if (null !== a && (a = a.lastEffect, null !== a)) {
        var d = a.next;
        cg(97 < c ? 97 : c, function () {
          var a = d;

          do {
            var c = a.destroy;

            if (void 0 !== c) {
              var g = b;

              try {
                c();
              } catch (h) {
                Ei(g, h);
              }
            }

            a = a.next;
          } while (a !== d);
        });
      }

      break;

    case 1:
      Fi(b);
      c = b.stateNode;
      "function" === typeof c.componentWillUnmount && Di(b, c);
      break;

    case 5:
      Fi(b);
      break;

    case 4:
      Mi(a, b, c);
  }
}

function Ni(a) {
  var b = a.alternate;
  a.return = null;
  a.child = null;
  a.memoizedState = null;
  a.updateQueue = null;
  a.dependencies = null;
  a.alternate = null;
  a.firstEffect = null;
  a.lastEffect = null;
  a.pendingProps = null;
  a.memoizedProps = null;
  a.stateNode = null;
  null !== b && Ni(b);
}

function Oi(a) {
  return 5 === a.tag || 3 === a.tag || 4 === a.tag;
}

function Pi(a) {
  a: {
    for (var b = a.return; null !== b;) {
      if (Oi(b)) {
        var c = b;
        break a;
      }

      b = b.return;
    }

    throw Error(u(160));
  }

  b = c.stateNode;

  switch (c.tag) {
    case 5:
      var d = !1;
      break;

    case 3:
      b = b.containerInfo;
      d = !0;
      break;

    case 4:
      b = b.containerInfo;
      d = !0;
      break;

    default:
      throw Error(u(161));
  }

  c.effectTag & 16 && (Rb(b, ""), c.effectTag &= -17);

  a: b: for (c = a;;) {
    for (; null === c.sibling;) {
      if (null === c.return || Oi(c.return)) {
        c = null;
        break a;
      }

      c = c.return;
    }

    c.sibling.return = c.return;

    for (c = c.sibling; 5 !== c.tag && 6 !== c.tag && 18 !== c.tag;) {
      if (c.effectTag & 2) continue b;
      if (null === c.child || 4 === c.tag) continue b;else c.child.return = c, c = c.child;
    }

    if (!(c.effectTag & 2)) {
      c = c.stateNode;
      break a;
    }
  }

  d ? Qi(a, c, b) : Ri(a, c, b);
}

function Qi(a, b, c) {
  var d = a.tag,
      e = 5 === d || 6 === d;
  if (e) a = e ? a.stateNode : a.stateNode.instance, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = sd));else if (4 !== d && (a = a.child, null !== a)) for (Qi(a, b, c), a = a.sibling; null !== a;) Qi(a, b, c), a = a.sibling;
}

function Ri(a, b, c) {
  var d = a.tag,
      e = 5 === d || 6 === d;
  if (e) a = e ? a.stateNode : a.stateNode.instance, b ? c.insertBefore(a, b) : c.appendChild(a);else if (4 !== d && (a = a.child, null !== a)) for (Ri(a, b, c), a = a.sibling; null !== a;) Ri(a, b, c), a = a.sibling;
}

function Mi(a, b, c) {
  for (var d = b, e = !1, f, g;;) {
    if (!e) {
      e = d.return;

      a: for (;;) {
        if (null === e) throw Error(u(160));
        f = e.stateNode;

        switch (e.tag) {
          case 5:
            g = !1;
            break a;

          case 3:
            f = f.containerInfo;
            g = !0;
            break a;

          case 4:
            f = f.containerInfo;
            g = !0;
            break a;
        }

        e = e.return;
      }

      e = !0;
    }

    if (5 === d.tag || 6 === d.tag) {
      a: for (var h = a, k = d, l = c, m = k;;) if (Ki(h, m, l), null !== m.child && 4 !== m.tag) m.child.return = m, m = m.child;else {
        if (m === k) break a;

        for (; null === m.sibling;) {
          if (null === m.return || m.return === k) break a;
          m = m.return;
        }

        m.sibling.return = m.return;
        m = m.sibling;
      }

      g ? (h = f, k = d.stateNode, 8 === h.nodeType ? h.parentNode.removeChild(k) : h.removeChild(k)) : f.removeChild(d.stateNode);
    } else if (4 === d.tag) {
      if (null !== d.child) {
        f = d.stateNode.containerInfo;
        g = !0;
        d.child.return = d;
        d = d.child;
        continue;
      }
    } else if (Ki(a, d, c), null !== d.child) {
      d.child.return = d;
      d = d.child;
      continue;
    }

    if (d === b) break;

    for (; null === d.sibling;) {
      if (null === d.return || d.return === b) return;
      d = d.return;
      4 === d.tag && (e = !1);
    }

    d.sibling.return = d.return;
    d = d.sibling;
  }
}

function Si(a, b) {
  switch (b.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
    case 22:
      Hi(3, b);
      return;

    case 1:
      return;

    case 5:
      var c = b.stateNode;

      if (null != c) {
        var d = b.memoizedProps,
            e = null !== a ? a.memoizedProps : d;
        a = b.type;
        var f = b.updateQueue;
        b.updateQueue = null;

        if (null !== f) {
          c[Nd] = d;
          "input" === a && "radio" === d.type && null != d.name && Bb(c, d);
          pd(a, e);
          b = pd(a, d);

          for (e = 0; e < f.length; e += 2) {
            var g = f[e],
                h = f[e + 1];
            "style" === g ? md(c, h) : "dangerouslySetInnerHTML" === g ? Qb(c, h) : "children" === g ? Rb(c, h) : Xa(c, g, h, b);
          }

          switch (a) {
            case "input":
              Cb(c, d);
              break;

            case "textarea":
              Kb(c, d);
              break;

            case "select":
              b = c._wrapperState.wasMultiple, c._wrapperState.wasMultiple = !!d.multiple, a = d.value, null != a ? Hb(c, !!d.multiple, a, !1) : b !== !!d.multiple && (null != d.defaultValue ? Hb(c, !!d.multiple, d.defaultValue, !0) : Hb(c, !!d.multiple, d.multiple ? [] : "", !1));
          }
        }
      }

      return;

    case 6:
      if (null === b.stateNode) throw Error(u(162));
      b.stateNode.nodeValue = b.memoizedProps;
      return;

    case 3:
      b = b.stateNode;
      b.hydrate && (b.hydrate = !1, Vc(b.containerInfo));
      return;

    case 12:
      return;

    case 13:
      c = b;
      null === b.memoizedState ? d = !1 : (d = !0, c = b.child, Ti = $f());
      if (null !== c) a: for (a = c;;) {
        if (5 === a.tag) f = a.stateNode, d ? (f = f.style, "function" === typeof f.setProperty ? f.setProperty("display", "none", "important") : f.display = "none") : (f = a.stateNode, e = a.memoizedProps.style, e = void 0 !== e && null !== e && e.hasOwnProperty("display") ? e.display : null, f.style.display = ld("display", e));else if (6 === a.tag) a.stateNode.nodeValue = d ? "" : a.memoizedProps;else if (13 === a.tag && null !== a.memoizedState && null === a.memoizedState.dehydrated) {
          f = a.child.sibling;
          f.return = a;
          a = f;
          continue;
        } else if (null !== a.child) {
          a.child.return = a;
          a = a.child;
          continue;
        }
        if (a === c) break;

        for (; null === a.sibling;) {
          if (null === a.return || a.return === c) break a;
          a = a.return;
        }

        a.sibling.return = a.return;
        a = a.sibling;
      }
      Ui(b);
      return;

    case 19:
      Ui(b);
      return;

    case 17:
      return;
  }

  throw Error(u(163));
}

function Ui(a) {
  var b = a.updateQueue;

  if (null !== b) {
    a.updateQueue = null;
    var c = a.stateNode;
    null === c && (c = a.stateNode = new Bi());
    b.forEach(function (b) {
      var d = Vi.bind(null, a, b);
      c.has(b) || (c.add(b), b.then(d, d));
    });
  }
}

var Wi = "function" === typeof WeakMap ? WeakMap : Map;

function Xi(a, b, c) {
  c = wg(c, null);
  c.tag = 3;
  c.payload = {
    element: null
  };
  var d = b.value;

  c.callback = function () {
    Yi || (Yi = !0, Zi = d);
    Ci(a, b);
  };

  return c;
}

function $i(a, b, c) {
  c = wg(c, null);
  c.tag = 3;
  var d = a.type.getDerivedStateFromError;

  if ("function" === typeof d) {
    var e = b.value;

    c.payload = function () {
      Ci(a, b);
      return d(e);
    };
  }

  var f = a.stateNode;
  null !== f && "function" === typeof f.componentDidCatch && (c.callback = function () {
    "function" !== typeof d && (null === aj ? aj = new Set([this]) : aj.add(this), Ci(a, b));
    var c = b.stack;
    this.componentDidCatch(b.value, {
      componentStack: null !== c ? c : ""
    });
  });
  return c;
}

var bj = Math.ceil,
    cj = Wa.ReactCurrentDispatcher,
    dj = Wa.ReactCurrentOwner,
    V = 0,
    ej = 8,
    fj = 16,
    gj = 32,
    ti = 0,
    hj = 1,
    ij = 2,
    ui = 3,
    vi = 4,
    jj = 5,
    W = V,
    T = null,
    X = null,
    U = 0,
    S = ti,
    kj = null,
    lj = 1073741823,
    mj = 1073741823,
    nj = null,
    wi = 0,
    oj = !1,
    Ti = 0,
    pj = 500,
    Y = null,
    Yi = !1,
    Zi = null,
    aj = null,
    qj = !1,
    rj = null,
    sj = 90,
    tj = null,
    uj = 0,
    vj = null,
    wj = 0;

function Gg() {
  return (W & (fj | gj)) !== V ? 1073741821 - ($f() / 10 | 0) : 0 !== wj ? wj : wj = 1073741821 - ($f() / 10 | 0);
}

function Hg(a, b, c) {
  b = b.mode;
  if (0 === (b & 2)) return 1073741823;
  var d = ag();
  if (0 === (b & 4)) return 99 === d ? 1073741823 : 1073741822;
  if ((W & fj) !== V) return U;
  if (null !== c) a = hg(a, c.timeoutMs | 0 || 5E3, 250);else switch (d) {
    case 99:
      a = 1073741823;
      break;

    case 98:
      a = hg(a, 150, 100);
      break;

    case 97:
    case 96:
      a = hg(a, 5E3, 250);
      break;

    case 95:
      a = 2;
      break;

    default:
      throw Error(u(326));
  }
  null !== T && a === U && --a;
  return a;
}

function Ig(a, b) {
  if (50 < uj) throw uj = 0, vj = null, Error(u(185));
  a = xj(a, b);

  if (null !== a) {
    var c = ag();
    1073741823 === b ? (W & ej) !== V && (W & (fj | gj)) === V ? yj(a) : (Z(a), W === V && gg()) : Z(a);
    (W & 4) === V || 98 !== c && 99 !== c || (null === tj ? tj = new Map([[a, b]]) : (c = tj.get(a), (void 0 === c || c > b) && tj.set(a, b)));
  }
}

function xj(a, b) {
  a.expirationTime < b && (a.expirationTime = b);
  var c = a.alternate;
  null !== c && c.expirationTime < b && (c.expirationTime = b);
  var d = a.return,
      e = null;
  if (null === d && 3 === a.tag) e = a.stateNode;else for (; null !== d;) {
    c = d.alternate;
    d.childExpirationTime < b && (d.childExpirationTime = b);
    null !== c && c.childExpirationTime < b && (c.childExpirationTime = b);

    if (null === d.return && 3 === d.tag) {
      e = d.stateNode;
      break;
    }

    d = d.return;
  }
  null !== e && (T === e && (Bg(b), S === vi && xi(e, U)), yi(e, b));
  return e;
}

function zj(a) {
  var b = a.lastExpiredTime;
  if (0 !== b) return b;
  b = a.firstPendingTime;
  if (!Aj(a, b)) return b;
  var c = a.lastPingedTime;
  a = a.nextKnownPendingLevel;
  a = c > a ? c : a;
  return 2 >= a && b !== a ? 0 : a;
}

function Z(a) {
  if (0 !== a.lastExpiredTime) a.callbackExpirationTime = 1073741823, a.callbackPriority = 99, a.callbackNode = eg(yj.bind(null, a));else {
    var b = zj(a),
        c = a.callbackNode;
    if (0 === b) null !== c && (a.callbackNode = null, a.callbackExpirationTime = 0, a.callbackPriority = 90);else {
      var d = Gg();
      1073741823 === b ? d = 99 : 1 === b || 2 === b ? d = 95 : (d = 10 * (1073741821 - b) - 10 * (1073741821 - d), d = 0 >= d ? 99 : 250 >= d ? 98 : 5250 >= d ? 97 : 95);

      if (null !== c) {
        var e = a.callbackPriority;
        if (a.callbackExpirationTime === b && e >= d) return;
        c !== Tf && Kf(c);
      }

      a.callbackExpirationTime = b;
      a.callbackPriority = d;
      b = 1073741823 === b ? eg(yj.bind(null, a)) : dg(d, Bj.bind(null, a), {
        timeout: 10 * (1073741821 - b) - $f()
      });
      a.callbackNode = b;
    }
  }
}

function Bj(a, b) {
  wj = 0;
  if (b) return b = Gg(), Cj(a, b), Z(a), null;
  var c = zj(a);

  if (0 !== c) {
    b = a.callbackNode;
    if ((W & (fj | gj)) !== V) throw Error(u(327));
    Dj();
    a === T && c === U || Ej(a, c);

    if (null !== X) {
      var d = W;
      W |= fj;
      var e = Fj();

      do try {
        Gj();
        break;
      } catch (h) {
        Hj(a, h);
      } while (1);

      ng();
      W = d;
      cj.current = e;
      if (S === hj) throw b = kj, Ej(a, c), xi(a, c), Z(a), b;
      if (null === X) switch (e = a.finishedWork = a.current.alternate, a.finishedExpirationTime = c, d = S, T = null, d) {
        case ti:
        case hj:
          throw Error(u(345));

        case ij:
          Cj(a, 2 < c ? 2 : c);
          break;

        case ui:
          xi(a, c);
          d = a.lastSuspendedTime;
          c === d && (a.nextKnownPendingLevel = Ij(e));

          if (1073741823 === lj && (e = Ti + pj - $f(), 10 < e)) {
            if (oj) {
              var f = a.lastPingedTime;

              if (0 === f || f >= c) {
                a.lastPingedTime = c;
                Ej(a, c);
                break;
              }
            }

            f = zj(a);
            if (0 !== f && f !== c) break;

            if (0 !== d && d !== c) {
              a.lastPingedTime = d;
              break;
            }

            a.timeoutHandle = Hd(Jj.bind(null, a), e);
            break;
          }

          Jj(a);
          break;

        case vi:
          xi(a, c);
          d = a.lastSuspendedTime;
          c === d && (a.nextKnownPendingLevel = Ij(e));

          if (oj && (e = a.lastPingedTime, 0 === e || e >= c)) {
            a.lastPingedTime = c;
            Ej(a, c);
            break;
          }

          e = zj(a);
          if (0 !== e && e !== c) break;

          if (0 !== d && d !== c) {
            a.lastPingedTime = d;
            break;
          }

          1073741823 !== mj ? d = 10 * (1073741821 - mj) - $f() : 1073741823 === lj ? d = 0 : (d = 10 * (1073741821 - lj) - 5E3, e = $f(), c = 10 * (1073741821 - c) - e, d = e - d, 0 > d && (d = 0), d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3E3 > d ? 3E3 : 4320 > d ? 4320 : 1960 * bj(d / 1960)) - d, c < d && (d = c));

          if (10 < d) {
            a.timeoutHandle = Hd(Jj.bind(null, a), d);
            break;
          }

          Jj(a);
          break;

        case jj:
          if (1073741823 !== lj && null !== nj) {
            f = lj;
            var g = nj;
            d = g.busyMinDurationMs | 0;
            0 >= d ? d = 0 : (e = g.busyDelayMs | 0, f = $f() - (10 * (1073741821 - f) - (g.timeoutMs | 0 || 5E3)), d = f <= e ? 0 : e + d - f);

            if (10 < d) {
              xi(a, c);
              a.timeoutHandle = Hd(Jj.bind(null, a), d);
              break;
            }
          }

          Jj(a);
          break;

        default:
          throw Error(u(329));
      }
      Z(a);
      if (a.callbackNode === b) return Bj.bind(null, a);
    }
  }

  return null;
}

function yj(a) {
  var b = a.lastExpiredTime;
  b = 0 !== b ? b : 1073741823;
  if ((W & (fj | gj)) !== V) throw Error(u(327));
  Dj();
  a === T && b === U || Ej(a, b);

  if (null !== X) {
    var c = W;
    W |= fj;
    var d = Fj();

    do try {
      Kj();
      break;
    } catch (e) {
      Hj(a, e);
    } while (1);

    ng();
    W = c;
    cj.current = d;
    if (S === hj) throw c = kj, Ej(a, b), xi(a, b), Z(a), c;
    if (null !== X) throw Error(u(261));
    a.finishedWork = a.current.alternate;
    a.finishedExpirationTime = b;
    T = null;
    Jj(a);
    Z(a);
  }

  return null;
}

function Lj() {
  if (null !== tj) {
    var a = tj;
    tj = null;
    a.forEach(function (a, c) {
      Cj(c, a);
      Z(c);
    });
    gg();
  }
}

function Mj(a, b) {
  var c = W;
  W |= 1;

  try {
    return a(b);
  } finally {
    W = c, W === V && gg();
  }
}

function Nj(a, b) {
  var c = W;
  W &= -2;
  W |= ej;

  try {
    return a(b);
  } finally {
    W = c, W === V && gg();
  }
}

function Ej(a, b) {
  a.finishedWork = null;
  a.finishedExpirationTime = 0;
  var c = a.timeoutHandle;
  -1 !== c && (a.timeoutHandle = -1, Id(c));
  if (null !== X) for (c = X.return; null !== c;) {
    var d = c;

    switch (d.tag) {
      case 1:
        d = d.type.childContextTypes;
        null !== d && void 0 !== d && Df();
        break;

      case 3:
        eh();
        H(K);
        H(J);
        break;

      case 5:
        gh(d);
        break;

      case 4:
        eh();
        break;

      case 13:
        H(M);
        break;

      case 19:
        H(M);
        break;

      case 10:
        og(d);
    }

    c = c.return;
  }
  T = a;
  X = Sg(a.current, null);
  U = b;
  S = ti;
  kj = null;
  mj = lj = 1073741823;
  nj = null;
  wi = 0;
  oj = !1;
}

function Hj(a, b) {
  do {
    try {
      ng();
      jh.current = sh;
      if (mh) for (var c = N.memoizedState; null !== c;) {
        var d = c.queue;
        null !== d && (d.pending = null);
        c = c.next;
      }
      lh = 0;
      P = O = N = null;
      mh = !1;
      if (null === X || null === X.return) return S = hj, kj = b, X = null;

      a: {
        var e = a,
            f = X.return,
            g = X,
            h = b;
        b = U;
        g.effectTag |= 2048;
        g.firstEffect = g.lastEffect = null;

        if (null !== h && "object" === typeof h && "function" === typeof h.then) {
          var k = h;

          if (0 === (g.mode & 2)) {
            var l = g.alternate;
            l ? (g.updateQueue = l.updateQueue, g.memoizedState = l.memoizedState, g.expirationTime = l.expirationTime) : (g.updateQueue = null, g.memoizedState = null);
          }

          var m = 0 !== (M.current & 1),
              p = f;

          do {
            var x;

            if (x = 13 === p.tag) {
              var z = p.memoizedState;
              if (null !== z) x = null !== z.dehydrated ? !0 : !1;else {
                var ca = p.memoizedProps;
                x = void 0 === ca.fallback ? !1 : !0 !== ca.unstable_avoidThisFallback ? !0 : m ? !1 : !0;
              }
            }

            if (x) {
              var D = p.updateQueue;

              if (null === D) {
                var t = new Set();
                t.add(k);
                p.updateQueue = t;
              } else D.add(k);

              if (0 === (p.mode & 2)) {
                p.effectTag |= 64;
                g.effectTag &= -2981;
                if (1 === g.tag) if (null === g.alternate) g.tag = 17;else {
                  var y = wg(1073741823, null);
                  y.tag = 2;
                  xg(g, y);
                }
                g.expirationTime = 1073741823;
                break a;
              }

              h = void 0;
              g = b;
              var A = e.pingCache;
              null === A ? (A = e.pingCache = new Wi(), h = new Set(), A.set(k, h)) : (h = A.get(k), void 0 === h && (h = new Set(), A.set(k, h)));

              if (!h.has(g)) {
                h.add(g);
                var q = Oj.bind(null, e, k, g);
                k.then(q, q);
              }

              p.effectTag |= 4096;
              p.expirationTime = b;
              break a;
            }

            p = p.return;
          } while (null !== p);

          h = Error((pb(g.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + qb(g));
        }

        S !== jj && (S = ij);
        h = Ai(h, g);
        p = f;

        do {
          switch (p.tag) {
            case 3:
              k = h;
              p.effectTag |= 4096;
              p.expirationTime = b;
              var B = Xi(p, k, b);
              yg(p, B);
              break a;

            case 1:
              k = h;
              var w = p.type,
                  ub = p.stateNode;

              if (0 === (p.effectTag & 64) && ("function" === typeof w.getDerivedStateFromError || null !== ub && "function" === typeof ub.componentDidCatch && (null === aj || !aj.has(ub)))) {
                p.effectTag |= 4096;
                p.expirationTime = b;
                var vb = $i(p, k, b);
                yg(p, vb);
                break a;
              }

          }

          p = p.return;
        } while (null !== p);
      }

      X = Pj(X);
    } catch (Xc) {
      b = Xc;
      continue;
    }

    break;
  } while (1);
}

function Fj() {
  var a = cj.current;
  cj.current = sh;
  return null === a ? sh : a;
}

function Ag(a, b) {
  a < lj && 2 < a && (lj = a);
  null !== b && a < mj && 2 < a && (mj = a, nj = b);
}

function Bg(a) {
  a > wi && (wi = a);
}

function Kj() {
  for (; null !== X;) X = Qj(X);
}

function Gj() {
  for (; null !== X && !Uf();) X = Qj(X);
}

function Qj(a) {
  var b = Rj(a.alternate, a, U);
  a.memoizedProps = a.pendingProps;
  null === b && (b = Pj(a));
  dj.current = null;
  return b;
}

function Pj(a) {
  X = a;

  do {
    var b = X.alternate;
    a = X.return;

    if (0 === (X.effectTag & 2048)) {
      b = si(b, X, U);

      if (1 === U || 1 !== X.childExpirationTime) {
        for (var c = 0, d = X.child; null !== d;) {
          var e = d.expirationTime,
              f = d.childExpirationTime;
          e > c && (c = e);
          f > c && (c = f);
          d = d.sibling;
        }

        X.childExpirationTime = c;
      }

      if (null !== b) return b;
      null !== a && 0 === (a.effectTag & 2048) && (null === a.firstEffect && (a.firstEffect = X.firstEffect), null !== X.lastEffect && (null !== a.lastEffect && (a.lastEffect.nextEffect = X.firstEffect), a.lastEffect = X.lastEffect), 1 < X.effectTag && (null !== a.lastEffect ? a.lastEffect.nextEffect = X : a.firstEffect = X, a.lastEffect = X));
    } else {
      b = zi(X);
      if (null !== b) return b.effectTag &= 2047, b;
      null !== a && (a.firstEffect = a.lastEffect = null, a.effectTag |= 2048);
    }

    b = X.sibling;
    if (null !== b) return b;
    X = a;
  } while (null !== X);

  S === ti && (S = jj);
  return null;
}

function Ij(a) {
  var b = a.expirationTime;
  a = a.childExpirationTime;
  return b > a ? b : a;
}

function Jj(a) {
  var b = ag();
  cg(99, Sj.bind(null, a, b));
  return null;
}

function Sj(a, b) {
  do Dj(); while (null !== rj);

  if ((W & (fj | gj)) !== V) throw Error(u(327));
  var c = a.finishedWork,
      d = a.finishedExpirationTime;
  if (null === c) return null;
  a.finishedWork = null;
  a.finishedExpirationTime = 0;
  if (c === a.current) throw Error(u(177));
  a.callbackNode = null;
  a.callbackExpirationTime = 0;
  a.callbackPriority = 90;
  a.nextKnownPendingLevel = 0;
  var e = Ij(c);
  a.firstPendingTime = e;
  d <= a.lastSuspendedTime ? a.firstSuspendedTime = a.lastSuspendedTime = a.nextKnownPendingLevel = 0 : d <= a.firstSuspendedTime && (a.firstSuspendedTime = d - 1);
  d <= a.lastPingedTime && (a.lastPingedTime = 0);
  d <= a.lastExpiredTime && (a.lastExpiredTime = 0);
  a === T && (X = T = null, U = 0);
  1 < c.effectTag ? null !== c.lastEffect ? (c.lastEffect.nextEffect = c, e = c.firstEffect) : e = c : e = c.firstEffect;

  if (null !== e) {
    var f = W;
    W |= gj;
    dj.current = null;
    Dd = fd;
    var g = xd();

    if (yd(g)) {
      if ("selectionStart" in g) var h = {
        start: g.selectionStart,
        end: g.selectionEnd
      };else a: {
        h = (h = g.ownerDocument) && h.defaultView || window;
        var k = h.getSelection && h.getSelection();

        if (k && 0 !== k.rangeCount) {
          h = k.anchorNode;
          var l = k.anchorOffset,
              m = k.focusNode;
          k = k.focusOffset;

          try {
            h.nodeType, m.nodeType;
          } catch (wb) {
            h = null;
            break a;
          }

          var p = 0,
              x = -1,
              z = -1,
              ca = 0,
              D = 0,
              t = g,
              y = null;

          b: for (;;) {
            for (var A;;) {
              t !== h || 0 !== l && 3 !== t.nodeType || (x = p + l);
              t !== m || 0 !== k && 3 !== t.nodeType || (z = p + k);
              3 === t.nodeType && (p += t.nodeValue.length);
              if (null === (A = t.firstChild)) break;
              y = t;
              t = A;
            }

            for (;;) {
              if (t === g) break b;
              y === h && ++ca === l && (x = p);
              y === m && ++D === k && (z = p);
              if (null !== (A = t.nextSibling)) break;
              t = y;
              y = t.parentNode;
            }

            t = A;
          }

          h = -1 === x || -1 === z ? null : {
            start: x,
            end: z
          };
        } else h = null;
      }
      h = h || {
        start: 0,
        end: 0
      };
    } else h = null;

    Ed = {
      activeElementDetached: null,
      focusedElem: g,
      selectionRange: h
    };
    fd = !1;
    Y = e;

    do try {
      Tj();
    } catch (wb) {
      if (null === Y) throw Error(u(330));
      Ei(Y, wb);
      Y = Y.nextEffect;
    } while (null !== Y);

    Y = e;

    do try {
      for (g = a, h = b; null !== Y;) {
        var q = Y.effectTag;
        q & 16 && Rb(Y.stateNode, "");

        if (q & 128) {
          var B = Y.alternate;

          if (null !== B) {
            var w = B.ref;
            null !== w && ("function" === typeof w ? w(null) : w.current = null);
          }
        }

        switch (q & 1038) {
          case 2:
            Pi(Y);
            Y.effectTag &= -3;
            break;

          case 6:
            Pi(Y);
            Y.effectTag &= -3;
            Si(Y.alternate, Y);
            break;

          case 1024:
            Y.effectTag &= -1025;
            break;

          case 1028:
            Y.effectTag &= -1025;
            Si(Y.alternate, Y);
            break;

          case 4:
            Si(Y.alternate, Y);
            break;

          case 8:
            l = Y, Mi(g, l, h), Ni(l);
        }

        Y = Y.nextEffect;
      }
    } catch (wb) {
      if (null === Y) throw Error(u(330));
      Ei(Y, wb);
      Y = Y.nextEffect;
    } while (null !== Y);

    w = Ed;
    B = xd();
    q = w.focusedElem;
    h = w.selectionRange;

    if (B !== q && q && q.ownerDocument && wd(q.ownerDocument.documentElement, q)) {
      null !== h && yd(q) && (B = h.start, w = h.end, void 0 === w && (w = B), "selectionStart" in q ? (q.selectionStart = B, q.selectionEnd = Math.min(w, q.value.length)) : (w = (B = q.ownerDocument || document) && B.defaultView || window, w.getSelection && (w = w.getSelection(), l = q.textContent.length, g = Math.min(h.start, l), h = void 0 === h.end ? g : Math.min(h.end, l), !w.extend && g > h && (l = h, h = g, g = l), l = vd(q, g), m = vd(q, h), l && m && (1 !== w.rangeCount || w.anchorNode !== l.node || w.anchorOffset !== l.offset || w.focusNode !== m.node || w.focusOffset !== m.offset) && (B = B.createRange(), B.setStart(l.node, l.offset), w.removeAllRanges(), g > h ? (w.addRange(B), w.extend(m.node, m.offset)) : (B.setEnd(m.node, m.offset), w.addRange(B))))));
      B = [];

      for (w = q; w = w.parentNode;) 1 === w.nodeType && B.push({
        element: w,
        left: w.scrollLeft,
        top: w.scrollTop
      });

      "function" === typeof q.focus && q.focus();

      for (q = 0; q < B.length; q++) w = B[q], w.element.scrollLeft = w.left, w.element.scrollTop = w.top;
    }

    fd = !!Dd;
    Ed = Dd = null;
    a.current = c;
    Y = e;

    do try {
      for (q = a; null !== Y;) {
        var ub = Y.effectTag;
        ub & 36 && Ji(q, Y.alternate, Y);

        if (ub & 128) {
          B = void 0;
          var vb = Y.ref;

          if (null !== vb) {
            var Xc = Y.stateNode;

            switch (Y.tag) {
              case 5:
                B = Xc;
                break;

              default:
                B = Xc;
            }

            "function" === typeof vb ? vb(B) : vb.current = B;
          }
        }

        Y = Y.nextEffect;
      }
    } catch (wb) {
      if (null === Y) throw Error(u(330));
      Ei(Y, wb);
      Y = Y.nextEffect;
    } while (null !== Y);

    Y = null;
    Vf();
    W = f;
  } else a.current = c;

  if (qj) qj = !1, rj = a, sj = b;else for (Y = e; null !== Y;) b = Y.nextEffect, Y.nextEffect = null, Y = b;
  b = a.firstPendingTime;
  0 === b && (aj = null);
  1073741823 === b ? a === vj ? uj++ : (uj = 0, vj = a) : uj = 0;
  "function" === typeof Uj && Uj(c.stateNode, d);
  Z(a);
  if (Yi) throw Yi = !1, a = Zi, Zi = null, a;
  if ((W & ej) !== V) return null;
  gg();
  return null;
}

function Tj() {
  for (; null !== Y;) {
    var a = Y.effectTag;
    0 !== (a & 256) && Gi(Y.alternate, Y);
    0 === (a & 512) || qj || (qj = !0, dg(97, function () {
      Dj();
      return null;
    }));
    Y = Y.nextEffect;
  }
}

function Dj() {
  if (90 !== sj) {
    var a = 97 < sj ? 97 : sj;
    sj = 90;
    return cg(a, Vj);
  }
}

function Vj() {
  if (null === rj) return !1;
  var a = rj;
  rj = null;
  if ((W & (fj | gj)) !== V) throw Error(u(331));
  var b = W;
  W |= gj;

  for (a = a.current.firstEffect; null !== a;) {
    try {
      var c = a;
      if (0 !== (c.effectTag & 512)) switch (c.tag) {
        case 0:
        case 11:
        case 15:
        case 22:
          Hi(5, c), Ii(5, c);
      }
    } catch (d) {
      if (null === a) throw Error(u(330));
      Ei(a, d);
    }

    c = a.nextEffect;
    a.nextEffect = null;
    a = c;
  }

  W = b;
  gg();
  return !0;
}

function Wj(a, b, c) {
  b = Ai(c, b);
  b = Xi(a, b, 1073741823);
  xg(a, b);
  a = xj(a, 1073741823);
  null !== a && Z(a);
}

function Ei(a, b) {
  if (3 === a.tag) Wj(a, a, b);else for (var c = a.return; null !== c;) {
    if (3 === c.tag) {
      Wj(c, a, b);
      break;
    } else if (1 === c.tag) {
      var d = c.stateNode;

      if ("function" === typeof c.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === aj || !aj.has(d))) {
        a = Ai(b, a);
        a = $i(c, a, 1073741823);
        xg(c, a);
        c = xj(c, 1073741823);
        null !== c && Z(c);
        break;
      }
    }

    c = c.return;
  }
}

function Oj(a, b, c) {
  var d = a.pingCache;
  null !== d && d.delete(b);
  T === a && U === c ? S === vi || S === ui && 1073741823 === lj && $f() - Ti < pj ? Ej(a, U) : oj = !0 : Aj(a, c) && (b = a.lastPingedTime, 0 !== b && b < c || (a.lastPingedTime = c, Z(a)));
}

function Vi(a, b) {
  var c = a.stateNode;
  null !== c && c.delete(b);
  b = 0;
  0 === b && (b = Gg(), b = Hg(b, a, null));
  a = xj(a, b);
  null !== a && Z(a);
}

var Rj;

Rj = function (a, b, c) {
  var d = b.expirationTime;

  if (null !== a) {
    var e = b.pendingProps;
    if (a.memoizedProps !== e || K.current) rg = !0;else {
      if (d < c) {
        rg = !1;

        switch (b.tag) {
          case 3:
            hi(b);
            Xh();
            break;

          case 5:
            fh(b);
            if (b.mode & 4 && 1 !== c && e.hidden) return b.expirationTime = b.childExpirationTime = 1, null;
            break;

          case 1:
            L(b.type) && Gf(b);
            break;

          case 4:
            dh(b, b.stateNode.containerInfo);
            break;

          case 10:
            d = b.memoizedProps.value;
            e = b.type._context;
            I(jg, e._currentValue);
            e._currentValue = d;
            break;

          case 13:
            if (null !== b.memoizedState) {
              d = b.child.childExpirationTime;
              if (0 !== d && d >= c) return ji(a, b, c);
              I(M, M.current & 1);
              b = $h(a, b, c);
              return null !== b ? b.sibling : null;
            }

            I(M, M.current & 1);
            break;

          case 19:
            d = b.childExpirationTime >= c;

            if (0 !== (a.effectTag & 64)) {
              if (d) return mi(a, b, c);
              b.effectTag |= 64;
            }

            e = b.memoizedState;
            null !== e && (e.rendering = null, e.tail = null);
            I(M, M.current);
            if (!d) return null;
        }

        return $h(a, b, c);
      }

      rg = !1;
    }
  } else rg = !1;

  b.expirationTime = 0;

  switch (b.tag) {
    case 2:
      d = b.type;
      null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2);
      a = b.pendingProps;
      e = Cf(b, J.current);
      qg(b, c);
      e = oh(null, b, d, a, e, c);
      b.effectTag |= 1;

      if ("object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof) {
        b.tag = 1;
        b.memoizedState = null;
        b.updateQueue = null;

        if (L(d)) {
          var f = !0;
          Gf(b);
        } else f = !1;

        b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null;
        ug(b);
        var g = d.getDerivedStateFromProps;
        "function" === typeof g && Fg(b, d, g, a);
        e.updater = Jg;
        b.stateNode = e;
        e._reactInternalFiber = b;
        Ng(b, d, a, c);
        b = gi(null, b, d, !0, f, c);
      } else b.tag = 0, R(null, b, e, c), b = b.child;

      return b;

    case 16:
      a: {
        e = b.elementType;
        null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2);
        a = b.pendingProps;
        ob(e);
        if (1 !== e._status) throw e._result;
        e = e._result;
        b.type = e;
        f = b.tag = Xj(e);
        a = ig(e, a);

        switch (f) {
          case 0:
            b = di(null, b, e, a, c);
            break a;

          case 1:
            b = fi(null, b, e, a, c);
            break a;

          case 11:
            b = Zh(null, b, e, a, c);
            break a;

          case 14:
            b = ai(null, b, e, ig(e.type, a), d, c);
            break a;
        }

        throw Error(u(306, e, ""));
      }

      return b;

    case 0:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : ig(d, e), di(a, b, d, e, c);

    case 1:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : ig(d, e), fi(a, b, d, e, c);

    case 3:
      hi(b);
      d = b.updateQueue;
      if (null === a || null === d) throw Error(u(282));
      d = b.pendingProps;
      e = b.memoizedState;
      e = null !== e ? e.element : null;
      vg(a, b);
      zg(b, d, null, c);
      d = b.memoizedState.element;
      if (d === e) Xh(), b = $h(a, b, c);else {
        if (e = b.stateNode.hydrate) Ph = Jd(b.stateNode.containerInfo.firstChild), Oh = b, e = Qh = !0;
        if (e) for (c = Yg(b, null, d, c), b.child = c; c;) c.effectTag = c.effectTag & -3 | 1024, c = c.sibling;else R(a, b, d, c), Xh();
        b = b.child;
      }
      return b;

    case 5:
      return fh(b), null === a && Uh(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, Gd(d, e) ? g = null : null !== f && Gd(d, f) && (b.effectTag |= 16), ei(a, b), b.mode & 4 && 1 !== c && e.hidden ? (b.expirationTime = b.childExpirationTime = 1, b = null) : (R(a, b, g, c), b = b.child), b;

    case 6:
      return null === a && Uh(b), null;

    case 13:
      return ji(a, b, c);

    case 4:
      return dh(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Xg(b, null, d, c) : R(a, b, d, c), b.child;

    case 11:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : ig(d, e), Zh(a, b, d, e, c);

    case 7:
      return R(a, b, b.pendingProps, c), b.child;

    case 8:
      return R(a, b, b.pendingProps.children, c), b.child;

    case 12:
      return R(a, b, b.pendingProps.children, c), b.child;

    case 10:
      a: {
        d = b.type._context;
        e = b.pendingProps;
        g = b.memoizedProps;
        f = e.value;
        var h = b.type._context;
        I(jg, h._currentValue);
        h._currentValue = f;
        if (null !== g) if (h = g.value, f = $e(h, f) ? 0 : ("function" === typeof d._calculateChangedBits ? d._calculateChangedBits(h, f) : 1073741823) | 0, 0 === f) {
          if (g.children === e.children && !K.current) {
            b = $h(a, b, c);
            break a;
          }
        } else for (h = b.child, null !== h && (h.return = b); null !== h;) {
          var k = h.dependencies;

          if (null !== k) {
            g = h.child;

            for (var l = k.firstContext; null !== l;) {
              if (l.context === d && 0 !== (l.observedBits & f)) {
                1 === h.tag && (l = wg(c, null), l.tag = 2, xg(h, l));
                h.expirationTime < c && (h.expirationTime = c);
                l = h.alternate;
                null !== l && l.expirationTime < c && (l.expirationTime = c);
                pg(h.return, c);
                k.expirationTime < c && (k.expirationTime = c);
                break;
              }

              l = l.next;
            }
          } else g = 10 === h.tag ? h.type === b.type ? null : h.child : h.child;

          if (null !== g) g.return = h;else for (g = h; null !== g;) {
            if (g === b) {
              g = null;
              break;
            }

            h = g.sibling;

            if (null !== h) {
              h.return = g.return;
              g = h;
              break;
            }

            g = g.return;
          }
          h = g;
        }
        R(a, b, e.children, c);
        b = b.child;
      }

      return b;

    case 9:
      return e = b.type, f = b.pendingProps, d = f.children, qg(b, c), e = sg(e, f.unstable_observedBits), d = d(e), b.effectTag |= 1, R(a, b, d, c), b.child;

    case 14:
      return e = b.type, f = ig(e, b.pendingProps), f = ig(e.type, f), ai(a, b, e, f, d, c);

    case 15:
      return ci(a, b, b.type, b.pendingProps, d, c);

    case 17:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : ig(d, e), null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2), b.tag = 1, L(d) ? (a = !0, Gf(b)) : a = !1, qg(b, c), Lg(b, d, e), Ng(b, d, e, c), gi(null, b, d, !0, a, c);

    case 19:
      return mi(a, b, c);
  }

  throw Error(u(156, b.tag));
};

var Uj = null,
    Li = null;

function Yj(a) {
  if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;
  var b = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (b.isDisabled || !b.supportsFiber) return !0;

  try {
    var c = b.inject(a);

    Uj = function (a) {
      try {
        b.onCommitFiberRoot(c, a, void 0, 64 === (a.current.effectTag & 64));
      } catch (e) {}
    };

    Li = function (a) {
      try {
        b.onCommitFiberUnmount(c, a);
      } catch (e) {}
    };
  } catch (d) {}

  return !0;
}

function Zj(a, b, c, d) {
  this.tag = a;
  this.key = c;
  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = b;
  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
  this.mode = d;
  this.effectTag = 0;
  this.lastEffect = this.firstEffect = this.nextEffect = null;
  this.childExpirationTime = this.expirationTime = 0;
  this.alternate = null;
}

function Sh(a, b, c, d) {
  return new Zj(a, b, c, d);
}

function bi(a) {
  a = a.prototype;
  return !(!a || !a.isReactComponent);
}

function Xj(a) {
  if ("function" === typeof a) return bi(a) ? 1 : 0;

  if (void 0 !== a && null !== a) {
    a = a.$$typeof;
    if (a === gb) return 11;
    if (a === jb) return 14;
  }

  return 2;
}

function Sg(a, b) {
  var c = a.alternate;
  null === c ? (c = Sh(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.effectTag = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);
  c.childExpirationTime = a.childExpirationTime;
  c.expirationTime = a.expirationTime;
  c.child = a.child;
  c.memoizedProps = a.memoizedProps;
  c.memoizedState = a.memoizedState;
  c.updateQueue = a.updateQueue;
  b = a.dependencies;
  c.dependencies = null === b ? null : {
    expirationTime: b.expirationTime,
    firstContext: b.firstContext,
    responders: b.responders
  };
  c.sibling = a.sibling;
  c.index = a.index;
  c.ref = a.ref;
  return c;
}

function Ug(a, b, c, d, e, f) {
  var g = 2;
  d = a;
  if ("function" === typeof a) bi(a) && (g = 1);else if ("string" === typeof a) g = 5;else a: switch (a) {
    case ab:
      return Wg(c.children, e, f, b);

    case fb:
      g = 8;
      e |= 7;
      break;

    case bb:
      g = 8;
      e |= 1;
      break;

    case cb:
      return a = Sh(12, c, b, e | 8), a.elementType = cb, a.type = cb, a.expirationTime = f, a;

    case hb:
      return a = Sh(13, c, b, e), a.type = hb, a.elementType = hb, a.expirationTime = f, a;

    case ib:
      return a = Sh(19, c, b, e), a.elementType = ib, a.expirationTime = f, a;

    default:
      if ("object" === typeof a && null !== a) switch (a.$$typeof) {
        case db:
          g = 10;
          break a;

        case eb:
          g = 9;
          break a;

        case gb:
          g = 11;
          break a;

        case jb:
          g = 14;
          break a;

        case kb:
          g = 16;
          d = null;
          break a;

        case lb:
          g = 22;
          break a;
      }
      throw Error(u(130, null == a ? a : typeof a, ""));
  }
  b = Sh(g, c, b, e);
  b.elementType = a;
  b.type = d;
  b.expirationTime = f;
  return b;
}

function Wg(a, b, c, d) {
  a = Sh(7, a, d, b);
  a.expirationTime = c;
  return a;
}

function Tg(a, b, c) {
  a = Sh(6, a, null, b);
  a.expirationTime = c;
  return a;
}

function Vg(a, b, c) {
  b = Sh(4, null !== a.children ? a.children : [], a.key, b);
  b.expirationTime = c;
  b.stateNode = {
    containerInfo: a.containerInfo,
    pendingChildren: null,
    implementation: a.implementation
  };
  return b;
}

function ak(a, b, c) {
  this.tag = b;
  this.current = null;
  this.containerInfo = a;
  this.pingCache = this.pendingChildren = null;
  this.finishedExpirationTime = 0;
  this.finishedWork = null;
  this.timeoutHandle = -1;
  this.pendingContext = this.context = null;
  this.hydrate = c;
  this.callbackNode = null;
  this.callbackPriority = 90;
  this.lastExpiredTime = this.lastPingedTime = this.nextKnownPendingLevel = this.lastSuspendedTime = this.firstSuspendedTime = this.firstPendingTime = 0;
}

function Aj(a, b) {
  var c = a.firstSuspendedTime;
  a = a.lastSuspendedTime;
  return 0 !== c && c >= b && a <= b;
}

function xi(a, b) {
  var c = a.firstSuspendedTime,
      d = a.lastSuspendedTime;
  c < b && (a.firstSuspendedTime = b);
  if (d > b || 0 === c) a.lastSuspendedTime = b;
  b <= a.lastPingedTime && (a.lastPingedTime = 0);
  b <= a.lastExpiredTime && (a.lastExpiredTime = 0);
}

function yi(a, b) {
  b > a.firstPendingTime && (a.firstPendingTime = b);
  var c = a.firstSuspendedTime;
  0 !== c && (b >= c ? a.firstSuspendedTime = a.lastSuspendedTime = a.nextKnownPendingLevel = 0 : b >= a.lastSuspendedTime && (a.lastSuspendedTime = b + 1), b > a.nextKnownPendingLevel && (a.nextKnownPendingLevel = b));
}

function Cj(a, b) {
  var c = a.lastExpiredTime;
  if (0 === c || c > b) a.lastExpiredTime = b;
}

function bk(a, b, c, d) {
  var e = b.current,
      f = Gg(),
      g = Dg.suspense;
  f = Hg(f, e, g);

  a: if (c) {
    c = c._reactInternalFiber;

    b: {
      if (dc(c) !== c || 1 !== c.tag) throw Error(u(170));
      var h = c;

      do {
        switch (h.tag) {
          case 3:
            h = h.stateNode.context;
            break b;

          case 1:
            if (L(h.type)) {
              h = h.stateNode.__reactInternalMemoizedMergedChildContext;
              break b;
            }

        }

        h = h.return;
      } while (null !== h);

      throw Error(u(171));
    }

    if (1 === c.tag) {
      var k = c.type;

      if (L(k)) {
        c = Ff(c, k, h);
        break a;
      }
    }

    c = h;
  } else c = Af;

  null === b.context ? b.context = c : b.pendingContext = c;
  b = wg(f, g);
  b.payload = {
    element: a
  };
  d = void 0 === d ? null : d;
  null !== d && (b.callback = d);
  xg(e, b);
  Ig(e, f);
  return f;
}

function ck(a) {
  a = a.current;
  if (!a.child) return null;

  switch (a.child.tag) {
    case 5:
      return a.child.stateNode;

    default:
      return a.child.stateNode;
  }
}

function dk(a, b) {
  a = a.memoizedState;
  null !== a && null !== a.dehydrated && a.retryTime < b && (a.retryTime = b);
}

function ek(a, b) {
  dk(a, b);
  (a = a.alternate) && dk(a, b);
}

function fk(a, b, c) {
  c = null != c && !0 === c.hydrate;
  var d = new ak(a, b, c),
      e = Sh(3, null, null, 2 === b ? 7 : 1 === b ? 3 : 0);
  d.current = e;
  e.stateNode = d;
  ug(e);
  a[Od] = d.current;
  c && 0 !== b && Jc(a, 9 === a.nodeType ? a : a.ownerDocument);
  this._internalRoot = d;
}

fk.prototype.render = function (a) {
  bk(a, this._internalRoot, null, null);
};

fk.prototype.unmount = function () {
  var a = this._internalRoot,
      b = a.containerInfo;
  bk(null, a, null, function () {
    b[Od] = null;
  });
};

function gk(a) {
  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
}

function hk(a, b) {
  b || (b = a ? 9 === a.nodeType ? a.documentElement : a.firstChild : null, b = !(!b || 1 !== b.nodeType || !b.hasAttribute("data-reactroot")));
  if (!b) for (var c; c = a.lastChild;) a.removeChild(c);
  return new fk(a, 0, b ? {
    hydrate: !0
  } : void 0);
}

function ik(a, b, c, d, e) {
  var f = c._reactRootContainer;

  if (f) {
    var g = f._internalRoot;

    if ("function" === typeof e) {
      var h = e;

      e = function () {
        var a = ck(g);
        h.call(a);
      };
    }

    bk(b, g, a, e);
  } else {
    f = c._reactRootContainer = hk(c, d);
    g = f._internalRoot;

    if ("function" === typeof e) {
      var k = e;

      e = function () {
        var a = ck(g);
        k.call(a);
      };
    }

    Nj(function () {
      bk(b, g, a, e);
    });
  }

  return ck(g);
}

function jk(a, b, c) {
  var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
  return {
    $$typeof: $a,
    key: null == d ? null : "" + d,
    children: a,
    containerInfo: b,
    implementation: c
  };
}

wc = function (a) {
  if (13 === a.tag) {
    var b = hg(Gg(), 150, 100);
    Ig(a, b);
    ek(a, b);
  }
};

xc = function (a) {
  13 === a.tag && (Ig(a, 3), ek(a, 3));
};

yc = function (a) {
  if (13 === a.tag) {
    var b = Gg();
    b = Hg(b, a, null);
    Ig(a, b);
    ek(a, b);
  }
};

za = function (a, b, c) {
  switch (b) {
    case "input":
      Cb(a, c);
      b = c.name;

      if ("radio" === c.type && null != b) {
        for (c = a; c.parentNode;) c = c.parentNode;

        c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');

        for (b = 0; b < c.length; b++) {
          var d = c[b];

          if (d !== a && d.form === a.form) {
            var e = Qd(d);
            if (!e) throw Error(u(90));
            yb(d);
            Cb(d, e);
          }
        }
      }

      break;

    case "textarea":
      Kb(a, c);
      break;

    case "select":
      b = c.value, null != b && Hb(a, !!c.multiple, b, !1);
  }
};

Fa = Mj;

Ga = function (a, b, c, d, e) {
  var f = W;
  W |= 4;

  try {
    return cg(98, a.bind(null, b, c, d, e));
  } finally {
    W = f, W === V && gg();
  }
};

Ha = function () {
  (W & (1 | fj | gj)) === V && (Lj(), Dj());
};

Ia = function (a, b) {
  var c = W;
  W |= 2;

  try {
    return a(b);
  } finally {
    W = c, W === V && gg();
  }
};

function kk(a, b) {
  var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
  if (!gk(b)) throw Error(u(200));
  return jk(a, b, null, c);
}

var lk = {
  Events: [Nc, Pd, Qd, xa, ta, Xd, function (a) {
    jc(a, Wd);
  }, Da, Ea, id, mc, Dj, {
    current: !1
  }]
};

(function (a) {
  var b = a.findFiberByHostInstance;
  return Yj(n({}, a, {
    overrideHookState: null,
    overrideProps: null,
    setSuspenseHandler: null,
    scheduleUpdate: null,
    currentDispatcherRef: Wa.ReactCurrentDispatcher,
    findHostInstanceByFiber: function (a) {
      a = hc(a);
      return null === a ? null : a.stateNode;
    },
    findFiberByHostInstance: function (a) {
      return b ? b(a) : null;
    },
    findHostInstancesForRefresh: null,
    scheduleRefresh: null,
    scheduleRoot: null,
    setRefreshHandler: null,
    getCurrentFiber: null
  }));
})({
  findFiberByHostInstance: tc,
  bundleType: 0,
  version: "16.14.0",
  rendererPackageName: "react-dom"
});

exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = lk;
exports.createPortal = kk;

exports.findDOMNode = function (a) {
  if (null == a) return null;
  if (1 === a.nodeType) return a;
  var b = a._reactInternalFiber;

  if (void 0 === b) {
    if ("function" === typeof a.render) throw Error(u(188));
    throw Error(u(268, Object.keys(a)));
  }

  a = hc(b);
  a = null === a ? null : a.stateNode;
  return a;
};

exports.flushSync = function (a, b) {
  if ((W & (fj | gj)) !== V) throw Error(u(187));
  var c = W;
  W |= 1;

  try {
    return cg(99, a.bind(null, b));
  } finally {
    W = c, gg();
  }
};

exports.hydrate = function (a, b, c) {
  if (!gk(b)) throw Error(u(200));
  return ik(null, a, b, !0, c);
};

exports.render = function (a, b, c) {
  if (!gk(b)) throw Error(u(200));
  return ik(null, a, b, !1, c);
};

exports.unmountComponentAtNode = function (a) {
  if (!gk(a)) throw Error(u(40));
  return a._reactRootContainer ? (Nj(function () {
    ik(null, null, a, !1, function () {
      a._reactRootContainer = null;
      a[Od] = null;
    });
  }), !0) : !1;
};

exports.unstable_batchedUpdates = Mj;

exports.unstable_createPortal = function (a, b) {
  return kk(a, b, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);
};

exports.unstable_renderSubtreeIntoContainer = function (a, b, c, d) {
  if (!gk(c)) throw Error(u(200));
  if (null == a || void 0 === a._reactInternalFiber) throw Error(u(38));
  return ik(a, b, c, !1, d);
};

exports.version = "16.14.0";

/***/ }),

/***/ "./node_modules/react-dom/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
    return;
  }

  if (false) {}

  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (true) {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = __webpack_require__("./node_modules/react-dom/cjs/react-dom.production.min.js");
} else {}

/***/ }),

/***/ "./node_modules/react-is/cjs/react-is.production.min.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";
var __webpack_unused_export__;
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var b = "function" === typeof Symbol && Symbol.for,
    c = b ? Symbol.for("react.element") : 60103,
    d = b ? Symbol.for("react.portal") : 60106,
    e = b ? Symbol.for("react.fragment") : 60107,
    f = b ? Symbol.for("react.strict_mode") : 60108,
    g = b ? Symbol.for("react.profiler") : 60114,
    h = b ? Symbol.for("react.provider") : 60109,
    k = b ? Symbol.for("react.context") : 60110,
    l = b ? Symbol.for("react.async_mode") : 60111,
    m = b ? Symbol.for("react.concurrent_mode") : 60111,
    n = b ? Symbol.for("react.forward_ref") : 60112,
    p = b ? Symbol.for("react.suspense") : 60113,
    q = b ? Symbol.for("react.suspense_list") : 60120,
    r = b ? Symbol.for("react.memo") : 60115,
    t = b ? Symbol.for("react.lazy") : 60116,
    v = b ? Symbol.for("react.block") : 60121,
    w = b ? Symbol.for("react.fundamental") : 60117,
    x = b ? Symbol.for("react.responder") : 60118,
    y = b ? Symbol.for("react.scope") : 60119;

function z(a) {
  if ("object" === typeof a && null !== a) {
    var u = a.$$typeof;

    switch (u) {
      case c:
        switch (a = a.type, a) {
          case l:
          case m:
          case e:
          case g:
          case f:
          case p:
            return a;

          default:
            switch (a = a && a.$$typeof, a) {
              case k:
              case n:
              case t:
              case r:
              case h:
                return a;

              default:
                return u;
            }

        }

      case d:
        return u;
    }
  }
}

function A(a) {
  return z(a) === m;
}

__webpack_unused_export__ = l;
__webpack_unused_export__ = m;
__webpack_unused_export__ = k;
__webpack_unused_export__ = h;
__webpack_unused_export__ = c;
__webpack_unused_export__ = n;
__webpack_unused_export__ = e;
__webpack_unused_export__ = t;
__webpack_unused_export__ = r;
__webpack_unused_export__ = d;
__webpack_unused_export__ = g;
__webpack_unused_export__ = f;
__webpack_unused_export__ = p;

__webpack_unused_export__ = function (a) {
  return A(a) || z(a) === l;
};

__webpack_unused_export__ = A;

__webpack_unused_export__ = function (a) {
  return z(a) === k;
};

__webpack_unused_export__ = function (a) {
  return z(a) === h;
};

__webpack_unused_export__ = function (a) {
  return "object" === typeof a && null !== a && a.$$typeof === c;
};

exports.isForwardRef = function (a) {
  return z(a) === n;
};

__webpack_unused_export__ = function (a) {
  return z(a) === e;
};

__webpack_unused_export__ = function (a) {
  return z(a) === t;
};

exports.isMemo = function (a) {
  return z(a) === r;
};

__webpack_unused_export__ = function (a) {
  return z(a) === d;
};

__webpack_unused_export__ = function (a) {
  return z(a) === g;
};

__webpack_unused_export__ = function (a) {
  return z(a) === f;
};

__webpack_unused_export__ = function (a) {
  return z(a) === p;
};

__webpack_unused_export__ = function (a) {
  return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
};

__webpack_unused_export__ = z;

/***/ }),

/***/ "./node_modules/react-is/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (true) {
  module.exports = __webpack_require__("./node_modules/react-is/cjs/react-is.production.min.js");
} else {}

/***/ }),

/***/ "./node_modules/react/cjs/react.production.min.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/** @license React v16.14.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var l = __webpack_require__("./node_modules/object-assign/index.js"),
    n = "function" === typeof Symbol && Symbol.for,
    p = n ? Symbol.for("react.element") : 60103,
    q = n ? Symbol.for("react.portal") : 60106,
    r = n ? Symbol.for("react.fragment") : 60107,
    t = n ? Symbol.for("react.strict_mode") : 60108,
    u = n ? Symbol.for("react.profiler") : 60114,
    v = n ? Symbol.for("react.provider") : 60109,
    w = n ? Symbol.for("react.context") : 60110,
    x = n ? Symbol.for("react.forward_ref") : 60112,
    y = n ? Symbol.for("react.suspense") : 60113,
    z = n ? Symbol.for("react.memo") : 60115,
    A = n ? Symbol.for("react.lazy") : 60116,
    B = "function" === typeof Symbol && Symbol.iterator;

function C(a) {
  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) b += "&args[]=" + encodeURIComponent(arguments[c]);

  return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}

var D = {
  isMounted: function () {
    return !1;
  },
  enqueueForceUpdate: function () {},
  enqueueReplaceState: function () {},
  enqueueSetState: function () {}
},
    E = {};

function F(a, b, c) {
  this.props = a;
  this.context = b;
  this.refs = E;
  this.updater = c || D;
}

F.prototype.isReactComponent = {};

F.prototype.setState = function (a, b) {
  if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error(C(85));
  this.updater.enqueueSetState(this, a, b, "setState");
};

F.prototype.forceUpdate = function (a) {
  this.updater.enqueueForceUpdate(this, a, "forceUpdate");
};

function G() {}

G.prototype = F.prototype;

function H(a, b, c) {
  this.props = a;
  this.context = b;
  this.refs = E;
  this.updater = c || D;
}

var I = H.prototype = new G();
I.constructor = H;
l(I, F.prototype);
I.isPureReactComponent = !0;
var J = {
  current: null
},
    K = Object.prototype.hasOwnProperty,
    L = {
  key: !0,
  ref: !0,
  __self: !0,
  __source: !0
};

function M(a, b, c) {
  var e,
      d = {},
      g = null,
      k = null;
  if (null != b) for (e in void 0 !== b.ref && (k = b.ref), void 0 !== b.key && (g = "" + b.key), b) K.call(b, e) && !L.hasOwnProperty(e) && (d[e] = b[e]);
  var f = arguments.length - 2;
  if (1 === f) d.children = c;else if (1 < f) {
    for (var h = Array(f), m = 0; m < f; m++) h[m] = arguments[m + 2];

    d.children = h;
  }
  if (a && a.defaultProps) for (e in f = a.defaultProps, f) void 0 === d[e] && (d[e] = f[e]);
  return {
    $$typeof: p,
    type: a,
    key: g,
    ref: k,
    props: d,
    _owner: J.current
  };
}

function N(a, b) {
  return {
    $$typeof: p,
    type: a.type,
    key: b,
    ref: a.ref,
    props: a.props,
    _owner: a._owner
  };
}

function O(a) {
  return "object" === typeof a && null !== a && a.$$typeof === p;
}

function escape(a) {
  var b = {
    "=": "=0",
    ":": "=2"
  };
  return "$" + ("" + a).replace(/[=:]/g, function (a) {
    return b[a];
  });
}

var P = /\/+/g,
    Q = [];

function R(a, b, c, e) {
  if (Q.length) {
    var d = Q.pop();
    d.result = a;
    d.keyPrefix = b;
    d.func = c;
    d.context = e;
    d.count = 0;
    return d;
  }

  return {
    result: a,
    keyPrefix: b,
    func: c,
    context: e,
    count: 0
  };
}

function S(a) {
  a.result = null;
  a.keyPrefix = null;
  a.func = null;
  a.context = null;
  a.count = 0;
  10 > Q.length && Q.push(a);
}

function T(a, b, c, e) {
  var d = typeof a;
  if ("undefined" === d || "boolean" === d) a = null;
  var g = !1;
  if (null === a) g = !0;else switch (d) {
    case "string":
    case "number":
      g = !0;
      break;

    case "object":
      switch (a.$$typeof) {
        case p:
        case q:
          g = !0;
      }

  }
  if (g) return c(e, a, "" === b ? "." + U(a, 0) : b), 1;
  g = 0;
  b = "" === b ? "." : b + ":";
  if (Array.isArray(a)) for (var k = 0; k < a.length; k++) {
    d = a[k];
    var f = b + U(d, k);
    g += T(d, f, c, e);
  } else if (null === a || "object" !== typeof a ? f = null : (f = B && a[B] || a["@@iterator"], f = "function" === typeof f ? f : null), "function" === typeof f) for (a = f.call(a), k = 0; !(d = a.next()).done;) d = d.value, f = b + U(d, k++), g += T(d, f, c, e);else if ("object" === d) throw c = "" + a, Error(C(31, "[object Object]" === c ? "object with keys {" + Object.keys(a).join(", ") + "}" : c, ""));
  return g;
}

function V(a, b, c) {
  return null == a ? 0 : T(a, "", b, c);
}

function U(a, b) {
  return "object" === typeof a && null !== a && null != a.key ? escape(a.key) : b.toString(36);
}

function W(a, b) {
  a.func.call(a.context, b, a.count++);
}

function aa(a, b, c) {
  var e = a.result,
      d = a.keyPrefix;
  a = a.func.call(a.context, b, a.count++);
  Array.isArray(a) ? X(a, e, c, function (a) {
    return a;
  }) : null != a && (O(a) && (a = N(a, d + (!a.key || b && b.key === a.key ? "" : ("" + a.key).replace(P, "$&/") + "/") + c)), e.push(a));
}

function X(a, b, c, e, d) {
  var g = "";
  null != c && (g = ("" + c).replace(P, "$&/") + "/");
  b = R(b, g, e, d);
  V(a, aa, b);
  S(b);
}

var Y = {
  current: null
};

function Z() {
  var a = Y.current;
  if (null === a) throw Error(C(321));
  return a;
}

var ba = {
  ReactCurrentDispatcher: Y,
  ReactCurrentBatchConfig: {
    suspense: null
  },
  ReactCurrentOwner: J,
  IsSomeRendererActing: {
    current: !1
  },
  assign: l
};
exports.Children = {
  map: function (a, b, c) {
    if (null == a) return a;
    var e = [];
    X(a, e, null, b, c);
    return e;
  },
  forEach: function (a, b, c) {
    if (null == a) return a;
    b = R(null, null, b, c);
    V(a, W, b);
    S(b);
  },
  count: function (a) {
    return V(a, function () {
      return null;
    }, null);
  },
  toArray: function (a) {
    var b = [];
    X(a, b, null, function (a) {
      return a;
    });
    return b;
  },
  only: function (a) {
    if (!O(a)) throw Error(C(143));
    return a;
  }
};
exports.Component = F;
exports.Fragment = r;
exports.Profiler = u;
exports.PureComponent = H;
exports.StrictMode = t;
exports.Suspense = y;
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ba;

exports.cloneElement = function (a, b, c) {
  if (null === a || void 0 === a) throw Error(C(267, a));
  var e = l({}, a.props),
      d = a.key,
      g = a.ref,
      k = a._owner;

  if (null != b) {
    void 0 !== b.ref && (g = b.ref, k = J.current);
    void 0 !== b.key && (d = "" + b.key);
    if (a.type && a.type.defaultProps) var f = a.type.defaultProps;

    for (h in b) K.call(b, h) && !L.hasOwnProperty(h) && (e[h] = void 0 === b[h] && void 0 !== f ? f[h] : b[h]);
  }

  var h = arguments.length - 2;
  if (1 === h) e.children = c;else if (1 < h) {
    f = Array(h);

    for (var m = 0; m < h; m++) f[m] = arguments[m + 2];

    e.children = f;
  }
  return {
    $$typeof: p,
    type: a.type,
    key: d,
    ref: g,
    props: e,
    _owner: k
  };
};

exports.createContext = function (a, b) {
  void 0 === b && (b = null);
  a = {
    $$typeof: w,
    _calculateChangedBits: b,
    _currentValue: a,
    _currentValue2: a,
    _threadCount: 0,
    Provider: null,
    Consumer: null
  };
  a.Provider = {
    $$typeof: v,
    _context: a
  };
  return a.Consumer = a;
};

exports.createElement = M;

exports.createFactory = function (a) {
  var b = M.bind(null, a);
  b.type = a;
  return b;
};

exports.createRef = function () {
  return {
    current: null
  };
};

exports.forwardRef = function (a) {
  return {
    $$typeof: x,
    render: a
  };
};

exports.isValidElement = O;

exports.lazy = function (a) {
  return {
    $$typeof: A,
    _ctor: a,
    _status: -1,
    _result: null
  };
};

exports.memo = function (a, b) {
  return {
    $$typeof: z,
    type: a,
    compare: void 0 === b ? null : b
  };
};

exports.useCallback = function (a, b) {
  return Z().useCallback(a, b);
};

exports.useContext = function (a, b) {
  return Z().useContext(a, b);
};

exports.useDebugValue = function () {};

exports.useEffect = function (a, b) {
  return Z().useEffect(a, b);
};

exports.useImperativeHandle = function (a, b, c) {
  return Z().useImperativeHandle(a, b, c);
};

exports.useLayoutEffect = function (a, b) {
  return Z().useLayoutEffect(a, b);
};

exports.useMemo = function (a, b) {
  return Z().useMemo(a, b);
};

exports.useReducer = function (a, b, c) {
  return Z().useReducer(a, b, c);
};

exports.useRef = function (a) {
  return Z().useRef(a);
};

exports.useState = function (a) {
  return Z().useState(a);
};

exports.version = "16.14.0";

/***/ }),

/***/ "./node_modules/react/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (true) {
  module.exports = __webpack_require__("./node_modules/react/cjs/react.production.min.js");
} else {}

/***/ }),

/***/ "./node_modules/scheduler/cjs/scheduler.production.min.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var f, g, h, k, l;

if ("undefined" === typeof window || "function" !== typeof MessageChannel) {
  var p = null,
      q = null,
      t = function () {
    if (null !== p) try {
      var a = exports.unstable_now();
      p(!0, a);
      p = null;
    } catch (b) {
      throw setTimeout(t, 0), b;
    }
  },
      u = Date.now();

  exports.unstable_now = function () {
    return Date.now() - u;
  };

  f = function (a) {
    null !== p ? setTimeout(f, 0, a) : (p = a, setTimeout(t, 0));
  };

  g = function (a, b) {
    q = setTimeout(a, b);
  };

  h = function () {
    clearTimeout(q);
  };

  k = function () {
    return !1;
  };

  l = exports.unstable_forceFrameRate = function () {};
} else {
  var w = window.performance,
      x = window.Date,
      y = window.setTimeout,
      z = window.clearTimeout;

  if ("undefined" !== typeof console) {
    var A = window.cancelAnimationFrame;
    "function" !== typeof window.requestAnimationFrame && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
    "function" !== typeof A && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
  }

  if ("object" === typeof w && "function" === typeof w.now) exports.unstable_now = function () {
    return w.now();
  };else {
    var B = x.now();

    exports.unstable_now = function () {
      return x.now() - B;
    };
  }
  var C = !1,
      D = null,
      E = -1,
      F = 5,
      G = 0;

  k = function () {
    return exports.unstable_now() >= G;
  };

  l = function () {};

  exports.unstable_forceFrameRate = function (a) {
    0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported") : F = 0 < a ? Math.floor(1E3 / a) : 5;
  };

  var H = new MessageChannel(),
      I = H.port2;

  H.port1.onmessage = function () {
    if (null !== D) {
      var a = exports.unstable_now();
      G = a + F;

      try {
        D(!0, a) ? I.postMessage(null) : (C = !1, D = null);
      } catch (b) {
        throw I.postMessage(null), b;
      }
    } else C = !1;
  };

  f = function (a) {
    D = a;
    C || (C = !0, I.postMessage(null));
  };

  g = function (a, b) {
    E = y(function () {
      a(exports.unstable_now());
    }, b);
  };

  h = function () {
    z(E);
    E = -1;
  };
}

function J(a, b) {
  var c = a.length;
  a.push(b);

  a: for (;;) {
    var d = c - 1 >>> 1,
        e = a[d];
    if (void 0 !== e && 0 < K(e, b)) a[d] = b, a[c] = e, c = d;else break a;
  }
}

function L(a) {
  a = a[0];
  return void 0 === a ? null : a;
}

function M(a) {
  var b = a[0];

  if (void 0 !== b) {
    var c = a.pop();

    if (c !== b) {
      a[0] = c;

      a: for (var d = 0, e = a.length; d < e;) {
        var m = 2 * (d + 1) - 1,
            n = a[m],
            v = m + 1,
            r = a[v];
        if (void 0 !== n && 0 > K(n, c)) void 0 !== r && 0 > K(r, n) ? (a[d] = r, a[v] = c, d = v) : (a[d] = n, a[m] = c, d = m);else if (void 0 !== r && 0 > K(r, c)) a[d] = r, a[v] = c, d = v;else break a;
      }
    }

    return b;
  }

  return null;
}

function K(a, b) {
  var c = a.sortIndex - b.sortIndex;
  return 0 !== c ? c : a.id - b.id;
}

var N = [],
    O = [],
    P = 1,
    Q = null,
    R = 3,
    S = !1,
    T = !1,
    U = !1;

function V(a) {
  for (var b = L(O); null !== b;) {
    if (null === b.callback) M(O);else if (b.startTime <= a) M(O), b.sortIndex = b.expirationTime, J(N, b);else break;
    b = L(O);
  }
}

function W(a) {
  U = !1;
  V(a);
  if (!T) if (null !== L(N)) T = !0, f(X);else {
    var b = L(O);
    null !== b && g(W, b.startTime - a);
  }
}

function X(a, b) {
  T = !1;
  U && (U = !1, h());
  S = !0;
  var c = R;

  try {
    V(b);

    for (Q = L(N); null !== Q && (!(Q.expirationTime > b) || a && !k());) {
      var d = Q.callback;

      if (null !== d) {
        Q.callback = null;
        R = Q.priorityLevel;
        var e = d(Q.expirationTime <= b);
        b = exports.unstable_now();
        "function" === typeof e ? Q.callback = e : Q === L(N) && M(N);
        V(b);
      } else M(N);

      Q = L(N);
    }

    if (null !== Q) var m = !0;else {
      var n = L(O);
      null !== n && g(W, n.startTime - b);
      m = !1;
    }
    return m;
  } finally {
    Q = null, R = c, S = !1;
  }
}

function Y(a) {
  switch (a) {
    case 1:
      return -1;

    case 2:
      return 250;

    case 5:
      return 1073741823;

    case 4:
      return 1E4;

    default:
      return 5E3;
  }
}

var Z = l;
exports.unstable_IdlePriority = 5;
exports.unstable_ImmediatePriority = 1;
exports.unstable_LowPriority = 4;
exports.unstable_NormalPriority = 3;
exports.unstable_Profiling = null;
exports.unstable_UserBlockingPriority = 2;

exports.unstable_cancelCallback = function (a) {
  a.callback = null;
};

exports.unstable_continueExecution = function () {
  T || S || (T = !0, f(X));
};

exports.unstable_getCurrentPriorityLevel = function () {
  return R;
};

exports.unstable_getFirstCallbackNode = function () {
  return L(N);
};

exports.unstable_next = function (a) {
  switch (R) {
    case 1:
    case 2:
    case 3:
      var b = 3;
      break;

    default:
      b = R;
  }

  var c = R;
  R = b;

  try {
    return a();
  } finally {
    R = c;
  }
};

exports.unstable_pauseExecution = function () {};

exports.unstable_requestPaint = Z;

exports.unstable_runWithPriority = function (a, b) {
  switch (a) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      break;

    default:
      a = 3;
  }

  var c = R;
  R = a;

  try {
    return b();
  } finally {
    R = c;
  }
};

exports.unstable_scheduleCallback = function (a, b, c) {
  var d = exports.unstable_now();

  if ("object" === typeof c && null !== c) {
    var e = c.delay;
    e = "number" === typeof e && 0 < e ? d + e : d;
    c = "number" === typeof c.timeout ? c.timeout : Y(a);
  } else c = Y(a), e = d;

  c = e + c;
  a = {
    id: P++,
    callback: b,
    priorityLevel: a,
    startTime: e,
    expirationTime: c,
    sortIndex: -1
  };
  e > d ? (a.sortIndex = e, J(O, a), null === L(N) && a === L(O) && (U ? h() : U = !0, g(W, e - d))) : (a.sortIndex = c, J(N, a), T || S || (T = !0, f(X)));
  return a;
};

exports.unstable_shouldYield = function () {
  var a = exports.unstable_now();
  V(a);
  var b = L(N);
  return b !== Q && null !== Q && null !== b && null !== b.callback && b.startTime <= a && b.expirationTime < Q.expirationTime || k();
};

exports.unstable_wrapCallback = function (a) {
  var b = R;
  return function () {
    var c = R;
    R = b;

    try {
      return a.apply(this, arguments);
    } finally {
      R = c;
    }
  };
};

/***/ }),

/***/ "./node_modules/scheduler/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (true) {
  module.exports = __webpack_require__("./node_modules/scheduler/cjs/scheduler.production.min.js");
} else {}

/***/ }),

/***/ "./node_modules/uri-js/dist/es5/uri.all.js":
/***/ (function(__unused_webpack_module, exports) {

/** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */
(function (global, factory) {
   true ? factory(exports) : 0;
})(this, function (exports) {
  'use strict';

  function merge() {
    for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
      sets[_key] = arguments[_key];
    }

    if (sets.length > 1) {
      sets[0] = sets[0].slice(0, -1);
      var xl = sets.length - 1;

      for (var x = 1; x < xl; ++x) {
        sets[x] = sets[x].slice(1, -1);
      }

      sets[xl] = sets[xl].slice(1);
      return sets.join('');
    } else {
      return sets[0];
    }
  }

  function subexp(str) {
    return "(?:" + str + ")";
  }

  function typeOf(o) {
    return o === undefined ? "undefined" : o === null ? "null" : Object.prototype.toString.call(o).split(" ").pop().split("]").shift().toLowerCase();
  }

  function toUpperCase(str) {
    return str.toUpperCase();
  }

  function toArray(obj) {
    return obj !== undefined && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];
  }

  function assign(target, source) {
    var obj = target;

    if (source) {
      for (var key in source) {
        obj[key] = source[key];
      }
    }

    return obj;
  }

  function buildExps(isIRI) {
    var ALPHA$$ = "[A-Za-z]",
        CR$ = "[\\x0D]",
        DIGIT$$ = "[0-9]",
        DQUOTE$$ = "[\\x22]",
        HEXDIG$$ = merge(DIGIT$$, "[A-Fa-f]"),
        //case-insensitive
    LF$$ = "[\\x0A]",
        SP$$ = "[\\x20]",
        PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)),
        //expanded
    GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]",
        SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",
        RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),
        UCSCHAR$$ = isIRI ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]",
        //subset, excludes bidi control characters
    IPRIVATE$$ = isIRI ? "[\\uE000-\\uF8FF]" : "[]",
        //subset
    UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$),
        SCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*"),
        USERINFO$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]")) + "*"),
        DEC_OCTET$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("[1-9]" + DIGIT$$) + "|" + DIGIT$$),
        DEC_OCTET_RELAXED$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$),
        //relaxed parsing rules
    IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$),
        H16$ = subexp(HEXDIG$$ + "{1,4}"),
        LS32$ = subexp(subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$),
        IPV6ADDRESS1$ = subexp(subexp(H16$ + "\\:") + "{6}" + LS32$),
        //                           6( h16 ":" ) ls32
    IPV6ADDRESS2$ = subexp("\\:\\:" + subexp(H16$ + "\\:") + "{5}" + LS32$),
        //                      "::" 5( h16 ":" ) ls32
    IPV6ADDRESS3$ = subexp(subexp(H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{4}" + LS32$),
        //[               h16 ] "::" 4( h16 ":" ) ls32
    IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{3}" + LS32$),
        //[ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
    IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{2}" + LS32$),
        //[ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
    IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$),
        //[ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
    IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$),
        //[ *4( h16 ":" ) h16 ] "::"              ls32
    IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$),
        //[ *5( h16 ":" ) h16 ] "::"              h16
    IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"),
        //[ *6( h16 ":" ) h16 ] "::"
    IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")),
        ZONEID$ = subexp(subexp(UNRESERVED$$ + "|" + PCT_ENCODED$) + "+"),
        //RFC 6874
    IPV6ADDRZ$ = subexp(IPV6ADDRESS$ + "\\%25" + ZONEID$),
        //RFC 6874
    IPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + ZONEID$),
        //RFC 6874, with relaxed parsing rules
    IPVFUTURE$ = subexp("[vV]" + HEXDIG$$ + "+\\." + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]") + "+"),
        IP_LITERAL$ = subexp("\\[" + subexp(IPV6ADDRZ_RELAXED$ + "|" + IPV6ADDRESS$ + "|" + IPVFUTURE$) + "\\]"),
        //RFC 6874
    REG_NAME$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$)) + "*"),
        HOST$ = subexp(IP_LITERAL$ + "|" + IPV4ADDRESS$ + "(?!" + REG_NAME$ + ")" + "|" + REG_NAME$),
        PORT$ = subexp(DIGIT$$ + "*"),
        AUTHORITY$ = subexp(subexp(USERINFO$ + "@") + "?" + HOST$ + subexp("\\:" + PORT$) + "?"),
        PCHAR$ = subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@]")),
        SEGMENT$ = subexp(PCHAR$ + "*"),
        SEGMENT_NZ$ = subexp(PCHAR$ + "+"),
        SEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\@]")) + "+"),
        PATH_ABEMPTY$ = subexp(subexp("\\/" + SEGMENT$) + "*"),
        PATH_ABSOLUTE$ = subexp("\\/" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + "?"),
        //simplified
    PATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$),
        //simplified
    PATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$),
        //simplified
    PATH_EMPTY$ = "(?!" + PCHAR$ + ")",
        PATH$ = subexp(PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$),
        QUERY$ = subexp(subexp(PCHAR$ + "|" + merge("[\\/\\?]", IPRIVATE$$)) + "*"),
        FRAGMENT$ = subexp(subexp(PCHAR$ + "|[\\/\\?]") + "*"),
        HIER_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$),
        URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"),
        RELATIVE_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$),
        RELATIVE$ = subexp(RELATIVE_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"),
        URI_REFERENCE$ = subexp(URI$ + "|" + RELATIVE$),
        ABSOLUTE_URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?"),
        GENERIC_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$",
        RELATIVE_REF$ = "^(){0}" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$",
        ABSOLUTE_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?$",
        SAMEDOC_REF$ = "^" + subexp("\\#(" + FRAGMENT$ + ")") + "?$",
        AUTHORITY_REF$ = "^" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?$";
    return {
      NOT_SCHEME: new RegExp(merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
      NOT_USERINFO: new RegExp(merge("[^\\%\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
      NOT_HOST: new RegExp(merge("[^\\%\\[\\]\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
      NOT_PATH: new RegExp(merge("[^\\%\\/\\:\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
      NOT_PATH_NOSCHEME: new RegExp(merge("[^\\%\\/\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
      NOT_QUERY: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
      NOT_FRAGMENT: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
      ESCAPE: new RegExp(merge("[^]", UNRESERVED$$, SUB_DELIMS$$), "g"),
      UNRESERVED: new RegExp(UNRESERVED$$, "g"),
      OTHER_CHARS: new RegExp(merge("[^\\%]", UNRESERVED$$, RESERVED$$), "g"),
      PCT_ENCODED: new RegExp(PCT_ENCODED$, "g"),
      IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
      IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + subexp(subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$") //RFC 6874, with relaxed parsing rules

    };
  }

  var URI_PROTOCOL = buildExps(false);
  var IRI_PROTOCOL = buildExps(true);

  var slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  var toConsumableArray = function (arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    } else {
      return Array.from(arr);
    }
  };
  /** Highest positive signed 32-bit float value */


  var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

  /** Bootstring parameters */

  var base = 36;
  var tMin = 1;
  var tMax = 26;
  var skew = 38;
  var damp = 700;
  var initialBias = 72;
  var initialN = 128; // 0x80

  var delimiter = '-'; // '\x2D'

  /** Regular expressions */

  var regexPunycode = /^xn--/;
  var regexNonASCII = /[^\0-\x7E]/; // non-ASCII chars

  var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

  /** Error messages */

  var errors = {
    'overflow': 'Overflow: input needs wider integers to process',
    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    'invalid-input': 'Invalid input'
  };
  /** Convenience shortcuts */

  var baseMinusTMin = base - tMin;
  var floor = Math.floor;
  var stringFromCharCode = String.fromCharCode;
  /*--------------------------------------------------------------------------*/

  /**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a `RangeError` with the applicable error message.
   */

  function error$1(type) {
    throw new RangeError(errors[type]);
  }
  /**
   * A generic `Array#map` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */


  function map(array, fn) {
    var result = [];
    var length = array.length;

    while (length--) {
      result[length] = fn(array[length]);
    }

    return result;
  }
  /**
   * A simple `Array#map`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {Array} A new string of characters returned by the callback
   * function.
   */


  function mapDomain(string, fn) {
    var parts = string.split('@');
    var result = '';

    if (parts.length > 1) {
      // In email addresses, only the domain name should be punycoded. Leave
      // the local part (i.e. everything up to `@`) intact.
      result = parts[0] + '@';
      string = parts[1];
    } // Avoid `split(regex)` for IE8 compatibility. See #17.


    string = string.replace(regexSeparators, '\x2E');
    var labels = string.split('.');
    var encoded = map(labels, fn).join('.');
    return result + encoded;
  }
  /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */


  function ucs2decode(string) {
    var output = [];
    var counter = 0;
    var length = string.length;

    while (counter < length) {
      var value = string.charCodeAt(counter++);

      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
        // It's a high surrogate, and there is a next character.
        var extra = string.charCodeAt(counter++);

        if ((extra & 0xFC00) == 0xDC00) {
          // Low surrogate.
          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
        } else {
          // It's an unmatched surrogate; only append this code unit, in case the
          // next code unit is the high surrogate of a surrogate pair.
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }

    return output;
  }
  /**
   * Creates a string based on an array of numeric code points.
   * @see `punycode.ucs2.decode`
   * @memberOf punycode.ucs2
   * @name encode
   * @param {Array} codePoints The array of numeric code points.
   * @returns {String} The new Unicode string (UCS-2).
   */


  var ucs2encode = function ucs2encode(array) {
    return String.fromCodePoint.apply(String, toConsumableArray(array));
  };
  /**
   * Converts a basic code point into a digit/integer.
   * @see `digitToBasic()`
   * @private
   * @param {Number} codePoint The basic numeric code point value.
   * @returns {Number} The numeric value of a basic code point (for use in
   * representing integers) in the range `0` to `base - 1`, or `base` if
   * the code point does not represent a value.
   */


  var basicToDigit = function basicToDigit(codePoint) {
    if (codePoint - 0x30 < 0x0A) {
      return codePoint - 0x16;
    }

    if (codePoint - 0x41 < 0x1A) {
      return codePoint - 0x41;
    }

    if (codePoint - 0x61 < 0x1A) {
      return codePoint - 0x61;
    }

    return base;
  };
  /**
   * Converts a digit/integer into a basic code point.
   * @see `basicToDigit()`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is `digit`, which needs to be in the range
   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if `flag` is non-zero and `digit` has no uppercase form.
   */


  var digitToBasic = function digitToBasic(digit, flag) {
    //  0..25 map to ASCII a..z or A..Z
    // 26..35 map to ASCII 0..9
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  };
  /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */


  var adapt = function adapt(delta, numPoints, firstTime) {
    var k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);

    for (;
    /* no initialization */
    delta > baseMinusTMin * tMax >> 1; k += base) {
      delta = floor(delta / baseMinusTMin);
    }

    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  };
  /**
   * Converts a Punycode string of ASCII-only symbols to a string of Unicode
   * symbols.
   * @memberOf punycode
   * @param {String} input The Punycode string of ASCII-only symbols.
   * @returns {String} The resulting string of Unicode symbols.
   */


  var decode = function decode(input) {
    // Don't use UCS-2.
    var output = [];
    var inputLength = input.length;
    var i = 0;
    var n = initialN;
    var bias = initialBias; // Handle the basic code points: let `basic` be the number of input code
    // points before the last delimiter, or `0` if there is none, then copy
    // the first basic code points to the output.

    var basic = input.lastIndexOf(delimiter);

    if (basic < 0) {
      basic = 0;
    }

    for (var j = 0; j < basic; ++j) {
      // if it's not a basic code point
      if (input.charCodeAt(j) >= 0x80) {
        error$1('not-basic');
      }

      output.push(input.charCodeAt(j));
    } // Main decoding loop: start just after the last delimiter if any basic code
    // points were copied; start at the beginning otherwise.


    for (var index = basic > 0 ? basic + 1 : 0; index < inputLength;)
    /* no final expression */
    {
      // `index` is the index of the next character to be consumed.
      // Decode a generalized variable-length integer into `delta`,
      // which gets added to `i`. The overflow checking is easier
      // if we increase `i` as we go, then subtract off its starting
      // value at the end to obtain `delta`.
      var oldi = i;

      for (var w = 1, k = base;;
      /* no condition */
      k += base) {
        if (index >= inputLength) {
          error$1('invalid-input');
        }

        var digit = basicToDigit(input.charCodeAt(index++));

        if (digit >= base || digit > floor((maxInt - i) / w)) {
          error$1('overflow');
        }

        i += digit * w;
        var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

        if (digit < t) {
          break;
        }

        var baseMinusT = base - t;

        if (w > floor(maxInt / baseMinusT)) {
          error$1('overflow');
        }

        w *= baseMinusT;
      }

      var out = output.length + 1;
      bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,
      // incrementing `n` each time, so we'll fix that now:

      if (floor(i / out) > maxInt - n) {
        error$1('overflow');
      }

      n += floor(i / out);
      i %= out; // Insert `n` at position `i` of the output.

      output.splice(i++, 0, n);
    }

    return String.fromCodePoint.apply(String, output);
  };
  /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */


  var encode = function encode(input) {
    var output = []; // Convert the input in UCS-2 to an array of Unicode code points.

    input = ucs2decode(input); // Cache the length.

    var inputLength = input.length; // Initialize the state.

    var n = initialN;
    var delta = 0;
    var bias = initialBias; // Handle the basic code points.

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _currentValue2 = _step.value;

        if (_currentValue2 < 0x80) {
          output.push(stringFromCharCode(_currentValue2));
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    var basicLength = output.length;
    var handledCPCount = basicLength; // `handledCPCount` is the number of code points that have been handled;
    // `basicLength` is the number of basic code points.
    // Finish the basic string with a delimiter unless it's empty.

    if (basicLength) {
      output.push(delimiter);
    } // Main encoding loop:


    while (handledCPCount < inputLength) {
      // All non-basic code points < n have been handled already. Find the next
      // larger one:
      var m = maxInt;
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var currentValue = _step2.value;

          if (currentValue >= n && currentValue < m) {
            m = currentValue;
          }
        } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
        // but guard against overflow.

      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      var handledCPCountPlusOne = handledCPCount + 1;

      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
        error$1('overflow');
      }

      delta += (m - n) * handledCPCountPlusOne;
      n = m;
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var _currentValue = _step3.value;

          if (_currentValue < n && ++delta > maxInt) {
            error$1('overflow');
          }

          if (_currentValue == n) {
            // Represent delta as a generalized variable-length integer.
            var q = delta;

            for (var k = base;;
            /* no condition */
            k += base) {
              var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

              if (q < t) {
                break;
              }

              var qMinusT = q - t;
              var baseMinusT = base - t;
              output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
              q = floor(qMinusT / baseMinusT);
            }

            output.push(stringFromCharCode(digitToBasic(q, 0)));
            bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
            delta = 0;
            ++handledCPCount;
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      ++delta;
      ++n;
    }

    return output.join('');
  };
  /**
   * Converts a Punycode string representing a domain name or an email address
   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
   * it doesn't matter if you call it on a string that has already been
   * converted to Unicode.
   * @memberOf punycode
   * @param {String} input The Punycoded domain name or email address to
   * convert to Unicode.
   * @returns {String} The Unicode representation of the given Punycode
   * string.
   */


  var toUnicode = function toUnicode(input) {
    return mapDomain(input, function (string) {
      return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
    });
  };
  /**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */


  var toASCII = function toASCII(input) {
    return mapDomain(input, function (string) {
      return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
    });
  };
  /*--------------------------------------------------------------------------*/

  /** Define the public API */


  var punycode = {
    /**
     * A string representing the current Punycode.js version number.
     * @memberOf punycode
     * @type String
     */
    'version': '2.1.0',

    /**
     * An object of methods to convert from JavaScript's internal character
     * representation (UCS-2) to Unicode code points, and back.
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode
     * @type Object
     */
    'ucs2': {
      'decode': ucs2decode,
      'encode': ucs2encode
    },
    'decode': decode,
    'encode': encode,
    'toASCII': toASCII,
    'toUnicode': toUnicode
  };
  /**
   * URI.js
   *
   * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.
   * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
   * @see http://github.com/garycourt/uri-js
   */

  /**
   * Copyright 2011 Gary Court. All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification, are
   * permitted provided that the following conditions are met:
   *
   *    1. Redistributions of source code must retain the above copyright notice, this list of
   *       conditions and the following disclaimer.
   *
   *    2. Redistributions in binary form must reproduce the above copyright notice, this list
   *       of conditions and the following disclaimer in the documentation and/or other materials
   *       provided with the distribution.
   *
   * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED
   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
   * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR
   * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
   * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
   * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *
   * The views and conclusions contained in the software and documentation are those of the
   * authors and should not be interpreted as representing official policies, either expressed
   * or implied, of Gary Court.
   */

  var SCHEMES = {};

  function pctEncChar(chr) {
    var c = chr.charCodeAt(0);
    var e = void 0;
    if (c < 16) e = "%0" + c.toString(16).toUpperCase();else if (c < 128) e = "%" + c.toString(16).toUpperCase();else if (c < 2048) e = "%" + (c >> 6 | 192).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();else e = "%" + (c >> 12 | 224).toString(16).toUpperCase() + "%" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
    return e;
  }

  function pctDecChars(str) {
    var newStr = "";
    var i = 0;
    var il = str.length;

    while (i < il) {
      var c = parseInt(str.substr(i + 1, 2), 16);

      if (c < 128) {
        newStr += String.fromCharCode(c);
        i += 3;
      } else if (c >= 194 && c < 224) {
        if (il - i >= 6) {
          var c2 = parseInt(str.substr(i + 4, 2), 16);
          newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);
        } else {
          newStr += str.substr(i, 6);
        }

        i += 6;
      } else if (c >= 224) {
        if (il - i >= 9) {
          var _c = parseInt(str.substr(i + 4, 2), 16);

          var c3 = parseInt(str.substr(i + 7, 2), 16);
          newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);
        } else {
          newStr += str.substr(i, 9);
        }

        i += 9;
      } else {
        newStr += str.substr(i, 3);
        i += 3;
      }
    }

    return newStr;
  }

  function _normalizeComponentEncoding(components, protocol) {
    function decodeUnreserved(str) {
      var decStr = pctDecChars(str);
      return !decStr.match(protocol.UNRESERVED) ? str : decStr;
    }

    if (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, "");
    if (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    if (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    if (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    if (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    if (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    return components;
  }

  function _stripLeadingZeros(str) {
    return str.replace(/^0*(.*)/, "$1") || "0";
  }

  function _normalizeIPv4(host, protocol) {
    var matches = host.match(protocol.IPV4ADDRESS) || [];

    var _matches = slicedToArray(matches, 2),
        address = _matches[1];

    if (address) {
      return address.split(".").map(_stripLeadingZeros).join(".");
    } else {
      return host;
    }
  }

  function _normalizeIPv6(host, protocol) {
    var matches = host.match(protocol.IPV6ADDRESS) || [];

    var _matches2 = slicedToArray(matches, 3),
        address = _matches2[1],
        zone = _matches2[2];

    if (address) {
      var _address$toLowerCase$ = address.toLowerCase().split('::').reverse(),
          _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2),
          last = _address$toLowerCase$2[0],
          first = _address$toLowerCase$2[1];

      var firstFields = first ? first.split(":").map(_stripLeadingZeros) : [];
      var lastFields = last.split(":").map(_stripLeadingZeros);
      var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
      var fieldCount = isLastFieldIPv4Address ? 7 : 8;
      var lastFieldsStart = lastFields.length - fieldCount;
      var fields = Array(fieldCount);

      for (var x = 0; x < fieldCount; ++x) {
        fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';
      }

      if (isLastFieldIPv4Address) {
        fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);
      }

      var allZeroFields = fields.reduce(function (acc, field, index) {
        if (!field || field === "0") {
          var lastLongest = acc[acc.length - 1];

          if (lastLongest && lastLongest.index + lastLongest.length === index) {
            lastLongest.length++;
          } else {
            acc.push({
              index: index,
              length: 1
            });
          }
        }

        return acc;
      }, []);
      var longestZeroFields = allZeroFields.sort(function (a, b) {
        return b.length - a.length;
      })[0];
      var newHost = void 0;

      if (longestZeroFields && longestZeroFields.length > 1) {
        var newFirst = fields.slice(0, longestZeroFields.index);
        var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);
        newHost = newFirst.join(":") + "::" + newLast.join(":");
      } else {
        newHost = fields.join(":");
      }

      if (zone) {
        newHost += "%" + zone;
      }

      return newHost;
    } else {
      return host;
    }
  }

  var URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
  var NO_MATCH_IS_UNDEFINED = "".match(/(){0}/)[1] === undefined;

  function parse(uriString) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var components = {};
    var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
    if (options.reference === "suffix") uriString = (options.scheme ? options.scheme + ":" : "") + "//" + uriString;
    var matches = uriString.match(URI_PARSE);

    if (matches) {
      if (NO_MATCH_IS_UNDEFINED) {
        //store each component
        components.scheme = matches[1];
        components.userinfo = matches[3];
        components.host = matches[4];
        components.port = parseInt(matches[5], 10);
        components.path = matches[6] || "";
        components.query = matches[7];
        components.fragment = matches[8]; //fix port number

        if (isNaN(components.port)) {
          components.port = matches[5];
        }
      } else {
        //IE FIX for improper RegExp matching
        //store each component
        components.scheme = matches[1] || undefined;
        components.userinfo = uriString.indexOf("@") !== -1 ? matches[3] : undefined;
        components.host = uriString.indexOf("//") !== -1 ? matches[4] : undefined;
        components.port = parseInt(matches[5], 10);
        components.path = matches[6] || "";
        components.query = uriString.indexOf("?") !== -1 ? matches[7] : undefined;
        components.fragment = uriString.indexOf("#") !== -1 ? matches[8] : undefined; //fix port number

        if (isNaN(components.port)) {
          components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? matches[4] : undefined;
        }
      }

      if (components.host) {
        //normalize IP hosts
        components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);
      } //determine reference type


      if (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {
        components.reference = "same-document";
      } else if (components.scheme === undefined) {
        components.reference = "relative";
      } else if (components.fragment === undefined) {
        components.reference = "absolute";
      } else {
        components.reference = "uri";
      } //check for reference errors


      if (options.reference && options.reference !== "suffix" && options.reference !== components.reference) {
        components.error = components.error || "URI is not a " + options.reference + " reference.";
      } //find scheme handler


      var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()]; //check if scheme can't handle IRIs

      if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
        //if host component is a domain name
        if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {
          //convert Unicode IDN -> ASCII IDN
          try {
            components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());
          } catch (e) {
            components.error = components.error || "Host's domain name can not be converted to ASCII via punycode: " + e;
          }
        } //convert IRI -> URI


        _normalizeComponentEncoding(components, URI_PROTOCOL);
      } else {
        //normalize encodings
        _normalizeComponentEncoding(components, protocol);
      } //perform scheme specific parsing


      if (schemeHandler && schemeHandler.parse) {
        schemeHandler.parse(components, options);
      }
    } else {
      components.error = components.error || "URI can not be parsed.";
    }

    return components;
  }

  function _recomposeAuthority(components, options) {
    var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
    var uriTokens = [];

    if (components.userinfo !== undefined) {
      uriTokens.push(components.userinfo);
      uriTokens.push("@");
    }

    if (components.host !== undefined) {
      //normalize IP hosts, add brackets and escape zone separator for IPv6
      uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function (_, $1, $2) {
        return "[" + $1 + ($2 ? "%25" + $2 : "") + "]";
      }));
    }

    if (typeof components.port === "number" || typeof components.port === "string") {
      uriTokens.push(":");
      uriTokens.push(String(components.port));
    }

    return uriTokens.length ? uriTokens.join("") : undefined;
  }

  var RDS1 = /^\.\.?\//;
  var RDS2 = /^\/\.(\/|$)/;
  var RDS3 = /^\/\.\.(\/|$)/;
  var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;

  function removeDotSegments(input) {
    var output = [];

    while (input.length) {
      if (input.match(RDS1)) {
        input = input.replace(RDS1, "");
      } else if (input.match(RDS2)) {
        input = input.replace(RDS2, "/");
      } else if (input.match(RDS3)) {
        input = input.replace(RDS3, "/");
        output.pop();
      } else if (input === "." || input === "..") {
        input = "";
      } else {
        var im = input.match(RDS5);

        if (im) {
          var s = im[0];
          input = input.slice(s.length);
          output.push(s);
        } else {
          throw new Error("Unexpected dot segment condition");
        }
      }
    }

    return output.join("");
  }

  function serialize(components) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;
    var uriTokens = []; //find scheme handler

    var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()]; //perform scheme specific serialization

    if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);

    if (components.host) {
      //if host component is an IPv6 address
      if (protocol.IPV6ADDRESS.test(components.host)) {} //TODO: normalize IPv6 address as per RFC 5952
      //if host component is a domain name
      else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {
        //convert IDN via punycode
        try {
          components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);
        } catch (e) {
          components.error = components.error || "Host's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
        }
      }
    } //normalize encoding


    _normalizeComponentEncoding(components, protocol);

    if (options.reference !== "suffix" && components.scheme) {
      uriTokens.push(components.scheme);
      uriTokens.push(":");
    }

    var authority = _recomposeAuthority(components, options);

    if (authority !== undefined) {
      if (options.reference !== "suffix") {
        uriTokens.push("//");
      }

      uriTokens.push(authority);

      if (components.path && components.path.charAt(0) !== "/") {
        uriTokens.push("/");
      }
    }

    if (components.path !== undefined) {
      var s = components.path;

      if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
        s = removeDotSegments(s);
      }

      if (authority === undefined) {
        s = s.replace(/^\/\//, "/%2F"); //don't allow the path to start with "//"
      }

      uriTokens.push(s);
    }

    if (components.query !== undefined) {
      uriTokens.push("?");
      uriTokens.push(components.query);
    }

    if (components.fragment !== undefined) {
      uriTokens.push("#");
      uriTokens.push(components.fragment);
    }

    return uriTokens.join(""); //merge tokens into a string
  }

  function resolveComponents(base, relative) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var skipNormalization = arguments[3];
    var target = {};

    if (!skipNormalization) {
      base = parse(serialize(base, options), options); //normalize base components

      relative = parse(serialize(relative, options), options); //normalize relative components
    }

    options = options || {};

    if (!options.tolerant && relative.scheme) {
      target.scheme = relative.scheme; //target.authority = relative.authority;

      target.userinfo = relative.userinfo;
      target.host = relative.host;
      target.port = relative.port;
      target.path = removeDotSegments(relative.path || "");
      target.query = relative.query;
    } else {
      if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {
        //target.authority = relative.authority;
        target.userinfo = relative.userinfo;
        target.host = relative.host;
        target.port = relative.port;
        target.path = removeDotSegments(relative.path || "");
        target.query = relative.query;
      } else {
        if (!relative.path) {
          target.path = base.path;

          if (relative.query !== undefined) {
            target.query = relative.query;
          } else {
            target.query = base.query;
          }
        } else {
          if (relative.path.charAt(0) === "/") {
            target.path = removeDotSegments(relative.path);
          } else {
            if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {
              target.path = "/" + relative.path;
            } else if (!base.path) {
              target.path = relative.path;
            } else {
              target.path = base.path.slice(0, base.path.lastIndexOf("/") + 1) + relative.path;
            }

            target.path = removeDotSegments(target.path);
          }

          target.query = relative.query;
        } //target.authority = base.authority;


        target.userinfo = base.userinfo;
        target.host = base.host;
        target.port = base.port;
      }

      target.scheme = base.scheme;
    }

    target.fragment = relative.fragment;
    return target;
  }

  function resolve(baseURI, relativeURI, options) {
    var schemelessOptions = assign({
      scheme: 'null'
    }, options);
    return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);
  }

  function normalize(uri, options) {
    if (typeof uri === "string") {
      uri = serialize(parse(uri, options), options);
    } else if (typeOf(uri) === "object") {
      uri = parse(serialize(uri, options), options);
    }

    return uri;
  }

  function equal(uriA, uriB, options) {
    if (typeof uriA === "string") {
      uriA = serialize(parse(uriA, options), options);
    } else if (typeOf(uriA) === "object") {
      uriA = serialize(uriA, options);
    }

    if (typeof uriB === "string") {
      uriB = serialize(parse(uriB, options), options);
    } else if (typeOf(uriB) === "object") {
      uriB = serialize(uriB, options);
    }

    return uriA === uriB;
  }

  function escapeComponent(str, options) {
    return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);
  }

  function unescapeComponent(str, options) {
    return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);
  }

  var handler = {
    scheme: "http",
    domainHost: true,
    parse: function parse(components, options) {
      //report missing host
      if (!components.host) {
        components.error = components.error || "HTTP URIs must have a host.";
      }

      return components;
    },
    serialize: function serialize(components, options) {
      var secure = String(components.scheme).toLowerCase() === "https"; //normalize the default port

      if (components.port === (secure ? 443 : 80) || components.port === "") {
        components.port = undefined;
      } //normalize the empty path


      if (!components.path) {
        components.path = "/";
      } //NOTE: We do not parse query strings for HTTP URIs
      //as WWW Form Url Encoded query strings are part of the HTML4+ spec,
      //and not the HTTP spec.


      return components;
    }
  };
  var handler$1 = {
    scheme: "https",
    domainHost: handler.domainHost,
    parse: handler.parse,
    serialize: handler.serialize
  };

  function isSecure(wsComponents) {
    return typeof wsComponents.secure === 'boolean' ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === "wss";
  } //RFC 6455


  var handler$2 = {
    scheme: "ws",
    domainHost: true,
    parse: function parse(components, options) {
      var wsComponents = components; //indicate if the secure flag is set

      wsComponents.secure = isSecure(wsComponents); //construct resouce name

      wsComponents.resourceName = (wsComponents.path || '/') + (wsComponents.query ? '?' + wsComponents.query : '');
      wsComponents.path = undefined;
      wsComponents.query = undefined;
      return wsComponents;
    },
    serialize: function serialize(wsComponents, options) {
      //normalize the default port
      if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === "") {
        wsComponents.port = undefined;
      } //ensure scheme matches secure flag


      if (typeof wsComponents.secure === 'boolean') {
        wsComponents.scheme = wsComponents.secure ? 'wss' : 'ws';
        wsComponents.secure = undefined;
      } //reconstruct path from resource name


      if (wsComponents.resourceName) {
        var _wsComponents$resourc = wsComponents.resourceName.split('?'),
            _wsComponents$resourc2 = slicedToArray(_wsComponents$resourc, 2),
            path = _wsComponents$resourc2[0],
            query = _wsComponents$resourc2[1];

        wsComponents.path = path && path !== '/' ? path : undefined;
        wsComponents.query = query;
        wsComponents.resourceName = undefined;
      } //forbid fragment component


      wsComponents.fragment = undefined;
      return wsComponents;
    }
  };
  var handler$3 = {
    scheme: "wss",
    domainHost: handler$2.domainHost,
    parse: handler$2.parse,
    serialize: handler$2.serialize
  };
  var O = {};
  var isIRI = true; //RFC 3986

  var UNRESERVED$$ = "[A-Za-z0-9\\-\\.\\_\\~" + (isIRI ? "\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF" : "") + "]";
  var HEXDIG$$ = "[0-9A-Fa-f]"; //case-insensitive

  var PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)); //expanded
  //RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =
  //const ATEXT$$ = "[A-Za-z0-9\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~]";
  //const WSP$$ = "[\\x20\\x09]";
  //const OBS_QTEXT$$ = "[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]";  //(%d1-8 / %d11-12 / %d14-31 / %d127)
  //const QTEXT$$ = merge("[\\x21\\x23-\\x5B\\x5D-\\x7E]", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext
  //const VCHAR$$ = "[\\x21-\\x7E]";
  //const WSP$$ = "[\\x20\\x09]";
  //const OBS_QP$ = subexp("\\\\" + merge("[\\x00\\x0D\\x0A]", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext
  //const FWS$ = subexp(subexp(WSP$$ + "*" + "\\x0D\\x0A") + "?" + WSP$$ + "+");
  //const QUOTED_PAIR$ = subexp(subexp("\\\\" + subexp(VCHAR$$ + "|" + WSP$$)) + "|" + OBS_QP$);
  //const QUOTED_STRING$ = subexp('\\"' + subexp(FWS$ + "?" + QCONTENT$) + "*" + FWS$ + "?" + '\\"');

  var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
  var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
  var VCHAR$$ = merge(QTEXT$$, "[\\\"\\\\]");
  var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
  var UNRESERVED = new RegExp(UNRESERVED$$, "g");
  var PCT_ENCODED = new RegExp(PCT_ENCODED$, "g");
  var NOT_LOCAL_PART = new RegExp(merge("[^]", ATEXT$$, "[\\.]", '[\\"]', VCHAR$$), "g");
  var NOT_HFNAME = new RegExp(merge("[^]", UNRESERVED$$, SOME_DELIMS$$), "g");
  var NOT_HFVALUE = NOT_HFNAME;

  function decodeUnreserved(str) {
    var decStr = pctDecChars(str);
    return !decStr.match(UNRESERVED) ? str : decStr;
  }

  var handler$4 = {
    scheme: "mailto",
    parse: function parse$$1(components, options) {
      var mailtoComponents = components;
      var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(",") : [];
      mailtoComponents.path = undefined;

      if (mailtoComponents.query) {
        var unknownHeaders = false;
        var headers = {};
        var hfields = mailtoComponents.query.split("&");

        for (var x = 0, xl = hfields.length; x < xl; ++x) {
          var hfield = hfields[x].split("=");

          switch (hfield[0]) {
            case "to":
              var toAddrs = hfield[1].split(",");

              for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
                to.push(toAddrs[_x]);
              }

              break;

            case "subject":
              mailtoComponents.subject = unescapeComponent(hfield[1], options);
              break;

            case "body":
              mailtoComponents.body = unescapeComponent(hfield[1], options);
              break;

            default:
              unknownHeaders = true;
              headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);
              break;
          }
        }

        if (unknownHeaders) mailtoComponents.headers = headers;
      }

      mailtoComponents.query = undefined;

      for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {
        var addr = to[_x2].split("@");

        addr[0] = unescapeComponent(addr[0]);

        if (!options.unicodeSupport) {
          //convert Unicode IDN -> ASCII IDN
          try {
            addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());
          } catch (e) {
            mailtoComponents.error = mailtoComponents.error || "Email address's domain name can not be converted to ASCII via punycode: " + e;
          }
        } else {
          addr[1] = unescapeComponent(addr[1], options).toLowerCase();
        }

        to[_x2] = addr.join("@");
      }

      return mailtoComponents;
    },
    serialize: function serialize$$1(mailtoComponents, options) {
      var components = mailtoComponents;
      var to = toArray(mailtoComponents.to);

      if (to) {
        for (var x = 0, xl = to.length; x < xl; ++x) {
          var toAddr = String(to[x]);
          var atIdx = toAddr.lastIndexOf("@");
          var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);
          var domain = toAddr.slice(atIdx + 1); //convert IDN via punycode

          try {
            domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);
          } catch (e) {
            components.error = components.error || "Email address's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
          }

          to[x] = localPart + "@" + domain;
        }

        components.path = to.join(",");
      }

      var headers = mailtoComponents.headers = mailtoComponents.headers || {};
      if (mailtoComponents.subject) headers["subject"] = mailtoComponents.subject;
      if (mailtoComponents.body) headers["body"] = mailtoComponents.body;
      var fields = [];

      for (var name in headers) {
        if (headers[name] !== O[name]) {
          fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + "=" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));
        }
      }

      if (fields.length) {
        components.query = fields.join("&");
      }

      return components;
    }
  };
  var URN_PARSE = /^([^\:]+)\:(.*)/; //RFC 2141

  var handler$5 = {
    scheme: "urn",
    parse: function parse$$1(components, options) {
      var matches = components.path && components.path.match(URN_PARSE);
      var urnComponents = components;

      if (matches) {
        var scheme = options.scheme || urnComponents.scheme || "urn";
        var nid = matches[1].toLowerCase();
        var nss = matches[2];
        var urnScheme = scheme + ":" + (options.nid || nid);
        var schemeHandler = SCHEMES[urnScheme];
        urnComponents.nid = nid;
        urnComponents.nss = nss;
        urnComponents.path = undefined;

        if (schemeHandler) {
          urnComponents = schemeHandler.parse(urnComponents, options);
        }
      } else {
        urnComponents.error = urnComponents.error || "URN can not be parsed.";
      }

      return urnComponents;
    },
    serialize: function serialize$$1(urnComponents, options) {
      var scheme = options.scheme || urnComponents.scheme || "urn";
      var nid = urnComponents.nid;
      var urnScheme = scheme + ":" + (options.nid || nid);
      var schemeHandler = SCHEMES[urnScheme];

      if (schemeHandler) {
        urnComponents = schemeHandler.serialize(urnComponents, options);
      }

      var uriComponents = urnComponents;
      var nss = urnComponents.nss;
      uriComponents.path = (nid || options.nid) + ":" + nss;
      return uriComponents;
    }
  };
  var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/; //RFC 4122

  var handler$6 = {
    scheme: "urn:uuid",
    parse: function parse(urnComponents, options) {
      var uuidComponents = urnComponents;
      uuidComponents.uuid = uuidComponents.nss;
      uuidComponents.nss = undefined;

      if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {
        uuidComponents.error = uuidComponents.error || "UUID is not valid.";
      }

      return uuidComponents;
    },
    serialize: function serialize(uuidComponents, options) {
      var urnComponents = uuidComponents; //normalize UUID

      urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
      return urnComponents;
    }
  };
  SCHEMES[handler.scheme] = handler;
  SCHEMES[handler$1.scheme] = handler$1;
  SCHEMES[handler$2.scheme] = handler$2;
  SCHEMES[handler$3.scheme] = handler$3;
  SCHEMES[handler$4.scheme] = handler$4;
  SCHEMES[handler$5.scheme] = handler$5;
  SCHEMES[handler$6.scheme] = handler$6;
  exports.SCHEMES = SCHEMES;
  exports.pctEncChar = pctEncChar;
  exports.pctDecChars = pctDecChars;
  exports.parse = parse;
  exports.removeDotSegments = removeDotSegments;
  exports.serialize = serialize;
  exports.resolveComponents = resolveComponents;
  exports.resolve = resolve;
  exports.normalize = normalize;
  exports.equal = equal;
  exports.escapeComponent = escapeComponent;
  exports.unescapeComponent = unescapeComponent;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

/***/ }),

/***/ "./node_modules/validate.io-array/lib/index.js":
/***/ ((module) => {

"use strict";

/**
* FUNCTION: isArray( value )
*	Validates if a value is an array.
*
* @param {*} value - value to be validated
* @returns {Boolean} boolean indicating whether value is an array
*/

function isArray(value) {
  return Object.prototype.toString.call(value) === '[object Array]';
} // end FUNCTION isArray()
// EXPORTS //


module.exports = Array.isArray || isArray;

/***/ }),

/***/ "./node_modules/validate.io-function/lib/index.js":
/***/ ((module) => {

"use strict";
/**
*
*	VALIDATE: function
*
*
*	DESCRIPTION:
*		- Validates if a value is a function.
*
*
*	NOTES:
*		[1]
*
*
*	TODO:
*		[1]
*
*
*	LICENSE:
*		MIT
*
*	Copyright (c) 2014. Athan Reines.
*
*
*	AUTHOR:
*		Athan Reines. kgryte@gmail.com. 2014.
*
*/

/**
* FUNCTION: isFunction( value )
*	Validates if a value is a function.
*
* @param {*} value - value to be validated
* @returns {Boolean} boolean indicating whether value is a function
*/

function isFunction(value) {
  return typeof value === 'function';
} // end FUNCTION isFunction()
// EXPORTS //


module.exports = isFunction;

/***/ }),

/***/ "./node_modules/validate.io-integer-array/lib/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
*
*	VALIDATE: integer-array
*
*
*	DESCRIPTION:
*		- Validates if a value is an integer array.
*
*
*	NOTES:
*		[1]
*
*
*	TODO:
*		[1]
*
*
*	LICENSE:
*		MIT
*
*	Copyright (c) 2015. Athan Reines.
*
*
*	AUTHOR:
*		Athan Reines. kgryte@gmail.com. 2015.
*
*/
 // MODULES //

var isArray = __webpack_require__("./node_modules/validate.io-array/lib/index.js"),
    isInteger = __webpack_require__("./node_modules/validate.io-integer/lib/index.js"); // IS INTEGER ARRAY //

/**
* FUNCTION: isIntegerArray( value )
*	Validates if a value is an integer array.
*
* @param {*} value - value to be validated
* @returns {Boolean} boolean indicating if a value is an integer array
*/


function isIntegerArray(value) {
  var len;

  if (!isArray(value)) {
    return false;
  }

  len = value.length;

  if (!len) {
    return false;
  }

  for (var i = 0; i < len; i++) {
    if (!isInteger(value[i])) {
      return false;
    }
  }

  return true;
} // end FUNCTION isIntegerArray()
// EXPORTS //


module.exports = isIntegerArray;

/***/ }),

/***/ "./node_modules/validate.io-integer/lib/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
*
*	VALIDATE: integer
*
*
*	DESCRIPTION:
*		- Validates if a value is an integer.
*
*
*	NOTES:
*		[1]
*
*
*	TODO:
*		[1]
*
*
*	LICENSE:
*		MIT
*
*	Copyright (c) 2014. Athan Reines.
*
*
*	AUTHOR:
*		Athan Reines. kgryte@gmail.com. 2014.
*
*/
 // MODULES //

var isNumber = __webpack_require__("./node_modules/validate.io-number/lib/index.js"); // ISINTEGER //

/**
* FUNCTION: isInteger( value )
*	Validates if a value is an integer.
*
* @param {Number} value - value to be validated
* @returns {Boolean} boolean indicating whether value is an integer
*/


function isInteger(value) {
  return isNumber(value) && value % 1 === 0;
} // end FUNCTION isInteger()
// EXPORTS //


module.exports = isInteger;

/***/ }),

/***/ "./node_modules/validate.io-number/lib/index.js":
/***/ ((module) => {

"use strict";
/**
*
*	VALIDATE: number
*
*
*	DESCRIPTION:
*		- Validates if a value is a number.
*
*
*	NOTES:
*		[1]
*
*
*	TODO:
*		[1]
*
*
*	LICENSE:
*		MIT
*
*	Copyright (c) 2014. Athan Reines.
*
*
*	AUTHOR:
*		Athan Reines. kgryte@gmail.com. 2014.
*
*/

/**
* FUNCTION: isNumber( value )
*	Validates if a value is a number.
*
* @param {*} value - value to be validated
* @returns {Boolean} boolean indicating whether value is a number
*/

function isNumber(value) {
  return (typeof value === 'number' || Object.prototype.toString.call(value) === '[object Number]') && value.valueOf() === value.valueOf();
} // end FUNCTION isNumber()
// EXPORTS //


module.exports = isNumber;

/***/ }),

/***/ "../shared/dist/constrains.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports.competenceTeamFunctionLevelConstraints = exports.competenceTeamRoleConstraints = exports.quadrantValuesConstraints = exports.ringValuesConstraints = exports.skillTypeValuesConstraints = void 0;
exports.skillTypeValuesConstraints = ["Soft", "Hard", "Competency"];
exports.ringValuesConstraints = ["Adopt", "Explore", "Endure", "Retire"];
exports.quadrantValuesConstraints = ["Languages and Frameworks", "Tools", "Platforms", "Techniques"]; // Configuration of roles available per competence team

exports.competenceTeamRoleConstraints = {
  "Custom Application Development": ["Creative Frontend Developer", "Technical Frontend Developer", "Backend Developer"],
  Integration: [],
  "Sitecore Experience Platform": []
}; // Configuration of functions available per competence team

exports.competenceTeamFunctionLevelConstraints = {
  "Custom Application Development": ["TechnicalSpecialist1", "TechnicalSpecialist2", "TechnicalSpecialist3", "TechnicalSpecialist4"],
  Integration: [],
  "Sitecore Experience Platform": []
};

/***/ }),

/***/ "../shared/dist/filterTopics.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

exports.__esModule = true;
exports.filterTopics = exports.isRelevantForRole = void 0;

var natural_compare_1 = __importDefault(__webpack_require__("../shared/node_modules/natural-compare/index.js"));

function isRelevantForRole(roles, role) {
  if (roles === undefined) {
    // roles not defined means relevant for all roles
    return true;
  }

  if (!Array.isArray(roles)) {
    return true; // should not occur, so just return true
  }

  if (roles.length === 0) {
    // no roles means relevant for all roles
    return true;
  }

  var isRelevant = false;
  roles.forEach(function (roleSkillFunctionMapping) {
    if (!roleSkillFunctionMapping.role) {
      isRelevant = true; // role not defined means relevant for all roles
    }

    if (roleSkillFunctionMapping.role === role) {
      isRelevant = true;
    }
  });
  return isRelevant;
}

exports.isRelevantForRole = isRelevantForRole;

function filterTopics(topics, filterOptions) {
  var skillType = filterOptions.skillType,
      isLearningPath = filterOptions.isLearningPath,
      role = filterOptions.role,
      ring = filterOptions.ring,
      quadrant = filterOptions.quadrant;
  var selectedTopics = [];
  topics.forEach(function (topic) {
    topic.markdownFilePath = "".concat(topic.id.replace(/\\/g, "/"));
    var push = true;

    if (skillType && skillType !== topic.skillType) {
      push = false;
    }

    if (isLearningPath !== undefined && isLearningPath !== topic.isLearningPath) {
      push = false;
    }

    if (role && !isRelevantForRole(topic.roles, role)) {
      push = false;
    }

    if (ring && ring !== topic.ring) {
      push = false;
    }

    if (quadrant && quadrant !== topic.quadrant) {
      push = false;
    }

    if (push) {
      selectedTopics.push(topic);
    }
  });
  return selectedTopics.sort(function (firstItem, secondItem) {
    return (0, natural_compare_1["default"])(firstItem.id, secondItem.id);
  });
}

exports.filterTopics = filterTopics;

/***/ }),

/***/ "../shared/dist/index.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function () {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __exportStar = this && this.__exportStar || function (m, exports) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};

exports.__esModule = true; // types

__exportStar(__webpack_require__("../shared/dist/types/AnyObject.js"), exports);

__exportStar(__webpack_require__("../shared/dist/types/CompetenceFrameworkSettings.js"), exports);

__exportStar(__webpack_require__("../shared/dist/types/CompetenceFrameworkValidationError.js"), exports);

__exportStar(__webpack_require__("../shared/dist/types/SchemaValidationError.js"), exports);

__exportStar(__webpack_require__("../shared/dist/types/CompetenceTeamSettings.js"), exports);

__exportStar(__webpack_require__("../shared/dist/types/CompetenceTeam.js"), exports);

__exportStar(__webpack_require__("../shared/dist/types/PartialRecord.js"), exports);

__exportStar(__webpack_require__("../shared/dist/types/Topic.js"), exports);

__exportStar(__webpack_require__("../shared/dist/types/FunctionLevel.js"), exports);

__exportStar(__webpack_require__("../shared/dist/types/SkillLevel.js"), exports);

__exportStar(__webpack_require__("../shared/dist/types/SkillType.js"), exports);

__exportStar(__webpack_require__("../shared/dist/types/Role.js"), exports);

__exportStar(__webpack_require__("../shared/dist/types/Ring.js"), exports);

__exportStar(__webpack_require__("../shared/dist/types/Quadrant.js"), exports);

__exportStar(__webpack_require__("../shared/dist/types/MarkdownJsonResult.js"), exports);

__exportStar(__webpack_require__("../shared/dist/types/MarkdownJsonApp.js"), exports);

__exportStar(__webpack_require__("../shared/dist/types/MarkdownJsonData.js"), exports);

__exportStar(__webpack_require__("../shared/dist/types/MarkdownJsonDataExtended.js"), exports);

__exportStar(__webpack_require__("../shared/dist/types/MarkdownJsonDataMeta.js"), exports);

__exportStar(__webpack_require__("../shared/dist/types/RoleSkillFunctionMapping.js"), exports);

__exportStar(__webpack_require__("../shared/dist/types/MissingFileError.js"), exports); // settings


__exportStar(__webpack_require__("../shared/dist/settings/getCompetenceFrameworkSettingsPath.js"), exports);

__exportStar(__webpack_require__("../shared/dist/settings/getCompetenceTeamSettingsPath.js"), exports); // util


__exportStar(__webpack_require__("../shared/dist/util/makeStringArray.js"), exports);

__exportStar(__webpack_require__("../shared/dist/util/parseBool.js"), exports);

__exportStar(__webpack_require__("../shared/dist/util/pascalCaseToSpaces.js"), exports);

__exportStar(__webpack_require__("../shared/dist/util/markdownPathToSubject.js"), exports);

__exportStar(__webpack_require__("../shared/dist/util/markdownToSuggest.js"), exports); // validate


__exportStar(__webpack_require__("../shared/dist/validate/deprecated_validateTopics.js"), exports);

__exportStar(__webpack_require__("../shared/dist/validate/validateYaml.js"), exports);

__exportStar(__webpack_require__("../shared/dist/validate/validateCompetenceFrameworkSettings.js"), exports);

__exportStar(__webpack_require__("../shared/dist/validate/validateCompetenceTeamSettings.js"), exports);

__exportStar(__webpack_require__("../shared/dist/validate/convertCompetenceFrameworkValidationErrorToErrorString.js"), exports);

__exportStar(__webpack_require__("../shared/dist/validate/createWarningOrErrorString.js"), exports);

__exportStar(__webpack_require__("../shared/dist/validate/validatePageFrontmatter.js"), exports);

__exportStar(__webpack_require__("../shared/dist/validate/markdownPathToSchema.js"), exports); // schema


__exportStar(__webpack_require__("../shared/dist/schema/competenceFrameworkSettings.js"), exports);

__exportStar(__webpack_require__("../shared/dist/schema/competenceTeamPages.js"), exports);

__exportStar(__webpack_require__("../shared/dist/schema/competenceTeamRolePages.js"), exports);

__exportStar(__webpack_require__("../shared/dist/schema/competenceTeamSettings.js"), exports);

__exportStar(__webpack_require__("../shared/dist/schema/factory.js"), exports);

__exportStar(__webpack_require__("../shared/dist/schema/generalPage.js"), exports);

__exportStar(__webpack_require__("../shared/dist/schema/topic.js"), exports); // ./src


__exportStar(__webpack_require__("../shared/dist/constrains.js"), exports);

__exportStar(__webpack_require__("../shared/dist/filterTopics.js"), exports);

/***/ }),

/***/ "../shared/dist/schema/competenceFrameworkSettings.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports.competenceFrameworkSettingsGetJSONSchema = exports.competenceFrameworkSettingsGetSchemaInfo = void 0;
/**
 * Returns the schema information for competence framework settings
 *
 * @returns schema information
 */

var competenceFrameworkSettingsGetSchemaInfo = function () {
  return {
    jsonSchema: (0, exports.competenceFrameworkSettingsGetJSONSchema)(),
    uiSchema: {}
  };
};

exports.competenceFrameworkSettingsGetSchemaInfo = competenceFrameworkSettingsGetSchemaInfo;
/**
 * Returns the JSON Schema information for competence framework settings
 *
 * @returns schema information
 */

var competenceFrameworkSettingsGetJSONSchema = function () {
  return {
    type: "object",
    properties: {
      skillType: {
        type: "array",
        items: {
          type: "object",
          properties: {
            frontmatterName: {
              type: "string"
            },
            folderName: {
              type: "string"
            }
          },
          required: ["frontmatterName", "folderName"]
        }
      },
      skillLevel: {
        type: "array",
        items: {
          type: "object",
          properties: {
            name: {
              type: "string"
            },
            level: {
              type: "number"
            }
          },
          required: ["name", "level"]
        }
      },
      ring: {
        type: "array",
        items: {
          type: "string"
        }
      },
      quadrant: {
        type: "array",
        items: {
          type: "string"
        }
      },
      fork: {
        type: "array",
        items: {
          type: "object",
          properties: {
            name: {
              type: "string"
            },
            locationGitFork: {
              type: "string"
            },
            locationWikiFork: {
              type: "string"
            }
          },
          required: ["name", "locationGitFork", "locationWikiFork"]
        }
      }
    },
    required: ["skillType", "skillLevel", "ring", "quadrant", "fork"]
  };
};

exports.competenceFrameworkSettingsGetJSONSchema = competenceFrameworkSettingsGetJSONSchema;

/***/ }),

/***/ "../shared/dist/schema/competenceTeamPages.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports.competenceTeamPagesGetJSONSchema = exports.competenceTeamPagesGetSchemaInfo = void 0;
/**
 * Returns the schema information for competence team pages
 *
 * @returns schema information
 */

var competenceTeamPagesGetSchemaInfo = function () {
  return null;
  /*
  return {
      jsonSchema: competenceTeamPagesGetJSONSchema(),
      uiSchema: {},
  };
  */
};

exports.competenceTeamPagesGetSchemaInfo = competenceTeamPagesGetSchemaInfo;
/**
 * Returns the JSON Schema information for competence team pages
 *
 * @returns schema information
 */

var competenceTeamPagesGetJSONSchema = function () {
  return null;
  /*
  return {
      type: "object",
      properties: {},
      required: [],
  };
  */
};

exports.competenceTeamPagesGetJSONSchema = competenceTeamPagesGetJSONSchema;

/***/ }),

/***/ "../shared/dist/schema/competenceTeamRolePages.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports.competenceTeamRolePagesGetJSONSchema = exports.competenceTeamRolePagesGetSchemaInfo = void 0;
/**
 * Returns the schema information for competence team role pages
 *
 * @returns schema information
 */

var competenceTeamRolePagesGetSchemaInfo = function () {
  return null;
  /*
  return {
      jsonSchema: competenceTeamRolePagesGetJSONSchema(),
      uiSchema: {},
  };
  */
};

exports.competenceTeamRolePagesGetSchemaInfo = competenceTeamRolePagesGetSchemaInfo;
/**
 * Returns the JSON Schema information for competence team role pages
 *
 * @returns schema information
 */

var competenceTeamRolePagesGetJSONSchema = function () {
  return null;
  /*
  return {
      type: "object",
      properties: {},
      required: [],
  };
  */
};

exports.competenceTeamRolePagesGetJSONSchema = competenceTeamRolePagesGetJSONSchema;

/***/ }),

/***/ "../shared/dist/schema/competenceTeamSettings.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports.competenceTeamSettingsGetJSONSchema = exports.competenceTeamSettingsGetSchemaInfo = void 0;
/**
 * Returns the schema information for competence team settings
 *
 * @returns schema information
 */

var competenceTeamSettingsGetSchemaInfo = function () {
  return {
    jsonSchema: (0, exports.competenceTeamSettingsGetJSONSchema)(),
    uiSchema: {}
  };
};

exports.competenceTeamSettingsGetSchemaInfo = competenceTeamSettingsGetSchemaInfo;
/**
 * Returns the JSON Schema information for competence team settings
 *
 * @returns schema information
 */

var competenceTeamSettingsGetJSONSchema = function () {
  return {
    type: "object",
    properties: {
      role: {
        type: "array",
        items: {
          type: "string"
        }
      },
      functionLevel: {
        type: "array",
        items: {
          type: "string"
        }
      }
    },
    required: ["role", "functionLevel"]
  };
};

exports.competenceTeamSettingsGetJSONSchema = competenceTeamSettingsGetJSONSchema;

/***/ }),

/***/ "../shared/dist/schema/factory.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
exports.getSchemaInfo = void 0;

var SkillLevel_1 = __webpack_require__("../shared/dist/types/SkillLevel.js");

var competenceFrameworkSettings_1 = __webpack_require__("../shared/dist/schema/competenceFrameworkSettings.js");

var competenceTeamPages_1 = __webpack_require__("../shared/dist/schema/competenceTeamPages.js");

var competenceTeamRolePages_1 = __webpack_require__("../shared/dist/schema/competenceTeamRolePages.js");

var competenceTeamSettings_1 = __webpack_require__("../shared/dist/schema/competenceTeamSettings.js");

var generalPage_1 = __webpack_require__("../shared/dist/schema/generalPage.js");

var topic_1 = __webpack_require__("../shared/dist/schema/topic.js");
/**
 * Returj the schema information for the given SubjectInfo
 *
 * @param subjectInfo   subjectInfo based on current Wiki page
 * @param settings      general settings
 * @param ctSettings    comtetence team specific settings
 * @returns schema information
 */


var getSchemaInfo = function (subjectInfo, settings, ctSettings) {
  // create skill level schema
  var skillLevelForFunctionLevel = {};

  if (ctSettings.functionLevel) {
    ctSettings.functionLevel.forEach(function (functionLevel) {
      skillLevelForFunctionLevel[functionLevel] = {
        type: "string",
        "enum": SkillLevel_1.SkillLevelValues
      };
    });
  } // return schema based on wiki editor content/path


  switch (subjectInfo.subject) {
    case "GeneralPage":
      return (0, generalPage_1.generalPageGetSchemaInfo)();

    case "CompetenceTeamOverview":
      return (0, competenceTeamPages_1.competenceTeamPagesGetSchemaInfo)();

    case "RolesOverview":
      return null;

    case "TopicsOverview":
      return null;

    case "Role":
      return (0, competenceTeamRolePages_1.competenceTeamRolePagesGetSchemaInfo)();

    case "Topic":
      return (0, topic_1.topicGetSchemaInfo)(settings, ctSettings, skillLevelForFunctionLevel);

    case "CompetenceTeamSettings":
      return (0, competenceTeamSettings_1.competenceTeamSettingsGetSchemaInfo)();

    case "CompetenceFrameworkSettings":
      return (0, competenceFrameworkSettings_1.competenceFrameworkSettingsGetSchemaInfo)();
  } // all other pages: no schema


  console.error("Sorry, ".concat(subjectInfo.subject, " not implemented yet"));
  return null;
};

exports.getSchemaInfo = getSchemaInfo;

/***/ }),

/***/ "../shared/dist/schema/generalPage.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports.generalPageGetJSONSchema = exports.generalPageGetSchemaInfo = void 0;
/**
 * Returns the schema information for a general page
 *
 * @returns schema information
 */

var generalPageGetSchemaInfo = function () {
  return {
    jsonSchema: (0, exports.generalPageGetJSONSchema)(),
    uiSchema: {}
  };
};

exports.generalPageGetSchemaInfo = generalPageGetSchemaInfo;
/**
 * Returns the JSON Schema information for a general page
 *
 * @returns schema information
 */

var generalPageGetJSONSchema = function () {
  return {
    type: "object",
    properties: {
      internal: {
        type: "boolean",
        "default": false
      }
    },
    required: []
  };
};

exports.generalPageGetJSONSchema = generalPageGetJSONSchema;

/***/ }),

/***/ "../shared/dist/schema/topic.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports.topicGetJSONSchema = exports.topicGetSchemaInfo = void 0;
/**
 * Returns the schema information for a "Topic"
 *
 * @param settings      general settings
 * @param ctSettings    comtetence team specific settings
 * @param skillLevelForFunctionLevel skill levels for competence team
 * @returns schema information
 */

var topicGetSchemaInfo = function (settings, ctSettings, skillLevelForFunctionLevel) {
  return {
    jsonSchema: (0, exports.topicGetJSONSchema)(settings, ctSettings, skillLevelForFunctionLevel),
    uiSchema: {
      "ui:order": ["name", "uid", "internal", "skillType", "isCCSkill", "isLearningPath", "roles", "showOnRadar", "ring", "quadrant", "isNew"]
    }
  };
};

exports.topicGetSchemaInfo = topicGetSchemaInfo;
/**
 * Returns the JSON schema information for a "Topic"
 *
 * @param settings      general settings
 * @param ctSettings    comtetence team specific settings
 * @param skillLevelForFunctionLevel skill levels for competence team
 * @returns schema information
 */

var topicGetJSONSchema = function (settings, ctSettings, skillLevelForFunctionLevel) {
  return {
    type: "object",
    properties: {
      internal: {
        type: "boolean",
        "default": false
      },
      name: {
        type: "string",
        title: "Name of topic"
      },
      uid: {
        type: "string",
        title: "Internal UID of topic",
        pattern: "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
      },
      skillType: {
        type: "string",
        title: "Skill type",
        "enum": settings.skillType.map(function (skillType) {
          return skillType.frontmatterName;
        })
      },
      isCCSkill: {
        type: "boolean",
        title: "Is a Competence Center skill",
        "default": false
      },
      isLearningPath: {
        type: "boolean",
        title: "Is part of a Learning Path",
        "default": false
      },
      roles: {
        type: "array",
        title: "Assigned roles:",
        items: {
          type: "object",
          properties: {
            role: {
              type: "string",
              title: "Role name",
              "enum": ctSettings.role
            },
            skillLevelForFunctionLevel: {
              type: "object",
              title: "Functional levels",
              properties: skillLevelForFunctionLevel
            }
          }
        }
      },
      showOnRadar: {
        type: "boolean",
        title: "Show this topic on the technology radar",
        "default": false
      },
      isNew: {
        type: "boolean"
      }
    },
    required: ["name", "uid", "skillType"],
    dependencies: {
      showOnRadar: {
        oneOf: [{
          properties: {
            showOnRadar: {
              "enum": [false]
            }
          }
        }, {
          properties: {
            showOnRadar: {
              "enum": [true]
            },
            ring: {
              type: "string",
              title: "On which ring on the technology radar?",
              "enum": settings.ring
            },
            quadrant: {
              type: "string",
              title: "On which quadrant on the technology radar?",
              "enum": settings.quadrant
            }
          }
        }]
      }
    }
  };
};

exports.topicGetJSONSchema = topicGetJSONSchema;

/***/ }),

/***/ "../shared/dist/settings/getCompetenceFrameworkSettingsPath.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports.getCompetenceFrameworkSettingsPath = void 0;

var getCompetenceFrameworkSettingsPath = function () {
  return "settings.md";
};

exports.getCompetenceFrameworkSettingsPath = getCompetenceFrameworkSettingsPath;

/***/ }),

/***/ "../shared/dist/settings/getCompetenceTeamSettingsPath.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports.getCompetenceTeamSettingsPath = void 0;

var getCompetenceTeamSettingsPath = function (competenceTeam) {
  return "Competence-Teams/".concat(competenceTeam, "/settings.md");
};

exports.getCompetenceTeamSettingsPath = getCompetenceTeamSettingsPath;

/***/ }),

/***/ "../shared/dist/types/AnyObject.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/CompetenceFrameworkSettings.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/CompetenceFrameworkValidationError.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/CompetenceTeam.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/CompetenceTeamSettings.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/FunctionLevel.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/MarkdownJsonApp.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/MarkdownJsonData.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/MarkdownJsonDataExtended.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/MarkdownJsonDataMeta.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/MarkdownJsonResult.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/MissingFileError.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/PartialRecord.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/Quadrant.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/Ring.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/Role.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/RoleSkillFunctionMapping.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/SchemaValidationError.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/SkillLevel.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports.SkillLevelValues = void 0;
exports.SkillLevelValues = ["Novice", "Intermediate", "Proficient", "Expert"];

/***/ }),

/***/ "../shared/dist/types/SkillType.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/types/Topic.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;

/***/ }),

/***/ "../shared/dist/util/makeStringArray.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports.makeStringArray = void 0;

function makeStringArray(val) {
  if (typeof val === "string") {
    return [val];
  }

  if (Array.isArray(val)) {
    return val.map(function (x) {
      return x.toString();
    });
  }

  return [];
}

exports.makeStringArray = makeStringArray;

/***/ }),

/***/ "../shared/dist/util/markdownPathToSubject.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports.markdownPathToSubject = void 0;

function markdownPathToSubject(filepath) {
  // remove leading slash, otherwise first part empty
  if (filepath.startsWith("/")) {
    filepath = filepath.substring(1);
  }

  var pathParts = filepath.split("/"); // *.md

  if (pathParts.length == 1) {
    if (pathParts[0] === "settings" || pathParts[0] === "settings.md") {
      return {
        path: filepath,
        subject: "CompetenceFrameworkSettings",
        competenceteam: "",
        id: ""
      };
    } else {
      return {
        path: filepath,
        subject: "GeneralPage",
        competenceteam: "",
        id: ""
      };
    }
  } // Competence-Teams/**/*.md


  if (pathParts[0] == "Competence-Teams" || pathParts[0] == "Competence Teams") {
    // Competence-Teams/*.md
    if (pathParts.length == 2) {
      return {
        path: filepath,
        subject: "CompetenceTeamOverview",
        competenceteam: pathParts[1].replace(".md", "")
      };
    } // Competence-Teams/<CompetenceTeam>/*.md


    if (pathParts.length == 3) {
      if (pathParts[2] == "roles" || pathParts[2] == "roles.md") {
        return {
          path: filepath,
          subject: "RolesOverview",
          competenceteam: pathParts[1]
        };
      }

      if (pathParts[2] == "topics" || pathParts[2] == "topics.md") {
        return {
          path: filepath,
          subject: "TopicsOverview",
          competenceteam: pathParts[1]
        };
      }

      if (pathParts[2] == "settings" || pathParts[2] == "settings.md") {
        return {
          path: filepath,
          subject: "CompetenceTeamSettings",
          competenceteam: pathParts[1]
        };
      } // all other pages: not allowed


      return null;
    } // Competence-Teams/<CompetenceTeam>/topics/*.md


    if (pathParts.length == 4 && pathParts[2] == "topics") {
      return {
        path: filepath,
        subject: "TopicCategoryOverview",
        competenceteam: pathParts[1]
      };
    } // Competence-Teams/<CompetenceTeam>/**/*.md


    if (pathParts.length > 3) {
      var competenceTeam = pathParts[1]; // Competence-Teams/<CompetenceTeam>/roles/*.md

      if (pathParts[2] == "roles") {
        return {
          path: filepath,
          subject: "Role",
          competenceteam: competenceTeam,
          id: pathParts[3].replace(".md", "")
        };
      } // Competence-Teams/<CompetenceTeam>/topics/**/*.md


      if (pathParts[2] == "topics") {
        return {
          path: filepath,
          subject: "Topic",
          competenceteam: competenceTeam,
          id: pathParts.slice(3).join("/").replace(".md", "")
        };
      }
    }
  } // all other pages: not allowed


  return null;
}

exports.markdownPathToSubject = markdownPathToSubject;

/***/ }),

/***/ "../shared/dist/util/markdownToSuggest.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

exports.__esModule = true;
exports.obj2yaml = exports.frontMatter = void 0;

var front_matter_1 = __importDefault(__webpack_require__("../shared/node_modules/front-matter/index.js"));

var js_yaml_1 = __webpack_require__("../shared/node_modules/js-yaml/index.js");

function frontMatter(content) {
  return (0, front_matter_1["default"])(content);
}

exports.frontMatter = frontMatter;

function obj2yaml(obj) {
  return (0, js_yaml_1.dump)(obj);
}

exports.obj2yaml = obj2yaml;

/***/ }),

/***/ "../shared/dist/util/parseBool.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports.parseBool = void 0;

function parseBool(val) {
  if (val === undefined) {
    return undefined;
  }

  if (typeof val == "boolean") {
    return val;
  }

  if (typeof val === "string" && (val.toLowerCase() === "true" || val.toLowerCase() === "yes") || val === 1) return true;else if (typeof val === "string" && (val.toLowerCase() === "false" || val.toLowerCase() === "no") || val === 0) return false;
  return false;
}

exports.parseBool = parseBool;

/***/ }),

/***/ "../shared/dist/util/pascalCaseToSpaces.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports.pascalCaseToSpaces = void 0;

function pascalCaseToSpaces(str) {
  return str.replace(/([a-z])([A-Z])/g, "$1 $2").replace(/([a-zA-Z])([0-9])/g, "$1 $2").replace(/([0-9])([a-zA-Z])/g, "$1 $2");
}

exports.pascalCaseToSpaces = pascalCaseToSpaces;

/***/ }),

/***/ "../shared/dist/validate/convertCompetenceFrameworkValidationErrorToErrorString.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
exports.convertCompetenceFrameworkValidationErrorToErrorString = void 0;

var createWarningOrErrorString_1 = __webpack_require__("../shared/dist/validate/createWarningOrErrorString.js");

function convertCompetenceFrameworkValidationErrorToErrorString(error) {
  switch (error.errorType) {
    case "JSONError":
      {
        var jsonError = error;
        return (0, createWarningOrErrorString_1.createErrorString)(jsonError.message, "JSONError", jsonError.path);
      }

    case "YAMLError":
      {
        var yamlError = error;
        console.log("YAMLError", yamlError);

        if (yamlError.mark) {
          return (0, createWarningOrErrorString_1.createErrorString)("".concat(yamlError.message), "YAMLError", yamlError.mark.name, yamlError.mark.line, yamlError.mark.column);
        } else {
          return (0, createWarningOrErrorString_1.createErrorString)("".concat(yamlError.message), "YAMLError");
        } // return createErrorString(`${yamlError.message}\n${yamlError.mark.snippet}`, "YAMLError", yamlError.mark.name, yamlError.mark.line, yamlError.mark.column);

      }

    case "SchemaValidationError":
      {
        var validationError = error;
        return (0, createWarningOrErrorString_1.createErrorString)(validationError.message, "SchemaValidationError", validationError.filepath);
      }

    case "MissingFileError":
      {
        var missingFileError = error;
        return (0, createWarningOrErrorString_1.createErrorString)(missingFileError.message, "MissingFileError", missingFileError.filepath);
      }

    default:
      return (0, createWarningOrErrorString_1.createErrorString)(error.message, "UnknownError");
  }
}

exports.convertCompetenceFrameworkValidationErrorToErrorString = convertCompetenceFrameworkValidationErrorToErrorString;

/***/ }),

/***/ "../shared/dist/validate/createWarningOrErrorString.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";
 // import chalk from "chalk"; // use version 4 for TypeScript, until TypeScript 4.6 is available

exports.__esModule = true;
exports.createWarningString = exports.createErrorString = void 0;
var errorLastFilepath;
var errorColumnAddCount = 0;
var warningLastFilepath;
var warningColumnAddCount = 0;

function createErrorString(message, errorType, filepath, line, column) {
  if (filepath === void 0) {
    filepath = "";
  }

  if (line === void 0) {
    line = 1;
  }

  if (column === void 0) {
    column = 1;
  } // reporting on same filepath, same line, same column skips line in VSCode "Problems" pane - increment column


  if (errorLastFilepath === filepath && line === 1 && column === 1) {
    errorColumnAddCount = errorColumnAddCount + 1;
    column = column + errorColumnAddCount;
  } else {
    // reset;
    errorColumnAddCount = 0;
  }

  errorLastFilepath = filepath;
  var filepathString = filepath === "" ? "<nofile>" : filepath; // const errorMessage = `${chalk.bgRed("ERROR")}: ${filepathString}(${line},${column}): ${errorType} - ${message}`;

  var errorMessage = "ERROR: ".concat(filepathString, "(").concat(line, ",").concat(column, "): ").concat(errorType, " - ").concat(message);
  return errorMessage;
}

exports.createErrorString = createErrorString;

function createWarningString(message, errorType, filepath, line, column) {
  if (filepath === void 0) {
    filepath = "";
  }

  if (line === void 0) {
    line = 1;
  }

  if (column === void 0) {
    column = 1;
  } // reporting on same filepath, same line, same column skips line in VSCode "Problems" pane - increment column


  if (warningLastFilepath === filepath && line === 1 && column === 1) {
    warningColumnAddCount = warningColumnAddCount + 1;
    column = column + warningColumnAddCount;
  } else {
    // reset;
    warningColumnAddCount = 0;
  }

  warningLastFilepath = filepath;
  var filepathString = filepath === "" ? "<nofile>" : filepath; // const warningMessage = `${chalk.bgYellow("WARNING")}: ${filepathString}(${line},${column}): ${errorType} - ${message}`;

  var warningMessage = "WARNING: ".concat(filepathString, "(").concat(line, ",").concat(column, "): ").concat(errorType, " - ").concat(message);
  return warningMessage;
}

exports.createWarningString = createWarningString;

/***/ }),

/***/ "../shared/dist/validate/deprecated_validateTopics.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
exports.deprecated_validateTopics = void 0;

var constrains_1 = __webpack_require__("../shared/dist/constrains.js");

var parseBool_1 = __webpack_require__("../shared/dist/util/parseBool.js");

function deprecated_validateTopics(topics) {
  if (!topics) {
    return {
      error: true,
      errorMessages: "No topics to validate."
    };
  }

  var error = false;
  var errorMessages = "";
  topics.map(function (topic) {
    if (!topic.internal) {
      var _a = validateTopic(topic),
          topicError = _a.error,
          topicErrorMessages = _a.errorMessages;

      if (topicError) {
        error = true;
        errorMessages += topicErrorMessages;
      }
    }
  });
  return {
    error: error,
    errorMessages: errorMessages
  };
}

exports.deprecated_validateTopics = deprecated_validateTopics;

function validateTopic(topic) {
  var error = false;
  var errorMessages = "";

  var recordError = function (property, errorMessage) {
    error = true;
    errorMessages += "".concat(topic.markdownFilePath, ", ").concat(property, ": ").concat(errorMessage, "\n");
  };

  if (!topic.name) recordError("name", "missing");

  if (!topic.skillType) {
    recordError("skillType", "missing");
  } else {
    if (!constrains_1.skillTypeValuesConstraints.includes(topic.skillType)) recordError("skillType", "expected one of the values: ".concat(constrains_1.skillTypeValuesConstraints.toString()));
  }

  if ((0, parseBool_1.parseBool)(topic.isLearningPath) === null) recordError("isLearningPath", "missing, or not 'true' or 'false'");
  if (!topic.excerpt) recordError("excerpt", "missing");

  if ((0, parseBool_1.parseBool)(topic.showOnRadar) === null) {
    recordError("showOnRadar", "missing, or not 'true' or 'false'");
  } else {
    if (topic.showOnRadar) {
      if (!topic.ring) {
        recordError("ring", "missing, mandatory if showOnRadar is true");
      } else {
        if (!constrains_1.ringValuesConstraints.includes(topic.ring)) recordError("ring", "expected one of the values: ".concat(constrains_1.ringValuesConstraints.toString()));
      }

      if (!topic.quadrant) {
        recordError("quadrant", "missing, mandatory if showOnRadar is true");
      } else {
        if (!constrains_1.quadrantValuesConstraints.includes(topic.quadrant)) recordError("quadrant", "expected one of the values: ".concat(constrains_1.quadrantValuesConstraints.toString()));
      }

      if ((0, parseBool_1.parseBool)(topic.isNew) === null) recordError("isNew", "missing, or not 'true' or 'false'");
    }
  }

  return {
    error: error,
    errorMessages: errorMessages
  };
}

/***/ }),

/***/ "../shared/dist/validate/markdownPathToSchema.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = this && this.__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

exports.__esModule = true;
exports.markdownPathToSchema = void 0;

var factory_1 = __webpack_require__("../shared/dist/schema/factory.js");

var markdownPathToSubject_1 = __webpack_require__("../shared/dist/util/markdownPathToSubject.js");

function markdownPathToSchema(path, getCompetenceFrameworkSettings, getCompetenceTeamSettings) {
  var _a;

  return __awaiter(this, void 0, void 0, function () {
    var subjectInfo, settings, ctSettings;
    return __generator(this, function (_b) {
      switch (_b.label) {
        case 0:
          subjectInfo = (0, markdownPathToSubject_1.markdownPathToSubject)(path);

          if (subjectInfo === null) {
            return [2
            /*return*/
            , null];
          }

          return [4
          /*yield*/
          , getCompetenceFrameworkSettings()];

        case 1:
          settings = _b.sent();
          return [4
          /*yield*/
          , getCompetenceTeamSettings((_a = subjectInfo.competenceteam) !== null && _a !== void 0 ? _a : "")];

        case 2:
          ctSettings = _b.sent();
          return [2
          /*return*/
          , (0, factory_1.getSchemaInfo)(subjectInfo, settings, ctSettings)];
      }
    });
  });
}

exports.markdownPathToSchema = markdownPathToSchema;

/***/ }),

/***/ "../shared/dist/validate/validateCompetenceFrameworkSettings.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
exports.validateCompetenceFrameworkSettings = void 0;

var validateObject_1 = __webpack_require__("../shared/dist/validate/validateObject.js");

var competenceFrameworkSettings_1 = __webpack_require__("../shared/dist/schema/competenceFrameworkSettings.js");

function validateCompetenceFrameworkSettings(filepath, competenceFrameworkSettings) {
  var schema = (0, competenceFrameworkSettings_1.competenceFrameworkSettingsGetJSONSchema)();
  var schemaValidationResult = (0, validateObject_1.validateObjectAgainstSchema)(filepath, competenceFrameworkSettings, schema);
  return schemaValidationResult;
}

exports.validateCompetenceFrameworkSettings = validateCompetenceFrameworkSettings;

/***/ }),

/***/ "../shared/dist/validate/validateCompetenceTeamSettings.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
exports.validateCompetenceTeamSettings = void 0;

var validateObject_1 = __webpack_require__("../shared/dist/validate/validateObject.js");

var competenceTeamSettings_1 = __webpack_require__("../shared/dist/schema/competenceTeamSettings.js");

function validateCompetenceTeamSettings(filepath, competenceTeamSettings) {
  var jsonSchema = (0, competenceTeamSettings_1.competenceTeamSettingsGetJSONSchema)();
  var schemaValidationResult = (0, validateObject_1.validateObjectAgainstSchema)(filepath, competenceTeamSettings, jsonSchema);
  return schemaValidationResult;
}

exports.validateCompetenceTeamSettings = validateCompetenceTeamSettings;

/***/ }),

/***/ "../shared/dist/validate/validateObject.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

exports.__esModule = true;
exports.convertSchemaValidationErrorToErrorString = exports.validateObjectAgainstSchema = void 0;

var ajv_1 = __importDefault(__webpack_require__("../shared/node_modules/ajv/dist/ajv.js"));

function validateObjectAgainstSchema(filepath, obj, jsonSchema) {
  // Validation using JSON Schema
  var ajv = new ajv_1["default"]({
    strict: "log",
    allErrors: true
  });
  var validate = ajv.compile(jsonSchema);

  if (!validate(obj) && validate.errors) {
    var schemaValidationResult = validate.errors.map(function (err) {
      var errMessage = "";

      if (err.instancePath != "") {
        errMessage += err.instancePath.split("/").pop() + " ";
      }

      errMessage += err.message;

      if (err.keyword == "enum") {
        errMessage += ":\n    " + err.params.allowedValues.join("\n    ");
      }

      return {
        errorType: "SchemaValidationError",
        filepath: filepath,
        path: err.keyword,
        message: errMessage
      };
    });
    return schemaValidationResult;
  }

  return [];
}

exports.validateObjectAgainstSchema = validateObjectAgainstSchema;

function convertSchemaValidationErrorToErrorString(err) {
  return "packages/content/".concat(err.filepath, ":0:0: SchemaValidationError: ").concat(err.filepath, " - ").concat(err.message);
}

exports.convertSchemaValidationErrorToErrorString = convertSchemaValidationErrorToErrorString;

/***/ }),

/***/ "../shared/dist/validate/validatePageFrontmatter.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = this && this.__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

exports.__esModule = true;
exports.validatePageFrontmatter = void 0;

var front_matter_1 = __importDefault(__webpack_require__("../shared/node_modules/front-matter/index.js"));

var markdownPathToSchema_1 = __webpack_require__("../shared/dist/validate/markdownPathToSchema.js");

var validateObject_1 = __webpack_require__("../shared/dist/validate/validateObject.js");

function validatePageFrontmatter(filepath, markdown, getCompetenceFrameworkSettings, getCompetenceTeamSettings) {
  return __awaiter(this, void 0, void 0, function () {
    var results, schemaInfo, schemaValidationResult, yamlException_1, yamlError;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          _a.trys.push([0, 2,, 3]);

          results = (0, front_matter_1["default"])(markdown);
          return [4
          /*yield*/
          , (0, markdownPathToSchema_1.markdownPathToSchema)(filepath, getCompetenceFrameworkSettings, getCompetenceTeamSettings)];

        case 1:
          schemaInfo = _a.sent();

          if (schemaInfo == null) {
            // no schema for this filepath, don't validate
            return [2
            /*return*/
            , null];
          }

          schemaValidationResult = (0, validateObject_1.validateObjectAgainstSchema)(filepath, results.attributes, schemaInfo.jsonSchema);
          return [2
          /*return*/
          , schemaValidationResult];

        case 2:
          yamlException_1 = _a.sent();
          yamlError = yamlException_1;
          yamlError.errorType = "YAMLError";
          yamlError.name = filepath;
          return [2
          /*return*/
          , [yamlError]];

        case 3:
          return [2
          /*return*/
          ];
      }
    });
  });
}

exports.validatePageFrontmatter = validatePageFrontmatter;

/***/ }),

/***/ "../shared/dist/validate/validateYaml.js":
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function () {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);

  __setModuleDefault(result, mod);

  return result;
};

exports.__esModule = true;
exports.validateYamlAgainstSchema = exports.validateYaml = void 0;

var yaml = __importStar(__webpack_require__("../shared/node_modules/js-yaml/index.js"));

var validateObject_1 = __webpack_require__("../shared/dist/validate/validateObject.js");
/**
 * Validate a YAML string.
 *
 * @param filepath Path to the YAML file
 * @param str YAML string to validate
 * @returns null if valid, otherwise YAMLException with details on error
 *
 * YAMLException contains the following fields:
 * - name: The name of the error (YAMLException)
 * - reason: The reason for the error
 * - message: The message of the error
 * - mark: The position of the error in the YAML file
 * - mark.name: the injected filepath specified
 * - mark.buffer: the YAML string
 * - mark.position: the position of the error in the YAML string
 * - mark.line: the line number of the error in the YAML string
 * - mark.column: the column number of the error in the YAML string
 * - mark.snippet: the snippet of the YAML string where the error occurred, including newlines for display
 */


function validateYaml(filepath, str) {
  try {
    var data = yaml.load(str);
    console.log(JSON.stringify(data, null, 2));
    return null;
  } catch (e) {
    var err = e;
    err.errorType = "YAMLError";
    err.mark.name = filepath;
    console.log(err.stack || String(err));
    return err;
  }
}

exports.validateYaml = validateYaml;

function validateYamlAgainstSchema(filepath, str, jsonSchema) {
  var obj;

  if (str == null || str.trim() === "") {
    obj = {};
  } else {
    obj = yaml.load(str);
  }

  return (0, validateObject_1.validateObjectAgainstSchema)(filepath, obj, jsonSchema);
}

exports.validateYamlAgainstSchema = validateYamlAgainstSchema;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/ajv.js":
/***/ ((module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;

const core_1 = __webpack_require__("../shared/node_modules/ajv/dist/core.js");

const draft7_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/draft7.js");

const discriminator_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/discriminator/index.js");

const draft7MetaSchema = __webpack_require__("../shared/node_modules/ajv/dist/refs/json-schema-draft-07.json");

const META_SUPPORT_DATA = ["/properties"];
const META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";

class Ajv extends core_1.default {
  _addVocabularies() {
    super._addVocabularies();

    draft7_1.default.forEach(v => this.addVocabulary(v));
    if (this.opts.discriminator) this.addKeyword(discriminator_1.default);
  }

  _addDefaultMetaSchema() {
    super._addDefaultMetaSchema();

    if (!this.opts.meta) return;
    const metaSchema = this.opts.$data ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA) : draft7MetaSchema;
    this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);
    this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
  }

  defaultMeta() {
    return this.opts.defaultMeta = super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined);
  }

}

module.exports = exports = Ajv;
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = Ajv;

var validate_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/validate/index.js");

Object.defineProperty(exports, "KeywordCxt", ({
  enumerable: true,
  get: function () {
    return validate_1.KeywordCxt;
  }
}));

var codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

Object.defineProperty(exports, "_", ({
  enumerable: true,
  get: function () {
    return codegen_1._;
  }
}));
Object.defineProperty(exports, "str", ({
  enumerable: true,
  get: function () {
    return codegen_1.str;
  }
}));
Object.defineProperty(exports, "stringify", ({
  enumerable: true,
  get: function () {
    return codegen_1.stringify;
  }
}));
Object.defineProperty(exports, "nil", ({
  enumerable: true,
  get: function () {
    return codegen_1.nil;
  }
}));
Object.defineProperty(exports, "Name", ({
  enumerable: true,
  get: function () {
    return codegen_1.Name;
  }
}));
Object.defineProperty(exports, "CodeGen", ({
  enumerable: true,
  get: function () {
    return codegen_1.CodeGen;
  }
}));

/***/ }),

/***/ "../shared/node_modules/ajv/dist/compile/codegen/code.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.regexpCode = exports.getEsmExportName = exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = void 0;

class _CodeOrName {}

exports._CodeOrName = _CodeOrName;
exports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;

class Name extends _CodeOrName {
  constructor(s) {
    super();
    if (!exports.IDENTIFIER.test(s)) throw new Error("CodeGen: name must be a valid identifier");
    this.str = s;
  }

  toString() {
    return this.str;
  }

  emptyStr() {
    return false;
  }

  get names() {
    return {
      [this.str]: 1
    };
  }

}

exports.Name = Name;

class _Code extends _CodeOrName {
  constructor(code) {
    super();
    this._items = typeof code === "string" ? [code] : code;
  }

  toString() {
    return this.str;
  }

  emptyStr() {
    if (this._items.length > 1) return false;
    const item = this._items[0];
    return item === "" || item === '""';
  }

  get str() {
    var _a;

    return (_a = this._str) !== null && _a !== void 0 ? _a : this._str = this._items.reduce((s, c) => `${s}${c}`, "");
  }

  get names() {
    var _a;

    return (_a = this._names) !== null && _a !== void 0 ? _a : this._names = this._items.reduce((names, c) => {
      if (c instanceof Name) names[c.str] = (names[c.str] || 0) + 1;
      return names;
    }, {});
  }

}

exports._Code = _Code;
exports.nil = new _Code("");

function _(strs, ...args) {
  const code = [strs[0]];
  let i = 0;

  while (i < args.length) {
    addCodeArg(code, args[i]);
    code.push(strs[++i]);
  }

  return new _Code(code);
}

exports._ = _;
const plus = new _Code("+");

function str(strs, ...args) {
  const expr = [safeStringify(strs[0])];
  let i = 0;

  while (i < args.length) {
    expr.push(plus);
    addCodeArg(expr, args[i]);
    expr.push(plus, safeStringify(strs[++i]));
  }

  optimize(expr);
  return new _Code(expr);
}

exports.str = str;

function addCodeArg(code, arg) {
  if (arg instanceof _Code) code.push(...arg._items);else if (arg instanceof Name) code.push(arg);else code.push(interpolate(arg));
}

exports.addCodeArg = addCodeArg;

function optimize(expr) {
  let i = 1;

  while (i < expr.length - 1) {
    if (expr[i] === plus) {
      const res = mergeExprItems(expr[i - 1], expr[i + 1]);

      if (res !== undefined) {
        expr.splice(i - 1, 3, res);
        continue;
      }

      expr[i++] = "+";
    }

    i++;
  }
}

function mergeExprItems(a, b) {
  if (b === '""') return a;
  if (a === '""') return b;

  if (typeof a == "string") {
    if (b instanceof Name || a[a.length - 1] !== '"') return;
    if (typeof b != "string") return `${a.slice(0, -1)}${b}"`;
    if (b[0] === '"') return a.slice(0, -1) + b.slice(1);
    return;
  }

  if (typeof b == "string" && b[0] === '"' && !(a instanceof Name)) return `"${a}${b.slice(1)}`;
  return;
}

function strConcat(c1, c2) {
  return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str`${c1}${c2}`;
}

exports.strConcat = strConcat; // TODO do not allow arrays here

function interpolate(x) {
  return typeof x == "number" || typeof x == "boolean" || x === null ? x : safeStringify(Array.isArray(x) ? x.join(",") : x);
}

function stringify(x) {
  return new _Code(safeStringify(x));
}

exports.stringify = stringify;

function safeStringify(x) {
  return JSON.stringify(x).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
}

exports.safeStringify = safeStringify;

function getProperty(key) {
  return typeof key == "string" && exports.IDENTIFIER.test(key) ? new _Code(`.${key}`) : _`[${key}]`;
}

exports.getProperty = getProperty; //Does best effort to format the name properly

function getEsmExportName(key) {
  if (typeof key == "string" && exports.IDENTIFIER.test(key)) {
    return new _Code(`${key}`);
  }

  throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`);
}

exports.getEsmExportName = getEsmExportName;

function regexpCode(rx) {
  return new _Code(rx.toString());
}

exports.regexpCode = regexpCode;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/compile/codegen/index.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;

const code_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/code.js");

const scope_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/scope.js");

var code_2 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/code.js");

Object.defineProperty(exports, "_", ({
  enumerable: true,
  get: function () {
    return code_2._;
  }
}));
Object.defineProperty(exports, "str", ({
  enumerable: true,
  get: function () {
    return code_2.str;
  }
}));
Object.defineProperty(exports, "strConcat", ({
  enumerable: true,
  get: function () {
    return code_2.strConcat;
  }
}));
Object.defineProperty(exports, "nil", ({
  enumerable: true,
  get: function () {
    return code_2.nil;
  }
}));
Object.defineProperty(exports, "getProperty", ({
  enumerable: true,
  get: function () {
    return code_2.getProperty;
  }
}));
Object.defineProperty(exports, "stringify", ({
  enumerable: true,
  get: function () {
    return code_2.stringify;
  }
}));
Object.defineProperty(exports, "regexpCode", ({
  enumerable: true,
  get: function () {
    return code_2.regexpCode;
  }
}));
Object.defineProperty(exports, "Name", ({
  enumerable: true,
  get: function () {
    return code_2.Name;
  }
}));

var scope_2 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/scope.js");

Object.defineProperty(exports, "Scope", ({
  enumerable: true,
  get: function () {
    return scope_2.Scope;
  }
}));
Object.defineProperty(exports, "ValueScope", ({
  enumerable: true,
  get: function () {
    return scope_2.ValueScope;
  }
}));
Object.defineProperty(exports, "ValueScopeName", ({
  enumerable: true,
  get: function () {
    return scope_2.ValueScopeName;
  }
}));
Object.defineProperty(exports, "varKinds", ({
  enumerable: true,
  get: function () {
    return scope_2.varKinds;
  }
}));
exports.operators = {
  GT: new code_1._Code(">"),
  GTE: new code_1._Code(">="),
  LT: new code_1._Code("<"),
  LTE: new code_1._Code("<="),
  EQ: new code_1._Code("==="),
  NEQ: new code_1._Code("!=="),
  NOT: new code_1._Code("!"),
  OR: new code_1._Code("||"),
  AND: new code_1._Code("&&"),
  ADD: new code_1._Code("+")
};

class Node {
  optimizeNodes() {
    return this;
  }

  optimizeNames(_names, _constants) {
    return this;
  }

}

class Def extends Node {
  constructor(varKind, name, rhs) {
    super();
    this.varKind = varKind;
    this.name = name;
    this.rhs = rhs;
  }

  render({
    es5,
    _n
  }) {
    const varKind = es5 ? scope_1.varKinds.var : this.varKind;
    const rhs = this.rhs === undefined ? "" : ` = ${this.rhs}`;
    return `${varKind} ${this.name}${rhs};` + _n;
  }

  optimizeNames(names, constants) {
    if (!names[this.name.str]) return;
    if (this.rhs) this.rhs = optimizeExpr(this.rhs, names, constants);
    return this;
  }

  get names() {
    return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};
  }

}

class Assign extends Node {
  constructor(lhs, rhs, sideEffects) {
    super();
    this.lhs = lhs;
    this.rhs = rhs;
    this.sideEffects = sideEffects;
  }

  render({
    _n
  }) {
    return `${this.lhs} = ${this.rhs};` + _n;
  }

  optimizeNames(names, constants) {
    if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects) return;
    this.rhs = optimizeExpr(this.rhs, names, constants);
    return this;
  }

  get names() {
    const names = this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names
    };
    return addExprNames(names, this.rhs);
  }

}

class AssignOp extends Assign {
  constructor(lhs, op, rhs, sideEffects) {
    super(lhs, rhs, sideEffects);
    this.op = op;
  }

  render({
    _n
  }) {
    return `${this.lhs} ${this.op}= ${this.rhs};` + _n;
  }

}

class Label extends Node {
  constructor(label) {
    super();
    this.label = label;
    this.names = {};
  }

  render({
    _n
  }) {
    return `${this.label}:` + _n;
  }

}

class Break extends Node {
  constructor(label) {
    super();
    this.label = label;
    this.names = {};
  }

  render({
    _n
  }) {
    const label = this.label ? ` ${this.label}` : "";
    return `break${label};` + _n;
  }

}

class Throw extends Node {
  constructor(error) {
    super();
    this.error = error;
  }

  render({
    _n
  }) {
    return `throw ${this.error};` + _n;
  }

  get names() {
    return this.error.names;
  }

}

class AnyCode extends Node {
  constructor(code) {
    super();
    this.code = code;
  }

  render({
    _n
  }) {
    return `${this.code};` + _n;
  }

  optimizeNodes() {
    return `${this.code}` ? this : undefined;
  }

  optimizeNames(names, constants) {
    this.code = optimizeExpr(this.code, names, constants);
    return this;
  }

  get names() {
    return this.code instanceof code_1._CodeOrName ? this.code.names : {};
  }

}

class ParentNode extends Node {
  constructor(nodes = []) {
    super();
    this.nodes = nodes;
  }

  render(opts) {
    return this.nodes.reduce((code, n) => code + n.render(opts), "");
  }

  optimizeNodes() {
    const {
      nodes
    } = this;
    let i = nodes.length;

    while (i--) {
      const n = nodes[i].optimizeNodes();
      if (Array.isArray(n)) nodes.splice(i, 1, ...n);else if (n) nodes[i] = n;else nodes.splice(i, 1);
    }

    return nodes.length > 0 ? this : undefined;
  }

  optimizeNames(names, constants) {
    const {
      nodes
    } = this;
    let i = nodes.length;

    while (i--) {
      // iterating backwards improves 1-pass optimization
      const n = nodes[i];
      if (n.optimizeNames(names, constants)) continue;
      subtractNames(names, n.names);
      nodes.splice(i, 1);
    }

    return nodes.length > 0 ? this : undefined;
  }

  get names() {
    return this.nodes.reduce((names, n) => addNames(names, n.names), {});
  }

}

class BlockNode extends ParentNode {
  render(opts) {
    return "{" + opts._n + super.render(opts) + "}" + opts._n;
  }

}

class Root extends ParentNode {}

class Else extends BlockNode {}

Else.kind = "else";

class If extends BlockNode {
  constructor(condition, nodes) {
    super(nodes);
    this.condition = condition;
  }

  render(opts) {
    let code = `if(${this.condition})` + super.render(opts);
    if (this.else) code += "else " + this.else.render(opts);
    return code;
  }

  optimizeNodes() {
    super.optimizeNodes();
    const cond = this.condition;
    if (cond === true) return this.nodes; // else is ignored here

    let e = this.else;

    if (e) {
      const ns = e.optimizeNodes();
      e = this.else = Array.isArray(ns) ? new Else(ns) : ns;
    }

    if (e) {
      if (cond === false) return e instanceof If ? e : e.nodes;
      if (this.nodes.length) return this;
      return new If(not(cond), e instanceof If ? [e] : e.nodes);
    }

    if (cond === false || !this.nodes.length) return undefined;
    return this;
  }

  optimizeNames(names, constants) {
    var _a;

    this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
    if (!(super.optimizeNames(names, constants) || this.else)) return;
    this.condition = optimizeExpr(this.condition, names, constants);
    return this;
  }

  get names() {
    const names = super.names;
    addExprNames(names, this.condition);
    if (this.else) addNames(names, this.else.names);
    return names;
  }

}

If.kind = "if";

class For extends BlockNode {}

For.kind = "for";

class ForLoop extends For {
  constructor(iteration) {
    super();
    this.iteration = iteration;
  }

  render(opts) {
    return `for(${this.iteration})` + super.render(opts);
  }

  optimizeNames(names, constants) {
    if (!super.optimizeNames(names, constants)) return;
    this.iteration = optimizeExpr(this.iteration, names, constants);
    return this;
  }

  get names() {
    return addNames(super.names, this.iteration.names);
  }

}

class ForRange extends For {
  constructor(varKind, name, from, to) {
    super();
    this.varKind = varKind;
    this.name = name;
    this.from = from;
    this.to = to;
  }

  render(opts) {
    const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;
    const {
      name,
      from,
      to
    } = this;
    return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);
  }

  get names() {
    const names = addExprNames(super.names, this.from);
    return addExprNames(names, this.to);
  }

}

class ForIter extends For {
  constructor(loop, varKind, name, iterable) {
    super();
    this.loop = loop;
    this.varKind = varKind;
    this.name = name;
    this.iterable = iterable;
  }

  render(opts) {
    return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);
  }

  optimizeNames(names, constants) {
    if (!super.optimizeNames(names, constants)) return;
    this.iterable = optimizeExpr(this.iterable, names, constants);
    return this;
  }

  get names() {
    return addNames(super.names, this.iterable.names);
  }

}

class Func extends BlockNode {
  constructor(name, args, async) {
    super();
    this.name = name;
    this.args = args;
    this.async = async;
  }

  render(opts) {
    const _async = this.async ? "async " : "";

    return `${_async}function ${this.name}(${this.args})` + super.render(opts);
  }

}

Func.kind = "func";

class Return extends ParentNode {
  render(opts) {
    return "return " + super.render(opts);
  }

}

Return.kind = "return";

class Try extends BlockNode {
  render(opts) {
    let code = "try" + super.render(opts);
    if (this.catch) code += this.catch.render(opts);
    if (this.finally) code += this.finally.render(opts);
    return code;
  }

  optimizeNodes() {
    var _a, _b;

    super.optimizeNodes();
    (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();
    (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();
    return this;
  }

  optimizeNames(names, constants) {
    var _a, _b;

    super.optimizeNames(names, constants);
    (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
    (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);
    return this;
  }

  get names() {
    const names = super.names;
    if (this.catch) addNames(names, this.catch.names);
    if (this.finally) addNames(names, this.finally.names);
    return names;
  }

}

class Catch extends BlockNode {
  constructor(error) {
    super();
    this.error = error;
  }

  render(opts) {
    return `catch(${this.error})` + super.render(opts);
  }

}

Catch.kind = "catch";

class Finally extends BlockNode {
  render(opts) {
    return "finally" + super.render(opts);
  }

}

Finally.kind = "finally";

class CodeGen {
  constructor(extScope, opts = {}) {
    this._values = {};
    this._blockStarts = [];
    this._constants = {};
    this.opts = { ...opts,
      _n: opts.lines ? "\n" : ""
    };
    this._extScope = extScope;
    this._scope = new scope_1.Scope({
      parent: extScope
    });
    this._nodes = [new Root()];
  }

  toString() {
    return this._root.render(this.opts);
  } // returns unique name in the internal scope


  name(prefix) {
    return this._scope.name(prefix);
  } // reserves unique name in the external scope


  scopeName(prefix) {
    return this._extScope.name(prefix);
  } // reserves unique name in the external scope and assigns value to it


  scopeValue(prefixOrName, value) {
    const name = this._extScope.value(prefixOrName, value);

    const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());
    vs.add(name);
    return name;
  }

  getScopeValue(prefix, keyOrRef) {
    return this._extScope.getValue(prefix, keyOrRef);
  } // return code that assigns values in the external scope to the names that are used internally
  // (same names that were returned by gen.scopeName or gen.scopeValue)


  scopeRefs(scopeName) {
    return this._extScope.scopeRefs(scopeName, this._values);
  }

  scopeCode() {
    return this._extScope.scopeCode(this._values);
  }

  _def(varKind, nameOrPrefix, rhs, constant) {
    const name = this._scope.toName(nameOrPrefix);

    if (rhs !== undefined && constant) this._constants[name.str] = rhs;

    this._leafNode(new Def(varKind, name, rhs));

    return name;
  } // `const` declaration (`var` in es5 mode)


  const(nameOrPrefix, rhs, _constant) {
    return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);
  } // `let` declaration with optional assignment (`var` in es5 mode)


  let(nameOrPrefix, rhs, _constant) {
    return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);
  } // `var` declaration with optional assignment


  var(nameOrPrefix, rhs, _constant) {
    return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);
  } // assignment code


  assign(lhs, rhs, sideEffects) {
    return this._leafNode(new Assign(lhs, rhs, sideEffects));
  } // `+=` code


  add(lhs, rhs) {
    return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));
  } // appends passed SafeExpr to code or executes Block


  code(c) {
    if (typeof c == "function") c();else if (c !== code_1.nil) this._leafNode(new AnyCode(c));
    return this;
  } // returns code for object literal for the passed argument list of key-value pairs


  object(...keyValues) {
    const code = ["{"];

    for (const [key, value] of keyValues) {
      if (code.length > 1) code.push(",");
      code.push(key);

      if (key !== value || this.opts.es5) {
        code.push(":");
        (0, code_1.addCodeArg)(code, value);
      }
    }

    code.push("}");
    return new code_1._Code(code);
  } // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)


  if(condition, thenBody, elseBody) {
    this._blockNode(new If(condition));

    if (thenBody && elseBody) {
      this.code(thenBody).else().code(elseBody).endIf();
    } else if (thenBody) {
      this.code(thenBody).endIf();
    } else if (elseBody) {
      throw new Error('CodeGen: "else" body without "then" body');
    }

    return this;
  } // `else if` clause - invalid without `if` or after `else` clauses


  elseIf(condition) {
    return this._elseNode(new If(condition));
  } // `else` clause - only valid after `if` or `else if` clauses


  else() {
    return this._elseNode(new Else());
  } // end `if` statement (needed if gen.if was used only with condition)


  endIf() {
    return this._endBlockNode(If, Else);
  }

  _for(node, forBody) {
    this._blockNode(node);

    if (forBody) this.code(forBody).endFor();
    return this;
  } // a generic `for` clause (or statement if `forBody` is passed)


  for(iteration, forBody) {
    return this._for(new ForLoop(iteration), forBody);
  } // `for` statement for a range of values


  forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {
    const name = this._scope.toName(nameOrPrefix);

    return this._for(new ForRange(varKind, name, from, to), () => forBody(name));
  } // `for-of` statement (in es5 mode replace with a normal for loop)


  forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {
    const name = this._scope.toName(nameOrPrefix);

    if (this.opts.es5) {
      const arr = iterable instanceof code_1.Name ? iterable : this.var("_arr", iterable);
      return this.forRange("_i", 0, (0, code_1._)`${arr}.length`, i => {
        this.var(name, (0, code_1._)`${arr}[${i}]`);
        forBody(name);
      });
    }

    return this._for(new ForIter("of", varKind, name, iterable), () => forBody(name));
  } // `for-in` statement.
  // With option `ownProperties` replaced with a `for-of` loop for object keys


  forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {
    if (this.opts.ownProperties) {
      return this.forOf(nameOrPrefix, (0, code_1._)`Object.keys(${obj})`, forBody);
    }

    const name = this._scope.toName(nameOrPrefix);

    return this._for(new ForIter("in", varKind, name, obj), () => forBody(name));
  } // end `for` loop


  endFor() {
    return this._endBlockNode(For);
  } // `label` statement


  label(label) {
    return this._leafNode(new Label(label));
  } // `break` statement


  break(label) {
    return this._leafNode(new Break(label));
  } // `return` statement


  return(value) {
    const node = new Return();

    this._blockNode(node);

    this.code(value);
    if (node.nodes.length !== 1) throw new Error('CodeGen: "return" should have one node');
    return this._endBlockNode(Return);
  } // `try` statement


  try(tryBody, catchCode, finallyCode) {
    if (!catchCode && !finallyCode) throw new Error('CodeGen: "try" without "catch" and "finally"');
    const node = new Try();

    this._blockNode(node);

    this.code(tryBody);

    if (catchCode) {
      const error = this.name("e");
      this._currNode = node.catch = new Catch(error);
      catchCode(error);
    }

    if (finallyCode) {
      this._currNode = node.finally = new Finally();
      this.code(finallyCode);
    }

    return this._endBlockNode(Catch, Finally);
  } // `throw` statement


  throw(error) {
    return this._leafNode(new Throw(error));
  } // start self-balancing block


  block(body, nodeCount) {
    this._blockStarts.push(this._nodes.length);

    if (body) this.code(body).endBlock(nodeCount);
    return this;
  } // end the current self-balancing block


  endBlock(nodeCount) {
    const len = this._blockStarts.pop();

    if (len === undefined) throw new Error("CodeGen: not in self-balancing block");
    const toClose = this._nodes.length - len;

    if (toClose < 0 || nodeCount !== undefined && toClose !== nodeCount) {
      throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);
    }

    this._nodes.length = len;
    return this;
  } // `function` heading (or definition if funcBody is passed)


  func(name, args = code_1.nil, async, funcBody) {
    this._blockNode(new Func(name, args, async));

    if (funcBody) this.code(funcBody).endFunc();
    return this;
  } // end function definition


  endFunc() {
    return this._endBlockNode(Func);
  }

  optimize(n = 1) {
    while (n-- > 0) {
      this._root.optimizeNodes();

      this._root.optimizeNames(this._root.names, this._constants);
    }
  }

  _leafNode(node) {
    this._currNode.nodes.push(node);

    return this;
  }

  _blockNode(node) {
    this._currNode.nodes.push(node);

    this._nodes.push(node);
  }

  _endBlockNode(N1, N2) {
    const n = this._currNode;

    if (n instanceof N1 || N2 && n instanceof N2) {
      this._nodes.pop();

      return this;
    }

    throw new Error(`CodeGen: not in block "${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}"`);
  }

  _elseNode(node) {
    const n = this._currNode;

    if (!(n instanceof If)) {
      throw new Error('CodeGen: "else" without "if"');
    }

    this._currNode = n.else = node;
    return this;
  }

  get _root() {
    return this._nodes[0];
  }

  get _currNode() {
    const ns = this._nodes;
    return ns[ns.length - 1];
  }

  set _currNode(node) {
    const ns = this._nodes;
    ns[ns.length - 1] = node;
  }

}

exports.CodeGen = CodeGen;

function addNames(names, from) {
  for (const n in from) names[n] = (names[n] || 0) + (from[n] || 0);

  return names;
}

function addExprNames(names, from) {
  return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;
}

function optimizeExpr(expr, names, constants) {
  if (expr instanceof code_1.Name) return replaceName(expr);
  if (!canOptimize(expr)) return expr;
  return new code_1._Code(expr._items.reduce((items, c) => {
    if (c instanceof code_1.Name) c = replaceName(c);
    if (c instanceof code_1._Code) items.push(...c._items);else items.push(c);
    return items;
  }, []));

  function replaceName(n) {
    const c = constants[n.str];
    if (c === undefined || names[n.str] !== 1) return n;
    delete names[n.str];
    return c;
  }

  function canOptimize(e) {
    return e instanceof code_1._Code && e._items.some(c => c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined);
  }
}

function subtractNames(names, from) {
  for (const n in from) names[n] = (names[n] || 0) - (from[n] || 0);
}

function not(x) {
  return typeof x == "boolean" || typeof x == "number" || x === null ? !x : (0, code_1._)`!${par(x)}`;
}

exports.not = not;
const andCode = mappend(exports.operators.AND); // boolean AND (&&) expression with the passed arguments

function and(...args) {
  return args.reduce(andCode);
}

exports.and = and;
const orCode = mappend(exports.operators.OR); // boolean OR (||) expression with the passed arguments

function or(...args) {
  return args.reduce(orCode);
}

exports.or = or;

function mappend(op) {
  return (x, y) => x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._)`${par(x)} ${op} ${par(y)}`;
}

function par(x) {
  return x instanceof code_1.Name ? x : (0, code_1._)`(${x})`;
}

/***/ }),

/***/ "../shared/node_modules/ajv/dist/compile/codegen/scope.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ValueScope = exports.ValueScopeName = exports.Scope = exports.varKinds = exports.UsedValueState = void 0;

const code_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/code.js");

class ValueError extends Error {
  constructor(name) {
    super(`CodeGen: "code" for ${name} not defined`);
    this.value = name.value;
  }

}

var UsedValueState;

(function (UsedValueState) {
  UsedValueState[UsedValueState["Started"] = 0] = "Started";
  UsedValueState[UsedValueState["Completed"] = 1] = "Completed";
})(UsedValueState = exports.UsedValueState || (exports.UsedValueState = {}));

exports.varKinds = {
  const: new code_1.Name("const"),
  let: new code_1.Name("let"),
  var: new code_1.Name("var")
};

class Scope {
  constructor({
    prefixes,
    parent
  } = {}) {
    this._names = {};
    this._prefixes = prefixes;
    this._parent = parent;
  }

  toName(nameOrPrefix) {
    return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);
  }

  name(prefix) {
    return new code_1.Name(this._newName(prefix));
  }

  _newName(prefix) {
    const ng = this._names[prefix] || this._nameGroup(prefix);

    return `${prefix}${ng.index++}`;
  }

  _nameGroup(prefix) {
    var _a, _b;

    if (((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix)) || this._prefixes && !this._prefixes.has(prefix)) {
      throw new Error(`CodeGen: prefix "${prefix}" is not allowed in this scope`);
    }

    return this._names[prefix] = {
      prefix,
      index: 0
    };
  }

}

exports.Scope = Scope;

class ValueScopeName extends code_1.Name {
  constructor(prefix, nameStr) {
    super(nameStr);
    this.prefix = prefix;
  }

  setValue(value, {
    property,
    itemIndex
  }) {
    this.value = value;
    this.scopePath = (0, code_1._)`.${new code_1.Name(property)}[${itemIndex}]`;
  }

}

exports.ValueScopeName = ValueScopeName;
const line = (0, code_1._)`\n`;

class ValueScope extends Scope {
  constructor(opts) {
    super(opts);
    this._values = {};
    this._scope = opts.scope;
    this.opts = { ...opts,
      _n: opts.lines ? line : code_1.nil
    };
  }

  get() {
    return this._scope;
  }

  name(prefix) {
    return new ValueScopeName(prefix, this._newName(prefix));
  }

  value(nameOrPrefix, value) {
    var _a;

    if (value.ref === undefined) throw new Error("CodeGen: ref must be passed in value");
    const name = this.toName(nameOrPrefix);
    const {
      prefix
    } = name;
    const valueKey = (_a = value.key) !== null && _a !== void 0 ? _a : value.ref;
    let vs = this._values[prefix];

    if (vs) {
      const _name = vs.get(valueKey);

      if (_name) return _name;
    } else {
      vs = this._values[prefix] = new Map();
    }

    vs.set(valueKey, name);
    const s = this._scope[prefix] || (this._scope[prefix] = []);
    const itemIndex = s.length;
    s[itemIndex] = value.ref;
    name.setValue(value, {
      property: prefix,
      itemIndex
    });
    return name;
  }

  getValue(prefix, keyOrRef) {
    const vs = this._values[prefix];
    if (!vs) return;
    return vs.get(keyOrRef);
  }

  scopeRefs(scopeName, values = this._values) {
    return this._reduceValues(values, name => {
      if (name.scopePath === undefined) throw new Error(`CodeGen: name "${name}" has no value`);
      return (0, code_1._)`${scopeName}${name.scopePath}`;
    });
  }

  scopeCode(values = this._values, usedValues, getCode) {
    return this._reduceValues(values, name => {
      if (name.value === undefined) throw new Error(`CodeGen: name "${name}" has no value`);
      return name.value.code;
    }, usedValues, getCode);
  }

  _reduceValues(values, valueCode, usedValues = {}, getCode) {
    let code = code_1.nil;

    for (const prefix in values) {
      const vs = values[prefix];
      if (!vs) continue;
      const nameSet = usedValues[prefix] = usedValues[prefix] || new Map();
      vs.forEach(name => {
        if (nameSet.has(name)) return;
        nameSet.set(name, UsedValueState.Started);
        let c = valueCode(name);

        if (c) {
          const def = this.opts.es5 ? exports.varKinds.var : exports.varKinds.const;
          code = (0, code_1._)`${code}${def} ${name} = ${c};${this.opts._n}`;
        } else if (c = getCode === null || getCode === void 0 ? void 0 : getCode(name)) {
          code = (0, code_1._)`${code}${c}${this.opts._n}`;
        } else {
          throw new ValueError(name);
        }

        nameSet.set(name, UsedValueState.Completed);
      });
    }

    return code;
  }

}

exports.ValueScope = ValueScope;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/compile/errors.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const names_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/names.js");

exports.keywordError = {
  message: ({
    keyword
  }) => (0, codegen_1.str)`must pass "${keyword}" keyword validation`
};
exports.keyword$DataError = {
  message: ({
    keyword,
    schemaType
  }) => schemaType ? (0, codegen_1.str)`"${keyword}" keyword must be ${schemaType} ($data)` : (0, codegen_1.str)`"${keyword}" keyword is invalid ($data)`
};

function reportError(cxt, error = exports.keywordError, errorPaths, overrideAllErrors) {
  const {
    it
  } = cxt;
  const {
    gen,
    compositeRule,
    allErrors
  } = it;
  const errObj = errorObjectCode(cxt, error, errorPaths);

  if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : compositeRule || allErrors) {
    addError(gen, errObj);
  } else {
    returnErrors(it, (0, codegen_1._)`[${errObj}]`);
  }
}

exports.reportError = reportError;

function reportExtraError(cxt, error = exports.keywordError, errorPaths) {
  const {
    it
  } = cxt;
  const {
    gen,
    compositeRule,
    allErrors
  } = it;
  const errObj = errorObjectCode(cxt, error, errorPaths);
  addError(gen, errObj);

  if (!(compositeRule || allErrors)) {
    returnErrors(it, names_1.default.vErrors);
  }
}

exports.reportExtraError = reportExtraError;

function resetErrorsCount(gen, errsCount) {
  gen.assign(names_1.default.errors, errsCount);
  gen.if((0, codegen_1._)`${names_1.default.vErrors} !== null`, () => gen.if(errsCount, () => gen.assign((0, codegen_1._)`${names_1.default.vErrors}.length`, errsCount), () => gen.assign(names_1.default.vErrors, null)));
}

exports.resetErrorsCount = resetErrorsCount;

function extendErrors({
  gen,
  keyword,
  schemaValue,
  data,
  errsCount,
  it
}) {
  /* istanbul ignore if */
  if (errsCount === undefined) throw new Error("ajv implementation error");
  const err = gen.name("err");
  gen.forRange("i", errsCount, names_1.default.errors, i => {
    gen.const(err, (0, codegen_1._)`${names_1.default.vErrors}[${i}]`);
    gen.if((0, codegen_1._)`${err}.instancePath === undefined`, () => gen.assign((0, codegen_1._)`${err}.instancePath`, (0, codegen_1.strConcat)(names_1.default.instancePath, it.errorPath)));
    gen.assign((0, codegen_1._)`${err}.schemaPath`, (0, codegen_1.str)`${it.errSchemaPath}/${keyword}`);

    if (it.opts.verbose) {
      gen.assign((0, codegen_1._)`${err}.schema`, schemaValue);
      gen.assign((0, codegen_1._)`${err}.data`, data);
    }
  });
}

exports.extendErrors = extendErrors;

function addError(gen, errObj) {
  const err = gen.const("err", errObj);
  gen.if((0, codegen_1._)`${names_1.default.vErrors} === null`, () => gen.assign(names_1.default.vErrors, (0, codegen_1._)`[${err}]`), (0, codegen_1._)`${names_1.default.vErrors}.push(${err})`);
  gen.code((0, codegen_1._)`${names_1.default.errors}++`);
}

function returnErrors(it, errs) {
  const {
    gen,
    validateName,
    schemaEnv
  } = it;

  if (schemaEnv.$async) {
    gen.throw((0, codegen_1._)`new ${it.ValidationError}(${errs})`);
  } else {
    gen.assign((0, codegen_1._)`${validateName}.errors`, errs);
    gen.return(false);
  }
}

const E = {
  keyword: new codegen_1.Name("keyword"),
  schemaPath: new codegen_1.Name("schemaPath"),
  params: new codegen_1.Name("params"),
  propertyName: new codegen_1.Name("propertyName"),
  message: new codegen_1.Name("message"),
  schema: new codegen_1.Name("schema"),
  parentSchema: new codegen_1.Name("parentSchema")
};

function errorObjectCode(cxt, error, errorPaths) {
  const {
    createErrors
  } = cxt.it;
  if (createErrors === false) return (0, codegen_1._)`{}`;
  return errorObject(cxt, error, errorPaths);
}

function errorObject(cxt, error, errorPaths = {}) {
  const {
    gen,
    it
  } = cxt;
  const keyValues = [errorInstancePath(it, errorPaths), errorSchemaPath(cxt, errorPaths)];
  extraErrorProps(cxt, error, keyValues);
  return gen.object(...keyValues);
}

function errorInstancePath({
  errorPath
}, {
  instancePath
}) {
  const instPath = instancePath ? (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(instancePath, util_1.Type.Str)}` : errorPath;
  return [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, instPath)];
}

function errorSchemaPath({
  keyword,
  it: {
    errSchemaPath
  }
}, {
  schemaPath,
  parentSchema
}) {
  let schPath = parentSchema ? errSchemaPath : (0, codegen_1.str)`${errSchemaPath}/${keyword}`;

  if (schemaPath) {
    schPath = (0, codegen_1.str)`${schPath}${(0, util_1.getErrorPath)(schemaPath, util_1.Type.Str)}`;
  }

  return [E.schemaPath, schPath];
}

function extraErrorProps(cxt, {
  params,
  message
}, keyValues) {
  const {
    keyword,
    data,
    schemaValue,
    it
  } = cxt;
  const {
    opts,
    propertyName,
    topSchemaRef,
    schemaPath
  } = it;
  keyValues.push([E.keyword, keyword], [E.params, typeof params == "function" ? params(cxt) : params || (0, codegen_1._)`{}`]);

  if (opts.messages) {
    keyValues.push([E.message, typeof message == "function" ? message(cxt) : message]);
  }

  if (opts.verbose) {
    keyValues.push([E.schema, schemaValue], [E.parentSchema, (0, codegen_1._)`${topSchemaRef}${schemaPath}`], [names_1.default.data, data]);
  }

  if (propertyName) keyValues.push([E.propertyName, propertyName]);
}

/***/ }),

/***/ "../shared/node_modules/ajv/dist/compile/index.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.resolveSchema = exports.getCompilingSchema = exports.resolveRef = exports.compileSchema = exports.SchemaEnv = void 0;

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const validation_error_1 = __webpack_require__("../shared/node_modules/ajv/dist/runtime/validation_error.js");

const names_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/names.js");

const resolve_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/resolve.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const validate_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/validate/index.js");

class SchemaEnv {
  constructor(env) {
    var _a;

    this.refs = {};
    this.dynamicAnchors = {};
    let schema;
    if (typeof env.schema == "object") schema = env.schema;
    this.schema = env.schema;
    this.schemaId = env.schemaId;
    this.root = env.root || this;
    this.baseId = (_a = env.baseId) !== null && _a !== void 0 ? _a : (0, resolve_1.normalizeId)(schema === null || schema === void 0 ? void 0 : schema[env.schemaId || "$id"]);
    this.schemaPath = env.schemaPath;
    this.localRefs = env.localRefs;
    this.meta = env.meta;
    this.$async = schema === null || schema === void 0 ? void 0 : schema.$async;
    this.refs = {};
  }

}

exports.SchemaEnv = SchemaEnv; // let codeSize = 0
// let nodeCount = 0
// Compiles schema in SchemaEnv

function compileSchema(sch) {
  // TODO refactor - remove compilations
  const _sch = getCompilingSchema.call(this, sch);

  if (_sch) return _sch;
  const rootId = (0, resolve_1.getFullPath)(this.opts.uriResolver, sch.root.baseId); // TODO if getFullPath removed 1 tests fails

  const {
    es5,
    lines
  } = this.opts.code;
  const {
    ownProperties
  } = this.opts;
  const gen = new codegen_1.CodeGen(this.scope, {
    es5,
    lines,
    ownProperties
  });

  let _ValidationError;

  if (sch.$async) {
    _ValidationError = gen.scopeValue("Error", {
      ref: validation_error_1.default,
      code: (0, codegen_1._)`require("ajv/dist/runtime/validation_error").default`
    });
  }

  const validateName = gen.scopeName("validate");
  sch.validateName = validateName;
  const schemaCxt = {
    gen,
    allErrors: this.opts.allErrors,
    data: names_1.default.data,
    parentData: names_1.default.parentData,
    parentDataProperty: names_1.default.parentDataProperty,
    dataNames: [names_1.default.data],
    dataPathArr: [codegen_1.nil],
    dataLevel: 0,
    dataTypes: [],
    definedProperties: new Set(),
    topSchemaRef: gen.scopeValue("schema", this.opts.code.source === true ? {
      ref: sch.schema,
      code: (0, codegen_1.stringify)(sch.schema)
    } : {
      ref: sch.schema
    }),
    validateName,
    ValidationError: _ValidationError,
    schema: sch.schema,
    schemaEnv: sch,
    rootId,
    baseId: sch.baseId || rootId,
    schemaPath: codegen_1.nil,
    errSchemaPath: sch.schemaPath || (this.opts.jtd ? "" : "#"),
    errorPath: (0, codegen_1._)`""`,
    opts: this.opts,
    self: this
  };
  let sourceCode;

  try {
    this._compilations.add(sch);

    (0, validate_1.validateFunctionCode)(schemaCxt);
    gen.optimize(this.opts.code.optimize); // gen.optimize(1)

    const validateCode = gen.toString();
    sourceCode = `${gen.scopeRefs(names_1.default.scope)}return ${validateCode}`; // console.log((codeSize += sourceCode.length), (nodeCount += gen.nodeCount))

    if (this.opts.code.process) sourceCode = this.opts.code.process(sourceCode, sch); // console.log("\n\n\n *** \n", sourceCode)

    const makeValidate = new Function(`${names_1.default.self}`, `${names_1.default.scope}`, sourceCode);
    const validate = makeValidate(this, this.scope.get());
    this.scope.value(validateName, {
      ref: validate
    });
    validate.errors = null;
    validate.schema = sch.schema;
    validate.schemaEnv = sch;
    if (sch.$async) validate.$async = true;

    if (this.opts.code.source === true) {
      validate.source = {
        validateName,
        validateCode,
        scopeValues: gen._values
      };
    }

    if (this.opts.unevaluated) {
      const {
        props,
        items
      } = schemaCxt;
      validate.evaluated = {
        props: props instanceof codegen_1.Name ? undefined : props,
        items: items instanceof codegen_1.Name ? undefined : items,
        dynamicProps: props instanceof codegen_1.Name,
        dynamicItems: items instanceof codegen_1.Name
      };
      if (validate.source) validate.source.evaluated = (0, codegen_1.stringify)(validate.evaluated);
    }

    sch.validate = validate;
    return sch;
  } catch (e) {
    delete sch.validate;
    delete sch.validateName;
    if (sourceCode) this.logger.error("Error compiling schema, function code:", sourceCode); // console.log("\n\n\n *** \n", sourceCode, this.opts)

    throw e;
  } finally {
    this._compilations.delete(sch);
  }
}

exports.compileSchema = compileSchema;

function resolveRef(root, baseId, ref) {
  var _a;

  ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, ref);
  const schOrFunc = root.refs[ref];
  if (schOrFunc) return schOrFunc;

  let _sch = resolve.call(this, root, ref);

  if (_sch === undefined) {
    const schema = (_a = root.localRefs) === null || _a === void 0 ? void 0 : _a[ref]; // TODO maybe localRefs should hold SchemaEnv

    const {
      schemaId
    } = this.opts;
    if (schema) _sch = new SchemaEnv({
      schema,
      schemaId,
      root,
      baseId
    });
  }

  if (_sch === undefined) return;
  return root.refs[ref] = inlineOrCompile.call(this, _sch);
}

exports.resolveRef = resolveRef;

function inlineOrCompile(sch) {
  if ((0, resolve_1.inlineRef)(sch.schema, this.opts.inlineRefs)) return sch.schema;
  return sch.validate ? sch : compileSchema.call(this, sch);
} // Index of schema compilation in the currently compiled list


function getCompilingSchema(schEnv) {
  for (const sch of this._compilations) {
    if (sameSchemaEnv(sch, schEnv)) return sch;
  }
}

exports.getCompilingSchema = getCompilingSchema;

function sameSchemaEnv(s1, s2) {
  return s1.schema === s2.schema && s1.root === s2.root && s1.baseId === s2.baseId;
} // resolve and compile the references ($ref)
// TODO returns AnySchemaObject (if the schema can be inlined) or validation function


function resolve(root, // information about the root schema for the current schema
ref // reference to resolve
) {
  let sch;

  while (typeof (sch = this.refs[ref]) == "string") ref = sch;

  return sch || this.schemas[ref] || resolveSchema.call(this, root, ref);
} // Resolve schema, its root and baseId


function resolveSchema(root, // root object with properties schema, refs TODO below SchemaEnv is assigned to it
ref // reference to resolve
) {
  const p = this.opts.uriResolver.parse(ref);
  const refPath = (0, resolve_1._getFullPath)(this.opts.uriResolver, p);
  let baseId = (0, resolve_1.getFullPath)(this.opts.uriResolver, root.baseId, undefined); // TODO `Object.keys(root.schema).length > 0` should not be needed - but removing breaks 2 tests

  if (Object.keys(root.schema).length > 0 && refPath === baseId) {
    return getJsonPointer.call(this, p, root);
  }

  const id = (0, resolve_1.normalizeId)(refPath);
  const schOrRef = this.refs[id] || this.schemas[id];

  if (typeof schOrRef == "string") {
    const sch = resolveSchema.call(this, root, schOrRef);
    if (typeof (sch === null || sch === void 0 ? void 0 : sch.schema) !== "object") return;
    return getJsonPointer.call(this, p, sch);
  }

  if (typeof (schOrRef === null || schOrRef === void 0 ? void 0 : schOrRef.schema) !== "object") return;
  if (!schOrRef.validate) compileSchema.call(this, schOrRef);

  if (id === (0, resolve_1.normalizeId)(ref)) {
    const {
      schema
    } = schOrRef;
    const {
      schemaId
    } = this.opts;
    const schId = schema[schemaId];
    if (schId) baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
    return new SchemaEnv({
      schema,
      schemaId,
      root,
      baseId
    });
  }

  return getJsonPointer.call(this, p, schOrRef);
}

exports.resolveSchema = resolveSchema;
const PREVENT_SCOPE_CHANGE = new Set(["properties", "patternProperties", "enum", "dependencies", "definitions"]);

function getJsonPointer(parsedRef, {
  baseId,
  schema,
  root
}) {
  var _a;

  if (((_a = parsedRef.fragment) === null || _a === void 0 ? void 0 : _a[0]) !== "/") return;

  for (const part of parsedRef.fragment.slice(1).split("/")) {
    if (typeof schema === "boolean") return;
    const partSchema = schema[(0, util_1.unescapeFragment)(part)];
    if (partSchema === undefined) return;
    schema = partSchema; // TODO PREVENT_SCOPE_CHANGE could be defined in keyword def?

    const schId = typeof schema === "object" && schema[this.opts.schemaId];

    if (!PREVENT_SCOPE_CHANGE.has(part) && schId) {
      baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
    }
  }

  let env;

  if (typeof schema != "boolean" && schema.$ref && !(0, util_1.schemaHasRulesButRef)(schema, this.RULES)) {
    const $ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schema.$ref);
    env = resolveSchema.call(this, root, $ref);
  } // even though resolution failed we need to return SchemaEnv to throw exception
  // so that compileAsync loads missing schema.


  const {
    schemaId
  } = this.opts;
  env = env || new SchemaEnv({
    schema,
    schemaId,
    root,
    baseId
  });
  if (env.schema !== env.root.schema) return env;
  return undefined;
}

/***/ }),

/***/ "../shared/node_modules/ajv/dist/compile/names.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const names = {
  // validation function arguments
  data: new codegen_1.Name("data"),
  // args passed from referencing schema
  valCxt: new codegen_1.Name("valCxt"),
  instancePath: new codegen_1.Name("instancePath"),
  parentData: new codegen_1.Name("parentData"),
  parentDataProperty: new codegen_1.Name("parentDataProperty"),
  rootData: new codegen_1.Name("rootData"),
  dynamicAnchors: new codegen_1.Name("dynamicAnchors"),
  // function scoped variables
  vErrors: new codegen_1.Name("vErrors"),
  errors: new codegen_1.Name("errors"),
  this: new codegen_1.Name("this"),
  // "globals"
  self: new codegen_1.Name("self"),
  scope: new codegen_1.Name("scope"),
  // JTD serialize/parse name for JSON string and position
  json: new codegen_1.Name("json"),
  jsonPos: new codegen_1.Name("jsonPos"),
  jsonLen: new codegen_1.Name("jsonLen"),
  jsonPart: new codegen_1.Name("jsonPart")
};
exports["default"] = names;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/compile/ref_error.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const resolve_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/resolve.js");

class MissingRefError extends Error {
  constructor(resolver, baseId, ref, msg) {
    super(msg || `can't resolve reference ${ref} from id ${baseId}`);
    this.missingRef = (0, resolve_1.resolveUrl)(resolver, baseId, ref);
    this.missingSchema = (0, resolve_1.normalizeId)((0, resolve_1.getFullPath)(resolver, this.missingRef));
  }

}

exports["default"] = MissingRefError;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/compile/resolve.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getSchemaRefs = exports.resolveUrl = exports.normalizeId = exports._getFullPath = exports.getFullPath = exports.inlineRef = void 0;

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const equal = __webpack_require__("../shared/node_modules/fast-deep-equal/index.js");

const traverse = __webpack_require__("../shared/node_modules/json-schema-traverse/index.js"); // TODO refactor to use keyword definitions


const SIMPLE_INLINED = new Set(["type", "format", "pattern", "maxLength", "minLength", "maxProperties", "minProperties", "maxItems", "minItems", "maximum", "minimum", "uniqueItems", "multipleOf", "required", "enum", "const"]);

function inlineRef(schema, limit = true) {
  if (typeof schema == "boolean") return true;
  if (limit === true) return !hasRef(schema);
  if (!limit) return false;
  return countKeys(schema) <= limit;
}

exports.inlineRef = inlineRef;
const REF_KEYWORDS = new Set(["$ref", "$recursiveRef", "$recursiveAnchor", "$dynamicRef", "$dynamicAnchor"]);

function hasRef(schema) {
  for (const key in schema) {
    if (REF_KEYWORDS.has(key)) return true;
    const sch = schema[key];
    if (Array.isArray(sch) && sch.some(hasRef)) return true;
    if (typeof sch == "object" && hasRef(sch)) return true;
  }

  return false;
}

function countKeys(schema) {
  let count = 0;

  for (const key in schema) {
    if (key === "$ref") return Infinity;
    count++;
    if (SIMPLE_INLINED.has(key)) continue;

    if (typeof schema[key] == "object") {
      (0, util_1.eachItem)(schema[key], sch => count += countKeys(sch));
    }

    if (count === Infinity) return Infinity;
  }

  return count;
}

function getFullPath(resolver, id = "", normalize) {
  if (normalize !== false) id = normalizeId(id);
  const p = resolver.parse(id);
  return _getFullPath(resolver, p);
}

exports.getFullPath = getFullPath;

function _getFullPath(resolver, p) {
  const serialized = resolver.serialize(p);
  return serialized.split("#")[0] + "#";
}

exports._getFullPath = _getFullPath;
const TRAILING_SLASH_HASH = /#\/?$/;

function normalizeId(id) {
  return id ? id.replace(TRAILING_SLASH_HASH, "") : "";
}

exports.normalizeId = normalizeId;

function resolveUrl(resolver, baseId, id) {
  id = normalizeId(id);
  return resolver.resolve(baseId, id);
}

exports.resolveUrl = resolveUrl;
const ANCHOR = /^[a-z_][-a-z0-9._]*$/i;

function getSchemaRefs(schema, baseId) {
  if (typeof schema == "boolean") return {};
  const {
    schemaId,
    uriResolver
  } = this.opts;
  const schId = normalizeId(schema[schemaId] || baseId);
  const baseIds = {
    "": schId
  };
  const pathPrefix = getFullPath(uriResolver, schId, false);
  const localRefs = {};
  const schemaRefs = new Set();
  traverse(schema, {
    allKeys: true
  }, (sch, jsonPtr, _, parentJsonPtr) => {
    if (parentJsonPtr === undefined) return;
    const fullPath = pathPrefix + jsonPtr;
    let baseId = baseIds[parentJsonPtr];
    if (typeof sch[schemaId] == "string") baseId = addRef.call(this, sch[schemaId]);
    addAnchor.call(this, sch.$anchor);
    addAnchor.call(this, sch.$dynamicAnchor);
    baseIds[jsonPtr] = baseId;

    function addRef(ref) {
      // eslint-disable-next-line @typescript-eslint/unbound-method
      const _resolve = this.opts.uriResolver.resolve;
      ref = normalizeId(baseId ? _resolve(baseId, ref) : ref);
      if (schemaRefs.has(ref)) throw ambiguos(ref);
      schemaRefs.add(ref);
      let schOrRef = this.refs[ref];
      if (typeof schOrRef == "string") schOrRef = this.refs[schOrRef];

      if (typeof schOrRef == "object") {
        checkAmbiguosRef(sch, schOrRef.schema, ref);
      } else if (ref !== normalizeId(fullPath)) {
        if (ref[0] === "#") {
          checkAmbiguosRef(sch, localRefs[ref], ref);
          localRefs[ref] = sch;
        } else {
          this.refs[ref] = fullPath;
        }
      }

      return ref;
    }

    function addAnchor(anchor) {
      if (typeof anchor == "string") {
        if (!ANCHOR.test(anchor)) throw new Error(`invalid anchor "${anchor}"`);
        addRef.call(this, `#${anchor}`);
      }
    }
  });
  return localRefs;

  function checkAmbiguosRef(sch1, sch2, ref) {
    if (sch2 !== undefined && !equal(sch1, sch2)) throw ambiguos(ref);
  }

  function ambiguos(ref) {
    return new Error(`reference "${ref}" resolves to more than one schema`);
  }
}

exports.getSchemaRefs = getSchemaRefs;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/compile/rules.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getRules = exports.isJSONType = void 0;
const _jsonTypes = ["string", "number", "integer", "boolean", "null", "object", "array"];
const jsonTypes = new Set(_jsonTypes);

function isJSONType(x) {
  return typeof x == "string" && jsonTypes.has(x);
}

exports.isJSONType = isJSONType;

function getRules() {
  const groups = {
    number: {
      type: "number",
      rules: []
    },
    string: {
      type: "string",
      rules: []
    },
    array: {
      type: "array",
      rules: []
    },
    object: {
      type: "object",
      rules: []
    }
  };
  return {
    types: { ...groups,
      integer: true,
      boolean: true,
      null: true
    },
    rules: [{
      rules: []
    }, groups.number, groups.string, groups.array, groups.object],
    post: {
      rules: []
    },
    all: {},
    keywords: {}
  };
}

exports.getRules = getRules;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/compile/util.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.checkStrictMode = exports.getErrorPath = exports.Type = exports.useFunc = exports.setEvaluated = exports.evaluatedPropsToName = exports.mergeEvaluated = exports.eachItem = exports.unescapeJsonPointer = exports.escapeJsonPointer = exports.escapeFragment = exports.unescapeFragment = exports.schemaRefOrVal = exports.schemaHasRulesButRef = exports.schemaHasRules = exports.checkUnknownRules = exports.alwaysValidSchema = exports.toHash = void 0;

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const code_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/code.js"); // TODO refactor to use Set


function toHash(arr) {
  const hash = {};

  for (const item of arr) hash[item] = true;

  return hash;
}

exports.toHash = toHash;

function alwaysValidSchema(it, schema) {
  if (typeof schema == "boolean") return schema;
  if (Object.keys(schema).length === 0) return true;
  checkUnknownRules(it, schema);
  return !schemaHasRules(schema, it.self.RULES.all);
}

exports.alwaysValidSchema = alwaysValidSchema;

function checkUnknownRules(it, schema = it.schema) {
  const {
    opts,
    self
  } = it;
  if (!opts.strictSchema) return;
  if (typeof schema === "boolean") return;
  const rules = self.RULES.keywords;

  for (const key in schema) {
    if (!rules[key]) checkStrictMode(it, `unknown keyword: "${key}"`);
  }
}

exports.checkUnknownRules = checkUnknownRules;

function schemaHasRules(schema, rules) {
  if (typeof schema == "boolean") return !schema;

  for (const key in schema) if (rules[key]) return true;

  return false;
}

exports.schemaHasRules = schemaHasRules;

function schemaHasRulesButRef(schema, RULES) {
  if (typeof schema == "boolean") return !schema;

  for (const key in schema) if (key !== "$ref" && RULES.all[key]) return true;

  return false;
}

exports.schemaHasRulesButRef = schemaHasRulesButRef;

function schemaRefOrVal({
  topSchemaRef,
  schemaPath
}, schema, keyword, $data) {
  if (!$data) {
    if (typeof schema == "number" || typeof schema == "boolean") return schema;
    if (typeof schema == "string") return (0, codegen_1._)`${schema}`;
  }

  return (0, codegen_1._)`${topSchemaRef}${schemaPath}${(0, codegen_1.getProperty)(keyword)}`;
}

exports.schemaRefOrVal = schemaRefOrVal;

function unescapeFragment(str) {
  return unescapeJsonPointer(decodeURIComponent(str));
}

exports.unescapeFragment = unescapeFragment;

function escapeFragment(str) {
  return encodeURIComponent(escapeJsonPointer(str));
}

exports.escapeFragment = escapeFragment;

function escapeJsonPointer(str) {
  if (typeof str == "number") return `${str}`;
  return str.replace(/~/g, "~0").replace(/\//g, "~1");
}

exports.escapeJsonPointer = escapeJsonPointer;

function unescapeJsonPointer(str) {
  return str.replace(/~1/g, "/").replace(/~0/g, "~");
}

exports.unescapeJsonPointer = unescapeJsonPointer;

function eachItem(xs, f) {
  if (Array.isArray(xs)) {
    for (const x of xs) f(x);
  } else {
    f(xs);
  }
}

exports.eachItem = eachItem;

function makeMergeEvaluated({
  mergeNames,
  mergeToName,
  mergeValues,
  resultToName
}) {
  return (gen, from, to, toName) => {
    const res = to === undefined ? from : to instanceof codegen_1.Name ? (from instanceof codegen_1.Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to) : from instanceof codegen_1.Name ? (mergeToName(gen, to, from), from) : mergeValues(from, to);
    return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;
  };
}

exports.mergeEvaluated = {
  props: makeMergeEvaluated({
    mergeNames: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true && ${from} !== undefined`, () => {
      gen.if((0, codegen_1._)`${from} === true`, () => gen.assign(to, true), () => gen.assign(to, (0, codegen_1._)`${to} || {}`).code((0, codegen_1._)`Object.assign(${to}, ${from})`));
    }),
    mergeToName: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true`, () => {
      if (from === true) {
        gen.assign(to, true);
      } else {
        gen.assign(to, (0, codegen_1._)`${to} || {}`);
        setEvaluated(gen, to, from);
      }
    }),
    mergeValues: (from, to) => from === true ? true : { ...from,
      ...to
    },
    resultToName: evaluatedPropsToName
  }),
  items: makeMergeEvaluated({
    mergeNames: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true && ${from} !== undefined`, () => gen.assign(to, (0, codegen_1._)`${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)),
    mergeToName: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true`, () => gen.assign(to, from === true ? true : (0, codegen_1._)`${to} > ${from} ? ${to} : ${from}`)),
    mergeValues: (from, to) => from === true ? true : Math.max(from, to),
    resultToName: (gen, items) => gen.var("items", items)
  })
};

function evaluatedPropsToName(gen, ps) {
  if (ps === true) return gen.var("props", true);
  const props = gen.var("props", (0, codegen_1._)`{}`);
  if (ps !== undefined) setEvaluated(gen, props, ps);
  return props;
}

exports.evaluatedPropsToName = evaluatedPropsToName;

function setEvaluated(gen, props, ps) {
  Object.keys(ps).forEach(p => gen.assign((0, codegen_1._)`${props}${(0, codegen_1.getProperty)(p)}`, true));
}

exports.setEvaluated = setEvaluated;
const snippets = {};

function useFunc(gen, f) {
  return gen.scopeValue("func", {
    ref: f,
    code: snippets[f.code] || (snippets[f.code] = new code_1._Code(f.code))
  });
}

exports.useFunc = useFunc;
var Type;

(function (Type) {
  Type[Type["Num"] = 0] = "Num";
  Type[Type["Str"] = 1] = "Str";
})(Type = exports.Type || (exports.Type = {}));

function getErrorPath(dataProp, dataPropType, jsPropertySyntax) {
  // let path
  if (dataProp instanceof codegen_1.Name) {
    const isNumber = dataPropType === Type.Num;
    return jsPropertySyntax ? isNumber ? (0, codegen_1._)`"[" + ${dataProp} + "]"` : (0, codegen_1._)`"['" + ${dataProp} + "']"` : isNumber ? (0, codegen_1._)`"/" + ${dataProp}` : (0, codegen_1._)`"/" + ${dataProp}.replace(/~/g, "~0").replace(/\\//g, "~1")`; // TODO maybe use global escapePointer
  }

  return jsPropertySyntax ? (0, codegen_1.getProperty)(dataProp).toString() : "/" + escapeJsonPointer(dataProp);
}

exports.getErrorPath = getErrorPath;

function checkStrictMode(it, msg, mode = it.opts.strictSchema) {
  if (!mode) return;
  msg = `strict mode: ${msg}`;
  if (mode === true) throw new Error(msg);
  it.self.logger.warn(msg);
}

exports.checkStrictMode = checkStrictMode;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/compile/validate/applicability.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.shouldUseRule = exports.shouldUseGroup = exports.schemaHasRulesForType = void 0;

function schemaHasRulesForType({
  schema,
  self
}, type) {
  const group = self.RULES.types[type];
  return group && group !== true && shouldUseGroup(schema, group);
}

exports.schemaHasRulesForType = schemaHasRulesForType;

function shouldUseGroup(schema, group) {
  return group.rules.some(rule => shouldUseRule(schema, rule));
}

exports.shouldUseGroup = shouldUseGroup;

function shouldUseRule(schema, rule) {
  var _a;

  return schema[rule.keyword] !== undefined || ((_a = rule.definition.implements) === null || _a === void 0 ? void 0 : _a.some(kwd => schema[kwd] !== undefined));
}

exports.shouldUseRule = shouldUseRule;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/compile/validate/boolSchema.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.boolOrEmptySchema = exports.topBoolOrEmptySchema = void 0;

const errors_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/errors.js");

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const names_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/names.js");

const boolError = {
  message: "boolean schema is false"
};

function topBoolOrEmptySchema(it) {
  const {
    gen,
    schema,
    validateName
  } = it;

  if (schema === false) {
    falseSchemaError(it, false);
  } else if (typeof schema == "object" && schema.$async === true) {
    gen.return(names_1.default.data);
  } else {
    gen.assign((0, codegen_1._)`${validateName}.errors`, null);
    gen.return(true);
  }
}

exports.topBoolOrEmptySchema = topBoolOrEmptySchema;

function boolOrEmptySchema(it, valid) {
  const {
    gen,
    schema
  } = it;

  if (schema === false) {
    gen.var(valid, false); // TODO var

    falseSchemaError(it);
  } else {
    gen.var(valid, true); // TODO var
  }
}

exports.boolOrEmptySchema = boolOrEmptySchema;

function falseSchemaError(it, overrideAllErrors) {
  const {
    gen,
    data
  } = it; // TODO maybe some other interface should be used for non-keyword validation errors...

  const cxt = {
    gen,
    keyword: "false schema",
    data,
    schema: false,
    schemaCode: false,
    schemaValue: false,
    params: {},
    it
  };
  (0, errors_1.reportError)(cxt, boolError, undefined, overrideAllErrors);
}

/***/ }),

/***/ "../shared/node_modules/ajv/dist/compile/validate/dataType.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;

const rules_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/rules.js");

const applicability_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/validate/applicability.js");

const errors_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/errors.js");

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

var DataType;

(function (DataType) {
  DataType[DataType["Correct"] = 0] = "Correct";
  DataType[DataType["Wrong"] = 1] = "Wrong";
})(DataType = exports.DataType || (exports.DataType = {}));

function getSchemaTypes(schema) {
  const types = getJSONTypes(schema.type);
  const hasNull = types.includes("null");

  if (hasNull) {
    if (schema.nullable === false) throw new Error("type: null contradicts nullable: false");
  } else {
    if (!types.length && schema.nullable !== undefined) {
      throw new Error('"nullable" cannot be used without "type"');
    }

    if (schema.nullable === true) types.push("null");
  }

  return types;
}

exports.getSchemaTypes = getSchemaTypes;

function getJSONTypes(ts) {
  const types = Array.isArray(ts) ? ts : ts ? [ts] : [];
  if (types.every(rules_1.isJSONType)) return types;
  throw new Error("type must be JSONType or JSONType[]: " + types.join(","));
}

exports.getJSONTypes = getJSONTypes;

function coerceAndCheckDataType(it, types) {
  const {
    gen,
    data,
    opts
  } = it;
  const coerceTo = coerceToTypes(types, opts.coerceTypes);
  const checkTypes = types.length > 0 && !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));

  if (checkTypes) {
    const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);
    gen.if(wrongType, () => {
      if (coerceTo.length) coerceData(it, types, coerceTo);else reportTypeError(it);
    });
  }

  return checkTypes;
}

exports.coerceAndCheckDataType = coerceAndCheckDataType;
const COERCIBLE = new Set(["string", "number", "integer", "boolean", "null"]);

function coerceToTypes(types, coerceTypes) {
  return coerceTypes ? types.filter(t => COERCIBLE.has(t) || coerceTypes === "array" && t === "array") : [];
}

function coerceData(it, types, coerceTo) {
  const {
    gen,
    data,
    opts
  } = it;
  const dataType = gen.let("dataType", (0, codegen_1._)`typeof ${data}`);
  const coerced = gen.let("coerced", (0, codegen_1._)`undefined`);

  if (opts.coerceTypes === "array") {
    gen.if((0, codegen_1._)`${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen.assign(data, (0, codegen_1._)`${data}[0]`).assign(dataType, (0, codegen_1._)`typeof ${data}`).if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data)));
  }

  gen.if((0, codegen_1._)`${coerced} !== undefined`);

  for (const t of coerceTo) {
    if (COERCIBLE.has(t) || t === "array" && opts.coerceTypes === "array") {
      coerceSpecificType(t);
    }
  }

  gen.else();
  reportTypeError(it);
  gen.endIf();
  gen.if((0, codegen_1._)`${coerced} !== undefined`, () => {
    gen.assign(data, coerced);
    assignParentData(it, coerced);
  });

  function coerceSpecificType(t) {
    switch (t) {
      case "string":
        gen.elseIf((0, codegen_1._)`${dataType} == "number" || ${dataType} == "boolean"`).assign(coerced, (0, codegen_1._)`"" + ${data}`).elseIf((0, codegen_1._)`${data} === null`).assign(coerced, (0, codegen_1._)`""`);
        return;

      case "number":
        gen.elseIf((0, codegen_1._)`${dataType} == "boolean" || ${data} === null
              || (${dataType} == "string" && ${data} && ${data} == +${data})`).assign(coerced, (0, codegen_1._)`+${data}`);
        return;

      case "integer":
        gen.elseIf((0, codegen_1._)`${dataType} === "boolean" || ${data} === null
              || (${dataType} === "string" && ${data} && ${data} == +${data} && !(${data} % 1))`).assign(coerced, (0, codegen_1._)`+${data}`);
        return;

      case "boolean":
        gen.elseIf((0, codegen_1._)`${data} === "false" || ${data} === 0 || ${data} === null`).assign(coerced, false).elseIf((0, codegen_1._)`${data} === "true" || ${data} === 1`).assign(coerced, true);
        return;

      case "null":
        gen.elseIf((0, codegen_1._)`${data} === "" || ${data} === 0 || ${data} === false`);
        gen.assign(coerced, null);
        return;

      case "array":
        gen.elseIf((0, codegen_1._)`${dataType} === "string" || ${dataType} === "number"
              || ${dataType} === "boolean" || ${data} === null`).assign(coerced, (0, codegen_1._)`[${data}]`);
    }
  }
}

function assignParentData({
  gen,
  parentData,
  parentDataProperty
}, expr) {
  // TODO use gen.property
  gen.if((0, codegen_1._)`${parentData} !== undefined`, () => gen.assign((0, codegen_1._)`${parentData}[${parentDataProperty}]`, expr));
}

function checkDataType(dataType, data, strictNums, correct = DataType.Correct) {
  const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;
  let cond;

  switch (dataType) {
    case "null":
      return (0, codegen_1._)`${data} ${EQ} null`;

    case "array":
      cond = (0, codegen_1._)`Array.isArray(${data})`;
      break;

    case "object":
      cond = (0, codegen_1._)`${data} && typeof ${data} == "object" && !Array.isArray(${data})`;
      break;

    case "integer":
      cond = numCond((0, codegen_1._)`!(${data} % 1) && !isNaN(${data})`);
      break;

    case "number":
      cond = numCond();
      break;

    default:
      return (0, codegen_1._)`typeof ${data} ${EQ} ${dataType}`;
  }

  return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);

  function numCond(_cond = codegen_1.nil) {
    return (0, codegen_1.and)((0, codegen_1._)`typeof ${data} == "number"`, _cond, strictNums ? (0, codegen_1._)`isFinite(${data})` : codegen_1.nil);
  }
}

exports.checkDataType = checkDataType;

function checkDataTypes(dataTypes, data, strictNums, correct) {
  if (dataTypes.length === 1) {
    return checkDataType(dataTypes[0], data, strictNums, correct);
  }

  let cond;
  const types = (0, util_1.toHash)(dataTypes);

  if (types.array && types.object) {
    const notObj = (0, codegen_1._)`typeof ${data} != "object"`;
    cond = types.null ? notObj : (0, codegen_1._)`!${data} || ${notObj}`;
    delete types.null;
    delete types.array;
    delete types.object;
  } else {
    cond = codegen_1.nil;
  }

  if (types.number) delete types.integer;

  for (const t in types) cond = (0, codegen_1.and)(cond, checkDataType(t, data, strictNums, correct));

  return cond;
}

exports.checkDataTypes = checkDataTypes;
const typeError = {
  message: ({
    schema
  }) => `must be ${schema}`,
  params: ({
    schema,
    schemaValue
  }) => typeof schema == "string" ? (0, codegen_1._)`{type: ${schema}}` : (0, codegen_1._)`{type: ${schemaValue}}`
};

function reportTypeError(it) {
  const cxt = getTypeErrorContext(it);
  (0, errors_1.reportError)(cxt, typeError);
}

exports.reportTypeError = reportTypeError;

function getTypeErrorContext(it) {
  const {
    gen,
    data,
    schema
  } = it;
  const schemaCode = (0, util_1.schemaRefOrVal)(it, schema, "type");
  return {
    gen,
    keyword: "type",
    data,
    schema: schema.type,
    schemaCode,
    schemaValue: schemaCode,
    parentSchema: schema,
    params: {},
    it
  };
}

/***/ }),

/***/ "../shared/node_modules/ajv/dist/compile/validate/defaults.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.assignDefaults = void 0;

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

function assignDefaults(it, ty) {
  const {
    properties,
    items
  } = it.schema;

  if (ty === "object" && properties) {
    for (const key in properties) {
      assignDefault(it, key, properties[key].default);
    }
  } else if (ty === "array" && Array.isArray(items)) {
    items.forEach((sch, i) => assignDefault(it, i, sch.default));
  }
}

exports.assignDefaults = assignDefaults;

function assignDefault(it, prop, defaultValue) {
  const {
    gen,
    compositeRule,
    data,
    opts
  } = it;
  if (defaultValue === undefined) return;
  const childData = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(prop)}`;

  if (compositeRule) {
    (0, util_1.checkStrictMode)(it, `default is ignored for: ${childData}`);
    return;
  }

  let condition = (0, codegen_1._)`${childData} === undefined`;

  if (opts.useDefaults === "empty") {
    condition = (0, codegen_1._)`${condition} || ${childData} === null || ${childData} === ""`;
  } // `${childData} === undefined` +
  // (opts.useDefaults === "empty" ? ` || ${childData} === null || ${childData} === ""` : "")


  gen.if(condition, (0, codegen_1._)`${childData} = ${(0, codegen_1.stringify)(defaultValue)}`);
}

/***/ }),

/***/ "../shared/node_modules/ajv/dist/compile/validate/index.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.getData = exports.KeywordCxt = exports.validateFunctionCode = void 0;

const boolSchema_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/validate/boolSchema.js");

const dataType_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/validate/dataType.js");

const applicability_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/validate/applicability.js");

const dataType_2 = __webpack_require__("../shared/node_modules/ajv/dist/compile/validate/dataType.js");

const defaults_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/validate/defaults.js");

const keyword_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/validate/keyword.js");

const subschema_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/validate/subschema.js");

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const names_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/names.js");

const resolve_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/resolve.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const errors_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/errors.js"); // schema compilation - generates validation function, subschemaCode (below) is used for subschemas


function validateFunctionCode(it) {
  if (isSchemaObj(it)) {
    checkKeywords(it);

    if (schemaCxtHasRules(it)) {
      topSchemaObjCode(it);
      return;
    }
  }

  validateFunction(it, () => (0, boolSchema_1.topBoolOrEmptySchema)(it));
}

exports.validateFunctionCode = validateFunctionCode;

function validateFunction({
  gen,
  validateName,
  schema,
  schemaEnv,
  opts
}, body) {
  if (opts.code.es5) {
    gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${names_1.default.valCxt}`, schemaEnv.$async, () => {
      gen.code((0, codegen_1._)`"use strict"; ${funcSourceUrl(schema, opts)}`);
      destructureValCxtES5(gen, opts);
      gen.code(body);
    });
  } else {
    gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, () => gen.code(funcSourceUrl(schema, opts)).code(body));
  }
}

function destructureValCxt(opts) {
  return (0, codegen_1._)`{${names_1.default.instancePath}="", ${names_1.default.parentData}, ${names_1.default.parentDataProperty}, ${names_1.default.rootData}=${names_1.default.data}${opts.dynamicRef ? (0, codegen_1._)`, ${names_1.default.dynamicAnchors}={}` : codegen_1.nil}}={}`;
}

function destructureValCxtES5(gen, opts) {
  gen.if(names_1.default.valCxt, () => {
    gen.var(names_1.default.instancePath, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.instancePath}`);
    gen.var(names_1.default.parentData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentData}`);
    gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentDataProperty}`);
    gen.var(names_1.default.rootData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.rootData}`);
    if (opts.dynamicRef) gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.dynamicAnchors}`);
  }, () => {
    gen.var(names_1.default.instancePath, (0, codegen_1._)`""`);
    gen.var(names_1.default.parentData, (0, codegen_1._)`undefined`);
    gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`undefined`);
    gen.var(names_1.default.rootData, names_1.default.data);
    if (opts.dynamicRef) gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`{}`);
  });
}

function topSchemaObjCode(it) {
  const {
    schema,
    opts,
    gen
  } = it;
  validateFunction(it, () => {
    if (opts.$comment && schema.$comment) commentKeyword(it);
    checkNoDefault(it);
    gen.let(names_1.default.vErrors, null);
    gen.let(names_1.default.errors, 0);
    if (opts.unevaluated) resetEvaluated(it);
    typeAndKeywords(it);
    returnResults(it);
  });
  return;
}

function resetEvaluated(it) {
  // TODO maybe some hook to execute it in the end to check whether props/items are Name, as in assignEvaluated
  const {
    gen,
    validateName
  } = it;
  it.evaluated = gen.const("evaluated", (0, codegen_1._)`${validateName}.evaluated`);
  gen.if((0, codegen_1._)`${it.evaluated}.dynamicProps`, () => gen.assign((0, codegen_1._)`${it.evaluated}.props`, (0, codegen_1._)`undefined`));
  gen.if((0, codegen_1._)`${it.evaluated}.dynamicItems`, () => gen.assign((0, codegen_1._)`${it.evaluated}.items`, (0, codegen_1._)`undefined`));
}

function funcSourceUrl(schema, opts) {
  const schId = typeof schema == "object" && schema[opts.schemaId];
  return schId && (opts.code.source || opts.code.process) ? (0, codegen_1._)`/*# sourceURL=${schId} */` : codegen_1.nil;
} // schema compilation - this function is used recursively to generate code for sub-schemas


function subschemaCode(it, valid) {
  if (isSchemaObj(it)) {
    checkKeywords(it);

    if (schemaCxtHasRules(it)) {
      subSchemaObjCode(it, valid);
      return;
    }
  }

  (0, boolSchema_1.boolOrEmptySchema)(it, valid);
}

function schemaCxtHasRules({
  schema,
  self
}) {
  if (typeof schema == "boolean") return !schema;

  for (const key in schema) if (self.RULES.all[key]) return true;

  return false;
}

function isSchemaObj(it) {
  return typeof it.schema != "boolean";
}

function subSchemaObjCode(it, valid) {
  const {
    schema,
    gen,
    opts
  } = it;
  if (opts.$comment && schema.$comment) commentKeyword(it);
  updateContext(it);
  checkAsyncSchema(it);
  const errsCount = gen.const("_errs", names_1.default.errors);
  typeAndKeywords(it, errsCount); // TODO var

  gen.var(valid, (0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
}

function checkKeywords(it) {
  (0, util_1.checkUnknownRules)(it);
  checkRefsAndKeywords(it);
}

function typeAndKeywords(it, errsCount) {
  if (it.opts.jtd) return schemaKeywords(it, [], false, errsCount);
  const types = (0, dataType_1.getSchemaTypes)(it.schema);
  const checkedTypes = (0, dataType_1.coerceAndCheckDataType)(it, types);
  schemaKeywords(it, types, !checkedTypes, errsCount);
}

function checkRefsAndKeywords(it) {
  const {
    schema,
    errSchemaPath,
    opts,
    self
  } = it;

  if (schema.$ref && opts.ignoreKeywordsWithRef && (0, util_1.schemaHasRulesButRef)(schema, self.RULES)) {
    self.logger.warn(`$ref: keywords ignored in schema at path "${errSchemaPath}"`);
  }
}

function checkNoDefault(it) {
  const {
    schema,
    opts
  } = it;

  if (schema.default !== undefined && opts.useDefaults && opts.strictSchema) {
    (0, util_1.checkStrictMode)(it, "default is ignored in the schema root");
  }
}

function updateContext(it) {
  const schId = it.schema[it.opts.schemaId];
  if (schId) it.baseId = (0, resolve_1.resolveUrl)(it.opts.uriResolver, it.baseId, schId);
}

function checkAsyncSchema(it) {
  if (it.schema.$async && !it.schemaEnv.$async) throw new Error("async schema in sync schema");
}

function commentKeyword({
  gen,
  schemaEnv,
  schema,
  errSchemaPath,
  opts
}) {
  const msg = schema.$comment;

  if (opts.$comment === true) {
    gen.code((0, codegen_1._)`${names_1.default.self}.logger.log(${msg})`);
  } else if (typeof opts.$comment == "function") {
    const schemaPath = (0, codegen_1.str)`${errSchemaPath}/$comment`;
    const rootName = gen.scopeValue("root", {
      ref: schemaEnv.root
    });
    gen.code((0, codegen_1._)`${names_1.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`);
  }
}

function returnResults(it) {
  const {
    gen,
    schemaEnv,
    validateName,
    ValidationError,
    opts
  } = it;

  if (schemaEnv.$async) {
    // TODO assign unevaluated
    gen.if((0, codegen_1._)`${names_1.default.errors} === 0`, () => gen.return(names_1.default.data), () => gen.throw((0, codegen_1._)`new ${ValidationError}(${names_1.default.vErrors})`));
  } else {
    gen.assign((0, codegen_1._)`${validateName}.errors`, names_1.default.vErrors);
    if (opts.unevaluated) assignEvaluated(it);
    gen.return((0, codegen_1._)`${names_1.default.errors} === 0`);
  }
}

function assignEvaluated({
  gen,
  evaluated,
  props,
  items
}) {
  if (props instanceof codegen_1.Name) gen.assign((0, codegen_1._)`${evaluated}.props`, props);
  if (items instanceof codegen_1.Name) gen.assign((0, codegen_1._)`${evaluated}.items`, items);
}

function schemaKeywords(it, types, typeErrors, errsCount) {
  const {
    gen,
    schema,
    data,
    allErrors,
    opts,
    self
  } = it;
  const {
    RULES
  } = self;

  if (schema.$ref && (opts.ignoreKeywordsWithRef || !(0, util_1.schemaHasRulesButRef)(schema, RULES))) {
    gen.block(() => keywordCode(it, "$ref", RULES.all.$ref.definition)); // TODO typecast

    return;
  }

  if (!opts.jtd) checkStrictTypes(it, types);
  gen.block(() => {
    for (const group of RULES.rules) groupKeywords(group);

    groupKeywords(RULES.post);
  });

  function groupKeywords(group) {
    if (!(0, applicability_1.shouldUseGroup)(schema, group)) return;

    if (group.type) {
      gen.if((0, dataType_2.checkDataType)(group.type, data, opts.strictNumbers));
      iterateKeywords(it, group);

      if (types.length === 1 && types[0] === group.type && typeErrors) {
        gen.else();
        (0, dataType_2.reportTypeError)(it);
      }

      gen.endIf();
    } else {
      iterateKeywords(it, group);
    } // TODO make it "ok" call?


    if (!allErrors) gen.if((0, codegen_1._)`${names_1.default.errors} === ${errsCount || 0}`);
  }
}

function iterateKeywords(it, group) {
  const {
    gen,
    schema,
    opts: {
      useDefaults
    }
  } = it;
  if (useDefaults) (0, defaults_1.assignDefaults)(it, group.type);
  gen.block(() => {
    for (const rule of group.rules) {
      if ((0, applicability_1.shouldUseRule)(schema, rule)) {
        keywordCode(it, rule.keyword, rule.definition, group.type);
      }
    }
  });
}

function checkStrictTypes(it, types) {
  if (it.schemaEnv.meta || !it.opts.strictTypes) return;
  checkContextTypes(it, types);
  if (!it.opts.allowUnionTypes) checkMultipleTypes(it, types);
  checkKeywordTypes(it, it.dataTypes);
}

function checkContextTypes(it, types) {
  if (!types.length) return;

  if (!it.dataTypes.length) {
    it.dataTypes = types;
    return;
  }

  types.forEach(t => {
    if (!includesType(it.dataTypes, t)) {
      strictTypesError(it, `type "${t}" not allowed by context "${it.dataTypes.join(",")}"`);
    }
  });
  it.dataTypes = it.dataTypes.filter(t => includesType(types, t));
}

function checkMultipleTypes(it, ts) {
  if (ts.length > 1 && !(ts.length === 2 && ts.includes("null"))) {
    strictTypesError(it, "use allowUnionTypes to allow union type keyword");
  }
}

function checkKeywordTypes(it, ts) {
  const rules = it.self.RULES.all;

  for (const keyword in rules) {
    const rule = rules[keyword];

    if (typeof rule == "object" && (0, applicability_1.shouldUseRule)(it.schema, rule)) {
      const {
        type
      } = rule.definition;

      if (type.length && !type.some(t => hasApplicableType(ts, t))) {
        strictTypesError(it, `missing type "${type.join(",")}" for keyword "${keyword}"`);
      }
    }
  }
}

function hasApplicableType(schTs, kwdT) {
  return schTs.includes(kwdT) || kwdT === "number" && schTs.includes("integer");
}

function includesType(ts, t) {
  return ts.includes(t) || t === "integer" && ts.includes("number");
}

function strictTypesError(it, msg) {
  const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
  msg += ` at "${schemaPath}" (strictTypes)`;
  (0, util_1.checkStrictMode)(it, msg, it.opts.strictTypes);
}

class KeywordCxt {
  constructor(it, def, keyword) {
    (0, keyword_1.validateKeywordUsage)(it, def, keyword);
    this.gen = it.gen;
    this.allErrors = it.allErrors;
    this.keyword = keyword;
    this.data = it.data;
    this.schema = it.schema[keyword];
    this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data;
    this.schemaValue = (0, util_1.schemaRefOrVal)(it, this.schema, keyword, this.$data);
    this.schemaType = def.schemaType;
    this.parentSchema = it.schema;
    this.params = {};
    this.it = it;
    this.def = def;

    if (this.$data) {
      this.schemaCode = it.gen.const("vSchema", getData(this.$data, it));
    } else {
      this.schemaCode = this.schemaValue;

      if (!(0, keyword_1.validSchemaType)(this.schema, def.schemaType, def.allowUndefined)) {
        throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`);
      }
    }

    if ("code" in def ? def.trackErrors : def.errors !== false) {
      this.errsCount = it.gen.const("_errs", names_1.default.errors);
    }
  }

  result(condition, successAction, failAction) {
    this.failResult((0, codegen_1.not)(condition), successAction, failAction);
  }

  failResult(condition, successAction, failAction) {
    this.gen.if(condition);
    if (failAction) failAction();else this.error();

    if (successAction) {
      this.gen.else();
      successAction();
      if (this.allErrors) this.gen.endIf();
    } else {
      if (this.allErrors) this.gen.endIf();else this.gen.else();
    }
  }

  pass(condition, failAction) {
    this.failResult((0, codegen_1.not)(condition), undefined, failAction);
  }

  fail(condition) {
    if (condition === undefined) {
      this.error();
      if (!this.allErrors) this.gen.if(false); // this branch will be removed by gen.optimize

      return;
    }

    this.gen.if(condition);
    this.error();
    if (this.allErrors) this.gen.endIf();else this.gen.else();
  }

  fail$data(condition) {
    if (!this.$data) return this.fail(condition);
    const {
      schemaCode
    } = this;
    this.fail((0, codegen_1._)`${schemaCode} !== undefined && (${(0, codegen_1.or)(this.invalid$data(), condition)})`);
  }

  error(append, errorParams, errorPaths) {
    if (errorParams) {
      this.setParams(errorParams);

      this._error(append, errorPaths);

      this.setParams({});
      return;
    }

    this._error(append, errorPaths);
  }

  _error(append, errorPaths) {
    ;
    (append ? errors_1.reportExtraError : errors_1.reportError)(this, this.def.error, errorPaths);
  }

  $dataError() {
    (0, errors_1.reportError)(this, this.def.$dataError || errors_1.keyword$DataError);
  }

  reset() {
    if (this.errsCount === undefined) throw new Error('add "trackErrors" to keyword definition');
    (0, errors_1.resetErrorsCount)(this.gen, this.errsCount);
  }

  ok(cond) {
    if (!this.allErrors) this.gen.if(cond);
  }

  setParams(obj, assign) {
    if (assign) Object.assign(this.params, obj);else this.params = obj;
  }

  block$data(valid, codeBlock, $dataValid = codegen_1.nil) {
    this.gen.block(() => {
      this.check$data(valid, $dataValid);
      codeBlock();
    });
  }

  check$data(valid = codegen_1.nil, $dataValid = codegen_1.nil) {
    if (!this.$data) return;
    const {
      gen,
      schemaCode,
      schemaType,
      def
    } = this;
    gen.if((0, codegen_1.or)((0, codegen_1._)`${schemaCode} === undefined`, $dataValid));
    if (valid !== codegen_1.nil) gen.assign(valid, true);

    if (schemaType.length || def.validateSchema) {
      gen.elseIf(this.invalid$data());
      this.$dataError();
      if (valid !== codegen_1.nil) gen.assign(valid, false);
    }

    gen.else();
  }

  invalid$data() {
    const {
      gen,
      schemaCode,
      schemaType,
      def,
      it
    } = this;
    return (0, codegen_1.or)(wrong$DataType(), invalid$DataSchema());

    function wrong$DataType() {
      if (schemaType.length) {
        /* istanbul ignore if */
        if (!(schemaCode instanceof codegen_1.Name)) throw new Error("ajv implementation error");
        const st = Array.isArray(schemaType) ? schemaType : [schemaType];
        return (0, codegen_1._)`${(0, dataType_2.checkDataTypes)(st, schemaCode, it.opts.strictNumbers, dataType_2.DataType.Wrong)}`;
      }

      return codegen_1.nil;
    }

    function invalid$DataSchema() {
      if (def.validateSchema) {
        const validateSchemaRef = gen.scopeValue("validate$data", {
          ref: def.validateSchema
        }); // TODO value.code for standalone

        return (0, codegen_1._)`!${validateSchemaRef}(${schemaCode})`;
      }

      return codegen_1.nil;
    }
  }

  subschema(appl, valid) {
    const subschema = (0, subschema_1.getSubschema)(this.it, appl);
    (0, subschema_1.extendSubschemaData)(subschema, this.it, appl);
    (0, subschema_1.extendSubschemaMode)(subschema, appl);
    const nextContext = { ...this.it,
      ...subschema,
      items: undefined,
      props: undefined
    };
    subschemaCode(nextContext, valid);
    return nextContext;
  }

  mergeEvaluated(schemaCxt, toName) {
    const {
      it,
      gen
    } = this;
    if (!it.opts.unevaluated) return;

    if (it.props !== true && schemaCxt.props !== undefined) {
      it.props = util_1.mergeEvaluated.props(gen, schemaCxt.props, it.props, toName);
    }

    if (it.items !== true && schemaCxt.items !== undefined) {
      it.items = util_1.mergeEvaluated.items(gen, schemaCxt.items, it.items, toName);
    }
  }

  mergeValidEvaluated(schemaCxt, valid) {
    const {
      it,
      gen
    } = this;

    if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {
      gen.if(valid, () => this.mergeEvaluated(schemaCxt, codegen_1.Name));
      return true;
    }
  }

}

exports.KeywordCxt = KeywordCxt;

function keywordCode(it, keyword, def, ruleType) {
  const cxt = new KeywordCxt(it, def, keyword);

  if ("code" in def) {
    def.code(cxt, ruleType);
  } else if (cxt.$data && def.validate) {
    (0, keyword_1.funcKeywordCode)(cxt, def);
  } else if ("macro" in def) {
    (0, keyword_1.macroKeywordCode)(cxt, def);
  } else if (def.compile || def.validate) {
    (0, keyword_1.funcKeywordCode)(cxt, def);
  }
}

const JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
const RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;

function getData($data, {
  dataLevel,
  dataNames,
  dataPathArr
}) {
  let jsonPointer;
  let data;
  if ($data === "") return names_1.default.rootData;

  if ($data[0] === "/") {
    if (!JSON_POINTER.test($data)) throw new Error(`Invalid JSON-pointer: ${$data}`);
    jsonPointer = $data;
    data = names_1.default.rootData;
  } else {
    const matches = RELATIVE_JSON_POINTER.exec($data);
    if (!matches) throw new Error(`Invalid JSON-pointer: ${$data}`);
    const up = +matches[1];
    jsonPointer = matches[2];

    if (jsonPointer === "#") {
      if (up >= dataLevel) throw new Error(errorMsg("property/index", up));
      return dataPathArr[dataLevel - up];
    }

    if (up > dataLevel) throw new Error(errorMsg("data", up));
    data = dataNames[dataLevel - up];
    if (!jsonPointer) return data;
  }

  let expr = data;
  const segments = jsonPointer.split("/");

  for (const segment of segments) {
    if (segment) {
      data = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)((0, util_1.unescapeJsonPointer)(segment))}`;
      expr = (0, codegen_1._)`${expr} && ${data}`;
    }
  }

  return expr;

  function errorMsg(pointerType, up) {
    return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`;
  }
}

exports.getData = getData;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/compile/validate/keyword.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.validateKeywordUsage = exports.validSchemaType = exports.funcKeywordCode = exports.macroKeywordCode = void 0;

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const names_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/names.js");

const code_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/code.js");

const errors_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/errors.js");

function macroKeywordCode(cxt, def) {
  const {
    gen,
    keyword,
    schema,
    parentSchema,
    it
  } = cxt;
  const macroSchema = def.macro.call(it.self, schema, parentSchema, it);
  const schemaRef = useKeyword(gen, keyword, macroSchema);
  if (it.opts.validateSchema !== false) it.self.validateSchema(macroSchema, true);
  const valid = gen.name("valid");
  cxt.subschema({
    schema: macroSchema,
    schemaPath: codegen_1.nil,
    errSchemaPath: `${it.errSchemaPath}/${keyword}`,
    topSchemaRef: schemaRef,
    compositeRule: true
  }, valid);
  cxt.pass(valid, () => cxt.error(true));
}

exports.macroKeywordCode = macroKeywordCode;

function funcKeywordCode(cxt, def) {
  var _a;

  const {
    gen,
    keyword,
    schema,
    parentSchema,
    $data,
    it
  } = cxt;
  checkAsyncKeyword(it, def);
  const validate = !$data && def.compile ? def.compile.call(it.self, schema, parentSchema, it) : def.validate;
  const validateRef = useKeyword(gen, keyword, validate);
  const valid = gen.let("valid");
  cxt.block$data(valid, validateKeyword);
  cxt.ok((_a = def.valid) !== null && _a !== void 0 ? _a : valid);

  function validateKeyword() {
    if (def.errors === false) {
      assignValid();
      if (def.modifying) modifyData(cxt);
      reportErrs(() => cxt.error());
    } else {
      const ruleErrs = def.async ? validateAsync() : validateSync();
      if (def.modifying) modifyData(cxt);
      reportErrs(() => addErrs(cxt, ruleErrs));
    }
  }

  function validateAsync() {
    const ruleErrs = gen.let("ruleErrs", null);
    gen.try(() => assignValid((0, codegen_1._)`await `), e => gen.assign(valid, false).if((0, codegen_1._)`${e} instanceof ${it.ValidationError}`, () => gen.assign(ruleErrs, (0, codegen_1._)`${e}.errors`), () => gen.throw(e)));
    return ruleErrs;
  }

  function validateSync() {
    const validateErrs = (0, codegen_1._)`${validateRef}.errors`;
    gen.assign(validateErrs, null);
    assignValid(codegen_1.nil);
    return validateErrs;
  }

  function assignValid(_await = def.async ? (0, codegen_1._)`await ` : codegen_1.nil) {
    const passCxt = it.opts.passContext ? names_1.default.this : names_1.default.self;
    const passSchema = !("compile" in def && !$data || def.schema === false);
    gen.assign(valid, (0, codegen_1._)`${_await}${(0, code_1.callValidateCode)(cxt, validateRef, passCxt, passSchema)}`, def.modifying);
  }

  function reportErrs(errors) {
    var _a;

    gen.if((0, codegen_1.not)((_a = def.valid) !== null && _a !== void 0 ? _a : valid), errors);
  }
}

exports.funcKeywordCode = funcKeywordCode;

function modifyData(cxt) {
  const {
    gen,
    data,
    it
  } = cxt;
  gen.if(it.parentData, () => gen.assign(data, (0, codegen_1._)`${it.parentData}[${it.parentDataProperty}]`));
}

function addErrs(cxt, errs) {
  const {
    gen
  } = cxt;
  gen.if((0, codegen_1._)`Array.isArray(${errs})`, () => {
    gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`).assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);
    (0, errors_1.extendErrors)(cxt);
  }, () => cxt.error());
}

function checkAsyncKeyword({
  schemaEnv
}, def) {
  if (def.async && !schemaEnv.$async) throw new Error("async keyword in sync schema");
}

function useKeyword(gen, keyword, result) {
  if (result === undefined) throw new Error(`keyword "${keyword}" failed to compile`);
  return gen.scopeValue("keyword", typeof result == "function" ? {
    ref: result
  } : {
    ref: result,
    code: (0, codegen_1.stringify)(result)
  });
}

function validSchemaType(schema, schemaType, allowUndefined = false) {
  // TODO add tests
  return !schemaType.length || schemaType.some(st => st === "array" ? Array.isArray(schema) : st === "object" ? schema && typeof schema == "object" && !Array.isArray(schema) : typeof schema == st || allowUndefined && typeof schema == "undefined");
}

exports.validSchemaType = validSchemaType;

function validateKeywordUsage({
  schema,
  opts,
  self,
  errSchemaPath
}, def, keyword) {
  /* istanbul ignore if */
  if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) {
    throw new Error("ajv implementation error");
  }

  const deps = def.dependencies;

  if (deps === null || deps === void 0 ? void 0 : deps.some(kwd => !Object.prototype.hasOwnProperty.call(schema, kwd))) {
    throw new Error(`parent schema must have dependencies of ${keyword}: ${deps.join(",")}`);
  }

  if (def.validateSchema) {
    const valid = def.validateSchema(schema[keyword]);

    if (!valid) {
      const msg = `keyword "${keyword}" value is invalid at path "${errSchemaPath}": ` + self.errorsText(def.validateSchema.errors);
      if (opts.validateSchema === "log") self.logger.error(msg);else throw new Error(msg);
    }
  }
}

exports.validateKeywordUsage = validateKeywordUsage;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/compile/validate/subschema.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.extendSubschemaMode = exports.extendSubschemaData = exports.getSubschema = void 0;

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

function getSubschema(it, {
  keyword,
  schemaProp,
  schema,
  schemaPath,
  errSchemaPath,
  topSchemaRef
}) {
  if (keyword !== undefined && schema !== undefined) {
    throw new Error('both "keyword" and "schema" passed, only one allowed');
  }

  if (keyword !== undefined) {
    const sch = it.schema[keyword];
    return schemaProp === undefined ? {
      schema: sch,
      schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}`,
      errSchemaPath: `${it.errSchemaPath}/${keyword}`
    } : {
      schema: sch[schemaProp],
      schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}${(0, codegen_1.getProperty)(schemaProp)}`,
      errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1.escapeFragment)(schemaProp)}`
    };
  }

  if (schema !== undefined) {
    if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {
      throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');
    }

    return {
      schema,
      schemaPath,
      topSchemaRef,
      errSchemaPath
    };
  }

  throw new Error('either "keyword" or "schema" must be passed');
}

exports.getSubschema = getSubschema;

function extendSubschemaData(subschema, it, {
  dataProp,
  dataPropType: dpType,
  data,
  dataTypes,
  propertyName
}) {
  if (data !== undefined && dataProp !== undefined) {
    throw new Error('both "data" and "dataProp" passed, only one allowed');
  }

  const {
    gen
  } = it;

  if (dataProp !== undefined) {
    const {
      errorPath,
      dataPathArr,
      opts
    } = it;
    const nextData = gen.let("data", (0, codegen_1._)`${it.data}${(0, codegen_1.getProperty)(dataProp)}`, true);
    dataContextProps(nextData);
    subschema.errorPath = (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;
    subschema.parentDataProperty = (0, codegen_1._)`${dataProp}`;
    subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];
  }

  if (data !== undefined) {
    const nextData = data instanceof codegen_1.Name ? data : gen.let("data", data, true); // replaceable if used once?

    dataContextProps(nextData);
    if (propertyName !== undefined) subschema.propertyName = propertyName; // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr
  }

  if (dataTypes) subschema.dataTypes = dataTypes;

  function dataContextProps(_nextData) {
    subschema.data = _nextData;
    subschema.dataLevel = it.dataLevel + 1;
    subschema.dataTypes = [];
    it.definedProperties = new Set();
    subschema.parentData = it.data;
    subschema.dataNames = [...it.dataNames, _nextData];
  }
}

exports.extendSubschemaData = extendSubschemaData;

function extendSubschemaMode(subschema, {
  jtdDiscriminator,
  jtdMetadata,
  compositeRule,
  createErrors,
  allErrors
}) {
  if (compositeRule !== undefined) subschema.compositeRule = compositeRule;
  if (createErrors !== undefined) subschema.createErrors = createErrors;
  if (allErrors !== undefined) subschema.allErrors = allErrors;
  subschema.jtdDiscriminator = jtdDiscriminator; // not inherited

  subschema.jtdMetadata = jtdMetadata; // not inherited
}

exports.extendSubschemaMode = extendSubschemaMode;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/core.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;

var validate_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/validate/index.js");

Object.defineProperty(exports, "KeywordCxt", ({
  enumerable: true,
  get: function () {
    return validate_1.KeywordCxt;
  }
}));

var codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

Object.defineProperty(exports, "_", ({
  enumerable: true,
  get: function () {
    return codegen_1._;
  }
}));
Object.defineProperty(exports, "str", ({
  enumerable: true,
  get: function () {
    return codegen_1.str;
  }
}));
Object.defineProperty(exports, "stringify", ({
  enumerable: true,
  get: function () {
    return codegen_1.stringify;
  }
}));
Object.defineProperty(exports, "nil", ({
  enumerable: true,
  get: function () {
    return codegen_1.nil;
  }
}));
Object.defineProperty(exports, "Name", ({
  enumerable: true,
  get: function () {
    return codegen_1.Name;
  }
}));
Object.defineProperty(exports, "CodeGen", ({
  enumerable: true,
  get: function () {
    return codegen_1.CodeGen;
  }
}));

const validation_error_1 = __webpack_require__("../shared/node_modules/ajv/dist/runtime/validation_error.js");

const ref_error_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/ref_error.js");

const rules_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/rules.js");

const compile_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/index.js");

const codegen_2 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const resolve_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/resolve.js");

const dataType_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/validate/dataType.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const $dataRefSchema = __webpack_require__("../shared/node_modules/ajv/dist/refs/data.json");

const uri_1 = __webpack_require__("../shared/node_modules/ajv/dist/runtime/uri.js");

const defaultRegExp = (str, flags) => new RegExp(str, flags);

defaultRegExp.code = "new RegExp";
const META_IGNORE_OPTIONS = ["removeAdditional", "useDefaults", "coerceTypes"];
const EXT_SCOPE_NAMES = new Set(["validate", "serialize", "parse", "wrapper", "root", "schema", "keyword", "pattern", "formats", "validate$data", "func", "obj", "Error"]);
const removedOptions = {
  errorDataPath: "",
  format: "`validateFormats: false` can be used instead.",
  nullable: '"nullable" keyword is supported by default.',
  jsonPointers: "Deprecated jsPropertySyntax can be used instead.",
  extendRefs: "Deprecated ignoreKeywordsWithRef can be used instead.",
  missingRefs: "Pass empty schema with $id that should be ignored to ajv.addSchema.",
  processCode: "Use option `code: {process: (code, schemaEnv: object) => string}`",
  sourceCode: "Use option `code: {source: true}`",
  strictDefaults: "It is default now, see option `strict`.",
  strictKeywords: "It is default now, see option `strict`.",
  uniqueItems: '"uniqueItems" keyword is always validated.',
  unknownFormats: "Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",
  cache: "Map is used as cache, schema object as key.",
  serialize: "Map is used as cache, schema object as key.",
  ajvErrors: "It is default now."
};
const deprecatedOptions = {
  ignoreKeywordsWithRef: "",
  jsPropertySyntax: "",
  unicode: '"minLength"/"maxLength" account for unicode characters by default.'
};
const MAX_EXPRESSION = 200; // eslint-disable-next-line complexity

function requiredOptions(o) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;

  const s = o.strict;

  const _optz = (_a = o.code) === null || _a === void 0 ? void 0 : _a.optimize;

  const optimize = _optz === true || _optz === undefined ? 1 : _optz || 0;
  const regExp = (_c = (_b = o.code) === null || _b === void 0 ? void 0 : _b.regExp) !== null && _c !== void 0 ? _c : defaultRegExp;
  const uriResolver = (_d = o.uriResolver) !== null && _d !== void 0 ? _d : uri_1.default;
  return {
    strictSchema: (_f = (_e = o.strictSchema) !== null && _e !== void 0 ? _e : s) !== null && _f !== void 0 ? _f : true,
    strictNumbers: (_h = (_g = o.strictNumbers) !== null && _g !== void 0 ? _g : s) !== null && _h !== void 0 ? _h : true,
    strictTypes: (_k = (_j = o.strictTypes) !== null && _j !== void 0 ? _j : s) !== null && _k !== void 0 ? _k : "log",
    strictTuples: (_m = (_l = o.strictTuples) !== null && _l !== void 0 ? _l : s) !== null && _m !== void 0 ? _m : "log",
    strictRequired: (_p = (_o = o.strictRequired) !== null && _o !== void 0 ? _o : s) !== null && _p !== void 0 ? _p : false,
    code: o.code ? { ...o.code,
      optimize,
      regExp
    } : {
      optimize,
      regExp
    },
    loopRequired: (_q = o.loopRequired) !== null && _q !== void 0 ? _q : MAX_EXPRESSION,
    loopEnum: (_r = o.loopEnum) !== null && _r !== void 0 ? _r : MAX_EXPRESSION,
    meta: (_s = o.meta) !== null && _s !== void 0 ? _s : true,
    messages: (_t = o.messages) !== null && _t !== void 0 ? _t : true,
    inlineRefs: (_u = o.inlineRefs) !== null && _u !== void 0 ? _u : true,
    schemaId: (_v = o.schemaId) !== null && _v !== void 0 ? _v : "$id",
    addUsedSchema: (_w = o.addUsedSchema) !== null && _w !== void 0 ? _w : true,
    validateSchema: (_x = o.validateSchema) !== null && _x !== void 0 ? _x : true,
    validateFormats: (_y = o.validateFormats) !== null && _y !== void 0 ? _y : true,
    unicodeRegExp: (_z = o.unicodeRegExp) !== null && _z !== void 0 ? _z : true,
    int32range: (_0 = o.int32range) !== null && _0 !== void 0 ? _0 : true,
    uriResolver: uriResolver
  };
}

class Ajv {
  constructor(opts = {}) {
    this.schemas = {};
    this.refs = {};
    this.formats = {};
    this._compilations = new Set();
    this._loading = {};
    this._cache = new Map();
    opts = this.opts = { ...opts,
      ...requiredOptions(opts)
    };
    const {
      es5,
      lines
    } = this.opts.code;
    this.scope = new codegen_2.ValueScope({
      scope: {},
      prefixes: EXT_SCOPE_NAMES,
      es5,
      lines
    });
    this.logger = getLogger(opts.logger);
    const formatOpt = opts.validateFormats;
    opts.validateFormats = false;
    this.RULES = (0, rules_1.getRules)();
    checkOptions.call(this, removedOptions, opts, "NOT SUPPORTED");
    checkOptions.call(this, deprecatedOptions, opts, "DEPRECATED", "warn");
    this._metaOpts = getMetaSchemaOptions.call(this);
    if (opts.formats) addInitialFormats.call(this);

    this._addVocabularies();

    this._addDefaultMetaSchema();

    if (opts.keywords) addInitialKeywords.call(this, opts.keywords);
    if (typeof opts.meta == "object") this.addMetaSchema(opts.meta);
    addInitialSchemas.call(this);
    opts.validateFormats = formatOpt;
  }

  _addVocabularies() {
    this.addKeyword("$async");
  }

  _addDefaultMetaSchema() {
    const {
      $data,
      meta,
      schemaId
    } = this.opts;
    let _dataRefSchema = $dataRefSchema;

    if (schemaId === "id") {
      _dataRefSchema = { ...$dataRefSchema
      };
      _dataRefSchema.id = _dataRefSchema.$id;
      delete _dataRefSchema.$id;
    }

    if (meta && $data) this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);
  }

  defaultMeta() {
    const {
      meta,
      schemaId
    } = this.opts;
    return this.opts.defaultMeta = typeof meta == "object" ? meta[schemaId] || meta : undefined;
  }

  validate(schemaKeyRef, // key, ref or schema object
  data // to be validated
  ) {
    let v;

    if (typeof schemaKeyRef == "string") {
      v = this.getSchema(schemaKeyRef);
      if (!v) throw new Error(`no schema with key or ref "${schemaKeyRef}"`);
    } else {
      v = this.compile(schemaKeyRef);
    }

    const valid = v(data);
    if (!("$async" in v)) this.errors = v.errors;
    return valid;
  }

  compile(schema, _meta) {
    const sch = this._addSchema(schema, _meta);

    return sch.validate || this._compileSchemaEnv(sch);
  }

  compileAsync(schema, meta) {
    if (typeof this.opts.loadSchema != "function") {
      throw new Error("options.loadSchema should be a function");
    }

    const {
      loadSchema
    } = this.opts;
    return runCompileAsync.call(this, schema, meta);

    async function runCompileAsync(_schema, _meta) {
      await loadMetaSchema.call(this, _schema.$schema);

      const sch = this._addSchema(_schema, _meta);

      return sch.validate || _compileAsync.call(this, sch);
    }

    async function loadMetaSchema($ref) {
      if ($ref && !this.getSchema($ref)) {
        await runCompileAsync.call(this, {
          $ref
        }, true);
      }
    }

    async function _compileAsync(sch) {
      try {
        return this._compileSchemaEnv(sch);
      } catch (e) {
        if (!(e instanceof ref_error_1.default)) throw e;
        checkLoaded.call(this, e);
        await loadMissingSchema.call(this, e.missingSchema);
        return _compileAsync.call(this, sch);
      }
    }

    function checkLoaded({
      missingSchema: ref,
      missingRef
    }) {
      if (this.refs[ref]) {
        throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);
      }
    }

    async function loadMissingSchema(ref) {
      const _schema = await _loadSchema.call(this, ref);

      if (!this.refs[ref]) await loadMetaSchema.call(this, _schema.$schema);
      if (!this.refs[ref]) this.addSchema(_schema, ref, meta);
    }

    async function _loadSchema(ref) {
      const p = this._loading[ref];
      if (p) return p;

      try {
        return await (this._loading[ref] = loadSchema(ref));
      } finally {
        delete this._loading[ref];
      }
    }
  } // Adds schema to the instance


  addSchema(schema, // If array is passed, `key` will be ignored
  key, // Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
  _meta, // true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
  _validateSchema = this.opts.validateSchema // false to skip schema validation. Used internally, option validateSchema should be used instead.
  ) {
    if (Array.isArray(schema)) {
      for (const sch of schema) this.addSchema(sch, undefined, _meta, _validateSchema);

      return this;
    }

    let id;

    if (typeof schema === "object") {
      const {
        schemaId
      } = this.opts;
      id = schema[schemaId];

      if (id !== undefined && typeof id != "string") {
        throw new Error(`schema ${schemaId} must be string`);
      }
    }

    key = (0, resolve_1.normalizeId)(key || id);

    this._checkUnique(key);

    this.schemas[key] = this._addSchema(schema, _meta, key, _validateSchema, true);
    return this;
  } // Add schema that will be used to validate other schemas
  // options in META_IGNORE_OPTIONS are alway set to false


  addMetaSchema(schema, key, // schema key
  _validateSchema = this.opts.validateSchema // false to skip schema validation, can be used to override validateSchema option for meta-schema
  ) {
    this.addSchema(schema, key, true, _validateSchema);
    return this;
  } //  Validate schema against its meta-schema


  validateSchema(schema, throwOrLogError) {
    if (typeof schema == "boolean") return true;
    let $schema;
    $schema = schema.$schema;

    if ($schema !== undefined && typeof $schema != "string") {
      throw new Error("$schema must be a string");
    }

    $schema = $schema || this.opts.defaultMeta || this.defaultMeta();

    if (!$schema) {
      this.logger.warn("meta-schema not available");
      this.errors = null;
      return true;
    }

    const valid = this.validate($schema, schema);

    if (!valid && throwOrLogError) {
      const message = "schema is invalid: " + this.errorsText();
      if (this.opts.validateSchema === "log") this.logger.error(message);else throw new Error(message);
    }

    return valid;
  } // Get compiled schema by `key` or `ref`.
  // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)


  getSchema(keyRef) {
    let sch;

    while (typeof (sch = getSchEnv.call(this, keyRef)) == "string") keyRef = sch;

    if (sch === undefined) {
      const {
        schemaId
      } = this.opts;
      const root = new compile_1.SchemaEnv({
        schema: {},
        schemaId
      });
      sch = compile_1.resolveSchema.call(this, root, keyRef);
      if (!sch) return;
      this.refs[keyRef] = sch;
    }

    return sch.validate || this._compileSchemaEnv(sch);
  } // Remove cached schema(s).
  // If no parameter is passed all schemas but meta-schemas are removed.
  // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
  // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.


  removeSchema(schemaKeyRef) {
    if (schemaKeyRef instanceof RegExp) {
      this._removeAllSchemas(this.schemas, schemaKeyRef);

      this._removeAllSchemas(this.refs, schemaKeyRef);

      return this;
    }

    switch (typeof schemaKeyRef) {
      case "undefined":
        this._removeAllSchemas(this.schemas);

        this._removeAllSchemas(this.refs);

        this._cache.clear();

        return this;

      case "string":
        {
          const sch = getSchEnv.call(this, schemaKeyRef);
          if (typeof sch == "object") this._cache.delete(sch.schema);
          delete this.schemas[schemaKeyRef];
          delete this.refs[schemaKeyRef];
          return this;
        }

      case "object":
        {
          const cacheKey = schemaKeyRef;

          this._cache.delete(cacheKey);

          let id = schemaKeyRef[this.opts.schemaId];

          if (id) {
            id = (0, resolve_1.normalizeId)(id);
            delete this.schemas[id];
            delete this.refs[id];
          }

          return this;
        }

      default:
        throw new Error("ajv.removeSchema: invalid parameter");
    }
  } // add "vocabulary" - a collection of keywords


  addVocabulary(definitions) {
    for (const def of definitions) this.addKeyword(def);

    return this;
  }

  addKeyword(kwdOrDef, def // deprecated
  ) {
    let keyword;

    if (typeof kwdOrDef == "string") {
      keyword = kwdOrDef;

      if (typeof def == "object") {
        this.logger.warn("these parameters are deprecated, see docs for addKeyword");
        def.keyword = keyword;
      }
    } else if (typeof kwdOrDef == "object" && def === undefined) {
      def = kwdOrDef;
      keyword = def.keyword;

      if (Array.isArray(keyword) && !keyword.length) {
        throw new Error("addKeywords: keyword must be string or non-empty array");
      }
    } else {
      throw new Error("invalid addKeywords parameters");
    }

    checkKeyword.call(this, keyword, def);

    if (!def) {
      (0, util_1.eachItem)(keyword, kwd => addRule.call(this, kwd));
      return this;
    }

    keywordMetaschema.call(this, def);
    const definition = { ...def,
      type: (0, dataType_1.getJSONTypes)(def.type),
      schemaType: (0, dataType_1.getJSONTypes)(def.schemaType)
    };
    (0, util_1.eachItem)(keyword, definition.type.length === 0 ? k => addRule.call(this, k, definition) : k => definition.type.forEach(t => addRule.call(this, k, definition, t)));
    return this;
  }

  getKeyword(keyword) {
    const rule = this.RULES.all[keyword];
    return typeof rule == "object" ? rule.definition : !!rule;
  } // Remove keyword


  removeKeyword(keyword) {
    // TODO return type should be Ajv
    const {
      RULES
    } = this;
    delete RULES.keywords[keyword];
    delete RULES.all[keyword];

    for (const group of RULES.rules) {
      const i = group.rules.findIndex(rule => rule.keyword === keyword);
      if (i >= 0) group.rules.splice(i, 1);
    }

    return this;
  } // Add format


  addFormat(name, format) {
    if (typeof format == "string") format = new RegExp(format);
    this.formats[name] = format;
    return this;
  }

  errorsText(errors = this.errors, // optional array of validation errors
  {
    separator = ", ",
    dataVar = "data"
  } = {} // optional options with properties `separator` and `dataVar`
  ) {
    if (!errors || errors.length === 0) return "No errors";
    return errors.map(e => `${dataVar}${e.instancePath} ${e.message}`).reduce((text, msg) => text + separator + msg);
  }

  $dataMetaSchema(metaSchema, keywordsJsonPointers) {
    const rules = this.RULES.all;
    metaSchema = JSON.parse(JSON.stringify(metaSchema));

    for (const jsonPointer of keywordsJsonPointers) {
      const segments = jsonPointer.split("/").slice(1); // first segment is an empty string

      let keywords = metaSchema;

      for (const seg of segments) keywords = keywords[seg];

      for (const key in rules) {
        const rule = rules[key];
        if (typeof rule != "object") continue;
        const {
          $data
        } = rule.definition;
        const schema = keywords[key];
        if ($data && schema) keywords[key] = schemaOrData(schema);
      }
    }

    return metaSchema;
  }

  _removeAllSchemas(schemas, regex) {
    for (const keyRef in schemas) {
      const sch = schemas[keyRef];

      if (!regex || regex.test(keyRef)) {
        if (typeof sch == "string") {
          delete schemas[keyRef];
        } else if (sch && !sch.meta) {
          this._cache.delete(sch.schema);

          delete schemas[keyRef];
        }
      }
    }
  }

  _addSchema(schema, meta, baseId, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {
    let id;
    const {
      schemaId
    } = this.opts;

    if (typeof schema == "object") {
      id = schema[schemaId];
    } else {
      if (this.opts.jtd) throw new Error("schema must be object");else if (typeof schema != "boolean") throw new Error("schema must be object or boolean");
    }

    let sch = this._cache.get(schema);

    if (sch !== undefined) return sch;
    baseId = (0, resolve_1.normalizeId)(id || baseId);
    const localRefs = resolve_1.getSchemaRefs.call(this, schema, baseId);
    sch = new compile_1.SchemaEnv({
      schema,
      schemaId,
      meta,
      baseId,
      localRefs
    });

    this._cache.set(sch.schema, sch);

    if (addSchema && !baseId.startsWith("#")) {
      // TODO atm it is allowed to overwrite schemas without id (instead of not adding them)
      if (baseId) this._checkUnique(baseId);
      this.refs[baseId] = sch;
    }

    if (validateSchema) this.validateSchema(schema, true);
    return sch;
  }

  _checkUnique(id) {
    if (this.schemas[id] || this.refs[id]) {
      throw new Error(`schema with key or id "${id}" already exists`);
    }
  }

  _compileSchemaEnv(sch) {
    if (sch.meta) this._compileMetaSchema(sch);else compile_1.compileSchema.call(this, sch);
    /* istanbul ignore if */

    if (!sch.validate) throw new Error("ajv implementation error");
    return sch.validate;
  }

  _compileMetaSchema(sch) {
    const currentOpts = this.opts;
    this.opts = this._metaOpts;

    try {
      compile_1.compileSchema.call(this, sch);
    } finally {
      this.opts = currentOpts;
    }
  }

}

exports["default"] = Ajv;
Ajv.ValidationError = validation_error_1.default;
Ajv.MissingRefError = ref_error_1.default;

function checkOptions(checkOpts, options, msg, log = "error") {
  for (const key in checkOpts) {
    const opt = key;
    if (opt in options) this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);
  }
}

function getSchEnv(keyRef) {
  keyRef = (0, resolve_1.normalizeId)(keyRef); // TODO tests fail without this line

  return this.schemas[keyRef] || this.refs[keyRef];
}

function addInitialSchemas() {
  const optsSchemas = this.opts.schemas;
  if (!optsSchemas) return;
  if (Array.isArray(optsSchemas)) this.addSchema(optsSchemas);else for (const key in optsSchemas) this.addSchema(optsSchemas[key], key);
}

function addInitialFormats() {
  for (const name in this.opts.formats) {
    const format = this.opts.formats[name];
    if (format) this.addFormat(name, format);
  }
}

function addInitialKeywords(defs) {
  if (Array.isArray(defs)) {
    this.addVocabulary(defs);
    return;
  }

  this.logger.warn("keywords option as map is deprecated, pass array");

  for (const keyword in defs) {
    const def = defs[keyword];
    if (!def.keyword) def.keyword = keyword;
    this.addKeyword(def);
  }
}

function getMetaSchemaOptions() {
  const metaOpts = { ...this.opts
  };

  for (const opt of META_IGNORE_OPTIONS) delete metaOpts[opt];

  return metaOpts;
}

const noLogs = {
  log() {},

  warn() {},

  error() {}

};

function getLogger(logger) {
  if (logger === false) return noLogs;
  if (logger === undefined) return console;
  if (logger.log && logger.warn && logger.error) return logger;
  throw new Error("logger must implement log, warn and error methods");
}

const KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;

function checkKeyword(keyword, def) {
  const {
    RULES
  } = this;
  (0, util_1.eachItem)(keyword, kwd => {
    if (RULES.keywords[kwd]) throw new Error(`Keyword ${kwd} is already defined`);
    if (!KEYWORD_NAME.test(kwd)) throw new Error(`Keyword ${kwd} has invalid name`);
  });
  if (!def) return;

  if (def.$data && !("code" in def || "validate" in def)) {
    throw new Error('$data keyword must have "code" or "validate" function');
  }
}

function addRule(keyword, definition, dataType) {
  var _a;

  const post = definition === null || definition === void 0 ? void 0 : definition.post;
  if (dataType && post) throw new Error('keyword with "post" flag cannot have "type"');
  const {
    RULES
  } = this;
  let ruleGroup = post ? RULES.post : RULES.rules.find(({
    type: t
  }) => t === dataType);

  if (!ruleGroup) {
    ruleGroup = {
      type: dataType,
      rules: []
    };
    RULES.rules.push(ruleGroup);
  }

  RULES.keywords[keyword] = true;
  if (!definition) return;
  const rule = {
    keyword,
    definition: { ...definition,
      type: (0, dataType_1.getJSONTypes)(definition.type),
      schemaType: (0, dataType_1.getJSONTypes)(definition.schemaType)
    }
  };
  if (definition.before) addBeforeRule.call(this, ruleGroup, rule, definition.before);else ruleGroup.rules.push(rule);
  RULES.all[keyword] = rule;
  (_a = definition.implements) === null || _a === void 0 ? void 0 : _a.forEach(kwd => this.addKeyword(kwd));
}

function addBeforeRule(ruleGroup, rule, before) {
  const i = ruleGroup.rules.findIndex(_rule => _rule.keyword === before);

  if (i >= 0) {
    ruleGroup.rules.splice(i, 0, rule);
  } else {
    ruleGroup.rules.push(rule);
    this.logger.warn(`rule ${before} is not defined`);
  }
}

function keywordMetaschema(def) {
  let {
    metaSchema
  } = def;
  if (metaSchema === undefined) return;
  if (def.$data && this.opts.$data) metaSchema = schemaOrData(metaSchema);
  def.validateSchema = this.compile(metaSchema, true);
}

const $dataRef = {
  $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"
};

function schemaOrData(schema) {
  return {
    anyOf: [schema, $dataRef]
  };
}

/***/ }),

/***/ "../shared/node_modules/ajv/dist/runtime/equal.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
})); // https://github.com/ajv-validator/ajv/issues/889

const equal = __webpack_require__("../shared/node_modules/fast-deep-equal/index.js");

equal.code = 'require("ajv/dist/runtime/equal").default';
exports["default"] = equal;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/runtime/ucs2length.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
})); // https://mathiasbynens.be/notes/javascript-encoding
// https://github.com/bestiejs/punycode.js - punycode.ucs2.decode

function ucs2length(str) {
  const len = str.length;
  let length = 0;
  let pos = 0;
  let value;

  while (pos < len) {
    length++;
    value = str.charCodeAt(pos++);

    if (value >= 0xd800 && value <= 0xdbff && pos < len) {
      // high surrogate, and there is a next character
      value = str.charCodeAt(pos);
      if ((value & 0xfc00) === 0xdc00) pos++; // low surrogate
    }
  }

  return length;
}

exports["default"] = ucs2length;
ucs2length.code = 'require("ajv/dist/runtime/ucs2length").default';

/***/ }),

/***/ "../shared/node_modules/ajv/dist/runtime/uri.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const uri = __webpack_require__("../shared/node_modules/uri-js/dist/es5/uri.all.js");

uri.code = 'require("ajv/dist/runtime/uri").default';
exports["default"] = uri;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/runtime/validation_error.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

class ValidationError extends Error {
  constructor(errors) {
    super("validation failed");
    this.errors = errors;
    this.ajv = this.validation = true;
  }

}

exports["default"] = ValidationError;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/applicator/additionalItems.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.validateAdditionalItems = void 0;

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const error = {
  message: ({
    params: {
      len
    }
  }) => (0, codegen_1.str)`must NOT have more than ${len} items`,
  params: ({
    params: {
      len
    }
  }) => (0, codegen_1._)`{limit: ${len}}`
};
const def = {
  keyword: "additionalItems",
  type: "array",
  schemaType: ["boolean", "object"],
  before: "uniqueItems",
  error,

  code(cxt) {
    const {
      parentSchema,
      it
    } = cxt;
    const {
      items
    } = parentSchema;

    if (!Array.isArray(items)) {
      (0, util_1.checkStrictMode)(it, '"additionalItems" is ignored when "items" is not an array of schemas');
      return;
    }

    validateAdditionalItems(cxt, items);
  }

};

function validateAdditionalItems(cxt, items) {
  const {
    gen,
    schema,
    data,
    keyword,
    it
  } = cxt;
  it.items = true;
  const len = gen.const("len", (0, codegen_1._)`${data}.length`);

  if (schema === false) {
    cxt.setParams({
      len: items.length
    });
    cxt.pass((0, codegen_1._)`${len} <= ${items.length}`);
  } else if (typeof schema == "object" && !(0, util_1.alwaysValidSchema)(it, schema)) {
    const valid = gen.var("valid", (0, codegen_1._)`${len} <= ${items.length}`); // TODO var

    gen.if((0, codegen_1.not)(valid), () => validateItems(valid));
    cxt.ok(valid);
  }

  function validateItems(valid) {
    gen.forRange("i", items.length, len, i => {
      cxt.subschema({
        keyword,
        dataProp: i,
        dataPropType: util_1.Type.Num
      }, valid);
      if (!it.allErrors) gen.if((0, codegen_1.not)(valid), () => gen.break());
    });
  }
}

exports.validateAdditionalItems = validateAdditionalItems;
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const code_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/code.js");

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const names_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/names.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const error = {
  message: "must NOT have additional properties",
  params: ({
    params
  }) => (0, codegen_1._)`{additionalProperty: ${params.additionalProperty}}`
};
const def = {
  keyword: "additionalProperties",
  type: ["object"],
  schemaType: ["boolean", "object"],
  allowUndefined: true,
  trackErrors: true,
  error,

  code(cxt) {
    const {
      gen,
      schema,
      parentSchema,
      data,
      errsCount,
      it
    } = cxt;
    /* istanbul ignore if */

    if (!errsCount) throw new Error("ajv implementation error");
    const {
      allErrors,
      opts
    } = it;
    it.props = true;
    if (opts.removeAdditional !== "all" && (0, util_1.alwaysValidSchema)(it, schema)) return;
    const props = (0, code_1.allSchemaProperties)(parentSchema.properties);
    const patProps = (0, code_1.allSchemaProperties)(parentSchema.patternProperties);
    checkAdditionalProperties();
    cxt.ok((0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);

    function checkAdditionalProperties() {
      gen.forIn("key", data, key => {
        if (!props.length && !patProps.length) additionalPropertyCode(key);else gen.if(isAdditional(key), () => additionalPropertyCode(key));
      });
    }

    function isAdditional(key) {
      let definedProp;

      if (props.length > 8) {
        // TODO maybe an option instead of hard-coded 8?
        const propsSchema = (0, util_1.schemaRefOrVal)(it, parentSchema.properties, "properties");
        definedProp = (0, code_1.isOwnProperty)(gen, propsSchema, key);
      } else if (props.length) {
        definedProp = (0, codegen_1.or)(...props.map(p => (0, codegen_1._)`${key} === ${p}`));
      } else {
        definedProp = codegen_1.nil;
      }

      if (patProps.length) {
        definedProp = (0, codegen_1.or)(definedProp, ...patProps.map(p => (0, codegen_1._)`${(0, code_1.usePattern)(cxt, p)}.test(${key})`));
      }

      return (0, codegen_1.not)(definedProp);
    }

    function deleteAdditional(key) {
      gen.code((0, codegen_1._)`delete ${data}[${key}]`);
    }

    function additionalPropertyCode(key) {
      if (opts.removeAdditional === "all" || opts.removeAdditional && schema === false) {
        deleteAdditional(key);
        return;
      }

      if (schema === false) {
        cxt.setParams({
          additionalProperty: key
        });
        cxt.error();
        if (!allErrors) gen.break();
        return;
      }

      if (typeof schema == "object" && !(0, util_1.alwaysValidSchema)(it, schema)) {
        const valid = gen.name("valid");

        if (opts.removeAdditional === "failing") {
          applyAdditionalSchema(key, valid, false);
          gen.if((0, codegen_1.not)(valid), () => {
            cxt.reset();
            deleteAdditional(key);
          });
        } else {
          applyAdditionalSchema(key, valid);
          if (!allErrors) gen.if((0, codegen_1.not)(valid), () => gen.break());
        }
      }
    }

    function applyAdditionalSchema(key, valid, errors) {
      const subschema = {
        keyword: "additionalProperties",
        dataProp: key,
        dataPropType: util_1.Type.Str
      };

      if (errors === false) {
        Object.assign(subschema, {
          compositeRule: true,
          createErrors: false,
          allErrors: false
        });
      }

      cxt.subschema(subschema, valid);
    }
  }

};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/applicator/allOf.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const def = {
  keyword: "allOf",
  schemaType: "array",

  code(cxt) {
    const {
      gen,
      schema,
      it
    } = cxt;
    /* istanbul ignore if */

    if (!Array.isArray(schema)) throw new Error("ajv implementation error");
    const valid = gen.name("valid");
    schema.forEach((sch, i) => {
      if ((0, util_1.alwaysValidSchema)(it, sch)) return;
      const schCxt = cxt.subschema({
        keyword: "allOf",
        schemaProp: i
      }, valid);
      cxt.ok(valid);
      cxt.mergeEvaluated(schCxt);
    });
  }

};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/applicator/anyOf.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const code_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/code.js");

const def = {
  keyword: "anyOf",
  schemaType: "array",
  trackErrors: true,
  code: code_1.validateUnion,
  error: {
    message: "must match a schema in anyOf"
  }
};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/applicator/contains.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const error = {
  message: ({
    params: {
      min,
      max
    }
  }) => max === undefined ? (0, codegen_1.str)`must contain at least ${min} valid item(s)` : (0, codegen_1.str)`must contain at least ${min} and no more than ${max} valid item(s)`,
  params: ({
    params: {
      min,
      max
    }
  }) => max === undefined ? (0, codegen_1._)`{minContains: ${min}}` : (0, codegen_1._)`{minContains: ${min}, maxContains: ${max}}`
};
const def = {
  keyword: "contains",
  type: "array",
  schemaType: ["object", "boolean"],
  before: "uniqueItems",
  trackErrors: true,
  error,

  code(cxt) {
    const {
      gen,
      schema,
      parentSchema,
      data,
      it
    } = cxt;
    let min;
    let max;
    const {
      minContains,
      maxContains
    } = parentSchema;

    if (it.opts.next) {
      min = minContains === undefined ? 1 : minContains;
      max = maxContains;
    } else {
      min = 1;
    }

    const len = gen.const("len", (0, codegen_1._)`${data}.length`);
    cxt.setParams({
      min,
      max
    });

    if (max === undefined && min === 0) {
      (0, util_1.checkStrictMode)(it, `"minContains" == 0 without "maxContains": "contains" keyword ignored`);
      return;
    }

    if (max !== undefined && min > max) {
      (0, util_1.checkStrictMode)(it, `"minContains" > "maxContains" is always invalid`);
      cxt.fail();
      return;
    }

    if ((0, util_1.alwaysValidSchema)(it, schema)) {
      let cond = (0, codegen_1._)`${len} >= ${min}`;
      if (max !== undefined) cond = (0, codegen_1._)`${cond} && ${len} <= ${max}`;
      cxt.pass(cond);
      return;
    }

    it.items = true;
    const valid = gen.name("valid");

    if (max === undefined && min === 1) {
      validateItems(valid, () => gen.if(valid, () => gen.break()));
    } else if (min === 0) {
      gen.let(valid, true);
      if (max !== undefined) gen.if((0, codegen_1._)`${data}.length > 0`, validateItemsWithCount);
    } else {
      gen.let(valid, false);
      validateItemsWithCount();
    }

    cxt.result(valid, () => cxt.reset());

    function validateItemsWithCount() {
      const schValid = gen.name("_valid");
      const count = gen.let("count", 0);
      validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)));
    }

    function validateItems(_valid, block) {
      gen.forRange("i", 0, len, i => {
        cxt.subschema({
          keyword: "contains",
          dataProp: i,
          dataPropType: util_1.Type.Num,
          compositeRule: true
        }, _valid);
        block();
      });
    }

    function checkLimits(count) {
      gen.code((0, codegen_1._)`${count}++`);

      if (max === undefined) {
        gen.if((0, codegen_1._)`${count} >= ${min}`, () => gen.assign(valid, true).break());
      } else {
        gen.if((0, codegen_1._)`${count} > ${max}`, () => gen.assign(valid, false).break());
        if (min === 1) gen.assign(valid, true);else gen.if((0, codegen_1._)`${count} >= ${min}`, () => gen.assign(valid, true));
      }
    }
  }

};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/applicator/dependencies.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const code_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/code.js");

exports.error = {
  message: ({
    params: {
      property,
      depsCount,
      deps
    }
  }) => {
    const property_ies = depsCount === 1 ? "property" : "properties";
    return (0, codegen_1.str)`must have ${property_ies} ${deps} when property ${property} is present`;
  },
  params: ({
    params: {
      property,
      depsCount,
      deps,
      missingProperty
    }
  }) => (0, codegen_1._)`{property: ${property},
    missingProperty: ${missingProperty},
    depsCount: ${depsCount},
    deps: ${deps}}` // TODO change to reference

};
const def = {
  keyword: "dependencies",
  type: "object",
  schemaType: "object",
  error: exports.error,

  code(cxt) {
    const [propDeps, schDeps] = splitDependencies(cxt);
    validatePropertyDeps(cxt, propDeps);
    validateSchemaDeps(cxt, schDeps);
  }

};

function splitDependencies({
  schema
}) {
  const propertyDeps = {};
  const schemaDeps = {};

  for (const key in schema) {
    if (key === "__proto__") continue;
    const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;
    deps[key] = schema[key];
  }

  return [propertyDeps, schemaDeps];
}

function validatePropertyDeps(cxt, propertyDeps = cxt.schema) {
  const {
    gen,
    data,
    it
  } = cxt;
  if (Object.keys(propertyDeps).length === 0) return;
  const missing = gen.let("missing");

  for (const prop in propertyDeps) {
    const deps = propertyDeps[prop];
    if (deps.length === 0) continue;
    const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);
    cxt.setParams({
      property: prop,
      depsCount: deps.length,
      deps: deps.join(", ")
    });

    if (it.allErrors) {
      gen.if(hasProperty, () => {
        for (const depProp of deps) {
          (0, code_1.checkReportMissingProp)(cxt, depProp);
        }
      });
    } else {
      gen.if((0, codegen_1._)`${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);
      (0, code_1.reportMissingProp)(cxt, missing);
      gen.else();
    }
  }
}

exports.validatePropertyDeps = validatePropertyDeps;

function validateSchemaDeps(cxt, schemaDeps = cxt.schema) {
  const {
    gen,
    data,
    keyword,
    it
  } = cxt;
  const valid = gen.name("valid");

  for (const prop in schemaDeps) {
    if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop])) continue;
    gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), () => {
      const schCxt = cxt.subschema({
        keyword,
        schemaProp: prop
      }, valid);
      cxt.mergeValidEvaluated(schCxt, valid);
    }, () => gen.var(valid, true) // TODO var
    );
    cxt.ok(valid);
  }
}

exports.validateSchemaDeps = validateSchemaDeps;
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/applicator/if.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const error = {
  message: ({
    params
  }) => (0, codegen_1.str)`must match "${params.ifClause}" schema`,
  params: ({
    params
  }) => (0, codegen_1._)`{failingKeyword: ${params.ifClause}}`
};
const def = {
  keyword: "if",
  schemaType: ["object", "boolean"],
  trackErrors: true,
  error,

  code(cxt) {
    const {
      gen,
      parentSchema,
      it
    } = cxt;

    if (parentSchema.then === undefined && parentSchema.else === undefined) {
      (0, util_1.checkStrictMode)(it, '"if" without "then" and "else" is ignored');
    }

    const hasThen = hasSchema(it, "then");
    const hasElse = hasSchema(it, "else");
    if (!hasThen && !hasElse) return;
    const valid = gen.let("valid", true);
    const schValid = gen.name("_valid");
    validateIf();
    cxt.reset();

    if (hasThen && hasElse) {
      const ifClause = gen.let("ifClause");
      cxt.setParams({
        ifClause
      });
      gen.if(schValid, validateClause("then", ifClause), validateClause("else", ifClause));
    } else if (hasThen) {
      gen.if(schValid, validateClause("then"));
    } else {
      gen.if((0, codegen_1.not)(schValid), validateClause("else"));
    }

    cxt.pass(valid, () => cxt.error(true));

    function validateIf() {
      const schCxt = cxt.subschema({
        keyword: "if",
        compositeRule: true,
        createErrors: false,
        allErrors: false
      }, schValid);
      cxt.mergeEvaluated(schCxt);
    }

    function validateClause(keyword, ifClause) {
      return () => {
        const schCxt = cxt.subschema({
          keyword
        }, schValid);
        gen.assign(valid, schValid);
        cxt.mergeValidEvaluated(schCxt, valid);
        if (ifClause) gen.assign(ifClause, (0, codegen_1._)`${keyword}`);else cxt.setParams({
          ifClause: keyword
        });
      };
    }
  }

};

function hasSchema(it, keyword) {
  const schema = it.schema[keyword];
  return schema !== undefined && !(0, util_1.alwaysValidSchema)(it, schema);
}

exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/applicator/index.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const additionalItems_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/applicator/additionalItems.js");

const prefixItems_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/applicator/prefixItems.js");

const items_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/applicator/items.js");

const items2020_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/applicator/items2020.js");

const contains_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/applicator/contains.js");

const dependencies_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/applicator/dependencies.js");

const propertyNames_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/applicator/propertyNames.js");

const additionalProperties_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js");

const properties_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/applicator/properties.js");

const patternProperties_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/applicator/patternProperties.js");

const not_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/applicator/not.js");

const anyOf_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/applicator/anyOf.js");

const oneOf_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/applicator/oneOf.js");

const allOf_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/applicator/allOf.js");

const if_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/applicator/if.js");

const thenElse_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/applicator/thenElse.js");

function getApplicator(draft2020 = false) {
  const applicator = [// any
  not_1.default, anyOf_1.default, oneOf_1.default, allOf_1.default, if_1.default, thenElse_1.default, // object
  propertyNames_1.default, additionalProperties_1.default, dependencies_1.default, properties_1.default, patternProperties_1.default]; // array

  if (draft2020) applicator.push(prefixItems_1.default, items2020_1.default);else applicator.push(additionalItems_1.default, items_1.default);
  applicator.push(contains_1.default);
  return applicator;
}

exports["default"] = getApplicator;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/applicator/items.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.validateTuple = void 0;

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const code_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/code.js");

const def = {
  keyword: "items",
  type: "array",
  schemaType: ["object", "array", "boolean"],
  before: "uniqueItems",

  code(cxt) {
    const {
      schema,
      it
    } = cxt;
    if (Array.isArray(schema)) return validateTuple(cxt, "additionalItems", schema);
    it.items = true;
    if ((0, util_1.alwaysValidSchema)(it, schema)) return;
    cxt.ok((0, code_1.validateArray)(cxt));
  }

};

function validateTuple(cxt, extraItems, schArr = cxt.schema) {
  const {
    gen,
    parentSchema,
    data,
    keyword,
    it
  } = cxt;
  checkStrictTuple(parentSchema);

  if (it.opts.unevaluated && schArr.length && it.items !== true) {
    it.items = util_1.mergeEvaluated.items(gen, schArr.length, it.items);
  }

  const valid = gen.name("valid");
  const len = gen.const("len", (0, codegen_1._)`${data}.length`);
  schArr.forEach((sch, i) => {
    if ((0, util_1.alwaysValidSchema)(it, sch)) return;
    gen.if((0, codegen_1._)`${len} > ${i}`, () => cxt.subschema({
      keyword,
      schemaProp: i,
      dataProp: i
    }, valid));
    cxt.ok(valid);
  });

  function checkStrictTuple(sch) {
    const {
      opts,
      errSchemaPath
    } = it;
    const l = schArr.length;
    const fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false);

    if (opts.strictTuples && !fullTuple) {
      const msg = `"${keyword}" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path "${errSchemaPath}"`;
      (0, util_1.checkStrictMode)(it, msg, opts.strictTuples);
    }
  }
}

exports.validateTuple = validateTuple;
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/applicator/items2020.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const code_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/code.js");

const additionalItems_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/applicator/additionalItems.js");

const error = {
  message: ({
    params: {
      len
    }
  }) => (0, codegen_1.str)`must NOT have more than ${len} items`,
  params: ({
    params: {
      len
    }
  }) => (0, codegen_1._)`{limit: ${len}}`
};
const def = {
  keyword: "items",
  type: "array",
  schemaType: ["object", "boolean"],
  before: "uniqueItems",
  error,

  code(cxt) {
    const {
      schema,
      parentSchema,
      it
    } = cxt;
    const {
      prefixItems
    } = parentSchema;
    it.items = true;
    if ((0, util_1.alwaysValidSchema)(it, schema)) return;
    if (prefixItems) (0, additionalItems_1.validateAdditionalItems)(cxt, prefixItems);else cxt.ok((0, code_1.validateArray)(cxt));
  }

};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/applicator/not.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const def = {
  keyword: "not",
  schemaType: ["object", "boolean"],
  trackErrors: true,

  code(cxt) {
    const {
      gen,
      schema,
      it
    } = cxt;

    if ((0, util_1.alwaysValidSchema)(it, schema)) {
      cxt.fail();
      return;
    }

    const valid = gen.name("valid");
    cxt.subschema({
      keyword: "not",
      compositeRule: true,
      createErrors: false,
      allErrors: false
    }, valid);
    cxt.failResult(valid, () => cxt.reset(), () => cxt.error());
  },

  error: {
    message: "must NOT be valid"
  }
};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/applicator/oneOf.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const error = {
  message: "must match exactly one schema in oneOf",
  params: ({
    params
  }) => (0, codegen_1._)`{passingSchemas: ${params.passing}}`
};
const def = {
  keyword: "oneOf",
  schemaType: "array",
  trackErrors: true,
  error,

  code(cxt) {
    const {
      gen,
      schema,
      parentSchema,
      it
    } = cxt;
    /* istanbul ignore if */

    if (!Array.isArray(schema)) throw new Error("ajv implementation error");
    if (it.opts.discriminator && parentSchema.discriminator) return;
    const schArr = schema;
    const valid = gen.let("valid", false);
    const passing = gen.let("passing", null);
    const schValid = gen.name("_valid");
    cxt.setParams({
      passing
    }); // TODO possibly fail straight away (with warning or exception) if there are two empty always valid schemas

    gen.block(validateOneOf);
    cxt.result(valid, () => cxt.reset(), () => cxt.error(true));

    function validateOneOf() {
      schArr.forEach((sch, i) => {
        let schCxt;

        if ((0, util_1.alwaysValidSchema)(it, sch)) {
          gen.var(schValid, true);
        } else {
          schCxt = cxt.subschema({
            keyword: "oneOf",
            schemaProp: i,
            compositeRule: true
          }, schValid);
        }

        if (i > 0) {
          gen.if((0, codegen_1._)`${schValid} && ${valid}`).assign(valid, false).assign(passing, (0, codegen_1._)`[${passing}, ${i}]`).else();
        }

        gen.if(schValid, () => {
          gen.assign(valid, true);
          gen.assign(passing, i);
          if (schCxt) cxt.mergeEvaluated(schCxt, codegen_1.Name);
        });
      });
    }
  }

};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/applicator/patternProperties.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const code_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/code.js");

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const util_2 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const def = {
  keyword: "patternProperties",
  type: "object",
  schemaType: "object",

  code(cxt) {
    const {
      gen,
      schema,
      data,
      parentSchema,
      it
    } = cxt;
    const {
      opts
    } = it;
    const patterns = (0, code_1.allSchemaProperties)(schema);
    const alwaysValidPatterns = patterns.filter(p => (0, util_1.alwaysValidSchema)(it, schema[p]));

    if (patterns.length === 0 || alwaysValidPatterns.length === patterns.length && (!it.opts.unevaluated || it.props === true)) {
      return;
    }

    const checkProperties = opts.strictSchema && !opts.allowMatchingProperties && parentSchema.properties;
    const valid = gen.name("valid");

    if (it.props !== true && !(it.props instanceof codegen_1.Name)) {
      it.props = (0, util_2.evaluatedPropsToName)(gen, it.props);
    }

    const {
      props
    } = it;
    validatePatternProperties();

    function validatePatternProperties() {
      for (const pat of patterns) {
        if (checkProperties) checkMatchingProperties(pat);

        if (it.allErrors) {
          validateProperties(pat);
        } else {
          gen.var(valid, true); // TODO var

          validateProperties(pat);
          gen.if(valid);
        }
      }
    }

    function checkMatchingProperties(pat) {
      for (const prop in checkProperties) {
        if (new RegExp(pat).test(prop)) {
          (0, util_1.checkStrictMode)(it, `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`);
        }
      }
    }

    function validateProperties(pat) {
      gen.forIn("key", data, key => {
        gen.if((0, codegen_1._)`${(0, code_1.usePattern)(cxt, pat)}.test(${key})`, () => {
          const alwaysValid = alwaysValidPatterns.includes(pat);

          if (!alwaysValid) {
            cxt.subschema({
              keyword: "patternProperties",
              schemaProp: pat,
              dataProp: key,
              dataPropType: util_2.Type.Str
            }, valid);
          }

          if (it.opts.unevaluated && props !== true) {
            gen.assign((0, codegen_1._)`${props}[${key}]`, true);
          } else if (!alwaysValid && !it.allErrors) {
            // can short-circuit if `unevaluatedProperties` is not supported (opts.next === false)
            // or if all properties were evaluated (props === true)
            gen.if((0, codegen_1.not)(valid), () => gen.break());
          }
        });
      });
    }
  }

};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/applicator/prefixItems.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const items_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/applicator/items.js");

const def = {
  keyword: "prefixItems",
  type: "array",
  schemaType: ["array"],
  before: "uniqueItems",
  code: cxt => (0, items_1.validateTuple)(cxt, "items")
};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/applicator/properties.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const validate_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/validate/index.js");

const code_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/code.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const additionalProperties_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js");

const def = {
  keyword: "properties",
  type: "object",
  schemaType: "object",

  code(cxt) {
    const {
      gen,
      schema,
      parentSchema,
      data,
      it
    } = cxt;

    if (it.opts.removeAdditional === "all" && parentSchema.additionalProperties === undefined) {
      additionalProperties_1.default.code(new validate_1.KeywordCxt(it, additionalProperties_1.default, "additionalProperties"));
    }

    const allProps = (0, code_1.allSchemaProperties)(schema);

    for (const prop of allProps) {
      it.definedProperties.add(prop);
    }

    if (it.opts.unevaluated && allProps.length && it.props !== true) {
      it.props = util_1.mergeEvaluated.props(gen, (0, util_1.toHash)(allProps), it.props);
    }

    const properties = allProps.filter(p => !(0, util_1.alwaysValidSchema)(it, schema[p]));
    if (properties.length === 0) return;
    const valid = gen.name("valid");

    for (const prop of properties) {
      if (hasDefault(prop)) {
        applyPropertySchema(prop);
      } else {
        gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties));
        applyPropertySchema(prop);
        if (!it.allErrors) gen.else().var(valid, true);
        gen.endIf();
      }

      cxt.it.definedProperties.add(prop);
      cxt.ok(valid);
    }

    function hasDefault(prop) {
      return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== undefined;
    }

    function applyPropertySchema(prop) {
      cxt.subschema({
        keyword: "properties",
        schemaProp: prop,
        dataProp: prop
      }, valid);
    }
  }

};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/applicator/propertyNames.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const error = {
  message: "property name must be valid",
  params: ({
    params
  }) => (0, codegen_1._)`{propertyName: ${params.propertyName}}`
};
const def = {
  keyword: "propertyNames",
  type: "object",
  schemaType: ["object", "boolean"],
  error,

  code(cxt) {
    const {
      gen,
      schema,
      data,
      it
    } = cxt;
    if ((0, util_1.alwaysValidSchema)(it, schema)) return;
    const valid = gen.name("valid");
    gen.forIn("key", data, key => {
      cxt.setParams({
        propertyName: key
      });
      cxt.subschema({
        keyword: "propertyNames",
        data: key,
        dataTypes: ["string"],
        propertyName: key,
        compositeRule: true
      }, valid);
      gen.if((0, codegen_1.not)(valid), () => {
        cxt.error(true);
        if (!it.allErrors) gen.break();
      });
    });
    cxt.ok(valid);
  }

};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/applicator/thenElse.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const def = {
  keyword: ["then", "else"],
  schemaType: ["object", "boolean"],

  code({
    keyword,
    parentSchema,
    it
  }) {
    if (parentSchema.if === undefined) (0, util_1.checkStrictMode)(it, `"${keyword}" without "if" is ignored`);
  }

};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/code.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.validateUnion = exports.validateArray = exports.usePattern = exports.callValidateCode = exports.schemaProperties = exports.allSchemaProperties = exports.noPropertyInData = exports.propertyInData = exports.isOwnProperty = exports.hasPropFunc = exports.reportMissingProp = exports.checkMissingProp = exports.checkReportMissingProp = void 0;

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const names_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/names.js");

const util_2 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

function checkReportMissingProp(cxt, prop) {
  const {
    gen,
    data,
    it
  } = cxt;
  gen.if(noPropertyInData(gen, data, prop, it.opts.ownProperties), () => {
    cxt.setParams({
      missingProperty: (0, codegen_1._)`${prop}`
    }, true);
    cxt.error();
  });
}

exports.checkReportMissingProp = checkReportMissingProp;

function checkMissingProp({
  gen,
  data,
  it: {
    opts
  }
}, properties, missing) {
  return (0, codegen_1.or)(...properties.map(prop => (0, codegen_1.and)(noPropertyInData(gen, data, prop, opts.ownProperties), (0, codegen_1._)`${missing} = ${prop}`)));
}

exports.checkMissingProp = checkMissingProp;

function reportMissingProp(cxt, missing) {
  cxt.setParams({
    missingProperty: missing
  }, true);
  cxt.error();
}

exports.reportMissingProp = reportMissingProp;

function hasPropFunc(gen) {
  return gen.scopeValue("func", {
    // eslint-disable-next-line @typescript-eslint/unbound-method
    ref: Object.prototype.hasOwnProperty,
    code: (0, codegen_1._)`Object.prototype.hasOwnProperty`
  });
}

exports.hasPropFunc = hasPropFunc;

function isOwnProperty(gen, data, property) {
  return (0, codegen_1._)`${hasPropFunc(gen)}.call(${data}, ${property})`;
}

exports.isOwnProperty = isOwnProperty;

function propertyInData(gen, data, property, ownProperties) {
  const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(property)} !== undefined`;
  return ownProperties ? (0, codegen_1._)`${cond} && ${isOwnProperty(gen, data, property)}` : cond;
}

exports.propertyInData = propertyInData;

function noPropertyInData(gen, data, property, ownProperties) {
  const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(property)} === undefined`;
  return ownProperties ? (0, codegen_1.or)(cond, (0, codegen_1.not)(isOwnProperty(gen, data, property))) : cond;
}

exports.noPropertyInData = noPropertyInData;

function allSchemaProperties(schemaMap) {
  return schemaMap ? Object.keys(schemaMap).filter(p => p !== "__proto__") : [];
}

exports.allSchemaProperties = allSchemaProperties;

function schemaProperties(it, schemaMap) {
  return allSchemaProperties(schemaMap).filter(p => !(0, util_1.alwaysValidSchema)(it, schemaMap[p]));
}

exports.schemaProperties = schemaProperties;

function callValidateCode({
  schemaCode,
  data,
  it: {
    gen,
    topSchemaRef,
    schemaPath,
    errorPath
  },
  it
}, func, context, passSchema) {
  const dataAndSchema = passSchema ? (0, codegen_1._)`${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}` : data;
  const valCxt = [[names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, errorPath)], [names_1.default.parentData, it.parentData], [names_1.default.parentDataProperty, it.parentDataProperty], [names_1.default.rootData, names_1.default.rootData]];
  if (it.opts.dynamicRef) valCxt.push([names_1.default.dynamicAnchors, names_1.default.dynamicAnchors]);
  const args = (0, codegen_1._)`${dataAndSchema}, ${gen.object(...valCxt)}`;
  return context !== codegen_1.nil ? (0, codegen_1._)`${func}.call(${context}, ${args})` : (0, codegen_1._)`${func}(${args})`;
}

exports.callValidateCode = callValidateCode;
const newRegExp = (0, codegen_1._)`new RegExp`;

function usePattern({
  gen,
  it: {
    opts
  }
}, pattern) {
  const u = opts.unicodeRegExp ? "u" : "";
  const {
    regExp
  } = opts.code;
  const rx = regExp(pattern, u);
  return gen.scopeValue("pattern", {
    key: rx.toString(),
    ref: rx,
    code: (0, codegen_1._)`${regExp.code === "new RegExp" ? newRegExp : (0, util_2.useFunc)(gen, regExp)}(${pattern}, ${u})`
  });
}

exports.usePattern = usePattern;

function validateArray(cxt) {
  const {
    gen,
    data,
    keyword,
    it
  } = cxt;
  const valid = gen.name("valid");

  if (it.allErrors) {
    const validArr = gen.let("valid", true);
    validateItems(() => gen.assign(validArr, false));
    return validArr;
  }

  gen.var(valid, true);
  validateItems(() => gen.break());
  return valid;

  function validateItems(notValid) {
    const len = gen.const("len", (0, codegen_1._)`${data}.length`);
    gen.forRange("i", 0, len, i => {
      cxt.subschema({
        keyword,
        dataProp: i,
        dataPropType: util_1.Type.Num
      }, valid);
      gen.if((0, codegen_1.not)(valid), notValid);
    });
  }
}

exports.validateArray = validateArray;

function validateUnion(cxt) {
  const {
    gen,
    schema,
    keyword,
    it
  } = cxt;
  /* istanbul ignore if */

  if (!Array.isArray(schema)) throw new Error("ajv implementation error");
  const alwaysValid = schema.some(sch => (0, util_1.alwaysValidSchema)(it, sch));
  if (alwaysValid && !it.opts.unevaluated) return;
  const valid = gen.let("valid", false);
  const schValid = gen.name("_valid");
  gen.block(() => schema.forEach((_sch, i) => {
    const schCxt = cxt.subschema({
      keyword,
      schemaProp: i,
      compositeRule: true
    }, schValid);
    gen.assign(valid, (0, codegen_1._)`${valid} || ${schValid}`);
    const merged = cxt.mergeValidEvaluated(schCxt, schValid); // can short-circuit if `unevaluatedProperties/Items` not supported (opts.unevaluated !== true)
    // or if all properties and items were evaluated (it.props === true && it.items === true)

    if (!merged) gen.if((0, codegen_1.not)(valid));
  }));
  cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
}

exports.validateUnion = validateUnion;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/core/id.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
const def = {
  keyword: "id",

  code() {
    throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID');
  }

};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/core/index.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const id_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/core/id.js");

const ref_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/core/ref.js");

const core = ["$schema", "$id", "$defs", "$vocabulary", {
  keyword: "$comment"
}, "definitions", id_1.default, ref_1.default];
exports["default"] = core;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/core/ref.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.callRef = exports.getValidate = void 0;

const ref_error_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/ref_error.js");

const code_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/code.js");

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const names_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/names.js");

const compile_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/index.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const def = {
  keyword: "$ref",
  schemaType: "string",

  code(cxt) {
    const {
      gen,
      schema: $ref,
      it
    } = cxt;
    const {
      baseId,
      schemaEnv: env,
      validateName,
      opts,
      self
    } = it;
    const {
      root
    } = env;
    if (($ref === "#" || $ref === "#/") && baseId === root.baseId) return callRootRef();
    const schOrEnv = compile_1.resolveRef.call(self, root, baseId, $ref);
    if (schOrEnv === undefined) throw new ref_error_1.default(it.opts.uriResolver, baseId, $ref);
    if (schOrEnv instanceof compile_1.SchemaEnv) return callValidate(schOrEnv);
    return inlineRefSchema(schOrEnv);

    function callRootRef() {
      if (env === root) return callRef(cxt, validateName, env, env.$async);
      const rootName = gen.scopeValue("root", {
        ref: root
      });
      return callRef(cxt, (0, codegen_1._)`${rootName}.validate`, root, root.$async);
    }

    function callValidate(sch) {
      const v = getValidate(cxt, sch);
      callRef(cxt, v, sch, sch.$async);
    }

    function inlineRefSchema(sch) {
      const schName = gen.scopeValue("schema", opts.code.source === true ? {
        ref: sch,
        code: (0, codegen_1.stringify)(sch)
      } : {
        ref: sch
      });
      const valid = gen.name("valid");
      const schCxt = cxt.subschema({
        schema: sch,
        dataTypes: [],
        schemaPath: codegen_1.nil,
        topSchemaRef: schName,
        errSchemaPath: $ref
      }, valid);
      cxt.mergeEvaluated(schCxt);
      cxt.ok(valid);
    }
  }

};

function getValidate(cxt, sch) {
  const {
    gen
  } = cxt;
  return sch.validate ? gen.scopeValue("validate", {
    ref: sch.validate
  }) : (0, codegen_1._)`${gen.scopeValue("wrapper", {
    ref: sch
  })}.validate`;
}

exports.getValidate = getValidate;

function callRef(cxt, v, sch, $async) {
  const {
    gen,
    it
  } = cxt;
  const {
    allErrors,
    schemaEnv: env,
    opts
  } = it;
  const passCxt = opts.passContext ? names_1.default.this : codegen_1.nil;
  if ($async) callAsyncRef();else callSyncRef();

  function callAsyncRef() {
    if (!env.$async) throw new Error("async schema referenced by sync schema");
    const valid = gen.let("valid");
    gen.try(() => {
      gen.code((0, codegen_1._)`await ${(0, code_1.callValidateCode)(cxt, v, passCxt)}`);
      addEvaluatedFrom(v); // TODO will not work with async, it has to be returned with the result

      if (!allErrors) gen.assign(valid, true);
    }, e => {
      gen.if((0, codegen_1._)`!(${e} instanceof ${it.ValidationError})`, () => gen.throw(e));
      addErrorsFrom(e);
      if (!allErrors) gen.assign(valid, false);
    });
    cxt.ok(valid);
  }

  function callSyncRef() {
    cxt.result((0, code_1.callValidateCode)(cxt, v, passCxt), () => addEvaluatedFrom(v), () => addErrorsFrom(v));
  }

  function addErrorsFrom(source) {
    const errs = (0, codegen_1._)`${source}.errors`;
    gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`); // TODO tagged

    gen.assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);
  }

  function addEvaluatedFrom(source) {
    var _a;

    if (!it.opts.unevaluated) return;
    const schEvaluated = (_a = sch === null || sch === void 0 ? void 0 : sch.validate) === null || _a === void 0 ? void 0 : _a.evaluated; // TODO refactor

    if (it.props !== true) {
      if (schEvaluated && !schEvaluated.dynamicProps) {
        if (schEvaluated.props !== undefined) {
          it.props = util_1.mergeEvaluated.props(gen, schEvaluated.props, it.props);
        }
      } else {
        const props = gen.var("props", (0, codegen_1._)`${source}.evaluated.props`);
        it.props = util_1.mergeEvaluated.props(gen, props, it.props, codegen_1.Name);
      }
    }

    if (it.items !== true) {
      if (schEvaluated && !schEvaluated.dynamicItems) {
        if (schEvaluated.items !== undefined) {
          it.items = util_1.mergeEvaluated.items(gen, schEvaluated.items, it.items);
        }
      } else {
        const items = gen.var("items", (0, codegen_1._)`${source}.evaluated.items`);
        it.items = util_1.mergeEvaluated.items(gen, items, it.items, codegen_1.Name);
      }
    }
  }
}

exports.callRef = callRef;
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/discriminator/index.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const types_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/discriminator/types.js");

const compile_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/index.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const error = {
  message: ({
    params: {
      discrError,
      tagName
    }
  }) => discrError === types_1.DiscrError.Tag ? `tag "${tagName}" must be string` : `value of tag "${tagName}" must be in oneOf`,
  params: ({
    params: {
      discrError,
      tag,
      tagName
    }
  }) => (0, codegen_1._)`{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`
};
const def = {
  keyword: "discriminator",
  type: "object",
  schemaType: "object",
  error,

  code(cxt) {
    const {
      gen,
      data,
      schema,
      parentSchema,
      it
    } = cxt;
    const {
      oneOf
    } = parentSchema;

    if (!it.opts.discriminator) {
      throw new Error("discriminator: requires discriminator option");
    }

    const tagName = schema.propertyName;
    if (typeof tagName != "string") throw new Error("discriminator: requires propertyName");
    if (schema.mapping) throw new Error("discriminator: mapping is not supported");
    if (!oneOf) throw new Error("discriminator: requires oneOf keyword");
    const valid = gen.let("valid", false);
    const tag = gen.const("tag", (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(tagName)}`);
    gen.if((0, codegen_1._)`typeof ${tag} == "string"`, () => validateMapping(), () => cxt.error(false, {
      discrError: types_1.DiscrError.Tag,
      tag,
      tagName
    }));
    cxt.ok(valid);

    function validateMapping() {
      const mapping = getMapping();
      gen.if(false);

      for (const tagValue in mapping) {
        gen.elseIf((0, codegen_1._)`${tag} === ${tagValue}`);
        gen.assign(valid, applyTagSchema(mapping[tagValue]));
      }

      gen.else();
      cxt.error(false, {
        discrError: types_1.DiscrError.Mapping,
        tag,
        tagName
      });
      gen.endIf();
    }

    function applyTagSchema(schemaProp) {
      const _valid = gen.name("valid");

      const schCxt = cxt.subschema({
        keyword: "oneOf",
        schemaProp
      }, _valid);
      cxt.mergeEvaluated(schCxt, codegen_1.Name);
      return _valid;
    }

    function getMapping() {
      var _a;

      const oneOfMapping = {};
      const topRequired = hasRequired(parentSchema);
      let tagRequired = true;

      for (let i = 0; i < oneOf.length; i++) {
        let sch = oneOf[i];

        if ((sch === null || sch === void 0 ? void 0 : sch.$ref) && !(0, util_1.schemaHasRulesButRef)(sch, it.self.RULES)) {
          sch = compile_1.resolveRef.call(it.self, it.schemaEnv.root, it.baseId, sch === null || sch === void 0 ? void 0 : sch.$ref);
          if (sch instanceof compile_1.SchemaEnv) sch = sch.schema;
        }

        const propSch = (_a = sch === null || sch === void 0 ? void 0 : sch.properties) === null || _a === void 0 ? void 0 : _a[tagName];

        if (typeof propSch != "object") {
          throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have "properties/${tagName}"`);
        }

        tagRequired = tagRequired && (topRequired || hasRequired(sch));
        addMappings(propSch, i);
      }

      if (!tagRequired) throw new Error(`discriminator: "${tagName}" must be required`);
      return oneOfMapping;

      function hasRequired({
        required
      }) {
        return Array.isArray(required) && required.includes(tagName);
      }

      function addMappings(sch, i) {
        if (sch.const) {
          addMapping(sch.const, i);
        } else if (sch.enum) {
          for (const tagValue of sch.enum) {
            addMapping(tagValue, i);
          }
        } else {
          throw new Error(`discriminator: "properties/${tagName}" must have "const" or "enum"`);
        }
      }

      function addMapping(tagValue, i) {
        if (typeof tagValue != "string" || tagValue in oneOfMapping) {
          throw new Error(`discriminator: "${tagName}" values must be unique strings`);
        }

        oneOfMapping[tagValue] = i;
      }
    }
  }

};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/discriminator/types.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.DiscrError = void 0;
var DiscrError;

(function (DiscrError) {
  DiscrError["Tag"] = "tag";
  DiscrError["Mapping"] = "mapping";
})(DiscrError = exports.DiscrError || (exports.DiscrError = {}));

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/draft7.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const core_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/core/index.js");

const validation_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/validation/index.js");

const applicator_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/applicator/index.js");

const format_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/format/index.js");

const metadata_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/metadata.js");

const draft7Vocabularies = [core_1.default, validation_1.default, (0, applicator_1.default)(), format_1.default, metadata_1.metadataVocabulary, metadata_1.contentVocabulary];
exports["default"] = draft7Vocabularies;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/format/format.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const error = {
  message: ({
    schemaCode
  }) => (0, codegen_1.str)`must match format "${schemaCode}"`,
  params: ({
    schemaCode
  }) => (0, codegen_1._)`{format: ${schemaCode}}`
};
const def = {
  keyword: "format",
  type: ["number", "string"],
  schemaType: "string",
  $data: true,
  error,

  code(cxt, ruleType) {
    const {
      gen,
      data,
      $data,
      schema,
      schemaCode,
      it
    } = cxt;
    const {
      opts,
      errSchemaPath,
      schemaEnv,
      self
    } = it;
    if (!opts.validateFormats) return;
    if ($data) validate$DataFormat();else validateFormat();

    function validate$DataFormat() {
      const fmts = gen.scopeValue("formats", {
        ref: self.formats,
        code: opts.code.formats
      });
      const fDef = gen.const("fDef", (0, codegen_1._)`${fmts}[${schemaCode}]`);
      const fType = gen.let("fType");
      const format = gen.let("format"); // TODO simplify

      gen.if((0, codegen_1._)`typeof ${fDef} == "object" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, (0, codegen_1._)`${fDef}.type || "string"`).assign(format, (0, codegen_1._)`${fDef}.validate`), () => gen.assign(fType, (0, codegen_1._)`"string"`).assign(format, fDef));
      cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));

      function unknownFmt() {
        if (opts.strictSchema === false) return codegen_1.nil;
        return (0, codegen_1._)`${schemaCode} && !${format}`;
      }

      function invalidFmt() {
        const callFormat = schemaEnv.$async ? (0, codegen_1._)`(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))` : (0, codegen_1._)`${format}(${data})`;
        const validData = (0, codegen_1._)`(typeof ${format} == "function" ? ${callFormat} : ${format}.test(${data}))`;
        return (0, codegen_1._)`${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;
      }
    }

    function validateFormat() {
      const formatDef = self.formats[schema];

      if (!formatDef) {
        unknownFormat();
        return;
      }

      if (formatDef === true) return;
      const [fmtType, format, fmtRef] = getFormat(formatDef);
      if (fmtType === ruleType) cxt.pass(validCondition());

      function unknownFormat() {
        if (opts.strictSchema === false) {
          self.logger.warn(unknownMsg());
          return;
        }

        throw new Error(unknownMsg());

        function unknownMsg() {
          return `unknown format "${schema}" ignored in schema at path "${errSchemaPath}"`;
        }
      }

      function getFormat(fmtDef) {
        const code = fmtDef instanceof RegExp ? (0, codegen_1.regexpCode)(fmtDef) : opts.code.formats ? (0, codegen_1._)`${opts.code.formats}${(0, codegen_1.getProperty)(schema)}` : undefined;
        const fmt = gen.scopeValue("formats", {
          key: schema,
          ref: fmtDef,
          code
        });

        if (typeof fmtDef == "object" && !(fmtDef instanceof RegExp)) {
          return [fmtDef.type || "string", fmtDef.validate, (0, codegen_1._)`${fmt}.validate`];
        }

        return ["string", fmtDef, fmt];
      }

      function validCondition() {
        if (typeof formatDef == "object" && !(formatDef instanceof RegExp) && formatDef.async) {
          if (!schemaEnv.$async) throw new Error("async format in sync schema");
          return (0, codegen_1._)`await ${fmtRef}(${data})`;
        }

        return typeof format == "function" ? (0, codegen_1._)`${fmtRef}(${data})` : (0, codegen_1._)`${fmtRef}.test(${data})`;
      }
    }
  }

};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/format/index.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const format_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/format/format.js");

const format = [format_1.default];
exports["default"] = format;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/metadata.js":
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.contentVocabulary = exports.metadataVocabulary = void 0;
exports.metadataVocabulary = ["title", "description", "default", "deprecated", "readOnly", "writeOnly", "examples"];
exports.contentVocabulary = ["contentMediaType", "contentEncoding", "contentSchema"];

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/validation/const.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const equal_1 = __webpack_require__("../shared/node_modules/ajv/dist/runtime/equal.js");

const error = {
  message: "must be equal to constant",
  params: ({
    schemaCode
  }) => (0, codegen_1._)`{allowedValue: ${schemaCode}}`
};
const def = {
  keyword: "const",
  $data: true,
  error,

  code(cxt) {
    const {
      gen,
      data,
      $data,
      schemaCode,
      schema
    } = cxt;

    if ($data || schema && typeof schema == "object") {
      cxt.fail$data((0, codegen_1._)`!${(0, util_1.useFunc)(gen, equal_1.default)}(${data}, ${schemaCode})`);
    } else {
      cxt.fail((0, codegen_1._)`${schema} !== ${data}`);
    }
  }

};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/validation/enum.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const equal_1 = __webpack_require__("../shared/node_modules/ajv/dist/runtime/equal.js");

const error = {
  message: "must be equal to one of the allowed values",
  params: ({
    schemaCode
  }) => (0, codegen_1._)`{allowedValues: ${schemaCode}}`
};
const def = {
  keyword: "enum",
  schemaType: "array",
  $data: true,
  error,

  code(cxt) {
    const {
      gen,
      data,
      $data,
      schema,
      schemaCode,
      it
    } = cxt;
    if (!$data && schema.length === 0) throw new Error("enum must have non-empty array");
    const useLoop = schema.length >= it.opts.loopEnum;
    let eql;

    const getEql = () => eql !== null && eql !== void 0 ? eql : eql = (0, util_1.useFunc)(gen, equal_1.default);

    let valid;

    if (useLoop || $data) {
      valid = gen.let("valid");
      cxt.block$data(valid, loopEnum);
    } else {
      /* istanbul ignore if */
      if (!Array.isArray(schema)) throw new Error("ajv implementation error");
      const vSchema = gen.const("vSchema", schemaCode);
      valid = (0, codegen_1.or)(...schema.map((_x, i) => equalCode(vSchema, i)));
    }

    cxt.pass(valid);

    function loopEnum() {
      gen.assign(valid, false);
      gen.forOf("v", schemaCode, v => gen.if((0, codegen_1._)`${getEql()}(${data}, ${v})`, () => gen.assign(valid, true).break()));
    }

    function equalCode(vSchema, i) {
      const sch = schema[i];
      return typeof sch === "object" && sch !== null ? (0, codegen_1._)`${getEql()}(${data}, ${vSchema}[${i}])` : (0, codegen_1._)`${data} === ${sch}`;
    }
  }

};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/validation/index.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const limitNumber_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/validation/limitNumber.js");

const multipleOf_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/validation/multipleOf.js");

const limitLength_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/validation/limitLength.js");

const pattern_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/validation/pattern.js");

const limitProperties_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/validation/limitProperties.js");

const required_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/validation/required.js");

const limitItems_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/validation/limitItems.js");

const uniqueItems_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/validation/uniqueItems.js");

const const_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/validation/const.js");

const enum_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/validation/enum.js");

const validation = [// number
limitNumber_1.default, multipleOf_1.default, // string
limitLength_1.default, pattern_1.default, // object
limitProperties_1.default, required_1.default, // array
limitItems_1.default, uniqueItems_1.default, // any
{
  keyword: "type",
  schemaType: ["string", "array"]
}, {
  keyword: "nullable",
  schemaType: "boolean"
}, const_1.default, enum_1.default];
exports["default"] = validation;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/validation/limitItems.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const error = {
  message({
    keyword,
    schemaCode
  }) {
    const comp = keyword === "maxItems" ? "more" : "fewer";
    return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} items`;
  },

  params: ({
    schemaCode
  }) => (0, codegen_1._)`{limit: ${schemaCode}}`
};
const def = {
  keyword: ["maxItems", "minItems"],
  type: "array",
  schemaType: "number",
  $data: true,
  error,

  code(cxt) {
    const {
      keyword,
      data,
      schemaCode
    } = cxt;
    const op = keyword === "maxItems" ? codegen_1.operators.GT : codegen_1.operators.LT;
    cxt.fail$data((0, codegen_1._)`${data}.length ${op} ${schemaCode}`);
  }

};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/validation/limitLength.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const ucs2length_1 = __webpack_require__("../shared/node_modules/ajv/dist/runtime/ucs2length.js");

const error = {
  message({
    keyword,
    schemaCode
  }) {
    const comp = keyword === "maxLength" ? "more" : "fewer";
    return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} characters`;
  },

  params: ({
    schemaCode
  }) => (0, codegen_1._)`{limit: ${schemaCode}}`
};
const def = {
  keyword: ["maxLength", "minLength"],
  type: "string",
  schemaType: "number",
  $data: true,
  error,

  code(cxt) {
    const {
      keyword,
      data,
      schemaCode,
      it
    } = cxt;
    const op = keyword === "maxLength" ? codegen_1.operators.GT : codegen_1.operators.LT;
    const len = it.opts.unicode === false ? (0, codegen_1._)`${data}.length` : (0, codegen_1._)`${(0, util_1.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;
    cxt.fail$data((0, codegen_1._)`${len} ${op} ${schemaCode}`);
  }

};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/validation/limitNumber.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const ops = codegen_1.operators;
const KWDs = {
  maximum: {
    okStr: "<=",
    ok: ops.LTE,
    fail: ops.GT
  },
  minimum: {
    okStr: ">=",
    ok: ops.GTE,
    fail: ops.LT
  },
  exclusiveMaximum: {
    okStr: "<",
    ok: ops.LT,
    fail: ops.GTE
  },
  exclusiveMinimum: {
    okStr: ">",
    ok: ops.GT,
    fail: ops.LTE
  }
};
const error = {
  message: ({
    keyword,
    schemaCode
  }) => (0, codegen_1.str)`must be ${KWDs[keyword].okStr} ${schemaCode}`,
  params: ({
    keyword,
    schemaCode
  }) => (0, codegen_1._)`{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`
};
const def = {
  keyword: Object.keys(KWDs),
  type: "number",
  schemaType: "number",
  $data: true,
  error,

  code(cxt) {
    const {
      keyword,
      data,
      schemaCode
    } = cxt;
    cxt.fail$data((0, codegen_1._)`${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);
  }

};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/validation/limitProperties.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const error = {
  message({
    keyword,
    schemaCode
  }) {
    const comp = keyword === "maxProperties" ? "more" : "fewer";
    return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} properties`;
  },

  params: ({
    schemaCode
  }) => (0, codegen_1._)`{limit: ${schemaCode}}`
};
const def = {
  keyword: ["maxProperties", "minProperties"],
  type: "object",
  schemaType: "number",
  $data: true,
  error,

  code(cxt) {
    const {
      keyword,
      data,
      schemaCode
    } = cxt;
    const op = keyword === "maxProperties" ? codegen_1.operators.GT : codegen_1.operators.LT;
    cxt.fail$data((0, codegen_1._)`Object.keys(${data}).length ${op} ${schemaCode}`);
  }

};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/validation/multipleOf.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const error = {
  message: ({
    schemaCode
  }) => (0, codegen_1.str)`must be multiple of ${schemaCode}`,
  params: ({
    schemaCode
  }) => (0, codegen_1._)`{multipleOf: ${schemaCode}}`
};
const def = {
  keyword: "multipleOf",
  type: "number",
  schemaType: "number",
  $data: true,
  error,

  code(cxt) {
    const {
      gen,
      data,
      schemaCode,
      it
    } = cxt; // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)

    const prec = it.opts.multipleOfPrecision;
    const res = gen.let("res");
    const invalid = prec ? (0, codegen_1._)`Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}` : (0, codegen_1._)`${res} !== parseInt(${res})`;
    cxt.fail$data((0, codegen_1._)`(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);
  }

};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/validation/pattern.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const code_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/code.js");

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const error = {
  message: ({
    schemaCode
  }) => (0, codegen_1.str)`must match pattern "${schemaCode}"`,
  params: ({
    schemaCode
  }) => (0, codegen_1._)`{pattern: ${schemaCode}}`
};
const def = {
  keyword: "pattern",
  type: "string",
  schemaType: "string",
  $data: true,
  error,

  code(cxt) {
    const {
      data,
      $data,
      schema,
      schemaCode,
      it
    } = cxt; // TODO regexp should be wrapped in try/catchs

    const u = it.opts.unicodeRegExp ? "u" : "";
    const regExp = $data ? (0, codegen_1._)`(new RegExp(${schemaCode}, ${u}))` : (0, code_1.usePattern)(cxt, schema);
    cxt.fail$data((0, codegen_1._)`!${regExp}.test(${data})`);
  }

};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/validation/required.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const code_1 = __webpack_require__("../shared/node_modules/ajv/dist/vocabularies/code.js");

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const error = {
  message: ({
    params: {
      missingProperty
    }
  }) => (0, codegen_1.str)`must have required property '${missingProperty}'`,
  params: ({
    params: {
      missingProperty
    }
  }) => (0, codegen_1._)`{missingProperty: ${missingProperty}}`
};
const def = {
  keyword: "required",
  type: "object",
  schemaType: "array",
  $data: true,
  error,

  code(cxt) {
    const {
      gen,
      schema,
      schemaCode,
      data,
      $data,
      it
    } = cxt;
    const {
      opts
    } = it;
    if (!$data && schema.length === 0) return;
    const useLoop = schema.length >= opts.loopRequired;
    if (it.allErrors) allErrorsMode();else exitOnErrorMode();

    if (opts.strictRequired) {
      const props = cxt.parentSchema.properties;
      const {
        definedProperties
      } = cxt.it;

      for (const requiredKey of schema) {
        if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === undefined && !definedProperties.has(requiredKey)) {
          const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
          const msg = `required property "${requiredKey}" is not defined at "${schemaPath}" (strictRequired)`;
          (0, util_1.checkStrictMode)(it, msg, it.opts.strictRequired);
        }
      }
    }

    function allErrorsMode() {
      if (useLoop || $data) {
        cxt.block$data(codegen_1.nil, loopAllRequired);
      } else {
        for (const prop of schema) {
          (0, code_1.checkReportMissingProp)(cxt, prop);
        }
      }
    }

    function exitOnErrorMode() {
      const missing = gen.let("missing");

      if (useLoop || $data) {
        const valid = gen.let("valid", true);
        cxt.block$data(valid, () => loopUntilMissing(missing, valid));
        cxt.ok(valid);
      } else {
        gen.if((0, code_1.checkMissingProp)(cxt, schema, missing));
        (0, code_1.reportMissingProp)(cxt, missing);
        gen.else();
      }
    }

    function loopAllRequired() {
      gen.forOf("prop", schemaCode, prop => {
        cxt.setParams({
          missingProperty: prop
        });
        gen.if((0, code_1.noPropertyInData)(gen, data, prop, opts.ownProperties), () => cxt.error());
      });
    }

    function loopUntilMissing(missing, valid) {
      cxt.setParams({
        missingProperty: missing
      });
      gen.forOf(missing, schemaCode, () => {
        gen.assign(valid, (0, code_1.propertyInData)(gen, data, missing, opts.ownProperties));
        gen.if((0, codegen_1.not)(valid), () => {
          cxt.error();
          gen.break();
        });
      }, codegen_1.nil);
    }
  }

};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/ajv/dist/vocabularies/validation/uniqueItems.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

const dataType_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/validate/dataType.js");

const codegen_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/codegen/index.js");

const util_1 = __webpack_require__("../shared/node_modules/ajv/dist/compile/util.js");

const equal_1 = __webpack_require__("../shared/node_modules/ajv/dist/runtime/equal.js");

const error = {
  message: ({
    params: {
      i,
      j
    }
  }) => (0, codegen_1.str)`must NOT have duplicate items (items ## ${j} and ${i} are identical)`,
  params: ({
    params: {
      i,
      j
    }
  }) => (0, codegen_1._)`{i: ${i}, j: ${j}}`
};
const def = {
  keyword: "uniqueItems",
  type: "array",
  schemaType: "boolean",
  $data: true,
  error,

  code(cxt) {
    const {
      gen,
      data,
      $data,
      schema,
      parentSchema,
      schemaCode,
      it
    } = cxt;
    if (!$data && !schema) return;
    const valid = gen.let("valid");
    const itemTypes = parentSchema.items ? (0, dataType_1.getSchemaTypes)(parentSchema.items) : [];
    cxt.block$data(valid, validateUniqueItems, (0, codegen_1._)`${schemaCode} === false`);
    cxt.ok(valid);

    function validateUniqueItems() {
      const i = gen.let("i", (0, codegen_1._)`${data}.length`);
      const j = gen.let("j");
      cxt.setParams({
        i,
        j
      });
      gen.assign(valid, true);
      gen.if((0, codegen_1._)`${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j));
    }

    function canOptimize() {
      return itemTypes.length > 0 && !itemTypes.some(t => t === "object" || t === "array");
    }

    function loopN(i, j) {
      const item = gen.name("item");
      const wrongType = (0, dataType_1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);
      const indices = gen.const("indices", (0, codegen_1._)`{}`);
      gen.for((0, codegen_1._)`;${i}--;`, () => {
        gen.let(item, (0, codegen_1._)`${data}[${i}]`);
        gen.if(wrongType, (0, codegen_1._)`continue`);
        if (itemTypes.length > 1) gen.if((0, codegen_1._)`typeof ${item} == "string"`, (0, codegen_1._)`${item} += "_"`);
        gen.if((0, codegen_1._)`typeof ${indices}[${item}] == "number"`, () => {
          gen.assign(j, (0, codegen_1._)`${indices}[${item}]`);
          cxt.error();
          gen.assign(valid, false).break();
        }).code((0, codegen_1._)`${indices}[${item}] = ${i}`);
      });
    }

    function loopN2(i, j) {
      const eql = (0, util_1.useFunc)(gen, equal_1.default);
      const outer = gen.name("outer");
      gen.label(outer).for((0, codegen_1._)`;${i}--;`, () => gen.for((0, codegen_1._)`${j} = ${i}; ${j}--;`, () => gen.if((0, codegen_1._)`${eql}(${data}[${i}], ${data}[${j}])`, () => {
        cxt.error();
        gen.assign(valid, false).break(outer);
      })));
    }
  }

};
exports["default"] = def;

/***/ }),

/***/ "../shared/node_modules/esprima/dist/esprima.js":
/***/ (function(module) {

(function webpackUniversalModuleDefinition(root, factory) {
  /* istanbul ignore next */
  if (true) module.exports = factory();else {}
})(this, function () {
  return (
    /******/
    function (modules) {
      // webpackBootstrap

      /******/
      // The module cache

      /******/
      var installedModules = {};
      /******/
      // The require function

      /******/

      function __nested_webpack_require_646__(moduleId) {
        /******/
        // Check if module is in cache

        /* istanbul ignore if */

        /******/
        if (installedModules[moduleId])
          /******/
          return installedModules[moduleId].exports;
        /******/
        // Create a new module (and put it into the cache)

        /******/

        var module = installedModules[moduleId] = {
          /******/
          exports: {},

          /******/
          id: moduleId,

          /******/
          loaded: false
          /******/

        };
        /******/
        // Execute the module function

        /******/

        modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_646__);
        /******/
        // Flag the module as loaded

        /******/

        module.loaded = true;
        /******/
        // Return the exports of the module

        /******/

        return module.exports;
        /******/
      }
      /******/
      // expose the modules object (__webpack_modules__)

      /******/


      __nested_webpack_require_646__.m = modules;
      /******/
      // expose the module cache

      /******/

      __nested_webpack_require_646__.c = installedModules;
      /******/
      // __webpack_public_path__

      /******/

      __nested_webpack_require_646__.p = "";
      /******/
      // Load entry module and return exports

      /******/

      return __nested_webpack_require_646__(0);
      /******/
    }
    /************************************************************************/

    /******/
    ([
    /* 0 */

    /***/
    function (module, exports, __nested_webpack_require_2253__) {
      "use strict";
      /*
        Copyright JS Foundation and other contributors, https://js.foundation/
      	  Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:
      	    * Redistributions of source code must retain the above copyright
            notice, this list of conditions and the following disclaimer.
          * Redistributions in binary form must reproduce the above copyright
            notice, this list of conditions and the following disclaimer in the
            documentation and/or other materials provided with the distribution.
      	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
        DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
        ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
        THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
      */

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var comment_handler_1 = __nested_webpack_require_2253__(1);

      var jsx_parser_1 = __nested_webpack_require_2253__(3);

      var parser_1 = __nested_webpack_require_2253__(8);

      var tokenizer_1 = __nested_webpack_require_2253__(15);

      function parse(code, options, delegate) {
        var commentHandler = null;

        var proxyDelegate = function (node, metadata) {
          if (delegate) {
            delegate(node, metadata);
          }

          if (commentHandler) {
            commentHandler.visit(node, metadata);
          }
        };

        var parserDelegate = typeof delegate === 'function' ? proxyDelegate : null;
        var collectComment = false;

        if (options) {
          collectComment = typeof options.comment === 'boolean' && options.comment;
          var attachComment = typeof options.attachComment === 'boolean' && options.attachComment;

          if (collectComment || attachComment) {
            commentHandler = new comment_handler_1.CommentHandler();
            commentHandler.attach = attachComment;
            options.comment = true;
            parserDelegate = proxyDelegate;
          }
        }

        var isModule = false;

        if (options && typeof options.sourceType === 'string') {
          isModule = options.sourceType === 'module';
        }

        var parser;

        if (options && typeof options.jsx === 'boolean' && options.jsx) {
          parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);
        } else {
          parser = new parser_1.Parser(code, options, parserDelegate);
        }

        var program = isModule ? parser.parseModule() : parser.parseScript();
        var ast = program;

        if (collectComment && commentHandler) {
          ast.comments = commentHandler.comments;
        }

        if (parser.config.tokens) {
          ast.tokens = parser.tokens;
        }

        if (parser.config.tolerant) {
          ast.errors = parser.errorHandler.errors;
        }

        return ast;
      }

      exports.parse = parse;

      function parseModule(code, options, delegate) {
        var parsingOptions = options || {};
        parsingOptions.sourceType = 'module';
        return parse(code, parsingOptions, delegate);
      }

      exports.parseModule = parseModule;

      function parseScript(code, options, delegate) {
        var parsingOptions = options || {};
        parsingOptions.sourceType = 'script';
        return parse(code, parsingOptions, delegate);
      }

      exports.parseScript = parseScript;

      function tokenize(code, options, delegate) {
        var tokenizer = new tokenizer_1.Tokenizer(code, options);
        var tokens;
        tokens = [];

        try {
          while (true) {
            var token = tokenizer.getNextToken();

            if (!token) {
              break;
            }

            if (delegate) {
              token = delegate(token);
            }

            tokens.push(token);
          }
        } catch (e) {
          tokenizer.errorHandler.tolerate(e);
        }

        if (tokenizer.errorHandler.tolerant) {
          tokens.errors = tokenizer.errors();
        }

        return tokens;
      }

      exports.tokenize = tokenize;

      var syntax_1 = __nested_webpack_require_2253__(2);

      exports.Syntax = syntax_1.Syntax; // Sync with *.json manifests.

      exports.version = '4.0.1';
      /***/
    },
    /* 1 */

    /***/
    function (module, exports, __nested_webpack_require_7272__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var syntax_1 = __nested_webpack_require_7272__(2);

      var CommentHandler = function () {
        function CommentHandler() {
          this.attach = false;
          this.comments = [];
          this.stack = [];
          this.leading = [];
          this.trailing = [];
        }

        CommentHandler.prototype.insertInnerComments = function (node, metadata) {
          //  innnerComments for properties empty block
          //  `function a() {/** comments **\/}`
          if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {
            var innerComments = [];

            for (var i = this.leading.length - 1; i >= 0; --i) {
              var entry = this.leading[i];

              if (metadata.end.offset >= entry.start) {
                innerComments.unshift(entry.comment);
                this.leading.splice(i, 1);
                this.trailing.splice(i, 1);
              }
            }

            if (innerComments.length) {
              node.innerComments = innerComments;
            }
          }
        };

        CommentHandler.prototype.findTrailingComments = function (metadata) {
          var trailingComments = [];

          if (this.trailing.length > 0) {
            for (var i = this.trailing.length - 1; i >= 0; --i) {
              var entry_1 = this.trailing[i];

              if (entry_1.start >= metadata.end.offset) {
                trailingComments.unshift(entry_1.comment);
              }
            }

            this.trailing.length = 0;
            return trailingComments;
          }

          var entry = this.stack[this.stack.length - 1];

          if (entry && entry.node.trailingComments) {
            var firstComment = entry.node.trailingComments[0];

            if (firstComment && firstComment.range[0] >= metadata.end.offset) {
              trailingComments = entry.node.trailingComments;
              delete entry.node.trailingComments;
            }
          }

          return trailingComments;
        };

        CommentHandler.prototype.findLeadingComments = function (metadata) {
          var leadingComments = [];
          var target;

          while (this.stack.length > 0) {
            var entry = this.stack[this.stack.length - 1];

            if (entry && entry.start >= metadata.start.offset) {
              target = entry.node;
              this.stack.pop();
            } else {
              break;
            }
          }

          if (target) {
            var count = target.leadingComments ? target.leadingComments.length : 0;

            for (var i = count - 1; i >= 0; --i) {
              var comment = target.leadingComments[i];

              if (comment.range[1] <= metadata.start.offset) {
                leadingComments.unshift(comment);
                target.leadingComments.splice(i, 1);
              }
            }

            if (target.leadingComments && target.leadingComments.length === 0) {
              delete target.leadingComments;
            }

            return leadingComments;
          }

          for (var i = this.leading.length - 1; i >= 0; --i) {
            var entry = this.leading[i];

            if (entry.start <= metadata.start.offset) {
              leadingComments.unshift(entry.comment);
              this.leading.splice(i, 1);
            }
          }

          return leadingComments;
        };

        CommentHandler.prototype.visitNode = function (node, metadata) {
          if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {
            return;
          }

          this.insertInnerComments(node, metadata);
          var trailingComments = this.findTrailingComments(metadata);
          var leadingComments = this.findLeadingComments(metadata);

          if (leadingComments.length > 0) {
            node.leadingComments = leadingComments;
          }

          if (trailingComments.length > 0) {
            node.trailingComments = trailingComments;
          }

          this.stack.push({
            node: node,
            start: metadata.start.offset
          });
        };

        CommentHandler.prototype.visitComment = function (node, metadata) {
          var type = node.type[0] === 'L' ? 'Line' : 'Block';
          var comment = {
            type: type,
            value: node.value
          };

          if (node.range) {
            comment.range = node.range;
          }

          if (node.loc) {
            comment.loc = node.loc;
          }

          this.comments.push(comment);

          if (this.attach) {
            var entry = {
              comment: {
                type: type,
                value: node.value,
                range: [metadata.start.offset, metadata.end.offset]
              },
              start: metadata.start.offset
            };

            if (node.loc) {
              entry.comment.loc = node.loc;
            }

            node.type = type;
            this.leading.push(entry);
            this.trailing.push(entry);
          }
        };

        CommentHandler.prototype.visit = function (node, metadata) {
          if (node.type === 'LineComment') {
            this.visitComment(node, metadata);
          } else if (node.type === 'BlockComment') {
            this.visitComment(node, metadata);
          } else if (this.attach) {
            this.visitNode(node, metadata);
          }
        };

        return CommentHandler;
      }();

      exports.CommentHandler = CommentHandler;
      /***/
    },
    /* 2 */

    /***/
    function (module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Syntax = {
        AssignmentExpression: 'AssignmentExpression',
        AssignmentPattern: 'AssignmentPattern',
        ArrayExpression: 'ArrayExpression',
        ArrayPattern: 'ArrayPattern',
        ArrowFunctionExpression: 'ArrowFunctionExpression',
        AwaitExpression: 'AwaitExpression',
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ClassBody: 'ClassBody',
        ClassDeclaration: 'ClassDeclaration',
        ClassExpression: 'ClassExpression',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DoWhileStatement: 'DoWhileStatement',
        DebuggerStatement: 'DebuggerStatement',
        EmptyStatement: 'EmptyStatement',
        ExportAllDeclaration: 'ExportAllDeclaration',
        ExportDefaultDeclaration: 'ExportDefaultDeclaration',
        ExportNamedDeclaration: 'ExportNamedDeclaration',
        ExportSpecifier: 'ExportSpecifier',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForOfStatement: 'ForOfStatement',
        ForInStatement: 'ForInStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        ImportDeclaration: 'ImportDeclaration',
        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
        ImportSpecifier: 'ImportSpecifier',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        MetaProperty: 'MetaProperty',
        MethodDefinition: 'MethodDefinition',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        ObjectPattern: 'ObjectPattern',
        Program: 'Program',
        Property: 'Property',
        RestElement: 'RestElement',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SpreadElement: 'SpreadElement',
        Super: 'Super',
        SwitchCase: 'SwitchCase',
        SwitchStatement: 'SwitchStatement',
        TaggedTemplateExpression: 'TaggedTemplateExpression',
        TemplateElement: 'TemplateElement',
        TemplateLiteral: 'TemplateLiteral',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        YieldExpression: 'YieldExpression'
      };
      /***/
    },
    /* 3 */

    /***/
    function (module, exports, __nested_webpack_require_16100__) {
      "use strict";
      /* istanbul ignore next */

      var __extends = this && this.__extends || function () {
        var extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function (d, b) {
          d.__proto__ = b;
        } || function (d, b) {
          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        };

        return function (d, b) {
          extendStatics(d, b);

          function __() {
            this.constructor = d;
          }

          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var character_1 = __nested_webpack_require_16100__(4);

      var JSXNode = __nested_webpack_require_16100__(5);

      var jsx_syntax_1 = __nested_webpack_require_16100__(6);

      var Node = __nested_webpack_require_16100__(7);

      var parser_1 = __nested_webpack_require_16100__(8);

      var token_1 = __nested_webpack_require_16100__(13);

      var xhtml_entities_1 = __nested_webpack_require_16100__(14);

      token_1.TokenName[100
      /* Identifier */
      ] = 'JSXIdentifier';
      token_1.TokenName[101
      /* Text */
      ] = 'JSXText'; // Fully qualified element name, e.g. <svg:path> returns "svg:path"

      function getQualifiedElementName(elementName) {
        var qualifiedName;

        switch (elementName.type) {
          case jsx_syntax_1.JSXSyntax.JSXIdentifier:
            var id = elementName;
            qualifiedName = id.name;
            break;

          case jsx_syntax_1.JSXSyntax.JSXNamespacedName:
            var ns = elementName;
            qualifiedName = getQualifiedElementName(ns.namespace) + ':' + getQualifiedElementName(ns.name);
            break;

          case jsx_syntax_1.JSXSyntax.JSXMemberExpression:
            var expr = elementName;
            qualifiedName = getQualifiedElementName(expr.object) + '.' + getQualifiedElementName(expr.property);
            break;

          /* istanbul ignore next */

          default:
            break;
        }

        return qualifiedName;
      }

      var JSXParser = function (_super) {
        __extends(JSXParser, _super);

        function JSXParser(code, options, delegate) {
          return _super.call(this, code, options, delegate) || this;
        }

        JSXParser.prototype.parsePrimaryExpression = function () {
          return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);
        };

        JSXParser.prototype.startJSX = function () {
          // Unwind the scanner before the lookahead token.
          this.scanner.index = this.startMarker.index;
          this.scanner.lineNumber = this.startMarker.line;
          this.scanner.lineStart = this.startMarker.index - this.startMarker.column;
        };

        JSXParser.prototype.finishJSX = function () {
          // Prime the next lookahead.
          this.nextToken();
        };

        JSXParser.prototype.reenterJSX = function () {
          this.startJSX();
          this.expectJSX('}'); // Pop the closing '}' added from the lookahead.

          if (this.config.tokens) {
            this.tokens.pop();
          }
        };

        JSXParser.prototype.createJSXNode = function () {
          this.collectComments();
          return {
            index: this.scanner.index,
            line: this.scanner.lineNumber,
            column: this.scanner.index - this.scanner.lineStart
          };
        };

        JSXParser.prototype.createJSXChildNode = function () {
          return {
            index: this.scanner.index,
            line: this.scanner.lineNumber,
            column: this.scanner.index - this.scanner.lineStart
          };
        };

        JSXParser.prototype.scanXHTMLEntity = function (quote) {
          var result = '&';
          var valid = true;
          var terminated = false;
          var numeric = false;
          var hex = false;

          while (!this.scanner.eof() && valid && !terminated) {
            var ch = this.scanner.source[this.scanner.index];

            if (ch === quote) {
              break;
            }

            terminated = ch === ';';
            result += ch;
            ++this.scanner.index;

            if (!terminated) {
              switch (result.length) {
                case 2:
                  // e.g. '&#123;'
                  numeric = ch === '#';
                  break;

                case 3:
                  if (numeric) {
                    // e.g. '&#x41;'
                    hex = ch === 'x';
                    valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));
                    numeric = numeric && !hex;
                  }

                  break;

                default:
                  valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));
                  valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));
                  break;
              }
            }
          }

          if (valid && terminated && result.length > 2) {
            // e.g. '&#x41;' becomes just '#x41'
            var str = result.substr(1, result.length - 2);

            if (numeric && str.length > 1) {
              result = String.fromCharCode(parseInt(str.substr(1), 10));
            } else if (hex && str.length > 2) {
              result = String.fromCharCode(parseInt('0' + str.substr(1), 16));
            } else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {
              result = xhtml_entities_1.XHTMLEntities[str];
            }
          }

          return result;
        }; // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.


        JSXParser.prototype.lexJSX = function () {
          var cp = this.scanner.source.charCodeAt(this.scanner.index); // < > / : = { }

          if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {
            var value = this.scanner.source[this.scanner.index++];
            return {
              type: 7
              /* Punctuator */
              ,
              value: value,
              lineNumber: this.scanner.lineNumber,
              lineStart: this.scanner.lineStart,
              start: this.scanner.index - 1,
              end: this.scanner.index
            };
          } // " '


          if (cp === 34 || cp === 39) {
            var start = this.scanner.index;
            var quote = this.scanner.source[this.scanner.index++];
            var str = '';

            while (!this.scanner.eof()) {
              var ch = this.scanner.source[this.scanner.index++];

              if (ch === quote) {
                break;
              } else if (ch === '&') {
                str += this.scanXHTMLEntity(quote);
              } else {
                str += ch;
              }
            }

            return {
              type: 8
              /* StringLiteral */
              ,
              value: str,
              lineNumber: this.scanner.lineNumber,
              lineStart: this.scanner.lineStart,
              start: start,
              end: this.scanner.index
            };
          } // ... or .


          if (cp === 46) {
            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);
            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);
            var value = n1 === 46 && n2 === 46 ? '...' : '.';
            var start = this.scanner.index;
            this.scanner.index += value.length;
            return {
              type: 7
              /* Punctuator */
              ,
              value: value,
              lineNumber: this.scanner.lineNumber,
              lineStart: this.scanner.lineStart,
              start: start,
              end: this.scanner.index
            };
          } // `


          if (cp === 96) {
            // Only placeholder, since it will be rescanned as a real assignment expression.
            return {
              type: 10
              /* Template */
              ,
              value: '',
              lineNumber: this.scanner.lineNumber,
              lineStart: this.scanner.lineStart,
              start: this.scanner.index,
              end: this.scanner.index
            };
          } // Identifer can not contain backslash (char code 92).


          if (character_1.Character.isIdentifierStart(cp) && cp !== 92) {
            var start = this.scanner.index;
            ++this.scanner.index;

            while (!this.scanner.eof()) {
              var ch = this.scanner.source.charCodeAt(this.scanner.index);

              if (character_1.Character.isIdentifierPart(ch) && ch !== 92) {
                ++this.scanner.index;
              } else if (ch === 45) {
                // Hyphen (char code 45) can be part of an identifier.
                ++this.scanner.index;
              } else {
                break;
              }
            }

            var id = this.scanner.source.slice(start, this.scanner.index);
            return {
              type: 100
              /* Identifier */
              ,
              value: id,
              lineNumber: this.scanner.lineNumber,
              lineStart: this.scanner.lineStart,
              start: start,
              end: this.scanner.index
            };
          }

          return this.scanner.lex();
        };

        JSXParser.prototype.nextJSXToken = function () {
          this.collectComments();
          this.startMarker.index = this.scanner.index;
          this.startMarker.line = this.scanner.lineNumber;
          this.startMarker.column = this.scanner.index - this.scanner.lineStart;
          var token = this.lexJSX();
          this.lastMarker.index = this.scanner.index;
          this.lastMarker.line = this.scanner.lineNumber;
          this.lastMarker.column = this.scanner.index - this.scanner.lineStart;

          if (this.config.tokens) {
            this.tokens.push(this.convertToken(token));
          }

          return token;
        };

        JSXParser.prototype.nextJSXText = function () {
          this.startMarker.index = this.scanner.index;
          this.startMarker.line = this.scanner.lineNumber;
          this.startMarker.column = this.scanner.index - this.scanner.lineStart;
          var start = this.scanner.index;
          var text = '';

          while (!this.scanner.eof()) {
            var ch = this.scanner.source[this.scanner.index];

            if (ch === '{' || ch === '<') {
              break;
            }

            ++this.scanner.index;
            text += ch;

            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
              ++this.scanner.lineNumber;

              if (ch === '\r' && this.scanner.source[this.scanner.index] === '\n') {
                ++this.scanner.index;
              }

              this.scanner.lineStart = this.scanner.index;
            }
          }

          this.lastMarker.index = this.scanner.index;
          this.lastMarker.line = this.scanner.lineNumber;
          this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
          var token = {
            type: 101
            /* Text */
            ,
            value: text,
            lineNumber: this.scanner.lineNumber,
            lineStart: this.scanner.lineStart,
            start: start,
            end: this.scanner.index
          };

          if (text.length > 0 && this.config.tokens) {
            this.tokens.push(this.convertToken(token));
          }

          return token;
        };

        JSXParser.prototype.peekJSXToken = function () {
          var state = this.scanner.saveState();
          this.scanner.scanComments();
          var next = this.lexJSX();
          this.scanner.restoreState(state);
          return next;
        }; // Expect the next JSX token to match the specified punctuator.
        // If not, an exception will be thrown.


        JSXParser.prototype.expectJSX = function (value) {
          var token = this.nextJSXToken();

          if (token.type !== 7
          /* Punctuator */
          || token.value !== value) {
            this.throwUnexpectedToken(token);
          }
        }; // Return true if the next JSX token matches the specified punctuator.


        JSXParser.prototype.matchJSX = function (value) {
          var next = this.peekJSXToken();
          return next.type === 7
          /* Punctuator */
          && next.value === value;
        };

        JSXParser.prototype.parseJSXIdentifier = function () {
          var node = this.createJSXNode();
          var token = this.nextJSXToken();

          if (token.type !== 100
          /* Identifier */
          ) {
            this.throwUnexpectedToken(token);
          }

          return this.finalize(node, new JSXNode.JSXIdentifier(token.value));
        };

        JSXParser.prototype.parseJSXElementName = function () {
          var node = this.createJSXNode();
          var elementName = this.parseJSXIdentifier();

          if (this.matchJSX(':')) {
            var namespace = elementName;
            this.expectJSX(':');
            var name_1 = this.parseJSXIdentifier();
            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));
          } else if (this.matchJSX('.')) {
            while (this.matchJSX('.')) {
              var object = elementName;
              this.expectJSX('.');
              var property = this.parseJSXIdentifier();
              elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));
            }
          }

          return elementName;
        };

        JSXParser.prototype.parseJSXAttributeName = function () {
          var node = this.createJSXNode();
          var attributeName;
          var identifier = this.parseJSXIdentifier();

          if (this.matchJSX(':')) {
            var namespace = identifier;
            this.expectJSX(':');
            var name_2 = this.parseJSXIdentifier();
            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));
          } else {
            attributeName = identifier;
          }

          return attributeName;
        };

        JSXParser.prototype.parseJSXStringLiteralAttribute = function () {
          var node = this.createJSXNode();
          var token = this.nextJSXToken();

          if (token.type !== 8
          /* StringLiteral */
          ) {
            this.throwUnexpectedToken(token);
          }

          var raw = this.getTokenRaw(token);
          return this.finalize(node, new Node.Literal(token.value, raw));
        };

        JSXParser.prototype.parseJSXExpressionAttribute = function () {
          var node = this.createJSXNode();
          this.expectJSX('{');
          this.finishJSX();

          if (this.match('}')) {
            this.tolerateError('JSX attributes must only be assigned a non-empty expression');
          }

          var expression = this.parseAssignmentExpression();
          this.reenterJSX();
          return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
        };

        JSXParser.prototype.parseJSXAttributeValue = function () {
          return this.matchJSX('{') ? this.parseJSXExpressionAttribute() : this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();
        };

        JSXParser.prototype.parseJSXNameValueAttribute = function () {
          var node = this.createJSXNode();
          var name = this.parseJSXAttributeName();
          var value = null;

          if (this.matchJSX('=')) {
            this.expectJSX('=');
            value = this.parseJSXAttributeValue();
          }

          return this.finalize(node, new JSXNode.JSXAttribute(name, value));
        };

        JSXParser.prototype.parseJSXSpreadAttribute = function () {
          var node = this.createJSXNode();
          this.expectJSX('{');
          this.expectJSX('...');
          this.finishJSX();
          var argument = this.parseAssignmentExpression();
          this.reenterJSX();
          return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));
        };

        JSXParser.prototype.parseJSXAttributes = function () {
          var attributes = [];

          while (!this.matchJSX('/') && !this.matchJSX('>')) {
            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() : this.parseJSXNameValueAttribute();
            attributes.push(attribute);
          }

          return attributes;
        };

        JSXParser.prototype.parseJSXOpeningElement = function () {
          var node = this.createJSXNode();
          this.expectJSX('<');
          var name = this.parseJSXElementName();
          var attributes = this.parseJSXAttributes();
          var selfClosing = this.matchJSX('/');

          if (selfClosing) {
            this.expectJSX('/');
          }

          this.expectJSX('>');
          return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
        };

        JSXParser.prototype.parseJSXBoundaryElement = function () {
          var node = this.createJSXNode();
          this.expectJSX('<');

          if (this.matchJSX('/')) {
            this.expectJSX('/');
            var name_3 = this.parseJSXElementName();
            this.expectJSX('>');
            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));
          }

          var name = this.parseJSXElementName();
          var attributes = this.parseJSXAttributes();
          var selfClosing = this.matchJSX('/');

          if (selfClosing) {
            this.expectJSX('/');
          }

          this.expectJSX('>');
          return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
        };

        JSXParser.prototype.parseJSXEmptyExpression = function () {
          var node = this.createJSXChildNode();
          this.collectComments();
          this.lastMarker.index = this.scanner.index;
          this.lastMarker.line = this.scanner.lineNumber;
          this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
          return this.finalize(node, new JSXNode.JSXEmptyExpression());
        };

        JSXParser.prototype.parseJSXExpressionContainer = function () {
          var node = this.createJSXNode();
          this.expectJSX('{');
          var expression;

          if (this.matchJSX('}')) {
            expression = this.parseJSXEmptyExpression();
            this.expectJSX('}');
          } else {
            this.finishJSX();
            expression = this.parseAssignmentExpression();
            this.reenterJSX();
          }

          return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
        };

        JSXParser.prototype.parseJSXChildren = function () {
          var children = [];

          while (!this.scanner.eof()) {
            var node = this.createJSXChildNode();
            var token = this.nextJSXText();

            if (token.start < token.end) {
              var raw = this.getTokenRaw(token);
              var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));
              children.push(child);
            }

            if (this.scanner.source[this.scanner.index] === '{') {
              var container = this.parseJSXExpressionContainer();
              children.push(container);
            } else {
              break;
            }
          }

          return children;
        };

        JSXParser.prototype.parseComplexJSXElement = function (el) {
          var stack = [];

          while (!this.scanner.eof()) {
            el.children = el.children.concat(this.parseJSXChildren());
            var node = this.createJSXChildNode();
            var element = this.parseJSXBoundaryElement();

            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {
              var opening = element;

              if (opening.selfClosing) {
                var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));
                el.children.push(child);
              } else {
                stack.push(el);
                el = {
                  node: node,
                  opening: opening,
                  closing: null,
                  children: []
                };
              }
            }

            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {
              el.closing = element;
              var open_1 = getQualifiedElementName(el.opening.name);
              var close_1 = getQualifiedElementName(el.closing.name);

              if (open_1 !== close_1) {
                this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);
              }

              if (stack.length > 0) {
                var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));
                el = stack[stack.length - 1];
                el.children.push(child);
                stack.pop();
              } else {
                break;
              }
            }
          }

          return el;
        };

        JSXParser.prototype.parseJSXElement = function () {
          var node = this.createJSXNode();
          var opening = this.parseJSXOpeningElement();
          var children = [];
          var closing = null;

          if (!opening.selfClosing) {
            var el = this.parseComplexJSXElement({
              node: node,
              opening: opening,
              closing: closing,
              children: children
            });
            children = el.children;
            closing = el.closing;
          }

          return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));
        };

        JSXParser.prototype.parseJSXRoot = function () {
          // Pop the opening '<' added from the lookahead.
          if (this.config.tokens) {
            this.tokens.pop();
          }

          this.startJSX();
          var element = this.parseJSXElement();
          this.finishJSX();
          return element;
        };

        JSXParser.prototype.isStartOfExpression = function () {
          return _super.prototype.isStartOfExpression.call(this) || this.match('<');
        };

        return JSXParser;
      }(parser_1.Parser);

      exports.JSXParser = JSXParser;
      /***/
    },
    /* 4 */

    /***/
    function (module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      }); // See also tools/generate-unicode-regex.js.

      var Regex = {
        // Unicode v8.0.0 NonAsciiIdentifierStart:
        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
        // Unicode v8.0.0 NonAsciiIdentifierPart:
        NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
      };
      exports.Character = {
        /* tslint:disable:no-bitwise */
        fromCodePoint: function (cp) {
          return cp < 0x10000 ? String.fromCharCode(cp) : String.fromCharCode(0xD800 + (cp - 0x10000 >> 10)) + String.fromCharCode(0xDC00 + (cp - 0x10000 & 1023));
        },
        // https://tc39.github.io/ecma262/#sec-white-space
        isWhiteSpace: function (cp) {
          return cp === 0x20 || cp === 0x09 || cp === 0x0B || cp === 0x0C || cp === 0xA0 || cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0;
        },
        // https://tc39.github.io/ecma262/#sec-line-terminators
        isLineTerminator: function (cp) {
          return cp === 0x0A || cp === 0x0D || cp === 0x2028 || cp === 0x2029;
        },
        // https://tc39.github.io/ecma262/#sec-names-and-keywords
        isIdentifierStart: function (cp) {
          return cp === 0x24 || cp === 0x5F || cp >= 0x41 && cp <= 0x5A || cp >= 0x61 && cp <= 0x7A || cp === 0x5C || cp >= 0x80 && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp));
        },
        isIdentifierPart: function (cp) {
          return cp === 0x24 || cp === 0x5F || cp >= 0x41 && cp <= 0x5A || cp >= 0x61 && cp <= 0x7A || cp >= 0x30 && cp <= 0x39 || cp === 0x5C || cp >= 0x80 && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp));
        },
        // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
        isDecimalDigit: function (cp) {
          return cp >= 0x30 && cp <= 0x39; // 0..9
        },
        isHexDigit: function (cp) {
          return cp >= 0x30 && cp <= 0x39 || cp >= 0x41 && cp <= 0x46 || cp >= 0x61 && cp <= 0x66; // a..f
        },
        isOctalDigit: function (cp) {
          return cp >= 0x30 && cp <= 0x37; // 0..7
        }
      };
      /***/
    },
    /* 5 */

    /***/
    function (module, exports, __nested_webpack_require_55631__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var jsx_syntax_1 = __nested_webpack_require_55631__(6);
      /* tslint:disable:max-classes-per-file */


      var JSXClosingElement = function () {
        function JSXClosingElement(name) {
          this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;
          this.name = name;
        }

        return JSXClosingElement;
      }();

      exports.JSXClosingElement = JSXClosingElement;

      var JSXElement = function () {
        function JSXElement(openingElement, children, closingElement) {
          this.type = jsx_syntax_1.JSXSyntax.JSXElement;
          this.openingElement = openingElement;
          this.children = children;
          this.closingElement = closingElement;
        }

        return JSXElement;
      }();

      exports.JSXElement = JSXElement;

      var JSXEmptyExpression = function () {
        function JSXEmptyExpression() {
          this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;
        }

        return JSXEmptyExpression;
      }();

      exports.JSXEmptyExpression = JSXEmptyExpression;

      var JSXExpressionContainer = function () {
        function JSXExpressionContainer(expression) {
          this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;
          this.expression = expression;
        }

        return JSXExpressionContainer;
      }();

      exports.JSXExpressionContainer = JSXExpressionContainer;

      var JSXIdentifier = function () {
        function JSXIdentifier(name) {
          this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;
          this.name = name;
        }

        return JSXIdentifier;
      }();

      exports.JSXIdentifier = JSXIdentifier;

      var JSXMemberExpression = function () {
        function JSXMemberExpression(object, property) {
          this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;
          this.object = object;
          this.property = property;
        }

        return JSXMemberExpression;
      }();

      exports.JSXMemberExpression = JSXMemberExpression;

      var JSXAttribute = function () {
        function JSXAttribute(name, value) {
          this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;
          this.name = name;
          this.value = value;
        }

        return JSXAttribute;
      }();

      exports.JSXAttribute = JSXAttribute;

      var JSXNamespacedName = function () {
        function JSXNamespacedName(namespace, name) {
          this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;
          this.namespace = namespace;
          this.name = name;
        }

        return JSXNamespacedName;
      }();

      exports.JSXNamespacedName = JSXNamespacedName;

      var JSXOpeningElement = function () {
        function JSXOpeningElement(name, selfClosing, attributes) {
          this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;
          this.name = name;
          this.selfClosing = selfClosing;
          this.attributes = attributes;
        }

        return JSXOpeningElement;
      }();

      exports.JSXOpeningElement = JSXOpeningElement;

      var JSXSpreadAttribute = function () {
        function JSXSpreadAttribute(argument) {
          this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;
          this.argument = argument;
        }

        return JSXSpreadAttribute;
      }();

      exports.JSXSpreadAttribute = JSXSpreadAttribute;

      var JSXText = function () {
        function JSXText(value, raw) {
          this.type = jsx_syntax_1.JSXSyntax.JSXText;
          this.value = value;
          this.raw = raw;
        }

        return JSXText;
      }();

      exports.JSXText = JSXText;
      /***/
    },
    /* 6 */

    /***/
    function (module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.JSXSyntax = {
        JSXAttribute: 'JSXAttribute',
        JSXClosingElement: 'JSXClosingElement',
        JSXElement: 'JSXElement',
        JSXEmptyExpression: 'JSXEmptyExpression',
        JSXExpressionContainer: 'JSXExpressionContainer',
        JSXIdentifier: 'JSXIdentifier',
        JSXMemberExpression: 'JSXMemberExpression',
        JSXNamespacedName: 'JSXNamespacedName',
        JSXOpeningElement: 'JSXOpeningElement',
        JSXSpreadAttribute: 'JSXSpreadAttribute',
        JSXText: 'JSXText'
      };
      /***/
    },
    /* 7 */

    /***/
    function (module, exports, __nested_webpack_require_60144__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var syntax_1 = __nested_webpack_require_60144__(2);
      /* tslint:disable:max-classes-per-file */


      var ArrayExpression = function () {
        function ArrayExpression(elements) {
          this.type = syntax_1.Syntax.ArrayExpression;
          this.elements = elements;
        }

        return ArrayExpression;
      }();

      exports.ArrayExpression = ArrayExpression;

      var ArrayPattern = function () {
        function ArrayPattern(elements) {
          this.type = syntax_1.Syntax.ArrayPattern;
          this.elements = elements;
        }

        return ArrayPattern;
      }();

      exports.ArrayPattern = ArrayPattern;

      var ArrowFunctionExpression = function () {
        function ArrowFunctionExpression(params, body, expression) {
          this.type = syntax_1.Syntax.ArrowFunctionExpression;
          this.id = null;
          this.params = params;
          this.body = body;
          this.generator = false;
          this.expression = expression;
          this.async = false;
        }

        return ArrowFunctionExpression;
      }();

      exports.ArrowFunctionExpression = ArrowFunctionExpression;

      var AssignmentExpression = function () {
        function AssignmentExpression(operator, left, right) {
          this.type = syntax_1.Syntax.AssignmentExpression;
          this.operator = operator;
          this.left = left;
          this.right = right;
        }

        return AssignmentExpression;
      }();

      exports.AssignmentExpression = AssignmentExpression;

      var AssignmentPattern = function () {
        function AssignmentPattern(left, right) {
          this.type = syntax_1.Syntax.AssignmentPattern;
          this.left = left;
          this.right = right;
        }

        return AssignmentPattern;
      }();

      exports.AssignmentPattern = AssignmentPattern;

      var AsyncArrowFunctionExpression = function () {
        function AsyncArrowFunctionExpression(params, body, expression) {
          this.type = syntax_1.Syntax.ArrowFunctionExpression;
          this.id = null;
          this.params = params;
          this.body = body;
          this.generator = false;
          this.expression = expression;
          this.async = true;
        }

        return AsyncArrowFunctionExpression;
      }();

      exports.AsyncArrowFunctionExpression = AsyncArrowFunctionExpression;

      var AsyncFunctionDeclaration = function () {
        function AsyncFunctionDeclaration(id, params, body) {
          this.type = syntax_1.Syntax.FunctionDeclaration;
          this.id = id;
          this.params = params;
          this.body = body;
          this.generator = false;
          this.expression = false;
          this.async = true;
        }

        return AsyncFunctionDeclaration;
      }();

      exports.AsyncFunctionDeclaration = AsyncFunctionDeclaration;

      var AsyncFunctionExpression = function () {
        function AsyncFunctionExpression(id, params, body) {
          this.type = syntax_1.Syntax.FunctionExpression;
          this.id = id;
          this.params = params;
          this.body = body;
          this.generator = false;
          this.expression = false;
          this.async = true;
        }

        return AsyncFunctionExpression;
      }();

      exports.AsyncFunctionExpression = AsyncFunctionExpression;

      var AwaitExpression = function () {
        function AwaitExpression(argument) {
          this.type = syntax_1.Syntax.AwaitExpression;
          this.argument = argument;
        }

        return AwaitExpression;
      }();

      exports.AwaitExpression = AwaitExpression;

      var BinaryExpression = function () {
        function BinaryExpression(operator, left, right) {
          var logical = operator === '||' || operator === '&&';
          this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;
          this.operator = operator;
          this.left = left;
          this.right = right;
        }

        return BinaryExpression;
      }();

      exports.BinaryExpression = BinaryExpression;

      var BlockStatement = function () {
        function BlockStatement(body) {
          this.type = syntax_1.Syntax.BlockStatement;
          this.body = body;
        }

        return BlockStatement;
      }();

      exports.BlockStatement = BlockStatement;

      var BreakStatement = function () {
        function BreakStatement(label) {
          this.type = syntax_1.Syntax.BreakStatement;
          this.label = label;
        }

        return BreakStatement;
      }();

      exports.BreakStatement = BreakStatement;

      var CallExpression = function () {
        function CallExpression(callee, args) {
          this.type = syntax_1.Syntax.CallExpression;
          this.callee = callee;
          this.arguments = args;
        }

        return CallExpression;
      }();

      exports.CallExpression = CallExpression;

      var CatchClause = function () {
        function CatchClause(param, body) {
          this.type = syntax_1.Syntax.CatchClause;
          this.param = param;
          this.body = body;
        }

        return CatchClause;
      }();

      exports.CatchClause = CatchClause;

      var ClassBody = function () {
        function ClassBody(body) {
          this.type = syntax_1.Syntax.ClassBody;
          this.body = body;
        }

        return ClassBody;
      }();

      exports.ClassBody = ClassBody;

      var ClassDeclaration = function () {
        function ClassDeclaration(id, superClass, body) {
          this.type = syntax_1.Syntax.ClassDeclaration;
          this.id = id;
          this.superClass = superClass;
          this.body = body;
        }

        return ClassDeclaration;
      }();

      exports.ClassDeclaration = ClassDeclaration;

      var ClassExpression = function () {
        function ClassExpression(id, superClass, body) {
          this.type = syntax_1.Syntax.ClassExpression;
          this.id = id;
          this.superClass = superClass;
          this.body = body;
        }

        return ClassExpression;
      }();

      exports.ClassExpression = ClassExpression;

      var ComputedMemberExpression = function () {
        function ComputedMemberExpression(object, property) {
          this.type = syntax_1.Syntax.MemberExpression;
          this.computed = true;
          this.object = object;
          this.property = property;
        }

        return ComputedMemberExpression;
      }();

      exports.ComputedMemberExpression = ComputedMemberExpression;

      var ConditionalExpression = function () {
        function ConditionalExpression(test, consequent, alternate) {
          this.type = syntax_1.Syntax.ConditionalExpression;
          this.test = test;
          this.consequent = consequent;
          this.alternate = alternate;
        }

        return ConditionalExpression;
      }();

      exports.ConditionalExpression = ConditionalExpression;

      var ContinueStatement = function () {
        function ContinueStatement(label) {
          this.type = syntax_1.Syntax.ContinueStatement;
          this.label = label;
        }

        return ContinueStatement;
      }();

      exports.ContinueStatement = ContinueStatement;

      var DebuggerStatement = function () {
        function DebuggerStatement() {
          this.type = syntax_1.Syntax.DebuggerStatement;
        }

        return DebuggerStatement;
      }();

      exports.DebuggerStatement = DebuggerStatement;

      var Directive = function () {
        function Directive(expression, directive) {
          this.type = syntax_1.Syntax.ExpressionStatement;
          this.expression = expression;
          this.directive = directive;
        }

        return Directive;
      }();

      exports.Directive = Directive;

      var DoWhileStatement = function () {
        function DoWhileStatement(body, test) {
          this.type = syntax_1.Syntax.DoWhileStatement;
          this.body = body;
          this.test = test;
        }

        return DoWhileStatement;
      }();

      exports.DoWhileStatement = DoWhileStatement;

      var EmptyStatement = function () {
        function EmptyStatement() {
          this.type = syntax_1.Syntax.EmptyStatement;
        }

        return EmptyStatement;
      }();

      exports.EmptyStatement = EmptyStatement;

      var ExportAllDeclaration = function () {
        function ExportAllDeclaration(source) {
          this.type = syntax_1.Syntax.ExportAllDeclaration;
          this.source = source;
        }

        return ExportAllDeclaration;
      }();

      exports.ExportAllDeclaration = ExportAllDeclaration;

      var ExportDefaultDeclaration = function () {
        function ExportDefaultDeclaration(declaration) {
          this.type = syntax_1.Syntax.ExportDefaultDeclaration;
          this.declaration = declaration;
        }

        return ExportDefaultDeclaration;
      }();

      exports.ExportDefaultDeclaration = ExportDefaultDeclaration;

      var ExportNamedDeclaration = function () {
        function ExportNamedDeclaration(declaration, specifiers, source) {
          this.type = syntax_1.Syntax.ExportNamedDeclaration;
          this.declaration = declaration;
          this.specifiers = specifiers;
          this.source = source;
        }

        return ExportNamedDeclaration;
      }();

      exports.ExportNamedDeclaration = ExportNamedDeclaration;

      var ExportSpecifier = function () {
        function ExportSpecifier(local, exported) {
          this.type = syntax_1.Syntax.ExportSpecifier;
          this.exported = exported;
          this.local = local;
        }

        return ExportSpecifier;
      }();

      exports.ExportSpecifier = ExportSpecifier;

      var ExpressionStatement = function () {
        function ExpressionStatement(expression) {
          this.type = syntax_1.Syntax.ExpressionStatement;
          this.expression = expression;
        }

        return ExpressionStatement;
      }();

      exports.ExpressionStatement = ExpressionStatement;

      var ForInStatement = function () {
        function ForInStatement(left, right, body) {
          this.type = syntax_1.Syntax.ForInStatement;
          this.left = left;
          this.right = right;
          this.body = body;
          this.each = false;
        }

        return ForInStatement;
      }();

      exports.ForInStatement = ForInStatement;

      var ForOfStatement = function () {
        function ForOfStatement(left, right, body) {
          this.type = syntax_1.Syntax.ForOfStatement;
          this.left = left;
          this.right = right;
          this.body = body;
        }

        return ForOfStatement;
      }();

      exports.ForOfStatement = ForOfStatement;

      var ForStatement = function () {
        function ForStatement(init, test, update, body) {
          this.type = syntax_1.Syntax.ForStatement;
          this.init = init;
          this.test = test;
          this.update = update;
          this.body = body;
        }

        return ForStatement;
      }();

      exports.ForStatement = ForStatement;

      var FunctionDeclaration = function () {
        function FunctionDeclaration(id, params, body, generator) {
          this.type = syntax_1.Syntax.FunctionDeclaration;
          this.id = id;
          this.params = params;
          this.body = body;
          this.generator = generator;
          this.expression = false;
          this.async = false;
        }

        return FunctionDeclaration;
      }();

      exports.FunctionDeclaration = FunctionDeclaration;

      var FunctionExpression = function () {
        function FunctionExpression(id, params, body, generator) {
          this.type = syntax_1.Syntax.FunctionExpression;
          this.id = id;
          this.params = params;
          this.body = body;
          this.generator = generator;
          this.expression = false;
          this.async = false;
        }

        return FunctionExpression;
      }();

      exports.FunctionExpression = FunctionExpression;

      var Identifier = function () {
        function Identifier(name) {
          this.type = syntax_1.Syntax.Identifier;
          this.name = name;
        }

        return Identifier;
      }();

      exports.Identifier = Identifier;

      var IfStatement = function () {
        function IfStatement(test, consequent, alternate) {
          this.type = syntax_1.Syntax.IfStatement;
          this.test = test;
          this.consequent = consequent;
          this.alternate = alternate;
        }

        return IfStatement;
      }();

      exports.IfStatement = IfStatement;

      var ImportDeclaration = function () {
        function ImportDeclaration(specifiers, source) {
          this.type = syntax_1.Syntax.ImportDeclaration;
          this.specifiers = specifiers;
          this.source = source;
        }

        return ImportDeclaration;
      }();

      exports.ImportDeclaration = ImportDeclaration;

      var ImportDefaultSpecifier = function () {
        function ImportDefaultSpecifier(local) {
          this.type = syntax_1.Syntax.ImportDefaultSpecifier;
          this.local = local;
        }

        return ImportDefaultSpecifier;
      }();

      exports.ImportDefaultSpecifier = ImportDefaultSpecifier;

      var ImportNamespaceSpecifier = function () {
        function ImportNamespaceSpecifier(local) {
          this.type = syntax_1.Syntax.ImportNamespaceSpecifier;
          this.local = local;
        }

        return ImportNamespaceSpecifier;
      }();

      exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;

      var ImportSpecifier = function () {
        function ImportSpecifier(local, imported) {
          this.type = syntax_1.Syntax.ImportSpecifier;
          this.local = local;
          this.imported = imported;
        }

        return ImportSpecifier;
      }();

      exports.ImportSpecifier = ImportSpecifier;

      var LabeledStatement = function () {
        function LabeledStatement(label, body) {
          this.type = syntax_1.Syntax.LabeledStatement;
          this.label = label;
          this.body = body;
        }

        return LabeledStatement;
      }();

      exports.LabeledStatement = LabeledStatement;

      var Literal = function () {
        function Literal(value, raw) {
          this.type = syntax_1.Syntax.Literal;
          this.value = value;
          this.raw = raw;
        }

        return Literal;
      }();

      exports.Literal = Literal;

      var MetaProperty = function () {
        function MetaProperty(meta, property) {
          this.type = syntax_1.Syntax.MetaProperty;
          this.meta = meta;
          this.property = property;
        }

        return MetaProperty;
      }();

      exports.MetaProperty = MetaProperty;

      var MethodDefinition = function () {
        function MethodDefinition(key, computed, value, kind, isStatic) {
          this.type = syntax_1.Syntax.MethodDefinition;
          this.key = key;
          this.computed = computed;
          this.value = value;
          this.kind = kind;
          this.static = isStatic;
        }

        return MethodDefinition;
      }();

      exports.MethodDefinition = MethodDefinition;

      var Module = function () {
        function Module(body) {
          this.type = syntax_1.Syntax.Program;
          this.body = body;
          this.sourceType = 'module';
        }

        return Module;
      }();

      exports.Module = Module;

      var NewExpression = function () {
        function NewExpression(callee, args) {
          this.type = syntax_1.Syntax.NewExpression;
          this.callee = callee;
          this.arguments = args;
        }

        return NewExpression;
      }();

      exports.NewExpression = NewExpression;

      var ObjectExpression = function () {
        function ObjectExpression(properties) {
          this.type = syntax_1.Syntax.ObjectExpression;
          this.properties = properties;
        }

        return ObjectExpression;
      }();

      exports.ObjectExpression = ObjectExpression;

      var ObjectPattern = function () {
        function ObjectPattern(properties) {
          this.type = syntax_1.Syntax.ObjectPattern;
          this.properties = properties;
        }

        return ObjectPattern;
      }();

      exports.ObjectPattern = ObjectPattern;

      var Property = function () {
        function Property(kind, key, computed, value, method, shorthand) {
          this.type = syntax_1.Syntax.Property;
          this.key = key;
          this.computed = computed;
          this.value = value;
          this.kind = kind;
          this.method = method;
          this.shorthand = shorthand;
        }

        return Property;
      }();

      exports.Property = Property;

      var RegexLiteral = function () {
        function RegexLiteral(value, raw, pattern, flags) {
          this.type = syntax_1.Syntax.Literal;
          this.value = value;
          this.raw = raw;
          this.regex = {
            pattern: pattern,
            flags: flags
          };
        }

        return RegexLiteral;
      }();

      exports.RegexLiteral = RegexLiteral;

      var RestElement = function () {
        function RestElement(argument) {
          this.type = syntax_1.Syntax.RestElement;
          this.argument = argument;
        }

        return RestElement;
      }();

      exports.RestElement = RestElement;

      var ReturnStatement = function () {
        function ReturnStatement(argument) {
          this.type = syntax_1.Syntax.ReturnStatement;
          this.argument = argument;
        }

        return ReturnStatement;
      }();

      exports.ReturnStatement = ReturnStatement;

      var Script = function () {
        function Script(body) {
          this.type = syntax_1.Syntax.Program;
          this.body = body;
          this.sourceType = 'script';
        }

        return Script;
      }();

      exports.Script = Script;

      var SequenceExpression = function () {
        function SequenceExpression(expressions) {
          this.type = syntax_1.Syntax.SequenceExpression;
          this.expressions = expressions;
        }

        return SequenceExpression;
      }();

      exports.SequenceExpression = SequenceExpression;

      var SpreadElement = function () {
        function SpreadElement(argument) {
          this.type = syntax_1.Syntax.SpreadElement;
          this.argument = argument;
        }

        return SpreadElement;
      }();

      exports.SpreadElement = SpreadElement;

      var StaticMemberExpression = function () {
        function StaticMemberExpression(object, property) {
          this.type = syntax_1.Syntax.MemberExpression;
          this.computed = false;
          this.object = object;
          this.property = property;
        }

        return StaticMemberExpression;
      }();

      exports.StaticMemberExpression = StaticMemberExpression;

      var Super = function () {
        function Super() {
          this.type = syntax_1.Syntax.Super;
        }

        return Super;
      }();

      exports.Super = Super;

      var SwitchCase = function () {
        function SwitchCase(test, consequent) {
          this.type = syntax_1.Syntax.SwitchCase;
          this.test = test;
          this.consequent = consequent;
        }

        return SwitchCase;
      }();

      exports.SwitchCase = SwitchCase;

      var SwitchStatement = function () {
        function SwitchStatement(discriminant, cases) {
          this.type = syntax_1.Syntax.SwitchStatement;
          this.discriminant = discriminant;
          this.cases = cases;
        }

        return SwitchStatement;
      }();

      exports.SwitchStatement = SwitchStatement;

      var TaggedTemplateExpression = function () {
        function TaggedTemplateExpression(tag, quasi) {
          this.type = syntax_1.Syntax.TaggedTemplateExpression;
          this.tag = tag;
          this.quasi = quasi;
        }

        return TaggedTemplateExpression;
      }();

      exports.TaggedTemplateExpression = TaggedTemplateExpression;

      var TemplateElement = function () {
        function TemplateElement(value, tail) {
          this.type = syntax_1.Syntax.TemplateElement;
          this.value = value;
          this.tail = tail;
        }

        return TemplateElement;
      }();

      exports.TemplateElement = TemplateElement;

      var TemplateLiteral = function () {
        function TemplateLiteral(quasis, expressions) {
          this.type = syntax_1.Syntax.TemplateLiteral;
          this.quasis = quasis;
          this.expressions = expressions;
        }

        return TemplateLiteral;
      }();

      exports.TemplateLiteral = TemplateLiteral;

      var ThisExpression = function () {
        function ThisExpression() {
          this.type = syntax_1.Syntax.ThisExpression;
        }

        return ThisExpression;
      }();

      exports.ThisExpression = ThisExpression;

      var ThrowStatement = function () {
        function ThrowStatement(argument) {
          this.type = syntax_1.Syntax.ThrowStatement;
          this.argument = argument;
        }

        return ThrowStatement;
      }();

      exports.ThrowStatement = ThrowStatement;

      var TryStatement = function () {
        function TryStatement(block, handler, finalizer) {
          this.type = syntax_1.Syntax.TryStatement;
          this.block = block;
          this.handler = handler;
          this.finalizer = finalizer;
        }

        return TryStatement;
      }();

      exports.TryStatement = TryStatement;

      var UnaryExpression = function () {
        function UnaryExpression(operator, argument) {
          this.type = syntax_1.Syntax.UnaryExpression;
          this.operator = operator;
          this.argument = argument;
          this.prefix = true;
        }

        return UnaryExpression;
      }();

      exports.UnaryExpression = UnaryExpression;

      var UpdateExpression = function () {
        function UpdateExpression(operator, argument, prefix) {
          this.type = syntax_1.Syntax.UpdateExpression;
          this.operator = operator;
          this.argument = argument;
          this.prefix = prefix;
        }

        return UpdateExpression;
      }();

      exports.UpdateExpression = UpdateExpression;

      var VariableDeclaration = function () {
        function VariableDeclaration(declarations, kind) {
          this.type = syntax_1.Syntax.VariableDeclaration;
          this.declarations = declarations;
          this.kind = kind;
        }

        return VariableDeclaration;
      }();

      exports.VariableDeclaration = VariableDeclaration;

      var VariableDeclarator = function () {
        function VariableDeclarator(id, init) {
          this.type = syntax_1.Syntax.VariableDeclarator;
          this.id = id;
          this.init = init;
        }

        return VariableDeclarator;
      }();

      exports.VariableDeclarator = VariableDeclarator;

      var WhileStatement = function () {
        function WhileStatement(test, body) {
          this.type = syntax_1.Syntax.WhileStatement;
          this.test = test;
          this.body = body;
        }

        return WhileStatement;
      }();

      exports.WhileStatement = WhileStatement;

      var WithStatement = function () {
        function WithStatement(object, body) {
          this.type = syntax_1.Syntax.WithStatement;
          this.object = object;
          this.body = body;
        }

        return WithStatement;
      }();

      exports.WithStatement = WithStatement;

      var YieldExpression = function () {
        function YieldExpression(argument, delegate) {
          this.type = syntax_1.Syntax.YieldExpression;
          this.argument = argument;
          this.delegate = delegate;
        }

        return YieldExpression;
      }();

      exports.YieldExpression = YieldExpression;
      /***/
    },
    /* 8 */

    /***/
    function (module, exports, __nested_webpack_require_84347__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var assert_1 = __nested_webpack_require_84347__(9);

      var error_handler_1 = __nested_webpack_require_84347__(10);

      var messages_1 = __nested_webpack_require_84347__(11);

      var Node = __nested_webpack_require_84347__(7);

      var scanner_1 = __nested_webpack_require_84347__(12);

      var syntax_1 = __nested_webpack_require_84347__(2);

      var token_1 = __nested_webpack_require_84347__(13);

      var ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';

      var Parser = function () {
        function Parser(code, options, delegate) {
          if (options === void 0) {
            options = {};
          }

          this.config = {
            range: typeof options.range === 'boolean' && options.range,
            loc: typeof options.loc === 'boolean' && options.loc,
            source: null,
            tokens: typeof options.tokens === 'boolean' && options.tokens,
            comment: typeof options.comment === 'boolean' && options.comment,
            tolerant: typeof options.tolerant === 'boolean' && options.tolerant
          };

          if (this.config.loc && options.source && options.source !== null) {
            this.config.source = String(options.source);
          }

          this.delegate = delegate;
          this.errorHandler = new error_handler_1.ErrorHandler();
          this.errorHandler.tolerant = this.config.tolerant;
          this.scanner = new scanner_1.Scanner(code, this.errorHandler);
          this.scanner.trackComment = this.config.comment;
          this.operatorPrecedence = {
            ')': 0,
            ';': 0,
            ',': 0,
            '=': 0,
            ']': 0,
            '||': 1,
            '&&': 2,
            '|': 3,
            '^': 4,
            '&': 5,
            '==': 6,
            '!=': 6,
            '===': 6,
            '!==': 6,
            '<': 7,
            '>': 7,
            '<=': 7,
            '>=': 7,
            '<<': 8,
            '>>': 8,
            '>>>': 8,
            '+': 9,
            '-': 9,
            '*': 11,
            '/': 11,
            '%': 11
          };
          this.lookahead = {
            type: 2
            /* EOF */
            ,
            value: '',
            lineNumber: this.scanner.lineNumber,
            lineStart: 0,
            start: 0,
            end: 0
          };
          this.hasLineTerminator = false;
          this.context = {
            isModule: false,
            await: false,
            allowIn: true,
            allowStrictDirective: true,
            allowYield: true,
            firstCoverInitializedNameError: null,
            isAssignmentTarget: false,
            isBindingElement: false,
            inFunctionBody: false,
            inIteration: false,
            inSwitch: false,
            labelSet: {},
            strict: false
          };
          this.tokens = [];
          this.startMarker = {
            index: 0,
            line: this.scanner.lineNumber,
            column: 0
          };
          this.lastMarker = {
            index: 0,
            line: this.scanner.lineNumber,
            column: 0
          };
          this.nextToken();
          this.lastMarker = {
            index: this.scanner.index,
            line: this.scanner.lineNumber,
            column: this.scanner.index - this.scanner.lineStart
          };
        }

        Parser.prototype.throwError = function (messageFormat) {
          var values = [];

          for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
          }

          var args = Array.prototype.slice.call(arguments, 1);
          var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
            assert_1.assert(idx < args.length, 'Message reference must be in range');
            return args[idx];
          });
          var index = this.lastMarker.index;
          var line = this.lastMarker.line;
          var column = this.lastMarker.column + 1;
          throw this.errorHandler.createError(index, line, column, msg);
        };

        Parser.prototype.tolerateError = function (messageFormat) {
          var values = [];

          for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
          }

          var args = Array.prototype.slice.call(arguments, 1);
          var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
            assert_1.assert(idx < args.length, 'Message reference must be in range');
            return args[idx];
          });
          var index = this.lastMarker.index;
          var line = this.scanner.lineNumber;
          var column = this.lastMarker.column + 1;
          this.errorHandler.tolerateError(index, line, column, msg);
        }; // Throw an exception because of the token.


        Parser.prototype.unexpectedTokenError = function (token, message) {
          var msg = message || messages_1.Messages.UnexpectedToken;
          var value;

          if (token) {
            if (!message) {
              msg = token.type === 2
              /* EOF */
              ? messages_1.Messages.UnexpectedEOS : token.type === 3
              /* Identifier */
              ? messages_1.Messages.UnexpectedIdentifier : token.type === 6
              /* NumericLiteral */
              ? messages_1.Messages.UnexpectedNumber : token.type === 8
              /* StringLiteral */
              ? messages_1.Messages.UnexpectedString : token.type === 10
              /* Template */
              ? messages_1.Messages.UnexpectedTemplate : messages_1.Messages.UnexpectedToken;

              if (token.type === 4
              /* Keyword */
              ) {
                if (this.scanner.isFutureReservedWord(token.value)) {
                  msg = messages_1.Messages.UnexpectedReserved;
                } else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {
                  msg = messages_1.Messages.StrictReservedWord;
                }
              }
            }

            value = token.value;
          } else {
            value = 'ILLEGAL';
          }

          msg = msg.replace('%0', value);

          if (token && typeof token.lineNumber === 'number') {
            var index = token.start;
            var line = token.lineNumber;
            var lastMarkerLineStart = this.lastMarker.index - this.lastMarker.column;
            var column = token.start - lastMarkerLineStart + 1;
            return this.errorHandler.createError(index, line, column, msg);
          } else {
            var index = this.lastMarker.index;
            var line = this.lastMarker.line;
            var column = this.lastMarker.column + 1;
            return this.errorHandler.createError(index, line, column, msg);
          }
        };

        Parser.prototype.throwUnexpectedToken = function (token, message) {
          throw this.unexpectedTokenError(token, message);
        };

        Parser.prototype.tolerateUnexpectedToken = function (token, message) {
          this.errorHandler.tolerate(this.unexpectedTokenError(token, message));
        };

        Parser.prototype.collectComments = function () {
          if (!this.config.comment) {
            this.scanner.scanComments();
          } else {
            var comments = this.scanner.scanComments();

            if (comments.length > 0 && this.delegate) {
              for (var i = 0; i < comments.length; ++i) {
                var e = comments[i];
                var node = void 0;
                node = {
                  type: e.multiLine ? 'BlockComment' : 'LineComment',
                  value: this.scanner.source.slice(e.slice[0], e.slice[1])
                };

                if (this.config.range) {
                  node.range = e.range;
                }

                if (this.config.loc) {
                  node.loc = e.loc;
                }

                var metadata = {
                  start: {
                    line: e.loc.start.line,
                    column: e.loc.start.column,
                    offset: e.range[0]
                  },
                  end: {
                    line: e.loc.end.line,
                    column: e.loc.end.column,
                    offset: e.range[1]
                  }
                };
                this.delegate(node, metadata);
              }
            }
          }
        }; // From internal representation to an external structure


        Parser.prototype.getTokenRaw = function (token) {
          return this.scanner.source.slice(token.start, token.end);
        };

        Parser.prototype.convertToken = function (token) {
          var t = {
            type: token_1.TokenName[token.type],
            value: this.getTokenRaw(token)
          };

          if (this.config.range) {
            t.range = [token.start, token.end];
          }

          if (this.config.loc) {
            t.loc = {
              start: {
                line: this.startMarker.line,
                column: this.startMarker.column
              },
              end: {
                line: this.scanner.lineNumber,
                column: this.scanner.index - this.scanner.lineStart
              }
            };
          }

          if (token.type === 9
          /* RegularExpression */
          ) {
            var pattern = token.pattern;
            var flags = token.flags;
            t.regex = {
              pattern: pattern,
              flags: flags
            };
          }

          return t;
        };

        Parser.prototype.nextToken = function () {
          var token = this.lookahead;
          this.lastMarker.index = this.scanner.index;
          this.lastMarker.line = this.scanner.lineNumber;
          this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
          this.collectComments();

          if (this.scanner.index !== this.startMarker.index) {
            this.startMarker.index = this.scanner.index;
            this.startMarker.line = this.scanner.lineNumber;
            this.startMarker.column = this.scanner.index - this.scanner.lineStart;
          }

          var next = this.scanner.lex();
          this.hasLineTerminator = token.lineNumber !== next.lineNumber;

          if (next && this.context.strict && next.type === 3
          /* Identifier */
          ) {
            if (this.scanner.isStrictModeReservedWord(next.value)) {
              next.type = 4
              /* Keyword */
              ;
            }
          }

          this.lookahead = next;

          if (this.config.tokens && next.type !== 2
          /* EOF */
          ) {
            this.tokens.push(this.convertToken(next));
          }

          return token;
        };

        Parser.prototype.nextRegexToken = function () {
          this.collectComments();
          var token = this.scanner.scanRegExp();

          if (this.config.tokens) {
            // Pop the previous token, '/' or '/='
            // This is added from the lookahead token.
            this.tokens.pop();
            this.tokens.push(this.convertToken(token));
          } // Prime the next lookahead.


          this.lookahead = token;
          this.nextToken();
          return token;
        };

        Parser.prototype.createNode = function () {
          return {
            index: this.startMarker.index,
            line: this.startMarker.line,
            column: this.startMarker.column
          };
        };

        Parser.prototype.startNode = function (token, lastLineStart) {
          if (lastLineStart === void 0) {
            lastLineStart = 0;
          }

          var column = token.start - token.lineStart;
          var line = token.lineNumber;

          if (column < 0) {
            column += lastLineStart;
            line--;
          }

          return {
            index: token.start,
            line: line,
            column: column
          };
        };

        Parser.prototype.finalize = function (marker, node) {
          if (this.config.range) {
            node.range = [marker.index, this.lastMarker.index];
          }

          if (this.config.loc) {
            node.loc = {
              start: {
                line: marker.line,
                column: marker.column
              },
              end: {
                line: this.lastMarker.line,
                column: this.lastMarker.column
              }
            };

            if (this.config.source) {
              node.loc.source = this.config.source;
            }
          }

          if (this.delegate) {
            var metadata = {
              start: {
                line: marker.line,
                column: marker.column,
                offset: marker.index
              },
              end: {
                line: this.lastMarker.line,
                column: this.lastMarker.column,
                offset: this.lastMarker.index
              }
            };
            this.delegate(node, metadata);
          }

          return node;
        }; // Expect the next token to match the specified punctuator.
        // If not, an exception will be thrown.


        Parser.prototype.expect = function (value) {
          var token = this.nextToken();

          if (token.type !== 7
          /* Punctuator */
          || token.value !== value) {
            this.throwUnexpectedToken(token);
          }
        }; // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().


        Parser.prototype.expectCommaSeparator = function () {
          if (this.config.tolerant) {
            var token = this.lookahead;

            if (token.type === 7
            /* Punctuator */
            && token.value === ',') {
              this.nextToken();
            } else if (token.type === 7
            /* Punctuator */
            && token.value === ';') {
              this.nextToken();
              this.tolerateUnexpectedToken(token);
            } else {
              this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);
            }
          } else {
            this.expect(',');
          }
        }; // Expect the next token to match the specified keyword.
        // If not, an exception will be thrown.


        Parser.prototype.expectKeyword = function (keyword) {
          var token = this.nextToken();

          if (token.type !== 4
          /* Keyword */
          || token.value !== keyword) {
            this.throwUnexpectedToken(token);
          }
        }; // Return true if the next token matches the specified punctuator.


        Parser.prototype.match = function (value) {
          return this.lookahead.type === 7
          /* Punctuator */
          && this.lookahead.value === value;
        }; // Return true if the next token matches the specified keyword


        Parser.prototype.matchKeyword = function (keyword) {
          return this.lookahead.type === 4
          /* Keyword */
          && this.lookahead.value === keyword;
        }; // Return true if the next token matches the specified contextual keyword
        // (where an identifier is sometimes a keyword depending on the context)


        Parser.prototype.matchContextualKeyword = function (keyword) {
          return this.lookahead.type === 3
          /* Identifier */
          && this.lookahead.value === keyword;
        }; // Return true if the next token is an assignment operator


        Parser.prototype.matchAssign = function () {
          if (this.lookahead.type !== 7
          /* Punctuator */
          ) {
            return false;
          }

          var op = this.lookahead.value;
          return op === '=' || op === '*=' || op === '**=' || op === '/=' || op === '%=' || op === '+=' || op === '-=' || op === '<<=' || op === '>>=' || op === '>>>=' || op === '&=' || op === '^=' || op === '|=';
        }; // Cover grammar support.
        //
        // When an assignment expression position starts with an left parenthesis, the determination of the type
        // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)
        // or the first comma. This situation also defers the determination of all the expressions nested in the pair.
        //
        // There are three productions that can be parsed in a parentheses pair that needs to be determined
        // after the outermost pair is closed. They are:
        //
        //   1. AssignmentExpression
        //   2. BindingElements
        //   3. AssignmentTargets
        //
        // In order to avoid exponential backtracking, we use two flags to denote if the production can be
        // binding element or assignment target.
        //
        // The three productions have the relationship:
        //
        //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression
        //
        // with a single exception that CoverInitializedName when used directly in an Expression, generates
        // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the
        // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.
        //
        // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not
        // effect the current flags. This means the production the parser parses is only used as an expression. Therefore
        // the CoverInitializedName check is conducted.
        //
        // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates
        // the flags outside of the parser. This means the production the parser parses is used as a part of a potential
        // pattern. The CoverInitializedName check is deferred.


        Parser.prototype.isolateCoverGrammar = function (parseFunction) {
          var previousIsBindingElement = this.context.isBindingElement;
          var previousIsAssignmentTarget = this.context.isAssignmentTarget;
          var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
          this.context.isBindingElement = true;
          this.context.isAssignmentTarget = true;
          this.context.firstCoverInitializedNameError = null;
          var result = parseFunction.call(this);

          if (this.context.firstCoverInitializedNameError !== null) {
            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);
          }

          this.context.isBindingElement = previousIsBindingElement;
          this.context.isAssignmentTarget = previousIsAssignmentTarget;
          this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;
          return result;
        };

        Parser.prototype.inheritCoverGrammar = function (parseFunction) {
          var previousIsBindingElement = this.context.isBindingElement;
          var previousIsAssignmentTarget = this.context.isAssignmentTarget;
          var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
          this.context.isBindingElement = true;
          this.context.isAssignmentTarget = true;
          this.context.firstCoverInitializedNameError = null;
          var result = parseFunction.call(this);
          this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;
          this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;
          this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;
          return result;
        };

        Parser.prototype.consumeSemicolon = function () {
          if (this.match(';')) {
            this.nextToken();
          } else if (!this.hasLineTerminator) {
            if (this.lookahead.type !== 2
            /* EOF */
            && !this.match('}')) {
              this.throwUnexpectedToken(this.lookahead);
            }

            this.lastMarker.index = this.startMarker.index;
            this.lastMarker.line = this.startMarker.line;
            this.lastMarker.column = this.startMarker.column;
          }
        }; // https://tc39.github.io/ecma262/#sec-primary-expression


        Parser.prototype.parsePrimaryExpression = function () {
          var node = this.createNode();
          var expr;
          var token, raw;

          switch (this.lookahead.type) {
            case 3
            /* Identifier */
            :
              if ((this.context.isModule || this.context.await) && this.lookahead.value === 'await') {
                this.tolerateUnexpectedToken(this.lookahead);
              }

              expr = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node, new Node.Identifier(this.nextToken().value));
              break;

            case 6
            /* NumericLiteral */
            :
            case 8
            /* StringLiteral */
            :
              if (this.context.strict && this.lookahead.octal) {
                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);
              }

              this.context.isAssignmentTarget = false;
              this.context.isBindingElement = false;
              token = this.nextToken();
              raw = this.getTokenRaw(token);
              expr = this.finalize(node, new Node.Literal(token.value, raw));
              break;

            case 1
            /* BooleanLiteral */
            :
              this.context.isAssignmentTarget = false;
              this.context.isBindingElement = false;
              token = this.nextToken();
              raw = this.getTokenRaw(token);
              expr = this.finalize(node, new Node.Literal(token.value === 'true', raw));
              break;

            case 5
            /* NullLiteral */
            :
              this.context.isAssignmentTarget = false;
              this.context.isBindingElement = false;
              token = this.nextToken();
              raw = this.getTokenRaw(token);
              expr = this.finalize(node, new Node.Literal(null, raw));
              break;

            case 10
            /* Template */
            :
              expr = this.parseTemplateLiteral();
              break;

            case 7
            /* Punctuator */
            :
              switch (this.lookahead.value) {
                case '(':
                  this.context.isBindingElement = false;
                  expr = this.inheritCoverGrammar(this.parseGroupExpression);
                  break;

                case '[':
                  expr = this.inheritCoverGrammar(this.parseArrayInitializer);
                  break;

                case '{':
                  expr = this.inheritCoverGrammar(this.parseObjectInitializer);
                  break;

                case '/':
                case '/=':
                  this.context.isAssignmentTarget = false;
                  this.context.isBindingElement = false;
                  this.scanner.index = this.startMarker.index;
                  token = this.nextRegexToken();
                  raw = this.getTokenRaw(token);
                  expr = this.finalize(node, new Node.RegexLiteral(token.regex, raw, token.pattern, token.flags));
                  break;

                default:
                  expr = this.throwUnexpectedToken(this.nextToken());
              }

              break;

            case 4
            /* Keyword */
            :
              if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {
                expr = this.parseIdentifierName();
              } else if (!this.context.strict && this.matchKeyword('let')) {
                expr = this.finalize(node, new Node.Identifier(this.nextToken().value));
              } else {
                this.context.isAssignmentTarget = false;
                this.context.isBindingElement = false;

                if (this.matchKeyword('function')) {
                  expr = this.parseFunctionExpression();
                } else if (this.matchKeyword('this')) {
                  this.nextToken();
                  expr = this.finalize(node, new Node.ThisExpression());
                } else if (this.matchKeyword('class')) {
                  expr = this.parseClassExpression();
                } else {
                  expr = this.throwUnexpectedToken(this.nextToken());
                }
              }

              break;

            default:
              expr = this.throwUnexpectedToken(this.nextToken());
          }

          return expr;
        }; // https://tc39.github.io/ecma262/#sec-array-initializer


        Parser.prototype.parseSpreadElement = function () {
          var node = this.createNode();
          this.expect('...');
          var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);
          return this.finalize(node, new Node.SpreadElement(arg));
        };

        Parser.prototype.parseArrayInitializer = function () {
          var node = this.createNode();
          var elements = [];
          this.expect('[');

          while (!this.match(']')) {
            if (this.match(',')) {
              this.nextToken();
              elements.push(null);
            } else if (this.match('...')) {
              var element = this.parseSpreadElement();

              if (!this.match(']')) {
                this.context.isAssignmentTarget = false;
                this.context.isBindingElement = false;
                this.expect(',');
              }

              elements.push(element);
            } else {
              elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));

              if (!this.match(']')) {
                this.expect(',');
              }
            }
          }

          this.expect(']');
          return this.finalize(node, new Node.ArrayExpression(elements));
        }; // https://tc39.github.io/ecma262/#sec-object-initializer


        Parser.prototype.parsePropertyMethod = function (params) {
          this.context.isAssignmentTarget = false;
          this.context.isBindingElement = false;
          var previousStrict = this.context.strict;
          var previousAllowStrictDirective = this.context.allowStrictDirective;
          this.context.allowStrictDirective = params.simple;
          var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);

          if (this.context.strict && params.firstRestricted) {
            this.tolerateUnexpectedToken(params.firstRestricted, params.message);
          }

          if (this.context.strict && params.stricted) {
            this.tolerateUnexpectedToken(params.stricted, params.message);
          }

          this.context.strict = previousStrict;
          this.context.allowStrictDirective = previousAllowStrictDirective;
          return body;
        };

        Parser.prototype.parsePropertyMethodFunction = function () {
          var isGenerator = false;
          var node = this.createNode();
          var previousAllowYield = this.context.allowYield;
          this.context.allowYield = true;
          var params = this.parseFormalParameters();
          var method = this.parsePropertyMethod(params);
          this.context.allowYield = previousAllowYield;
          return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
        };

        Parser.prototype.parsePropertyMethodAsyncFunction = function () {
          var node = this.createNode();
          var previousAllowYield = this.context.allowYield;
          var previousAwait = this.context.await;
          this.context.allowYield = false;
          this.context.await = true;
          var params = this.parseFormalParameters();
          var method = this.parsePropertyMethod(params);
          this.context.allowYield = previousAllowYield;
          this.context.await = previousAwait;
          return this.finalize(node, new Node.AsyncFunctionExpression(null, params.params, method));
        };

        Parser.prototype.parseObjectPropertyKey = function () {
          var node = this.createNode();
          var token = this.nextToken();
          var key;

          switch (token.type) {
            case 8
            /* StringLiteral */
            :
            case 6
            /* NumericLiteral */
            :
              if (this.context.strict && token.octal) {
                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);
              }

              var raw = this.getTokenRaw(token);
              key = this.finalize(node, new Node.Literal(token.value, raw));
              break;

            case 3
            /* Identifier */
            :
            case 1
            /* BooleanLiteral */
            :
            case 5
            /* NullLiteral */
            :
            case 4
            /* Keyword */
            :
              key = this.finalize(node, new Node.Identifier(token.value));
              break;

            case 7
            /* Punctuator */
            :
              if (token.value === '[') {
                key = this.isolateCoverGrammar(this.parseAssignmentExpression);
                this.expect(']');
              } else {
                key = this.throwUnexpectedToken(token);
              }

              break;

            default:
              key = this.throwUnexpectedToken(token);
          }

          return key;
        };

        Parser.prototype.isPropertyKey = function (key, value) {
          return key.type === syntax_1.Syntax.Identifier && key.name === value || key.type === syntax_1.Syntax.Literal && key.value === value;
        };

        Parser.prototype.parseObjectProperty = function (hasProto) {
          var node = this.createNode();
          var token = this.lookahead;
          var kind;
          var key = null;
          var value = null;
          var computed = false;
          var method = false;
          var shorthand = false;
          var isAsync = false;

          if (token.type === 3
          /* Identifier */
          ) {
            var id = token.value;
            this.nextToken();
            computed = this.match('[');
            isAsync = !this.hasLineTerminator && id === 'async' && !this.match(':') && !this.match('(') && !this.match('*') && !this.match(',');
            key = isAsync ? this.parseObjectPropertyKey() : this.finalize(node, new Node.Identifier(id));
          } else if (this.match('*')) {
            this.nextToken();
          } else {
            computed = this.match('[');
            key = this.parseObjectPropertyKey();
          }

          var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);

          if (token.type === 3
          /* Identifier */
          && !isAsync && token.value === 'get' && lookaheadPropertyKey) {
            kind = 'get';
            computed = this.match('[');
            key = this.parseObjectPropertyKey();
            this.context.allowYield = false;
            value = this.parseGetterMethod();
          } else if (token.type === 3
          /* Identifier */
          && !isAsync && token.value === 'set' && lookaheadPropertyKey) {
            kind = 'set';
            computed = this.match('[');
            key = this.parseObjectPropertyKey();
            value = this.parseSetterMethod();
          } else if (token.type === 7
          /* Punctuator */
          && token.value === '*' && lookaheadPropertyKey) {
            kind = 'init';
            computed = this.match('[');
            key = this.parseObjectPropertyKey();
            value = this.parseGeneratorMethod();
            method = true;
          } else {
            if (!key) {
              this.throwUnexpectedToken(this.lookahead);
            }

            kind = 'init';

            if (this.match(':') && !isAsync) {
              if (!computed && this.isPropertyKey(key, '__proto__')) {
                if (hasProto.value) {
                  this.tolerateError(messages_1.Messages.DuplicateProtoProperty);
                }

                hasProto.value = true;
              }

              this.nextToken();
              value = this.inheritCoverGrammar(this.parseAssignmentExpression);
            } else if (this.match('(')) {
              value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
              method = true;
            } else if (token.type === 3
            /* Identifier */
            ) {
              var id = this.finalize(node, new Node.Identifier(token.value));

              if (this.match('=')) {
                this.context.firstCoverInitializedNameError = this.lookahead;
                this.nextToken();
                shorthand = true;
                var init = this.isolateCoverGrammar(this.parseAssignmentExpression);
                value = this.finalize(node, new Node.AssignmentPattern(id, init));
              } else {
                shorthand = true;
                value = id;
              }
            } else {
              this.throwUnexpectedToken(this.nextToken());
            }
          }

          return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));
        };

        Parser.prototype.parseObjectInitializer = function () {
          var node = this.createNode();
          this.expect('{');
          var properties = [];
          var hasProto = {
            value: false
          };

          while (!this.match('}')) {
            properties.push(this.parseObjectProperty(hasProto));

            if (!this.match('}')) {
              this.expectCommaSeparator();
            }
          }

          this.expect('}');
          return this.finalize(node, new Node.ObjectExpression(properties));
        }; // https://tc39.github.io/ecma262/#sec-template-literals


        Parser.prototype.parseTemplateHead = function () {
          assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');
          var node = this.createNode();
          var token = this.nextToken();
          var raw = token.value;
          var cooked = token.cooked;
          return this.finalize(node, new Node.TemplateElement({
            raw: raw,
            cooked: cooked
          }, token.tail));
        };

        Parser.prototype.parseTemplateElement = function () {
          if (this.lookahead.type !== 10
          /* Template */
          ) {
            this.throwUnexpectedToken();
          }

          var node = this.createNode();
          var token = this.nextToken();
          var raw = token.value;
          var cooked = token.cooked;
          return this.finalize(node, new Node.TemplateElement({
            raw: raw,
            cooked: cooked
          }, token.tail));
        };

        Parser.prototype.parseTemplateLiteral = function () {
          var node = this.createNode();
          var expressions = [];
          var quasis = [];
          var quasi = this.parseTemplateHead();
          quasis.push(quasi);

          while (!quasi.tail) {
            expressions.push(this.parseExpression());
            quasi = this.parseTemplateElement();
            quasis.push(quasi);
          }

          return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));
        }; // https://tc39.github.io/ecma262/#sec-grouping-operator


        Parser.prototype.reinterpretExpressionAsPattern = function (expr) {
          switch (expr.type) {
            case syntax_1.Syntax.Identifier:
            case syntax_1.Syntax.MemberExpression:
            case syntax_1.Syntax.RestElement:
            case syntax_1.Syntax.AssignmentPattern:
              break;

            case syntax_1.Syntax.SpreadElement:
              expr.type = syntax_1.Syntax.RestElement;
              this.reinterpretExpressionAsPattern(expr.argument);
              break;

            case syntax_1.Syntax.ArrayExpression:
              expr.type = syntax_1.Syntax.ArrayPattern;

              for (var i = 0; i < expr.elements.length; i++) {
                if (expr.elements[i] !== null) {
                  this.reinterpretExpressionAsPattern(expr.elements[i]);
                }
              }

              break;

            case syntax_1.Syntax.ObjectExpression:
              expr.type = syntax_1.Syntax.ObjectPattern;

              for (var i = 0; i < expr.properties.length; i++) {
                this.reinterpretExpressionAsPattern(expr.properties[i].value);
              }

              break;

            case syntax_1.Syntax.AssignmentExpression:
              expr.type = syntax_1.Syntax.AssignmentPattern;
              delete expr.operator;
              this.reinterpretExpressionAsPattern(expr.left);
              break;

            default:
              // Allow other node type for tolerant parsing.
              break;
          }
        };

        Parser.prototype.parseGroupExpression = function () {
          var expr;
          this.expect('(');

          if (this.match(')')) {
            this.nextToken();

            if (!this.match('=>')) {
              this.expect('=>');
            }

            expr = {
              type: ArrowParameterPlaceHolder,
              params: [],
              async: false
            };
          } else {
            var startToken = this.lookahead;
            var params = [];

            if (this.match('...')) {
              expr = this.parseRestElement(params);
              this.expect(')');

              if (!this.match('=>')) {
                this.expect('=>');
              }

              expr = {
                type: ArrowParameterPlaceHolder,
                params: [expr],
                async: false
              };
            } else {
              var arrow = false;
              this.context.isBindingElement = true;
              expr = this.inheritCoverGrammar(this.parseAssignmentExpression);

              if (this.match(',')) {
                var expressions = [];
                this.context.isAssignmentTarget = false;
                expressions.push(expr);

                while (this.lookahead.type !== 2
                /* EOF */
                ) {
                  if (!this.match(',')) {
                    break;
                  }

                  this.nextToken();

                  if (this.match(')')) {
                    this.nextToken();

                    for (var i = 0; i < expressions.length; i++) {
                      this.reinterpretExpressionAsPattern(expressions[i]);
                    }

                    arrow = true;
                    expr = {
                      type: ArrowParameterPlaceHolder,
                      params: expressions,
                      async: false
                    };
                  } else if (this.match('...')) {
                    if (!this.context.isBindingElement) {
                      this.throwUnexpectedToken(this.lookahead);
                    }

                    expressions.push(this.parseRestElement(params));
                    this.expect(')');

                    if (!this.match('=>')) {
                      this.expect('=>');
                    }

                    this.context.isBindingElement = false;

                    for (var i = 0; i < expressions.length; i++) {
                      this.reinterpretExpressionAsPattern(expressions[i]);
                    }

                    arrow = true;
                    expr = {
                      type: ArrowParameterPlaceHolder,
                      params: expressions,
                      async: false
                    };
                  } else {
                    expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
                  }

                  if (arrow) {
                    break;
                  }
                }

                if (!arrow) {
                  expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
                }
              }

              if (!arrow) {
                this.expect(')');

                if (this.match('=>')) {
                  if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {
                    arrow = true;
                    expr = {
                      type: ArrowParameterPlaceHolder,
                      params: [expr],
                      async: false
                    };
                  }

                  if (!arrow) {
                    if (!this.context.isBindingElement) {
                      this.throwUnexpectedToken(this.lookahead);
                    }

                    if (expr.type === syntax_1.Syntax.SequenceExpression) {
                      for (var i = 0; i < expr.expressions.length; i++) {
                        this.reinterpretExpressionAsPattern(expr.expressions[i]);
                      }
                    } else {
                      this.reinterpretExpressionAsPattern(expr);
                    }

                    var parameters = expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr];
                    expr = {
                      type: ArrowParameterPlaceHolder,
                      params: parameters,
                      async: false
                    };
                  }
                }

                this.context.isBindingElement = false;
              }
            }
          }

          return expr;
        }; // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions


        Parser.prototype.parseArguments = function () {
          this.expect('(');
          var args = [];

          if (!this.match(')')) {
            while (true) {
              var expr = this.match('...') ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAssignmentExpression);
              args.push(expr);

              if (this.match(')')) {
                break;
              }

              this.expectCommaSeparator();

              if (this.match(')')) {
                break;
              }
            }
          }

          this.expect(')');
          return args;
        };

        Parser.prototype.isIdentifierName = function (token) {
          return token.type === 3
          /* Identifier */
          || token.type === 4
          /* Keyword */
          || token.type === 1
          /* BooleanLiteral */
          || token.type === 5
          /* NullLiteral */
          ;
        };

        Parser.prototype.parseIdentifierName = function () {
          var node = this.createNode();
          var token = this.nextToken();

          if (!this.isIdentifierName(token)) {
            this.throwUnexpectedToken(token);
          }

          return this.finalize(node, new Node.Identifier(token.value));
        };

        Parser.prototype.parseNewExpression = function () {
          var node = this.createNode();
          var id = this.parseIdentifierName();
          assert_1.assert(id.name === 'new', 'New expression must start with `new`');
          var expr;

          if (this.match('.')) {
            this.nextToken();

            if (this.lookahead.type === 3
            /* Identifier */
            && this.context.inFunctionBody && this.lookahead.value === 'target') {
              var property = this.parseIdentifierName();
              expr = new Node.MetaProperty(id, property);
            } else {
              this.throwUnexpectedToken(this.lookahead);
            }
          } else {
            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);
            var args = this.match('(') ? this.parseArguments() : [];
            expr = new Node.NewExpression(callee, args);
            this.context.isAssignmentTarget = false;
            this.context.isBindingElement = false;
          }

          return this.finalize(node, expr);
        };

        Parser.prototype.parseAsyncArgument = function () {
          var arg = this.parseAssignmentExpression();
          this.context.firstCoverInitializedNameError = null;
          return arg;
        };

        Parser.prototype.parseAsyncArguments = function () {
          this.expect('(');
          var args = [];

          if (!this.match(')')) {
            while (true) {
              var expr = this.match('...') ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAsyncArgument);
              args.push(expr);

              if (this.match(')')) {
                break;
              }

              this.expectCommaSeparator();

              if (this.match(')')) {
                break;
              }
            }
          }

          this.expect(')');
          return args;
        };

        Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {
          var startToken = this.lookahead;
          var maybeAsync = this.matchContextualKeyword('async');
          var previousAllowIn = this.context.allowIn;
          this.context.allowIn = true;
          var expr;

          if (this.matchKeyword('super') && this.context.inFunctionBody) {
            expr = this.createNode();
            this.nextToken();
            expr = this.finalize(expr, new Node.Super());

            if (!this.match('(') && !this.match('.') && !this.match('[')) {
              this.throwUnexpectedToken(this.lookahead);
            }
          } else {
            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
          }

          while (true) {
            if (this.match('.')) {
              this.context.isBindingElement = false;
              this.context.isAssignmentTarget = true;
              this.expect('.');
              var property = this.parseIdentifierName();
              expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));
            } else if (this.match('(')) {
              var asyncArrow = maybeAsync && startToken.lineNumber === this.lookahead.lineNumber;
              this.context.isBindingElement = false;
              this.context.isAssignmentTarget = false;
              var args = asyncArrow ? this.parseAsyncArguments() : this.parseArguments();
              expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));

              if (asyncArrow && this.match('=>')) {
                for (var i = 0; i < args.length; ++i) {
                  this.reinterpretExpressionAsPattern(args[i]);
                }

                expr = {
                  type: ArrowParameterPlaceHolder,
                  params: args,
                  async: true
                };
              }
            } else if (this.match('[')) {
              this.context.isBindingElement = false;
              this.context.isAssignmentTarget = true;
              this.expect('[');
              var property = this.isolateCoverGrammar(this.parseExpression);
              this.expect(']');
              expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));
            } else if (this.lookahead.type === 10
            /* Template */
            && this.lookahead.head) {
              var quasi = this.parseTemplateLiteral();
              expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));
            } else {
              break;
            }
          }

          this.context.allowIn = previousAllowIn;
          return expr;
        };

        Parser.prototype.parseSuper = function () {
          var node = this.createNode();
          this.expectKeyword('super');

          if (!this.match('[') && !this.match('.')) {
            this.throwUnexpectedToken(this.lookahead);
          }

          return this.finalize(node, new Node.Super());
        };

        Parser.prototype.parseLeftHandSideExpression = function () {
          assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');
          var node = this.startNode(this.lookahead);
          var expr = this.matchKeyword('super') && this.context.inFunctionBody ? this.parseSuper() : this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);

          while (true) {
            if (this.match('[')) {
              this.context.isBindingElement = false;
              this.context.isAssignmentTarget = true;
              this.expect('[');
              var property = this.isolateCoverGrammar(this.parseExpression);
              this.expect(']');
              expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));
            } else if (this.match('.')) {
              this.context.isBindingElement = false;
              this.context.isAssignmentTarget = true;
              this.expect('.');
              var property = this.parseIdentifierName();
              expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));
            } else if (this.lookahead.type === 10
            /* Template */
            && this.lookahead.head) {
              var quasi = this.parseTemplateLiteral();
              expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));
            } else {
              break;
            }
          }

          return expr;
        }; // https://tc39.github.io/ecma262/#sec-update-expressions


        Parser.prototype.parseUpdateExpression = function () {
          var expr;
          var startToken = this.lookahead;

          if (this.match('++') || this.match('--')) {
            var node = this.startNode(startToken);
            var token = this.nextToken();
            expr = this.inheritCoverGrammar(this.parseUnaryExpression);

            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
              this.tolerateError(messages_1.Messages.StrictLHSPrefix);
            }

            if (!this.context.isAssignmentTarget) {
              this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
            }

            var prefix = true;
            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));
            this.context.isAssignmentTarget = false;
            this.context.isBindingElement = false;
          } else {
            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);

            if (!this.hasLineTerminator && this.lookahead.type === 7
            /* Punctuator */
            ) {
              if (this.match('++') || this.match('--')) {
                if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
                  this.tolerateError(messages_1.Messages.StrictLHSPostfix);
                }

                if (!this.context.isAssignmentTarget) {
                  this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
                }

                this.context.isAssignmentTarget = false;
                this.context.isBindingElement = false;
                var operator = this.nextToken().value;
                var prefix = false;
                expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));
              }
            }
          }

          return expr;
        }; // https://tc39.github.io/ecma262/#sec-unary-operators


        Parser.prototype.parseAwaitExpression = function () {
          var node = this.createNode();
          this.nextToken();
          var argument = this.parseUnaryExpression();
          return this.finalize(node, new Node.AwaitExpression(argument));
        };

        Parser.prototype.parseUnaryExpression = function () {
          var expr;

          if (this.match('+') || this.match('-') || this.match('~') || this.match('!') || this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {
            var node = this.startNode(this.lookahead);
            var token = this.nextToken();
            expr = this.inheritCoverGrammar(this.parseUnaryExpression);
            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));

            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {
              this.tolerateError(messages_1.Messages.StrictDelete);
            }

            this.context.isAssignmentTarget = false;
            this.context.isBindingElement = false;
          } else if (this.context.await && this.matchContextualKeyword('await')) {
            expr = this.parseAwaitExpression();
          } else {
            expr = this.parseUpdateExpression();
          }

          return expr;
        };

        Parser.prototype.parseExponentiationExpression = function () {
          var startToken = this.lookahead;
          var expr = this.inheritCoverGrammar(this.parseUnaryExpression);

          if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {
            this.nextToken();
            this.context.isAssignmentTarget = false;
            this.context.isBindingElement = false;
            var left = expr;
            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));
          }

          return expr;
        }; // https://tc39.github.io/ecma262/#sec-exp-operator
        // https://tc39.github.io/ecma262/#sec-multiplicative-operators
        // https://tc39.github.io/ecma262/#sec-additive-operators
        // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators
        // https://tc39.github.io/ecma262/#sec-relational-operators
        // https://tc39.github.io/ecma262/#sec-equality-operators
        // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators
        // https://tc39.github.io/ecma262/#sec-binary-logical-operators


        Parser.prototype.binaryPrecedence = function (token) {
          var op = token.value;
          var precedence;

          if (token.type === 7
          /* Punctuator */
          ) {
            precedence = this.operatorPrecedence[op] || 0;
          } else if (token.type === 4
          /* Keyword */
          ) {
            precedence = op === 'instanceof' || this.context.allowIn && op === 'in' ? 7 : 0;
          } else {
            precedence = 0;
          }

          return precedence;
        };

        Parser.prototype.parseBinaryExpression = function () {
          var startToken = this.lookahead;
          var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);
          var token = this.lookahead;
          var prec = this.binaryPrecedence(token);

          if (prec > 0) {
            this.nextToken();
            this.context.isAssignmentTarget = false;
            this.context.isBindingElement = false;
            var markers = [startToken, this.lookahead];
            var left = expr;
            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
            var stack = [left, token.value, right];
            var precedences = [prec];

            while (true) {
              prec = this.binaryPrecedence(this.lookahead);

              if (prec <= 0) {
                break;
              } // Reduce: make a binary expression from the three topmost entries.


              while (stack.length > 2 && prec <= precedences[precedences.length - 1]) {
                right = stack.pop();
                var operator = stack.pop();
                precedences.pop();
                left = stack.pop();
                markers.pop();
                var node = this.startNode(markers[markers.length - 1]);
                stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));
              } // Shift.


              stack.push(this.nextToken().value);
              precedences.push(prec);
              markers.push(this.lookahead);
              stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));
            } // Final reduce to clean-up the stack.


            var i = stack.length - 1;
            expr = stack[i];
            var lastMarker = markers.pop();

            while (i > 1) {
              var marker = markers.pop();
              var lastLineStart = lastMarker && lastMarker.lineStart;
              var node = this.startNode(marker, lastLineStart);
              var operator = stack[i - 1];
              expr = this.finalize(node, new Node.BinaryExpression(operator, stack[i - 2], expr));
              i -= 2;
              lastMarker = marker;
            }
          }

          return expr;
        }; // https://tc39.github.io/ecma262/#sec-conditional-operator


        Parser.prototype.parseConditionalExpression = function () {
          var startToken = this.lookahead;
          var expr = this.inheritCoverGrammar(this.parseBinaryExpression);

          if (this.match('?')) {
            this.nextToken();
            var previousAllowIn = this.context.allowIn;
            this.context.allowIn = true;
            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);
            this.context.allowIn = previousAllowIn;
            this.expect(':');
            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);
            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));
            this.context.isAssignmentTarget = false;
            this.context.isBindingElement = false;
          }

          return expr;
        }; // https://tc39.github.io/ecma262/#sec-assignment-operators


        Parser.prototype.checkPatternParam = function (options, param) {
          switch (param.type) {
            case syntax_1.Syntax.Identifier:
              this.validateParam(options, param, param.name);
              break;

            case syntax_1.Syntax.RestElement:
              this.checkPatternParam(options, param.argument);
              break;

            case syntax_1.Syntax.AssignmentPattern:
              this.checkPatternParam(options, param.left);
              break;

            case syntax_1.Syntax.ArrayPattern:
              for (var i = 0; i < param.elements.length; i++) {
                if (param.elements[i] !== null) {
                  this.checkPatternParam(options, param.elements[i]);
                }
              }

              break;

            case syntax_1.Syntax.ObjectPattern:
              for (var i = 0; i < param.properties.length; i++) {
                this.checkPatternParam(options, param.properties[i].value);
              }

              break;

            default:
              break;
          }

          options.simple = options.simple && param instanceof Node.Identifier;
        };

        Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {
          var params = [expr];
          var options;
          var asyncArrow = false;

          switch (expr.type) {
            case syntax_1.Syntax.Identifier:
              break;

            case ArrowParameterPlaceHolder:
              params = expr.params;
              asyncArrow = expr.async;
              break;

            default:
              return null;
          }

          options = {
            simple: true,
            paramSet: {}
          };

          for (var i = 0; i < params.length; ++i) {
            var param = params[i];

            if (param.type === syntax_1.Syntax.AssignmentPattern) {
              if (param.right.type === syntax_1.Syntax.YieldExpression) {
                if (param.right.argument) {
                  this.throwUnexpectedToken(this.lookahead);
                }

                param.right.type = syntax_1.Syntax.Identifier;
                param.right.name = 'yield';
                delete param.right.argument;
                delete param.right.delegate;
              }
            } else if (asyncArrow && param.type === syntax_1.Syntax.Identifier && param.name === 'await') {
              this.throwUnexpectedToken(this.lookahead);
            }

            this.checkPatternParam(options, param);
            params[i] = param;
          }

          if (this.context.strict || !this.context.allowYield) {
            for (var i = 0; i < params.length; ++i) {
              var param = params[i];

              if (param.type === syntax_1.Syntax.YieldExpression) {
                this.throwUnexpectedToken(this.lookahead);
              }
            }
          }

          if (options.message === messages_1.Messages.StrictParamDupe) {
            var token = this.context.strict ? options.stricted : options.firstRestricted;
            this.throwUnexpectedToken(token, options.message);
          }

          return {
            simple: options.simple,
            params: params,
            stricted: options.stricted,
            firstRestricted: options.firstRestricted,
            message: options.message
          };
        };

        Parser.prototype.parseAssignmentExpression = function () {
          var expr;

          if (!this.context.allowYield && this.matchKeyword('yield')) {
            expr = this.parseYieldExpression();
          } else {
            var startToken = this.lookahead;
            var token = startToken;
            expr = this.parseConditionalExpression();

            if (token.type === 3
            /* Identifier */
            && token.lineNumber === this.lookahead.lineNumber && token.value === 'async') {
              if (this.lookahead.type === 3
              /* Identifier */
              || this.matchKeyword('yield')) {
                var arg = this.parsePrimaryExpression();
                this.reinterpretExpressionAsPattern(arg);
                expr = {
                  type: ArrowParameterPlaceHolder,
                  params: [arg],
                  async: true
                };
              }
            }

            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {
              // https://tc39.github.io/ecma262/#sec-arrow-function-definitions
              this.context.isAssignmentTarget = false;
              this.context.isBindingElement = false;
              var isAsync = expr.async;
              var list = this.reinterpretAsCoverFormalsList(expr);

              if (list) {
                if (this.hasLineTerminator) {
                  this.tolerateUnexpectedToken(this.lookahead);
                }

                this.context.firstCoverInitializedNameError = null;
                var previousStrict = this.context.strict;
                var previousAllowStrictDirective = this.context.allowStrictDirective;
                this.context.allowStrictDirective = list.simple;
                var previousAllowYield = this.context.allowYield;
                var previousAwait = this.context.await;
                this.context.allowYield = true;
                this.context.await = isAsync;
                var node = this.startNode(startToken);
                this.expect('=>');
                var body = void 0;

                if (this.match('{')) {
                  var previousAllowIn = this.context.allowIn;
                  this.context.allowIn = true;
                  body = this.parseFunctionSourceElements();
                  this.context.allowIn = previousAllowIn;
                } else {
                  body = this.isolateCoverGrammar(this.parseAssignmentExpression);
                }

                var expression = body.type !== syntax_1.Syntax.BlockStatement;

                if (this.context.strict && list.firstRestricted) {
                  this.throwUnexpectedToken(list.firstRestricted, list.message);
                }

                if (this.context.strict && list.stricted) {
                  this.tolerateUnexpectedToken(list.stricted, list.message);
                }

                expr = isAsync ? this.finalize(node, new Node.AsyncArrowFunctionExpression(list.params, body, expression)) : this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));
                this.context.strict = previousStrict;
                this.context.allowStrictDirective = previousAllowStrictDirective;
                this.context.allowYield = previousAllowYield;
                this.context.await = previousAwait;
              }
            } else {
              if (this.matchAssign()) {
                if (!this.context.isAssignmentTarget) {
                  this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
                }

                if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {
                  var id = expr;

                  if (this.scanner.isRestrictedWord(id.name)) {
                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);
                  }

                  if (this.scanner.isStrictModeReservedWord(id.name)) {
                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
                  }
                }

                if (!this.match('=')) {
                  this.context.isAssignmentTarget = false;
                  this.context.isBindingElement = false;
                } else {
                  this.reinterpretExpressionAsPattern(expr);
                }

                token = this.nextToken();
                var operator = token.value;
                var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
                expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(operator, expr, right));
                this.context.firstCoverInitializedNameError = null;
              }
            }
          }

          return expr;
        }; // https://tc39.github.io/ecma262/#sec-comma-operator


        Parser.prototype.parseExpression = function () {
          var startToken = this.lookahead;
          var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);

          if (this.match(',')) {
            var expressions = [];
            expressions.push(expr);

            while (this.lookahead.type !== 2
            /* EOF */
            ) {
              if (!this.match(',')) {
                break;
              }

              this.nextToken();
              expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
            }

            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
          }

          return expr;
        }; // https://tc39.github.io/ecma262/#sec-block


        Parser.prototype.parseStatementListItem = function () {
          var statement;
          this.context.isAssignmentTarget = true;
          this.context.isBindingElement = true;

          if (this.lookahead.type === 4
          /* Keyword */
          ) {
            switch (this.lookahead.value) {
              case 'export':
                if (!this.context.isModule) {
                  this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);
                }

                statement = this.parseExportDeclaration();
                break;

              case 'import':
                if (!this.context.isModule) {
                  this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);
                }

                statement = this.parseImportDeclaration();
                break;

              case 'const':
                statement = this.parseLexicalDeclaration({
                  inFor: false
                });
                break;

              case 'function':
                statement = this.parseFunctionDeclaration();
                break;

              case 'class':
                statement = this.parseClassDeclaration();
                break;

              case 'let':
                statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({
                  inFor: false
                }) : this.parseStatement();
                break;

              default:
                statement = this.parseStatement();
                break;
            }
          } else {
            statement = this.parseStatement();
          }

          return statement;
        };

        Parser.prototype.parseBlock = function () {
          var node = this.createNode();
          this.expect('{');
          var block = [];

          while (true) {
            if (this.match('}')) {
              break;
            }

            block.push(this.parseStatementListItem());
          }

          this.expect('}');
          return this.finalize(node, new Node.BlockStatement(block));
        }; // https://tc39.github.io/ecma262/#sec-let-and-const-declarations


        Parser.prototype.parseLexicalBinding = function (kind, options) {
          var node = this.createNode();
          var params = [];
          var id = this.parsePattern(params, kind);

          if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
            if (this.scanner.isRestrictedWord(id.name)) {
              this.tolerateError(messages_1.Messages.StrictVarName);
            }
          }

          var init = null;

          if (kind === 'const') {
            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {
              if (this.match('=')) {
                this.nextToken();
                init = this.isolateCoverGrammar(this.parseAssignmentExpression);
              } else {
                this.throwError(messages_1.Messages.DeclarationMissingInitializer, 'const');
              }
            }
          } else if (!options.inFor && id.type !== syntax_1.Syntax.Identifier || this.match('=')) {
            this.expect('=');
            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
          }

          return this.finalize(node, new Node.VariableDeclarator(id, init));
        };

        Parser.prototype.parseBindingList = function (kind, options) {
          var list = [this.parseLexicalBinding(kind, options)];

          while (this.match(',')) {
            this.nextToken();
            list.push(this.parseLexicalBinding(kind, options));
          }

          return list;
        };

        Parser.prototype.isLexicalDeclaration = function () {
          var state = this.scanner.saveState();
          this.scanner.scanComments();
          var next = this.scanner.lex();
          this.scanner.restoreState(state);
          return next.type === 3
          /* Identifier */
          || next.type === 7
          /* Punctuator */
          && next.value === '[' || next.type === 7
          /* Punctuator */
          && next.value === '{' || next.type === 4
          /* Keyword */
          && next.value === 'let' || next.type === 4
          /* Keyword */
          && next.value === 'yield';
        };

        Parser.prototype.parseLexicalDeclaration = function (options) {
          var node = this.createNode();
          var kind = this.nextToken().value;
          assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');
          var declarations = this.parseBindingList(kind, options);
          this.consumeSemicolon();
          return this.finalize(node, new Node.VariableDeclaration(declarations, kind));
        }; // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns


        Parser.prototype.parseBindingRestElement = function (params, kind) {
          var node = this.createNode();
          this.expect('...');
          var arg = this.parsePattern(params, kind);
          return this.finalize(node, new Node.RestElement(arg));
        };

        Parser.prototype.parseArrayPattern = function (params, kind) {
          var node = this.createNode();
          this.expect('[');
          var elements = [];

          while (!this.match(']')) {
            if (this.match(',')) {
              this.nextToken();
              elements.push(null);
            } else {
              if (this.match('...')) {
                elements.push(this.parseBindingRestElement(params, kind));
                break;
              } else {
                elements.push(this.parsePatternWithDefault(params, kind));
              }

              if (!this.match(']')) {
                this.expect(',');
              }
            }
          }

          this.expect(']');
          return this.finalize(node, new Node.ArrayPattern(elements));
        };

        Parser.prototype.parsePropertyPattern = function (params, kind) {
          var node = this.createNode();
          var computed = false;
          var shorthand = false;
          var method = false;
          var key;
          var value;

          if (this.lookahead.type === 3
          /* Identifier */
          ) {
            var keyToken = this.lookahead;
            key = this.parseVariableIdentifier();
            var init = this.finalize(node, new Node.Identifier(keyToken.value));

            if (this.match('=')) {
              params.push(keyToken);
              shorthand = true;
              this.nextToken();
              var expr = this.parseAssignmentExpression();
              value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));
            } else if (!this.match(':')) {
              params.push(keyToken);
              shorthand = true;
              value = init;
            } else {
              this.expect(':');
              value = this.parsePatternWithDefault(params, kind);
            }
          } else {
            computed = this.match('[');
            key = this.parseObjectPropertyKey();
            this.expect(':');
            value = this.parsePatternWithDefault(params, kind);
          }

          return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));
        };

        Parser.prototype.parseObjectPattern = function (params, kind) {
          var node = this.createNode();
          var properties = [];
          this.expect('{');

          while (!this.match('}')) {
            properties.push(this.parsePropertyPattern(params, kind));

            if (!this.match('}')) {
              this.expect(',');
            }
          }

          this.expect('}');
          return this.finalize(node, new Node.ObjectPattern(properties));
        };

        Parser.prototype.parsePattern = function (params, kind) {
          var pattern;

          if (this.match('[')) {
            pattern = this.parseArrayPattern(params, kind);
          } else if (this.match('{')) {
            pattern = this.parseObjectPattern(params, kind);
          } else {
            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {
              this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.LetInLexicalBinding);
            }

            params.push(this.lookahead);
            pattern = this.parseVariableIdentifier(kind);
          }

          return pattern;
        };

        Parser.prototype.parsePatternWithDefault = function (params, kind) {
          var startToken = this.lookahead;
          var pattern = this.parsePattern(params, kind);

          if (this.match('=')) {
            this.nextToken();
            var previousAllowYield = this.context.allowYield;
            this.context.allowYield = true;
            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
            this.context.allowYield = previousAllowYield;
            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));
          }

          return pattern;
        }; // https://tc39.github.io/ecma262/#sec-variable-statement


        Parser.prototype.parseVariableIdentifier = function (kind) {
          var node = this.createNode();
          var token = this.nextToken();

          if (token.type === 4
          /* Keyword */
          && token.value === 'yield') {
            if (this.context.strict) {
              this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
            } else if (!this.context.allowYield) {
              this.throwUnexpectedToken(token);
            }
          } else if (token.type !== 3
          /* Identifier */
          ) {
            if (this.context.strict && token.type === 4
            /* Keyword */
            && this.scanner.isStrictModeReservedWord(token.value)) {
              this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
            } else {
              if (this.context.strict || token.value !== 'let' || kind !== 'var') {
                this.throwUnexpectedToken(token);
              }
            }
          } else if ((this.context.isModule || this.context.await) && token.type === 3
          /* Identifier */
          && token.value === 'await') {
            this.tolerateUnexpectedToken(token);
          }

          return this.finalize(node, new Node.Identifier(token.value));
        };

        Parser.prototype.parseVariableDeclaration = function (options) {
          var node = this.createNode();
          var params = [];
          var id = this.parsePattern(params, 'var');

          if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
            if (this.scanner.isRestrictedWord(id.name)) {
              this.tolerateError(messages_1.Messages.StrictVarName);
            }
          }

          var init = null;

          if (this.match('=')) {
            this.nextToken();
            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
          } else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {
            this.expect('=');
          }

          return this.finalize(node, new Node.VariableDeclarator(id, init));
        };

        Parser.prototype.parseVariableDeclarationList = function (options) {
          var opt = {
            inFor: options.inFor
          };
          var list = [];
          list.push(this.parseVariableDeclaration(opt));

          while (this.match(',')) {
            this.nextToken();
            list.push(this.parseVariableDeclaration(opt));
          }

          return list;
        };

        Parser.prototype.parseVariableStatement = function () {
          var node = this.createNode();
          this.expectKeyword('var');
          var declarations = this.parseVariableDeclarationList({
            inFor: false
          });
          this.consumeSemicolon();
          return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));
        }; // https://tc39.github.io/ecma262/#sec-empty-statement


        Parser.prototype.parseEmptyStatement = function () {
          var node = this.createNode();
          this.expect(';');
          return this.finalize(node, new Node.EmptyStatement());
        }; // https://tc39.github.io/ecma262/#sec-expression-statement


        Parser.prototype.parseExpressionStatement = function () {
          var node = this.createNode();
          var expr = this.parseExpression();
          this.consumeSemicolon();
          return this.finalize(node, new Node.ExpressionStatement(expr));
        }; // https://tc39.github.io/ecma262/#sec-if-statement


        Parser.prototype.parseIfClause = function () {
          if (this.context.strict && this.matchKeyword('function')) {
            this.tolerateError(messages_1.Messages.StrictFunction);
          }

          return this.parseStatement();
        };

        Parser.prototype.parseIfStatement = function () {
          var node = this.createNode();
          var consequent;
          var alternate = null;
          this.expectKeyword('if');
          this.expect('(');
          var test = this.parseExpression();

          if (!this.match(')') && this.config.tolerant) {
            this.tolerateUnexpectedToken(this.nextToken());
            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());
          } else {
            this.expect(')');
            consequent = this.parseIfClause();

            if (this.matchKeyword('else')) {
              this.nextToken();
              alternate = this.parseIfClause();
            }
          }

          return this.finalize(node, new Node.IfStatement(test, consequent, alternate));
        }; // https://tc39.github.io/ecma262/#sec-do-while-statement


        Parser.prototype.parseDoWhileStatement = function () {
          var node = this.createNode();
          this.expectKeyword('do');
          var previousInIteration = this.context.inIteration;
          this.context.inIteration = true;
          var body = this.parseStatement();
          this.context.inIteration = previousInIteration;
          this.expectKeyword('while');
          this.expect('(');
          var test = this.parseExpression();

          if (!this.match(')') && this.config.tolerant) {
            this.tolerateUnexpectedToken(this.nextToken());
          } else {
            this.expect(')');

            if (this.match(';')) {
              this.nextToken();
            }
          }

          return this.finalize(node, new Node.DoWhileStatement(body, test));
        }; // https://tc39.github.io/ecma262/#sec-while-statement


        Parser.prototype.parseWhileStatement = function () {
          var node = this.createNode();
          var body;
          this.expectKeyword('while');
          this.expect('(');
          var test = this.parseExpression();

          if (!this.match(')') && this.config.tolerant) {
            this.tolerateUnexpectedToken(this.nextToken());
            body = this.finalize(this.createNode(), new Node.EmptyStatement());
          } else {
            this.expect(')');
            var previousInIteration = this.context.inIteration;
            this.context.inIteration = true;
            body = this.parseStatement();
            this.context.inIteration = previousInIteration;
          }

          return this.finalize(node, new Node.WhileStatement(test, body));
        }; // https://tc39.github.io/ecma262/#sec-for-statement
        // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements


        Parser.prototype.parseForStatement = function () {
          var init = null;
          var test = null;
          var update = null;
          var forIn = true;
          var left, right;
          var node = this.createNode();
          this.expectKeyword('for');
          this.expect('(');

          if (this.match(';')) {
            this.nextToken();
          } else {
            if (this.matchKeyword('var')) {
              init = this.createNode();
              this.nextToken();
              var previousAllowIn = this.context.allowIn;
              this.context.allowIn = false;
              var declarations = this.parseVariableDeclarationList({
                inFor: true
              });
              this.context.allowIn = previousAllowIn;

              if (declarations.length === 1 && this.matchKeyword('in')) {
                var decl = declarations[0];

                if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {
                  this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');
                }

                init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
                this.nextToken();
                left = init;
                right = this.parseExpression();
                init = null;
              } else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
                init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
                this.nextToken();
                left = init;
                right = this.parseAssignmentExpression();
                init = null;
                forIn = false;
              } else {
                init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
                this.expect(';');
              }
            } else if (this.matchKeyword('const') || this.matchKeyword('let')) {
              init = this.createNode();
              var kind = this.nextToken().value;

              if (!this.context.strict && this.lookahead.value === 'in') {
                init = this.finalize(init, new Node.Identifier(kind));
                this.nextToken();
                left = init;
                right = this.parseExpression();
                init = null;
              } else {
                var previousAllowIn = this.context.allowIn;
                this.context.allowIn = false;
                var declarations = this.parseBindingList(kind, {
                  inFor: true
                });
                this.context.allowIn = previousAllowIn;

                if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {
                  init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
                  this.nextToken();
                  left = init;
                  right = this.parseExpression();
                  init = null;
                } else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
                  init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
                  this.nextToken();
                  left = init;
                  right = this.parseAssignmentExpression();
                  init = null;
                  forIn = false;
                } else {
                  this.consumeSemicolon();
                  init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
                }
              }
            } else {
              var initStartToken = this.lookahead;
              var previousAllowIn = this.context.allowIn;
              this.context.allowIn = false;
              init = this.inheritCoverGrammar(this.parseAssignmentExpression);
              this.context.allowIn = previousAllowIn;

              if (this.matchKeyword('in')) {
                if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
                  this.tolerateError(messages_1.Messages.InvalidLHSInForIn);
                }

                this.nextToken();
                this.reinterpretExpressionAsPattern(init);
                left = init;
                right = this.parseExpression();
                init = null;
              } else if (this.matchContextualKeyword('of')) {
                if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
                  this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);
                }

                this.nextToken();
                this.reinterpretExpressionAsPattern(init);
                left = init;
                right = this.parseAssignmentExpression();
                init = null;
                forIn = false;
              } else {
                if (this.match(',')) {
                  var initSeq = [init];

                  while (this.match(',')) {
                    this.nextToken();
                    initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
                  }

                  init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));
                }

                this.expect(';');
              }
            }
          }

          if (typeof left === 'undefined') {
            if (!this.match(';')) {
              test = this.parseExpression();
            }

            this.expect(';');

            if (!this.match(')')) {
              update = this.parseExpression();
            }
          }

          var body;

          if (!this.match(')') && this.config.tolerant) {
            this.tolerateUnexpectedToken(this.nextToken());
            body = this.finalize(this.createNode(), new Node.EmptyStatement());
          } else {
            this.expect(')');
            var previousInIteration = this.context.inIteration;
            this.context.inIteration = true;
            body = this.isolateCoverGrammar(this.parseStatement);
            this.context.inIteration = previousInIteration;
          }

          return typeof left === 'undefined' ? this.finalize(node, new Node.ForStatement(init, test, update, body)) : forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) : this.finalize(node, new Node.ForOfStatement(left, right, body));
        }; // https://tc39.github.io/ecma262/#sec-continue-statement


        Parser.prototype.parseContinueStatement = function () {
          var node = this.createNode();
          this.expectKeyword('continue');
          var label = null;

          if (this.lookahead.type === 3
          /* Identifier */
          && !this.hasLineTerminator) {
            var id = this.parseVariableIdentifier();
            label = id;
            var key = '$' + id.name;

            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
              this.throwError(messages_1.Messages.UnknownLabel, id.name);
            }
          }

          this.consumeSemicolon();

          if (label === null && !this.context.inIteration) {
            this.throwError(messages_1.Messages.IllegalContinue);
          }

          return this.finalize(node, new Node.ContinueStatement(label));
        }; // https://tc39.github.io/ecma262/#sec-break-statement


        Parser.prototype.parseBreakStatement = function () {
          var node = this.createNode();
          this.expectKeyword('break');
          var label = null;

          if (this.lookahead.type === 3
          /* Identifier */
          && !this.hasLineTerminator) {
            var id = this.parseVariableIdentifier();
            var key = '$' + id.name;

            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
              this.throwError(messages_1.Messages.UnknownLabel, id.name);
            }

            label = id;
          }

          this.consumeSemicolon();

          if (label === null && !this.context.inIteration && !this.context.inSwitch) {
            this.throwError(messages_1.Messages.IllegalBreak);
          }

          return this.finalize(node, new Node.BreakStatement(label));
        }; // https://tc39.github.io/ecma262/#sec-return-statement


        Parser.prototype.parseReturnStatement = function () {
          if (!this.context.inFunctionBody) {
            this.tolerateError(messages_1.Messages.IllegalReturn);
          }

          var node = this.createNode();
          this.expectKeyword('return');
          var hasArgument = !this.match(';') && !this.match('}') && !this.hasLineTerminator && this.lookahead.type !== 2
          /* EOF */
          || this.lookahead.type === 8
          /* StringLiteral */
          || this.lookahead.type === 10
          /* Template */
          ;
          var argument = hasArgument ? this.parseExpression() : null;
          this.consumeSemicolon();
          return this.finalize(node, new Node.ReturnStatement(argument));
        }; // https://tc39.github.io/ecma262/#sec-with-statement


        Parser.prototype.parseWithStatement = function () {
          if (this.context.strict) {
            this.tolerateError(messages_1.Messages.StrictModeWith);
          }

          var node = this.createNode();
          var body;
          this.expectKeyword('with');
          this.expect('(');
          var object = this.parseExpression();

          if (!this.match(')') && this.config.tolerant) {
            this.tolerateUnexpectedToken(this.nextToken());
            body = this.finalize(this.createNode(), new Node.EmptyStatement());
          } else {
            this.expect(')');
            body = this.parseStatement();
          }

          return this.finalize(node, new Node.WithStatement(object, body));
        }; // https://tc39.github.io/ecma262/#sec-switch-statement


        Parser.prototype.parseSwitchCase = function () {
          var node = this.createNode();
          var test;

          if (this.matchKeyword('default')) {
            this.nextToken();
            test = null;
          } else {
            this.expectKeyword('case');
            test = this.parseExpression();
          }

          this.expect(':');
          var consequent = [];

          while (true) {
            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {
              break;
            }

            consequent.push(this.parseStatementListItem());
          }

          return this.finalize(node, new Node.SwitchCase(test, consequent));
        };

        Parser.prototype.parseSwitchStatement = function () {
          var node = this.createNode();
          this.expectKeyword('switch');
          this.expect('(');
          var discriminant = this.parseExpression();
          this.expect(')');
          var previousInSwitch = this.context.inSwitch;
          this.context.inSwitch = true;
          var cases = [];
          var defaultFound = false;
          this.expect('{');

          while (true) {
            if (this.match('}')) {
              break;
            }

            var clause = this.parseSwitchCase();

            if (clause.test === null) {
              if (defaultFound) {
                this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);
              }

              defaultFound = true;
            }

            cases.push(clause);
          }

          this.expect('}');
          this.context.inSwitch = previousInSwitch;
          return this.finalize(node, new Node.SwitchStatement(discriminant, cases));
        }; // https://tc39.github.io/ecma262/#sec-labelled-statements


        Parser.prototype.parseLabelledStatement = function () {
          var node = this.createNode();
          var expr = this.parseExpression();
          var statement;

          if (expr.type === syntax_1.Syntax.Identifier && this.match(':')) {
            this.nextToken();
            var id = expr;
            var key = '$' + id.name;

            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
              this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);
            }

            this.context.labelSet[key] = true;
            var body = void 0;

            if (this.matchKeyword('class')) {
              this.tolerateUnexpectedToken(this.lookahead);
              body = this.parseClassDeclaration();
            } else if (this.matchKeyword('function')) {
              var token = this.lookahead;
              var declaration = this.parseFunctionDeclaration();

              if (this.context.strict) {
                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunction);
              } else if (declaration.generator) {
                this.tolerateUnexpectedToken(token, messages_1.Messages.GeneratorInLegacyContext);
              }

              body = declaration;
            } else {
              body = this.parseStatement();
            }

            delete this.context.labelSet[key];
            statement = new Node.LabeledStatement(id, body);
          } else {
            this.consumeSemicolon();
            statement = new Node.ExpressionStatement(expr);
          }

          return this.finalize(node, statement);
        }; // https://tc39.github.io/ecma262/#sec-throw-statement


        Parser.prototype.parseThrowStatement = function () {
          var node = this.createNode();
          this.expectKeyword('throw');

          if (this.hasLineTerminator) {
            this.throwError(messages_1.Messages.NewlineAfterThrow);
          }

          var argument = this.parseExpression();
          this.consumeSemicolon();
          return this.finalize(node, new Node.ThrowStatement(argument));
        }; // https://tc39.github.io/ecma262/#sec-try-statement


        Parser.prototype.parseCatchClause = function () {
          var node = this.createNode();
          this.expectKeyword('catch');
          this.expect('(');

          if (this.match(')')) {
            this.throwUnexpectedToken(this.lookahead);
          }

          var params = [];
          var param = this.parsePattern(params);
          var paramMap = {};

          for (var i = 0; i < params.length; i++) {
            var key = '$' + params[i].value;

            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {
              this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);
            }

            paramMap[key] = true;
          }

          if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {
            if (this.scanner.isRestrictedWord(param.name)) {
              this.tolerateError(messages_1.Messages.StrictCatchVariable);
            }
          }

          this.expect(')');
          var body = this.parseBlock();
          return this.finalize(node, new Node.CatchClause(param, body));
        };

        Parser.prototype.parseFinallyClause = function () {
          this.expectKeyword('finally');
          return this.parseBlock();
        };

        Parser.prototype.parseTryStatement = function () {
          var node = this.createNode();
          this.expectKeyword('try');
          var block = this.parseBlock();
          var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;
          var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;

          if (!handler && !finalizer) {
            this.throwError(messages_1.Messages.NoCatchOrFinally);
          }

          return this.finalize(node, new Node.TryStatement(block, handler, finalizer));
        }; // https://tc39.github.io/ecma262/#sec-debugger-statement


        Parser.prototype.parseDebuggerStatement = function () {
          var node = this.createNode();
          this.expectKeyword('debugger');
          this.consumeSemicolon();
          return this.finalize(node, new Node.DebuggerStatement());
        }; // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations


        Parser.prototype.parseStatement = function () {
          var statement;

          switch (this.lookahead.type) {
            case 1
            /* BooleanLiteral */
            :
            case 5
            /* NullLiteral */
            :
            case 6
            /* NumericLiteral */
            :
            case 8
            /* StringLiteral */
            :
            case 10
            /* Template */
            :
            case 9
            /* RegularExpression */
            :
              statement = this.parseExpressionStatement();
              break;

            case 7
            /* Punctuator */
            :
              var value = this.lookahead.value;

              if (value === '{') {
                statement = this.parseBlock();
              } else if (value === '(') {
                statement = this.parseExpressionStatement();
              } else if (value === ';') {
                statement = this.parseEmptyStatement();
              } else {
                statement = this.parseExpressionStatement();
              }

              break;

            case 3
            /* Identifier */
            :
              statement = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();
              break;

            case 4
            /* Keyword */
            :
              switch (this.lookahead.value) {
                case 'break':
                  statement = this.parseBreakStatement();
                  break;

                case 'continue':
                  statement = this.parseContinueStatement();
                  break;

                case 'debugger':
                  statement = this.parseDebuggerStatement();
                  break;

                case 'do':
                  statement = this.parseDoWhileStatement();
                  break;

                case 'for':
                  statement = this.parseForStatement();
                  break;

                case 'function':
                  statement = this.parseFunctionDeclaration();
                  break;

                case 'if':
                  statement = this.parseIfStatement();
                  break;

                case 'return':
                  statement = this.parseReturnStatement();
                  break;

                case 'switch':
                  statement = this.parseSwitchStatement();
                  break;

                case 'throw':
                  statement = this.parseThrowStatement();
                  break;

                case 'try':
                  statement = this.parseTryStatement();
                  break;

                case 'var':
                  statement = this.parseVariableStatement();
                  break;

                case 'while':
                  statement = this.parseWhileStatement();
                  break;

                case 'with':
                  statement = this.parseWithStatement();
                  break;

                default:
                  statement = this.parseExpressionStatement();
                  break;
              }

              break;

            default:
              statement = this.throwUnexpectedToken(this.lookahead);
          }

          return statement;
        }; // https://tc39.github.io/ecma262/#sec-function-definitions


        Parser.prototype.parseFunctionSourceElements = function () {
          var node = this.createNode();
          this.expect('{');
          var body = this.parseDirectivePrologues();
          var previousLabelSet = this.context.labelSet;
          var previousInIteration = this.context.inIteration;
          var previousInSwitch = this.context.inSwitch;
          var previousInFunctionBody = this.context.inFunctionBody;
          this.context.labelSet = {};
          this.context.inIteration = false;
          this.context.inSwitch = false;
          this.context.inFunctionBody = true;

          while (this.lookahead.type !== 2
          /* EOF */
          ) {
            if (this.match('}')) {
              break;
            }

            body.push(this.parseStatementListItem());
          }

          this.expect('}');
          this.context.labelSet = previousLabelSet;
          this.context.inIteration = previousInIteration;
          this.context.inSwitch = previousInSwitch;
          this.context.inFunctionBody = previousInFunctionBody;
          return this.finalize(node, new Node.BlockStatement(body));
        };

        Parser.prototype.validateParam = function (options, param, name) {
          var key = '$' + name;

          if (this.context.strict) {
            if (this.scanner.isRestrictedWord(name)) {
              options.stricted = param;
              options.message = messages_1.Messages.StrictParamName;
            }

            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
              options.stricted = param;
              options.message = messages_1.Messages.StrictParamDupe;
            }
          } else if (!options.firstRestricted) {
            if (this.scanner.isRestrictedWord(name)) {
              options.firstRestricted = param;
              options.message = messages_1.Messages.StrictParamName;
            } else if (this.scanner.isStrictModeReservedWord(name)) {
              options.firstRestricted = param;
              options.message = messages_1.Messages.StrictReservedWord;
            } else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
              options.stricted = param;
              options.message = messages_1.Messages.StrictParamDupe;
            }
          }
          /* istanbul ignore next */


          if (typeof Object.defineProperty === 'function') {
            Object.defineProperty(options.paramSet, key, {
              value: true,
              enumerable: true,
              writable: true,
              configurable: true
            });
          } else {
            options.paramSet[key] = true;
          }
        };

        Parser.prototype.parseRestElement = function (params) {
          var node = this.createNode();
          this.expect('...');
          var arg = this.parsePattern(params);

          if (this.match('=')) {
            this.throwError(messages_1.Messages.DefaultRestParameter);
          }

          if (!this.match(')')) {
            this.throwError(messages_1.Messages.ParameterAfterRestParameter);
          }

          return this.finalize(node, new Node.RestElement(arg));
        };

        Parser.prototype.parseFormalParameter = function (options) {
          var params = [];
          var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);

          for (var i = 0; i < params.length; i++) {
            this.validateParam(options, params[i], params[i].value);
          }

          options.simple = options.simple && param instanceof Node.Identifier;
          options.params.push(param);
        };

        Parser.prototype.parseFormalParameters = function (firstRestricted) {
          var options;
          options = {
            simple: true,
            params: [],
            firstRestricted: firstRestricted
          };
          this.expect('(');

          if (!this.match(')')) {
            options.paramSet = {};

            while (this.lookahead.type !== 2
            /* EOF */
            ) {
              this.parseFormalParameter(options);

              if (this.match(')')) {
                break;
              }

              this.expect(',');

              if (this.match(')')) {
                break;
              }
            }
          }

          this.expect(')');
          return {
            simple: options.simple,
            params: options.params,
            stricted: options.stricted,
            firstRestricted: options.firstRestricted,
            message: options.message
          };
        };

        Parser.prototype.matchAsyncFunction = function () {
          var match = this.matchContextualKeyword('async');

          if (match) {
            var state = this.scanner.saveState();
            this.scanner.scanComments();
            var next = this.scanner.lex();
            this.scanner.restoreState(state);
            match = state.lineNumber === next.lineNumber && next.type === 4
            /* Keyword */
            && next.value === 'function';
          }

          return match;
        };

        Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {
          var node = this.createNode();
          var isAsync = this.matchContextualKeyword('async');

          if (isAsync) {
            this.nextToken();
          }

          this.expectKeyword('function');
          var isGenerator = isAsync ? false : this.match('*');

          if (isGenerator) {
            this.nextToken();
          }

          var message;
          var id = null;
          var firstRestricted = null;

          if (!identifierIsOptional || !this.match('(')) {
            var token = this.lookahead;
            id = this.parseVariableIdentifier();

            if (this.context.strict) {
              if (this.scanner.isRestrictedWord(token.value)) {
                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
              }
            } else {
              if (this.scanner.isRestrictedWord(token.value)) {
                firstRestricted = token;
                message = messages_1.Messages.StrictFunctionName;
              } else if (this.scanner.isStrictModeReservedWord(token.value)) {
                firstRestricted = token;
                message = messages_1.Messages.StrictReservedWord;
              }
            }
          }

          var previousAllowAwait = this.context.await;
          var previousAllowYield = this.context.allowYield;
          this.context.await = isAsync;
          this.context.allowYield = !isGenerator;
          var formalParameters = this.parseFormalParameters(firstRestricted);
          var params = formalParameters.params;
          var stricted = formalParameters.stricted;
          firstRestricted = formalParameters.firstRestricted;

          if (formalParameters.message) {
            message = formalParameters.message;
          }

          var previousStrict = this.context.strict;
          var previousAllowStrictDirective = this.context.allowStrictDirective;
          this.context.allowStrictDirective = formalParameters.simple;
          var body = this.parseFunctionSourceElements();

          if (this.context.strict && firstRestricted) {
            this.throwUnexpectedToken(firstRestricted, message);
          }

          if (this.context.strict && stricted) {
            this.tolerateUnexpectedToken(stricted, message);
          }

          this.context.strict = previousStrict;
          this.context.allowStrictDirective = previousAllowStrictDirective;
          this.context.await = previousAllowAwait;
          this.context.allowYield = previousAllowYield;
          return isAsync ? this.finalize(node, new Node.AsyncFunctionDeclaration(id, params, body)) : this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));
        };

        Parser.prototype.parseFunctionExpression = function () {
          var node = this.createNode();
          var isAsync = this.matchContextualKeyword('async');

          if (isAsync) {
            this.nextToken();
          }

          this.expectKeyword('function');
          var isGenerator = isAsync ? false : this.match('*');

          if (isGenerator) {
            this.nextToken();
          }

          var message;
          var id = null;
          var firstRestricted;
          var previousAllowAwait = this.context.await;
          var previousAllowYield = this.context.allowYield;
          this.context.await = isAsync;
          this.context.allowYield = !isGenerator;

          if (!this.match('(')) {
            var token = this.lookahead;
            id = !this.context.strict && !isGenerator && this.matchKeyword('yield') ? this.parseIdentifierName() : this.parseVariableIdentifier();

            if (this.context.strict) {
              if (this.scanner.isRestrictedWord(token.value)) {
                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
              }
            } else {
              if (this.scanner.isRestrictedWord(token.value)) {
                firstRestricted = token;
                message = messages_1.Messages.StrictFunctionName;
              } else if (this.scanner.isStrictModeReservedWord(token.value)) {
                firstRestricted = token;
                message = messages_1.Messages.StrictReservedWord;
              }
            }
          }

          var formalParameters = this.parseFormalParameters(firstRestricted);
          var params = formalParameters.params;
          var stricted = formalParameters.stricted;
          firstRestricted = formalParameters.firstRestricted;

          if (formalParameters.message) {
            message = formalParameters.message;
          }

          var previousStrict = this.context.strict;
          var previousAllowStrictDirective = this.context.allowStrictDirective;
          this.context.allowStrictDirective = formalParameters.simple;
          var body = this.parseFunctionSourceElements();

          if (this.context.strict && firstRestricted) {
            this.throwUnexpectedToken(firstRestricted, message);
          }

          if (this.context.strict && stricted) {
            this.tolerateUnexpectedToken(stricted, message);
          }

          this.context.strict = previousStrict;
          this.context.allowStrictDirective = previousAllowStrictDirective;
          this.context.await = previousAllowAwait;
          this.context.allowYield = previousAllowYield;
          return isAsync ? this.finalize(node, new Node.AsyncFunctionExpression(id, params, body)) : this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));
        }; // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive


        Parser.prototype.parseDirective = function () {
          var token = this.lookahead;
          var node = this.createNode();
          var expr = this.parseExpression();
          var directive = expr.type === syntax_1.Syntax.Literal ? this.getTokenRaw(token).slice(1, -1) : null;
          this.consumeSemicolon();
          return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));
        };

        Parser.prototype.parseDirectivePrologues = function () {
          var firstRestricted = null;
          var body = [];

          while (true) {
            var token = this.lookahead;

            if (token.type !== 8
            /* StringLiteral */
            ) {
              break;
            }

            var statement = this.parseDirective();
            body.push(statement);
            var directive = statement.directive;

            if (typeof directive !== 'string') {
              break;
            }

            if (directive === 'use strict') {
              this.context.strict = true;

              if (firstRestricted) {
                this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);
              }

              if (!this.context.allowStrictDirective) {
                this.tolerateUnexpectedToken(token, messages_1.Messages.IllegalLanguageModeDirective);
              }
            } else {
              if (!firstRestricted && token.octal) {
                firstRestricted = token;
              }
            }
          }

          return body;
        }; // https://tc39.github.io/ecma262/#sec-method-definitions


        Parser.prototype.qualifiedPropertyName = function (token) {
          switch (token.type) {
            case 3
            /* Identifier */
            :
            case 8
            /* StringLiteral */
            :
            case 1
            /* BooleanLiteral */
            :
            case 5
            /* NullLiteral */
            :
            case 6
            /* NumericLiteral */
            :
            case 4
            /* Keyword */
            :
              return true;

            case 7
            /* Punctuator */
            :
              return token.value === '[';

            default:
              break;
          }

          return false;
        };

        Parser.prototype.parseGetterMethod = function () {
          var node = this.createNode();
          var isGenerator = false;
          var previousAllowYield = this.context.allowYield;
          this.context.allowYield = !isGenerator;
          var formalParameters = this.parseFormalParameters();

          if (formalParameters.params.length > 0) {
            this.tolerateError(messages_1.Messages.BadGetterArity);
          }

          var method = this.parsePropertyMethod(formalParameters);
          this.context.allowYield = previousAllowYield;
          return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
        };

        Parser.prototype.parseSetterMethod = function () {
          var node = this.createNode();
          var isGenerator = false;
          var previousAllowYield = this.context.allowYield;
          this.context.allowYield = !isGenerator;
          var formalParameters = this.parseFormalParameters();

          if (formalParameters.params.length !== 1) {
            this.tolerateError(messages_1.Messages.BadSetterArity);
          } else if (formalParameters.params[0] instanceof Node.RestElement) {
            this.tolerateError(messages_1.Messages.BadSetterRestParameter);
          }

          var method = this.parsePropertyMethod(formalParameters);
          this.context.allowYield = previousAllowYield;
          return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
        };

        Parser.prototype.parseGeneratorMethod = function () {
          var node = this.createNode();
          var isGenerator = true;
          var previousAllowYield = this.context.allowYield;
          this.context.allowYield = true;
          var params = this.parseFormalParameters();
          this.context.allowYield = false;
          var method = this.parsePropertyMethod(params);
          this.context.allowYield = previousAllowYield;
          return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
        }; // https://tc39.github.io/ecma262/#sec-generator-function-definitions


        Parser.prototype.isStartOfExpression = function () {
          var start = true;
          var value = this.lookahead.value;

          switch (this.lookahead.type) {
            case 7
            /* Punctuator */
            :
              start = value === '[' || value === '(' || value === '{' || value === '+' || value === '-' || value === '!' || value === '~' || value === '++' || value === '--' || value === '/' || value === '/='; // regular expression literal

              break;

            case 4
            /* Keyword */
            :
              start = value === 'class' || value === 'delete' || value === 'function' || value === 'let' || value === 'new' || value === 'super' || value === 'this' || value === 'typeof' || value === 'void' || value === 'yield';
              break;

            default:
              break;
          }

          return start;
        };

        Parser.prototype.parseYieldExpression = function () {
          var node = this.createNode();
          this.expectKeyword('yield');
          var argument = null;
          var delegate = false;

          if (!this.hasLineTerminator) {
            var previousAllowYield = this.context.allowYield;
            this.context.allowYield = false;
            delegate = this.match('*');

            if (delegate) {
              this.nextToken();
              argument = this.parseAssignmentExpression();
            } else if (this.isStartOfExpression()) {
              argument = this.parseAssignmentExpression();
            }

            this.context.allowYield = previousAllowYield;
          }

          return this.finalize(node, new Node.YieldExpression(argument, delegate));
        }; // https://tc39.github.io/ecma262/#sec-class-definitions


        Parser.prototype.parseClassElement = function (hasConstructor) {
          var token = this.lookahead;
          var node = this.createNode();
          var kind = '';
          var key = null;
          var value = null;
          var computed = false;
          var method = false;
          var isStatic = false;
          var isAsync = false;

          if (this.match('*')) {
            this.nextToken();
          } else {
            computed = this.match('[');
            key = this.parseObjectPropertyKey();
            var id = key;

            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {
              token = this.lookahead;
              isStatic = true;
              computed = this.match('[');

              if (this.match('*')) {
                this.nextToken();
              } else {
                key = this.parseObjectPropertyKey();
              }
            }

            if (token.type === 3
            /* Identifier */
            && !this.hasLineTerminator && token.value === 'async') {
              var punctuator = this.lookahead.value;

              if (punctuator !== ':' && punctuator !== '(' && punctuator !== '*') {
                isAsync = true;
                token = this.lookahead;
                key = this.parseObjectPropertyKey();

                if (token.type === 3
                /* Identifier */
                && token.value === 'constructor') {
                  this.tolerateUnexpectedToken(token, messages_1.Messages.ConstructorIsAsync);
                }
              }
            }
          }

          var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);

          if (token.type === 3
          /* Identifier */
          ) {
            if (token.value === 'get' && lookaheadPropertyKey) {
              kind = 'get';
              computed = this.match('[');
              key = this.parseObjectPropertyKey();
              this.context.allowYield = false;
              value = this.parseGetterMethod();
            } else if (token.value === 'set' && lookaheadPropertyKey) {
              kind = 'set';
              computed = this.match('[');
              key = this.parseObjectPropertyKey();
              value = this.parseSetterMethod();
            }
          } else if (token.type === 7
          /* Punctuator */
          && token.value === '*' && lookaheadPropertyKey) {
            kind = 'init';
            computed = this.match('[');
            key = this.parseObjectPropertyKey();
            value = this.parseGeneratorMethod();
            method = true;
          }

          if (!kind && key && this.match('(')) {
            kind = 'init';
            value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
            method = true;
          }

          if (!kind) {
            this.throwUnexpectedToken(this.lookahead);
          }

          if (kind === 'init') {
            kind = 'method';
          }

          if (!computed) {
            if (isStatic && this.isPropertyKey(key, 'prototype')) {
              this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);
            }

            if (!isStatic && this.isPropertyKey(key, 'constructor')) {
              if (kind !== 'method' || !method || value && value.generator) {
                this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);
              }

              if (hasConstructor.value) {
                this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);
              } else {
                hasConstructor.value = true;
              }

              kind = 'constructor';
            }
          }

          return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));
        };

        Parser.prototype.parseClassElementList = function () {
          var body = [];
          var hasConstructor = {
            value: false
          };
          this.expect('{');

          while (!this.match('}')) {
            if (this.match(';')) {
              this.nextToken();
            } else {
              body.push(this.parseClassElement(hasConstructor));
            }
          }

          this.expect('}');
          return body;
        };

        Parser.prototype.parseClassBody = function () {
          var node = this.createNode();
          var elementList = this.parseClassElementList();
          return this.finalize(node, new Node.ClassBody(elementList));
        };

        Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {
          var node = this.createNode();
          var previousStrict = this.context.strict;
          this.context.strict = true;
          this.expectKeyword('class');
          var id = identifierIsOptional && this.lookahead.type !== 3
          /* Identifier */
          ? null : this.parseVariableIdentifier();
          var superClass = null;

          if (this.matchKeyword('extends')) {
            this.nextToken();
            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
          }

          var classBody = this.parseClassBody();
          this.context.strict = previousStrict;
          return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));
        };

        Parser.prototype.parseClassExpression = function () {
          var node = this.createNode();
          var previousStrict = this.context.strict;
          this.context.strict = true;
          this.expectKeyword('class');
          var id = this.lookahead.type === 3
          /* Identifier */
          ? this.parseVariableIdentifier() : null;
          var superClass = null;

          if (this.matchKeyword('extends')) {
            this.nextToken();
            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
          }

          var classBody = this.parseClassBody();
          this.context.strict = previousStrict;
          return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));
        }; // https://tc39.github.io/ecma262/#sec-scripts
        // https://tc39.github.io/ecma262/#sec-modules


        Parser.prototype.parseModule = function () {
          this.context.strict = true;
          this.context.isModule = true;
          this.scanner.isModule = true;
          var node = this.createNode();
          var body = this.parseDirectivePrologues();

          while (this.lookahead.type !== 2
          /* EOF */
          ) {
            body.push(this.parseStatementListItem());
          }

          return this.finalize(node, new Node.Module(body));
        };

        Parser.prototype.parseScript = function () {
          var node = this.createNode();
          var body = this.parseDirectivePrologues();

          while (this.lookahead.type !== 2
          /* EOF */
          ) {
            body.push(this.parseStatementListItem());
          }

          return this.finalize(node, new Node.Script(body));
        }; // https://tc39.github.io/ecma262/#sec-imports


        Parser.prototype.parseModuleSpecifier = function () {
          var node = this.createNode();

          if (this.lookahead.type !== 8
          /* StringLiteral */
          ) {
            this.throwError(messages_1.Messages.InvalidModuleSpecifier);
          }

          var token = this.nextToken();
          var raw = this.getTokenRaw(token);
          return this.finalize(node, new Node.Literal(token.value, raw));
        }; // import {<foo as bar>} ...;


        Parser.prototype.parseImportSpecifier = function () {
          var node = this.createNode();
          var imported;
          var local;

          if (this.lookahead.type === 3
          /* Identifier */
          ) {
            imported = this.parseVariableIdentifier();
            local = imported;

            if (this.matchContextualKeyword('as')) {
              this.nextToken();
              local = this.parseVariableIdentifier();
            }
          } else {
            imported = this.parseIdentifierName();
            local = imported;

            if (this.matchContextualKeyword('as')) {
              this.nextToken();
              local = this.parseVariableIdentifier();
            } else {
              this.throwUnexpectedToken(this.nextToken());
            }
          }

          return this.finalize(node, new Node.ImportSpecifier(local, imported));
        }; // {foo, bar as bas}


        Parser.prototype.parseNamedImports = function () {
          this.expect('{');
          var specifiers = [];

          while (!this.match('}')) {
            specifiers.push(this.parseImportSpecifier());

            if (!this.match('}')) {
              this.expect(',');
            }
          }

          this.expect('}');
          return specifiers;
        }; // import <foo> ...;


        Parser.prototype.parseImportDefaultSpecifier = function () {
          var node = this.createNode();
          var local = this.parseIdentifierName();
          return this.finalize(node, new Node.ImportDefaultSpecifier(local));
        }; // import <* as foo> ...;


        Parser.prototype.parseImportNamespaceSpecifier = function () {
          var node = this.createNode();
          this.expect('*');

          if (!this.matchContextualKeyword('as')) {
            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);
          }

          this.nextToken();
          var local = this.parseIdentifierName();
          return this.finalize(node, new Node.ImportNamespaceSpecifier(local));
        };

        Parser.prototype.parseImportDeclaration = function () {
          if (this.context.inFunctionBody) {
            this.throwError(messages_1.Messages.IllegalImportDeclaration);
          }

          var node = this.createNode();
          this.expectKeyword('import');
          var src;
          var specifiers = [];

          if (this.lookahead.type === 8
          /* StringLiteral */
          ) {
            // import 'foo';
            src = this.parseModuleSpecifier();
          } else {
            if (this.match('{')) {
              // import {bar}
              specifiers = specifiers.concat(this.parseNamedImports());
            } else if (this.match('*')) {
              // import * as foo
              specifiers.push(this.parseImportNamespaceSpecifier());
            } else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {
              // import foo
              specifiers.push(this.parseImportDefaultSpecifier());

              if (this.match(',')) {
                this.nextToken();

                if (this.match('*')) {
                  // import foo, * as foo
                  specifiers.push(this.parseImportNamespaceSpecifier());
                } else if (this.match('{')) {
                  // import foo, {bar}
                  specifiers = specifiers.concat(this.parseNamedImports());
                } else {
                  this.throwUnexpectedToken(this.lookahead);
                }
              }
            } else {
              this.throwUnexpectedToken(this.nextToken());
            }

            if (!this.matchContextualKeyword('from')) {
              var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
              this.throwError(message, this.lookahead.value);
            }

            this.nextToken();
            src = this.parseModuleSpecifier();
          }

          this.consumeSemicolon();
          return this.finalize(node, new Node.ImportDeclaration(specifiers, src));
        }; // https://tc39.github.io/ecma262/#sec-exports


        Parser.prototype.parseExportSpecifier = function () {
          var node = this.createNode();
          var local = this.parseIdentifierName();
          var exported = local;

          if (this.matchContextualKeyword('as')) {
            this.nextToken();
            exported = this.parseIdentifierName();
          }

          return this.finalize(node, new Node.ExportSpecifier(local, exported));
        };

        Parser.prototype.parseExportDeclaration = function () {
          if (this.context.inFunctionBody) {
            this.throwError(messages_1.Messages.IllegalExportDeclaration);
          }

          var node = this.createNode();
          this.expectKeyword('export');
          var exportDeclaration;

          if (this.matchKeyword('default')) {
            // export default ...
            this.nextToken();

            if (this.matchKeyword('function')) {
              // export default function foo () {}
              // export default function () {}
              var declaration = this.parseFunctionDeclaration(true);
              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
            } else if (this.matchKeyword('class')) {
              // export default class foo {}
              var declaration = this.parseClassDeclaration(true);
              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
            } else if (this.matchContextualKeyword('async')) {
              // export default async function f () {}
              // export default async function () {}
              // export default async x => x
              var declaration = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();
              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
            } else {
              if (this.matchContextualKeyword('from')) {
                this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);
              } // export default {};
              // export default [];
              // export default (1 + 2);


              var declaration = this.match('{') ? this.parseObjectInitializer() : this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();
              this.consumeSemicolon();
              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
            }
          } else if (this.match('*')) {
            // export * from 'foo';
            this.nextToken();

            if (!this.matchContextualKeyword('from')) {
              var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
              this.throwError(message, this.lookahead.value);
            }

            this.nextToken();
            var src = this.parseModuleSpecifier();
            this.consumeSemicolon();
            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));
          } else if (this.lookahead.type === 4
          /* Keyword */
          ) {
            // export var f = 1;
            var declaration = void 0;

            switch (this.lookahead.value) {
              case 'let':
              case 'const':
                declaration = this.parseLexicalDeclaration({
                  inFor: false
                });
                break;

              case 'var':
              case 'class':
              case 'function':
                declaration = this.parseStatementListItem();
                break;

              default:
                this.throwUnexpectedToken(this.lookahead);
            }

            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
          } else if (this.matchAsyncFunction()) {
            var declaration = this.parseFunctionDeclaration();
            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
          } else {
            var specifiers = [];
            var source = null;
            var isExportFromIdentifier = false;
            this.expect('{');

            while (!this.match('}')) {
              isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');
              specifiers.push(this.parseExportSpecifier());

              if (!this.match('}')) {
                this.expect(',');
              }
            }

            this.expect('}');

            if (this.matchContextualKeyword('from')) {
              // export {default} from 'foo';
              // export {foo} from 'foo';
              this.nextToken();
              source = this.parseModuleSpecifier();
              this.consumeSemicolon();
            } else if (isExportFromIdentifier) {
              // export {default}; // missing fromClause
              var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
              this.throwError(message, this.lookahead.value);
            } else {
              // export {foo};
              this.consumeSemicolon();
            }

            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));
          }

          return exportDeclaration;
        };

        return Parser;
      }();

      exports.Parser = Parser;
      /***/
    },
    /* 9 */

    /***/
    function (module, exports) {
      "use strict"; // Ensure the condition is true, otherwise throw an error.
      // This is only to have a better contract semantic, i.e. another safety net
      // to catch a logic error. The condition shall be fulfilled in normal case.
      // Do NOT use this to enforce a certain condition on any user input.

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      function assert(condition, message) {
        /* istanbul ignore if */
        if (!condition) {
          throw new Error('ASSERT: ' + message);
        }
      }

      exports.assert = assert;
      /***/
    },
    /* 10 */

    /***/
    function (module, exports) {
      "use strict";
      /* tslint:disable:max-classes-per-file */

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var ErrorHandler = function () {
        function ErrorHandler() {
          this.errors = [];
          this.tolerant = false;
        }

        ErrorHandler.prototype.recordError = function (error) {
          this.errors.push(error);
        };

        ErrorHandler.prototype.tolerate = function (error) {
          if (this.tolerant) {
            this.recordError(error);
          } else {
            throw error;
          }
        };

        ErrorHandler.prototype.constructError = function (msg, column) {
          var error = new Error(msg);

          try {
            throw error;
          } catch (base) {
            /* istanbul ignore else */
            if (Object.create && Object.defineProperty) {
              error = Object.create(base);
              Object.defineProperty(error, 'column', {
                value: column
              });
            }
          }
          /* istanbul ignore next */


          return error;
        };

        ErrorHandler.prototype.createError = function (index, line, col, description) {
          var msg = 'Line ' + line + ': ' + description;
          var error = this.constructError(msg, col);
          error.index = index;
          error.lineNumber = line;
          error.description = description;
          return error;
        };

        ErrorHandler.prototype.throwError = function (index, line, col, description) {
          throw this.createError(index, line, col, description);
        };

        ErrorHandler.prototype.tolerateError = function (index, line, col, description) {
          var error = this.createError(index, line, col, description);

          if (this.tolerant) {
            this.recordError(error);
          } else {
            throw error;
          }
        };

        return ErrorHandler;
      }();

      exports.ErrorHandler = ErrorHandler;
      /***/
    },
    /* 11 */

    /***/
    function (module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      }); // Error messages should be identical to V8.

      exports.Messages = {
        BadGetterArity: 'Getter must not have any formal parameters',
        BadSetterArity: 'Setter must have exactly one formal parameter',
        BadSetterRestParameter: 'Setter function argument must not be a rest parameter',
        ConstructorIsAsync: 'Class constructor may not be an async method',
        ConstructorSpecialMethod: 'Class constructor may not be an accessor',
        DeclarationMissingInitializer: 'Missing initializer in %0 declaration',
        DefaultRestParameter: 'Unexpected token =',
        DuplicateBinding: 'Duplicate binding %0',
        DuplicateConstructor: 'A class may only have one constructor',
        DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',
        ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer',
        GeneratorInLegacyContext: 'Generator declarations are not allowed in legacy contexts',
        IllegalBreak: 'Illegal break statement',
        IllegalContinue: 'Illegal continue statement',
        IllegalExportDeclaration: 'Unexpected token',
        IllegalImportDeclaration: 'Unexpected token',
        IllegalLanguageModeDirective: 'Illegal \'use strict\' directive in function with non-simple parameter list',
        IllegalReturn: 'Illegal return statement',
        InvalidEscapedReservedWord: 'Keyword must not contain escaped characters',
        InvalidHexEscapeSequence: 'Invalid hexadecimal escape sequence',
        InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
        InvalidLHSInForIn: 'Invalid left-hand side in for-in',
        InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',
        InvalidModuleSpecifier: 'Unexpected token',
        InvalidRegExp: 'Invalid regular expression',
        LetInLexicalBinding: 'let is disallowed as a lexically bound name',
        MissingFromClause: 'Unexpected token',
        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
        NewlineAfterThrow: 'Illegal newline after throw',
        NoAsAfterImportNamespace: 'Unexpected token',
        NoCatchOrFinally: 'Missing catch or finally after try',
        ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',
        Redeclaration: '%0 \'%1\' has already been declared',
        StaticPrototype: 'Classes may not have static property named prototype',
        StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
        StrictDelete: 'Delete of an unqualified identifier in strict mode.',
        StrictFunction: 'In strict mode code, functions can only be declared at top level or inside a block',
        StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
        StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
        StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
        StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
        StrictModeWith: 'Strict mode code may not include a with statement',
        StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
        StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
        StrictReservedWord: 'Use of future reserved word in strict mode',
        StrictVarName: 'Variable name may not be eval or arguments in strict mode',
        TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',
        UnexpectedEOS: 'Unexpected end of input',
        UnexpectedIdentifier: 'Unexpected identifier',
        UnexpectedNumber: 'Unexpected number',
        UnexpectedReserved: 'Unexpected reserved word',
        UnexpectedString: 'Unexpected string',
        UnexpectedTemplate: 'Unexpected quasi %0',
        UnexpectedToken: 'Unexpected token %0',
        UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',
        UnknownLabel: 'Undefined label \'%0\'',
        UnterminatedRegExp: 'Invalid regular expression: missing /'
      };
      /***/
    },
    /* 12 */

    /***/
    function (module, exports, __nested_webpack_require_228499__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var assert_1 = __nested_webpack_require_228499__(9);

      var character_1 = __nested_webpack_require_228499__(4);

      var messages_1 = __nested_webpack_require_228499__(11);

      function hexValue(ch) {
        return '0123456789abcdef'.indexOf(ch.toLowerCase());
      }

      function octalValue(ch) {
        return '01234567'.indexOf(ch);
      }

      var Scanner = function () {
        function Scanner(code, handler) {
          this.source = code;
          this.errorHandler = handler;
          this.trackComment = false;
          this.isModule = false;
          this.length = code.length;
          this.index = 0;
          this.lineNumber = code.length > 0 ? 1 : 0;
          this.lineStart = 0;
          this.curlyStack = [];
        }

        Scanner.prototype.saveState = function () {
          return {
            index: this.index,
            lineNumber: this.lineNumber,
            lineStart: this.lineStart
          };
        };

        Scanner.prototype.restoreState = function (state) {
          this.index = state.index;
          this.lineNumber = state.lineNumber;
          this.lineStart = state.lineStart;
        };

        Scanner.prototype.eof = function () {
          return this.index >= this.length;
        };

        Scanner.prototype.throwUnexpectedToken = function (message) {
          if (message === void 0) {
            message = messages_1.Messages.UnexpectedTokenIllegal;
          }

          return this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
        };

        Scanner.prototype.tolerateUnexpectedToken = function (message) {
          if (message === void 0) {
            message = messages_1.Messages.UnexpectedTokenIllegal;
          }

          this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
        }; // https://tc39.github.io/ecma262/#sec-comments


        Scanner.prototype.skipSingleLineComment = function (offset) {
          var comments = [];
          var start, loc;

          if (this.trackComment) {
            comments = [];
            start = this.index - offset;
            loc = {
              start: {
                line: this.lineNumber,
                column: this.index - this.lineStart - offset
              },
              end: {}
            };
          }

          while (!this.eof()) {
            var ch = this.source.charCodeAt(this.index);
            ++this.index;

            if (character_1.Character.isLineTerminator(ch)) {
              if (this.trackComment) {
                loc.end = {
                  line: this.lineNumber,
                  column: this.index - this.lineStart - 1
                };
                var entry = {
                  multiLine: false,
                  slice: [start + offset, this.index - 1],
                  range: [start, this.index - 1],
                  loc: loc
                };
                comments.push(entry);
              }

              if (ch === 13 && this.source.charCodeAt(this.index) === 10) {
                ++this.index;
              }

              ++this.lineNumber;
              this.lineStart = this.index;
              return comments;
            }
          }

          if (this.trackComment) {
            loc.end = {
              line: this.lineNumber,
              column: this.index - this.lineStart
            };
            var entry = {
              multiLine: false,
              slice: [start + offset, this.index],
              range: [start, this.index],
              loc: loc
            };
            comments.push(entry);
          }

          return comments;
        };

        Scanner.prototype.skipMultiLineComment = function () {
          var comments = [];
          var start, loc;

          if (this.trackComment) {
            comments = [];
            start = this.index - 2;
            loc = {
              start: {
                line: this.lineNumber,
                column: this.index - this.lineStart - 2
              },
              end: {}
            };
          }

          while (!this.eof()) {
            var ch = this.source.charCodeAt(this.index);

            if (character_1.Character.isLineTerminator(ch)) {
              if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {
                ++this.index;
              }

              ++this.lineNumber;
              ++this.index;
              this.lineStart = this.index;
            } else if (ch === 0x2A) {
              // Block comment ends with '*/'.
              if (this.source.charCodeAt(this.index + 1) === 0x2F) {
                this.index += 2;

                if (this.trackComment) {
                  loc.end = {
                    line: this.lineNumber,
                    column: this.index - this.lineStart
                  };
                  var entry = {
                    multiLine: true,
                    slice: [start + 2, this.index - 2],
                    range: [start, this.index],
                    loc: loc
                  };
                  comments.push(entry);
                }

                return comments;
              }

              ++this.index;
            } else {
              ++this.index;
            }
          } // Ran off the end of the file - the whole thing is a comment


          if (this.trackComment) {
            loc.end = {
              line: this.lineNumber,
              column: this.index - this.lineStart
            };
            var entry = {
              multiLine: true,
              slice: [start + 2, this.index],
              range: [start, this.index],
              loc: loc
            };
            comments.push(entry);
          }

          this.tolerateUnexpectedToken();
          return comments;
        };

        Scanner.prototype.scanComments = function () {
          var comments;

          if (this.trackComment) {
            comments = [];
          }

          var start = this.index === 0;

          while (!this.eof()) {
            var ch = this.source.charCodeAt(this.index);

            if (character_1.Character.isWhiteSpace(ch)) {
              ++this.index;
            } else if (character_1.Character.isLineTerminator(ch)) {
              ++this.index;

              if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {
                ++this.index;
              }

              ++this.lineNumber;
              this.lineStart = this.index;
              start = true;
            } else if (ch === 0x2F) {
              ch = this.source.charCodeAt(this.index + 1);

              if (ch === 0x2F) {
                this.index += 2;
                var comment = this.skipSingleLineComment(2);

                if (this.trackComment) {
                  comments = comments.concat(comment);
                }

                start = true;
              } else if (ch === 0x2A) {
                this.index += 2;
                var comment = this.skipMultiLineComment();

                if (this.trackComment) {
                  comments = comments.concat(comment);
                }
              } else {
                break;
              }
            } else if (start && ch === 0x2D) {
              // U+003E is '>'
              if (this.source.charCodeAt(this.index + 1) === 0x2D && this.source.charCodeAt(this.index + 2) === 0x3E) {
                // '-->' is a single-line comment
                this.index += 3;
                var comment = this.skipSingleLineComment(3);

                if (this.trackComment) {
                  comments = comments.concat(comment);
                }
              } else {
                break;
              }
            } else if (ch === 0x3C && !this.isModule) {
              if (this.source.slice(this.index + 1, this.index + 4) === '!--') {
                this.index += 4; // `<!--`

                var comment = this.skipSingleLineComment(4);

                if (this.trackComment) {
                  comments = comments.concat(comment);
                }
              } else {
                break;
              }
            } else {
              break;
            }
          }

          return comments;
        }; // https://tc39.github.io/ecma262/#sec-future-reserved-words


        Scanner.prototype.isFutureReservedWord = function (id) {
          switch (id) {
            case 'enum':
            case 'export':
            case 'import':
            case 'super':
              return true;

            default:
              return false;
          }
        };

        Scanner.prototype.isStrictModeReservedWord = function (id) {
          switch (id) {
            case 'implements':
            case 'interface':
            case 'package':
            case 'private':
            case 'protected':
            case 'public':
            case 'static':
            case 'yield':
            case 'let':
              return true;

            default:
              return false;
          }
        };

        Scanner.prototype.isRestrictedWord = function (id) {
          return id === 'eval' || id === 'arguments';
        }; // https://tc39.github.io/ecma262/#sec-keywords


        Scanner.prototype.isKeyword = function (id) {
          switch (id.length) {
            case 2:
              return id === 'if' || id === 'in' || id === 'do';

            case 3:
              return id === 'var' || id === 'for' || id === 'new' || id === 'try' || id === 'let';

            case 4:
              return id === 'this' || id === 'else' || id === 'case' || id === 'void' || id === 'with' || id === 'enum';

            case 5:
              return id === 'while' || id === 'break' || id === 'catch' || id === 'throw' || id === 'const' || id === 'yield' || id === 'class' || id === 'super';

            case 6:
              return id === 'return' || id === 'typeof' || id === 'delete' || id === 'switch' || id === 'export' || id === 'import';

            case 7:
              return id === 'default' || id === 'finally' || id === 'extends';

            case 8:
              return id === 'function' || id === 'continue' || id === 'debugger';

            case 10:
              return id === 'instanceof';

            default:
              return false;
          }
        };

        Scanner.prototype.codePointAt = function (i) {
          var cp = this.source.charCodeAt(i);

          if (cp >= 0xD800 && cp <= 0xDBFF) {
            var second = this.source.charCodeAt(i + 1);

            if (second >= 0xDC00 && second <= 0xDFFF) {
              var first = cp;
              cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
            }
          }

          return cp;
        };

        Scanner.prototype.scanHexEscape = function (prefix) {
          var len = prefix === 'u' ? 4 : 2;
          var code = 0;

          for (var i = 0; i < len; ++i) {
            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
              code = code * 16 + hexValue(this.source[this.index++]);
            } else {
              return null;
            }
          }

          return String.fromCharCode(code);
        };

        Scanner.prototype.scanUnicodeCodePointEscape = function () {
          var ch = this.source[this.index];
          var code = 0; // At least, one hex digit is required.

          if (ch === '}') {
            this.throwUnexpectedToken();
          }

          while (!this.eof()) {
            ch = this.source[this.index++];

            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {
              break;
            }

            code = code * 16 + hexValue(ch);
          }

          if (code > 0x10FFFF || ch !== '}') {
            this.throwUnexpectedToken();
          }

          return character_1.Character.fromCodePoint(code);
        };

        Scanner.prototype.getIdentifier = function () {
          var start = this.index++;

          while (!this.eof()) {
            var ch = this.source.charCodeAt(this.index);

            if (ch === 0x5C) {
              // Blackslash (U+005C) marks Unicode escape sequence.
              this.index = start;
              return this.getComplexIdentifier();
            } else if (ch >= 0xD800 && ch < 0xDFFF) {
              // Need to handle surrogate pairs.
              this.index = start;
              return this.getComplexIdentifier();
            }

            if (character_1.Character.isIdentifierPart(ch)) {
              ++this.index;
            } else {
              break;
            }
          }

          return this.source.slice(start, this.index);
        };

        Scanner.prototype.getComplexIdentifier = function () {
          var cp = this.codePointAt(this.index);
          var id = character_1.Character.fromCodePoint(cp);
          this.index += id.length; // '\u' (U+005C, U+0075) denotes an escaped character.

          var ch;

          if (cp === 0x5C) {
            if (this.source.charCodeAt(this.index) !== 0x75) {
              this.throwUnexpectedToken();
            }

            ++this.index;

            if (this.source[this.index] === '{') {
              ++this.index;
              ch = this.scanUnicodeCodePointEscape();
            } else {
              ch = this.scanHexEscape('u');

              if (ch === null || ch === '\\' || !character_1.Character.isIdentifierStart(ch.charCodeAt(0))) {
                this.throwUnexpectedToken();
              }
            }

            id = ch;
          }

          while (!this.eof()) {
            cp = this.codePointAt(this.index);

            if (!character_1.Character.isIdentifierPart(cp)) {
              break;
            }

            ch = character_1.Character.fromCodePoint(cp);
            id += ch;
            this.index += ch.length; // '\u' (U+005C, U+0075) denotes an escaped character.

            if (cp === 0x5C) {
              id = id.substr(0, id.length - 1);

              if (this.source.charCodeAt(this.index) !== 0x75) {
                this.throwUnexpectedToken();
              }

              ++this.index;

              if (this.source[this.index] === '{') {
                ++this.index;
                ch = this.scanUnicodeCodePointEscape();
              } else {
                ch = this.scanHexEscape('u');

                if (ch === null || ch === '\\' || !character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
                  this.throwUnexpectedToken();
                }
              }

              id += ch;
            }
          }

          return id;
        };

        Scanner.prototype.octalToDecimal = function (ch) {
          // \0 is not octal escape sequence
          var octal = ch !== '0';
          var code = octalValue(ch);

          if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
            octal = true;
            code = code * 8 + octalValue(this.source[this.index++]); // 3 digits are only allowed when string starts
            // with 0, 1, 2, 3

            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
              code = code * 8 + octalValue(this.source[this.index++]);
            }
          }

          return {
            code: code,
            octal: octal
          };
        }; // https://tc39.github.io/ecma262/#sec-names-and-keywords


        Scanner.prototype.scanIdentifier = function () {
          var type;
          var start = this.index; // Backslash (U+005C) starts an escaped character.

          var id = this.source.charCodeAt(start) === 0x5C ? this.getComplexIdentifier() : this.getIdentifier(); // There is no keyword or literal with only one character.
          // Thus, it must be an identifier.

          if (id.length === 1) {
            type = 3
            /* Identifier */
            ;
          } else if (this.isKeyword(id)) {
            type = 4
            /* Keyword */
            ;
          } else if (id === 'null') {
            type = 5
            /* NullLiteral */
            ;
          } else if (id === 'true' || id === 'false') {
            type = 1
            /* BooleanLiteral */
            ;
          } else {
            type = 3
            /* Identifier */
            ;
          }

          if (type !== 3
          /* Identifier */
          && start + id.length !== this.index) {
            var restore = this.index;
            this.index = start;
            this.tolerateUnexpectedToken(messages_1.Messages.InvalidEscapedReservedWord);
            this.index = restore;
          }

          return {
            type: type,
            value: id,
            lineNumber: this.lineNumber,
            lineStart: this.lineStart,
            start: start,
            end: this.index
          };
        }; // https://tc39.github.io/ecma262/#sec-punctuators


        Scanner.prototype.scanPunctuator = function () {
          var start = this.index; // Check for most common single-character punctuators.

          var str = this.source[this.index];

          switch (str) {
            case '(':
            case '{':
              if (str === '{') {
                this.curlyStack.push('{');
              }

              ++this.index;
              break;

            case '.':
              ++this.index;

              if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {
                // Spread operator: ...
                this.index += 2;
                str = '...';
              }

              break;

            case '}':
              ++this.index;
              this.curlyStack.pop();
              break;

            case ')':
            case ';':
            case ',':
            case '[':
            case ']':
            case ':':
            case '?':
            case '~':
              ++this.index;
              break;

            default:
              // 4-character punctuator.
              str = this.source.substr(this.index, 4);

              if (str === '>>>=') {
                this.index += 4;
              } else {
                // 3-character punctuators.
                str = str.substr(0, 3);

                if (str === '===' || str === '!==' || str === '>>>' || str === '<<=' || str === '>>=' || str === '**=') {
                  this.index += 3;
                } else {
                  // 2-character punctuators.
                  str = str.substr(0, 2);

                  if (str === '&&' || str === '||' || str === '==' || str === '!=' || str === '+=' || str === '-=' || str === '*=' || str === '/=' || str === '++' || str === '--' || str === '<<' || str === '>>' || str === '&=' || str === '|=' || str === '^=' || str === '%=' || str === '<=' || str === '>=' || str === '=>' || str === '**') {
                    this.index += 2;
                  } else {
                    // 1-character punctuators.
                    str = this.source[this.index];

                    if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {
                      ++this.index;
                    }
                  }
                }
              }

          }

          if (this.index === start) {
            this.throwUnexpectedToken();
          }

          return {
            type: 7
            /* Punctuator */
            ,
            value: str,
            lineNumber: this.lineNumber,
            lineStart: this.lineStart,
            start: start,
            end: this.index
          };
        }; // https://tc39.github.io/ecma262/#sec-literals-numeric-literals


        Scanner.prototype.scanHexLiteral = function (start) {
          var num = '';

          while (!this.eof()) {
            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
              break;
            }

            num += this.source[this.index++];
          }

          if (num.length === 0) {
            this.throwUnexpectedToken();
          }

          if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
            this.throwUnexpectedToken();
          }

          return {
            type: 6
            /* NumericLiteral */
            ,
            value: parseInt('0x' + num, 16),
            lineNumber: this.lineNumber,
            lineStart: this.lineStart,
            start: start,
            end: this.index
          };
        };

        Scanner.prototype.scanBinaryLiteral = function (start) {
          var num = '';
          var ch;

          while (!this.eof()) {
            ch = this.source[this.index];

            if (ch !== '0' && ch !== '1') {
              break;
            }

            num += this.source[this.index++];
          }

          if (num.length === 0) {
            // only 0b or 0B
            this.throwUnexpectedToken();
          }

          if (!this.eof()) {
            ch = this.source.charCodeAt(this.index);
            /* istanbul ignore else */

            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {
              this.throwUnexpectedToken();
            }
          }

          return {
            type: 6
            /* NumericLiteral */
            ,
            value: parseInt(num, 2),
            lineNumber: this.lineNumber,
            lineStart: this.lineStart,
            start: start,
            end: this.index
          };
        };

        Scanner.prototype.scanOctalLiteral = function (prefix, start) {
          var num = '';
          var octal = false;

          if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {
            octal = true;
            num = '0' + this.source[this.index++];
          } else {
            ++this.index;
          }

          while (!this.eof()) {
            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
              break;
            }

            num += this.source[this.index++];
          }

          if (!octal && num.length === 0) {
            // only 0o or 0O
            this.throwUnexpectedToken();
          }

          if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
            this.throwUnexpectedToken();
          }

          return {
            type: 6
            /* NumericLiteral */
            ,
            value: parseInt(num, 8),
            octal: octal,
            lineNumber: this.lineNumber,
            lineStart: this.lineStart,
            start: start,
            end: this.index
          };
        };

        Scanner.prototype.isImplicitOctalLiteral = function () {
          // Implicit octal, unless there is a non-octal digit.
          // (Annex B.1.1 on Numeric Literals)
          for (var i = this.index + 1; i < this.length; ++i) {
            var ch = this.source[i];

            if (ch === '8' || ch === '9') {
              return false;
            }

            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
              return true;
            }
          }

          return true;
        };

        Scanner.prototype.scanNumericLiteral = function () {
          var start = this.index;
          var ch = this.source[start];
          assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || ch === '.', 'Numeric literal must start with a decimal digit or a decimal point');
          var num = '';

          if (ch !== '.') {
            num = this.source[this.index++];
            ch = this.source[this.index]; // Hex number starts with '0x'.
            // Octal number starts with '0'.
            // Octal number in ES6 starts with '0o'.
            // Binary number in ES6 starts with '0b'.

            if (num === '0') {
              if (ch === 'x' || ch === 'X') {
                ++this.index;
                return this.scanHexLiteral(start);
              }

              if (ch === 'b' || ch === 'B') {
                ++this.index;
                return this.scanBinaryLiteral(start);
              }

              if (ch === 'o' || ch === 'O') {
                return this.scanOctalLiteral(ch, start);
              }

              if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
                if (this.isImplicitOctalLiteral()) {
                  return this.scanOctalLiteral(ch, start);
                }
              }
            }

            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
              num += this.source[this.index++];
            }

            ch = this.source[this.index];
          }

          if (ch === '.') {
            num += this.source[this.index++];

            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
              num += this.source[this.index++];
            }

            ch = this.source[this.index];
          }

          if (ch === 'e' || ch === 'E') {
            num += this.source[this.index++];
            ch = this.source[this.index];

            if (ch === '+' || ch === '-') {
              num += this.source[this.index++];
            }

            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
              while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
                num += this.source[this.index++];
              }
            } else {
              this.throwUnexpectedToken();
            }
          }

          if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
            this.throwUnexpectedToken();
          }

          return {
            type: 6
            /* NumericLiteral */
            ,
            value: parseFloat(num),
            lineNumber: this.lineNumber,
            lineStart: this.lineStart,
            start: start,
            end: this.index
          };
        }; // https://tc39.github.io/ecma262/#sec-literals-string-literals


        Scanner.prototype.scanStringLiteral = function () {
          var start = this.index;
          var quote = this.source[start];
          assert_1.assert(quote === '\'' || quote === '"', 'String literal must starts with a quote');
          ++this.index;
          var octal = false;
          var str = '';

          while (!this.eof()) {
            var ch = this.source[this.index++];

            if (ch === quote) {
              quote = '';
              break;
            } else if (ch === '\\') {
              ch = this.source[this.index++];

              if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                switch (ch) {
                  case 'u':
                    if (this.source[this.index] === '{') {
                      ++this.index;
                      str += this.scanUnicodeCodePointEscape();
                    } else {
                      var unescaped_1 = this.scanHexEscape(ch);

                      if (unescaped_1 === null) {
                        this.throwUnexpectedToken();
                      }

                      str += unescaped_1;
                    }

                    break;

                  case 'x':
                    var unescaped = this.scanHexEscape(ch);

                    if (unescaped === null) {
                      this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
                    }

                    str += unescaped;
                    break;

                  case 'n':
                    str += '\n';
                    break;

                  case 'r':
                    str += '\r';
                    break;

                  case 't':
                    str += '\t';
                    break;

                  case 'b':
                    str += '\b';
                    break;

                  case 'f':
                    str += '\f';
                    break;

                  case 'v':
                    str += '\x0B';
                    break;

                  case '8':
                  case '9':
                    str += ch;
                    this.tolerateUnexpectedToken();
                    break;

                  default:
                    if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
                      var octToDec = this.octalToDecimal(ch);
                      octal = octToDec.octal || octal;
                      str += String.fromCharCode(octToDec.code);
                    } else {
                      str += ch;
                    }

                    break;
                }
              } else {
                ++this.lineNumber;

                if (ch === '\r' && this.source[this.index] === '\n') {
                  ++this.index;
                }

                this.lineStart = this.index;
              }
            } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
              break;
            } else {
              str += ch;
            }
          }

          if (quote !== '') {
            this.index = start;
            this.throwUnexpectedToken();
          }

          return {
            type: 8
            /* StringLiteral */
            ,
            value: str,
            octal: octal,
            lineNumber: this.lineNumber,
            lineStart: this.lineStart,
            start: start,
            end: this.index
          };
        }; // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components


        Scanner.prototype.scanTemplate = function () {
          var cooked = '';
          var terminated = false;
          var start = this.index;
          var head = this.source[start] === '`';
          var tail = false;
          var rawOffset = 2;
          ++this.index;

          while (!this.eof()) {
            var ch = this.source[this.index++];

            if (ch === '`') {
              rawOffset = 1;
              tail = true;
              terminated = true;
              break;
            } else if (ch === '$') {
              if (this.source[this.index] === '{') {
                this.curlyStack.push('${');
                ++this.index;
                terminated = true;
                break;
              }

              cooked += ch;
            } else if (ch === '\\') {
              ch = this.source[this.index++];

              if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                switch (ch) {
                  case 'n':
                    cooked += '\n';
                    break;

                  case 'r':
                    cooked += '\r';
                    break;

                  case 't':
                    cooked += '\t';
                    break;

                  case 'u':
                    if (this.source[this.index] === '{') {
                      ++this.index;
                      cooked += this.scanUnicodeCodePointEscape();
                    } else {
                      var restore = this.index;
                      var unescaped_2 = this.scanHexEscape(ch);

                      if (unescaped_2 !== null) {
                        cooked += unescaped_2;
                      } else {
                        this.index = restore;
                        cooked += ch;
                      }
                    }

                    break;

                  case 'x':
                    var unescaped = this.scanHexEscape(ch);

                    if (unescaped === null) {
                      this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
                    }

                    cooked += unescaped;
                    break;

                  case 'b':
                    cooked += '\b';
                    break;

                  case 'f':
                    cooked += '\f';
                    break;

                  case 'v':
                    cooked += '\v';
                    break;

                  default:
                    if (ch === '0') {
                      if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
                        // Illegal: \01 \02 and so on
                        this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
                      }

                      cooked += '\0';
                    } else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
                      // Illegal: \1 \2
                      this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
                    } else {
                      cooked += ch;
                    }

                    break;
                }
              } else {
                ++this.lineNumber;

                if (ch === '\r' && this.source[this.index] === '\n') {
                  ++this.index;
                }

                this.lineStart = this.index;
              }
            } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
              ++this.lineNumber;

              if (ch === '\r' && this.source[this.index] === '\n') {
                ++this.index;
              }

              this.lineStart = this.index;
              cooked += '\n';
            } else {
              cooked += ch;
            }
          }

          if (!terminated) {
            this.throwUnexpectedToken();
          }

          if (!head) {
            this.curlyStack.pop();
          }

          return {
            type: 10
            /* Template */
            ,
            value: this.source.slice(start + 1, this.index - rawOffset),
            cooked: cooked,
            head: head,
            tail: tail,
            lineNumber: this.lineNumber,
            lineStart: this.lineStart,
            start: start,
            end: this.index
          };
        }; // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals


        Scanner.prototype.testRegExp = function (pattern, flags) {
          // The BMP character to use as a replacement for astral symbols when
          // translating an ES6 "u"-flagged pattern to an ES5-compatible
          // approximation.
          // Note: replacing with '\uFFFF' enables false positives in unlikely
          // scenarios. For example, `[\u{1044f}-\u{10440}]` is an invalid
          // pattern that would not be detected by this substitution.
          var astralSubstitute = '\uFFFF';
          var tmp = pattern;
          var self = this;

          if (flags.indexOf('u') >= 0) {
            tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {
              var codePoint = parseInt($1 || $2, 16);

              if (codePoint > 0x10FFFF) {
                self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
              }

              if (codePoint <= 0xFFFF) {
                return String.fromCharCode(codePoint);
              }

              return astralSubstitute;
            }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, astralSubstitute);
          } // First, detect invalid regular expressions.


          try {
            RegExp(tmp);
          } catch (e) {
            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
          } // Return a regular expression object for this pattern-flag pair, or
          // `null` in case the current environment doesn't support the flags it
          // uses.


          try {
            return new RegExp(pattern, flags);
          } catch (exception) {
            /* istanbul ignore next */
            return null;
          }
        };

        Scanner.prototype.scanRegExpBody = function () {
          var ch = this.source[this.index];
          assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');
          var str = this.source[this.index++];
          var classMarker = false;
          var terminated = false;

          while (!this.eof()) {
            ch = this.source[this.index++];
            str += ch;

            if (ch === '\\') {
              ch = this.source[this.index++]; // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals

              if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
              }

              str += ch;
            } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
              this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
            } else if (classMarker) {
              if (ch === ']') {
                classMarker = false;
              }
            } else {
              if (ch === '/') {
                terminated = true;
                break;
              } else if (ch === '[') {
                classMarker = true;
              }
            }
          }

          if (!terminated) {
            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
          } // Exclude leading and trailing slash.


          return str.substr(1, str.length - 2);
        };

        Scanner.prototype.scanRegExpFlags = function () {
          var str = '';
          var flags = '';

          while (!this.eof()) {
            var ch = this.source[this.index];

            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
              break;
            }

            ++this.index;

            if (ch === '\\' && !this.eof()) {
              ch = this.source[this.index];

              if (ch === 'u') {
                ++this.index;
                var restore = this.index;
                var char = this.scanHexEscape('u');

                if (char !== null) {
                  flags += char;

                  for (str += '\\u'; restore < this.index; ++restore) {
                    str += this.source[restore];
                  }
                } else {
                  this.index = restore;
                  flags += 'u';
                  str += '\\u';
                }

                this.tolerateUnexpectedToken();
              } else {
                str += '\\';
                this.tolerateUnexpectedToken();
              }
            } else {
              flags += ch;
              str += ch;
            }
          }

          return flags;
        };

        Scanner.prototype.scanRegExp = function () {
          var start = this.index;
          var pattern = this.scanRegExpBody();
          var flags = this.scanRegExpFlags();
          var value = this.testRegExp(pattern, flags);
          return {
            type: 9
            /* RegularExpression */
            ,
            value: '',
            pattern: pattern,
            flags: flags,
            regex: value,
            lineNumber: this.lineNumber,
            lineStart: this.lineStart,
            start: start,
            end: this.index
          };
        };

        Scanner.prototype.lex = function () {
          if (this.eof()) {
            return {
              type: 2
              /* EOF */
              ,
              value: '',
              lineNumber: this.lineNumber,
              lineStart: this.lineStart,
              start: this.index,
              end: this.index
            };
          }

          var cp = this.source.charCodeAt(this.index);

          if (character_1.Character.isIdentifierStart(cp)) {
            return this.scanIdentifier();
          } // Very common: ( and ) and ;


          if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {
            return this.scanPunctuator();
          } // String literal starts with single quote (U+0027) or double quote (U+0022).


          if (cp === 0x27 || cp === 0x22) {
            return this.scanStringLiteral();
          } // Dot (.) U+002E can also start a floating-point number, hence the need
          // to check the next character.


          if (cp === 0x2E) {
            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {
              return this.scanNumericLiteral();
            }

            return this.scanPunctuator();
          }

          if (character_1.Character.isDecimalDigit(cp)) {
            return this.scanNumericLiteral();
          } // Template literals start with ` (U+0060) for template head
          // or } (U+007D) for template middle or template tail.


          if (cp === 0x60 || cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${') {
            return this.scanTemplate();
          } // Possible identifier start in a surrogate pair.


          if (cp >= 0xD800 && cp < 0xDFFF) {
            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {
              return this.scanIdentifier();
            }
          }

          return this.scanPunctuator();
        };

        return Scanner;
      }();

      exports.Scanner = Scanner;
      /***/
    },
    /* 13 */

    /***/
    function (module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.TokenName = {};
      exports.TokenName[1
      /* BooleanLiteral */
      ] = 'Boolean';
      exports.TokenName[2
      /* EOF */
      ] = '<end>';
      exports.TokenName[3
      /* Identifier */
      ] = 'Identifier';
      exports.TokenName[4
      /* Keyword */
      ] = 'Keyword';
      exports.TokenName[5
      /* NullLiteral */
      ] = 'Null';
      exports.TokenName[6
      /* NumericLiteral */
      ] = 'Numeric';
      exports.TokenName[7
      /* Punctuator */
      ] = 'Punctuator';
      exports.TokenName[8
      /* StringLiteral */
      ] = 'String';
      exports.TokenName[9
      /* RegularExpression */
      ] = 'RegularExpression';
      exports.TokenName[10
      /* Template */
      ] = 'Template';
      /***/
    },
    /* 14 */

    /***/
    function (module, exports) {
      "use strict"; // Generated by generate-xhtml-entities.js. DO NOT MODIFY!

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.XHTMLEntities = {
        quot: '\u0022',
        amp: '\u0026',
        apos: '\u0027',
        gt: '\u003E',
        nbsp: '\u00A0',
        iexcl: '\u00A1',
        cent: '\u00A2',
        pound: '\u00A3',
        curren: '\u00A4',
        yen: '\u00A5',
        brvbar: '\u00A6',
        sect: '\u00A7',
        uml: '\u00A8',
        copy: '\u00A9',
        ordf: '\u00AA',
        laquo: '\u00AB',
        not: '\u00AC',
        shy: '\u00AD',
        reg: '\u00AE',
        macr: '\u00AF',
        deg: '\u00B0',
        plusmn: '\u00B1',
        sup2: '\u00B2',
        sup3: '\u00B3',
        acute: '\u00B4',
        micro: '\u00B5',
        para: '\u00B6',
        middot: '\u00B7',
        cedil: '\u00B8',
        sup1: '\u00B9',
        ordm: '\u00BA',
        raquo: '\u00BB',
        frac14: '\u00BC',
        frac12: '\u00BD',
        frac34: '\u00BE',
        iquest: '\u00BF',
        Agrave: '\u00C0',
        Aacute: '\u00C1',
        Acirc: '\u00C2',
        Atilde: '\u00C3',
        Auml: '\u00C4',
        Aring: '\u00C5',
        AElig: '\u00C6',
        Ccedil: '\u00C7',
        Egrave: '\u00C8',
        Eacute: '\u00C9',
        Ecirc: '\u00CA',
        Euml: '\u00CB',
        Igrave: '\u00CC',
        Iacute: '\u00CD',
        Icirc: '\u00CE',
        Iuml: '\u00CF',
        ETH: '\u00D0',
        Ntilde: '\u00D1',
        Ograve: '\u00D2',
        Oacute: '\u00D3',
        Ocirc: '\u00D4',
        Otilde: '\u00D5',
        Ouml: '\u00D6',
        times: '\u00D7',
        Oslash: '\u00D8',
        Ugrave: '\u00D9',
        Uacute: '\u00DA',
        Ucirc: '\u00DB',
        Uuml: '\u00DC',
        Yacute: '\u00DD',
        THORN: '\u00DE',
        szlig: '\u00DF',
        agrave: '\u00E0',
        aacute: '\u00E1',
        acirc: '\u00E2',
        atilde: '\u00E3',
        auml: '\u00E4',
        aring: '\u00E5',
        aelig: '\u00E6',
        ccedil: '\u00E7',
        egrave: '\u00E8',
        eacute: '\u00E9',
        ecirc: '\u00EA',
        euml: '\u00EB',
        igrave: '\u00EC',
        iacute: '\u00ED',
        icirc: '\u00EE',
        iuml: '\u00EF',
        eth: '\u00F0',
        ntilde: '\u00F1',
        ograve: '\u00F2',
        oacute: '\u00F3',
        ocirc: '\u00F4',
        otilde: '\u00F5',
        ouml: '\u00F6',
        divide: '\u00F7',
        oslash: '\u00F8',
        ugrave: '\u00F9',
        uacute: '\u00FA',
        ucirc: '\u00FB',
        uuml: '\u00FC',
        yacute: '\u00FD',
        thorn: '\u00FE',
        yuml: '\u00FF',
        OElig: '\u0152',
        oelig: '\u0153',
        Scaron: '\u0160',
        scaron: '\u0161',
        Yuml: '\u0178',
        fnof: '\u0192',
        circ: '\u02C6',
        tilde: '\u02DC',
        Alpha: '\u0391',
        Beta: '\u0392',
        Gamma: '\u0393',
        Delta: '\u0394',
        Epsilon: '\u0395',
        Zeta: '\u0396',
        Eta: '\u0397',
        Theta: '\u0398',
        Iota: '\u0399',
        Kappa: '\u039A',
        Lambda: '\u039B',
        Mu: '\u039C',
        Nu: '\u039D',
        Xi: '\u039E',
        Omicron: '\u039F',
        Pi: '\u03A0',
        Rho: '\u03A1',
        Sigma: '\u03A3',
        Tau: '\u03A4',
        Upsilon: '\u03A5',
        Phi: '\u03A6',
        Chi: '\u03A7',
        Psi: '\u03A8',
        Omega: '\u03A9',
        alpha: '\u03B1',
        beta: '\u03B2',
        gamma: '\u03B3',
        delta: '\u03B4',
        epsilon: '\u03B5',
        zeta: '\u03B6',
        eta: '\u03B7',
        theta: '\u03B8',
        iota: '\u03B9',
        kappa: '\u03BA',
        lambda: '\u03BB',
        mu: '\u03BC',
        nu: '\u03BD',
        xi: '\u03BE',
        omicron: '\u03BF',
        pi: '\u03C0',
        rho: '\u03C1',
        sigmaf: '\u03C2',
        sigma: '\u03C3',
        tau: '\u03C4',
        upsilon: '\u03C5',
        phi: '\u03C6',
        chi: '\u03C7',
        psi: '\u03C8',
        omega: '\u03C9',
        thetasym: '\u03D1',
        upsih: '\u03D2',
        piv: '\u03D6',
        ensp: '\u2002',
        emsp: '\u2003',
        thinsp: '\u2009',
        zwnj: '\u200C',
        zwj: '\u200D',
        lrm: '\u200E',
        rlm: '\u200F',
        ndash: '\u2013',
        mdash: '\u2014',
        lsquo: '\u2018',
        rsquo: '\u2019',
        sbquo: '\u201A',
        ldquo: '\u201C',
        rdquo: '\u201D',
        bdquo: '\u201E',
        dagger: '\u2020',
        Dagger: '\u2021',
        bull: '\u2022',
        hellip: '\u2026',
        permil: '\u2030',
        prime: '\u2032',
        Prime: '\u2033',
        lsaquo: '\u2039',
        rsaquo: '\u203A',
        oline: '\u203E',
        frasl: '\u2044',
        euro: '\u20AC',
        image: '\u2111',
        weierp: '\u2118',
        real: '\u211C',
        trade: '\u2122',
        alefsym: '\u2135',
        larr: '\u2190',
        uarr: '\u2191',
        rarr: '\u2192',
        darr: '\u2193',
        harr: '\u2194',
        crarr: '\u21B5',
        lArr: '\u21D0',
        uArr: '\u21D1',
        rArr: '\u21D2',
        dArr: '\u21D3',
        hArr: '\u21D4',
        forall: '\u2200',
        part: '\u2202',
        exist: '\u2203',
        empty: '\u2205',
        nabla: '\u2207',
        isin: '\u2208',
        notin: '\u2209',
        ni: '\u220B',
        prod: '\u220F',
        sum: '\u2211',
        minus: '\u2212',
        lowast: '\u2217',
        radic: '\u221A',
        prop: '\u221D',
        infin: '\u221E',
        ang: '\u2220',
        and: '\u2227',
        or: '\u2228',
        cap: '\u2229',
        cup: '\u222A',
        int: '\u222B',
        there4: '\u2234',
        sim: '\u223C',
        cong: '\u2245',
        asymp: '\u2248',
        ne: '\u2260',
        equiv: '\u2261',
        le: '\u2264',
        ge: '\u2265',
        sub: '\u2282',
        sup: '\u2283',
        nsub: '\u2284',
        sube: '\u2286',
        supe: '\u2287',
        oplus: '\u2295',
        otimes: '\u2297',
        perp: '\u22A5',
        sdot: '\u22C5',
        lceil: '\u2308',
        rceil: '\u2309',
        lfloor: '\u230A',
        rfloor: '\u230B',
        loz: '\u25CA',
        spades: '\u2660',
        clubs: '\u2663',
        hearts: '\u2665',
        diams: '\u2666',
        lang: '\u27E8',
        rang: '\u27E9'
      };
      /***/
    },
    /* 15 */

    /***/
    function (module, exports, __nested_webpack_require_277271__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var error_handler_1 = __nested_webpack_require_277271__(10);

      var scanner_1 = __nested_webpack_require_277271__(12);

      var token_1 = __nested_webpack_require_277271__(13);

      var Reader = function () {
        function Reader() {
          this.values = [];
          this.curly = this.paren = -1;
        } // A function following one of those tokens is an expression.


        Reader.prototype.beforeFunctionExpression = function (t) {
          return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new', 'return', 'case', 'delete', 'throw', 'void', // assignment operators
          '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=', '&=', '|=', '^=', ',', // binary/unary operators
          '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&', '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=', '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;
        }; // Determine if forward slash (/) is an operator or part of a regular expression
        // https://github.com/mozilla/sweet.js/wiki/design


        Reader.prototype.isRegexStart = function () {
          var previous = this.values[this.values.length - 1];
          var regex = previous !== null;

          switch (previous) {
            case 'this':
            case ']':
              regex = false;
              break;

            case ')':
              var keyword = this.values[this.paren - 1];
              regex = keyword === 'if' || keyword === 'while' || keyword === 'for' || keyword === 'with';
              break;

            case '}':
              // Dividing a function by anything makes little sense,
              // but we have to check for that.
              regex = false;

              if (this.values[this.curly - 3] === 'function') {
                // Anonymous function, e.g. function(){} /42
                var check = this.values[this.curly - 4];
                regex = check ? !this.beforeFunctionExpression(check) : false;
              } else if (this.values[this.curly - 4] === 'function') {
                // Named function, e.g. function f(){} /42/
                var check = this.values[this.curly - 5];
                regex = check ? !this.beforeFunctionExpression(check) : true;
              }

              break;

            default:
              break;
          }

          return regex;
        };

        Reader.prototype.push = function (token) {
          if (token.type === 7
          /* Punctuator */
          || token.type === 4
          /* Keyword */
          ) {
            if (token.value === '{') {
              this.curly = this.values.length;
            } else if (token.value === '(') {
              this.paren = this.values.length;
            }

            this.values.push(token.value);
          } else {
            this.values.push(null);
          }
        };

        return Reader;
      }();

      var Tokenizer = function () {
        function Tokenizer(code, config) {
          this.errorHandler = new error_handler_1.ErrorHandler();
          this.errorHandler.tolerant = config ? typeof config.tolerant === 'boolean' && config.tolerant : false;
          this.scanner = new scanner_1.Scanner(code, this.errorHandler);
          this.scanner.trackComment = config ? typeof config.comment === 'boolean' && config.comment : false;
          this.trackRange = config ? typeof config.range === 'boolean' && config.range : false;
          this.trackLoc = config ? typeof config.loc === 'boolean' && config.loc : false;
          this.buffer = [];
          this.reader = new Reader();
        }

        Tokenizer.prototype.errors = function () {
          return this.errorHandler.errors;
        };

        Tokenizer.prototype.getNextToken = function () {
          if (this.buffer.length === 0) {
            var comments = this.scanner.scanComments();

            if (this.scanner.trackComment) {
              for (var i = 0; i < comments.length; ++i) {
                var e = comments[i];
                var value = this.scanner.source.slice(e.slice[0], e.slice[1]);
                var comment = {
                  type: e.multiLine ? 'BlockComment' : 'LineComment',
                  value: value
                };

                if (this.trackRange) {
                  comment.range = e.range;
                }

                if (this.trackLoc) {
                  comment.loc = e.loc;
                }

                this.buffer.push(comment);
              }
            }

            if (!this.scanner.eof()) {
              var loc = void 0;

              if (this.trackLoc) {
                loc = {
                  start: {
                    line: this.scanner.lineNumber,
                    column: this.scanner.index - this.scanner.lineStart
                  },
                  end: {}
                };
              }

              var startRegex = this.scanner.source[this.scanner.index] === '/' && this.reader.isRegexStart();
              var token = startRegex ? this.scanner.scanRegExp() : this.scanner.lex();
              this.reader.push(token);
              var entry = {
                type: token_1.TokenName[token.type],
                value: this.scanner.source.slice(token.start, token.end)
              };

              if (this.trackRange) {
                entry.range = [token.start, token.end];
              }

              if (this.trackLoc) {
                loc.end = {
                  line: this.scanner.lineNumber,
                  column: this.scanner.index - this.scanner.lineStart
                };
                entry.loc = loc;
              }

              if (token.type === 9
              /* RegularExpression */
              ) {
                var pattern = token.pattern;
                var flags = token.flags;
                entry.regex = {
                  pattern: pattern,
                  flags: flags
                };
              }

              this.buffer.push(entry);
            }
          }

          return this.buffer.shift();
        };

        return Tokenizer;
      }();

      exports.Tokenizer = Tokenizer;
      /***/
    }
    /******/
    ])
  );
});

;

/***/ }),

/***/ "../shared/node_modules/fast-deep-equal/index.js":
/***/ ((module) => {

"use strict";
 // do not edit .js files directly - edit src/index.jst

module.exports = function equal(a, b) {
  if (a === b) return true;

  if (a && b && typeof a == 'object' && typeof b == 'object') {
    if (a.constructor !== b.constructor) return false;
    var length, i, keys;

    if (Array.isArray(a)) {
      length = a.length;
      if (length != b.length) return false;

      for (i = length; i-- !== 0;) if (!equal(a[i], b[i])) return false;

      return true;
    }

    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) return false;

    for (i = length; i-- !== 0;) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;

    for (i = length; i-- !== 0;) {
      var key = keys[i];
      if (!equal(a[key], b[key])) return false;
    }

    return true;
  } // true if both NaN, false otherwise


  return a !== a && b !== b;
};

/***/ }),

/***/ "../shared/node_modules/front-matter/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var parser = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/index.js");

var optionalByteOrderMark = '\\ufeff?';
var platform = typeof process !== 'undefined' ? process.platform : '';
var pattern = '^(' + optionalByteOrderMark + '(= yaml =|---)' + '$([\\s\\S]*?)' + '^(?:\\2|\\.\\.\\.)\\s*' + '$' + (platform === 'win32' ? '\\r?' : '') + '(?:\\n)?)'; // NOTE: If this pattern uses the 'g' flag the `regex` variable definition will
// need to be moved down into the functions that use it.

var regex = new RegExp(pattern, 'm');
module.exports = extractor;
module.exports.test = test;

function extractor(string, options) {
  string = string || '';
  var defaultOptions = {
    allowUnsafe: false
  };
  options = options instanceof Object ? { ...defaultOptions,
    ...options
  } : defaultOptions;
  options.allowUnsafe = Boolean(options.allowUnsafe);
  var lines = string.split(/(\r?\n)/);

  if (lines[0] && /= yaml =|---/.test(lines[0])) {
    return parse(string, options.allowUnsafe);
  } else {
    return {
      attributes: {},
      body: string,
      bodyBegin: 1
    };
  }
}

function computeLocation(match, body) {
  var line = 1;
  var pos = body.indexOf('\n');
  var offset = match.index + match[0].length;

  while (pos !== -1) {
    if (pos >= offset) {
      return line;
    }

    line++;
    pos = body.indexOf('\n', pos + 1);
  }

  return line;
}

function parse(string, allowUnsafe) {
  var match = regex.exec(string);

  if (!match) {
    return {
      attributes: {},
      body: string,
      bodyBegin: 1
    };
  }

  var loader = allowUnsafe ? parser.load : parser.safeLoad;
  var yaml = match[match.length - 1].replace(/^\s+|\s+$/g, '');
  var attributes = loader(yaml) || {};
  var body = string.replace(match[0], '');
  var line = computeLocation(match, string);
  return {
    attributes: attributes,
    body: body,
    bodyBegin: line,
    frontmatter: yaml
  };
}

function test(string) {
  string = string || '';
  return regex.test(string);
}

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var yaml = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml.js");

module.exports = yaml;

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var loader = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/loader.js");

var dumper = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/dumper.js");

function deprecated(name) {
  return function () {
    throw new Error('Function ' + name + ' is deprecated and cannot be used.');
  };
}

module.exports.Type = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js");
module.exports.Schema = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema.js");
module.exports.FAILSAFE_SCHEMA = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js");
module.exports.JSON_SCHEMA = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/json.js");
module.exports.CORE_SCHEMA = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/core.js");
module.exports.DEFAULT_SAFE_SCHEMA = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js");
module.exports.DEFAULT_FULL_SCHEMA = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js");
module.exports.load = loader.load;
module.exports.loadAll = loader.loadAll;
module.exports.safeLoad = loader.safeLoad;
module.exports.safeLoadAll = loader.safeLoadAll;
module.exports.dump = dumper.dump;
module.exports.safeDump = dumper.safeDump;
module.exports.YAMLException = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/exception.js"); // Deprecated schema names from JS-YAML 2.0.x

module.exports.MINIMAL_SCHEMA = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js");
module.exports.SAFE_SCHEMA = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js");
module.exports.DEFAULT_SCHEMA = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js"); // Deprecated functions from JS-YAML 1.x.x

module.exports.scan = deprecated('scan');
module.exports.parse = deprecated('parse');
module.exports.compose = deprecated('compose');
module.exports.addConstructor = deprecated('addConstructor');

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/common.js":
/***/ ((module) => {

"use strict";


function isNothing(subject) {
  return typeof subject === 'undefined' || subject === null;
}

function isObject(subject) {
  return typeof subject === 'object' && subject !== null;
}

function toArray(sequence) {
  if (Array.isArray(sequence)) return sequence;else if (isNothing(sequence)) return [];
  return [sequence];
}

function extend(target, source) {
  var index, length, key, sourceKeys;

  if (source) {
    sourceKeys = Object.keys(source);

    for (index = 0, length = sourceKeys.length; index < length; index += 1) {
      key = sourceKeys[index];
      target[key] = source[key];
    }
  }

  return target;
}

function repeat(string, count) {
  var result = '',
      cycle;

  for (cycle = 0; cycle < count; cycle += 1) {
    result += string;
  }

  return result;
}

function isNegativeZero(number) {
  return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
}

module.exports.isNothing = isNothing;
module.exports.isObject = isObject;
module.exports.toArray = toArray;
module.exports.repeat = repeat;
module.exports.isNegativeZero = isNegativeZero;
module.exports.extend = extend;

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/dumper.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/*eslint-disable no-use-before-define*/

var common = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/common.js");

var YAMLException = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/exception.js");

var DEFAULT_FULL_SCHEMA = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js");

var DEFAULT_SAFE_SCHEMA = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js");

var _toString = Object.prototype.toString;
var _hasOwnProperty = Object.prototype.hasOwnProperty;
var CHAR_TAB = 0x09;
/* Tab */

var CHAR_LINE_FEED = 0x0A;
/* LF */

var CHAR_CARRIAGE_RETURN = 0x0D;
/* CR */

var CHAR_SPACE = 0x20;
/* Space */

var CHAR_EXCLAMATION = 0x21;
/* ! */

var CHAR_DOUBLE_QUOTE = 0x22;
/* " */

var CHAR_SHARP = 0x23;
/* # */

var CHAR_PERCENT = 0x25;
/* % */

var CHAR_AMPERSAND = 0x26;
/* & */

var CHAR_SINGLE_QUOTE = 0x27;
/* ' */

var CHAR_ASTERISK = 0x2A;
/* * */

var CHAR_COMMA = 0x2C;
/* , */

var CHAR_MINUS = 0x2D;
/* - */

var CHAR_COLON = 0x3A;
/* : */

var CHAR_EQUALS = 0x3D;
/* = */

var CHAR_GREATER_THAN = 0x3E;
/* > */

var CHAR_QUESTION = 0x3F;
/* ? */

var CHAR_COMMERCIAL_AT = 0x40;
/* @ */

var CHAR_LEFT_SQUARE_BRACKET = 0x5B;
/* [ */

var CHAR_RIGHT_SQUARE_BRACKET = 0x5D;
/* ] */

var CHAR_GRAVE_ACCENT = 0x60;
/* ` */

var CHAR_LEFT_CURLY_BRACKET = 0x7B;
/* { */

var CHAR_VERTICAL_LINE = 0x7C;
/* | */

var CHAR_RIGHT_CURLY_BRACKET = 0x7D;
/* } */

var ESCAPE_SEQUENCES = {};
ESCAPE_SEQUENCES[0x00] = '\\0';
ESCAPE_SEQUENCES[0x07] = '\\a';
ESCAPE_SEQUENCES[0x08] = '\\b';
ESCAPE_SEQUENCES[0x09] = '\\t';
ESCAPE_SEQUENCES[0x0A] = '\\n';
ESCAPE_SEQUENCES[0x0B] = '\\v';
ESCAPE_SEQUENCES[0x0C] = '\\f';
ESCAPE_SEQUENCES[0x0D] = '\\r';
ESCAPE_SEQUENCES[0x1B] = '\\e';
ESCAPE_SEQUENCES[0x22] = '\\"';
ESCAPE_SEQUENCES[0x5C] = '\\\\';
ESCAPE_SEQUENCES[0x85] = '\\N';
ESCAPE_SEQUENCES[0xA0] = '\\_';
ESCAPE_SEQUENCES[0x2028] = '\\L';
ESCAPE_SEQUENCES[0x2029] = '\\P';
var DEPRECATED_BOOLEANS_SYNTAX = ['y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON', 'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'];

function compileStyleMap(schema, map) {
  var result, keys, index, length, tag, style, type;
  if (map === null) return {};
  result = {};
  keys = Object.keys(map);

  for (index = 0, length = keys.length; index < length; index += 1) {
    tag = keys[index];
    style = String(map[tag]);

    if (tag.slice(0, 2) === '!!') {
      tag = 'tag:yaml.org,2002:' + tag.slice(2);
    }

    type = schema.compiledTypeMap['fallback'][tag];

    if (type && _hasOwnProperty.call(type.styleAliases, style)) {
      style = type.styleAliases[style];
    }

    result[tag] = style;
  }

  return result;
}

function encodeHex(character) {
  var string, handle, length;
  string = character.toString(16).toUpperCase();

  if (character <= 0xFF) {
    handle = 'x';
    length = 2;
  } else if (character <= 0xFFFF) {
    handle = 'u';
    length = 4;
  } else if (character <= 0xFFFFFFFF) {
    handle = 'U';
    length = 8;
  } else {
    throw new YAMLException('code point within a string may not be greater than 0xFFFFFFFF');
  }

  return '\\' + handle + common.repeat('0', length - string.length) + string;
}

function State(options) {
  this.schema = options['schema'] || DEFAULT_FULL_SCHEMA;
  this.indent = Math.max(1, options['indent'] || 2);
  this.noArrayIndent = options['noArrayIndent'] || false;
  this.skipInvalid = options['skipInvalid'] || false;
  this.flowLevel = common.isNothing(options['flowLevel']) ? -1 : options['flowLevel'];
  this.styleMap = compileStyleMap(this.schema, options['styles'] || null);
  this.sortKeys = options['sortKeys'] || false;
  this.lineWidth = options['lineWidth'] || 80;
  this.noRefs = options['noRefs'] || false;
  this.noCompatMode = options['noCompatMode'] || false;
  this.condenseFlow = options['condenseFlow'] || false;
  this.implicitTypes = this.schema.compiledImplicit;
  this.explicitTypes = this.schema.compiledExplicit;
  this.tag = null;
  this.result = '';
  this.duplicates = [];
  this.usedDuplicates = null;
} // Indents every line in a string. Empty lines (\n only) are not indented.


function indentString(string, spaces) {
  var ind = common.repeat(' ', spaces),
      position = 0,
      next = -1,
      result = '',
      line,
      length = string.length;

  while (position < length) {
    next = string.indexOf('\n', position);

    if (next === -1) {
      line = string.slice(position);
      position = length;
    } else {
      line = string.slice(position, next + 1);
      position = next + 1;
    }

    if (line.length && line !== '\n') result += ind;
    result += line;
  }

  return result;
}

function generateNextLine(state, level) {
  return '\n' + common.repeat(' ', state.indent * level);
}

function testImplicitResolving(state, str) {
  var index, length, type;

  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
    type = state.implicitTypes[index];

    if (type.resolve(str)) {
      return true;
    }
  }

  return false;
} // [33] s-white ::= s-space | s-tab


function isWhitespace(c) {
  return c === CHAR_SPACE || c === CHAR_TAB;
} // Returns true if the character can be printed without escaping.
// From YAML 1.2: "any allowed characters known to be non-printable
// should also be escaped. [However,] This isn’t mandatory"
// Derived from nb-char - \t - #x85 - #xA0 - #x2028 - #x2029.


function isPrintable(c) {
  return 0x00020 <= c && c <= 0x00007E || 0x000A1 <= c && c <= 0x00D7FF && c !== 0x2028 && c !== 0x2029 || 0x0E000 <= c && c <= 0x00FFFD && c !== 0xFEFF
  /* BOM */
  || 0x10000 <= c && c <= 0x10FFFF;
} // [34] ns-char ::= nb-char - s-white
// [27] nb-char ::= c-printable - b-char - c-byte-order-mark
// [26] b-char  ::= b-line-feed | b-carriage-return
// [24] b-line-feed       ::=     #xA    /* LF */
// [25] b-carriage-return ::=     #xD    /* CR */
// [3]  c-byte-order-mark ::=     #xFEFF


function isNsChar(c) {
  return isPrintable(c) && !isWhitespace(c) // byte-order-mark
  && c !== 0xFEFF // b-char
  && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
} // Simplified test for values allowed after the first character in plain style.


function isPlainSafe(c, prev) {
  // Uses a subset of nb-char - c-flow-indicator - ":" - "#"
  // where nb-char ::= c-printable - b-char - c-byte-order-mark.
  return isPrintable(c) && c !== 0xFEFF // - c-flow-indicator
  && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET // - ":" - "#"
  // /* An ns-char preceding */ "#"
  && c !== CHAR_COLON && (c !== CHAR_SHARP || prev && isNsChar(prev));
} // Simplified test for values allowed as the first character in plain style.


function isPlainSafeFirst(c) {
  // Uses a subset of ns-char - c-indicator
  // where ns-char = nb-char - s-white.
  return isPrintable(c) && c !== 0xFEFF && !isWhitespace(c) // - s-white
  // - (c-indicator ::=
  // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”
  && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET // | “#” | “&” | “*” | “!” | “|” | “=” | “>” | “'” | “"”
  && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE // | “%” | “@” | “`”)
  && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
} // Determines whether block indentation indicator is required.


function needIndentIndicator(string) {
  var leadingSpaceRe = /^\n* /;
  return leadingSpaceRe.test(string);
}

var STYLE_PLAIN = 1,
    STYLE_SINGLE = 2,
    STYLE_LITERAL = 3,
    STYLE_FOLDED = 4,
    STYLE_DOUBLE = 5; // Determines which scalar styles are possible and returns the preferred style.
// lineWidth = -1 => no limit.
// Pre-conditions: str.length > 0.
// Post-conditions:
//    STYLE_PLAIN or STYLE_SINGLE => no \n are in the string.
//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).
//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).

function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType) {
  var i;
  var char, prev_char;
  var hasLineBreak = false;
  var hasFoldableLine = false; // only checked if shouldTrackWidth

  var shouldTrackWidth = lineWidth !== -1;
  var previousLineBreak = -1; // count the first line correctly

  var plain = isPlainSafeFirst(string.charCodeAt(0)) && !isWhitespace(string.charCodeAt(string.length - 1));

  if (singleLineOnly) {
    // Case: no block styles.
    // Check for disallowed characters to rule out plain and single.
    for (i = 0; i < string.length; i++) {
      char = string.charCodeAt(i);

      if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }

      prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
      plain = plain && isPlainSafe(char, prev_char);
    }
  } else {
    // Case: block styles permitted.
    for (i = 0; i < string.length; i++) {
      char = string.charCodeAt(i);

      if (char === CHAR_LINE_FEED) {
        hasLineBreak = true; // Check if any line can be folded.

        if (shouldTrackWidth) {
          hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.
          i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';
          previousLineBreak = i;
        }
      } else if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }

      prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
      plain = plain && isPlainSafe(char, prev_char);
    } // in case the end is missing a \n


    hasFoldableLine = hasFoldableLine || shouldTrackWidth && i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';
  } // Although every style can represent \n without escaping, prefer block styles
  // for multiline, since they're more readable and they don't add empty lines.
  // Also prefer folding a super-long line.


  if (!hasLineBreak && !hasFoldableLine) {
    // Strings interpretable as another type have to be quoted;
    // e.g. the string 'true' vs. the boolean true.
    return plain && !testAmbiguousType(string) ? STYLE_PLAIN : STYLE_SINGLE;
  } // Edge case: block indentation indicator can only have one digit.


  if (indentPerLevel > 9 && needIndentIndicator(string)) {
    return STYLE_DOUBLE;
  } // At this point we know block styles are valid.
  // Prefer literal style unless we want to fold.


  return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
} // Note: line breaking/folding is implemented for only the folded style.
// NB. We drop the last trailing newline (if any) of a returned block scalar
//  since the dumper adds its own newline. This always works:
//    • No ending newline => unaffected; already using strip "-" chomping.
//    • Ending newline    => removed then restored.
//  Importantly, this keeps the "+" chomp indicator from gaining an extra line.


function writeScalar(state, string, level, iskey) {
  state.dump = function () {
    if (string.length === 0) {
      return "''";
    }

    if (!state.noCompatMode && DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1) {
      return "'" + string + "'";
    }

    var indent = state.indent * Math.max(1, level); // no 0-indent scalars
    // As indentation gets deeper, let the width decrease monotonically
    // to the lower bound min(state.lineWidth, 40).
    // Note that this implies
    //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.
    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.
    // This behaves better than a constant minimum width which disallows narrower options,
    // or an indent threshold which causes the width to suddenly increase.

    var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent); // Without knowing if keys are implicit/explicit, assume implicit for safety.

    var singleLineOnly = iskey // No block styles in flow mode.
    || state.flowLevel > -1 && level >= state.flowLevel;

    function testAmbiguity(string) {
      return testImplicitResolving(state, string);
    }

    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity)) {
      case STYLE_PLAIN:
        return string;

      case STYLE_SINGLE:
        return "'" + string.replace(/'/g, "''") + "'";

      case STYLE_LITERAL:
        return '|' + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));

      case STYLE_FOLDED:
        return '>' + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));

      case STYLE_DOUBLE:
        return '"' + escapeString(string, lineWidth) + '"';

      default:
        throw new YAMLException('impossible error: invalid scalar style');
    }
  }();
} // Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.


function blockHeader(string, indentPerLevel) {
  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : ''; // note the special case: the string '\n' counts as a "trailing" empty line.

  var clip = string[string.length - 1] === '\n';
  var keep = clip && (string[string.length - 2] === '\n' || string === '\n');
  var chomp = keep ? '+' : clip ? '' : '-';
  return indentIndicator + chomp + '\n';
} // (See the note for writeScalar.)


function dropEndingNewline(string) {
  return string[string.length - 1] === '\n' ? string.slice(0, -1) : string;
} // Note: a long line without a suitable break point will exceed the width limit.
// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.


function foldString(string, width) {
  // In folded style, $k$ consecutive newlines output as $k+1$ newlines—
  // unless they're before or after a more-indented line, or at the very
  // beginning or end, in which case $k$ maps to $k$.
  // Therefore, parse each chunk as newline(s) followed by a content line.
  var lineRe = /(\n+)([^\n]*)/g; // first line (possibly an empty line)

  var result = function () {
    var nextLF = string.indexOf('\n');
    nextLF = nextLF !== -1 ? nextLF : string.length;
    lineRe.lastIndex = nextLF;
    return foldLine(string.slice(0, nextLF), width);
  }(); // If we haven't reached the first content line yet, don't add an extra \n.


  var prevMoreIndented = string[0] === '\n' || string[0] === ' ';
  var moreIndented; // rest of the lines

  var match;

  while (match = lineRe.exec(string)) {
    var prefix = match[1],
        line = match[2];
    moreIndented = line[0] === ' ';
    result += prefix + (!prevMoreIndented && !moreIndented && line !== '' ? '\n' : '') + foldLine(line, width);
    prevMoreIndented = moreIndented;
  }

  return result;
} // Greedy line breaking.
// Picks the longest line under the limit each time,
// otherwise settles for the shortest line over the limit.
// NB. More-indented lines *cannot* be folded, as that would add an extra \n.


function foldLine(line, width) {
  if (line === '' || line[0] === ' ') return line; // Since a more-indented line adds a \n, breaks can't be followed by a space.

  var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.

  var match; // start is an inclusive index. end, curr, and next are exclusive.

  var start = 0,
      end,
      curr = 0,
      next = 0;
  var result = ''; // Invariants: 0 <= start <= length-1.
  //   0 <= curr <= next <= max(0, length-2). curr - start <= width.
  // Inside the loop:
  //   A match implies length >= 2, so curr and next are <= length-2.

  while (match = breakRe.exec(line)) {
    next = match.index; // maintain invariant: curr - start <= width

    if (next - start > width) {
      end = curr > start ? curr : next; // derive end <= length-2

      result += '\n' + line.slice(start, end); // skip the space that was output as \n

      start = end + 1; // derive start <= length-1
    }

    curr = next;
  } // By the invariants, start <= length-1, so there is something left over.
  // It is either the whole string or a part starting from non-whitespace.


  result += '\n'; // Insert a break if the remainder is too long and there is a break available.

  if (line.length - start > width && curr > start) {
    result += line.slice(start, curr) + '\n' + line.slice(curr + 1);
  } else {
    result += line.slice(start);
  }

  return result.slice(1); // drop extra \n joiner
} // Escapes a double-quoted string.


function escapeString(string) {
  var result = '';
  var char, nextChar;
  var escapeSeq;

  for (var i = 0; i < string.length; i++) {
    char = string.charCodeAt(i); // Check for surrogate pairs (reference Unicode 3.0 section "3.7 Surrogates").

    if (char >= 0xD800 && char <= 0xDBFF
    /* high surrogate */
    ) {
      nextChar = string.charCodeAt(i + 1);

      if (nextChar >= 0xDC00 && nextChar <= 0xDFFF
      /* low surrogate */
      ) {
        // Combine the surrogate pair and store it escaped.
        result += encodeHex((char - 0xD800) * 0x400 + nextChar - 0xDC00 + 0x10000); // Advance index one extra since we already used that char here.

        i++;
        continue;
      }
    }

    escapeSeq = ESCAPE_SEQUENCES[char];
    result += !escapeSeq && isPrintable(char) ? string[i] : escapeSeq || encodeHex(char);
  }

  return result;
}

function writeFlowSequence(state, level, object) {
  var _result = '',
      _tag = state.tag,
      index,
      length;

  for (index = 0, length = object.length; index < length; index += 1) {
    // Write only valid elements.
    if (writeNode(state, level, object[index], false, false)) {
      if (index !== 0) _result += ',' + (!state.condenseFlow ? ' ' : '');
      _result += state.dump;
    }
  }

  state.tag = _tag;
  state.dump = '[' + _result + ']';
}

function writeBlockSequence(state, level, object, compact) {
  var _result = '',
      _tag = state.tag,
      index,
      length;

  for (index = 0, length = object.length; index < length; index += 1) {
    // Write only valid elements.
    if (writeNode(state, level + 1, object[index], true, true)) {
      if (!compact || index !== 0) {
        _result += generateNextLine(state, level);
      }

      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        _result += '-';
      } else {
        _result += '- ';
      }

      _result += state.dump;
    }
  }

  state.tag = _tag;
  state.dump = _result || '[]'; // Empty sequence if no valid values.
}

function writeFlowMapping(state, level, object) {
  var _result = '',
      _tag = state.tag,
      objectKeyList = Object.keys(object),
      index,
      length,
      objectKey,
      objectValue,
      pairBuffer;

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = '';
    if (index !== 0) pairBuffer += ', ';
    if (state.condenseFlow) pairBuffer += '"';
    objectKey = objectKeyList[index];
    objectValue = object[objectKey];

    if (!writeNode(state, level, objectKey, false, false)) {
      continue; // Skip this pair because of invalid key;
    }

    if (state.dump.length > 1024) pairBuffer += '? ';
    pairBuffer += state.dump + (state.condenseFlow ? '"' : '') + ':' + (state.condenseFlow ? '' : ' ');

    if (!writeNode(state, level, objectValue, false, false)) {
      continue; // Skip this pair because of invalid value.
    }

    pairBuffer += state.dump; // Both key and value are valid.

    _result += pairBuffer;
  }

  state.tag = _tag;
  state.dump = '{' + _result + '}';
}

function writeBlockMapping(state, level, object, compact) {
  var _result = '',
      _tag = state.tag,
      objectKeyList = Object.keys(object),
      index,
      length,
      objectKey,
      objectValue,
      explicitPair,
      pairBuffer; // Allow sorting keys so that the output file is deterministic

  if (state.sortKeys === true) {
    // Default sorting
    objectKeyList.sort();
  } else if (typeof state.sortKeys === 'function') {
    // Custom sort function
    objectKeyList.sort(state.sortKeys);
  } else if (state.sortKeys) {
    // Something is wrong
    throw new YAMLException('sortKeys must be a boolean or a function');
  }

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = '';

    if (!compact || index !== 0) {
      pairBuffer += generateNextLine(state, level);
    }

    objectKey = objectKeyList[index];
    objectValue = object[objectKey];

    if (!writeNode(state, level + 1, objectKey, true, true, true)) {
      continue; // Skip this pair because of invalid key.
    }

    explicitPair = state.tag !== null && state.tag !== '?' || state.dump && state.dump.length > 1024;

    if (explicitPair) {
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += '?';
      } else {
        pairBuffer += '? ';
      }
    }

    pairBuffer += state.dump;

    if (explicitPair) {
      pairBuffer += generateNextLine(state, level);
    }

    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
      continue; // Skip this pair because of invalid value.
    }

    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
      pairBuffer += ':';
    } else {
      pairBuffer += ': ';
    }

    pairBuffer += state.dump; // Both key and value are valid.

    _result += pairBuffer;
  }

  state.tag = _tag;
  state.dump = _result || '{}'; // Empty mapping if no valid pairs.
}

function detectType(state, object, explicit) {
  var _result, typeList, index, length, type, style;

  typeList = explicit ? state.explicitTypes : state.implicitTypes;

  for (index = 0, length = typeList.length; index < length; index += 1) {
    type = typeList[index];

    if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === 'object' && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {
      state.tag = explicit ? type.tag : '?';

      if (type.represent) {
        style = state.styleMap[type.tag] || type.defaultStyle;

        if (_toString.call(type.represent) === '[object Function]') {
          _result = type.represent(object, style);
        } else if (_hasOwnProperty.call(type.represent, style)) {
          _result = type.represent[style](object, style);
        } else {
          throw new YAMLException('!<' + type.tag + '> tag resolver accepts not "' + style + '" style');
        }

        state.dump = _result;
      }

      return true;
    }
  }

  return false;
} // Serializes `object` and writes it to global `result`.
// Returns true on success, or false on invalid object.
//


function writeNode(state, level, object, block, compact, iskey) {
  state.tag = null;
  state.dump = object;

  if (!detectType(state, object, false)) {
    detectType(state, object, true);
  }

  var type = _toString.call(state.dump);

  if (block) {
    block = state.flowLevel < 0 || state.flowLevel > level;
  }

  var objectOrArray = type === '[object Object]' || type === '[object Array]',
      duplicateIndex,
      duplicate;

  if (objectOrArray) {
    duplicateIndex = state.duplicates.indexOf(object);
    duplicate = duplicateIndex !== -1;
  }

  if (state.tag !== null && state.tag !== '?' || duplicate || state.indent !== 2 && level > 0) {
    compact = false;
  }

  if (duplicate && state.usedDuplicates[duplicateIndex]) {
    state.dump = '*ref_' + duplicateIndex;
  } else {
    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
      state.usedDuplicates[duplicateIndex] = true;
    }

    if (type === '[object Object]') {
      if (block && Object.keys(state.dump).length !== 0) {
        writeBlockMapping(state, level, state.dump, compact);

        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowMapping(state, level, state.dump);

        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object Array]') {
      var arrayLevel = state.noArrayIndent && level > 0 ? level - 1 : level;

      if (block && state.dump.length !== 0) {
        writeBlockSequence(state, arrayLevel, state.dump, compact);

        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowSequence(state, arrayLevel, state.dump);

        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object String]') {
      if (state.tag !== '?') {
        writeScalar(state, state.dump, level, iskey);
      }
    } else {
      if (state.skipInvalid) return false;
      throw new YAMLException('unacceptable kind of an object to dump ' + type);
    }

    if (state.tag !== null && state.tag !== '?') {
      state.dump = '!<' + state.tag + '> ' + state.dump;
    }
  }

  return true;
}

function getDuplicateReferences(object, state) {
  var objects = [],
      duplicatesIndexes = [],
      index,
      length;
  inspectNode(object, objects, duplicatesIndexes);

  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
    state.duplicates.push(objects[duplicatesIndexes[index]]);
  }

  state.usedDuplicates = new Array(length);
}

function inspectNode(object, objects, duplicatesIndexes) {
  var objectKeyList, index, length;

  if (object !== null && typeof object === 'object') {
    index = objects.indexOf(object);

    if (index !== -1) {
      if (duplicatesIndexes.indexOf(index) === -1) {
        duplicatesIndexes.push(index);
      }
    } else {
      objects.push(object);

      if (Array.isArray(object)) {
        for (index = 0, length = object.length; index < length; index += 1) {
          inspectNode(object[index], objects, duplicatesIndexes);
        }
      } else {
        objectKeyList = Object.keys(object);

        for (index = 0, length = objectKeyList.length; index < length; index += 1) {
          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
        }
      }
    }
  }
}

function dump(input, options) {
  options = options || {};
  var state = new State(options);
  if (!state.noRefs) getDuplicateReferences(input, state);
  if (writeNode(state, 0, input, true, true)) return state.dump + '\n';
  return '';
}

function safeDump(input, options) {
  return dump(input, common.extend({
    schema: DEFAULT_SAFE_SCHEMA
  }, options));
}

module.exports.dump = dump;
module.exports.safeDump = safeDump;

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/exception.js":
/***/ ((module) => {

"use strict";
// YAML error class. http://stackoverflow.com/questions/8458984
//


function YAMLException(reason, mark) {
  // Super constructor
  Error.call(this);
  this.name = 'YAMLException';
  this.reason = reason;
  this.mark = mark;
  this.message = (this.reason || '(unknown reason)') + (this.mark ? ' ' + this.mark.toString() : ''); // Include stack trace in error object

  if (Error.captureStackTrace) {
    // Chrome and NodeJS
    Error.captureStackTrace(this, this.constructor);
  } else {
    // FF, IE 10+ and Safari 6+. Fallback for others
    this.stack = new Error().stack || '';
  }
} // Inherit from Error


YAMLException.prototype = Object.create(Error.prototype);
YAMLException.prototype.constructor = YAMLException;

YAMLException.prototype.toString = function toString(compact) {
  var result = this.name + ': ';
  result += this.reason || '(unknown reason)';

  if (!compact && this.mark) {
    result += ' ' + this.mark.toString();
  }

  return result;
};

module.exports = YAMLException;

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/loader.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/*eslint-disable max-len,no-use-before-define*/

var common = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/common.js");

var YAMLException = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/exception.js");

var Mark = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/mark.js");

var DEFAULT_SAFE_SCHEMA = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js");

var DEFAULT_FULL_SCHEMA = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js");

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var CONTEXT_FLOW_IN = 1;
var CONTEXT_FLOW_OUT = 2;
var CONTEXT_BLOCK_IN = 3;
var CONTEXT_BLOCK_OUT = 4;
var CHOMPING_CLIP = 1;
var CHOMPING_STRIP = 2;
var CHOMPING_KEEP = 3;
var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;

function _class(obj) {
  return Object.prototype.toString.call(obj);
}

function is_EOL(c) {
  return c === 0x0A
  /* LF */
  || c === 0x0D
  /* CR */
  ;
}

function is_WHITE_SPACE(c) {
  return c === 0x09
  /* Tab */
  || c === 0x20
  /* Space */
  ;
}

function is_WS_OR_EOL(c) {
  return c === 0x09
  /* Tab */
  || c === 0x20
  /* Space */
  || c === 0x0A
  /* LF */
  || c === 0x0D
  /* CR */
  ;
}

function is_FLOW_INDICATOR(c) {
  return c === 0x2C
  /* , */
  || c === 0x5B
  /* [ */
  || c === 0x5D
  /* ] */
  || c === 0x7B
  /* { */
  || c === 0x7D
  /* } */
  ;
}

function fromHexCode(c) {
  var lc;

  if (0x30
  /* 0 */
  <= c && c <= 0x39
  /* 9 */
  ) {
    return c - 0x30;
  }
  /*eslint-disable no-bitwise*/


  lc = c | 0x20;

  if (0x61
  /* a */
  <= lc && lc <= 0x66
  /* f */
  ) {
    return lc - 0x61 + 10;
  }

  return -1;
}

function escapedHexLen(c) {
  if (c === 0x78
  /* x */
  ) {
    return 2;
  }

  if (c === 0x75
  /* u */
  ) {
    return 4;
  }

  if (c === 0x55
  /* U */
  ) {
    return 8;
  }

  return 0;
}

function fromDecimalCode(c) {
  if (0x30
  /* 0 */
  <= c && c <= 0x39
  /* 9 */
  ) {
    return c - 0x30;
  }

  return -1;
}

function simpleEscapeSequence(c) {
  /* eslint-disable indent */
  return c === 0x30
  /* 0 */
  ? '\x00' : c === 0x61
  /* a */
  ? '\x07' : c === 0x62
  /* b */
  ? '\x08' : c === 0x74
  /* t */
  ? '\x09' : c === 0x09
  /* Tab */
  ? '\x09' : c === 0x6E
  /* n */
  ? '\x0A' : c === 0x76
  /* v */
  ? '\x0B' : c === 0x66
  /* f */
  ? '\x0C' : c === 0x72
  /* r */
  ? '\x0D' : c === 0x65
  /* e */
  ? '\x1B' : c === 0x20
  /* Space */
  ? ' ' : c === 0x22
  /* " */
  ? '\x22' : c === 0x2F
  /* / */
  ? '/' : c === 0x5C
  /* \ */
  ? '\x5C' : c === 0x4E
  /* N */
  ? '\x85' : c === 0x5F
  /* _ */
  ? '\xA0' : c === 0x4C
  /* L */
  ? '\u2028' : c === 0x50
  /* P */
  ? '\u2029' : '';
}

function charFromCodepoint(c) {
  if (c <= 0xFFFF) {
    return String.fromCharCode(c);
  } // Encode UTF-16 surrogate pair
  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF


  return String.fromCharCode((c - 0x010000 >> 10) + 0xD800, (c - 0x010000 & 0x03FF) + 0xDC00);
}

var simpleEscapeCheck = new Array(256); // integer, for fast access

var simpleEscapeMap = new Array(256);

for (var i = 0; i < 256; i++) {
  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
  simpleEscapeMap[i] = simpleEscapeSequence(i);
}

function State(input, options) {
  this.input = input;
  this.filename = options['filename'] || null;
  this.schema = options['schema'] || DEFAULT_FULL_SCHEMA;
  this.onWarning = options['onWarning'] || null;
  this.legacy = options['legacy'] || false;
  this.json = options['json'] || false;
  this.listener = options['listener'] || null;
  this.implicitTypes = this.schema.compiledImplicit;
  this.typeMap = this.schema.compiledTypeMap;
  this.length = input.length;
  this.position = 0;
  this.line = 0;
  this.lineStart = 0;
  this.lineIndent = 0;
  this.documents = [];
  /*
  this.version;
  this.checkLineBreaks;
  this.tagMap;
  this.anchorMap;
  this.tag;
  this.anchor;
  this.kind;
  this.result;*/
}

function generateError(state, message) {
  return new YAMLException(message, new Mark(state.filename, state.input, state.position, state.line, state.position - state.lineStart));
}

function throwError(state, message) {
  throw generateError(state, message);
}

function throwWarning(state, message) {
  if (state.onWarning) {
    state.onWarning.call(null, generateError(state, message));
  }
}

var directiveHandlers = {
  YAML: function handleYamlDirective(state, name, args) {
    var match, major, minor;

    if (state.version !== null) {
      throwError(state, 'duplication of %YAML directive');
    }

    if (args.length !== 1) {
      throwError(state, 'YAML directive accepts exactly one argument');
    }

    match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);

    if (match === null) {
      throwError(state, 'ill-formed argument of the YAML directive');
    }

    major = parseInt(match[1], 10);
    minor = parseInt(match[2], 10);

    if (major !== 1) {
      throwError(state, 'unacceptable YAML version of the document');
    }

    state.version = args[0];
    state.checkLineBreaks = minor < 2;

    if (minor !== 1 && minor !== 2) {
      throwWarning(state, 'unsupported YAML version of the document');
    }
  },
  TAG: function handleTagDirective(state, name, args) {
    var handle, prefix;

    if (args.length !== 2) {
      throwError(state, 'TAG directive accepts exactly two arguments');
    }

    handle = args[0];
    prefix = args[1];

    if (!PATTERN_TAG_HANDLE.test(handle)) {
      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');
    }

    if (_hasOwnProperty.call(state.tagMap, handle)) {
      throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
    }

    if (!PATTERN_TAG_URI.test(prefix)) {
      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');
    }

    state.tagMap[handle] = prefix;
  }
};

function captureSegment(state, start, end, checkJson) {
  var _position, _length, _character, _result;

  if (start < end) {
    _result = state.input.slice(start, end);

    if (checkJson) {
      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
        _character = _result.charCodeAt(_position);

        if (!(_character === 0x09 || 0x20 <= _character && _character <= 0x10FFFF)) {
          throwError(state, 'expected valid JSON character');
        }
      }
    } else if (PATTERN_NON_PRINTABLE.test(_result)) {
      throwError(state, 'the stream contains non-printable characters');
    }

    state.result += _result;
  }
}

function mergeMappings(state, destination, source, overridableKeys) {
  var sourceKeys, key, index, quantity;

  if (!common.isObject(source)) {
    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');
  }

  sourceKeys = Object.keys(source);

  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
    key = sourceKeys[index];

    if (!_hasOwnProperty.call(destination, key)) {
      destination[key] = source[key];
      overridableKeys[key] = true;
    }
  }
}

function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {
  var index, quantity; // The output is a plain object here, so keys can only be strings.
  // We need to convert keyNode to a string, but doing so can hang the process
  // (deeply nested arrays that explode exponentially using aliases).

  if (Array.isArray(keyNode)) {
    keyNode = Array.prototype.slice.call(keyNode);

    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
      if (Array.isArray(keyNode[index])) {
        throwError(state, 'nested arrays are not supported inside keys');
      }

      if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {
        keyNode[index] = '[object Object]';
      }
    }
  } // Avoid code execution in load() via toString property
  // (still use its own toString for arrays, timestamps,
  // and whatever user schema extensions happen to have @@toStringTag)


  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {
    keyNode = '[object Object]';
  }

  keyNode = String(keyNode);

  if (_result === null) {
    _result = {};
  }

  if (keyTag === 'tag:yaml.org,2002:merge') {
    if (Array.isArray(valueNode)) {
      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
        mergeMappings(state, _result, valueNode[index], overridableKeys);
      }
    } else {
      mergeMappings(state, _result, valueNode, overridableKeys);
    }
  } else {
    if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {
      state.line = startLine || state.line;
      state.position = startPos || state.position;
      throwError(state, 'duplicated mapping key');
    }

    _result[keyNode] = valueNode;
    delete overridableKeys[keyNode];
  }

  return _result;
}

function readLineBreak(state) {
  var ch;
  ch = state.input.charCodeAt(state.position);

  if (ch === 0x0A
  /* LF */
  ) {
    state.position++;
  } else if (ch === 0x0D
  /* CR */
  ) {
    state.position++;

    if (state.input.charCodeAt(state.position) === 0x0A
    /* LF */
    ) {
      state.position++;
    }
  } else {
    throwError(state, 'a line break is expected');
  }

  state.line += 1;
  state.lineStart = state.position;
}

function skipSeparationSpace(state, allowComments, checkIndent) {
  var lineBreaks = 0,
      ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    while (is_WHITE_SPACE(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }

    if (allowComments && ch === 0x23
    /* # */
    ) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 0x0A
      /* LF */
      && ch !== 0x0D
      /* CR */
      && ch !== 0);
    }

    if (is_EOL(ch)) {
      readLineBreak(state);
      ch = state.input.charCodeAt(state.position);
      lineBreaks++;
      state.lineIndent = 0;

      while (ch === 0x20
      /* Space */
      ) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
    } else {
      break;
    }
  }

  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
    throwWarning(state, 'deficient indentation');
  }

  return lineBreaks;
}

function testDocumentSeparator(state) {
  var _position = state.position,
      ch;
  ch = state.input.charCodeAt(_position); // Condition state.position === state.lineStart is tested
  // in parent on each call, for efficiency. No needs to test here again.

  if ((ch === 0x2D
  /* - */
  || ch === 0x2E
  /* . */
  ) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
    _position += 3;
    ch = state.input.charCodeAt(_position);

    if (ch === 0 || is_WS_OR_EOL(ch)) {
      return true;
    }
  }

  return false;
}

function writeFoldedLines(state, count) {
  if (count === 1) {
    state.result += ' ';
  } else if (count > 1) {
    state.result += common.repeat('\n', count - 1);
  }
}

function readPlainScalar(state, nodeIndent, withinFlowCollection) {
  var preceding,
      following,
      captureStart,
      captureEnd,
      hasPendingContent,
      _line,
      _lineStart,
      _lineIndent,
      _kind = state.kind,
      _result = state.result,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 0x23
  /* # */
  || ch === 0x26
  /* & */
  || ch === 0x2A
  /* * */
  || ch === 0x21
  /* ! */
  || ch === 0x7C
  /* | */
  || ch === 0x3E
  /* > */
  || ch === 0x27
  /* ' */
  || ch === 0x22
  /* " */
  || ch === 0x25
  /* % */
  || ch === 0x40
  /* @ */
  || ch === 0x60
  /* ` */
  ) {
    return false;
  }

  if (ch === 0x3F
  /* ? */
  || ch === 0x2D
  /* - */
  ) {
    following = state.input.charCodeAt(state.position + 1);

    if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
      return false;
    }
  }

  state.kind = 'scalar';
  state.result = '';
  captureStart = captureEnd = state.position;
  hasPendingContent = false;

  while (ch !== 0) {
    if (ch === 0x3A
    /* : */
    ) {
      following = state.input.charCodeAt(state.position + 1);

      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
        break;
      }
    } else if (ch === 0x23
    /* # */
    ) {
      preceding = state.input.charCodeAt(state.position - 1);

      if (is_WS_OR_EOL(preceding)) {
        break;
      }
    } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
      break;
    } else if (is_EOL(ch)) {
      _line = state.line;
      _lineStart = state.lineStart;
      _lineIndent = state.lineIndent;
      skipSeparationSpace(state, false, -1);

      if (state.lineIndent >= nodeIndent) {
        hasPendingContent = true;
        ch = state.input.charCodeAt(state.position);
        continue;
      } else {
        state.position = captureEnd;
        state.line = _line;
        state.lineStart = _lineStart;
        state.lineIndent = _lineIndent;
        break;
      }
    }

    if (hasPendingContent) {
      captureSegment(state, captureStart, captureEnd, false);
      writeFoldedLines(state, state.line - _line);
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
    }

    if (!is_WHITE_SPACE(ch)) {
      captureEnd = state.position + 1;
    }

    ch = state.input.charCodeAt(++state.position);
  }

  captureSegment(state, captureStart, captureEnd, false);

  if (state.result) {
    return true;
  }

  state.kind = _kind;
  state.result = _result;
  return false;
}

function readSingleQuotedScalar(state, nodeIndent) {
  var ch, captureStart, captureEnd;
  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x27
  /* ' */
  ) {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x27
    /* ' */
    ) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);

      if (ch === 0x27
      /* ' */
      ) {
        captureStart = state.position;
        state.position++;
        captureEnd = state.position;
      } else {
        return true;
      }
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a single quoted scalar');
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }

  throwError(state, 'unexpected end of the stream within a single quoted scalar');
}

function readDoubleQuotedScalar(state, nodeIndent) {
  var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x22
  /* " */
  ) {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x22
    /* " */
    ) {
      captureSegment(state, captureStart, state.position, true);
      state.position++;
      return true;
    } else if (ch === 0x5C
    /* \ */
    ) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);

      if (is_EOL(ch)) {
        skipSeparationSpace(state, false, nodeIndent); // TODO: rework to inline fn with no type cast?
      } else if (ch < 256 && simpleEscapeCheck[ch]) {
        state.result += simpleEscapeMap[ch];
        state.position++;
      } else if ((tmp = escapedHexLen(ch)) > 0) {
        hexLength = tmp;
        hexResult = 0;

        for (; hexLength > 0; hexLength--) {
          ch = state.input.charCodeAt(++state.position);

          if ((tmp = fromHexCode(ch)) >= 0) {
            hexResult = (hexResult << 4) + tmp;
          } else {
            throwError(state, 'expected hexadecimal character');
          }
        }

        state.result += charFromCodepoint(hexResult);
        state.position++;
      } else {
        throwError(state, 'unknown escape sequence');
      }

      captureStart = captureEnd = state.position;
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a double quoted scalar');
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }

  throwError(state, 'unexpected end of the stream within a double quoted scalar');
}

function readFlowCollection(state, nodeIndent) {
  var readNext = true,
      _line,
      _tag = state.tag,
      _result,
      _anchor = state.anchor,
      following,
      terminator,
      isPair,
      isExplicitPair,
      isMapping,
      overridableKeys = {},
      keyNode,
      keyTag,
      valueNode,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x5B
  /* [ */
  ) {
    terminator = 0x5D;
    /* ] */

    isMapping = false;
    _result = [];
  } else if (ch === 0x7B
  /* { */
  ) {
    terminator = 0x7D;
    /* } */

    isMapping = true;
    _result = {};
  } else {
    return false;
  }

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(++state.position);

  while (ch !== 0) {
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);

    if (ch === terminator) {
      state.position++;
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = isMapping ? 'mapping' : 'sequence';
      state.result = _result;
      return true;
    } else if (!readNext) {
      throwError(state, 'missed comma between flow collection entries');
    }

    keyTag = keyNode = valueNode = null;
    isPair = isExplicitPair = false;

    if (ch === 0x3F
    /* ? */
    ) {
      following = state.input.charCodeAt(state.position + 1);

      if (is_WS_OR_EOL(following)) {
        isPair = isExplicitPair = true;
        state.position++;
        skipSeparationSpace(state, true, nodeIndent);
      }
    }

    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
    keyTag = state.tag;
    keyNode = state.result;
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);

    if ((isExplicitPair || state.line === _line) && ch === 0x3A
    /* : */
    ) {
      isPair = true;
      ch = state.input.charCodeAt(++state.position);
      skipSeparationSpace(state, true, nodeIndent);
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
      valueNode = state.result;
    }

    if (isMapping) {
      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);
    } else if (isPair) {
      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));
    } else {
      _result.push(keyNode);
    }

    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);

    if (ch === 0x2C
    /* , */
    ) {
      readNext = true;
      ch = state.input.charCodeAt(++state.position);
    } else {
      readNext = false;
    }
  }

  throwError(state, 'unexpected end of the stream within a flow collection');
}

function readBlockScalar(state, nodeIndent) {
  var captureStart,
      folding,
      chomping = CHOMPING_CLIP,
      didReadContent = false,
      detectedIndent = false,
      textIndent = nodeIndent,
      emptyLines = 0,
      atMoreIndented = false,
      tmp,
      ch;
  ch = state.input.charCodeAt(state.position);

  if (ch === 0x7C
  /* | */
  ) {
    folding = false;
  } else if (ch === 0x3E
  /* > */
  ) {
    folding = true;
  } else {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';

  while (ch !== 0) {
    ch = state.input.charCodeAt(++state.position);

    if (ch === 0x2B
    /* + */
    || ch === 0x2D
    /* - */
    ) {
      if (CHOMPING_CLIP === chomping) {
        chomping = ch === 0x2B
        /* + */
        ? CHOMPING_KEEP : CHOMPING_STRIP;
      } else {
        throwError(state, 'repeat of a chomping mode identifier');
      }
    } else if ((tmp = fromDecimalCode(ch)) >= 0) {
      if (tmp === 0) {
        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');
      } else if (!detectedIndent) {
        textIndent = nodeIndent + tmp - 1;
        detectedIndent = true;
      } else {
        throwError(state, 'repeat of an indentation width identifier');
      }
    } else {
      break;
    }
  }

  if (is_WHITE_SPACE(ch)) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (is_WHITE_SPACE(ch));

    if (ch === 0x23
    /* # */
    ) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (!is_EOL(ch) && ch !== 0);
    }
  }

  while (ch !== 0) {
    readLineBreak(state);
    state.lineIndent = 0;
    ch = state.input.charCodeAt(state.position);

    while ((!detectedIndent || state.lineIndent < textIndent) && ch === 0x20
    /* Space */
    ) {
      state.lineIndent++;
      ch = state.input.charCodeAt(++state.position);
    }

    if (!detectedIndent && state.lineIndent > textIndent) {
      textIndent = state.lineIndent;
    }

    if (is_EOL(ch)) {
      emptyLines++;
      continue;
    } // End of the scalar.


    if (state.lineIndent < textIndent) {
      // Perform the chomping.
      if (chomping === CHOMPING_KEEP) {
        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
      } else if (chomping === CHOMPING_CLIP) {
        if (didReadContent) {
          // i.e. only if the scalar is not empty.
          state.result += '\n';
        }
      } // Break this `while` cycle and go to the funciton's epilogue.


      break;
    } // Folded style: use fancy rules to handle line breaks.


    if (folding) {
      // Lines starting with white space characters (more-indented lines) are not folded.
      if (is_WHITE_SPACE(ch)) {
        atMoreIndented = true; // except for the first content line (cf. Example 8.1)

        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines); // End of more-indented block.
      } else if (atMoreIndented) {
        atMoreIndented = false;
        state.result += common.repeat('\n', emptyLines + 1); // Just one line break - perceive as the same line.
      } else if (emptyLines === 0) {
        if (didReadContent) {
          // i.e. only if we have already read some scalar content.
          state.result += ' ';
        } // Several line breaks - perceive as different lines.

      } else {
        state.result += common.repeat('\n', emptyLines);
      } // Literal style: just add exact number of line breaks between content lines.

    } else {
      // Keep all line breaks except the header line break.
      state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
    }

    didReadContent = true;
    detectedIndent = true;
    emptyLines = 0;
    captureStart = state.position;

    while (!is_EOL(ch) && ch !== 0) {
      ch = state.input.charCodeAt(++state.position);
    }

    captureSegment(state, captureStart, state.position, false);
  }

  return true;
}

function readBlockSequence(state, nodeIndent) {
  var _line,
      _tag = state.tag,
      _anchor = state.anchor,
      _result = [],
      following,
      detected = false,
      ch;

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    if (ch !== 0x2D
    /* - */
    ) {
      break;
    }

    following = state.input.charCodeAt(state.position + 1);

    if (!is_WS_OR_EOL(following)) {
      break;
    }

    detected = true;
    state.position++;

    if (skipSeparationSpace(state, true, -1)) {
      if (state.lineIndent <= nodeIndent) {
        _result.push(null);

        ch = state.input.charCodeAt(state.position);
        continue;
      }
    }

    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);

    _result.push(state.result);

    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);

    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, 'bad indentation of a sequence entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }

  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'sequence';
    state.result = _result;
    return true;
  }

  return false;
}

function readBlockMapping(state, nodeIndent, flowIndent) {
  var following,
      allowCompact,
      _line,
      _pos,
      _tag = state.tag,
      _anchor = state.anchor,
      _result = {},
      overridableKeys = {},
      keyTag = null,
      keyNode = null,
      valueNode = null,
      atExplicitKey = false,
      detected = false,
      ch;

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    following = state.input.charCodeAt(state.position + 1);
    _line = state.line; // Save the current line.

    _pos = state.position; //
    // Explicit notation case. There are two separate blocks:
    // first for the key (denoted by "?") and second for the value (denoted by ":")
    //

    if ((ch === 0x3F
    /* ? */
    || ch === 0x3A
    /* : */
    ) && is_WS_OR_EOL(following)) {
      if (ch === 0x3F
      /* ? */
      ) {
        if (atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
          keyTag = keyNode = valueNode = null;
        }

        detected = true;
        atExplicitKey = true;
        allowCompact = true;
      } else if (atExplicitKey) {
        // i.e. 0x3A/* : */ === character after the explicit key.
        atExplicitKey = false;
        allowCompact = true;
      } else {
        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');
      }

      state.position += 1;
      ch = following; //
      // Implicit notation case. Flow-style node as the key first, then ":", and the value.
      //
    } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
      if (state.line === _line) {
        ch = state.input.charCodeAt(state.position);

        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }

        if (ch === 0x3A
        /* : */
        ) {
          ch = state.input.charCodeAt(++state.position);

          if (!is_WS_OR_EOL(ch)) {
            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');
          }

          if (atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
            keyTag = keyNode = valueNode = null;
          }

          detected = true;
          atExplicitKey = false;
          allowCompact = false;
          keyTag = state.tag;
          keyNode = state.result;
        } else if (detected) {
          throwError(state, 'can not read an implicit mapping pair; a colon is missed');
        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true; // Keep the result of `composeNode`.
        }
      } else if (detected) {
        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');
      } else {
        state.tag = _tag;
        state.anchor = _anchor;
        return true; // Keep the result of `composeNode`.
      }
    } else {
      break; // Reading is done. Go to the epilogue.
    } //
    // Common reading code for both explicit and implicit notations.
    //


    if (state.line === _line || state.lineIndent > nodeIndent) {
      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
        if (atExplicitKey) {
          keyNode = state.result;
        } else {
          valueNode = state.result;
        }
      }

      if (!atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);
        keyTag = keyNode = valueNode = null;
      }

      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
    }

    if (state.lineIndent > nodeIndent && ch !== 0) {
      throwError(state, 'bad indentation of a mapping entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  } //
  // Epilogue.
  //
  // Special case: last mapping's node contains only the key in explicit notation.


  if (atExplicitKey) {
    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
  } // Expose the resulting mapping.


  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'mapping';
    state.result = _result;
  }

  return detected;
}

function readTagProperty(state) {
  var _position,
      isVerbatim = false,
      isNamed = false,
      tagHandle,
      tagName,
      ch;

  ch = state.input.charCodeAt(state.position);
  if (ch !== 0x21
  /* ! */
  ) return false;

  if (state.tag !== null) {
    throwError(state, 'duplication of a tag property');
  }

  ch = state.input.charCodeAt(++state.position);

  if (ch === 0x3C
  /* < */
  ) {
    isVerbatim = true;
    ch = state.input.charCodeAt(++state.position);
  } else if (ch === 0x21
  /* ! */
  ) {
    isNamed = true;
    tagHandle = '!!';
    ch = state.input.charCodeAt(++state.position);
  } else {
    tagHandle = '!';
  }

  _position = state.position;

  if (isVerbatim) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (ch !== 0 && ch !== 0x3E
    /* > */
    );

    if (state.position < state.length) {
      tagName = state.input.slice(_position, state.position);
      ch = state.input.charCodeAt(++state.position);
    } else {
      throwError(state, 'unexpected end of the stream within a verbatim tag');
    }
  } else {
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      if (ch === 0x21
      /* ! */
      ) {
        if (!isNamed) {
          tagHandle = state.input.slice(_position - 1, state.position + 1);

          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
            throwError(state, 'named tag handle cannot contain such characters');
          }

          isNamed = true;
          _position = state.position + 1;
        } else {
          throwError(state, 'tag suffix cannot contain exclamation marks');
        }
      }

      ch = state.input.charCodeAt(++state.position);
    }

    tagName = state.input.slice(_position, state.position);

    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
      throwError(state, 'tag suffix cannot contain flow indicator characters');
    }
  }

  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
    throwError(state, 'tag name cannot contain such characters: ' + tagName);
  }

  if (isVerbatim) {
    state.tag = tagName;
  } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
    state.tag = state.tagMap[tagHandle] + tagName;
  } else if (tagHandle === '!') {
    state.tag = '!' + tagName;
  } else if (tagHandle === '!!') {
    state.tag = 'tag:yaml.org,2002:' + tagName;
  } else {
    throwError(state, 'undeclared tag handle "' + tagHandle + '"');
  }

  return true;
}

function readAnchorProperty(state) {
  var _position, ch;

  ch = state.input.charCodeAt(state.position);
  if (ch !== 0x26
  /* & */
  ) return false;

  if (state.anchor !== null) {
    throwError(state, 'duplication of an anchor property');
  }

  ch = state.input.charCodeAt(++state.position);
  _position = state.position;

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }

  if (state.position === _position) {
    throwError(state, 'name of an anchor node must contain at least one character');
  }

  state.anchor = state.input.slice(_position, state.position);
  return true;
}

function readAlias(state) {
  var _position, alias, ch;

  ch = state.input.charCodeAt(state.position);
  if (ch !== 0x2A
  /* * */
  ) return false;
  ch = state.input.charCodeAt(++state.position);
  _position = state.position;

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }

  if (state.position === _position) {
    throwError(state, 'name of an alias node must contain at least one character');
  }

  alias = state.input.slice(_position, state.position);

  if (!_hasOwnProperty.call(state.anchorMap, alias)) {
    throwError(state, 'unidentified alias "' + alias + '"');
  }

  state.result = state.anchorMap[alias];
  skipSeparationSpace(state, true, -1);
  return true;
}

function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
  var allowBlockStyles,
      allowBlockScalars,
      allowBlockCollections,
      indentStatus = 1,
      // 1: this>parent, 0: this=parent, -1: this<parent
  atNewLine = false,
      hasContent = false,
      typeIndex,
      typeQuantity,
      type,
      flowIndent,
      blockIndent;

  if (state.listener !== null) {
    state.listener('open', state);
  }

  state.tag = null;
  state.anchor = null;
  state.kind = null;
  state.result = null;
  allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;

  if (allowToSeek) {
    if (skipSeparationSpace(state, true, -1)) {
      atNewLine = true;

      if (state.lineIndent > parentIndent) {
        indentStatus = 1;
      } else if (state.lineIndent === parentIndent) {
        indentStatus = 0;
      } else if (state.lineIndent < parentIndent) {
        indentStatus = -1;
      }
    }
  }

  if (indentStatus === 1) {
    while (readTagProperty(state) || readAnchorProperty(state)) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        allowBlockCollections = allowBlockStyles;

        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      } else {
        allowBlockCollections = false;
      }
    }
  }

  if (allowBlockCollections) {
    allowBlockCollections = atNewLine || allowCompact;
  }

  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
      flowIndent = parentIndent;
    } else {
      flowIndent = parentIndent + 1;
    }

    blockIndent = state.position - state.lineStart;

    if (indentStatus === 1) {
      if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
        hasContent = true;
      } else {
        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
          hasContent = true;
        } else if (readAlias(state)) {
          hasContent = true;

          if (state.tag !== null || state.anchor !== null) {
            throwError(state, 'alias node should not have any properties');
          }
        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
          hasContent = true;

          if (state.tag === null) {
            state.tag = '?';
          }
        }

        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else if (indentStatus === 0) {
      // Special case: block sequences are allowed to have same indentation level as the parent.
      // http://www.yaml.org/spec/1.2/spec.html#id2799784
      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
    }
  }

  if (state.tag !== null && state.tag !== '!') {
    if (state.tag === '?') {
      // Implicit resolving is not allowed for non-scalar types, and '?'
      // non-specific tag is only automatically assigned to plain scalars.
      //
      // We only need to check kind conformity in case user explicitly assigns '?'
      // tag, for example like this: "!<?> [0]"
      //
      if (state.result !== null && state.kind !== 'scalar') {
        throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
      }

      for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
        type = state.implicitTypes[typeIndex];

        if (type.resolve(state.result)) {
          // `state.result` updated in resolver if matched
          state.result = type.construct(state.result);
          state.tag = type.tag;

          if (state.anchor !== null) {
            state.anchorMap[state.anchor] = state.result;
          }

          break;
        }
      }
    } else if (_hasOwnProperty.call(state.typeMap[state.kind || 'fallback'], state.tag)) {
      type = state.typeMap[state.kind || 'fallback'][state.tag];

      if (state.result !== null && type.kind !== state.kind) {
        throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
      }

      if (!type.resolve(state.result)) {
        // `state.result` updated in resolver if matched
        throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');
      } else {
        state.result = type.construct(state.result);

        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else {
      throwError(state, 'unknown tag !<' + state.tag + '>');
    }
  }

  if (state.listener !== null) {
    state.listener('close', state);
  }

  return state.tag !== null || state.anchor !== null || hasContent;
}

function readDocument(state) {
  var documentStart = state.position,
      _position,
      directiveName,
      directiveArgs,
      hasDirectives = false,
      ch;

  state.version = null;
  state.checkLineBreaks = state.legacy;
  state.tagMap = {};
  state.anchorMap = {};

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);

    if (state.lineIndent > 0 || ch !== 0x25
    /* % */
    ) {
      break;
    }

    hasDirectives = true;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;

    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }

    directiveName = state.input.slice(_position, state.position);
    directiveArgs = [];

    if (directiveName.length < 1) {
      throwError(state, 'directive name must not be less than one character in length');
    }

    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      if (ch === 0x23
      /* # */
      ) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && !is_EOL(ch));

        break;
      }

      if (is_EOL(ch)) break;
      _position = state.position;

      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      directiveArgs.push(state.input.slice(_position, state.position));
    }

    if (ch !== 0) readLineBreak(state);

    if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
      directiveHandlers[directiveName](state, directiveName, directiveArgs);
    } else {
      throwWarning(state, 'unknown document directive "' + directiveName + '"');
    }
  }

  skipSeparationSpace(state, true, -1);

  if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 0x2D
  /* - */
  && state.input.charCodeAt(state.position + 1) === 0x2D
  /* - */
  && state.input.charCodeAt(state.position + 2) === 0x2D
  /* - */
  ) {
    state.position += 3;
    skipSeparationSpace(state, true, -1);
  } else if (hasDirectives) {
    throwError(state, 'directives end mark is expected');
  }

  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
  skipSeparationSpace(state, true, -1);

  if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
    throwWarning(state, 'non-ASCII line breaks are interpreted as content');
  }

  state.documents.push(state.result);

  if (state.position === state.lineStart && testDocumentSeparator(state)) {
    if (state.input.charCodeAt(state.position) === 0x2E
    /* . */
    ) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    }

    return;
  }

  if (state.position < state.length - 1) {
    throwError(state, 'end of the stream or a document separator is expected');
  } else {
    return;
  }
}

function loadDocuments(input, options) {
  input = String(input);
  options = options || {};

  if (input.length !== 0) {
    // Add tailing `\n` if not exists
    if (input.charCodeAt(input.length - 1) !== 0x0A
    /* LF */
    && input.charCodeAt(input.length - 1) !== 0x0D
    /* CR */
    ) {
      input += '\n';
    } // Strip BOM


    if (input.charCodeAt(0) === 0xFEFF) {
      input = input.slice(1);
    }
  }

  var state = new State(input, options);
  var nullpos = input.indexOf('\0');

  if (nullpos !== -1) {
    state.position = nullpos;
    throwError(state, 'null byte is not allowed in input');
  } // Use 0 as string terminator. That significantly simplifies bounds check.


  state.input += '\0';

  while (state.input.charCodeAt(state.position) === 0x20
  /* Space */
  ) {
    state.lineIndent += 1;
    state.position += 1;
  }

  while (state.position < state.length - 1) {
    readDocument(state);
  }

  return state.documents;
}

function loadAll(input, iterator, options) {
  if (iterator !== null && typeof iterator === 'object' && typeof options === 'undefined') {
    options = iterator;
    iterator = null;
  }

  var documents = loadDocuments(input, options);

  if (typeof iterator !== 'function') {
    return documents;
  }

  for (var index = 0, length = documents.length; index < length; index += 1) {
    iterator(documents[index]);
  }
}

function load(input, options) {
  var documents = loadDocuments(input, options);

  if (documents.length === 0) {
    /*eslint-disable no-undefined*/
    return undefined;
  } else if (documents.length === 1) {
    return documents[0];
  }

  throw new YAMLException('expected a single document in the stream, but found more');
}

function safeLoadAll(input, iterator, options) {
  if (typeof iterator === 'object' && iterator !== null && typeof options === 'undefined') {
    options = iterator;
    iterator = null;
  }

  return loadAll(input, iterator, common.extend({
    schema: DEFAULT_SAFE_SCHEMA
  }, options));
}

function safeLoad(input, options) {
  return load(input, common.extend({
    schema: DEFAULT_SAFE_SCHEMA
  }, options));
}

module.exports.loadAll = loadAll;
module.exports.load = load;
module.exports.safeLoadAll = safeLoadAll;
module.exports.safeLoad = safeLoad;

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/mark.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var common = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/common.js");

function Mark(name, buffer, position, line, column) {
  this.name = name;
  this.buffer = buffer;
  this.position = position;
  this.line = line;
  this.column = column;
}

Mark.prototype.getSnippet = function getSnippet(indent, maxLength) {
  var head, start, tail, end, snippet;
  if (!this.buffer) return null;
  indent = indent || 4;
  maxLength = maxLength || 75;
  head = '';
  start = this.position;

  while (start > 0 && '\x00\r\n\x85\u2028\u2029'.indexOf(this.buffer.charAt(start - 1)) === -1) {
    start -= 1;

    if (this.position - start > maxLength / 2 - 1) {
      head = ' ... ';
      start += 5;
      break;
    }
  }

  tail = '';
  end = this.position;

  while (end < this.buffer.length && '\x00\r\n\x85\u2028\u2029'.indexOf(this.buffer.charAt(end)) === -1) {
    end += 1;

    if (end - this.position > maxLength / 2 - 1) {
      tail = ' ... ';
      end -= 5;
      break;
    }
  }

  snippet = this.buffer.slice(start, end);
  return common.repeat(' ', indent) + head + snippet + tail + '\n' + common.repeat(' ', indent + this.position - start + head.length) + '^';
};

Mark.prototype.toString = function toString(compact) {
  var snippet,
      where = '';

  if (this.name) {
    where += 'in "' + this.name + '" ';
  }

  where += 'at line ' + (this.line + 1) + ', column ' + (this.column + 1);

  if (!compact) {
    snippet = this.getSnippet();

    if (snippet) {
      where += ':\n' + snippet;
    }
  }

  return where;
};

module.exports = Mark;

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/*eslint-disable max-len*/

var common = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/common.js");

var YAMLException = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/exception.js");

var Type = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js");

function compileList(schema, name, result) {
  var exclude = [];
  schema.include.forEach(function (includedSchema) {
    result = compileList(includedSchema, name, result);
  });
  schema[name].forEach(function (currentType) {
    result.forEach(function (previousType, previousIndex) {
      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {
        exclude.push(previousIndex);
      }
    });
    result.push(currentType);
  });
  return result.filter(function (type, index) {
    return exclude.indexOf(index) === -1;
  });
}

function
  /* lists... */
compileMap() {
  var result = {
    scalar: {},
    sequence: {},
    mapping: {},
    fallback: {}
  },
      index,
      length;

  function collectType(type) {
    result[type.kind][type.tag] = result['fallback'][type.tag] = type;
  }

  for (index = 0, length = arguments.length; index < length; index += 1) {
    arguments[index].forEach(collectType);
  }

  return result;
}

function Schema(definition) {
  this.include = definition.include || [];
  this.implicit = definition.implicit || [];
  this.explicit = definition.explicit || [];
  this.implicit.forEach(function (type) {
    if (type.loadKind && type.loadKind !== 'scalar') {
      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');
    }
  });
  this.compiledImplicit = compileList(this, 'implicit', []);
  this.compiledExplicit = compileList(this, 'explicit', []);
  this.compiledTypeMap = compileMap(this.compiledImplicit, this.compiledExplicit);
}

Schema.DEFAULT = null;

Schema.create = function createSchema() {
  var schemas, types;

  switch (arguments.length) {
    case 1:
      schemas = Schema.DEFAULT;
      types = arguments[0];
      break;

    case 2:
      schemas = arguments[0];
      types = arguments[1];
      break;

    default:
      throw new YAMLException('Wrong number of arguments for Schema.create function');
  }

  schemas = common.toArray(schemas);
  types = common.toArray(types);

  if (!schemas.every(function (schema) {
    return schema instanceof Schema;
  })) {
    throw new YAMLException('Specified list of super schemas (or a single Schema object) contains a non-Schema object.');
  }

  if (!types.every(function (type) {
    return type instanceof Type;
  })) {
    throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');
  }

  return new Schema({
    include: schemas,
    explicit: types
  });
};

module.exports = Schema;

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/core.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Standard YAML's Core schema.
// http://www.yaml.org/spec/1.2/spec.html#id2804923
//
// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
// So, Core schema has no distinctions from JSON schema is JS-YAML.


var Schema = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema.js");

module.exports = new Schema({
  include: [__webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/json.js")]
});

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// JS-YAML's default schema for `load` function.
// It is not described in the YAML specification.
//
// This schema is based on JS-YAML's default safe schema and includes
// JavaScript-specific types: !!js/undefined, !!js/regexp and !!js/function.
//
// Also this schema is used as default base schema at `Schema.create` function.


var Schema = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema.js");

module.exports = Schema.DEFAULT = new Schema({
  include: [__webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js")],
  explicit: [__webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/js/undefined.js"), __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/js/regexp.js"), __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/js/function.js")]
});

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// JS-YAML's default schema for `safeLoad` function.
// It is not described in the YAML specification.
//
// This schema is based on standard YAML's Core schema and includes most of
// extra types described at YAML tag repository. (http://yaml.org/type/)


var Schema = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema.js");

module.exports = new Schema({
  include: [__webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/core.js")],
  implicit: [__webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/timestamp.js"), __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/merge.js")],
  explicit: [__webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/binary.js"), __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/omap.js"), __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/pairs.js"), __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/set.js")]
});

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Standard YAML's Failsafe schema.
// http://www.yaml.org/spec/1.2/spec.html#id2802346


var Schema = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema.js");

module.exports = new Schema({
  explicit: [__webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/str.js"), __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/seq.js"), __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/map.js")]
});

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/json.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Standard YAML's JSON schema.
// http://www.yaml.org/spec/1.2/spec.html#id2803231
//
// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
// So, this schema is not such strict as defined in the YAML specification.
// It allows numbers in binary notaion, use `Null` and `NULL` as `null`, etc.


var Schema = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema.js");

module.exports = new Schema({
  include: [__webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js")],
  implicit: [__webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/null.js"), __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/bool.js"), __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/int.js"), __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/float.js")]
});

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var YAMLException = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/exception.js");

var TYPE_CONSTRUCTOR_OPTIONS = ['kind', 'resolve', 'construct', 'instanceOf', 'predicate', 'represent', 'defaultStyle', 'styleAliases'];
var YAML_NODE_KINDS = ['scalar', 'sequence', 'mapping'];

function compileStyleAliases(map) {
  var result = {};

  if (map !== null) {
    Object.keys(map).forEach(function (style) {
      map[style].forEach(function (alias) {
        result[String(alias)] = style;
      });
    });
  }

  return result;
}

function Type(tag, options) {
  options = options || {};
  Object.keys(options).forEach(function (name) {
    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
      throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
    }
  }); // TODO: Add tag format check.

  this.tag = tag;
  this.kind = options['kind'] || null;

  this.resolve = options['resolve'] || function () {
    return true;
  };

  this.construct = options['construct'] || function (data) {
    return data;
  };

  this.instanceOf = options['instanceOf'] || null;
  this.predicate = options['predicate'] || null;
  this.represent = options['represent'] || null;
  this.defaultStyle = options['defaultStyle'] || null;
  this.styleAliases = compileStyleAliases(options['styleAliases'] || null);

  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
    throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
  }
}

module.exports = Type;

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/binary.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/*eslint-disable no-bitwise*/

var NodeBuffer;

try {
  // A trick for browserified version, to not include `Buffer` shim
  var _require = undefined;
  NodeBuffer = (__webpack_require__("./node_modules/buffer/index.js")/* .Buffer */ .lW);
} catch (__) {}

var Type = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js"); // [ 64, 65, 66 ] -> [ padding, CR, LF ]


var BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r';

function resolveYamlBinary(data) {
  if (data === null) return false;
  var code,
      idx,
      bitlen = 0,
      max = data.length,
      map = BASE64_MAP; // Convert one by one.

  for (idx = 0; idx < max; idx++) {
    code = map.indexOf(data.charAt(idx)); // Skip CR/LF

    if (code > 64) continue; // Fail on illegal characters

    if (code < 0) return false;
    bitlen += 6;
  } // If there are any bits left, source was corrupted


  return bitlen % 8 === 0;
}

function constructYamlBinary(data) {
  var idx,
      tailbits,
      input = data.replace(/[\r\n=]/g, ''),
      // remove CR/LF & padding to simplify scan
  max = input.length,
      map = BASE64_MAP,
      bits = 0,
      result = []; // Collect by 6*4 bits (3 bytes)

  for (idx = 0; idx < max; idx++) {
    if (idx % 4 === 0 && idx) {
      result.push(bits >> 16 & 0xFF);
      result.push(bits >> 8 & 0xFF);
      result.push(bits & 0xFF);
    }

    bits = bits << 6 | map.indexOf(input.charAt(idx));
  } // Dump tail


  tailbits = max % 4 * 6;

  if (tailbits === 0) {
    result.push(bits >> 16 & 0xFF);
    result.push(bits >> 8 & 0xFF);
    result.push(bits & 0xFF);
  } else if (tailbits === 18) {
    result.push(bits >> 10 & 0xFF);
    result.push(bits >> 2 & 0xFF);
  } else if (tailbits === 12) {
    result.push(bits >> 4 & 0xFF);
  } // Wrap into Buffer for NodeJS and leave Array for browser


  if (NodeBuffer) {
    // Support node 6.+ Buffer API when available
    return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result);
  }

  return result;
}

function representYamlBinary(object
/*, style*/
) {
  var result = '',
      bits = 0,
      idx,
      tail,
      max = object.length,
      map = BASE64_MAP; // Convert every three bytes to 4 ASCII characters.

  for (idx = 0; idx < max; idx++) {
    if (idx % 3 === 0 && idx) {
      result += map[bits >> 18 & 0x3F];
      result += map[bits >> 12 & 0x3F];
      result += map[bits >> 6 & 0x3F];
      result += map[bits & 0x3F];
    }

    bits = (bits << 8) + object[idx];
  } // Dump tail


  tail = max % 3;

  if (tail === 0) {
    result += map[bits >> 18 & 0x3F];
    result += map[bits >> 12 & 0x3F];
    result += map[bits >> 6 & 0x3F];
    result += map[bits & 0x3F];
  } else if (tail === 2) {
    result += map[bits >> 10 & 0x3F];
    result += map[bits >> 4 & 0x3F];
    result += map[bits << 2 & 0x3F];
    result += map[64];
  } else if (tail === 1) {
    result += map[bits >> 2 & 0x3F];
    result += map[bits << 4 & 0x3F];
    result += map[64];
    result += map[64];
  }

  return result;
}

function isBinary(object) {
  return NodeBuffer && NodeBuffer.isBuffer(object);
}

module.exports = new Type('tag:yaml.org,2002:binary', {
  kind: 'scalar',
  resolve: resolveYamlBinary,
  construct: constructYamlBinary,
  predicate: isBinary,
  represent: representYamlBinary
});

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/bool.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js");

function resolveYamlBoolean(data) {
  if (data === null) return false;
  var max = data.length;
  return max === 4 && (data === 'true' || data === 'True' || data === 'TRUE') || max === 5 && (data === 'false' || data === 'False' || data === 'FALSE');
}

function constructYamlBoolean(data) {
  return data === 'true' || data === 'True' || data === 'TRUE';
}

function isBoolean(object) {
  return Object.prototype.toString.call(object) === '[object Boolean]';
}

module.exports = new Type('tag:yaml.org,2002:bool', {
  kind: 'scalar',
  resolve: resolveYamlBoolean,
  construct: constructYamlBoolean,
  predicate: isBoolean,
  represent: {
    lowercase: function (object) {
      return object ? 'true' : 'false';
    },
    uppercase: function (object) {
      return object ? 'TRUE' : 'FALSE';
    },
    camelcase: function (object) {
      return object ? 'True' : 'False';
    }
  },
  defaultStyle: 'lowercase'
});

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/float.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var common = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/common.js");

var Type = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js");

var YAML_FLOAT_PATTERN = new RegExp( // 2.5e4, 2.5 and integers
'^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' + // .2e4, .2
// special case, seems not from spec
'|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' + // 20:59
'|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*' + // .inf
'|[-+]?\\.(?:inf|Inf|INF)' + // .nan
'|\\.(?:nan|NaN|NAN))$');

function resolveYamlFloat(data) {
  if (data === null) return false;

  if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`
  // Probably should update regexp & check speed
  data[data.length - 1] === '_') {
    return false;
  }

  return true;
}

function constructYamlFloat(data) {
  var value, sign, base, digits;
  value = data.replace(/_/g, '').toLowerCase();
  sign = value[0] === '-' ? -1 : 1;
  digits = [];

  if ('+-'.indexOf(value[0]) >= 0) {
    value = value.slice(1);
  }

  if (value === '.inf') {
    return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
  } else if (value === '.nan') {
    return NaN;
  } else if (value.indexOf(':') >= 0) {
    value.split(':').forEach(function (v) {
      digits.unshift(parseFloat(v, 10));
    });
    value = 0.0;
    base = 1;
    digits.forEach(function (d) {
      value += d * base;
      base *= 60;
    });
    return sign * value;
  }

  return sign * parseFloat(value, 10);
}

var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;

function representYamlFloat(object, style) {
  var res;

  if (isNaN(object)) {
    switch (style) {
      case 'lowercase':
        return '.nan';

      case 'uppercase':
        return '.NAN';

      case 'camelcase':
        return '.NaN';
    }
  } else if (Number.POSITIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase':
        return '.inf';

      case 'uppercase':
        return '.INF';

      case 'camelcase':
        return '.Inf';
    }
  } else if (Number.NEGATIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase':
        return '-.inf';

      case 'uppercase':
        return '-.INF';

      case 'camelcase':
        return '-.Inf';
    }
  } else if (common.isNegativeZero(object)) {
    return '-0.0';
  }

  res = object.toString(10); // JS stringifier can build scientific format without dots: 5e-100,
  // while YAML requres dot: 5.e-100. Fix it with simple hack

  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;
}

function isFloat(object) {
  return Object.prototype.toString.call(object) === '[object Number]' && (object % 1 !== 0 || common.isNegativeZero(object));
}

module.exports = new Type('tag:yaml.org,2002:float', {
  kind: 'scalar',
  resolve: resolveYamlFloat,
  construct: constructYamlFloat,
  predicate: isFloat,
  represent: representYamlFloat,
  defaultStyle: 'lowercase'
});

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/int.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var common = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/common.js");

var Type = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js");

function isHexCode(c) {
  return 0x30
  /* 0 */
  <= c && c <= 0x39
  /* 9 */
  || 0x41
  /* A */
  <= c && c <= 0x46
  /* F */
  || 0x61
  /* a */
  <= c && c <= 0x66
  /* f */
  ;
}

function isOctCode(c) {
  return 0x30
  /* 0 */
  <= c && c <= 0x37
  /* 7 */
  ;
}

function isDecCode(c) {
  return 0x30
  /* 0 */
  <= c && c <= 0x39
  /* 9 */
  ;
}

function resolveYamlInteger(data) {
  if (data === null) return false;
  var max = data.length,
      index = 0,
      hasDigits = false,
      ch;
  if (!max) return false;
  ch = data[index]; // sign

  if (ch === '-' || ch === '+') {
    ch = data[++index];
  }

  if (ch === '0') {
    // 0
    if (index + 1 === max) return true;
    ch = data[++index]; // base 2, base 8, base 16

    if (ch === 'b') {
      // base 2
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (ch !== '0' && ch !== '1') return false;
        hasDigits = true;
      }

      return hasDigits && ch !== '_';
    }

    if (ch === 'x') {
      // base 16
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (!isHexCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }

      return hasDigits && ch !== '_';
    } // base 8


    for (; index < max; index++) {
      ch = data[index];
      if (ch === '_') continue;
      if (!isOctCode(data.charCodeAt(index))) return false;
      hasDigits = true;
    }

    return hasDigits && ch !== '_';
  } // base 10 (except 0) or base 60
  // value should not start with `_`;


  if (ch === '_') return false;

  for (; index < max; index++) {
    ch = data[index];
    if (ch === '_') continue;
    if (ch === ':') break;

    if (!isDecCode(data.charCodeAt(index))) {
      return false;
    }

    hasDigits = true;
  } // Should have digits and should not end with `_`


  if (!hasDigits || ch === '_') return false; // if !base60 - done;

  if (ch !== ':') return true; // base60 almost not used, no needs to optimize

  return /^(:[0-5]?[0-9])+$/.test(data.slice(index));
}

function constructYamlInteger(data) {
  var value = data,
      sign = 1,
      ch,
      base,
      digits = [];

  if (value.indexOf('_') !== -1) {
    value = value.replace(/_/g, '');
  }

  ch = value[0];

  if (ch === '-' || ch === '+') {
    if (ch === '-') sign = -1;
    value = value.slice(1);
    ch = value[0];
  }

  if (value === '0') return 0;

  if (ch === '0') {
    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);
    if (value[1] === 'x') return sign * parseInt(value, 16);
    return sign * parseInt(value, 8);
  }

  if (value.indexOf(':') !== -1) {
    value.split(':').forEach(function (v) {
      digits.unshift(parseInt(v, 10));
    });
    value = 0;
    base = 1;
    digits.forEach(function (d) {
      value += d * base;
      base *= 60;
    });
    return sign * value;
  }

  return sign * parseInt(value, 10);
}

function isInteger(object) {
  return Object.prototype.toString.call(object) === '[object Number]' && object % 1 === 0 && !common.isNegativeZero(object);
}

module.exports = new Type('tag:yaml.org,2002:int', {
  kind: 'scalar',
  resolve: resolveYamlInteger,
  construct: constructYamlInteger,
  predicate: isInteger,
  represent: {
    binary: function (obj) {
      return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1);
    },
    octal: function (obj) {
      return obj >= 0 ? '0' + obj.toString(8) : '-0' + obj.toString(8).slice(1);
    },
    decimal: function (obj) {
      return obj.toString(10);
    },

    /* eslint-disable max-len */
    hexadecimal: function (obj) {
      return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() : '-0x' + obj.toString(16).toUpperCase().slice(1);
    }
  },
  defaultStyle: 'decimal',
  styleAliases: {
    binary: [2, 'bin'],
    octal: [8, 'oct'],
    decimal: [10, 'dec'],
    hexadecimal: [16, 'hex']
  }
});

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/js/function.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var esprima; // Browserified version does not have esprima
//
// 1. For node.js just require module as deps
// 2. For browser try to require mudule via external AMD system.
//    If not found - try to fallback to window.esprima. If not
//    found too - then fail to parse.
//

try {
  // workaround to exclude package from browserify list.
  var _require = undefined;
  esprima = __webpack_require__("../shared/node_modules/esprima/dist/esprima.js");
} catch (_) {
  /* eslint-disable no-redeclare */

  /* global window */
  if (typeof window !== 'undefined') esprima = window.esprima;
}

var Type = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js");

function resolveJavascriptFunction(data) {
  if (data === null) return false;

  try {
    var source = '(' + data + ')',
        ast = esprima.parse(source, {
      range: true
    });

    if (ast.type !== 'Program' || ast.body.length !== 1 || ast.body[0].type !== 'ExpressionStatement' || ast.body[0].expression.type !== 'ArrowFunctionExpression' && ast.body[0].expression.type !== 'FunctionExpression') {
      return false;
    }

    return true;
  } catch (err) {
    return false;
  }
}

function constructJavascriptFunction(data) {
  /*jslint evil:true*/
  var source = '(' + data + ')',
      ast = esprima.parse(source, {
    range: true
  }),
      params = [],
      body;

  if (ast.type !== 'Program' || ast.body.length !== 1 || ast.body[0].type !== 'ExpressionStatement' || ast.body[0].expression.type !== 'ArrowFunctionExpression' && ast.body[0].expression.type !== 'FunctionExpression') {
    throw new Error('Failed to resolve function');
  }

  ast.body[0].expression.params.forEach(function (param) {
    params.push(param.name);
  });
  body = ast.body[0].expression.body.range; // Esprima's ranges include the first '{' and the last '}' characters on
  // function expressions. So cut them out.

  if (ast.body[0].expression.body.type === 'BlockStatement') {
    /*eslint-disable no-new-func*/
    return new Function(params, source.slice(body[0] + 1, body[1] - 1));
  } // ES6 arrow functions can omit the BlockStatement. In that case, just return
  // the body.

  /*eslint-disable no-new-func*/


  return new Function(params, 'return ' + source.slice(body[0], body[1]));
}

function representJavascriptFunction(object
/*, style*/
) {
  return object.toString();
}

function isFunction(object) {
  return Object.prototype.toString.call(object) === '[object Function]';
}

module.exports = new Type('tag:yaml.org,2002:js/function', {
  kind: 'scalar',
  resolve: resolveJavascriptFunction,
  construct: constructJavascriptFunction,
  predicate: isFunction,
  represent: representJavascriptFunction
});

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/js/regexp.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js");

function resolveJavascriptRegExp(data) {
  if (data === null) return false;
  if (data.length === 0) return false;
  var regexp = data,
      tail = /\/([gim]*)$/.exec(data),
      modifiers = ''; // if regexp starts with '/' it can have modifiers and must be properly closed
  // `/foo/gim` - modifiers tail can be maximum 3 chars

  if (regexp[0] === '/') {
    if (tail) modifiers = tail[1];
    if (modifiers.length > 3) return false; // if expression starts with /, is should be properly terminated

    if (regexp[regexp.length - modifiers.length - 1] !== '/') return false;
  }

  return true;
}

function constructJavascriptRegExp(data) {
  var regexp = data,
      tail = /\/([gim]*)$/.exec(data),
      modifiers = ''; // `/foo/gim` - tail can be maximum 4 chars

  if (regexp[0] === '/') {
    if (tail) modifiers = tail[1];
    regexp = regexp.slice(1, regexp.length - modifiers.length - 1);
  }

  return new RegExp(regexp, modifiers);
}

function representJavascriptRegExp(object
/*, style*/
) {
  var result = '/' + object.source + '/';
  if (object.global) result += 'g';
  if (object.multiline) result += 'm';
  if (object.ignoreCase) result += 'i';
  return result;
}

function isRegExp(object) {
  return Object.prototype.toString.call(object) === '[object RegExp]';
}

module.exports = new Type('tag:yaml.org,2002:js/regexp', {
  kind: 'scalar',
  resolve: resolveJavascriptRegExp,
  construct: constructJavascriptRegExp,
  predicate: isRegExp,
  represent: representJavascriptRegExp
});

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/js/undefined.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js");

function resolveJavascriptUndefined() {
  return true;
}

function constructJavascriptUndefined() {
  /*eslint-disable no-undefined*/
  return undefined;
}

function representJavascriptUndefined() {
  return '';
}

function isUndefined(object) {
  return typeof object === 'undefined';
}

module.exports = new Type('tag:yaml.org,2002:js/undefined', {
  kind: 'scalar',
  resolve: resolveJavascriptUndefined,
  construct: constructJavascriptUndefined,
  predicate: isUndefined,
  represent: representJavascriptUndefined
});

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/map.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js");

module.exports = new Type('tag:yaml.org,2002:map', {
  kind: 'mapping',
  construct: function (data) {
    return data !== null ? data : {};
  }
});

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/merge.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js");

function resolveYamlMerge(data) {
  return data === '<<' || data === null;
}

module.exports = new Type('tag:yaml.org,2002:merge', {
  kind: 'scalar',
  resolve: resolveYamlMerge
});

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/null.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js");

function resolveYamlNull(data) {
  if (data === null) return true;
  var max = data.length;
  return max === 1 && data === '~' || max === 4 && (data === 'null' || data === 'Null' || data === 'NULL');
}

function constructYamlNull() {
  return null;
}

function isNull(object) {
  return object === null;
}

module.exports = new Type('tag:yaml.org,2002:null', {
  kind: 'scalar',
  resolve: resolveYamlNull,
  construct: constructYamlNull,
  predicate: isNull,
  represent: {
    canonical: function () {
      return '~';
    },
    lowercase: function () {
      return 'null';
    },
    uppercase: function () {
      return 'NULL';
    },
    camelcase: function () {
      return 'Null';
    }
  },
  defaultStyle: 'lowercase'
});

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/omap.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js");

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _toString = Object.prototype.toString;

function resolveYamlOmap(data) {
  if (data === null) return true;
  var objectKeys = [],
      index,
      length,
      pair,
      pairKey,
      pairHasKey,
      object = data;

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    pairHasKey = false;
    if (_toString.call(pair) !== '[object Object]') return false;

    for (pairKey in pair) {
      if (_hasOwnProperty.call(pair, pairKey)) {
        if (!pairHasKey) pairHasKey = true;else return false;
      }
    }

    if (!pairHasKey) return false;
    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);else return false;
  }

  return true;
}

function constructYamlOmap(data) {
  return data !== null ? data : [];
}

module.exports = new Type('tag:yaml.org,2002:omap', {
  kind: 'sequence',
  resolve: resolveYamlOmap,
  construct: constructYamlOmap
});

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/pairs.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js");

var _toString = Object.prototype.toString;

function resolveYamlPairs(data) {
  if (data === null) return true;
  var index,
      length,
      pair,
      keys,
      result,
      object = data;
  result = new Array(object.length);

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    if (_toString.call(pair) !== '[object Object]') return false;
    keys = Object.keys(pair);
    if (keys.length !== 1) return false;
    result[index] = [keys[0], pair[keys[0]]];
  }

  return true;
}

function constructYamlPairs(data) {
  if (data === null) return [];
  var index,
      length,
      pair,
      keys,
      result,
      object = data;
  result = new Array(object.length);

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    keys = Object.keys(pair);
    result[index] = [keys[0], pair[keys[0]]];
  }

  return result;
}

module.exports = new Type('tag:yaml.org,2002:pairs', {
  kind: 'sequence',
  resolve: resolveYamlPairs,
  construct: constructYamlPairs
});

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/seq.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js");

module.exports = new Type('tag:yaml.org,2002:seq', {
  kind: 'sequence',
  construct: function (data) {
    return data !== null ? data : [];
  }
});

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/set.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js");

var _hasOwnProperty = Object.prototype.hasOwnProperty;

function resolveYamlSet(data) {
  if (data === null) return true;
  var key,
      object = data;

  for (key in object) {
    if (_hasOwnProperty.call(object, key)) {
      if (object[key] !== null) return false;
    }
  }

  return true;
}

function constructYamlSet(data) {
  return data !== null ? data : {};
}

module.exports = new Type('tag:yaml.org,2002:set', {
  kind: 'mapping',
  resolve: resolveYamlSet,
  construct: constructYamlSet
});

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/str.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js");

module.exports = new Type('tag:yaml.org,2002:str', {
  kind: 'scalar',
  construct: function (data) {
    return data !== null ? data : '';
  }
});

/***/ }),

/***/ "../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type/timestamp.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("../shared/node_modules/front-matter/node_modules/js-yaml/lib/js-yaml/type.js");

var YAML_DATE_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' + // [1] year
'-([0-9][0-9])' + // [2] month
'-([0-9][0-9])$'); // [3] day

var YAML_TIMESTAMP_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' + // [1] year
'-([0-9][0-9]?)' + // [2] month
'-([0-9][0-9]?)' + // [3] day
'(?:[Tt]|[ \\t]+)' + // ...
'([0-9][0-9]?)' + // [4] hour
':([0-9][0-9])' + // [5] minute
':([0-9][0-9])' + // [6] second
'(?:\\.([0-9]*))?' + // [7] fraction
'(?:[ \\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour
'(?::([0-9][0-9]))?))?$'); // [11] tz_minute

function resolveYamlTimestamp(data) {
  if (data === null) return false;
  if (YAML_DATE_REGEXP.exec(data) !== null) return true;
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
  return false;
}

function constructYamlTimestamp(data) {
  var match,
      year,
      month,
      day,
      hour,
      minute,
      second,
      fraction = 0,
      delta = null,
      tz_hour,
      tz_minute,
      date;
  match = YAML_DATE_REGEXP.exec(data);
  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);
  if (match === null) throw new Error('Date resolve error'); // match: [1] year [2] month [3] day

  year = +match[1];
  month = +match[2] - 1; // JS month starts with 0

  day = +match[3];

  if (!match[4]) {
    // no hour
    return new Date(Date.UTC(year, month, day));
  } // match: [4] hour [5] minute [6] second [7] fraction


  hour = +match[4];
  minute = +match[5];
  second = +match[6];

  if (match[7]) {
    fraction = match[7].slice(0, 3);

    while (fraction.length < 3) {
      // milli-seconds
      fraction += '0';
    }

    fraction = +fraction;
  } // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute


  if (match[9]) {
    tz_hour = +match[10];
    tz_minute = +(match[11] || 0);
    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds

    if (match[9] === '-') delta = -delta;
  }

  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
  if (delta) date.setTime(date.getTime() - delta);
  return date;
}

function representYamlTimestamp(object
/*, style*/
) {
  return object.toISOString();
}

module.exports = new Type('tag:yaml.org,2002:timestamp', {
  kind: 'scalar',
  resolve: resolveYamlTimestamp,
  construct: constructYamlTimestamp,
  instanceOf: Date,
  represent: representYamlTimestamp
});

/***/ }),

/***/ "../shared/node_modules/js-yaml/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var loader = __webpack_require__("../shared/node_modules/js-yaml/lib/loader.js");

var dumper = __webpack_require__("../shared/node_modules/js-yaml/lib/dumper.js");

function renamed(from, to) {
  return function () {
    throw new Error('Function yaml.' + from + ' is removed in js-yaml 4. ' + 'Use yaml.' + to + ' instead, which is now safe by default.');
  };
}

module.exports.Type = __webpack_require__("../shared/node_modules/js-yaml/lib/type.js");
module.exports.Schema = __webpack_require__("../shared/node_modules/js-yaml/lib/schema.js");
module.exports.FAILSAFE_SCHEMA = __webpack_require__("../shared/node_modules/js-yaml/lib/schema/failsafe.js");
module.exports.JSON_SCHEMA = __webpack_require__("../shared/node_modules/js-yaml/lib/schema/json.js");
module.exports.CORE_SCHEMA = __webpack_require__("../shared/node_modules/js-yaml/lib/schema/core.js");
module.exports.DEFAULT_SCHEMA = __webpack_require__("../shared/node_modules/js-yaml/lib/schema/default.js");
module.exports.load = loader.load;
module.exports.loadAll = loader.loadAll;
module.exports.dump = dumper.dump;
module.exports.YAMLException = __webpack_require__("../shared/node_modules/js-yaml/lib/exception.js"); // Re-export all types in case user wants to create custom schema

module.exports.types = {
  binary: __webpack_require__("../shared/node_modules/js-yaml/lib/type/binary.js"),
  float: __webpack_require__("../shared/node_modules/js-yaml/lib/type/float.js"),
  map: __webpack_require__("../shared/node_modules/js-yaml/lib/type/map.js"),
  null: __webpack_require__("../shared/node_modules/js-yaml/lib/type/null.js"),
  pairs: __webpack_require__("../shared/node_modules/js-yaml/lib/type/pairs.js"),
  set: __webpack_require__("../shared/node_modules/js-yaml/lib/type/set.js"),
  timestamp: __webpack_require__("../shared/node_modules/js-yaml/lib/type/timestamp.js"),
  bool: __webpack_require__("../shared/node_modules/js-yaml/lib/type/bool.js"),
  int: __webpack_require__("../shared/node_modules/js-yaml/lib/type/int.js"),
  merge: __webpack_require__("../shared/node_modules/js-yaml/lib/type/merge.js"),
  omap: __webpack_require__("../shared/node_modules/js-yaml/lib/type/omap.js"),
  seq: __webpack_require__("../shared/node_modules/js-yaml/lib/type/seq.js"),
  str: __webpack_require__("../shared/node_modules/js-yaml/lib/type/str.js")
}; // Removed functions from JS-YAML 3.0.x

module.exports.safeLoad = renamed('safeLoad', 'load');
module.exports.safeLoadAll = renamed('safeLoadAll', 'loadAll');
module.exports.safeDump = renamed('safeDump', 'dump');

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/common.js":
/***/ ((module) => {

"use strict";


function isNothing(subject) {
  return typeof subject === 'undefined' || subject === null;
}

function isObject(subject) {
  return typeof subject === 'object' && subject !== null;
}

function toArray(sequence) {
  if (Array.isArray(sequence)) return sequence;else if (isNothing(sequence)) return [];
  return [sequence];
}

function extend(target, source) {
  var index, length, key, sourceKeys;

  if (source) {
    sourceKeys = Object.keys(source);

    for (index = 0, length = sourceKeys.length; index < length; index += 1) {
      key = sourceKeys[index];
      target[key] = source[key];
    }
  }

  return target;
}

function repeat(string, count) {
  var result = '',
      cycle;

  for (cycle = 0; cycle < count; cycle += 1) {
    result += string;
  }

  return result;
}

function isNegativeZero(number) {
  return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
}

module.exports.isNothing = isNothing;
module.exports.isObject = isObject;
module.exports.toArray = toArray;
module.exports.repeat = repeat;
module.exports.isNegativeZero = isNegativeZero;
module.exports.extend = extend;

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/dumper.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/*eslint-disable no-use-before-define*/

var common = __webpack_require__("../shared/node_modules/js-yaml/lib/common.js");

var YAMLException = __webpack_require__("../shared/node_modules/js-yaml/lib/exception.js");

var DEFAULT_SCHEMA = __webpack_require__("../shared/node_modules/js-yaml/lib/schema/default.js");

var _toString = Object.prototype.toString;
var _hasOwnProperty = Object.prototype.hasOwnProperty;
var CHAR_BOM = 0xFEFF;
var CHAR_TAB = 0x09;
/* Tab */

var CHAR_LINE_FEED = 0x0A;
/* LF */

var CHAR_CARRIAGE_RETURN = 0x0D;
/* CR */

var CHAR_SPACE = 0x20;
/* Space */

var CHAR_EXCLAMATION = 0x21;
/* ! */

var CHAR_DOUBLE_QUOTE = 0x22;
/* " */

var CHAR_SHARP = 0x23;
/* # */

var CHAR_PERCENT = 0x25;
/* % */

var CHAR_AMPERSAND = 0x26;
/* & */

var CHAR_SINGLE_QUOTE = 0x27;
/* ' */

var CHAR_ASTERISK = 0x2A;
/* * */

var CHAR_COMMA = 0x2C;
/* , */

var CHAR_MINUS = 0x2D;
/* - */

var CHAR_COLON = 0x3A;
/* : */

var CHAR_EQUALS = 0x3D;
/* = */

var CHAR_GREATER_THAN = 0x3E;
/* > */

var CHAR_QUESTION = 0x3F;
/* ? */

var CHAR_COMMERCIAL_AT = 0x40;
/* @ */

var CHAR_LEFT_SQUARE_BRACKET = 0x5B;
/* [ */

var CHAR_RIGHT_SQUARE_BRACKET = 0x5D;
/* ] */

var CHAR_GRAVE_ACCENT = 0x60;
/* ` */

var CHAR_LEFT_CURLY_BRACKET = 0x7B;
/* { */

var CHAR_VERTICAL_LINE = 0x7C;
/* | */

var CHAR_RIGHT_CURLY_BRACKET = 0x7D;
/* } */

var ESCAPE_SEQUENCES = {};
ESCAPE_SEQUENCES[0x00] = '\\0';
ESCAPE_SEQUENCES[0x07] = '\\a';
ESCAPE_SEQUENCES[0x08] = '\\b';
ESCAPE_SEQUENCES[0x09] = '\\t';
ESCAPE_SEQUENCES[0x0A] = '\\n';
ESCAPE_SEQUENCES[0x0B] = '\\v';
ESCAPE_SEQUENCES[0x0C] = '\\f';
ESCAPE_SEQUENCES[0x0D] = '\\r';
ESCAPE_SEQUENCES[0x1B] = '\\e';
ESCAPE_SEQUENCES[0x22] = '\\"';
ESCAPE_SEQUENCES[0x5C] = '\\\\';
ESCAPE_SEQUENCES[0x85] = '\\N';
ESCAPE_SEQUENCES[0xA0] = '\\_';
ESCAPE_SEQUENCES[0x2028] = '\\L';
ESCAPE_SEQUENCES[0x2029] = '\\P';
var DEPRECATED_BOOLEANS_SYNTAX = ['y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON', 'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'];
var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;

function compileStyleMap(schema, map) {
  var result, keys, index, length, tag, style, type;
  if (map === null) return {};
  result = {};
  keys = Object.keys(map);

  for (index = 0, length = keys.length; index < length; index += 1) {
    tag = keys[index];
    style = String(map[tag]);

    if (tag.slice(0, 2) === '!!') {
      tag = 'tag:yaml.org,2002:' + tag.slice(2);
    }

    type = schema.compiledTypeMap['fallback'][tag];

    if (type && _hasOwnProperty.call(type.styleAliases, style)) {
      style = type.styleAliases[style];
    }

    result[tag] = style;
  }

  return result;
}

function encodeHex(character) {
  var string, handle, length;
  string = character.toString(16).toUpperCase();

  if (character <= 0xFF) {
    handle = 'x';
    length = 2;
  } else if (character <= 0xFFFF) {
    handle = 'u';
    length = 4;
  } else if (character <= 0xFFFFFFFF) {
    handle = 'U';
    length = 8;
  } else {
    throw new YAMLException('code point within a string may not be greater than 0xFFFFFFFF');
  }

  return '\\' + handle + common.repeat('0', length - string.length) + string;
}

var QUOTING_TYPE_SINGLE = 1,
    QUOTING_TYPE_DOUBLE = 2;

function State(options) {
  this.schema = options['schema'] || DEFAULT_SCHEMA;
  this.indent = Math.max(1, options['indent'] || 2);
  this.noArrayIndent = options['noArrayIndent'] || false;
  this.skipInvalid = options['skipInvalid'] || false;
  this.flowLevel = common.isNothing(options['flowLevel']) ? -1 : options['flowLevel'];
  this.styleMap = compileStyleMap(this.schema, options['styles'] || null);
  this.sortKeys = options['sortKeys'] || false;
  this.lineWidth = options['lineWidth'] || 80;
  this.noRefs = options['noRefs'] || false;
  this.noCompatMode = options['noCompatMode'] || false;
  this.condenseFlow = options['condenseFlow'] || false;
  this.quotingType = options['quotingType'] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
  this.forceQuotes = options['forceQuotes'] || false;
  this.replacer = typeof options['replacer'] === 'function' ? options['replacer'] : null;
  this.implicitTypes = this.schema.compiledImplicit;
  this.explicitTypes = this.schema.compiledExplicit;
  this.tag = null;
  this.result = '';
  this.duplicates = [];
  this.usedDuplicates = null;
} // Indents every line in a string. Empty lines (\n only) are not indented.


function indentString(string, spaces) {
  var ind = common.repeat(' ', spaces),
      position = 0,
      next = -1,
      result = '',
      line,
      length = string.length;

  while (position < length) {
    next = string.indexOf('\n', position);

    if (next === -1) {
      line = string.slice(position);
      position = length;
    } else {
      line = string.slice(position, next + 1);
      position = next + 1;
    }

    if (line.length && line !== '\n') result += ind;
    result += line;
  }

  return result;
}

function generateNextLine(state, level) {
  return '\n' + common.repeat(' ', state.indent * level);
}

function testImplicitResolving(state, str) {
  var index, length, type;

  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
    type = state.implicitTypes[index];

    if (type.resolve(str)) {
      return true;
    }
  }

  return false;
} // [33] s-white ::= s-space | s-tab


function isWhitespace(c) {
  return c === CHAR_SPACE || c === CHAR_TAB;
} // Returns true if the character can be printed without escaping.
// From YAML 1.2: "any allowed characters known to be non-printable
// should also be escaped. [However,] This isn’t mandatory"
// Derived from nb-char - \t - #x85 - #xA0 - #x2028 - #x2029.


function isPrintable(c) {
  return 0x00020 <= c && c <= 0x00007E || 0x000A1 <= c && c <= 0x00D7FF && c !== 0x2028 && c !== 0x2029 || 0x0E000 <= c && c <= 0x00FFFD && c !== CHAR_BOM || 0x10000 <= c && c <= 0x10FFFF;
} // [34] ns-char ::= nb-char - s-white
// [27] nb-char ::= c-printable - b-char - c-byte-order-mark
// [26] b-char  ::= b-line-feed | b-carriage-return
// Including s-white (for some reason, examples doesn't match specs in this aspect)
// ns-char ::= c-printable - b-line-feed - b-carriage-return - c-byte-order-mark


function isNsCharOrWhitespace(c) {
  return isPrintable(c) && c !== CHAR_BOM // - b-char
  && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
} // [127]  ns-plain-safe(c) ::= c = flow-out  ⇒ ns-plain-safe-out
//                             c = flow-in   ⇒ ns-plain-safe-in
//                             c = block-key ⇒ ns-plain-safe-out
//                             c = flow-key  ⇒ ns-plain-safe-in
// [128] ns-plain-safe-out ::= ns-char
// [129]  ns-plain-safe-in ::= ns-char - c-flow-indicator
// [130]  ns-plain-char(c) ::=  ( ns-plain-safe(c) - “:” - “#” )
//                            | ( /* An ns-char preceding */ “#” )
//                            | ( “:” /* Followed by an ns-plain-safe(c) */ )


function isPlainSafe(c, prev, inblock) {
  var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
  var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
  return ( // ns-plain-safe
  inblock ? // c = flow-in
  cIsNsCharOrWhitespace : cIsNsCharOrWhitespace // - c-flow-indicator
  && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET // ns-plain-char
  ) && c !== CHAR_SHARP // false on '#'
  && !(prev === CHAR_COLON && !cIsNsChar) // false on ': '
  || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP // change to true on '[^ ]#'
  || prev === CHAR_COLON && cIsNsChar; // change to true on ':[^ ]'
} // Simplified test for values allowed as the first character in plain style.


function isPlainSafeFirst(c) {
  // Uses a subset of ns-char - c-indicator
  // where ns-char = nb-char - s-white.
  // No support of ( ( “?” | “:” | “-” ) /* Followed by an ns-plain-safe(c)) */ ) part
  return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) // - s-white
  // - (c-indicator ::=
  // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”
  && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET // | “#” | “&” | “*” | “!” | “|” | “=” | “>” | “'” | “"”
  && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE // | “%” | “@” | “`”)
  && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
} // Simplified test for values allowed as the last character in plain style.


function isPlainSafeLast(c) {
  // just not whitespace or colon, it will be checked to be plain character later
  return !isWhitespace(c) && c !== CHAR_COLON;
} // Same as 'string'.codePointAt(pos), but works in older browsers.


function codePointAt(string, pos) {
  var first = string.charCodeAt(pos),
      second;

  if (first >= 0xD800 && first <= 0xDBFF && pos + 1 < string.length) {
    second = string.charCodeAt(pos + 1);

    if (second >= 0xDC00 && second <= 0xDFFF) {
      // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
      return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
    }
  }

  return first;
} // Determines whether block indentation indicator is required.


function needIndentIndicator(string) {
  var leadingSpaceRe = /^\n* /;
  return leadingSpaceRe.test(string);
}

var STYLE_PLAIN = 1,
    STYLE_SINGLE = 2,
    STYLE_LITERAL = 3,
    STYLE_FOLDED = 4,
    STYLE_DOUBLE = 5; // Determines which scalar styles are possible and returns the preferred style.
// lineWidth = -1 => no limit.
// Pre-conditions: str.length > 0.
// Post-conditions:
//    STYLE_PLAIN or STYLE_SINGLE => no \n are in the string.
//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).
//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).

function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {
  var i;
  var char = 0;
  var prevChar = null;
  var hasLineBreak = false;
  var hasFoldableLine = false; // only checked if shouldTrackWidth

  var shouldTrackWidth = lineWidth !== -1;
  var previousLineBreak = -1; // count the first line correctly

  var plain = isPlainSafeFirst(codePointAt(string, 0)) && isPlainSafeLast(codePointAt(string, string.length - 1));

  if (singleLineOnly || forceQuotes) {
    // Case: no block styles.
    // Check for disallowed characters to rule out plain and single.
    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {
      char = codePointAt(string, i);

      if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }

      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
  } else {
    // Case: block styles permitted.
    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {
      char = codePointAt(string, i);

      if (char === CHAR_LINE_FEED) {
        hasLineBreak = true; // Check if any line can be folded.

        if (shouldTrackWidth) {
          hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.
          i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';
          previousLineBreak = i;
        }
      } else if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }

      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    } // in case the end is missing a \n


    hasFoldableLine = hasFoldableLine || shouldTrackWidth && i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';
  } // Although every style can represent \n without escaping, prefer block styles
  // for multiline, since they're more readable and they don't add empty lines.
  // Also prefer folding a super-long line.


  if (!hasLineBreak && !hasFoldableLine) {
    // Strings interpretable as another type have to be quoted;
    // e.g. the string 'true' vs. the boolean true.
    if (plain && !forceQuotes && !testAmbiguousType(string)) {
      return STYLE_PLAIN;
    }

    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
  } // Edge case: block indentation indicator can only have one digit.


  if (indentPerLevel > 9 && needIndentIndicator(string)) {
    return STYLE_DOUBLE;
  } // At this point we know block styles are valid.
  // Prefer literal style unless we want to fold.


  if (!forceQuotes) {
    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
  }

  return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
} // Note: line breaking/folding is implemented for only the folded style.
// NB. We drop the last trailing newline (if any) of a returned block scalar
//  since the dumper adds its own newline. This always works:
//    • No ending newline => unaffected; already using strip "-" chomping.
//    • Ending newline    => removed then restored.
//  Importantly, this keeps the "+" chomp indicator from gaining an extra line.


function writeScalar(state, string, level, iskey, inblock) {
  state.dump = function () {
    if (string.length === 0) {
      return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
    }

    if (!state.noCompatMode) {
      if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {
        return state.quotingType === QUOTING_TYPE_DOUBLE ? '"' + string + '"' : "'" + string + "'";
      }
    }

    var indent = state.indent * Math.max(1, level); // no 0-indent scalars
    // As indentation gets deeper, let the width decrease monotonically
    // to the lower bound min(state.lineWidth, 40).
    // Note that this implies
    //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.
    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.
    // This behaves better than a constant minimum width which disallows narrower options,
    // or an indent threshold which causes the width to suddenly increase.

    var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent); // Without knowing if keys are implicit/explicit, assume implicit for safety.

    var singleLineOnly = iskey // No block styles in flow mode.
    || state.flowLevel > -1 && level >= state.flowLevel;

    function testAmbiguity(string) {
      return testImplicitResolving(state, string);
    }

    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)) {
      case STYLE_PLAIN:
        return string;

      case STYLE_SINGLE:
        return "'" + string.replace(/'/g, "''") + "'";

      case STYLE_LITERAL:
        return '|' + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));

      case STYLE_FOLDED:
        return '>' + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));

      case STYLE_DOUBLE:
        return '"' + escapeString(string, lineWidth) + '"';

      default:
        throw new YAMLException('impossible error: invalid scalar style');
    }
  }();
} // Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.


function blockHeader(string, indentPerLevel) {
  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : ''; // note the special case: the string '\n' counts as a "trailing" empty line.

  var clip = string[string.length - 1] === '\n';
  var keep = clip && (string[string.length - 2] === '\n' || string === '\n');
  var chomp = keep ? '+' : clip ? '' : '-';
  return indentIndicator + chomp + '\n';
} // (See the note for writeScalar.)


function dropEndingNewline(string) {
  return string[string.length - 1] === '\n' ? string.slice(0, -1) : string;
} // Note: a long line without a suitable break point will exceed the width limit.
// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.


function foldString(string, width) {
  // In folded style, $k$ consecutive newlines output as $k+1$ newlines—
  // unless they're before or after a more-indented line, or at the very
  // beginning or end, in which case $k$ maps to $k$.
  // Therefore, parse each chunk as newline(s) followed by a content line.
  var lineRe = /(\n+)([^\n]*)/g; // first line (possibly an empty line)

  var result = function () {
    var nextLF = string.indexOf('\n');
    nextLF = nextLF !== -1 ? nextLF : string.length;
    lineRe.lastIndex = nextLF;
    return foldLine(string.slice(0, nextLF), width);
  }(); // If we haven't reached the first content line yet, don't add an extra \n.


  var prevMoreIndented = string[0] === '\n' || string[0] === ' ';
  var moreIndented; // rest of the lines

  var match;

  while (match = lineRe.exec(string)) {
    var prefix = match[1],
        line = match[2];
    moreIndented = line[0] === ' ';
    result += prefix + (!prevMoreIndented && !moreIndented && line !== '' ? '\n' : '') + foldLine(line, width);
    prevMoreIndented = moreIndented;
  }

  return result;
} // Greedy line breaking.
// Picks the longest line under the limit each time,
// otherwise settles for the shortest line over the limit.
// NB. More-indented lines *cannot* be folded, as that would add an extra \n.


function foldLine(line, width) {
  if (line === '' || line[0] === ' ') return line; // Since a more-indented line adds a \n, breaks can't be followed by a space.

  var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.

  var match; // start is an inclusive index. end, curr, and next are exclusive.

  var start = 0,
      end,
      curr = 0,
      next = 0;
  var result = ''; // Invariants: 0 <= start <= length-1.
  //   0 <= curr <= next <= max(0, length-2). curr - start <= width.
  // Inside the loop:
  //   A match implies length >= 2, so curr and next are <= length-2.

  while (match = breakRe.exec(line)) {
    next = match.index; // maintain invariant: curr - start <= width

    if (next - start > width) {
      end = curr > start ? curr : next; // derive end <= length-2

      result += '\n' + line.slice(start, end); // skip the space that was output as \n

      start = end + 1; // derive start <= length-1
    }

    curr = next;
  } // By the invariants, start <= length-1, so there is something left over.
  // It is either the whole string or a part starting from non-whitespace.


  result += '\n'; // Insert a break if the remainder is too long and there is a break available.

  if (line.length - start > width && curr > start) {
    result += line.slice(start, curr) + '\n' + line.slice(curr + 1);
  } else {
    result += line.slice(start);
  }

  return result.slice(1); // drop extra \n joiner
} // Escapes a double-quoted string.


function escapeString(string) {
  var result = '';
  var char = 0;
  var escapeSeq;

  for (var i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {
    char = codePointAt(string, i);
    escapeSeq = ESCAPE_SEQUENCES[char];

    if (!escapeSeq && isPrintable(char)) {
      result += string[i];
      if (char >= 0x10000) result += string[i + 1];
    } else {
      result += escapeSeq || encodeHex(char);
    }
  }

  return result;
}

function writeFlowSequence(state, level, object) {
  var _result = '',
      _tag = state.tag,
      index,
      length,
      value;

  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];

    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    } // Write only valid elements, put null instead of invalid elements.


    if (writeNode(state, level, value, false, false) || typeof value === 'undefined' && writeNode(state, level, null, false, false)) {
      if (_result !== '') _result += ',' + (!state.condenseFlow ? ' ' : '');
      _result += state.dump;
    }
  }

  state.tag = _tag;
  state.dump = '[' + _result + ']';
}

function writeBlockSequence(state, level, object, compact) {
  var _result = '',
      _tag = state.tag,
      index,
      length,
      value;

  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];

    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    } // Write only valid elements, put null instead of invalid elements.


    if (writeNode(state, level + 1, value, true, true, false, true) || typeof value === 'undefined' && writeNode(state, level + 1, null, true, true, false, true)) {
      if (!compact || _result !== '') {
        _result += generateNextLine(state, level);
      }

      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        _result += '-';
      } else {
        _result += '- ';
      }

      _result += state.dump;
    }
  }

  state.tag = _tag;
  state.dump = _result || '[]'; // Empty sequence if no valid values.
}

function writeFlowMapping(state, level, object) {
  var _result = '',
      _tag = state.tag,
      objectKeyList = Object.keys(object),
      index,
      length,
      objectKey,
      objectValue,
      pairBuffer;

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = '';
    if (_result !== '') pairBuffer += ', ';
    if (state.condenseFlow) pairBuffer += '"';
    objectKey = objectKeyList[index];
    objectValue = object[objectKey];

    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }

    if (!writeNode(state, level, objectKey, false, false)) {
      continue; // Skip this pair because of invalid key;
    }

    if (state.dump.length > 1024) pairBuffer += '? ';
    pairBuffer += state.dump + (state.condenseFlow ? '"' : '') + ':' + (state.condenseFlow ? '' : ' ');

    if (!writeNode(state, level, objectValue, false, false)) {
      continue; // Skip this pair because of invalid value.
    }

    pairBuffer += state.dump; // Both key and value are valid.

    _result += pairBuffer;
  }

  state.tag = _tag;
  state.dump = '{' + _result + '}';
}

function writeBlockMapping(state, level, object, compact) {
  var _result = '',
      _tag = state.tag,
      objectKeyList = Object.keys(object),
      index,
      length,
      objectKey,
      objectValue,
      explicitPair,
      pairBuffer; // Allow sorting keys so that the output file is deterministic

  if (state.sortKeys === true) {
    // Default sorting
    objectKeyList.sort();
  } else if (typeof state.sortKeys === 'function') {
    // Custom sort function
    objectKeyList.sort(state.sortKeys);
  } else if (state.sortKeys) {
    // Something is wrong
    throw new YAMLException('sortKeys must be a boolean or a function');
  }

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = '';

    if (!compact || _result !== '') {
      pairBuffer += generateNextLine(state, level);
    }

    objectKey = objectKeyList[index];
    objectValue = object[objectKey];

    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }

    if (!writeNode(state, level + 1, objectKey, true, true, true)) {
      continue; // Skip this pair because of invalid key.
    }

    explicitPair = state.tag !== null && state.tag !== '?' || state.dump && state.dump.length > 1024;

    if (explicitPair) {
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += '?';
      } else {
        pairBuffer += '? ';
      }
    }

    pairBuffer += state.dump;

    if (explicitPair) {
      pairBuffer += generateNextLine(state, level);
    }

    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
      continue; // Skip this pair because of invalid value.
    }

    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
      pairBuffer += ':';
    } else {
      pairBuffer += ': ';
    }

    pairBuffer += state.dump; // Both key and value are valid.

    _result += pairBuffer;
  }

  state.tag = _tag;
  state.dump = _result || '{}'; // Empty mapping if no valid pairs.
}

function detectType(state, object, explicit) {
  var _result, typeList, index, length, type, style;

  typeList = explicit ? state.explicitTypes : state.implicitTypes;

  for (index = 0, length = typeList.length; index < length; index += 1) {
    type = typeList[index];

    if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === 'object' && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {
      if (explicit) {
        if (type.multi && type.representName) {
          state.tag = type.representName(object);
        } else {
          state.tag = type.tag;
        }
      } else {
        state.tag = '?';
      }

      if (type.represent) {
        style = state.styleMap[type.tag] || type.defaultStyle;

        if (_toString.call(type.represent) === '[object Function]') {
          _result = type.represent(object, style);
        } else if (_hasOwnProperty.call(type.represent, style)) {
          _result = type.represent[style](object, style);
        } else {
          throw new YAMLException('!<' + type.tag + '> tag resolver accepts not "' + style + '" style');
        }

        state.dump = _result;
      }

      return true;
    }
  }

  return false;
} // Serializes `object` and writes it to global `result`.
// Returns true on success, or false on invalid object.
//


function writeNode(state, level, object, block, compact, iskey, isblockseq) {
  state.tag = null;
  state.dump = object;

  if (!detectType(state, object, false)) {
    detectType(state, object, true);
  }

  var type = _toString.call(state.dump);

  var inblock = block;
  var tagStr;

  if (block) {
    block = state.flowLevel < 0 || state.flowLevel > level;
  }

  var objectOrArray = type === '[object Object]' || type === '[object Array]',
      duplicateIndex,
      duplicate;

  if (objectOrArray) {
    duplicateIndex = state.duplicates.indexOf(object);
    duplicate = duplicateIndex !== -1;
  }

  if (state.tag !== null && state.tag !== '?' || duplicate || state.indent !== 2 && level > 0) {
    compact = false;
  }

  if (duplicate && state.usedDuplicates[duplicateIndex]) {
    state.dump = '*ref_' + duplicateIndex;
  } else {
    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
      state.usedDuplicates[duplicateIndex] = true;
    }

    if (type === '[object Object]') {
      if (block && Object.keys(state.dump).length !== 0) {
        writeBlockMapping(state, level, state.dump, compact);

        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowMapping(state, level, state.dump);

        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object Array]') {
      if (block && state.dump.length !== 0) {
        if (state.noArrayIndent && !isblockseq && level > 0) {
          writeBlockSequence(state, level - 1, state.dump, compact);
        } else {
          writeBlockSequence(state, level, state.dump, compact);
        }

        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowSequence(state, level, state.dump);

        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object String]') {
      if (state.tag !== '?') {
        writeScalar(state, state.dump, level, iskey, inblock);
      }
    } else if (type === '[object Undefined]') {
      return false;
    } else {
      if (state.skipInvalid) return false;
      throw new YAMLException('unacceptable kind of an object to dump ' + type);
    }

    if (state.tag !== null && state.tag !== '?') {
      // Need to encode all characters except those allowed by the spec:
      //
      // [35] ns-dec-digit    ::=  [#x30-#x39] /* 0-9 */
      // [36] ns-hex-digit    ::=  ns-dec-digit
      //                         | [#x41-#x46] /* A-F */ | [#x61-#x66] /* a-f */
      // [37] ns-ascii-letter ::=  [#x41-#x5A] /* A-Z */ | [#x61-#x7A] /* a-z */
      // [38] ns-word-char    ::=  ns-dec-digit | ns-ascii-letter | “-”
      // [39] ns-uri-char     ::=  “%” ns-hex-digit ns-hex-digit | ns-word-char | “#”
      //                         | “;” | “/” | “?” | “:” | “@” | “&” | “=” | “+” | “$” | “,”
      //                         | “_” | “.” | “!” | “~” | “*” | “'” | “(” | “)” | “[” | “]”
      //
      // Also need to encode '!' because it has special meaning (end of tag prefix).
      //
      tagStr = encodeURI(state.tag[0] === '!' ? state.tag.slice(1) : state.tag).replace(/!/g, '%21');

      if (state.tag[0] === '!') {
        tagStr = '!' + tagStr;
      } else if (tagStr.slice(0, 18) === 'tag:yaml.org,2002:') {
        tagStr = '!!' + tagStr.slice(18);
      } else {
        tagStr = '!<' + tagStr + '>';
      }

      state.dump = tagStr + ' ' + state.dump;
    }
  }

  return true;
}

function getDuplicateReferences(object, state) {
  var objects = [],
      duplicatesIndexes = [],
      index,
      length;
  inspectNode(object, objects, duplicatesIndexes);

  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
    state.duplicates.push(objects[duplicatesIndexes[index]]);
  }

  state.usedDuplicates = new Array(length);
}

function inspectNode(object, objects, duplicatesIndexes) {
  var objectKeyList, index, length;

  if (object !== null && typeof object === 'object') {
    index = objects.indexOf(object);

    if (index !== -1) {
      if (duplicatesIndexes.indexOf(index) === -1) {
        duplicatesIndexes.push(index);
      }
    } else {
      objects.push(object);

      if (Array.isArray(object)) {
        for (index = 0, length = object.length; index < length; index += 1) {
          inspectNode(object[index], objects, duplicatesIndexes);
        }
      } else {
        objectKeyList = Object.keys(object);

        for (index = 0, length = objectKeyList.length; index < length; index += 1) {
          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
        }
      }
    }
  }
}

function dump(input, options) {
  options = options || {};
  var state = new State(options);
  if (!state.noRefs) getDuplicateReferences(input, state);
  var value = input;

  if (state.replacer) {
    value = state.replacer.call({
      '': value
    }, '', value);
  }

  if (writeNode(state, 0, value, true, true)) return state.dump + '\n';
  return '';
}

module.exports.dump = dump;

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/exception.js":
/***/ ((module) => {

"use strict";
// YAML error class. http://stackoverflow.com/questions/8458984
//


function formatError(exception, compact) {
  var where = '',
      message = exception.reason || '(unknown reason)';
  if (!exception.mark) return message;

  if (exception.mark.name) {
    where += 'in "' + exception.mark.name + '" ';
  }

  where += '(' + (exception.mark.line + 1) + ':' + (exception.mark.column + 1) + ')';

  if (!compact && exception.mark.snippet) {
    where += '\n\n' + exception.mark.snippet;
  }

  return message + ' ' + where;
}

function YAMLException(reason, mark) {
  // Super constructor
  Error.call(this);
  this.name = 'YAMLException';
  this.reason = reason;
  this.mark = mark;
  this.message = formatError(this, false); // Include stack trace in error object

  if (Error.captureStackTrace) {
    // Chrome and NodeJS
    Error.captureStackTrace(this, this.constructor);
  } else {
    // FF, IE 10+ and Safari 6+. Fallback for others
    this.stack = new Error().stack || '';
  }
} // Inherit from Error


YAMLException.prototype = Object.create(Error.prototype);
YAMLException.prototype.constructor = YAMLException;

YAMLException.prototype.toString = function toString(compact) {
  return this.name + ': ' + formatError(this, compact);
};

module.exports = YAMLException;

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/loader.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/*eslint-disable max-len,no-use-before-define*/

var common = __webpack_require__("../shared/node_modules/js-yaml/lib/common.js");

var YAMLException = __webpack_require__("../shared/node_modules/js-yaml/lib/exception.js");

var makeSnippet = __webpack_require__("../shared/node_modules/js-yaml/lib/snippet.js");

var DEFAULT_SCHEMA = __webpack_require__("../shared/node_modules/js-yaml/lib/schema/default.js");

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var CONTEXT_FLOW_IN = 1;
var CONTEXT_FLOW_OUT = 2;
var CONTEXT_BLOCK_IN = 3;
var CONTEXT_BLOCK_OUT = 4;
var CHOMPING_CLIP = 1;
var CHOMPING_STRIP = 2;
var CHOMPING_KEEP = 3;
var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;

function _class(obj) {
  return Object.prototype.toString.call(obj);
}

function is_EOL(c) {
  return c === 0x0A
  /* LF */
  || c === 0x0D
  /* CR */
  ;
}

function is_WHITE_SPACE(c) {
  return c === 0x09
  /* Tab */
  || c === 0x20
  /* Space */
  ;
}

function is_WS_OR_EOL(c) {
  return c === 0x09
  /* Tab */
  || c === 0x20
  /* Space */
  || c === 0x0A
  /* LF */
  || c === 0x0D
  /* CR */
  ;
}

function is_FLOW_INDICATOR(c) {
  return c === 0x2C
  /* , */
  || c === 0x5B
  /* [ */
  || c === 0x5D
  /* ] */
  || c === 0x7B
  /* { */
  || c === 0x7D
  /* } */
  ;
}

function fromHexCode(c) {
  var lc;

  if (0x30
  /* 0 */
  <= c && c <= 0x39
  /* 9 */
  ) {
    return c - 0x30;
  }
  /*eslint-disable no-bitwise*/


  lc = c | 0x20;

  if (0x61
  /* a */
  <= lc && lc <= 0x66
  /* f */
  ) {
    return lc - 0x61 + 10;
  }

  return -1;
}

function escapedHexLen(c) {
  if (c === 0x78
  /* x */
  ) {
    return 2;
  }

  if (c === 0x75
  /* u */
  ) {
    return 4;
  }

  if (c === 0x55
  /* U */
  ) {
    return 8;
  }

  return 0;
}

function fromDecimalCode(c) {
  if (0x30
  /* 0 */
  <= c && c <= 0x39
  /* 9 */
  ) {
    return c - 0x30;
  }

  return -1;
}

function simpleEscapeSequence(c) {
  /* eslint-disable indent */
  return c === 0x30
  /* 0 */
  ? '\x00' : c === 0x61
  /* a */
  ? '\x07' : c === 0x62
  /* b */
  ? '\x08' : c === 0x74
  /* t */
  ? '\x09' : c === 0x09
  /* Tab */
  ? '\x09' : c === 0x6E
  /* n */
  ? '\x0A' : c === 0x76
  /* v */
  ? '\x0B' : c === 0x66
  /* f */
  ? '\x0C' : c === 0x72
  /* r */
  ? '\x0D' : c === 0x65
  /* e */
  ? '\x1B' : c === 0x20
  /* Space */
  ? ' ' : c === 0x22
  /* " */
  ? '\x22' : c === 0x2F
  /* / */
  ? '/' : c === 0x5C
  /* \ */
  ? '\x5C' : c === 0x4E
  /* N */
  ? '\x85' : c === 0x5F
  /* _ */
  ? '\xA0' : c === 0x4C
  /* L */
  ? '\u2028' : c === 0x50
  /* P */
  ? '\u2029' : '';
}

function charFromCodepoint(c) {
  if (c <= 0xFFFF) {
    return String.fromCharCode(c);
  } // Encode UTF-16 surrogate pair
  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF


  return String.fromCharCode((c - 0x010000 >> 10) + 0xD800, (c - 0x010000 & 0x03FF) + 0xDC00);
}

var simpleEscapeCheck = new Array(256); // integer, for fast access

var simpleEscapeMap = new Array(256);

for (var i = 0; i < 256; i++) {
  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
  simpleEscapeMap[i] = simpleEscapeSequence(i);
}

function State(input, options) {
  this.input = input;
  this.filename = options['filename'] || null;
  this.schema = options['schema'] || DEFAULT_SCHEMA;
  this.onWarning = options['onWarning'] || null; // (Hidden) Remove? makes the loader to expect YAML 1.1 documents
  // if such documents have no explicit %YAML directive

  this.legacy = options['legacy'] || false;
  this.json = options['json'] || false;
  this.listener = options['listener'] || null;
  this.implicitTypes = this.schema.compiledImplicit;
  this.typeMap = this.schema.compiledTypeMap;
  this.length = input.length;
  this.position = 0;
  this.line = 0;
  this.lineStart = 0;
  this.lineIndent = 0; // position of first leading tab in the current line,
  // used to make sure there are no tabs in the indentation

  this.firstTabInLine = -1;
  this.documents = [];
  /*
  this.version;
  this.checkLineBreaks;
  this.tagMap;
  this.anchorMap;
  this.tag;
  this.anchor;
  this.kind;
  this.result;*/
}

function generateError(state, message) {
  var mark = {
    name: state.filename,
    buffer: state.input.slice(0, -1),
    // omit trailing \0
    position: state.position,
    line: state.line,
    column: state.position - state.lineStart
  };
  mark.snippet = makeSnippet(mark);
  return new YAMLException(message, mark);
}

function throwError(state, message) {
  throw generateError(state, message);
}

function throwWarning(state, message) {
  if (state.onWarning) {
    state.onWarning.call(null, generateError(state, message));
  }
}

var directiveHandlers = {
  YAML: function handleYamlDirective(state, name, args) {
    var match, major, minor;

    if (state.version !== null) {
      throwError(state, 'duplication of %YAML directive');
    }

    if (args.length !== 1) {
      throwError(state, 'YAML directive accepts exactly one argument');
    }

    match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);

    if (match === null) {
      throwError(state, 'ill-formed argument of the YAML directive');
    }

    major = parseInt(match[1], 10);
    minor = parseInt(match[2], 10);

    if (major !== 1) {
      throwError(state, 'unacceptable YAML version of the document');
    }

    state.version = args[0];
    state.checkLineBreaks = minor < 2;

    if (minor !== 1 && minor !== 2) {
      throwWarning(state, 'unsupported YAML version of the document');
    }
  },
  TAG: function handleTagDirective(state, name, args) {
    var handle, prefix;

    if (args.length !== 2) {
      throwError(state, 'TAG directive accepts exactly two arguments');
    }

    handle = args[0];
    prefix = args[1];

    if (!PATTERN_TAG_HANDLE.test(handle)) {
      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');
    }

    if (_hasOwnProperty.call(state.tagMap, handle)) {
      throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
    }

    if (!PATTERN_TAG_URI.test(prefix)) {
      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');
    }

    try {
      prefix = decodeURIComponent(prefix);
    } catch (err) {
      throwError(state, 'tag prefix is malformed: ' + prefix);
    }

    state.tagMap[handle] = prefix;
  }
};

function captureSegment(state, start, end, checkJson) {
  var _position, _length, _character, _result;

  if (start < end) {
    _result = state.input.slice(start, end);

    if (checkJson) {
      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
        _character = _result.charCodeAt(_position);

        if (!(_character === 0x09 || 0x20 <= _character && _character <= 0x10FFFF)) {
          throwError(state, 'expected valid JSON character');
        }
      }
    } else if (PATTERN_NON_PRINTABLE.test(_result)) {
      throwError(state, 'the stream contains non-printable characters');
    }

    state.result += _result;
  }
}

function mergeMappings(state, destination, source, overridableKeys) {
  var sourceKeys, key, index, quantity;

  if (!common.isObject(source)) {
    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');
  }

  sourceKeys = Object.keys(source);

  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
    key = sourceKeys[index];

    if (!_hasOwnProperty.call(destination, key)) {
      destination[key] = source[key];
      overridableKeys[key] = true;
    }
  }
}

function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {
  var index, quantity; // The output is a plain object here, so keys can only be strings.
  // We need to convert keyNode to a string, but doing so can hang the process
  // (deeply nested arrays that explode exponentially using aliases).

  if (Array.isArray(keyNode)) {
    keyNode = Array.prototype.slice.call(keyNode);

    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
      if (Array.isArray(keyNode[index])) {
        throwError(state, 'nested arrays are not supported inside keys');
      }

      if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {
        keyNode[index] = '[object Object]';
      }
    }
  } // Avoid code execution in load() via toString property
  // (still use its own toString for arrays, timestamps,
  // and whatever user schema extensions happen to have @@toStringTag)


  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {
    keyNode = '[object Object]';
  }

  keyNode = String(keyNode);

  if (_result === null) {
    _result = {};
  }

  if (keyTag === 'tag:yaml.org,2002:merge') {
    if (Array.isArray(valueNode)) {
      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
        mergeMappings(state, _result, valueNode[index], overridableKeys);
      }
    } else {
      mergeMappings(state, _result, valueNode, overridableKeys);
    }
  } else {
    if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {
      state.line = startLine || state.line;
      state.lineStart = startLineStart || state.lineStart;
      state.position = startPos || state.position;
      throwError(state, 'duplicated mapping key');
    } // used for this specific key only because Object.defineProperty is slow


    if (keyNode === '__proto__') {
      Object.defineProperty(_result, keyNode, {
        configurable: true,
        enumerable: true,
        writable: true,
        value: valueNode
      });
    } else {
      _result[keyNode] = valueNode;
    }

    delete overridableKeys[keyNode];
  }

  return _result;
}

function readLineBreak(state) {
  var ch;
  ch = state.input.charCodeAt(state.position);

  if (ch === 0x0A
  /* LF */
  ) {
    state.position++;
  } else if (ch === 0x0D
  /* CR */
  ) {
    state.position++;

    if (state.input.charCodeAt(state.position) === 0x0A
    /* LF */
    ) {
      state.position++;
    }
  } else {
    throwError(state, 'a line break is expected');
  }

  state.line += 1;
  state.lineStart = state.position;
  state.firstTabInLine = -1;
}

function skipSeparationSpace(state, allowComments, checkIndent) {
  var lineBreaks = 0,
      ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    while (is_WHITE_SPACE(ch)) {
      if (ch === 0x09
      /* Tab */
      && state.firstTabInLine === -1) {
        state.firstTabInLine = state.position;
      }

      ch = state.input.charCodeAt(++state.position);
    }

    if (allowComments && ch === 0x23
    /* # */
    ) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 0x0A
      /* LF */
      && ch !== 0x0D
      /* CR */
      && ch !== 0);
    }

    if (is_EOL(ch)) {
      readLineBreak(state);
      ch = state.input.charCodeAt(state.position);
      lineBreaks++;
      state.lineIndent = 0;

      while (ch === 0x20
      /* Space */
      ) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
    } else {
      break;
    }
  }

  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
    throwWarning(state, 'deficient indentation');
  }

  return lineBreaks;
}

function testDocumentSeparator(state) {
  var _position = state.position,
      ch;
  ch = state.input.charCodeAt(_position); // Condition state.position === state.lineStart is tested
  // in parent on each call, for efficiency. No needs to test here again.

  if ((ch === 0x2D
  /* - */
  || ch === 0x2E
  /* . */
  ) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
    _position += 3;
    ch = state.input.charCodeAt(_position);

    if (ch === 0 || is_WS_OR_EOL(ch)) {
      return true;
    }
  }

  return false;
}

function writeFoldedLines(state, count) {
  if (count === 1) {
    state.result += ' ';
  } else if (count > 1) {
    state.result += common.repeat('\n', count - 1);
  }
}

function readPlainScalar(state, nodeIndent, withinFlowCollection) {
  var preceding,
      following,
      captureStart,
      captureEnd,
      hasPendingContent,
      _line,
      _lineStart,
      _lineIndent,
      _kind = state.kind,
      _result = state.result,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 0x23
  /* # */
  || ch === 0x26
  /* & */
  || ch === 0x2A
  /* * */
  || ch === 0x21
  /* ! */
  || ch === 0x7C
  /* | */
  || ch === 0x3E
  /* > */
  || ch === 0x27
  /* ' */
  || ch === 0x22
  /* " */
  || ch === 0x25
  /* % */
  || ch === 0x40
  /* @ */
  || ch === 0x60
  /* ` */
  ) {
    return false;
  }

  if (ch === 0x3F
  /* ? */
  || ch === 0x2D
  /* - */
  ) {
    following = state.input.charCodeAt(state.position + 1);

    if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
      return false;
    }
  }

  state.kind = 'scalar';
  state.result = '';
  captureStart = captureEnd = state.position;
  hasPendingContent = false;

  while (ch !== 0) {
    if (ch === 0x3A
    /* : */
    ) {
      following = state.input.charCodeAt(state.position + 1);

      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
        break;
      }
    } else if (ch === 0x23
    /* # */
    ) {
      preceding = state.input.charCodeAt(state.position - 1);

      if (is_WS_OR_EOL(preceding)) {
        break;
      }
    } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
      break;
    } else if (is_EOL(ch)) {
      _line = state.line;
      _lineStart = state.lineStart;
      _lineIndent = state.lineIndent;
      skipSeparationSpace(state, false, -1);

      if (state.lineIndent >= nodeIndent) {
        hasPendingContent = true;
        ch = state.input.charCodeAt(state.position);
        continue;
      } else {
        state.position = captureEnd;
        state.line = _line;
        state.lineStart = _lineStart;
        state.lineIndent = _lineIndent;
        break;
      }
    }

    if (hasPendingContent) {
      captureSegment(state, captureStart, captureEnd, false);
      writeFoldedLines(state, state.line - _line);
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
    }

    if (!is_WHITE_SPACE(ch)) {
      captureEnd = state.position + 1;
    }

    ch = state.input.charCodeAt(++state.position);
  }

  captureSegment(state, captureStart, captureEnd, false);

  if (state.result) {
    return true;
  }

  state.kind = _kind;
  state.result = _result;
  return false;
}

function readSingleQuotedScalar(state, nodeIndent) {
  var ch, captureStart, captureEnd;
  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x27
  /* ' */
  ) {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x27
    /* ' */
    ) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);

      if (ch === 0x27
      /* ' */
      ) {
        captureStart = state.position;
        state.position++;
        captureEnd = state.position;
      } else {
        return true;
      }
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a single quoted scalar');
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }

  throwError(state, 'unexpected end of the stream within a single quoted scalar');
}

function readDoubleQuotedScalar(state, nodeIndent) {
  var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x22
  /* " */
  ) {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x22
    /* " */
    ) {
      captureSegment(state, captureStart, state.position, true);
      state.position++;
      return true;
    } else if (ch === 0x5C
    /* \ */
    ) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);

      if (is_EOL(ch)) {
        skipSeparationSpace(state, false, nodeIndent); // TODO: rework to inline fn with no type cast?
      } else if (ch < 256 && simpleEscapeCheck[ch]) {
        state.result += simpleEscapeMap[ch];
        state.position++;
      } else if ((tmp = escapedHexLen(ch)) > 0) {
        hexLength = tmp;
        hexResult = 0;

        for (; hexLength > 0; hexLength--) {
          ch = state.input.charCodeAt(++state.position);

          if ((tmp = fromHexCode(ch)) >= 0) {
            hexResult = (hexResult << 4) + tmp;
          } else {
            throwError(state, 'expected hexadecimal character');
          }
        }

        state.result += charFromCodepoint(hexResult);
        state.position++;
      } else {
        throwError(state, 'unknown escape sequence');
      }

      captureStart = captureEnd = state.position;
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a double quoted scalar');
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }

  throwError(state, 'unexpected end of the stream within a double quoted scalar');
}

function readFlowCollection(state, nodeIndent) {
  var readNext = true,
      _line,
      _lineStart,
      _pos,
      _tag = state.tag,
      _result,
      _anchor = state.anchor,
      following,
      terminator,
      isPair,
      isExplicitPair,
      isMapping,
      overridableKeys = Object.create(null),
      keyNode,
      keyTag,
      valueNode,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x5B
  /* [ */
  ) {
    terminator = 0x5D;
    /* ] */

    isMapping = false;
    _result = [];
  } else if (ch === 0x7B
  /* { */
  ) {
    terminator = 0x7D;
    /* } */

    isMapping = true;
    _result = {};
  } else {
    return false;
  }

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(++state.position);

  while (ch !== 0) {
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);

    if (ch === terminator) {
      state.position++;
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = isMapping ? 'mapping' : 'sequence';
      state.result = _result;
      return true;
    } else if (!readNext) {
      throwError(state, 'missed comma between flow collection entries');
    } else if (ch === 0x2C
    /* , */
    ) {
      // "flow collection entries can never be completely empty", as per YAML 1.2, section 7.4
      throwError(state, "expected the node content, but found ','");
    }

    keyTag = keyNode = valueNode = null;
    isPair = isExplicitPair = false;

    if (ch === 0x3F
    /* ? */
    ) {
      following = state.input.charCodeAt(state.position + 1);

      if (is_WS_OR_EOL(following)) {
        isPair = isExplicitPair = true;
        state.position++;
        skipSeparationSpace(state, true, nodeIndent);
      }
    }

    _line = state.line; // Save the current line.

    _lineStart = state.lineStart;
    _pos = state.position;
    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
    keyTag = state.tag;
    keyNode = state.result;
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);

    if ((isExplicitPair || state.line === _line) && ch === 0x3A
    /* : */
    ) {
      isPair = true;
      ch = state.input.charCodeAt(++state.position);
      skipSeparationSpace(state, true, nodeIndent);
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
      valueNode = state.result;
    }

    if (isMapping) {
      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
    } else if (isPair) {
      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
    } else {
      _result.push(keyNode);
    }

    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);

    if (ch === 0x2C
    /* , */
    ) {
      readNext = true;
      ch = state.input.charCodeAt(++state.position);
    } else {
      readNext = false;
    }
  }

  throwError(state, 'unexpected end of the stream within a flow collection');
}

function readBlockScalar(state, nodeIndent) {
  var captureStart,
      folding,
      chomping = CHOMPING_CLIP,
      didReadContent = false,
      detectedIndent = false,
      textIndent = nodeIndent,
      emptyLines = 0,
      atMoreIndented = false,
      tmp,
      ch;
  ch = state.input.charCodeAt(state.position);

  if (ch === 0x7C
  /* | */
  ) {
    folding = false;
  } else if (ch === 0x3E
  /* > */
  ) {
    folding = true;
  } else {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';

  while (ch !== 0) {
    ch = state.input.charCodeAt(++state.position);

    if (ch === 0x2B
    /* + */
    || ch === 0x2D
    /* - */
    ) {
      if (CHOMPING_CLIP === chomping) {
        chomping = ch === 0x2B
        /* + */
        ? CHOMPING_KEEP : CHOMPING_STRIP;
      } else {
        throwError(state, 'repeat of a chomping mode identifier');
      }
    } else if ((tmp = fromDecimalCode(ch)) >= 0) {
      if (tmp === 0) {
        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');
      } else if (!detectedIndent) {
        textIndent = nodeIndent + tmp - 1;
        detectedIndent = true;
      } else {
        throwError(state, 'repeat of an indentation width identifier');
      }
    } else {
      break;
    }
  }

  if (is_WHITE_SPACE(ch)) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (is_WHITE_SPACE(ch));

    if (ch === 0x23
    /* # */
    ) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (!is_EOL(ch) && ch !== 0);
    }
  }

  while (ch !== 0) {
    readLineBreak(state);
    state.lineIndent = 0;
    ch = state.input.charCodeAt(state.position);

    while ((!detectedIndent || state.lineIndent < textIndent) && ch === 0x20
    /* Space */
    ) {
      state.lineIndent++;
      ch = state.input.charCodeAt(++state.position);
    }

    if (!detectedIndent && state.lineIndent > textIndent) {
      textIndent = state.lineIndent;
    }

    if (is_EOL(ch)) {
      emptyLines++;
      continue;
    } // End of the scalar.


    if (state.lineIndent < textIndent) {
      // Perform the chomping.
      if (chomping === CHOMPING_KEEP) {
        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
      } else if (chomping === CHOMPING_CLIP) {
        if (didReadContent) {
          // i.e. only if the scalar is not empty.
          state.result += '\n';
        }
      } // Break this `while` cycle and go to the funciton's epilogue.


      break;
    } // Folded style: use fancy rules to handle line breaks.


    if (folding) {
      // Lines starting with white space characters (more-indented lines) are not folded.
      if (is_WHITE_SPACE(ch)) {
        atMoreIndented = true; // except for the first content line (cf. Example 8.1)

        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines); // End of more-indented block.
      } else if (atMoreIndented) {
        atMoreIndented = false;
        state.result += common.repeat('\n', emptyLines + 1); // Just one line break - perceive as the same line.
      } else if (emptyLines === 0) {
        if (didReadContent) {
          // i.e. only if we have already read some scalar content.
          state.result += ' ';
        } // Several line breaks - perceive as different lines.

      } else {
        state.result += common.repeat('\n', emptyLines);
      } // Literal style: just add exact number of line breaks between content lines.

    } else {
      // Keep all line breaks except the header line break.
      state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
    }

    didReadContent = true;
    detectedIndent = true;
    emptyLines = 0;
    captureStart = state.position;

    while (!is_EOL(ch) && ch !== 0) {
      ch = state.input.charCodeAt(++state.position);
    }

    captureSegment(state, captureStart, state.position, false);
  }

  return true;
}

function readBlockSequence(state, nodeIndent) {
  var _line,
      _tag = state.tag,
      _anchor = state.anchor,
      _result = [],
      following,
      detected = false,
      ch; // there is a leading tab before this token, so it can't be a block sequence/mapping;
  // it can still be flow sequence/mapping or a scalar


  if (state.firstTabInLine !== -1) return false;

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    if (state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, 'tab characters must not be used in indentation');
    }

    if (ch !== 0x2D
    /* - */
    ) {
      break;
    }

    following = state.input.charCodeAt(state.position + 1);

    if (!is_WS_OR_EOL(following)) {
      break;
    }

    detected = true;
    state.position++;

    if (skipSeparationSpace(state, true, -1)) {
      if (state.lineIndent <= nodeIndent) {
        _result.push(null);

        ch = state.input.charCodeAt(state.position);
        continue;
      }
    }

    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);

    _result.push(state.result);

    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);

    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, 'bad indentation of a sequence entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }

  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'sequence';
    state.result = _result;
    return true;
  }

  return false;
}

function readBlockMapping(state, nodeIndent, flowIndent) {
  var following,
      allowCompact,
      _line,
      _keyLine,
      _keyLineStart,
      _keyPos,
      _tag = state.tag,
      _anchor = state.anchor,
      _result = {},
      overridableKeys = Object.create(null),
      keyTag = null,
      keyNode = null,
      valueNode = null,
      atExplicitKey = false,
      detected = false,
      ch; // there is a leading tab before this token, so it can't be a block sequence/mapping;
  // it can still be flow sequence/mapping or a scalar


  if (state.firstTabInLine !== -1) return false;

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    if (!atExplicitKey && state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, 'tab characters must not be used in indentation');
    }

    following = state.input.charCodeAt(state.position + 1);
    _line = state.line; // Save the current line.
    //
    // Explicit notation case. There are two separate blocks:
    // first for the key (denoted by "?") and second for the value (denoted by ":")
    //

    if ((ch === 0x3F
    /* ? */
    || ch === 0x3A
    /* : */
    ) && is_WS_OR_EOL(following)) {
      if (ch === 0x3F
      /* ? */
      ) {
        if (atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
          keyTag = keyNode = valueNode = null;
        }

        detected = true;
        atExplicitKey = true;
        allowCompact = true;
      } else if (atExplicitKey) {
        // i.e. 0x3A/* : */ === character after the explicit key.
        atExplicitKey = false;
        allowCompact = true;
      } else {
        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');
      }

      state.position += 1;
      ch = following; //
      // Implicit notation case. Flow-style node as the key first, then ":", and the value.
      //
    } else {
      _keyLine = state.line;
      _keyLineStart = state.lineStart;
      _keyPos = state.position;

      if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
        // Neither implicit nor explicit notation.
        // Reading is done. Go to the epilogue.
        break;
      }

      if (state.line === _line) {
        ch = state.input.charCodeAt(state.position);

        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }

        if (ch === 0x3A
        /* : */
        ) {
          ch = state.input.charCodeAt(++state.position);

          if (!is_WS_OR_EOL(ch)) {
            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');
          }

          if (atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
            keyTag = keyNode = valueNode = null;
          }

          detected = true;
          atExplicitKey = false;
          allowCompact = false;
          keyTag = state.tag;
          keyNode = state.result;
        } else if (detected) {
          throwError(state, 'can not read an implicit mapping pair; a colon is missed');
        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true; // Keep the result of `composeNode`.
        }
      } else if (detected) {
        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');
      } else {
        state.tag = _tag;
        state.anchor = _anchor;
        return true; // Keep the result of `composeNode`.
      }
    } //
    // Common reading code for both explicit and implicit notations.
    //


    if (state.line === _line || state.lineIndent > nodeIndent) {
      if (atExplicitKey) {
        _keyLine = state.line;
        _keyLineStart = state.lineStart;
        _keyPos = state.position;
      }

      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
        if (atExplicitKey) {
          keyNode = state.result;
        } else {
          valueNode = state.result;
        }
      }

      if (!atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
        keyTag = keyNode = valueNode = null;
      }

      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
    }

    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, 'bad indentation of a mapping entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  } //
  // Epilogue.
  //
  // Special case: last mapping's node contains only the key in explicit notation.


  if (atExplicitKey) {
    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
  } // Expose the resulting mapping.


  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'mapping';
    state.result = _result;
  }

  return detected;
}

function readTagProperty(state) {
  var _position,
      isVerbatim = false,
      isNamed = false,
      tagHandle,
      tagName,
      ch;

  ch = state.input.charCodeAt(state.position);
  if (ch !== 0x21
  /* ! */
  ) return false;

  if (state.tag !== null) {
    throwError(state, 'duplication of a tag property');
  }

  ch = state.input.charCodeAt(++state.position);

  if (ch === 0x3C
  /* < */
  ) {
    isVerbatim = true;
    ch = state.input.charCodeAt(++state.position);
  } else if (ch === 0x21
  /* ! */
  ) {
    isNamed = true;
    tagHandle = '!!';
    ch = state.input.charCodeAt(++state.position);
  } else {
    tagHandle = '!';
  }

  _position = state.position;

  if (isVerbatim) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (ch !== 0 && ch !== 0x3E
    /* > */
    );

    if (state.position < state.length) {
      tagName = state.input.slice(_position, state.position);
      ch = state.input.charCodeAt(++state.position);
    } else {
      throwError(state, 'unexpected end of the stream within a verbatim tag');
    }
  } else {
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      if (ch === 0x21
      /* ! */
      ) {
        if (!isNamed) {
          tagHandle = state.input.slice(_position - 1, state.position + 1);

          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
            throwError(state, 'named tag handle cannot contain such characters');
          }

          isNamed = true;
          _position = state.position + 1;
        } else {
          throwError(state, 'tag suffix cannot contain exclamation marks');
        }
      }

      ch = state.input.charCodeAt(++state.position);
    }

    tagName = state.input.slice(_position, state.position);

    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
      throwError(state, 'tag suffix cannot contain flow indicator characters');
    }
  }

  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
    throwError(state, 'tag name cannot contain such characters: ' + tagName);
  }

  try {
    tagName = decodeURIComponent(tagName);
  } catch (err) {
    throwError(state, 'tag name is malformed: ' + tagName);
  }

  if (isVerbatim) {
    state.tag = tagName;
  } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
    state.tag = state.tagMap[tagHandle] + tagName;
  } else if (tagHandle === '!') {
    state.tag = '!' + tagName;
  } else if (tagHandle === '!!') {
    state.tag = 'tag:yaml.org,2002:' + tagName;
  } else {
    throwError(state, 'undeclared tag handle "' + tagHandle + '"');
  }

  return true;
}

function readAnchorProperty(state) {
  var _position, ch;

  ch = state.input.charCodeAt(state.position);
  if (ch !== 0x26
  /* & */
  ) return false;

  if (state.anchor !== null) {
    throwError(state, 'duplication of an anchor property');
  }

  ch = state.input.charCodeAt(++state.position);
  _position = state.position;

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }

  if (state.position === _position) {
    throwError(state, 'name of an anchor node must contain at least one character');
  }

  state.anchor = state.input.slice(_position, state.position);
  return true;
}

function readAlias(state) {
  var _position, alias, ch;

  ch = state.input.charCodeAt(state.position);
  if (ch !== 0x2A
  /* * */
  ) return false;
  ch = state.input.charCodeAt(++state.position);
  _position = state.position;

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }

  if (state.position === _position) {
    throwError(state, 'name of an alias node must contain at least one character');
  }

  alias = state.input.slice(_position, state.position);

  if (!_hasOwnProperty.call(state.anchorMap, alias)) {
    throwError(state, 'unidentified alias "' + alias + '"');
  }

  state.result = state.anchorMap[alias];
  skipSeparationSpace(state, true, -1);
  return true;
}

function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
  var allowBlockStyles,
      allowBlockScalars,
      allowBlockCollections,
      indentStatus = 1,
      // 1: this>parent, 0: this=parent, -1: this<parent
  atNewLine = false,
      hasContent = false,
      typeIndex,
      typeQuantity,
      typeList,
      type,
      flowIndent,
      blockIndent;

  if (state.listener !== null) {
    state.listener('open', state);
  }

  state.tag = null;
  state.anchor = null;
  state.kind = null;
  state.result = null;
  allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;

  if (allowToSeek) {
    if (skipSeparationSpace(state, true, -1)) {
      atNewLine = true;

      if (state.lineIndent > parentIndent) {
        indentStatus = 1;
      } else if (state.lineIndent === parentIndent) {
        indentStatus = 0;
      } else if (state.lineIndent < parentIndent) {
        indentStatus = -1;
      }
    }
  }

  if (indentStatus === 1) {
    while (readTagProperty(state) || readAnchorProperty(state)) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        allowBlockCollections = allowBlockStyles;

        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      } else {
        allowBlockCollections = false;
      }
    }
  }

  if (allowBlockCollections) {
    allowBlockCollections = atNewLine || allowCompact;
  }

  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
      flowIndent = parentIndent;
    } else {
      flowIndent = parentIndent + 1;
    }

    blockIndent = state.position - state.lineStart;

    if (indentStatus === 1) {
      if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
        hasContent = true;
      } else {
        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
          hasContent = true;
        } else if (readAlias(state)) {
          hasContent = true;

          if (state.tag !== null || state.anchor !== null) {
            throwError(state, 'alias node should not have any properties');
          }
        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
          hasContent = true;

          if (state.tag === null) {
            state.tag = '?';
          }
        }

        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else if (indentStatus === 0) {
      // Special case: block sequences are allowed to have same indentation level as the parent.
      // http://www.yaml.org/spec/1.2/spec.html#id2799784
      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
    }
  }

  if (state.tag === null) {
    if (state.anchor !== null) {
      state.anchorMap[state.anchor] = state.result;
    }
  } else if (state.tag === '?') {
    // Implicit resolving is not allowed for non-scalar types, and '?'
    // non-specific tag is only automatically assigned to plain scalars.
    //
    // We only need to check kind conformity in case user explicitly assigns '?'
    // tag, for example like this: "!<?> [0]"
    //
    if (state.result !== null && state.kind !== 'scalar') {
      throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
    }

    for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
      type = state.implicitTypes[typeIndex];

      if (type.resolve(state.result)) {
        // `state.result` updated in resolver if matched
        state.result = type.construct(state.result);
        state.tag = type.tag;

        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }

        break;
      }
    }
  } else if (state.tag !== '!') {
    if (_hasOwnProperty.call(state.typeMap[state.kind || 'fallback'], state.tag)) {
      type = state.typeMap[state.kind || 'fallback'][state.tag];
    } else {
      // looking for multi type
      type = null;
      typeList = state.typeMap.multi[state.kind || 'fallback'];

      for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {
        if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
          type = typeList[typeIndex];
          break;
        }
      }
    }

    if (!type) {
      throwError(state, 'unknown tag !<' + state.tag + '>');
    }

    if (state.result !== null && type.kind !== state.kind) {
      throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
    }

    if (!type.resolve(state.result, state.tag)) {
      // `state.result` updated in resolver if matched
      throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');
    } else {
      state.result = type.construct(state.result, state.tag);

      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = state.result;
      }
    }
  }

  if (state.listener !== null) {
    state.listener('close', state);
  }

  return state.tag !== null || state.anchor !== null || hasContent;
}

function readDocument(state) {
  var documentStart = state.position,
      _position,
      directiveName,
      directiveArgs,
      hasDirectives = false,
      ch;

  state.version = null;
  state.checkLineBreaks = state.legacy;
  state.tagMap = Object.create(null);
  state.anchorMap = Object.create(null);

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);

    if (state.lineIndent > 0 || ch !== 0x25
    /* % */
    ) {
      break;
    }

    hasDirectives = true;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;

    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }

    directiveName = state.input.slice(_position, state.position);
    directiveArgs = [];

    if (directiveName.length < 1) {
      throwError(state, 'directive name must not be less than one character in length');
    }

    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      if (ch === 0x23
      /* # */
      ) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && !is_EOL(ch));

        break;
      }

      if (is_EOL(ch)) break;
      _position = state.position;

      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      directiveArgs.push(state.input.slice(_position, state.position));
    }

    if (ch !== 0) readLineBreak(state);

    if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
      directiveHandlers[directiveName](state, directiveName, directiveArgs);
    } else {
      throwWarning(state, 'unknown document directive "' + directiveName + '"');
    }
  }

  skipSeparationSpace(state, true, -1);

  if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 0x2D
  /* - */
  && state.input.charCodeAt(state.position + 1) === 0x2D
  /* - */
  && state.input.charCodeAt(state.position + 2) === 0x2D
  /* - */
  ) {
    state.position += 3;
    skipSeparationSpace(state, true, -1);
  } else if (hasDirectives) {
    throwError(state, 'directives end mark is expected');
  }

  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
  skipSeparationSpace(state, true, -1);

  if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
    throwWarning(state, 'non-ASCII line breaks are interpreted as content');
  }

  state.documents.push(state.result);

  if (state.position === state.lineStart && testDocumentSeparator(state)) {
    if (state.input.charCodeAt(state.position) === 0x2E
    /* . */
    ) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    }

    return;
  }

  if (state.position < state.length - 1) {
    throwError(state, 'end of the stream or a document separator is expected');
  } else {
    return;
  }
}

function loadDocuments(input, options) {
  input = String(input);
  options = options || {};

  if (input.length !== 0) {
    // Add tailing `\n` if not exists
    if (input.charCodeAt(input.length - 1) !== 0x0A
    /* LF */
    && input.charCodeAt(input.length - 1) !== 0x0D
    /* CR */
    ) {
      input += '\n';
    } // Strip BOM


    if (input.charCodeAt(0) === 0xFEFF) {
      input = input.slice(1);
    }
  }

  var state = new State(input, options);
  var nullpos = input.indexOf('\0');

  if (nullpos !== -1) {
    state.position = nullpos;
    throwError(state, 'null byte is not allowed in input');
  } // Use 0 as string terminator. That significantly simplifies bounds check.


  state.input += '\0';

  while (state.input.charCodeAt(state.position) === 0x20
  /* Space */
  ) {
    state.lineIndent += 1;
    state.position += 1;
  }

  while (state.position < state.length - 1) {
    readDocument(state);
  }

  return state.documents;
}

function loadAll(input, iterator, options) {
  if (iterator !== null && typeof iterator === 'object' && typeof options === 'undefined') {
    options = iterator;
    iterator = null;
  }

  var documents = loadDocuments(input, options);

  if (typeof iterator !== 'function') {
    return documents;
  }

  for (var index = 0, length = documents.length; index < length; index += 1) {
    iterator(documents[index]);
  }
}

function load(input, options) {
  var documents = loadDocuments(input, options);

  if (documents.length === 0) {
    /*eslint-disable no-undefined*/
    return undefined;
  } else if (documents.length === 1) {
    return documents[0];
  }

  throw new YAMLException('expected a single document in the stream, but found more');
}

module.exports.loadAll = loadAll;
module.exports.load = load;

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/schema.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/*eslint-disable max-len*/

var YAMLException = __webpack_require__("../shared/node_modules/js-yaml/lib/exception.js");

var Type = __webpack_require__("../shared/node_modules/js-yaml/lib/type.js");

function compileList(schema, name) {
  var result = [];
  schema[name].forEach(function (currentType) {
    var newIndex = result.length;
    result.forEach(function (previousType, previousIndex) {
      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) {
        newIndex = previousIndex;
      }
    });
    result[newIndex] = currentType;
  });
  return result;
}

function
  /* lists... */
compileMap() {
  var result = {
    scalar: {},
    sequence: {},
    mapping: {},
    fallback: {},
    multi: {
      scalar: [],
      sequence: [],
      mapping: [],
      fallback: []
    }
  },
      index,
      length;

  function collectType(type) {
    if (type.multi) {
      result.multi[type.kind].push(type);
      result.multi['fallback'].push(type);
    } else {
      result[type.kind][type.tag] = result['fallback'][type.tag] = type;
    }
  }

  for (index = 0, length = arguments.length; index < length; index += 1) {
    arguments[index].forEach(collectType);
  }

  return result;
}

function Schema(definition) {
  return this.extend(definition);
}

Schema.prototype.extend = function extend(definition) {
  var implicit = [];
  var explicit = [];

  if (definition instanceof Type) {
    // Schema.extend(type)
    explicit.push(definition);
  } else if (Array.isArray(definition)) {
    // Schema.extend([ type1, type2, ... ])
    explicit = explicit.concat(definition);
  } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
    // Schema.extend({ explicit: [ type1, type2, ... ], implicit: [ type1, type2, ... ] })
    if (definition.implicit) implicit = implicit.concat(definition.implicit);
    if (definition.explicit) explicit = explicit.concat(definition.explicit);
  } else {
    throw new YAMLException('Schema.extend argument should be a Type, [ Type ], ' + 'or a schema definition ({ implicit: [...], explicit: [...] })');
  }

  implicit.forEach(function (type) {
    if (!(type instanceof Type)) {
      throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');
    }

    if (type.loadKind && type.loadKind !== 'scalar') {
      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');
    }

    if (type.multi) {
      throw new YAMLException('There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.');
    }
  });
  explicit.forEach(function (type) {
    if (!(type instanceof Type)) {
      throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');
    }
  });
  var result = Object.create(Schema.prototype);
  result.implicit = (this.implicit || []).concat(implicit);
  result.explicit = (this.explicit || []).concat(explicit);
  result.compiledImplicit = compileList(result, 'implicit');
  result.compiledExplicit = compileList(result, 'explicit');
  result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);
  return result;
};

module.exports = Schema;

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/schema/core.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Standard YAML's Core schema.
// http://www.yaml.org/spec/1.2/spec.html#id2804923
//
// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
// So, Core schema has no distinctions from JSON schema is JS-YAML.


module.exports = __webpack_require__("../shared/node_modules/js-yaml/lib/schema/json.js");

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/schema/default.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// JS-YAML's default schema for `safeLoad` function.
// It is not described in the YAML specification.
//
// This schema is based on standard YAML's Core schema and includes most of
// extra types described at YAML tag repository. (http://yaml.org/type/)


module.exports = (__webpack_require__("../shared/node_modules/js-yaml/lib/schema/core.js").extend)({
  implicit: [__webpack_require__("../shared/node_modules/js-yaml/lib/type/timestamp.js"), __webpack_require__("../shared/node_modules/js-yaml/lib/type/merge.js")],
  explicit: [__webpack_require__("../shared/node_modules/js-yaml/lib/type/binary.js"), __webpack_require__("../shared/node_modules/js-yaml/lib/type/omap.js"), __webpack_require__("../shared/node_modules/js-yaml/lib/type/pairs.js"), __webpack_require__("../shared/node_modules/js-yaml/lib/type/set.js")]
});

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/schema/failsafe.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Standard YAML's Failsafe schema.
// http://www.yaml.org/spec/1.2/spec.html#id2802346


var Schema = __webpack_require__("../shared/node_modules/js-yaml/lib/schema.js");

module.exports = new Schema({
  explicit: [__webpack_require__("../shared/node_modules/js-yaml/lib/type/str.js"), __webpack_require__("../shared/node_modules/js-yaml/lib/type/seq.js"), __webpack_require__("../shared/node_modules/js-yaml/lib/type/map.js")]
});

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/schema/json.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Standard YAML's JSON schema.
// http://www.yaml.org/spec/1.2/spec.html#id2803231
//
// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
// So, this schema is not such strict as defined in the YAML specification.
// It allows numbers in binary notaion, use `Null` and `NULL` as `null`, etc.


module.exports = (__webpack_require__("../shared/node_modules/js-yaml/lib/schema/failsafe.js").extend)({
  implicit: [__webpack_require__("../shared/node_modules/js-yaml/lib/type/null.js"), __webpack_require__("../shared/node_modules/js-yaml/lib/type/bool.js"), __webpack_require__("../shared/node_modules/js-yaml/lib/type/int.js"), __webpack_require__("../shared/node_modules/js-yaml/lib/type/float.js")]
});

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/snippet.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var common = __webpack_require__("../shared/node_modules/js-yaml/lib/common.js"); // get snippet for a single line, respecting maxLength


function getLine(buffer, lineStart, lineEnd, position, maxLineLength) {
  var head = '';
  var tail = '';
  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;

  if (position - lineStart > maxHalfLength) {
    head = ' ... ';
    lineStart = position - maxHalfLength + head.length;
  }

  if (lineEnd - position > maxHalfLength) {
    tail = ' ...';
    lineEnd = position + maxHalfLength - tail.length;
  }

  return {
    str: head + buffer.slice(lineStart, lineEnd).replace(/\t/g, '→') + tail,
    pos: position - lineStart + head.length // relative position

  };
}

function padStart(string, max) {
  return common.repeat(' ', max - string.length) + string;
}

function makeSnippet(mark, options) {
  options = Object.create(options || null);
  if (!mark.buffer) return null;
  if (!options.maxLength) options.maxLength = 79;
  if (typeof options.indent !== 'number') options.indent = 1;
  if (typeof options.linesBefore !== 'number') options.linesBefore = 3;
  if (typeof options.linesAfter !== 'number') options.linesAfter = 2;
  var re = /\r?\n|\r|\0/g;
  var lineStarts = [0];
  var lineEnds = [];
  var match;
  var foundLineNo = -1;

  while (match = re.exec(mark.buffer)) {
    lineEnds.push(match.index);
    lineStarts.push(match.index + match[0].length);

    if (mark.position <= match.index && foundLineNo < 0) {
      foundLineNo = lineStarts.length - 2;
    }
  }

  if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;
  var result = '',
      i,
      line;
  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;
  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);

  for (i = 1; i <= options.linesBefore; i++) {
    if (foundLineNo - i < 0) break;
    line = getLine(mark.buffer, lineStarts[foundLineNo - i], lineEnds[foundLineNo - i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]), maxLineLength);
    result = common.repeat(' ', options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) + ' | ' + line.str + '\n' + result;
  }

  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);
  result += common.repeat(' ', options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + ' | ' + line.str + '\n';
  result += common.repeat('-', options.indent + lineNoLength + 3 + line.pos) + '^' + '\n';

  for (i = 1; i <= options.linesAfter; i++) {
    if (foundLineNo + i >= lineEnds.length) break;
    line = getLine(mark.buffer, lineStarts[foundLineNo + i], lineEnds[foundLineNo + i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]), maxLineLength);
    result += common.repeat(' ', options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) + ' | ' + line.str + '\n';
  }

  return result.replace(/\n$/, '');
}

module.exports = makeSnippet;

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var YAMLException = __webpack_require__("../shared/node_modules/js-yaml/lib/exception.js");

var TYPE_CONSTRUCTOR_OPTIONS = ['kind', 'multi', 'resolve', 'construct', 'instanceOf', 'predicate', 'represent', 'representName', 'defaultStyle', 'styleAliases'];
var YAML_NODE_KINDS = ['scalar', 'sequence', 'mapping'];

function compileStyleAliases(map) {
  var result = {};

  if (map !== null) {
    Object.keys(map).forEach(function (style) {
      map[style].forEach(function (alias) {
        result[String(alias)] = style;
      });
    });
  }

  return result;
}

function Type(tag, options) {
  options = options || {};
  Object.keys(options).forEach(function (name) {
    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
      throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
    }
  }); // TODO: Add tag format check.

  this.options = options; // keep original options in case user wants to extend this type later

  this.tag = tag;
  this.kind = options['kind'] || null;

  this.resolve = options['resolve'] || function () {
    return true;
  };

  this.construct = options['construct'] || function (data) {
    return data;
  };

  this.instanceOf = options['instanceOf'] || null;
  this.predicate = options['predicate'] || null;
  this.represent = options['represent'] || null;
  this.representName = options['representName'] || null;
  this.defaultStyle = options['defaultStyle'] || null;
  this.multi = options['multi'] || false;
  this.styleAliases = compileStyleAliases(options['styleAliases'] || null);

  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
    throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
  }
}

module.exports = Type;

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/binary.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/*eslint-disable no-bitwise*/

var Type = __webpack_require__("../shared/node_modules/js-yaml/lib/type.js"); // [ 64, 65, 66 ] -> [ padding, CR, LF ]


var BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r';

function resolveYamlBinary(data) {
  if (data === null) return false;
  var code,
      idx,
      bitlen = 0,
      max = data.length,
      map = BASE64_MAP; // Convert one by one.

  for (idx = 0; idx < max; idx++) {
    code = map.indexOf(data.charAt(idx)); // Skip CR/LF

    if (code > 64) continue; // Fail on illegal characters

    if (code < 0) return false;
    bitlen += 6;
  } // If there are any bits left, source was corrupted


  return bitlen % 8 === 0;
}

function constructYamlBinary(data) {
  var idx,
      tailbits,
      input = data.replace(/[\r\n=]/g, ''),
      // remove CR/LF & padding to simplify scan
  max = input.length,
      map = BASE64_MAP,
      bits = 0,
      result = []; // Collect by 6*4 bits (3 bytes)

  for (idx = 0; idx < max; idx++) {
    if (idx % 4 === 0 && idx) {
      result.push(bits >> 16 & 0xFF);
      result.push(bits >> 8 & 0xFF);
      result.push(bits & 0xFF);
    }

    bits = bits << 6 | map.indexOf(input.charAt(idx));
  } // Dump tail


  tailbits = max % 4 * 6;

  if (tailbits === 0) {
    result.push(bits >> 16 & 0xFF);
    result.push(bits >> 8 & 0xFF);
    result.push(bits & 0xFF);
  } else if (tailbits === 18) {
    result.push(bits >> 10 & 0xFF);
    result.push(bits >> 2 & 0xFF);
  } else if (tailbits === 12) {
    result.push(bits >> 4 & 0xFF);
  }

  return new Uint8Array(result);
}

function representYamlBinary(object
/*, style*/
) {
  var result = '',
      bits = 0,
      idx,
      tail,
      max = object.length,
      map = BASE64_MAP; // Convert every three bytes to 4 ASCII characters.

  for (idx = 0; idx < max; idx++) {
    if (idx % 3 === 0 && idx) {
      result += map[bits >> 18 & 0x3F];
      result += map[bits >> 12 & 0x3F];
      result += map[bits >> 6 & 0x3F];
      result += map[bits & 0x3F];
    }

    bits = (bits << 8) + object[idx];
  } // Dump tail


  tail = max % 3;

  if (tail === 0) {
    result += map[bits >> 18 & 0x3F];
    result += map[bits >> 12 & 0x3F];
    result += map[bits >> 6 & 0x3F];
    result += map[bits & 0x3F];
  } else if (tail === 2) {
    result += map[bits >> 10 & 0x3F];
    result += map[bits >> 4 & 0x3F];
    result += map[bits << 2 & 0x3F];
    result += map[64];
  } else if (tail === 1) {
    result += map[bits >> 2 & 0x3F];
    result += map[bits << 4 & 0x3F];
    result += map[64];
    result += map[64];
  }

  return result;
}

function isBinary(obj) {
  return Object.prototype.toString.call(obj) === '[object Uint8Array]';
}

module.exports = new Type('tag:yaml.org,2002:binary', {
  kind: 'scalar',
  resolve: resolveYamlBinary,
  construct: constructYamlBinary,
  predicate: isBinary,
  represent: representYamlBinary
});

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/bool.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("../shared/node_modules/js-yaml/lib/type.js");

function resolveYamlBoolean(data) {
  if (data === null) return false;
  var max = data.length;
  return max === 4 && (data === 'true' || data === 'True' || data === 'TRUE') || max === 5 && (data === 'false' || data === 'False' || data === 'FALSE');
}

function constructYamlBoolean(data) {
  return data === 'true' || data === 'True' || data === 'TRUE';
}

function isBoolean(object) {
  return Object.prototype.toString.call(object) === '[object Boolean]';
}

module.exports = new Type('tag:yaml.org,2002:bool', {
  kind: 'scalar',
  resolve: resolveYamlBoolean,
  construct: constructYamlBoolean,
  predicate: isBoolean,
  represent: {
    lowercase: function (object) {
      return object ? 'true' : 'false';
    },
    uppercase: function (object) {
      return object ? 'TRUE' : 'FALSE';
    },
    camelcase: function (object) {
      return object ? 'True' : 'False';
    }
  },
  defaultStyle: 'lowercase'
});

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/float.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var common = __webpack_require__("../shared/node_modules/js-yaml/lib/common.js");

var Type = __webpack_require__("../shared/node_modules/js-yaml/lib/type.js");

var YAML_FLOAT_PATTERN = new RegExp( // 2.5e4, 2.5 and integers
'^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' + // .2e4, .2
// special case, seems not from spec
'|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' + // .inf
'|[-+]?\\.(?:inf|Inf|INF)' + // .nan
'|\\.(?:nan|NaN|NAN))$');

function resolveYamlFloat(data) {
  if (data === null) return false;

  if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`
  // Probably should update regexp & check speed
  data[data.length - 1] === '_') {
    return false;
  }

  return true;
}

function constructYamlFloat(data) {
  var value, sign;
  value = data.replace(/_/g, '').toLowerCase();
  sign = value[0] === '-' ? -1 : 1;

  if ('+-'.indexOf(value[0]) >= 0) {
    value = value.slice(1);
  }

  if (value === '.inf') {
    return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
  } else if (value === '.nan') {
    return NaN;
  }

  return sign * parseFloat(value, 10);
}

var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;

function representYamlFloat(object, style) {
  var res;

  if (isNaN(object)) {
    switch (style) {
      case 'lowercase':
        return '.nan';

      case 'uppercase':
        return '.NAN';

      case 'camelcase':
        return '.NaN';
    }
  } else if (Number.POSITIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase':
        return '.inf';

      case 'uppercase':
        return '.INF';

      case 'camelcase':
        return '.Inf';
    }
  } else if (Number.NEGATIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase':
        return '-.inf';

      case 'uppercase':
        return '-.INF';

      case 'camelcase':
        return '-.Inf';
    }
  } else if (common.isNegativeZero(object)) {
    return '-0.0';
  }

  res = object.toString(10); // JS stringifier can build scientific format without dots: 5e-100,
  // while YAML requres dot: 5.e-100. Fix it with simple hack

  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;
}

function isFloat(object) {
  return Object.prototype.toString.call(object) === '[object Number]' && (object % 1 !== 0 || common.isNegativeZero(object));
}

module.exports = new Type('tag:yaml.org,2002:float', {
  kind: 'scalar',
  resolve: resolveYamlFloat,
  construct: constructYamlFloat,
  predicate: isFloat,
  represent: representYamlFloat,
  defaultStyle: 'lowercase'
});

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/int.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var common = __webpack_require__("../shared/node_modules/js-yaml/lib/common.js");

var Type = __webpack_require__("../shared/node_modules/js-yaml/lib/type.js");

function isHexCode(c) {
  return 0x30
  /* 0 */
  <= c && c <= 0x39
  /* 9 */
  || 0x41
  /* A */
  <= c && c <= 0x46
  /* F */
  || 0x61
  /* a */
  <= c && c <= 0x66
  /* f */
  ;
}

function isOctCode(c) {
  return 0x30
  /* 0 */
  <= c && c <= 0x37
  /* 7 */
  ;
}

function isDecCode(c) {
  return 0x30
  /* 0 */
  <= c && c <= 0x39
  /* 9 */
  ;
}

function resolveYamlInteger(data) {
  if (data === null) return false;
  var max = data.length,
      index = 0,
      hasDigits = false,
      ch;
  if (!max) return false;
  ch = data[index]; // sign

  if (ch === '-' || ch === '+') {
    ch = data[++index];
  }

  if (ch === '0') {
    // 0
    if (index + 1 === max) return true;
    ch = data[++index]; // base 2, base 8, base 16

    if (ch === 'b') {
      // base 2
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (ch !== '0' && ch !== '1') return false;
        hasDigits = true;
      }

      return hasDigits && ch !== '_';
    }

    if (ch === 'x') {
      // base 16
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (!isHexCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }

      return hasDigits && ch !== '_';
    }

    if (ch === 'o') {
      // base 8
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (!isOctCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }

      return hasDigits && ch !== '_';
    }
  } // base 10 (except 0)
  // value should not start with `_`;


  if (ch === '_') return false;

  for (; index < max; index++) {
    ch = data[index];
    if (ch === '_') continue;

    if (!isDecCode(data.charCodeAt(index))) {
      return false;
    }

    hasDigits = true;
  } // Should have digits and should not end with `_`


  if (!hasDigits || ch === '_') return false;
  return true;
}

function constructYamlInteger(data) {
  var value = data,
      sign = 1,
      ch;

  if (value.indexOf('_') !== -1) {
    value = value.replace(/_/g, '');
  }

  ch = value[0];

  if (ch === '-' || ch === '+') {
    if (ch === '-') sign = -1;
    value = value.slice(1);
    ch = value[0];
  }

  if (value === '0') return 0;

  if (ch === '0') {
    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);
    if (value[1] === 'x') return sign * parseInt(value.slice(2), 16);
    if (value[1] === 'o') return sign * parseInt(value.slice(2), 8);
  }

  return sign * parseInt(value, 10);
}

function isInteger(object) {
  return Object.prototype.toString.call(object) === '[object Number]' && object % 1 === 0 && !common.isNegativeZero(object);
}

module.exports = new Type('tag:yaml.org,2002:int', {
  kind: 'scalar',
  resolve: resolveYamlInteger,
  construct: constructYamlInteger,
  predicate: isInteger,
  represent: {
    binary: function (obj) {
      return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1);
    },
    octal: function (obj) {
      return obj >= 0 ? '0o' + obj.toString(8) : '-0o' + obj.toString(8).slice(1);
    },
    decimal: function (obj) {
      return obj.toString(10);
    },

    /* eslint-disable max-len */
    hexadecimal: function (obj) {
      return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() : '-0x' + obj.toString(16).toUpperCase().slice(1);
    }
  },
  defaultStyle: 'decimal',
  styleAliases: {
    binary: [2, 'bin'],
    octal: [8, 'oct'],
    decimal: [10, 'dec'],
    hexadecimal: [16, 'hex']
  }
});

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/map.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("../shared/node_modules/js-yaml/lib/type.js");

module.exports = new Type('tag:yaml.org,2002:map', {
  kind: 'mapping',
  construct: function (data) {
    return data !== null ? data : {};
  }
});

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/merge.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("../shared/node_modules/js-yaml/lib/type.js");

function resolveYamlMerge(data) {
  return data === '<<' || data === null;
}

module.exports = new Type('tag:yaml.org,2002:merge', {
  kind: 'scalar',
  resolve: resolveYamlMerge
});

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/null.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("../shared/node_modules/js-yaml/lib/type.js");

function resolveYamlNull(data) {
  if (data === null) return true;
  var max = data.length;
  return max === 1 && data === '~' || max === 4 && (data === 'null' || data === 'Null' || data === 'NULL');
}

function constructYamlNull() {
  return null;
}

function isNull(object) {
  return object === null;
}

module.exports = new Type('tag:yaml.org,2002:null', {
  kind: 'scalar',
  resolve: resolveYamlNull,
  construct: constructYamlNull,
  predicate: isNull,
  represent: {
    canonical: function () {
      return '~';
    },
    lowercase: function () {
      return 'null';
    },
    uppercase: function () {
      return 'NULL';
    },
    camelcase: function () {
      return 'Null';
    },
    empty: function () {
      return '';
    }
  },
  defaultStyle: 'lowercase'
});

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/omap.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("../shared/node_modules/js-yaml/lib/type.js");

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _toString = Object.prototype.toString;

function resolveYamlOmap(data) {
  if (data === null) return true;
  var objectKeys = [],
      index,
      length,
      pair,
      pairKey,
      pairHasKey,
      object = data;

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    pairHasKey = false;
    if (_toString.call(pair) !== '[object Object]') return false;

    for (pairKey in pair) {
      if (_hasOwnProperty.call(pair, pairKey)) {
        if (!pairHasKey) pairHasKey = true;else return false;
      }
    }

    if (!pairHasKey) return false;
    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);else return false;
  }

  return true;
}

function constructYamlOmap(data) {
  return data !== null ? data : [];
}

module.exports = new Type('tag:yaml.org,2002:omap', {
  kind: 'sequence',
  resolve: resolveYamlOmap,
  construct: constructYamlOmap
});

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/pairs.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("../shared/node_modules/js-yaml/lib/type.js");

var _toString = Object.prototype.toString;

function resolveYamlPairs(data) {
  if (data === null) return true;
  var index,
      length,
      pair,
      keys,
      result,
      object = data;
  result = new Array(object.length);

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    if (_toString.call(pair) !== '[object Object]') return false;
    keys = Object.keys(pair);
    if (keys.length !== 1) return false;
    result[index] = [keys[0], pair[keys[0]]];
  }

  return true;
}

function constructYamlPairs(data) {
  if (data === null) return [];
  var index,
      length,
      pair,
      keys,
      result,
      object = data;
  result = new Array(object.length);

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    keys = Object.keys(pair);
    result[index] = [keys[0], pair[keys[0]]];
  }

  return result;
}

module.exports = new Type('tag:yaml.org,2002:pairs', {
  kind: 'sequence',
  resolve: resolveYamlPairs,
  construct: constructYamlPairs
});

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/seq.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("../shared/node_modules/js-yaml/lib/type.js");

module.exports = new Type('tag:yaml.org,2002:seq', {
  kind: 'sequence',
  construct: function (data) {
    return data !== null ? data : [];
  }
});

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/set.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("../shared/node_modules/js-yaml/lib/type.js");

var _hasOwnProperty = Object.prototype.hasOwnProperty;

function resolveYamlSet(data) {
  if (data === null) return true;
  var key,
      object = data;

  for (key in object) {
    if (_hasOwnProperty.call(object, key)) {
      if (object[key] !== null) return false;
    }
  }

  return true;
}

function constructYamlSet(data) {
  return data !== null ? data : {};
}

module.exports = new Type('tag:yaml.org,2002:set', {
  kind: 'mapping',
  resolve: resolveYamlSet,
  construct: constructYamlSet
});

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/str.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("../shared/node_modules/js-yaml/lib/type.js");

module.exports = new Type('tag:yaml.org,2002:str', {
  kind: 'scalar',
  construct: function (data) {
    return data !== null ? data : '';
  }
});

/***/ }),

/***/ "../shared/node_modules/js-yaml/lib/type/timestamp.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__("../shared/node_modules/js-yaml/lib/type.js");

var YAML_DATE_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' + // [1] year
'-([0-9][0-9])' + // [2] month
'-([0-9][0-9])$'); // [3] day

var YAML_TIMESTAMP_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' + // [1] year
'-([0-9][0-9]?)' + // [2] month
'-([0-9][0-9]?)' + // [3] day
'(?:[Tt]|[ \\t]+)' + // ...
'([0-9][0-9]?)' + // [4] hour
':([0-9][0-9])' + // [5] minute
':([0-9][0-9])' + // [6] second
'(?:\\.([0-9]*))?' + // [7] fraction
'(?:[ \\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour
'(?::([0-9][0-9]))?))?$'); // [11] tz_minute

function resolveYamlTimestamp(data) {
  if (data === null) return false;
  if (YAML_DATE_REGEXP.exec(data) !== null) return true;
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
  return false;
}

function constructYamlTimestamp(data) {
  var match,
      year,
      month,
      day,
      hour,
      minute,
      second,
      fraction = 0,
      delta = null,
      tz_hour,
      tz_minute,
      date;
  match = YAML_DATE_REGEXP.exec(data);
  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);
  if (match === null) throw new Error('Date resolve error'); // match: [1] year [2] month [3] day

  year = +match[1];
  month = +match[2] - 1; // JS month starts with 0

  day = +match[3];

  if (!match[4]) {
    // no hour
    return new Date(Date.UTC(year, month, day));
  } // match: [4] hour [5] minute [6] second [7] fraction


  hour = +match[4];
  minute = +match[5];
  second = +match[6];

  if (match[7]) {
    fraction = match[7].slice(0, 3);

    while (fraction.length < 3) {
      // milli-seconds
      fraction += '0';
    }

    fraction = +fraction;
  } // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute


  if (match[9]) {
    tz_hour = +match[10];
    tz_minute = +(match[11] || 0);
    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds

    if (match[9] === '-') delta = -delta;
  }

  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
  if (delta) date.setTime(date.getTime() - delta);
  return date;
}

function representYamlTimestamp(object
/*, style*/
) {
  return object.toISOString();
}

module.exports = new Type('tag:yaml.org,2002:timestamp', {
  kind: 'scalar',
  resolve: resolveYamlTimestamp,
  construct: constructYamlTimestamp,
  instanceOf: Date,
  represent: representYamlTimestamp
});

/***/ }),

/***/ "../shared/node_modules/json-schema-traverse/index.js":
/***/ ((module) => {

"use strict";


var traverse = module.exports = function (schema, opts, cb) {
  // Legacy support for v0.3.1 and earlier.
  if (typeof opts == 'function') {
    cb = opts;
    opts = {};
  }

  cb = opts.cb || cb;
  var pre = typeof cb == 'function' ? cb : cb.pre || function () {};

  var post = cb.post || function () {};

  _traverse(opts, pre, post, schema, '', schema);
};

traverse.keywords = {
  additionalItems: true,
  items: true,
  contains: true,
  additionalProperties: true,
  propertyNames: true,
  not: true,
  if: true,
  then: true,
  else: true
};
traverse.arrayKeywords = {
  items: true,
  allOf: true,
  anyOf: true,
  oneOf: true
};
traverse.propsKeywords = {
  $defs: true,
  definitions: true,
  properties: true,
  patternProperties: true,
  dependencies: true
};
traverse.skipKeywords = {
  default: true,
  enum: true,
  const: true,
  required: true,
  maximum: true,
  minimum: true,
  exclusiveMaximum: true,
  exclusiveMinimum: true,
  multipleOf: true,
  maxLength: true,
  minLength: true,
  pattern: true,
  format: true,
  maxItems: true,
  minItems: true,
  uniqueItems: true,
  maxProperties: true,
  minProperties: true
};

function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
  if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
    pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);

    for (var key in schema) {
      var sch = schema[key];

      if (Array.isArray(sch)) {
        if (key in traverse.arrayKeywords) {
          for (var i = 0; i < sch.length; i++) _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);
        }
      } else if (key in traverse.propsKeywords) {
        if (sch && typeof sch == 'object') {
          for (var prop in sch) _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
        }
      } else if (key in traverse.keywords || opts.allKeys && !(key in traverse.skipKeywords)) {
        _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
      }
    }

    post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
  }
}

function escapeJsonPtr(str) {
  return str.replace(/~/g, '~0').replace(/\//g, '~1');
}

/***/ }),

/***/ "../shared/node_modules/natural-compare/index.js":
/***/ ((module) => {

/*
 * @version    1.4.0
 * @date       2015-10-26
 * @stability  3 - Stable
 * @author     Lauri Rooden (https://github.com/litejs/natural-compare-lite)
 * @license    MIT License
 */
var naturalCompare = function (a, b) {
  var i,
      codeA,
      codeB = 1,
      posA = 0,
      posB = 0,
      alphabet = String.alphabet;

  function getCode(str, pos, code) {
    if (code) {
      for (i = pos; code = getCode(str, i), code < 76 && code > 65;) ++i;

      return +str.slice(pos - 1, i);
    }

    code = alphabet && alphabet.indexOf(str.charAt(pos));
    return code > -1 ? code + 76 : (code = str.charCodeAt(pos) || 0, code < 45 || code > 127) ? code : code < 46 ? 65 // -
    : code < 48 ? code - 1 : code < 58 ? code + 18 // 0-9
    : code < 65 ? code - 11 : code < 91 ? code + 11 // A-Z
    : code < 97 ? code - 37 : code < 123 ? code + 5 // a-z
    : code - 63;
  }

  if ((a += "") != (b += "")) for (; codeB;) {
    codeA = getCode(a, posA++);
    codeB = getCode(b, posB++);

    if (codeA < 76 && codeB < 76 && codeA > 66 && codeB > 66) {
      codeA = getCode(a, posA, posA);
      codeB = getCode(b, posB, posA = i);
      posB = i;
    }

    if (codeA != codeB) return codeA < codeB ? -1 : 1;
  }
  return 0;
};

try {
  module.exports = naturalCompare;
} catch (e) {
  String.naturalCompare = naturalCompare;
}

/***/ }),

/***/ "../shared/node_modules/uri-js/dist/es5/uri.all.js":
/***/ (function(__unused_webpack_module, exports) {

/** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */
(function (global, factory) {
   true ? factory(exports) : 0;
})(this, function (exports) {
  'use strict';

  function merge() {
    for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
      sets[_key] = arguments[_key];
    }

    if (sets.length > 1) {
      sets[0] = sets[0].slice(0, -1);
      var xl = sets.length - 1;

      for (var x = 1; x < xl; ++x) {
        sets[x] = sets[x].slice(1, -1);
      }

      sets[xl] = sets[xl].slice(1);
      return sets.join('');
    } else {
      return sets[0];
    }
  }

  function subexp(str) {
    return "(?:" + str + ")";
  }

  function typeOf(o) {
    return o === undefined ? "undefined" : o === null ? "null" : Object.prototype.toString.call(o).split(" ").pop().split("]").shift().toLowerCase();
  }

  function toUpperCase(str) {
    return str.toUpperCase();
  }

  function toArray(obj) {
    return obj !== undefined && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];
  }

  function assign(target, source) {
    var obj = target;

    if (source) {
      for (var key in source) {
        obj[key] = source[key];
      }
    }

    return obj;
  }

  function buildExps(isIRI) {
    var ALPHA$$ = "[A-Za-z]",
        CR$ = "[\\x0D]",
        DIGIT$$ = "[0-9]",
        DQUOTE$$ = "[\\x22]",
        HEXDIG$$ = merge(DIGIT$$, "[A-Fa-f]"),
        //case-insensitive
    LF$$ = "[\\x0A]",
        SP$$ = "[\\x20]",
        PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)),
        //expanded
    GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]",
        SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",
        RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),
        UCSCHAR$$ = isIRI ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]",
        //subset, excludes bidi control characters
    IPRIVATE$$ = isIRI ? "[\\uE000-\\uF8FF]" : "[]",
        //subset
    UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$),
        SCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*"),
        USERINFO$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]")) + "*"),
        DEC_OCTET$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("[1-9]" + DIGIT$$) + "|" + DIGIT$$),
        DEC_OCTET_RELAXED$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$),
        //relaxed parsing rules
    IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$),
        H16$ = subexp(HEXDIG$$ + "{1,4}"),
        LS32$ = subexp(subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$),
        IPV6ADDRESS1$ = subexp(subexp(H16$ + "\\:") + "{6}" + LS32$),
        //                           6( h16 ":" ) ls32
    IPV6ADDRESS2$ = subexp("\\:\\:" + subexp(H16$ + "\\:") + "{5}" + LS32$),
        //                      "::" 5( h16 ":" ) ls32
    IPV6ADDRESS3$ = subexp(subexp(H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{4}" + LS32$),
        //[               h16 ] "::" 4( h16 ":" ) ls32
    IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{3}" + LS32$),
        //[ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
    IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{2}" + LS32$),
        //[ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
    IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$),
        //[ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
    IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$),
        //[ *4( h16 ":" ) h16 ] "::"              ls32
    IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$),
        //[ *5( h16 ":" ) h16 ] "::"              h16
    IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"),
        //[ *6( h16 ":" ) h16 ] "::"
    IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")),
        ZONEID$ = subexp(subexp(UNRESERVED$$ + "|" + PCT_ENCODED$) + "+"),
        //RFC 6874
    IPV6ADDRZ$ = subexp(IPV6ADDRESS$ + "\\%25" + ZONEID$),
        //RFC 6874
    IPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + ZONEID$),
        //RFC 6874, with relaxed parsing rules
    IPVFUTURE$ = subexp("[vV]" + HEXDIG$$ + "+\\." + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]") + "+"),
        IP_LITERAL$ = subexp("\\[" + subexp(IPV6ADDRZ_RELAXED$ + "|" + IPV6ADDRESS$ + "|" + IPVFUTURE$) + "\\]"),
        //RFC 6874
    REG_NAME$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$)) + "*"),
        HOST$ = subexp(IP_LITERAL$ + "|" + IPV4ADDRESS$ + "(?!" + REG_NAME$ + ")" + "|" + REG_NAME$),
        PORT$ = subexp(DIGIT$$ + "*"),
        AUTHORITY$ = subexp(subexp(USERINFO$ + "@") + "?" + HOST$ + subexp("\\:" + PORT$) + "?"),
        PCHAR$ = subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@]")),
        SEGMENT$ = subexp(PCHAR$ + "*"),
        SEGMENT_NZ$ = subexp(PCHAR$ + "+"),
        SEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\@]")) + "+"),
        PATH_ABEMPTY$ = subexp(subexp("\\/" + SEGMENT$) + "*"),
        PATH_ABSOLUTE$ = subexp("\\/" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + "?"),
        //simplified
    PATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$),
        //simplified
    PATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$),
        //simplified
    PATH_EMPTY$ = "(?!" + PCHAR$ + ")",
        PATH$ = subexp(PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$),
        QUERY$ = subexp(subexp(PCHAR$ + "|" + merge("[\\/\\?]", IPRIVATE$$)) + "*"),
        FRAGMENT$ = subexp(subexp(PCHAR$ + "|[\\/\\?]") + "*"),
        HIER_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$),
        URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"),
        RELATIVE_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$),
        RELATIVE$ = subexp(RELATIVE_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"),
        URI_REFERENCE$ = subexp(URI$ + "|" + RELATIVE$),
        ABSOLUTE_URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?"),
        GENERIC_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$",
        RELATIVE_REF$ = "^(){0}" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$",
        ABSOLUTE_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?$",
        SAMEDOC_REF$ = "^" + subexp("\\#(" + FRAGMENT$ + ")") + "?$",
        AUTHORITY_REF$ = "^" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?$";
    return {
      NOT_SCHEME: new RegExp(merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
      NOT_USERINFO: new RegExp(merge("[^\\%\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
      NOT_HOST: new RegExp(merge("[^\\%\\[\\]\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
      NOT_PATH: new RegExp(merge("[^\\%\\/\\:\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
      NOT_PATH_NOSCHEME: new RegExp(merge("[^\\%\\/\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
      NOT_QUERY: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
      NOT_FRAGMENT: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
      ESCAPE: new RegExp(merge("[^]", UNRESERVED$$, SUB_DELIMS$$), "g"),
      UNRESERVED: new RegExp(UNRESERVED$$, "g"),
      OTHER_CHARS: new RegExp(merge("[^\\%]", UNRESERVED$$, RESERVED$$), "g"),
      PCT_ENCODED: new RegExp(PCT_ENCODED$, "g"),
      IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
      IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + subexp(subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$") //RFC 6874, with relaxed parsing rules

    };
  }

  var URI_PROTOCOL = buildExps(false);
  var IRI_PROTOCOL = buildExps(true);

  var slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  var toConsumableArray = function (arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    } else {
      return Array.from(arr);
    }
  };
  /** Highest positive signed 32-bit float value */


  var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

  /** Bootstring parameters */

  var base = 36;
  var tMin = 1;
  var tMax = 26;
  var skew = 38;
  var damp = 700;
  var initialBias = 72;
  var initialN = 128; // 0x80

  var delimiter = '-'; // '\x2D'

  /** Regular expressions */

  var regexPunycode = /^xn--/;
  var regexNonASCII = /[^\0-\x7E]/; // non-ASCII chars

  var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

  /** Error messages */

  var errors = {
    'overflow': 'Overflow: input needs wider integers to process',
    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    'invalid-input': 'Invalid input'
  };
  /** Convenience shortcuts */

  var baseMinusTMin = base - tMin;
  var floor = Math.floor;
  var stringFromCharCode = String.fromCharCode;
  /*--------------------------------------------------------------------------*/

  /**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a `RangeError` with the applicable error message.
   */

  function error$1(type) {
    throw new RangeError(errors[type]);
  }
  /**
   * A generic `Array#map` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */


  function map(array, fn) {
    var result = [];
    var length = array.length;

    while (length--) {
      result[length] = fn(array[length]);
    }

    return result;
  }
  /**
   * A simple `Array#map`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {Array} A new string of characters returned by the callback
   * function.
   */


  function mapDomain(string, fn) {
    var parts = string.split('@');
    var result = '';

    if (parts.length > 1) {
      // In email addresses, only the domain name should be punycoded. Leave
      // the local part (i.e. everything up to `@`) intact.
      result = parts[0] + '@';
      string = parts[1];
    } // Avoid `split(regex)` for IE8 compatibility. See #17.


    string = string.replace(regexSeparators, '\x2E');
    var labels = string.split('.');
    var encoded = map(labels, fn).join('.');
    return result + encoded;
  }
  /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */


  function ucs2decode(string) {
    var output = [];
    var counter = 0;
    var length = string.length;

    while (counter < length) {
      var value = string.charCodeAt(counter++);

      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
        // It's a high surrogate, and there is a next character.
        var extra = string.charCodeAt(counter++);

        if ((extra & 0xFC00) == 0xDC00) {
          // Low surrogate.
          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
        } else {
          // It's an unmatched surrogate; only append this code unit, in case the
          // next code unit is the high surrogate of a surrogate pair.
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }

    return output;
  }
  /**
   * Creates a string based on an array of numeric code points.
   * @see `punycode.ucs2.decode`
   * @memberOf punycode.ucs2
   * @name encode
   * @param {Array} codePoints The array of numeric code points.
   * @returns {String} The new Unicode string (UCS-2).
   */


  var ucs2encode = function ucs2encode(array) {
    return String.fromCodePoint.apply(String, toConsumableArray(array));
  };
  /**
   * Converts a basic code point into a digit/integer.
   * @see `digitToBasic()`
   * @private
   * @param {Number} codePoint The basic numeric code point value.
   * @returns {Number} The numeric value of a basic code point (for use in
   * representing integers) in the range `0` to `base - 1`, or `base` if
   * the code point does not represent a value.
   */


  var basicToDigit = function basicToDigit(codePoint) {
    if (codePoint - 0x30 < 0x0A) {
      return codePoint - 0x16;
    }

    if (codePoint - 0x41 < 0x1A) {
      return codePoint - 0x41;
    }

    if (codePoint - 0x61 < 0x1A) {
      return codePoint - 0x61;
    }

    return base;
  };
  /**
   * Converts a digit/integer into a basic code point.
   * @see `basicToDigit()`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is `digit`, which needs to be in the range
   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if `flag` is non-zero and `digit` has no uppercase form.
   */


  var digitToBasic = function digitToBasic(digit, flag) {
    //  0..25 map to ASCII a..z or A..Z
    // 26..35 map to ASCII 0..9
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  };
  /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */


  var adapt = function adapt(delta, numPoints, firstTime) {
    var k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);

    for (;
    /* no initialization */
    delta > baseMinusTMin * tMax >> 1; k += base) {
      delta = floor(delta / baseMinusTMin);
    }

    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  };
  /**
   * Converts a Punycode string of ASCII-only symbols to a string of Unicode
   * symbols.
   * @memberOf punycode
   * @param {String} input The Punycode string of ASCII-only symbols.
   * @returns {String} The resulting string of Unicode symbols.
   */


  var decode = function decode(input) {
    // Don't use UCS-2.
    var output = [];
    var inputLength = input.length;
    var i = 0;
    var n = initialN;
    var bias = initialBias; // Handle the basic code points: let `basic` be the number of input code
    // points before the last delimiter, or `0` if there is none, then copy
    // the first basic code points to the output.

    var basic = input.lastIndexOf(delimiter);

    if (basic < 0) {
      basic = 0;
    }

    for (var j = 0; j < basic; ++j) {
      // if it's not a basic code point
      if (input.charCodeAt(j) >= 0x80) {
        error$1('not-basic');
      }

      output.push(input.charCodeAt(j));
    } // Main decoding loop: start just after the last delimiter if any basic code
    // points were copied; start at the beginning otherwise.


    for (var index = basic > 0 ? basic + 1 : 0; index < inputLength;)
    /* no final expression */
    {
      // `index` is the index of the next character to be consumed.
      // Decode a generalized variable-length integer into `delta`,
      // which gets added to `i`. The overflow checking is easier
      // if we increase `i` as we go, then subtract off its starting
      // value at the end to obtain `delta`.
      var oldi = i;

      for (var w = 1, k = base;;
      /* no condition */
      k += base) {
        if (index >= inputLength) {
          error$1('invalid-input');
        }

        var digit = basicToDigit(input.charCodeAt(index++));

        if (digit >= base || digit > floor((maxInt - i) / w)) {
          error$1('overflow');
        }

        i += digit * w;
        var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

        if (digit < t) {
          break;
        }

        var baseMinusT = base - t;

        if (w > floor(maxInt / baseMinusT)) {
          error$1('overflow');
        }

        w *= baseMinusT;
      }

      var out = output.length + 1;
      bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,
      // incrementing `n` each time, so we'll fix that now:

      if (floor(i / out) > maxInt - n) {
        error$1('overflow');
      }

      n += floor(i / out);
      i %= out; // Insert `n` at position `i` of the output.

      output.splice(i++, 0, n);
    }

    return String.fromCodePoint.apply(String, output);
  };
  /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */


  var encode = function encode(input) {
    var output = []; // Convert the input in UCS-2 to an array of Unicode code points.

    input = ucs2decode(input); // Cache the length.

    var inputLength = input.length; // Initialize the state.

    var n = initialN;
    var delta = 0;
    var bias = initialBias; // Handle the basic code points.

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _currentValue2 = _step.value;

        if (_currentValue2 < 0x80) {
          output.push(stringFromCharCode(_currentValue2));
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    var basicLength = output.length;
    var handledCPCount = basicLength; // `handledCPCount` is the number of code points that have been handled;
    // `basicLength` is the number of basic code points.
    // Finish the basic string with a delimiter unless it's empty.

    if (basicLength) {
      output.push(delimiter);
    } // Main encoding loop:


    while (handledCPCount < inputLength) {
      // All non-basic code points < n have been handled already. Find the next
      // larger one:
      var m = maxInt;
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var currentValue = _step2.value;

          if (currentValue >= n && currentValue < m) {
            m = currentValue;
          }
        } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
        // but guard against overflow.

      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      var handledCPCountPlusOne = handledCPCount + 1;

      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
        error$1('overflow');
      }

      delta += (m - n) * handledCPCountPlusOne;
      n = m;
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var _currentValue = _step3.value;

          if (_currentValue < n && ++delta > maxInt) {
            error$1('overflow');
          }

          if (_currentValue == n) {
            // Represent delta as a generalized variable-length integer.
            var q = delta;

            for (var k = base;;
            /* no condition */
            k += base) {
              var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

              if (q < t) {
                break;
              }

              var qMinusT = q - t;
              var baseMinusT = base - t;
              output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
              q = floor(qMinusT / baseMinusT);
            }

            output.push(stringFromCharCode(digitToBasic(q, 0)));
            bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
            delta = 0;
            ++handledCPCount;
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      ++delta;
      ++n;
    }

    return output.join('');
  };
  /**
   * Converts a Punycode string representing a domain name or an email address
   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
   * it doesn't matter if you call it on a string that has already been
   * converted to Unicode.
   * @memberOf punycode
   * @param {String} input The Punycoded domain name or email address to
   * convert to Unicode.
   * @returns {String} The Unicode representation of the given Punycode
   * string.
   */


  var toUnicode = function toUnicode(input) {
    return mapDomain(input, function (string) {
      return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
    });
  };
  /**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */


  var toASCII = function toASCII(input) {
    return mapDomain(input, function (string) {
      return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
    });
  };
  /*--------------------------------------------------------------------------*/

  /** Define the public API */


  var punycode = {
    /**
     * A string representing the current Punycode.js version number.
     * @memberOf punycode
     * @type String
     */
    'version': '2.1.0',

    /**
     * An object of methods to convert from JavaScript's internal character
     * representation (UCS-2) to Unicode code points, and back.
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode
     * @type Object
     */
    'ucs2': {
      'decode': ucs2decode,
      'encode': ucs2encode
    },
    'decode': decode,
    'encode': encode,
    'toASCII': toASCII,
    'toUnicode': toUnicode
  };
  /**
   * URI.js
   *
   * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.
   * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
   * @see http://github.com/garycourt/uri-js
   */

  /**
   * Copyright 2011 Gary Court. All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without modification, are
   * permitted provided that the following conditions are met:
   *
   *    1. Redistributions of source code must retain the above copyright notice, this list of
   *       conditions and the following disclaimer.
   *
   *    2. Redistributions in binary form must reproduce the above copyright notice, this list
   *       of conditions and the following disclaimer in the documentation and/or other materials
   *       provided with the distribution.
   *
   * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED
   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
   * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR
   * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
   * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
   * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *
   * The views and conclusions contained in the software and documentation are those of the
   * authors and should not be interpreted as representing official policies, either expressed
   * or implied, of Gary Court.
   */

  var SCHEMES = {};

  function pctEncChar(chr) {
    var c = chr.charCodeAt(0);
    var e = void 0;
    if (c < 16) e = "%0" + c.toString(16).toUpperCase();else if (c < 128) e = "%" + c.toString(16).toUpperCase();else if (c < 2048) e = "%" + (c >> 6 | 192).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();else e = "%" + (c >> 12 | 224).toString(16).toUpperCase() + "%" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
    return e;
  }

  function pctDecChars(str) {
    var newStr = "";
    var i = 0;
    var il = str.length;

    while (i < il) {
      var c = parseInt(str.substr(i + 1, 2), 16);

      if (c < 128) {
        newStr += String.fromCharCode(c);
        i += 3;
      } else if (c >= 194 && c < 224) {
        if (il - i >= 6) {
          var c2 = parseInt(str.substr(i + 4, 2), 16);
          newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);
        } else {
          newStr += str.substr(i, 6);
        }

        i += 6;
      } else if (c >= 224) {
        if (il - i >= 9) {
          var _c = parseInt(str.substr(i + 4, 2), 16);

          var c3 = parseInt(str.substr(i + 7, 2), 16);
          newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);
        } else {
          newStr += str.substr(i, 9);
        }

        i += 9;
      } else {
        newStr += str.substr(i, 3);
        i += 3;
      }
    }

    return newStr;
  }

  function _normalizeComponentEncoding(components, protocol) {
    function decodeUnreserved(str) {
      var decStr = pctDecChars(str);
      return !decStr.match(protocol.UNRESERVED) ? str : decStr;
    }

    if (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, "");
    if (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    if (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    if (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    if (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    if (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    return components;
  }

  function _stripLeadingZeros(str) {
    return str.replace(/^0*(.*)/, "$1") || "0";
  }

  function _normalizeIPv4(host, protocol) {
    var matches = host.match(protocol.IPV4ADDRESS) || [];

    var _matches = slicedToArray(matches, 2),
        address = _matches[1];

    if (address) {
      return address.split(".").map(_stripLeadingZeros).join(".");
    } else {
      return host;
    }
  }

  function _normalizeIPv6(host, protocol) {
    var matches = host.match(protocol.IPV6ADDRESS) || [];

    var _matches2 = slicedToArray(matches, 3),
        address = _matches2[1],
        zone = _matches2[2];

    if (address) {
      var _address$toLowerCase$ = address.toLowerCase().split('::').reverse(),
          _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2),
          last = _address$toLowerCase$2[0],
          first = _address$toLowerCase$2[1];

      var firstFields = first ? first.split(":").map(_stripLeadingZeros) : [];
      var lastFields = last.split(":").map(_stripLeadingZeros);
      var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
      var fieldCount = isLastFieldIPv4Address ? 7 : 8;
      var lastFieldsStart = lastFields.length - fieldCount;
      var fields = Array(fieldCount);

      for (var x = 0; x < fieldCount; ++x) {
        fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';
      }

      if (isLastFieldIPv4Address) {
        fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);
      }

      var allZeroFields = fields.reduce(function (acc, field, index) {
        if (!field || field === "0") {
          var lastLongest = acc[acc.length - 1];

          if (lastLongest && lastLongest.index + lastLongest.length === index) {
            lastLongest.length++;
          } else {
            acc.push({
              index: index,
              length: 1
            });
          }
        }

        return acc;
      }, []);
      var longestZeroFields = allZeroFields.sort(function (a, b) {
        return b.length - a.length;
      })[0];
      var newHost = void 0;

      if (longestZeroFields && longestZeroFields.length > 1) {
        var newFirst = fields.slice(0, longestZeroFields.index);
        var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);
        newHost = newFirst.join(":") + "::" + newLast.join(":");
      } else {
        newHost = fields.join(":");
      }

      if (zone) {
        newHost += "%" + zone;
      }

      return newHost;
    } else {
      return host;
    }
  }

  var URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
  var NO_MATCH_IS_UNDEFINED = "".match(/(){0}/)[1] === undefined;

  function parse(uriString) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var components = {};
    var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
    if (options.reference === "suffix") uriString = (options.scheme ? options.scheme + ":" : "") + "//" + uriString;
    var matches = uriString.match(URI_PARSE);

    if (matches) {
      if (NO_MATCH_IS_UNDEFINED) {
        //store each component
        components.scheme = matches[1];
        components.userinfo = matches[3];
        components.host = matches[4];
        components.port = parseInt(matches[5], 10);
        components.path = matches[6] || "";
        components.query = matches[7];
        components.fragment = matches[8]; //fix port number

        if (isNaN(components.port)) {
          components.port = matches[5];
        }
      } else {
        //IE FIX for improper RegExp matching
        //store each component
        components.scheme = matches[1] || undefined;
        components.userinfo = uriString.indexOf("@") !== -1 ? matches[3] : undefined;
        components.host = uriString.indexOf("//") !== -1 ? matches[4] : undefined;
        components.port = parseInt(matches[5], 10);
        components.path = matches[6] || "";
        components.query = uriString.indexOf("?") !== -1 ? matches[7] : undefined;
        components.fragment = uriString.indexOf("#") !== -1 ? matches[8] : undefined; //fix port number

        if (isNaN(components.port)) {
          components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? matches[4] : undefined;
        }
      }

      if (components.host) {
        //normalize IP hosts
        components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);
      } //determine reference type


      if (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {
        components.reference = "same-document";
      } else if (components.scheme === undefined) {
        components.reference = "relative";
      } else if (components.fragment === undefined) {
        components.reference = "absolute";
      } else {
        components.reference = "uri";
      } //check for reference errors


      if (options.reference && options.reference !== "suffix" && options.reference !== components.reference) {
        components.error = components.error || "URI is not a " + options.reference + " reference.";
      } //find scheme handler


      var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()]; //check if scheme can't handle IRIs

      if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
        //if host component is a domain name
        if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {
          //convert Unicode IDN -> ASCII IDN
          try {
            components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());
          } catch (e) {
            components.error = components.error || "Host's domain name can not be converted to ASCII via punycode: " + e;
          }
        } //convert IRI -> URI


        _normalizeComponentEncoding(components, URI_PROTOCOL);
      } else {
        //normalize encodings
        _normalizeComponentEncoding(components, protocol);
      } //perform scheme specific parsing


      if (schemeHandler && schemeHandler.parse) {
        schemeHandler.parse(components, options);
      }
    } else {
      components.error = components.error || "URI can not be parsed.";
    }

    return components;
  }

  function _recomposeAuthority(components, options) {
    var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
    var uriTokens = [];

    if (components.userinfo !== undefined) {
      uriTokens.push(components.userinfo);
      uriTokens.push("@");
    }

    if (components.host !== undefined) {
      //normalize IP hosts, add brackets and escape zone separator for IPv6
      uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function (_, $1, $2) {
        return "[" + $1 + ($2 ? "%25" + $2 : "") + "]";
      }));
    }

    if (typeof components.port === "number" || typeof components.port === "string") {
      uriTokens.push(":");
      uriTokens.push(String(components.port));
    }

    return uriTokens.length ? uriTokens.join("") : undefined;
  }

  var RDS1 = /^\.\.?\//;
  var RDS2 = /^\/\.(\/|$)/;
  var RDS3 = /^\/\.\.(\/|$)/;
  var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;

  function removeDotSegments(input) {
    var output = [];

    while (input.length) {
      if (input.match(RDS1)) {
        input = input.replace(RDS1, "");
      } else if (input.match(RDS2)) {
        input = input.replace(RDS2, "/");
      } else if (input.match(RDS3)) {
        input = input.replace(RDS3, "/");
        output.pop();
      } else if (input === "." || input === "..") {
        input = "";
      } else {
        var im = input.match(RDS5);

        if (im) {
          var s = im[0];
          input = input.slice(s.length);
          output.push(s);
        } else {
          throw new Error("Unexpected dot segment condition");
        }
      }
    }

    return output.join("");
  }

  function serialize(components) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;
    var uriTokens = []; //find scheme handler

    var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()]; //perform scheme specific serialization

    if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);

    if (components.host) {
      //if host component is an IPv6 address
      if (protocol.IPV6ADDRESS.test(components.host)) {} //TODO: normalize IPv6 address as per RFC 5952
      //if host component is a domain name
      else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {
        //convert IDN via punycode
        try {
          components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);
        } catch (e) {
          components.error = components.error || "Host's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
        }
      }
    } //normalize encoding


    _normalizeComponentEncoding(components, protocol);

    if (options.reference !== "suffix" && components.scheme) {
      uriTokens.push(components.scheme);
      uriTokens.push(":");
    }

    var authority = _recomposeAuthority(components, options);

    if (authority !== undefined) {
      if (options.reference !== "suffix") {
        uriTokens.push("//");
      }

      uriTokens.push(authority);

      if (components.path && components.path.charAt(0) !== "/") {
        uriTokens.push("/");
      }
    }

    if (components.path !== undefined) {
      var s = components.path;

      if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
        s = removeDotSegments(s);
      }

      if (authority === undefined) {
        s = s.replace(/^\/\//, "/%2F"); //don't allow the path to start with "//"
      }

      uriTokens.push(s);
    }

    if (components.query !== undefined) {
      uriTokens.push("?");
      uriTokens.push(components.query);
    }

    if (components.fragment !== undefined) {
      uriTokens.push("#");
      uriTokens.push(components.fragment);
    }

    return uriTokens.join(""); //merge tokens into a string
  }

  function resolveComponents(base, relative) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var skipNormalization = arguments[3];
    var target = {};

    if (!skipNormalization) {
      base = parse(serialize(base, options), options); //normalize base components

      relative = parse(serialize(relative, options), options); //normalize relative components
    }

    options = options || {};

    if (!options.tolerant && relative.scheme) {
      target.scheme = relative.scheme; //target.authority = relative.authority;

      target.userinfo = relative.userinfo;
      target.host = relative.host;
      target.port = relative.port;
      target.path = removeDotSegments(relative.path || "");
      target.query = relative.query;
    } else {
      if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {
        //target.authority = relative.authority;
        target.userinfo = relative.userinfo;
        target.host = relative.host;
        target.port = relative.port;
        target.path = removeDotSegments(relative.path || "");
        target.query = relative.query;
      } else {
        if (!relative.path) {
          target.path = base.path;

          if (relative.query !== undefined) {
            target.query = relative.query;
          } else {
            target.query = base.query;
          }
        } else {
          if (relative.path.charAt(0) === "/") {
            target.path = removeDotSegments(relative.path);
          } else {
            if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {
              target.path = "/" + relative.path;
            } else if (!base.path) {
              target.path = relative.path;
            } else {
              target.path = base.path.slice(0, base.path.lastIndexOf("/") + 1) + relative.path;
            }

            target.path = removeDotSegments(target.path);
          }

          target.query = relative.query;
        } //target.authority = base.authority;


        target.userinfo = base.userinfo;
        target.host = base.host;
        target.port = base.port;
      }

      target.scheme = base.scheme;
    }

    target.fragment = relative.fragment;
    return target;
  }

  function resolve(baseURI, relativeURI, options) {
    var schemelessOptions = assign({
      scheme: 'null'
    }, options);
    return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);
  }

  function normalize(uri, options) {
    if (typeof uri === "string") {
      uri = serialize(parse(uri, options), options);
    } else if (typeOf(uri) === "object") {
      uri = parse(serialize(uri, options), options);
    }

    return uri;
  }

  function equal(uriA, uriB, options) {
    if (typeof uriA === "string") {
      uriA = serialize(parse(uriA, options), options);
    } else if (typeOf(uriA) === "object") {
      uriA = serialize(uriA, options);
    }

    if (typeof uriB === "string") {
      uriB = serialize(parse(uriB, options), options);
    } else if (typeOf(uriB) === "object") {
      uriB = serialize(uriB, options);
    }

    return uriA === uriB;
  }

  function escapeComponent(str, options) {
    return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);
  }

  function unescapeComponent(str, options) {
    return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);
  }

  var handler = {
    scheme: "http",
    domainHost: true,
    parse: function parse(components, options) {
      //report missing host
      if (!components.host) {
        components.error = components.error || "HTTP URIs must have a host.";
      }

      return components;
    },
    serialize: function serialize(components, options) {
      var secure = String(components.scheme).toLowerCase() === "https"; //normalize the default port

      if (components.port === (secure ? 443 : 80) || components.port === "") {
        components.port = undefined;
      } //normalize the empty path


      if (!components.path) {
        components.path = "/";
      } //NOTE: We do not parse query strings for HTTP URIs
      //as WWW Form Url Encoded query strings are part of the HTML4+ spec,
      //and not the HTTP spec.


      return components;
    }
  };
  var handler$1 = {
    scheme: "https",
    domainHost: handler.domainHost,
    parse: handler.parse,
    serialize: handler.serialize
  };

  function isSecure(wsComponents) {
    return typeof wsComponents.secure === 'boolean' ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === "wss";
  } //RFC 6455


  var handler$2 = {
    scheme: "ws",
    domainHost: true,
    parse: function parse(components, options) {
      var wsComponents = components; //indicate if the secure flag is set

      wsComponents.secure = isSecure(wsComponents); //construct resouce name

      wsComponents.resourceName = (wsComponents.path || '/') + (wsComponents.query ? '?' + wsComponents.query : '');
      wsComponents.path = undefined;
      wsComponents.query = undefined;
      return wsComponents;
    },
    serialize: function serialize(wsComponents, options) {
      //normalize the default port
      if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === "") {
        wsComponents.port = undefined;
      } //ensure scheme matches secure flag


      if (typeof wsComponents.secure === 'boolean') {
        wsComponents.scheme = wsComponents.secure ? 'wss' : 'ws';
        wsComponents.secure = undefined;
      } //reconstruct path from resource name


      if (wsComponents.resourceName) {
        var _wsComponents$resourc = wsComponents.resourceName.split('?'),
            _wsComponents$resourc2 = slicedToArray(_wsComponents$resourc, 2),
            path = _wsComponents$resourc2[0],
            query = _wsComponents$resourc2[1];

        wsComponents.path = path && path !== '/' ? path : undefined;
        wsComponents.query = query;
        wsComponents.resourceName = undefined;
      } //forbid fragment component


      wsComponents.fragment = undefined;
      return wsComponents;
    }
  };
  var handler$3 = {
    scheme: "wss",
    domainHost: handler$2.domainHost,
    parse: handler$2.parse,
    serialize: handler$2.serialize
  };
  var O = {};
  var isIRI = true; //RFC 3986

  var UNRESERVED$$ = "[A-Za-z0-9\\-\\.\\_\\~" + (isIRI ? "\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF" : "") + "]";
  var HEXDIG$$ = "[0-9A-Fa-f]"; //case-insensitive

  var PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)); //expanded
  //RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =
  //const ATEXT$$ = "[A-Za-z0-9\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~]";
  //const WSP$$ = "[\\x20\\x09]";
  //const OBS_QTEXT$$ = "[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]";  //(%d1-8 / %d11-12 / %d14-31 / %d127)
  //const QTEXT$$ = merge("[\\x21\\x23-\\x5B\\x5D-\\x7E]", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext
  //const VCHAR$$ = "[\\x21-\\x7E]";
  //const WSP$$ = "[\\x20\\x09]";
  //const OBS_QP$ = subexp("\\\\" + merge("[\\x00\\x0D\\x0A]", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext
  //const FWS$ = subexp(subexp(WSP$$ + "*" + "\\x0D\\x0A") + "?" + WSP$$ + "+");
  //const QUOTED_PAIR$ = subexp(subexp("\\\\" + subexp(VCHAR$$ + "|" + WSP$$)) + "|" + OBS_QP$);
  //const QUOTED_STRING$ = subexp('\\"' + subexp(FWS$ + "?" + QCONTENT$) + "*" + FWS$ + "?" + '\\"');

  var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
  var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
  var VCHAR$$ = merge(QTEXT$$, "[\\\"\\\\]");
  var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
  var UNRESERVED = new RegExp(UNRESERVED$$, "g");
  var PCT_ENCODED = new RegExp(PCT_ENCODED$, "g");
  var NOT_LOCAL_PART = new RegExp(merge("[^]", ATEXT$$, "[\\.]", '[\\"]', VCHAR$$), "g");
  var NOT_HFNAME = new RegExp(merge("[^]", UNRESERVED$$, SOME_DELIMS$$), "g");
  var NOT_HFVALUE = NOT_HFNAME;

  function decodeUnreserved(str) {
    var decStr = pctDecChars(str);
    return !decStr.match(UNRESERVED) ? str : decStr;
  }

  var handler$4 = {
    scheme: "mailto",
    parse: function parse$$1(components, options) {
      var mailtoComponents = components;
      var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(",") : [];
      mailtoComponents.path = undefined;

      if (mailtoComponents.query) {
        var unknownHeaders = false;
        var headers = {};
        var hfields = mailtoComponents.query.split("&");

        for (var x = 0, xl = hfields.length; x < xl; ++x) {
          var hfield = hfields[x].split("=");

          switch (hfield[0]) {
            case "to":
              var toAddrs = hfield[1].split(",");

              for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
                to.push(toAddrs[_x]);
              }

              break;

            case "subject":
              mailtoComponents.subject = unescapeComponent(hfield[1], options);
              break;

            case "body":
              mailtoComponents.body = unescapeComponent(hfield[1], options);
              break;

            default:
              unknownHeaders = true;
              headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);
              break;
          }
        }

        if (unknownHeaders) mailtoComponents.headers = headers;
      }

      mailtoComponents.query = undefined;

      for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {
        var addr = to[_x2].split("@");

        addr[0] = unescapeComponent(addr[0]);

        if (!options.unicodeSupport) {
          //convert Unicode IDN -> ASCII IDN
          try {
            addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());
          } catch (e) {
            mailtoComponents.error = mailtoComponents.error || "Email address's domain name can not be converted to ASCII via punycode: " + e;
          }
        } else {
          addr[1] = unescapeComponent(addr[1], options).toLowerCase();
        }

        to[_x2] = addr.join("@");
      }

      return mailtoComponents;
    },
    serialize: function serialize$$1(mailtoComponents, options) {
      var components = mailtoComponents;
      var to = toArray(mailtoComponents.to);

      if (to) {
        for (var x = 0, xl = to.length; x < xl; ++x) {
          var toAddr = String(to[x]);
          var atIdx = toAddr.lastIndexOf("@");
          var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);
          var domain = toAddr.slice(atIdx + 1); //convert IDN via punycode

          try {
            domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);
          } catch (e) {
            components.error = components.error || "Email address's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
          }

          to[x] = localPart + "@" + domain;
        }

        components.path = to.join(",");
      }

      var headers = mailtoComponents.headers = mailtoComponents.headers || {};
      if (mailtoComponents.subject) headers["subject"] = mailtoComponents.subject;
      if (mailtoComponents.body) headers["body"] = mailtoComponents.body;
      var fields = [];

      for (var name in headers) {
        if (headers[name] !== O[name]) {
          fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + "=" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));
        }
      }

      if (fields.length) {
        components.query = fields.join("&");
      }

      return components;
    }
  };
  var URN_PARSE = /^([^\:]+)\:(.*)/; //RFC 2141

  var handler$5 = {
    scheme: "urn",
    parse: function parse$$1(components, options) {
      var matches = components.path && components.path.match(URN_PARSE);
      var urnComponents = components;

      if (matches) {
        var scheme = options.scheme || urnComponents.scheme || "urn";
        var nid = matches[1].toLowerCase();
        var nss = matches[2];
        var urnScheme = scheme + ":" + (options.nid || nid);
        var schemeHandler = SCHEMES[urnScheme];
        urnComponents.nid = nid;
        urnComponents.nss = nss;
        urnComponents.path = undefined;

        if (schemeHandler) {
          urnComponents = schemeHandler.parse(urnComponents, options);
        }
      } else {
        urnComponents.error = urnComponents.error || "URN can not be parsed.";
      }

      return urnComponents;
    },
    serialize: function serialize$$1(urnComponents, options) {
      var scheme = options.scheme || urnComponents.scheme || "urn";
      var nid = urnComponents.nid;
      var urnScheme = scheme + ":" + (options.nid || nid);
      var schemeHandler = SCHEMES[urnScheme];

      if (schemeHandler) {
        urnComponents = schemeHandler.serialize(urnComponents, options);
      }

      var uriComponents = urnComponents;
      var nss = urnComponents.nss;
      uriComponents.path = (nid || options.nid) + ":" + nss;
      return uriComponents;
    }
  };
  var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/; //RFC 4122

  var handler$6 = {
    scheme: "urn:uuid",
    parse: function parse(urnComponents, options) {
      var uuidComponents = urnComponents;
      uuidComponents.uuid = uuidComponents.nss;
      uuidComponents.nss = undefined;

      if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {
        uuidComponents.error = uuidComponents.error || "UUID is not valid.";
      }

      return uuidComponents;
    },
    serialize: function serialize(uuidComponents, options) {
      var urnComponents = uuidComponents; //normalize UUID

      urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
      return urnComponents;
    }
  };
  SCHEMES[handler.scheme] = handler;
  SCHEMES[handler$1.scheme] = handler$1;
  SCHEMES[handler$2.scheme] = handler$2;
  SCHEMES[handler$3.scheme] = handler$3;
  SCHEMES[handler$4.scheme] = handler$4;
  SCHEMES[handler$5.scheme] = handler$5;
  SCHEMES[handler$6.scheme] = handler$6;
  exports.SCHEMES = SCHEMES;
  exports.pctEncChar = pctEncChar;
  exports.pctDecChars = pctDecChars;
  exports.parse = parse;
  exports.removeDotSegments = removeDotSegments;
  exports.serialize = serialize;
  exports.resolveComponents = resolveComponents;
  exports.resolve = resolve;
  exports.normalize = normalize;
  exports.equal = equal;
  exports.escapeComponent = escapeComponent;
  exports.unescapeComponent = unescapeComponent;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/style/main.less":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/suggest/bootstrap3.less":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "form.rjsf {\n  /*!\n * Generated using the Bootstrap Customizer (https://getbootstrap.com/docs/3.4/customize/)\n */\n  /*!\n * Bootstrap v3.4.1 (https://getbootstrap.com/)\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */\n  /*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */\n}\nform.rjsf html {\n  font-family: sans-serif;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n}\nform.rjsf body {\n  margin: 0;\n}\nform.rjsf article,\nform.rjsf aside,\nform.rjsf details,\nform.rjsf figcaption,\nform.rjsf figure,\nform.rjsf footer,\nform.rjsf header,\nform.rjsf hgroup,\nform.rjsf main,\nform.rjsf menu,\nform.rjsf nav,\nform.rjsf section,\nform.rjsf summary {\n  display: block;\n}\nform.rjsf audio,\nform.rjsf canvas,\nform.rjsf progress,\nform.rjsf video {\n  display: inline-block;\n  vertical-align: baseline;\n}\nform.rjsf audio:not([controls]) {\n  display: none;\n  height: 0;\n}\nform.rjsf [hidden],\nform.rjsf template {\n  display: none;\n}\nform.rjsf a {\n  background-color: transparent;\n}\nform.rjsf a:active,\nform.rjsf a:hover {\n  outline: 0;\n}\nform.rjsf abbr[title] {\n  border-bottom: none;\n  text-decoration: underline;\n  text-decoration: underline dotted;\n}\nform.rjsf b,\nform.rjsf strong {\n  font-weight: bold;\n}\nform.rjsf dfn {\n  font-style: italic;\n}\nform.rjsf h1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\nform.rjsf mark {\n  background: #ff0;\n  color: #000;\n}\nform.rjsf small {\n  font-size: 80%;\n}\nform.rjsf sub,\nform.rjsf sup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\nform.rjsf sup {\n  top: -0.5em;\n}\nform.rjsf sub {\n  bottom: -0.25em;\n}\nform.rjsf img {\n  border: 0;\n}\nform.rjsf svg:not(:root) {\n  overflow: hidden;\n}\nform.rjsf figure {\n  margin: 1em 40px;\n}\nform.rjsf hr {\n  -webkit-box-sizing: content-box;\n  -moz-box-sizing: content-box;\n  box-sizing: content-box;\n  height: 0;\n}\nform.rjsf pre {\n  overflow: auto;\n}\nform.rjsf code,\nform.rjsf kbd,\nform.rjsf pre,\nform.rjsf samp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\nform.rjsf button,\nform.rjsf input,\nform.rjsf optgroup,\nform.rjsf select,\nform.rjsf textarea {\n  color: inherit;\n  font: inherit;\n  margin: 0;\n}\nform.rjsf button {\n  overflow: visible;\n}\nform.rjsf button,\nform.rjsf select {\n  text-transform: none;\n}\nform.rjsf button,\nform.rjsf html input[type=\"button\"],\nform.rjsf input[type=\"reset\"],\nform.rjsf input[type=\"submit\"] {\n  -webkit-appearance: button;\n  cursor: pointer;\n}\nform.rjsf button[disabled],\nform.rjsf html input[disabled] {\n  cursor: default;\n}\nform.rjsf button::-moz-focus-inner,\nform.rjsf input::-moz-focus-inner {\n  border: 0;\n  padding: 0;\n}\nform.rjsf input {\n  line-height: normal;\n}\nform.rjsf input[type=\"checkbox\"],\nform.rjsf input[type=\"radio\"] {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  padding: 0;\n}\nform.rjsf input[type=\"number\"]::-webkit-inner-spin-button,\nform.rjsf input[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\nform.rjsf input[type=\"search\"] {\n  -webkit-appearance: textfield;\n  -webkit-box-sizing: content-box;\n  -moz-box-sizing: content-box;\n  box-sizing: content-box;\n}\nform.rjsf input[type=\"search\"]::-webkit-search-cancel-button,\nform.rjsf input[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\nform.rjsf fieldset {\n  border: 1px solid #c0c0c0;\n  margin: 0 2px;\n  padding: 0.35em 0.625em 0.75em;\n}\nform.rjsf legend {\n  border: 0;\n  padding: 0;\n}\nform.rjsf textarea {\n  overflow: auto;\n}\nform.rjsf optgroup {\n  font-weight: bold;\n}\nform.rjsf table {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\nform.rjsf td,\nform.rjsf th {\n  padding: 0;\n}\nform.rjsf * {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\nform.rjsf *:before,\nform.rjsf *:after {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\nform.rjsf html {\n  font-size: 10px;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\nform.rjsf body {\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 1.42857143;\n  color: #333333;\n  background-color: #ffffff;\n}\nform.rjsf input,\nform.rjsf button,\nform.rjsf select,\nform.rjsf textarea {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\nform.rjsf a {\n  color: #337ab7;\n  text-decoration: none;\n}\nform.rjsf a:hover,\nform.rjsf a:focus {\n  color: #23527c;\n  text-decoration: underline;\n}\nform.rjsf a:focus {\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\nform.rjsf figure {\n  margin: 0;\n}\nform.rjsf img {\n  vertical-align: middle;\n}\nform.rjsf .img-responsive {\n  display: block;\n  max-width: 100%;\n  height: auto;\n}\nform.rjsf .img-rounded {\n  border-radius: 6px;\n}\nform.rjsf .img-thumbnail {\n  padding: 4px;\n  line-height: 1.42857143;\n  background-color: #ffffff;\n  border: 1px solid #dddddd;\n  border-radius: 4px;\n  -webkit-transition: all 0.2s ease-in-out;\n  -o-transition: all 0.2s ease-in-out;\n  transition: all 0.2s ease-in-out;\n  display: inline-block;\n  max-width: 100%;\n  height: auto;\n}\nform.rjsf .img-circle {\n  border-radius: 50%;\n}\nform.rjsf hr {\n  margin-top: 20px;\n  margin-bottom: 20px;\n  border: 0;\n  border-top: 1px solid #eeeeee;\n}\nform.rjsf .sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n}\nform.rjsf .sr-only-focusable:active,\nform.rjsf .sr-only-focusable:focus {\n  position: static;\n  width: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  clip: auto;\n}\nform.rjsf [role=\"button\"] {\n  cursor: pointer;\n}\nform.rjsf fieldset {\n  min-width: 0;\n  padding: 0;\n  margin: 0;\n  border: 0;\n}\nform.rjsf legend {\n  display: block;\n  width: 100%;\n  padding: 0;\n  margin-bottom: 20px;\n  font-size: 21px;\n  line-height: inherit;\n  color: #333333;\n  border: 0;\n  border-bottom: 1px solid #e5e5e5;\n}\nform.rjsf label {\n  display: inline-block;\n  max-width: 100%;\n  margin-bottom: 5px;\n  font-weight: 700;\n}\nform.rjsf input[type=\"search\"] {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  -webkit-appearance: none;\n  appearance: none;\n}\nform.rjsf input[type=\"radio\"],\nform.rjsf input[type=\"checkbox\"] {\n  margin: 4px 0 0;\n  margin-top: 1px \\9;\n  line-height: normal;\n}\nform.rjsf input[type=\"radio\"][disabled],\nform.rjsf input[type=\"checkbox\"][disabled],\nform.rjsf input[type=\"radio\"].disabled,\nform.rjsf input[type=\"checkbox\"].disabled,\nform.rjsf fieldset[disabled] input[type=\"radio\"],\nform.rjsf fieldset[disabled] input[type=\"checkbox\"] {\n  cursor: not-allowed;\n}\nform.rjsf input[type=\"file\"] {\n  display: block;\n}\nform.rjsf input[type=\"range\"] {\n  display: block;\n  width: 100%;\n}\nform.rjsf select[multiple],\nform.rjsf select[size] {\n  height: auto;\n}\nform.rjsf input[type=\"file\"]:focus,\nform.rjsf input[type=\"radio\"]:focus,\nform.rjsf input[type=\"checkbox\"]:focus {\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\nform.rjsf output {\n  display: block;\n  padding-top: 7px;\n  font-size: 14px;\n  line-height: 1.42857143;\n  color: #555555;\n}\nform.rjsf .form-control {\n  display: block;\n  width: 100%;\n  height: 34px;\n  padding: 6px 12px;\n  font-size: 14px;\n  line-height: 1.42857143;\n  color: #555555;\n  background-color: #ffffff;\n  background-image: none;\n  border: 1px solid #cccccc;\n  border-radius: 4px;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  -webkit-transition: border-color ease-in-out 0.15s, -webkit-box-shadow ease-in-out 0.15s;\n  -o-transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s;\n  transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s;\n}\nform.rjsf .form-control:focus {\n  border-color: #66afe9;\n  outline: 0;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(102, 175, 233, 0.6);\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(102, 175, 233, 0.6);\n}\nform.rjsf .form-control::-moz-placeholder {\n  color: #999999;\n  opacity: 1;\n}\nform.rjsf .form-control:-ms-input-placeholder {\n  color: #999999;\n}\nform.rjsf .form-control::-webkit-input-placeholder {\n  color: #999999;\n}\nform.rjsf .form-control::-ms-expand {\n  background-color: transparent;\n  border: 0;\n}\nform.rjsf .form-control[disabled],\nform.rjsf .form-control[readonly],\nform.rjsf fieldset[disabled] .form-control {\n  background-color: #eeeeee;\n  opacity: 1;\n}\nform.rjsf .form-control[disabled],\nform.rjsf fieldset[disabled] .form-control {\n  cursor: not-allowed;\n}\nform.rjsf textarea.form-control {\n  height: auto;\n}\n@media screen and (-webkit-min-device-pixel-ratio: 0) {\n  form.rjsf input[type=\"date\"].form-control,\n  form.rjsf input[type=\"time\"].form-control,\n  form.rjsf input[type=\"datetime-local\"].form-control,\n  form.rjsf input[type=\"month\"].form-control {\n    line-height: 34px;\n  }\n  form.rjsf input[type=\"date\"].input-sm,\n  form.rjsf input[type=\"time\"].input-sm,\n  form.rjsf input[type=\"datetime-local\"].input-sm,\n  form.rjsf input[type=\"month\"].input-sm,\n  form.rjsf .input-group-sm input[type=\"date\"],\n  form.rjsf .input-group-sm input[type=\"time\"],\n  form.rjsf .input-group-sm input[type=\"datetime-local\"],\n  form.rjsf .input-group-sm input[type=\"month\"] {\n    line-height: 30px;\n  }\n  form.rjsf input[type=\"date\"].input-lg,\n  form.rjsf input[type=\"time\"].input-lg,\n  form.rjsf input[type=\"datetime-local\"].input-lg,\n  form.rjsf input[type=\"month\"].input-lg,\n  form.rjsf .input-group-lg input[type=\"date\"],\n  form.rjsf .input-group-lg input[type=\"time\"],\n  form.rjsf .input-group-lg input[type=\"datetime-local\"],\n  form.rjsf .input-group-lg input[type=\"month\"] {\n    line-height: 46px;\n  }\n}\nform.rjsf .form-group {\n  margin-bottom: 15px;\n}\nform.rjsf .radio,\nform.rjsf .checkbox {\n  position: relative;\n  display: block;\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\nform.rjsf .radio.disabled label,\nform.rjsf .checkbox.disabled label,\nform.rjsf fieldset[disabled] .radio label,\nform.rjsf fieldset[disabled] .checkbox label {\n  cursor: not-allowed;\n}\nform.rjsf .radio label,\nform.rjsf .checkbox label {\n  min-height: 20px;\n  padding-left: 20px;\n  margin-bottom: 0;\n  font-weight: 400;\n  cursor: pointer;\n}\nform.rjsf .radio input[type=\"radio\"],\nform.rjsf .radio-inline input[type=\"radio\"],\nform.rjsf .checkbox input[type=\"checkbox\"],\nform.rjsf .checkbox-inline input[type=\"checkbox\"] {\n  position: absolute;\n  margin-top: 4px \\9;\n  margin-left: -20px;\n}\nform.rjsf .radio + .radio,\nform.rjsf .checkbox + .checkbox {\n  margin-top: -5px;\n}\nform.rjsf .radio-inline,\nform.rjsf .checkbox-inline {\n  position: relative;\n  display: inline-block;\n  padding-left: 20px;\n  margin-bottom: 0;\n  font-weight: 400;\n  vertical-align: middle;\n  cursor: pointer;\n}\nform.rjsf .radio-inline.disabled,\nform.rjsf .checkbox-inline.disabled,\nform.rjsf fieldset[disabled] .radio-inline,\nform.rjsf fieldset[disabled] .checkbox-inline {\n  cursor: not-allowed;\n}\nform.rjsf .radio-inline + .radio-inline,\nform.rjsf .checkbox-inline + .checkbox-inline {\n  margin-top: 0;\n  margin-left: 10px;\n}\nform.rjsf .form-control-static {\n  min-height: 34px;\n  padding-top: 7px;\n  padding-bottom: 7px;\n  margin-bottom: 0;\n}\nform.rjsf .form-control-static.input-lg,\nform.rjsf .form-control-static.input-sm {\n  padding-right: 0;\n  padding-left: 0;\n}\nform.rjsf .input-sm {\n  height: 30px;\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\nform.rjsf select.input-sm {\n  height: 30px;\n  line-height: 30px;\n}\nform.rjsf textarea.input-sm,\nform.rjsf select[multiple].input-sm {\n  height: auto;\n}\nform.rjsf .form-group-sm .form-control {\n  height: 30px;\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\nform.rjsf .form-group-sm select.form-control {\n  height: 30px;\n  line-height: 30px;\n}\nform.rjsf .form-group-sm textarea.form-control,\nform.rjsf .form-group-sm select[multiple].form-control {\n  height: auto;\n}\nform.rjsf .form-group-sm .form-control-static {\n  height: 30px;\n  min-height: 32px;\n  padding: 6px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n}\nform.rjsf .input-lg {\n  height: 46px;\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\nform.rjsf select.input-lg {\n  height: 46px;\n  line-height: 46px;\n}\nform.rjsf textarea.input-lg,\nform.rjsf select[multiple].input-lg {\n  height: auto;\n}\nform.rjsf .form-group-lg .form-control {\n  height: 46px;\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\nform.rjsf .form-group-lg select.form-control {\n  height: 46px;\n  line-height: 46px;\n}\nform.rjsf .form-group-lg textarea.form-control,\nform.rjsf .form-group-lg select[multiple].form-control {\n  height: auto;\n}\nform.rjsf .form-group-lg .form-control-static {\n  height: 46px;\n  min-height: 38px;\n  padding: 11px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n}\nform.rjsf .has-feedback {\n  position: relative;\n}\nform.rjsf .has-feedback .form-control {\n  padding-right: 42.5px;\n}\nform.rjsf .form-control-feedback {\n  position: absolute;\n  top: 0;\n  right: 0;\n  z-index: 2;\n  display: block;\n  width: 34px;\n  height: 34px;\n  line-height: 34px;\n  text-align: center;\n  pointer-events: none;\n}\nform.rjsf .input-lg + .form-control-feedback,\nform.rjsf .input-group-lg + .form-control-feedback,\nform.rjsf .form-group-lg .form-control + .form-control-feedback {\n  width: 46px;\n  height: 46px;\n  line-height: 46px;\n}\nform.rjsf .input-sm + .form-control-feedback,\nform.rjsf .input-group-sm + .form-control-feedback,\nform.rjsf .form-group-sm .form-control + .form-control-feedback {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n}\nform.rjsf .has-success .help-block,\nform.rjsf .has-success .control-label,\nform.rjsf .has-success .radio,\nform.rjsf .has-success .checkbox,\nform.rjsf .has-success .radio-inline,\nform.rjsf .has-success .checkbox-inline,\nform.rjsf .has-success.radio label,\nform.rjsf .has-success.checkbox label,\nform.rjsf .has-success.radio-inline label,\nform.rjsf .has-success.checkbox-inline label {\n  color: #3c763d;\n}\nform.rjsf .has-success .form-control {\n  border-color: #3c763d;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n}\nform.rjsf .has-success .form-control:focus {\n  border-color: #2b542c;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #67b168;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #67b168;\n}\nform.rjsf .has-success .input-group-addon {\n  color: #3c763d;\n  background-color: #dff0d8;\n  border-color: #3c763d;\n}\nform.rjsf .has-success .form-control-feedback {\n  color: #3c763d;\n}\nform.rjsf .has-warning .help-block,\nform.rjsf .has-warning .control-label,\nform.rjsf .has-warning .radio,\nform.rjsf .has-warning .checkbox,\nform.rjsf .has-warning .radio-inline,\nform.rjsf .has-warning .checkbox-inline,\nform.rjsf .has-warning.radio label,\nform.rjsf .has-warning.checkbox label,\nform.rjsf .has-warning.radio-inline label,\nform.rjsf .has-warning.checkbox-inline label {\n  color: #8a6d3b;\n}\nform.rjsf .has-warning .form-control {\n  border-color: #8a6d3b;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n}\nform.rjsf .has-warning .form-control:focus {\n  border-color: #66512c;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #c0a16b;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #c0a16b;\n}\nform.rjsf .has-warning .input-group-addon {\n  color: #8a6d3b;\n  background-color: #fcf8e3;\n  border-color: #8a6d3b;\n}\nform.rjsf .has-warning .form-control-feedback {\n  color: #8a6d3b;\n}\nform.rjsf .has-error .help-block,\nform.rjsf .has-error .control-label,\nform.rjsf .has-error .radio,\nform.rjsf .has-error .checkbox,\nform.rjsf .has-error .radio-inline,\nform.rjsf .has-error .checkbox-inline,\nform.rjsf .has-error.radio label,\nform.rjsf .has-error.checkbox label,\nform.rjsf .has-error.radio-inline label,\nform.rjsf .has-error.checkbox-inline label {\n  color: #a94442;\n}\nform.rjsf .has-error .form-control {\n  border-color: #a94442;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n}\nform.rjsf .has-error .form-control:focus {\n  border-color: #843534;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #ce8483;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #ce8483;\n}\nform.rjsf .has-error .input-group-addon {\n  color: #a94442;\n  background-color: #f2dede;\n  border-color: #a94442;\n}\nform.rjsf .has-error .form-control-feedback {\n  color: #a94442;\n}\nform.rjsf .has-feedback label ~ .form-control-feedback {\n  top: 25px;\n}\nform.rjsf .has-feedback label.sr-only ~ .form-control-feedback {\n  top: 0;\n}\nform.rjsf .help-block {\n  display: block;\n  margin-top: 5px;\n  margin-bottom: 10px;\n  color: #737373;\n}\n@media (min-width: 768px) {\n  form.rjsf .form-inline .form-group {\n    display: inline-block;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  form.rjsf .form-inline .form-control {\n    display: inline-block;\n    width: auto;\n    vertical-align: middle;\n  }\n  form.rjsf .form-inline .form-control-static {\n    display: inline-block;\n  }\n  form.rjsf .form-inline .input-group {\n    display: inline-table;\n    vertical-align: middle;\n  }\n  form.rjsf .form-inline .input-group .input-group-addon,\n  form.rjsf .form-inline .input-group .input-group-btn,\n  form.rjsf .form-inline .input-group .form-control {\n    width: auto;\n  }\n  form.rjsf .form-inline .input-group > .form-control {\n    width: 100%;\n  }\n  form.rjsf .form-inline .control-label {\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  form.rjsf .form-inline .radio,\n  form.rjsf .form-inline .checkbox {\n    display: inline-block;\n    margin-top: 0;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  form.rjsf .form-inline .radio label,\n  form.rjsf .form-inline .checkbox label {\n    padding-left: 0;\n  }\n  form.rjsf .form-inline .radio input[type=\"radio\"],\n  form.rjsf .form-inline .checkbox input[type=\"checkbox\"] {\n    position: relative;\n    margin-left: 0;\n  }\n  form.rjsf .form-inline .has-feedback .form-control-feedback {\n    top: 0;\n  }\n}\nform.rjsf .form-horizontal .radio,\nform.rjsf .form-horizontal .checkbox,\nform.rjsf .form-horizontal .radio-inline,\nform.rjsf .form-horizontal .checkbox-inline {\n  padding-top: 7px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\nform.rjsf .form-horizontal .radio,\nform.rjsf .form-horizontal .checkbox {\n  min-height: 27px;\n}\nform.rjsf .form-horizontal .form-group {\n  margin-right: -15px;\n  margin-left: -15px;\n}\n@media (min-width: 768px) {\n  form.rjsf .form-horizontal .control-label {\n    padding-top: 7px;\n    margin-bottom: 0;\n    text-align: right;\n  }\n}\nform.rjsf .form-horizontal .has-feedback .form-control-feedback {\n  right: 15px;\n}\n@media (min-width: 768px) {\n  form.rjsf .form-horizontal .form-group-lg .control-label {\n    padding-top: 11px;\n    font-size: 18px;\n  }\n}\n@media (min-width: 768px) {\n  form.rjsf .form-horizontal .form-group-sm .control-label {\n    padding-top: 6px;\n    font-size: 12px;\n  }\n}\nform.rjsf .clearfix:before,\nform.rjsf .clearfix:after,\nform.rjsf .form-horizontal .form-group:before,\nform.rjsf .form-horizontal .form-group:after {\n  display: table;\n  content: \" \";\n}\nform.rjsf .clearfix:after,\nform.rjsf .form-horizontal .form-group:after {\n  clear: both;\n}\nform.rjsf .center-block {\n  display: block;\n  margin-right: auto;\n  margin-left: auto;\n}\nform.rjsf .pull-right {\n  float: right !important;\n}\nform.rjsf .pull-left {\n  float: left !important;\n}\nform.rjsf .hide {\n  display: none !important;\n}\nform.rjsf .show {\n  display: block !important;\n}\nform.rjsf .invisible {\n  visibility: hidden;\n}\nform.rjsf .text-hide {\n  font: 0/0 a;\n  color: transparent;\n  text-shadow: none;\n  background-color: transparent;\n  border: 0;\n}\nform.rjsf .hidden {\n  display: none !important;\n}\nform.rjsf .affix {\n  position: fixed;\n}\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/suggest/metadataEditor.less":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".metadata-editor-container {\n  padding: 20px;\n}\nform.rjsf {\n  width: 100%;\n  /*\n    .ui.checkbox label:after {\n        font-family: \"AzureDevOpsMDL2Assets\" !important;\n        content: \"\\E73E\" !important;\n    }\n    div.vertical.buttons button {\n        height: 40px !important;\n        i.icon {\n            font-size: 1.5em !important;\n            overflow: visible;\n        }\n    }\n    */\n}\nform.rjsf i.glyphicon {\n  font-family: \"AzureDevOpsMDL2Assets\";\n  font-style: normal;\n  line-height: 1.5;\n}\nform.rjsf i.glyphicon.glyphicon-arrow-up:before {\n  content: \"\\E74A\";\n}\nform.rjsf i.glyphicon.glyphicon-arrow-down:before {\n  content: \"\\E74B\";\n}\nform.rjsf i.glyphicon.glyphicon-remove:before {\n  content: \"\\E74D\";\n}\nform.rjsf i.glyphicon.glyphicon-plus:before {\n  content: \"\\E710\";\n}\nform.rjsf .field-array fieldset.field-array {\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  padding: 0 20px;\n  margin: 0;\n}\nform.rjsf .field-array legend {\n  border: 0;\n  width: auto;\n  padding: 10px;\n}\nform.rjsf .field-array .array-item {\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  background: #f0f0f0;\n  margin-bottom: 20px;\n  padding: 20px;\n}\nform.rjsf .field-array .btn-group {\n  justify-content: end !important;\n  padding: 0;\n  background: none;\n}\nform.rjsf .field-array .btn-group button {\n  flex: 0 !important;\n  margin-left: 10px;\n}\nform.rjsf .btn-group {\n  position: sticky;\n  bottom: 0;\n  background: var(--callout-background-color, #ffffff);\n  padding: 20px 0;\n}\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/validator/validator.less":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".validator-btn-wrapper {\n  display: flex;\n  align-items: center;\n  margin-bottom: 5px;\n}\n.validator-btn-wrapper .bolt-pill-content {\n  line-height: 1.8;\n}\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Breakpoint/Breakpoint.css":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".bolt-breakpoint {\n  pointer-events: none; }\n\n.bolt-breakpoint-container {\n  height: 2px; }\n\n.bolt-breakpoint-observation {\n  bottom: 0;\n  left: 0;\n  top: 0; }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Button/Button.css":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".bolt-button {\n  align-items: center;\n  border-radius: 2px;\n  border: 1px solid transparent;\n  cursor: pointer;\n  display: inline-flex;\n  flex-direction: row;\n  flex-shrink: 0;\n  font-family: inherit;\n  font-size: inherit;\n  font-weight: 600;\n  justify-content: center;\n  line-height: inherit;\n  outline: none;\n  overflow: visible;\n  /* IE11 needs overflow visible for the focus treatment to show up */\n  padding: 6px 12px;\n  position: relative;\n  transition: background 80ms linear; }\n  @media (forced-colors: active) {\n    .bolt-button {\n      border: 1px solid windowtext; } }\n\n/* This is here to work around Legacy styles setting the heights of all buttons to 30px */\nbutton.bolt-button {\n  height: auto; }\n\n/* Needed to remove the focus-rectangle from FireFox. */\n.bolt-button::-moz-focus-inner {\n  border: 0; }\n\n/* Danger modifiers */\n.bolt-button.danger {\n  background-color: rgba(232, 17, 35, 1);\n  background-color: var(--palette-error,rgba(232, 17, 35, 1));\n  color: rgba(255, 255, 255, 1);\n  color: var(--text-on-communication-background,rgba(255, 255, 255, 1)); }\n\n.bolt-button.danger:hover {\n  background-color: rgba(203, 15, 31, 1);\n  background-color: var(--palette-error-6,rgba(203, 15, 31, 1)); }\n\n.bolt-button.danger:active,\n.bolt-button.danger.active {\n  background-color: rgba(184, 14, 28, 1);\n  background-color: var(--palette-error-10,rgba(184, 14, 28, 1)); }\n\n/* Primary modifiers */\n.bolt-button.primary {\n  background-color: rgba(0, 120, 212, 1);\n  background-color: var(--communication-background,rgba(0, 120, 212, 1));\n  color: rgba(255, 255, 255, 1);\n  color: var(--text-on-communication-background,rgba(255, 255, 255, 1)); }\n\n.bolt-button.primary:hover {\n  background-color: rgba( 0, 103, 181 ,  1 );\n  background-color: rgba( var(--palette-primary-darkened-6,0, 103, 181) ,  1 ); }\n\n.bolt-button.primary:active,\n.bolt-button.primary.active {\n  background-color: rgba( 0, 91, 161 ,  1 );\n  background-color: rgba( var(--palette-primary-darkened-10,0, 91, 161) ,  1 ); }\n\n@media (forced-colors: active) {\n  .bolt-button:not(.disabled):hover {\n    color: HighLight; } }\n\n/* Disabled modifiers */\n.bolt-button.disabled,\n.bolt-button.disabled:hover,\n.bolt-button.disabled:focus {\n  background-color: rgba(0, 0, 0, 0.06);\n  background-color: var(--palette-black-alpha-6,rgba(0, 0, 0, 0.06));\n  color: rgba(0, 0, 0, .38);\n  color: var(--text-disabled-color,rgba(0, 0, 0, .38));\n  cursor: default; }\n  @media (forced-colors: active) {\n    .bolt-button.disabled,\n    .bolt-button.disabled:hover,\n    .bolt-button.disabled:focus {\n      color: GrayText;\n      forced-color-adjust: none; } }\n\n/* Subtle modifiers (before standard for overrides) */\n.bolt-button.subtle,\n.bolt-button.subtle.disabled:hover,\n.bolt-button.subtle.disabled:focus {\n  background-color: transparent; }\n\n.bolt-button.subtle:hover {\n  background-color: rgba(0, 0, 0, 0.06);\n  background-color: var(--palette-black-alpha-6,rgba(0, 0, 0, 0.06)); }\n\n.bolt-button.subtle:active {\n  background-color: rgba(0, 0, 0, 0.20);\n  background-color: var(--palette-black-alpha-20,rgba(0, 0, 0, 0.20)); }\n\n/* Basic button colors */\n.bolt-button {\n  background-color: rgba(0, 0, 0, 0.06);\n  background-color: var(--palette-black-alpha-6,rgba(0, 0, 0, 0.06));\n  color: rgba(0, 0, 0, .9);\n  color: var(--text-primary-color,rgba(0, 0, 0, .9));\n  margin: 0; }\n\n.bolt-button:focus {\n  z-index: 1; }\n\n.bolt-button:hover {\n  background-color: rgba(0, 0, 0, 0.10);\n  background-color: var(--palette-black-alpha-10,rgba(0, 0, 0, 0.10)); }\n\n.bolt-button:active,\n.bolt-button.active {\n  background-color: rgba(0, 0, 0, 0.20);\n  background-color: var(--palette-black-alpha-20,rgba(0, 0, 0, 0.20)); }\n\n.bolt-link-button {\n  text-decoration: none; }\n\n.bolt-button.icon-only {\n  padding: 8px 22px;\n  font-weight: normal; }\n\n.bolt-button.icon-only.subtle {\n  padding: 8px; }\n\n.bolt-button:not(.icon-only) > .left-icon {\n  font-weight: normal;\n  padding-right: 10px; }\n\n.bolt-button.bolt-link-button {\n  color: rgba(0, 0, 0, .9);\n  color: var(--text-primary-color,rgba(0, 0, 0, .9)); }\n  .bolt-button.bolt-link-button:hover {\n    color: rgba(0, 0, 0, .9);\n    color: var(--text-primary-color,rgba(0, 0, 0, .9));\n    text-decoration: none; }\n  .bolt-button.bolt-link-button:visited {\n    color: rgba(0, 0, 0, .9);\n    color: var(--text-primary-color,rgba(0, 0, 0, .9)); }\n  .bolt-button.bolt-link-button:active, .bolt-button.bolt-link-button.active {\n    color: rgba(0, 0, 0, .9);\n    color: var(--text-primary-color,rgba(0, 0, 0, .9)); }\n  .bolt-button.bolt-link-button.disabled {\n    color: rgba(0, 0, 0, .38);\n    color: var(--text-disabled-color,rgba(0, 0, 0, .38)); }\n    @media (forced-colors: active) {\n      .bolt-button.bolt-link-button.disabled {\n        color: GrayText;\n        forced-color-adjust: none; } }\n\n.bolt-button.bolt-link-button.primary {\n  color: rgba(255, 255, 255, 1);\n  color: var(--text-on-communication-background,rgba(255, 255, 255, 1)); }\n  .bolt-button.bolt-link-button.primary:hover {\n    color: rgba(255, 255, 255, 1);\n    color: var(--text-on-communication-background,rgba(255, 255, 255, 1)); }\n  .bolt-button.bolt-link-button.primary:visited {\n    color: rgba(255, 255, 255, 1);\n    color: var(--text-on-communication-background,rgba(255, 255, 255, 1)); }\n  .bolt-button.bolt-link-button.primary:active, .bolt-button.bolt-link-button.primary.active {\n    color: rgba(255, 255, 255, 1);\n    color: var(--text-on-communication-background,rgba(255, 255, 255, 1)); }\n\n.bolt-focus-visible .bolt-button.bolt-focus-treatment:focus {\n  animation: ms-focus-shadow-pulse 4s ease-in-out infinite;\n  box-shadow: 0 0 0 3px rgba(0, 120, 212, 0.23);\n  box-shadow: 0 0 0 3px var(--focus-pulse-max-color,rgba(0, 120, 212, 0.23));\n  border-color: rgba(0, 120, 212, 1);\n  border-color: var(--focus-border-color,rgba(0, 120, 212, 1)); }\n  @media (forced-colors: active) {\n    .bolt-focus-visible .bolt-button.bolt-focus-treatment:focus {\n      animation: none; } }\n  @media (forced-colors: active) {\n    .bolt-focus-visible .bolt-button.bolt-focus-treatment:focus {\n      forced-color-adjust: none;\n      border-color: highlight; } }\n  @media screen and (-ms-high-contrast: black-on-white) {\n    .bolt-focus-visible .bolt-button.bolt-focus-treatment:focus {\n      outline: 1px solid highlight;\n      outline-offset: 1px; } }\n  @media (forced-colors: active) {\n    .bolt-focus-visible .bolt-button.bolt-focus-treatment:focus {\n      background: window;\n      color: windowtext; } }\n  .bolt-focus-visible .bolt-button.bolt-focus-treatment:focus.primary {\n    animation: ms-focus-shadow-with-border-pulse 4s ease-in-out infinite;\n    box-shadow: 0 0 0 3px rgba(0, 120, 212, 0.23), 0 0 0 1px rgba(0, 120, 212, 1);\n    box-shadow: 0 0 0 3px var(--focus-pulse-max-color,rgba(0, 120, 212, 0.23)), 0 0 0 1px var(--focus-border-color,rgba(0, 120, 212, 1));\n    border-color: rgba(255, 255, 255, 1);\n    border-color: var(--text-on-communication-background,rgba(255, 255, 255, 1)); }\n    @media (forced-colors: active) {\n      .bolt-focus-visible .bolt-button.bolt-focus-treatment:focus.primary {\n        animation: none; } }\n    @media (forced-colors: active) {\n      .bolt-focus-visible .bolt-button.bolt-focus-treatment:focus.primary {\n        border-color: highlight;\n        box-shadow: none; } }\n  .bolt-focus-visible .bolt-button.bolt-focus-treatment:focus:after {\n    content: none !important; }\n\n.ms-Dialog-action .bolt-button {\n  font-size: 0.875rem; }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Button/ExpandableButton.css":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".bolt-expandable-button .icon-right {\n  padding-left: 10px; }\n\n.bolt-expandable-button .subtle.active {\n  background-color: rgba(0, 0, 0, 0.20);\n  background-color: var(--palette-black-alpha-20,rgba(0, 0, 0, 0.20)); }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Callout/Callout.css":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".bolt-callout {\n  background-color: transparent;\n  pointer-events: auto; }\n\n/* NOTE: Create a element that overlaps the container by 5000px on all sides.\r\n * This allows callouts to layout naturally and not be influenced by edges of\r\n * the window.\r\n */\n.bolt-portal.bolt-layout-relative {\n  bottom: -5000px;\n  left: -5000px;\n  right: -5000px;\n  top: -5000px; }\n\n.bolt-light-dismiss {\n  pointer-events: auto; }\n\n.bolt-callout-modal {\n  background-color: rgba(0, 0, 0, 0.20);\n  background-color: var(--palette-black-alpha-20,rgba(0, 0, 0, 0.20)); }\n  @media (forced-colors: active) {\n    .bolt-callout-modal {\n      background: transparent; } }\n\n.bolt-callout-content {\n  background-color: rgba(255, 255, 255, 1);\n  background-color: var(--callout-background-color,rgba(255, 255, 255, 1));\n  z-index: 1; }\n\n.bolt-callout-shadow {\n  box-shadow: 0px 6px 12px rgba(0, 0, 0, .132);\n  box-shadow: 0px 6px 12px var(--callout-shadow-color,rgba(0, 0, 0, .132)); }\n\n.bolt-callout-extra-large {\n  width: 800px; }\n\n.bolt-callout-large {\n  width: 640px; }\n\n.bolt-callout-medium {\n  width: 480px; }\n\n.bolt-callout-small {\n  width: 320px; }\n\n.bolt-callout-auto {\n  width: auto; }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Checkbox/Checkbox.css":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".bolt-checkbox {\n  border-radius: 4px;\n  color: rgba(0, 0, 0, .9);\n  color: var(--text-primary-color,rgba(0, 0, 0, .9));\n  display: inline-flex;\n  align-items: center; }\n  .bolt-checkbox:focus {\n    outline: none; }\n    @media (forced-colors: active) {\n      .bolt-checkbox:focus {\n        border: 1px solid;\n        border-color: windowtext; } }\n  .bolt-checkbox.disabled {\n    color: rgba(0, 0, 0, .38);\n    color: var(--text-disabled-color,rgba(0, 0, 0, .38));\n    cursor: default; }\n    @media (forced-colors: active) {\n      .bolt-checkbox.disabled {\n        forced-color-adjust: none;\n        color: graytext; } }\n    @media (forced-colors: active) {\n      .bolt-checkbox.disabled .bolt-checkmark {\n        border-color: graytext;\n        color: graytext; } }\n    .bolt-checkbox.disabled.checked .bolt-checkmark {\n      background-color: rgba( 200, 200, 200 ,  1 );\n      background-color: rgba( var(--palette-neutral-20,200, 200, 200) ,  1 ); }\n      @media (forced-colors: active) {\n        .bolt-checkbox.disabled.checked .bolt-checkmark {\n          background-color: transparent;\n          border-color: graytext; } }\n    .bolt-checkbox.disabled:not(.checked) .bolt-checkmark {\n      border:  1px solid;\n      border-color: rgba( 200, 200, 200 ,  1 );\n      border-color: rgba( var(--palette-neutral-20,200, 200, 200) ,  1 ); }\n      @media (forced-colors: active) {\n        .bolt-checkbox.disabled:not(.checked) .bolt-checkmark {\n          border-color: graytext; } }\n  .bolt-checkbox.labelled {\n    padding: 2px 4px 2px 5px; }\n  .bolt-checkbox:not(.labelled) {\n    margin: 2px; }\n  .bolt-checkbox.checked .bolt-checkmark {\n    border: 1px solid transparent;\n    background-color: rgba(0, 120, 212, 1);\n    background-color: var(--communication-background,rgba(0, 120, 212, 1));\n    color: rgba(255, 255, 255, 1);\n    color: var(--text-on-communication-background,rgba(255, 255, 255, 1)); }\n    @media (forced-colors: active) {\n      .bolt-checkbox.checked .bolt-checkmark {\n        background-color: transparent; } }\n  .bolt-checkbox:not(.checked):not(.disabled) .bolt-checkmark {\n    border: 1px solid rgba(0, 0, 0, .55);\n    border: 1px solid var(--text-secondary-color,rgba(0, 0, 0, .55)); }\n    @media (forced-colors: active) {\n      .bolt-checkbox:not(.checked):not(.disabled) .bolt-checkmark {\n        color: windowtext;\n        border-color: windowtext; } }\n    .bolt-checkbox:not(.checked):not(.disabled) .bolt-checkmark > .fabric-icon {\n      visibility: hidden; }\n\n.bolt-checkmark {\n  border-radius: 0.25rem;\n  color: transparent;\n  padding: 1px;\n  height: 1rem;\n  width: 1rem; }\n\n.bolt-checkbox-label {\n  padding-left: 10px;\n  padding-bottom: 1px; }\n\n.bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus {\n  animation: ms-focus-shadow-with-border-pulse 4s ease-in-out infinite;\n  box-shadow: 0 0 0 3px rgba(0, 120, 212, 0.23), 0 0 0 1px rgba(0, 120, 212, 1);\n  box-shadow: 0 0 0 3px var(--focus-pulse-max-color,rgba(0, 120, 212, 0.23)), 0 0 0 1px var(--focus-border-color,rgba(0, 120, 212, 1)); }\n  @media (forced-colors: active) {\n    .bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus {\n      animation: none; } }\n  .bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus:not(.checked):not(.labelled) .bolt-checkmark {\n    border: 1px solid rgba(0, 120, 212, 1);\n    border: 1px solid var(--communication-background,rgba(0, 120, 212, 1)); }\n    @media (forced-colors: active) {\n      .bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus:not(.checked):not(.labelled) .bolt-checkmark {\n        forced-color-adjust: none;\n        border-color: highlight; } }\n    @media screen and (-ms-high-contrast: black-on-white) {\n      .bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus:not(.checked):not(.labelled) .bolt-checkmark {\n        outline: 1px solid highlight;\n        outline-offset: 1px; } }\n    @media (forced-colors: active) {\n      .bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus:not(.checked):not(.labelled) .bolt-checkmark {\n        color: windowtext; } }\n  .bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus.checked:not(.labelled) .bolt-checkmark {\n    border: 1px solid rgba(255, 255, 255, 1);\n    border: 1px solid var(--background-color,rgba(255, 255, 255, 1)); }\n    @media (forced-colors: active) {\n      .bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus.checked:not(.labelled) .bolt-checkmark {\n        forced-color-adjust: none;\n        border-color: highlight; } }\n    @media screen and (-ms-high-contrast: black-on-white) {\n      .bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus.checked:not(.labelled) .bolt-checkmark {\n        outline: 1px solid highlight;\n        outline-offset: 1px; } }\n    @media (forced-colors: active) {\n      .bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus.checked:not(.labelled) .bolt-checkmark {\n        color: windowtext; } }\n  @media (forced-colors: active) {\n    .bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus .bolt-checkmark {\n      forced-color-adjust: none;\n      border-color: highlight; } }\n  @media screen and (-ms-high-contrast: black-on-white) {\n    .bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus .bolt-checkmark {\n      outline: 1px solid highlight;\n      outline-offset: 1px; } }\n  @media (forced-colors: active) {\n    .bolt-focus-visible .bolt-checkbox.bolt-focus-treatment:focus .bolt-checkmark {\n      color: windowtext; } }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/HeaderCommandBar/HeaderCommandBar.css":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".bolt-header-commandbar {\n  margin-left: 16px;\n  padding-right: 4px; }\n  .bolt-header-commandbar .responsive-placeholder {\n    margin: 0; }\n\n.bolt-header-command-item-button .bolt-button.icon-only {\n  padding: 8px; }\n\n.bolt-header-commandbar-no-right-padding {\n  padding-right: 0px; }\n\n.bolt-header-command-item-separator {\n  background-color: rgba(0, 0, 0, 0.20);\n  background-color: var(--palette-black-alpha-20,rgba(0, 0, 0, 0.20));\n  width: 1px;\n  margin: 4px 8px; }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Header/Header.css":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".bolt-header-no-spacing-defined {\n  padding-left: 20px;\n  padding-top: 16px;\n  padding-right: 20px; }\n\n.bolt-header-condensed {\n  padding-top: 8px;\n  padding-bottom: 8px; }\n\n.bolt-header-default {\n  padding-top: 16px;\n  padding-bottom: 16px; }\n\n.bolt-header-relaxed {\n  padding-top: 24px;\n  padding-bottom: 24px; }\n\n.bolt-header-with-commandbar.bolt-header-condensed {\n  padding-right: 12px; }\n\n.bolt-header-with-commandbar.bolt-header-default {\n  padding-right: 16px; }\n\n.bolt-header-with-commandbar.bolt-header-relaxed {\n  padding-right: 28px; }\n\n.bolt-header-with-commandbar {\n  padding-right: 16px; }\n  @media screen and (max-width: 600px) {\n    .bolt-header-with-commandbar {\n      padding-right: 20px; } }\n\n.bolt-header-with-back-button {\n  padding-left: 16px; }\n  @media screen and (max-width: 600px) {\n    .bolt-header-with-back-button {\n      flex-direction: column;\n      padding-left: 20px; } }\n\n.bolt-header-title-area {\n  flex-shrink: 25; }\n\n.bolt-header-content-area {\n  min-width: 0px; }\n\n.bolt-header-title {\n  padding-top: 4px;\n  padding-bottom: 4px;\n  margin-right: 8px; }\n  .bolt-header-title.l {\n    padding-top: 0px;\n    padding-bottom: 0px; }\n  .bolt-header-title.s {\n    padding-top: 6px;\n    padding-bottom: 6px; }\n  @media screen and (max-width: 600px) {\n    .bolt-header-title {\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis; } }\n\n.bolt-header-icon {\n  font-size: 1rem;\n  margin-right: 8px;\n  margin-top: 8px; }\n  .bolt-header-icon.l {\n    margin-top: 10px; }\n  .bolt-header-icon.s {\n    margin-top: 6px; }\n\n.bolt-header-separator {\n  height: 1px;\n  background-color: rgba( 244, 244, 244 ,  1 );\n  background-color: rgba( var(--palette-neutral-4,244, 244, 244) ,  1 ); }\n\n.bolt-button.bolt-header-back-button {\n  background-color: transparent;\n  font-size: 1rem;\n  margin-right: 8px; }\n  @media screen and (max-width: 600px) {\n    .bolt-button.bolt-header-back-button {\n      padding: 0px; }\n      .bolt-button.bolt-header-back-button .bolt-button-text {\n        font-size: 0.75rem;\n        color: rgba(0, 0, 0, .55);\n        color: var(--text-secondary-color,rgba(0, 0, 0, .55));\n        font-weight: normal; } }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Icon/FabricIcons.css":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__("./node_modules/azure-devops-ui/Components/Icon/fonts/AzDevMDL2.woff"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n  font-family: \"AzureDevOpsMDL2Assets\";\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format(\"woff\"); }\n\n.fabric-icon {\n  align-self: center;\n  display: inline-flex;\n  font-family: \"AzureDevOpsMDL2Assets\";\n  -webkit-font-smoothing: antialiased; }\n  .fabric-icon.small {\n    font-size: 0.75rem;\n    line-height: 0.75rem; }\n  .fabric-icon.medium {\n    font-size: 1rem;\n    line-height: 1rem; }\n  .fabric-icon.large {\n    font-size: 1.5rem;\n    line-height: 1.5rem; }\n\n/**\r\n * Adjustments to specific icon placements based on their default layout.\r\n */\n.ms-Icon--FabricFolder,\n.ms-Icon--FabricFolderFill {\n  transform: translateY(1px); }\n\n.ms-Icon--Tag {\n  transform: translateY(1px); }\n\n/**\r\n * Your use of the content in the files referenced here is subject to the terms of the license at https://aka.ms/fabric-assets-license\r\n */\n.ms-Icon--Insights:before {\n  content: \"\\E3AF\"; }\n\n.ms-Icon--GlobalNavButton:before {\n  content: \"\\E700\"; }\n\n.ms-Icon--Airplane:before {\n  content: \"\\E709\"; }\n\n.ms-Icon--ChevronDown:before {\n  content: \"\\E70D\"; }\n\n.ms-Icon--ChevronUp:before {\n  content: \"\\E70E\"; }\n\n.ms-Icon--Edit:before {\n  content: \"\\E70F\"; }\n\n.ms-Icon--Add:before {\n  content: \"\\E710\"; }\n\n.ms-Icon--Cancel:before {\n  content: \"\\E711\"; }\n\n.ms-Icon--More:before {\n  content: \"\\E712\"; }\n\n.ms-Icon--Settings:before {\n  content: \"\\E713\"; }\n\n.ms-Icon--Video:before {\n  content: \"\\E714\"; }\n\n.ms-Icon--Mail:before {\n  content: \"\\E715\"; }\n\n.ms-Icon--People:before {\n  content: \"\\E716\"; }\n\n.ms-Icon--Phone:before {\n  content: \"\\E717\"; }\n\n.ms-Icon--Pin:before {\n  content: \"\\E718\"; }\n\n.ms-Icon--Shop:before {\n  content: \"\\E719\"; }\n\n.ms-Icon--Link:before {\n  content: \"\\E71B\"; }\n\n.ms-Icon--Filter:before {\n  content: \"\\E71C\"; }\n\n.ms-Icon--Zoom:before {\n  content: \"\\E71E\"; }\n\n.ms-Icon--ZoomOut:before {\n  content: \"\\E71F\"; }\n\n.ms-Icon--Search:before {\n  content: \"\\E721\"; }\n\n.ms-Icon--Attach:before {\n  content: \"\\E723\"; }\n\n.ms-Icon--Send:before {\n  content: \"\\E724\"; }\n\n.ms-Icon--FavoriteList:before {\n  content: \"\\E728\"; }\n\n.ms-Icon--Forward:before {\n  content: \"\\E72A\"; }\n\n.ms-Icon--Back:before {\n  content: \"\\E72B\"; }\n\n.ms-Icon--Refresh:before {\n  content: \"\\E72C\"; }\n\n.ms-Icon--Share:before {\n  content: \"\\E72D\"; }\n\n.ms-Icon--Lock:before {\n  content: \"\\E72E\"; }\n\n.ms-Icon--BlockedSite:before {\n  content: \"\\E72F\"; }\n\n.ms-Icon--ReportHacked:before {\n  content: \"\\E730\"; }\n\n.ms-Icon--EMI:before {\n  content: \"\\E731\"; }\n\n.ms-Icon--Blocked:before {\n  content: \"\\E733\"; }\n\n.ms-Icon--FavoriteStar:before {\n  content: \"\\E734\"; }\n\n.ms-Icon--FavoriteStarFill:before {\n  content: \"\\E735\"; }\n\n.ms-Icon--ReadingMode:before {\n  content: \"\\E736\"; }\n\n.ms-Icon--Remove:before {\n  content: \"\\E738\"; }\n\n.ms-Icon--CheckboxComposite:before {\n  content: \"\\E73A\"; }\n\n.ms-Icon--CheckboxCompositeReversed:before {\n  content: \"\\E73D\"; }\n\n.ms-Icon--CheckMark:before {\n  content: \"\\E73E\"; }\n\n.ms-Icon--BackToWindow:before {\n  content: \"\\E73F\"; }\n\n.ms-Icon--FullScreen:before {\n  content: \"\\E740\"; }\n\n.ms-Icon--Print:before {\n  content: \"\\E749\"; }\n\n.ms-Icon--Up:before {\n  content: \"\\E74A\"; }\n\n.ms-Icon--Down:before {\n  content: \"\\E74B\"; }\n\n.ms-Icon--OEM:before {\n  content: \"\\E74C\"; }\n\n.ms-Icon--Delete:before {\n  content: \"\\E74D\"; }\n\n.ms-Icon--Save:before {\n  content: \"\\E74E\"; }\n\n.ms-Icon--Flashlight:before {\n  content: \"\\E754\"; }\n\n.ms-Icon--Sad:before {\n  content: \"\\E757\"; }\n\n.ms-Icon--MultiSelect:before {\n  content: \"\\E762\"; }\n\n.ms-Icon--KeyboardClassic:before {\n  content: \"\\E765\"; }\n\n.ms-Icon--Play:before {\n  content: \"\\E768\"; }\n\n.ms-Icon--Pause:before {\n  content: \"\\E769\"; }\n\n.ms-Icon--ChevronLeft:before {\n  content: \"\\E76B\"; }\n\n.ms-Icon--ChevronRight:before {\n  content: \"\\E76C\"; }\n\n.ms-Icon--Emoji2:before {\n  content: \"\\E76E\"; }\n\n.ms-Icon--SearchAndApps:before {\n  content: \"\\E773\"; }\n\n.ms-Icon--Globe:before {\n  content: \"\\E774\"; }\n\n.ms-Icon--ContactInfo:before {\n  content: \"\\E779\"; }\n\n.ms-Icon--Unpin:before {\n  content: \"\\E77A\"; }\n\n.ms-Icon--Contact:before {\n  content: \"\\E77B\"; }\n\n.ms-Icon--Paste:before {\n  content: \"\\E77F\"; }\n\n.ms-Icon--WindowsLogo:before {\n  content: \"\\E782\"; }\n\n.ms-Icon--Error:before {\n  content: \"\\E783\"; }\n\n.ms-Icon--Unlock:before {\n  content: \"\\E785\"; }\n\n.ms-Icon--Calendar:before {\n  content: \"\\E787\"; }\n\n.ms-Icon--Megaphone:before {\n  content: \"\\E789\"; }\n\n.ms-Icon--Color:before {\n  content: \"\\E790\"; }\n\n.ms-Icon--SaveAs:before {\n  content: \"\\E792\"; }\n\n.ms-Icon--Undo:before {\n  content: \"\\E7A7\"; }\n\n.ms-Icon--RedEye:before {\n  content: \"\\E7B3\"; }\n\n.ms-Icon--Package:before {\n  content: \"\\E7B8\"; }\n\n.ms-Icon--Warning:before {\n  content: \"\\E7BA\"; }\n\n.ms-Icon--ShoppingCart:before {\n  content: \"\\E7BF\"; }\n\n.ms-Icon--Flag:before {\n  content: \"\\E7C1\"; }\n\n.ms-Icon--Page:before {\n  content: \"\\E7C3\"; }\n\n.ms-Icon--Car:before {\n  content: \"\\E804\"; }\n\n.ms-Icon--EatDrink:before {\n  content: \"\\E807\"; }\n\n.ms-Icon--Home:before {\n  content: \"\\E80F\"; }\n\n.ms-Icon--SwitcherStartEnd:before {\n  content: \"\\E810\"; }\n\n.ms-Icon--IncidentTriangle:before {\n  content: \"\\E814\"; }\n\n.ms-Icon--History:before {\n  content: \"\\E81C\"; }\n\n.ms-Icon--Work:before {\n  content: \"\\E821\"; }\n\n.ms-Icon--Recent:before {\n  content: \"\\E823\"; }\n\n.ms-Icon--LocationDot:before {\n  content: \"\\E827\"; }\n\n.ms-Icon--Dictionary:before {\n  content: \"\\E82D\"; }\n\n.ms-Icon--Pinned:before {\n  content: \"\\E840\"; }\n\n.ms-Icon--RevToggleKey:before {\n  content: \"\\E845\"; }\n\n.ms-Icon--View:before {\n  content: \"\\E890\"; }\n\n.ms-Icon--Previous:before {\n  content: \"\\E892\"; }\n\n.ms-Icon--Next:before {\n  content: \"\\E893\"; }\n\n.ms-Icon--Clear:before {\n  content: \"\\E894\"; }\n\n.ms-Icon--Download:before {\n  content: \"\\E896\"; }\n\n.ms-Icon--Help:before {\n  content: \"\\E897\"; }\n\n.ms-Icon--Upload:before {\n  content: \"\\E898\"; }\n\n.ms-Icon--Emoji:before {\n  content: \"\\E899\"; }\n\n.ms-Icon--ClosePane:before {\n  content: \"\\E89F\"; }\n\n.ms-Icon--OpenPane:before {\n  content: \"\\E8A0\"; }\n\n.ms-Icon--PreviewLink:before {\n  content: \"\\E8A1\"; }\n\n.ms-Icon--ZoomIn:before {\n  content: \"\\E8A3\"; }\n\n.ms-Icon--ViewAll:before {\n  content: \"\\E8A9\"; }\n\n.ms-Icon--Switch:before {\n  content: \"\\E8AB\"; }\n\n.ms-Icon--Rename:before {\n  content: \"\\E8AC\"; }\n\n.ms-Icon--Import:before {\n  content: \"\\E8B5\"; }\n\n.ms-Icon--Folder:before {\n  content: \"\\E8B7\"; }\n\n.ms-Icon--ChromeClose:before {\n  content: \"\\E8BB\"; }\n\n.ms-Icon--ShowResults:before {\n  content: \"\\E8BC\"; }\n\n.ms-Icon--PaymentCard:before {\n  content: \"\\E8C7\"; }\n\n.ms-Icon--Copy:before {\n  content: \"\\E8C8\"; }\n\n.ms-Icon--FontColor:before {\n  content: \"\\E8D3\"; }\n\n.ms-Icon--Permissions:before {\n  content: \"\\E8D7\"; }\n\n.ms-Icon--Italic:before {\n  content: \"\\E8DB\"; }\n\n.ms-Icon--Underline:before {\n  content: \"\\E8DC\"; }\n\n.ms-Icon--Bold:before {\n  content: \"\\E8DD\"; }\n\n.ms-Icon--Like:before {\n  content: \"\\E8E1\"; }\n\n.ms-Icon--FontSize:before {\n  content: \"\\E8E9\"; }\n\n.ms-Icon--Tag:before {\n  content: \"\\E8EC\"; }\n\n.ms-Icon--Library:before {\n  content: \"\\E8F1\"; }\n\n.ms-Icon--BlockContact:before {\n  content: \"\\E8F8\"; }\n\n.ms-Icon--AddFriend:before {\n  content: \"\\E8FA\"; }\n\n.ms-Icon--Accept:before {\n  content: \"\\E8FB\"; }\n\n.ms-Icon--BulletedList:before {\n  content: \"\\E8FD\"; }\n\n.ms-Icon--Preview:before {\n  content: \"\\E8FF\"; }\n\n.ms-Icon--Chat:before {\n  content: \"\\E901\"; }\n\n.ms-Icon--Group:before {\n  content: \"\\E902\"; }\n\n.ms-Icon--World:before {\n  content: \"\\E909\"; }\n\n.ms-Icon--Comment:before {\n  content: \"\\E90A\"; }\n\n.ms-Icon--Repair:before {\n  content: \"\\E90F\"; }\n\n.ms-Icon--Accounts:before {\n  content: \"\\E910\"; }\n\n.ms-Icon--Stopwatch:before {\n  content: \"\\E916\"; }\n\n.ms-Icon--Clock:before {\n  content: \"\\E917\"; }\n\n.ms-Icon--WorldClock:before {\n  content: \"\\E918\"; }\n\n.ms-Icon--Completed:before {\n  content: \"\\E930\"; }\n\n.ms-Icon--MiniExpand:before {\n  content: \"\\E93A\"; }\n\n.ms-Icon--Code:before {\n  content: \"\\E943\"; }\n\n.ms-Icon--Streaming:before {\n  content: \"\\E93E\"; }\n\n.ms-Icon--LightningBolt:before {\n  content: \"\\E945\"; }\n\n.ms-Icon--Info:before {\n  content: \"\\E946\"; }\n\n.ms-Icon--CalculatorAddition:before {\n  content: \"\\E948\"; }\n\n.ms-Icon--MediaStorageTower:before {\n  content: \"\\E965\"; }\n\n.ms-Icon--ChevronUpSmall:before {\n  content: \"\\E96D\"; }\n\n.ms-Icon--ChevronDownSmall:before {\n  content: \"\\E96E\"; }\n\n.ms-Icon--ChevronLeftSmall:before {\n  content: \"\\E96F\"; }\n\n.ms-Icon--ChevronRightSmall:before {\n  content: \"\\E970\"; }\n\n.ms-Icon--ChevronUpMed:before {\n  content: \"\\E971\"; }\n\n.ms-Icon--ChevronDownMed:before {\n  content: \"\\E972\"; }\n\n.ms-Icon--ChevronLeftMed:before {\n  content: \"\\E973\"; }\n\n.ms-Icon--ChevronRightMed:before {\n  content: \"\\E974\"; }\n\n.ms-Icon--PC1:before {\n  content: \"\\E977\"; }\n\n.ms-Icon--Reply:before {\n  content: \"\\E97A\"; }\n\n.ms-Icon--Chart:before {\n  content: \"\\E999\"; }\n\n.ms-Icon--LockSolid:before {\n  content: \"\\E9A2\"; }\n\n.ms-Icon--DashKey:before {\n  content: \"\\E9AE\"; }\n\n.ms-Icon--CloudWeather:before {\n  content: \"\\E9BE\"; }\n\n.ms-Icon--Cloudy:before {\n  content: \"\\E9BF\"; }\n\n.ms-Icon--Unknown:before {\n  content: \"\\E9CE\"; }\n\n.ms-Icon--SortLines:before {\n  content: \"\\E9D0\"; }\n\n.ms-Icon--Ribbon:before {\n  content: \"\\E9D1\"; }\n\n.ms-Icon--Assign:before {\n  content: \"\\E9D3\"; }\n\n.ms-Icon--FlowChart:before {\n  content: \"\\E9D4\"; }\n\n.ms-Icon--CheckList:before {\n  content: \"\\E9D5\"; }\n\n.ms-Icon--Diagnostic:before {\n  content: \"\\E9D9\"; }\n\n.ms-Icon--Equalizer:before {\n  content: \"\\E9E9\"; }\n\n.ms-Icon--Processing:before {\n  content: \"\\E9F5\"; }\n\n.ms-Icon--WorkFlow:before {\n  content: \"\\EA01\"; }\n\n.ms-Icon--Diamond2Solid:before {\n  content: \"\\EA0A\"; }\n\n.ms-Icon--Teamwork:before {\n  content: \"\\EA12\"; }\n\n.ms-Icon--PeopleAdd:before {\n  content: \"\\EA15\"; }\n\n.ms-Icon--DateTime2:before {\n  content: \"\\EA17\"; }\n\n.ms-Icon--Shield:before {\n  content: \"\\EA18\"; }\n\n.ms-Icon--PageAdd:before {\n  content: \"\\EA1A\"; }\n\n.ms-Icon--NumberedList:before {\n  content: \"\\EA1C\"; }\n\n.ms-Icon--PowerBILogo:before {\n  content: \"\\EA1E\"; }\n\n.ms-Icon--MusicInCollectionFill:before {\n  content: \"\\EA36\"; }\n\n.ms-Icon--List:before {\n  content: \"\\EA37\"; }\n\n.ms-Icon--ErrorBadge:before {\n  content: \"\\EA39\"; }\n\n.ms-Icon--CircleRing:before {\n  content: \"\\EA3A\"; }\n\n.ms-Icon--CircleFill:before {\n  content: \"\\EA3B\"; }\n\n.ms-Icon--Lightbulb:before {\n  content: \"\\EA80\"; }\n\n.ms-Icon--Puzzle:before {\n  content: \"\\EA86\"; }\n\n.ms-Icon--Ringer:before {\n  content: \"\\EA8F\"; }\n\n.ms-Icon--PDF:before {\n  content: \"\\EA90\"; }\n\n.ms-Icon--CirclePlus:before {\n  content: \"\\EAEE\"; }\n\n.ms-Icon--StockDown:before {\n  content: \"\\EB0F\"; }\n\n.ms-Icon--StockUp:before {\n  content: \"\\EB11\"; }\n\n.ms-Icon--MSNVideos:before {\n  content: \"\\EB1C\"; }\n\n.ms-Icon--Soccer:before {\n  content: \"\\EB21\"; }\n\n.ms-Icon--CollegeFootball:before {\n  content: \"\\EB26\"; }\n\n.ms-Icon--ProFootball:before {\n  content: \"\\EB27\"; }\n\n.ms-Icon--Snowflake:before {\n  content: \"\\EB46\"; }\n\n.ms-Icon--AirplaneSolid:before {\n  content: \"\\EB4C\"; }\n\n.ms-Icon--Heart:before {\n  content: \"\\EB51\"; }\n\n.ms-Icon--HeartFill:before {\n  content: \"\\EB52\"; }\n\n.ms-Icon--AzureLogo:before {\n  content: \"\\EB6A\"; }\n\n.ms-Icon--OfficeLogo:before {\n  content: \"\\EB6E\"; }\n\n.ms-Icon--SkypeLogo:before {\n  content: \"\\EB6F\"; }\n\n.ms-Icon--StatusErrorFull:before {\n  content: \"\\EB90\"; }\n\n.ms-Icon--Certificate:before {\n  content: \"\\EB95\"; }\n\n.ms-Icon--Rewind:before {\n  content: \"\\EB9E\"; }\n\n.ms-Icon--Photo2:before {\n  content: \"\\EB9F\"; }\n\n.ms-Icon--OpenSource:before {\n  content: \"\\EBC2\"; }\n\n.ms-Icon--Project:before {\n  content: \"\\EBC6\"; }\n\n.ms-Icon--CloudDownload:before {\n  content: \"\\EBD3\"; }\n\n.ms-Icon--CityNext:before {\n  content: \"\\EC06\"; }\n\n.ms-Icon--Documentation:before {\n  content: \"\\EC17\"; }\n\n.ms-Icon--Giftbox:before {\n  content: \"\\EC1F\"; }\n\n.ms-Icon--VisualStudioLogo:before {\n  content: \"\\EC22\"; }\n\n.ms-Icon--CompletedSolid:before {\n  content: \"\\EC61\"; }\n\n.ms-Icon--MicrosoftLogo:before {\n  content: \"\\EC6A\"; }\n\n.ms-Icon--CloudUpload:before {\n  content: \"\\EC8E\"; }\n\n.ms-Icon--ScrollUpDown:before {\n  content: \"\\EC8F\"; }\n\n.ms-Icon--Tiles:before {\n  content: \"\\ECA5\"; }\n\n.ms-Icon--Org:before {\n  content: \"\\ECA6\"; }\n\n.ms-Icon--PartyLeader:before {\n  content: \"\\ECA7\"; }\n\n.ms-Icon--AppIconDefault:before {\n  content: \"\\ECAA\"; }\n\n.ms-Icon--POI:before {\n  content: \"\\ECAF\"; }\n\n.ms-Icon--AddTo:before {\n  content: \"\\ECC8\"; }\n\n.ms-Icon--RadioBtnOff:before {\n  content: \"\\ECCA\"; }\n\n.ms-Icon--RadioBtnOn:before {\n  content: \"\\ECCB\"; }\n\n.ms-Icon--ExploreContent:before {\n  content: \"\\ECCD\"; }\n\n.ms-Icon--Embed:before {\n  content: \"\\ECCE\"; }\n\n.ms-Icon--Product:before {\n  content: \"\\ECDC\"; }\n\n.ms-Icon--ProgressLoopOuter:before {\n  content: \"\\ECDF\"; }\n\n.ms-Icon--Blocked2:before {\n  content: \"\\ECE4\"; }\n\n.ms-Icon--FangBody:before {\n  content: \"\\ECEB\"; }\n\n.ms-Icon--ChatInviteFriend:before {\n  content: \"\\ECFE\"; }\n\n.ms-Icon--Feedback:before {\n  content: \"\\ED15\"; }\n\n.ms-Icon--YammerLogo:before {\n  content: \"\\ED19\"; }\n\n.ms-Icon--AADLogo:before {\n  content: \"\\ED68\"; }\n\n.ms-Icon--AccessLogo:before {\n  content: \"\\ED69\"; }\n\n.ms-Icon--SecurityGroup:before {\n  content: \"\\ED85\"; }\n\n.ms-Icon--Table:before {\n  content: \"\\ED86\"; }\n\n.ms-Icon--Waffle:before {\n  content: \"\\ED89\"; }\n\n.ms-Icon--RemoveLink:before {\n  content: \"\\ED90\"; }\n\n.ms-Icon--EditNote:before {\n  content: \"\\ED9D\"; }\n\n.ms-Icon--DoubleChevronUp:before {\n  content: \"\\EDBD\"; }\n\n.ms-Icon--DoubleChevronLeft:before {\n  content: \"\\EDBE\"; }\n\n.ms-Icon--DoubleChevronRight:before {\n  content: \"\\EDBF\"; }\n\n.ms-Icon--Ascending:before {\n  content: \"\\EDC0\"; }\n\n.ms-Icon--Descending:before {\n  content: \"\\EDC1\"; }\n\n.ms-Icon--TextField:before {\n  content: \"\\EDC3\"; }\n\n.ms-Icon--Dynamics365Logo:before {\n  content: \"\\EDCC\"; }\n\n.ms-Icon--ClearFormatting:before {\n  content: \"\\EDDD\"; }\n\n.ms-Icon--Strikethrough:before {\n  content: \"\\EDE0\"; }\n\n.ms-Icon--Export:before {\n  content: \"\\EDE1\"; }\n\n.ms-Icon--ExportMirrored:before {\n  content: \"\\EDE2\"; }\n\n.ms-Icon--DoubleChevronDown:before {\n  content: \"\\EE04\"; }\n\n.ms-Icon--ReplyMirrored:before {\n  content: \"\\EE35\"; }\n\n.ms-Icon--AddGroup:before {\n  content: \"\\EE3D\"; }\n\n.ms-Icon--SortUp:before {\n  content: \"\\EE68\"; }\n\n.ms-Icon--SortDown:before {\n  content: \"\\EE69\"; }\n\n.ms-Icon--AwayStatus:before {\n  content: \"\\EE6A\"; }\n\n.ms-Icon--MyMoviesTV:before {\n  content: \"\\EE6C\"; }\n\n.ms-Icon--CPU:before {\n  content: \"\\EEA1\"; }\n\n.ms-Icon--ContactCard:before {\n  content: \"\\EEBD\"; }\n\n.ms-Icon--CustomList:before {\n  content: \"\\EEBE\"; }\n\n.ms-Icon--OfflineOneDriveParachute:before {\n  content: \"\\EEC8\"; }\n\n.ms-Icon--OfflineOneDriveParachuteDisabled:before {\n  content: \"\\EEC9\"; }\n\n.ms-Icon--TriangleSolidUp12:before {\n  content: \"\\EECC\"; }\n\n.ms-Icon--TriangleSolidDown12:before {\n  content: \"\\EECD\"; }\n\n.ms-Icon--TriangleSolidRight12:before {\n  content: \"\\EECF\"; }\n\n.ms-Icon--TriangleRight12:before {\n  content: \"\\EED3\"; }\n\n.ms-Icon--ArrowUpRight8:before {\n  content: \"\\EED4\"; }\n\n.ms-Icon--DocumentSet:before {\n  content: \"\\EED6\"; }\n\n.ms-Icon--ArrowDownRightMirrored8:before {\n  content: \"\\EEF0\"; }\n\n.ms-Icon--ViewAll2:before {\n  content: \"\\EF56\"; }\n\n.ms-Icon--PlayerSettings:before {\n  content: \"\\EF58\"; }\n\n.ms-Icon--ReceiptCheck:before {\n  content: \"\\EF5B\"; }\n\n.ms-Icon--EditStyle:before {\n  content: \"\\EF60\"; }\n\n.ms-Icon--Lifesaver:before {\n  content: \"\\EF62\"; }\n\n.ms-Icon--DocumentSearch:before {\n  content: \"\\EF6C\"; }\n\n.ms-Icon--ExcelDocument:before {\n  content: \"\\EF73\"; }\n\n.ms-Icon--Starburst:before {\n  content: \"\\EF78\"; }\n\n.ms-Icon--SkypeCircleCheck:before {\n  content: \"\\EF7D\"; }\n\n.ms-Icon--SkypeCircleMinus:before {\n  content: \"\\EF7F\"; }\n\n.ms-Icon--SkypeMinus:before {\n  content: \"\\EF82\"; }\n\n.ms-Icon--Hide2:before {\n  content: \"\\EF89\"; }\n\n.ms-Icon--ClearFilter:before {\n  content: \"\\EF8F\"; }\n\n.ms-Icon--TimeEntry:before {\n  content: \"\\EF95\"; }\n\n.ms-Icon--PageEdit:before {\n  content: \"\\EFB6\"; }\n\n.ms-Icon--PageArrowRight:before {\n  content: \"\\EFB8\"; }\n\n.ms-Icon--Database:before {\n  content: \"\\EFC7\"; }\n\n.ms-Icon--ConnectContacts:before {\n  content: \"\\EFD4\"; }\n\n.ms-Icon--ActivateOrders:before {\n  content: \"\\EFE0\"; }\n\n.ms-Icon--ZipFolder:before {\n  content: \"\\F012\"; }\n\n.ms-Icon--Configuration:before {\n  content: \"\\F01E\"; }\n\n.ms-Icon--TextDocument:before {\n  content: \"\\F029\"; }\n\n.ms-Icon--Script:before {\n  content: \"\\F03A\"; }\n\n.ms-Icon--ActivityFeed:before {\n  content: \"\\F056\"; }\n\n.ms-Icon--CaretSolidDown:before {\n  content: \"\\F08E\"; }\n\n.ms-Icon--FabricFolder:before {\n  content: \"\\F0A9\"; }\n\n.ms-Icon--FabricFolderFill:before {\n  content: \"\\F0AA\"; }\n\n.ms-Icon--FabricNewFolder:before {\n  content: \"\\F0AB\"; }\n\n.ms-Icon--PublishContent:before {\n  content: \"\\F0D4\"; }\n\n.ms-Icon--CannedChat:before {\n  content: \"\\F0F2\"; }\n\n.ms-Icon--SettingsApp:before {\n  content: \"\\F0FF\"; }\n\n.ms-Icon--FolderHorizontal:before {\n  content: \"\\F12B\"; }\n\n.ms-Icon--GiftboxOpen:before {\n  content: \"\\F133\"; }\n\n.ms-Icon--StatusCircleInner:before {\n  content: \"\\F137\"; }\n\n.ms-Icon--StatusCircleRing:before {\n  content: \"\\F138\"; }\n\n.ms-Icon--StatusCircleErrorX:before {\n  content: \"\\F13D\"; }\n\n.ms-Icon--StatusCircleCheckmark:before {\n  content: \"\\F13E\"; }\n\n.ms-Icon--InfoSolid:before {\n  content: \"\\F167\"; }\n\n.ms-Icon--ProgressRingDots:before {\n  content: \"\\F16A\"; }\n\n.ms-Icon--WordLogo:before {\n  content: \"\\F1E3\"; }\n\n.ms-Icon--ExcelLogo:before {\n  content: \"\\F1E5\"; }\n\n.ms-Icon--OneNoteLogo:before {\n  content: \"\\F1E7\"; }\n\n.ms-Icon--OutlookLogo:before {\n  content: \"\\F1E9\"; }\n\n.ms-Icon--PowerPointLogo:before {\n  content: \"\\F1EB\"; }\n\n.ms-Icon--ScheduleEventAction:before {\n  content: \"\\F1EF\"; }\n\n.ms-Icon--FlameSolid:before {\n  content: \"\\F1F3\"; }\n\n.ms-Icon--ServerProcesses:before {\n  content: \"\\F1FE\"; }\n\n.ms-Icon--Server:before {\n  content: \"\\F201\"; }\n\n.ms-Icon--SaveAll:before {\n  content: \"\\F203\"; }\n\n.ms-Icon--TwoKeys:before {\n  content: \"\\F229\"; }\n\n.ms-Icon--GridViewSmall:before {\n  content: \"\\F232\"; }\n\n.ms-Icon--ViewDashboard:before {\n  content: \"\\F246\"; }\n\n.ms-Icon--ViewList:before {\n  content: \"\\F247\"; }\n\n.ms-Icon--ViewListGroup:before {\n  content: \"\\F248\"; }\n\n.ms-Icon--ViewListTree:before {\n  content: \"\\F249\"; }\n\n.ms-Icon--TriggerAuto:before {\n  content: \"\\F24A\"; }\n\n.ms-Icon--TriggerUser:before {\n  content: \"\\F24B\"; }\n\n.ms-Icon--StackedBarChart:before {\n  content: \"\\F24D\"; }\n\n.ms-Icon--StackedLineChart:before {\n  content: \"\\F24E\"; }\n\n.ms-Icon--BuildQueue:before {\n  content: \"\\F24F\"; }\n\n.ms-Icon--BuildQueueNew:before {\n  content: \"\\F250\"; }\n\n.ms-Icon--UserFollowed:before {\n  content: \"\\F25C\"; }\n\n.ms-Icon--Clicked:before {\n  content: \"\\F268\"; }\n\n.ms-Icon--Signin:before {\n  content: \"\\F286\"; }\n\n.ms-Icon--CloneToDesktop:before {\n  content: \"\\F28C\"; }\n\n.ms-Icon--Build:before {\n  content: \"\\F28F\"; }\n\n.ms-Icon--BranchFork2:before {\n  content: \"\\F291\"; }\n\n.ms-Icon--BranchCommit:before {\n  content: \"\\F293\"; }\n\n.ms-Icon--BranchMerge:before {\n  content: \"\\F295\"; }\n\n.ms-Icon--BranchPullRequest:before {\n  content: \"\\F296\"; }\n\n.ms-Icon--BranchShelveset:before {\n  content: \"\\F298\"; }\n\n.ms-Icon--RawSource:before {\n  content: \"\\F299\"; }\n\n.ms-Icon--RowsGroup:before {\n  content: \"\\F29B\"; }\n\n.ms-Icon--Deploy:before {\n  content: \"\\F29D\"; }\n\n.ms-Icon--ServerEnviroment:before {\n  content: \"\\F29F\"; }\n\n.ms-Icon--VisioLogo:before {\n  content: \"\\F2A7\"; }\n\n.ms-Icon--Backlog:before {\n  content: \"\\F2AC\"; }\n\n.ms-Icon--TeamFavorite:before {\n  content: \"\\F2AD\"; }\n\n.ms-Icon--TaskGroup:before {\n  content: \"\\F2AE\"; }\n\n.ms-Icon--CommentAdd:before {\n  content: \"\\F2B3\"; }\n\n.ms-Icon--ShopServer:before {\n  content: \"\\F2B6\"; }\n\n.ms-Icon--QueryList:before {\n  content: \"\\F2B8\"; }\n\n.ms-Icon--StreamingOff:before {\n  content: \"\\F2BB\"; }\n\n.ms-Icon--MoreVertical:before {\n  content: \"\\F2BC\"; }\n\n.ms-Icon--ArrowTallUpRight:before {\n  content: \"\\F2BE\"; }\n\n.ms-Icon--RingerOff:before {\n  content: \"\\F2C5\"; }\n\n.ms-Icon--PlayResume:before {\n  content: \"\\F2C6\"; }\n\n.ms-Icon--Repo:before {\n  content: \"\\F2CB\"; }\n\n.ms-Icon--FolderQuery:before {\n  content: \"\\F2CD\"; }\n\n.ms-Icon--FolderList:before {\n  content: \"\\F2CE\"; }\n\n.ms-Icon--CirclePauseSolid:before {\n  content: \"\\F2D8\"; }\n\n.ms-Icon--CirclePause:before {\n  content: \"\\F2D9\"; }\n\n.ms-Icon--MSNVideosSolid:before {\n  content: \"\\F2DA\"; }\n\n.ms-Icon--CircleStopSolid:before {\n  content: \"\\F2DB\"; }\n\n.ms-Icon--CircleStop:before {\n  content: \"\\F2DC\"; }\n\n.ms-Icon--NavigateForward:before {\n  content: \"\\F2DF\"; }\n\n.ms-Icon--FileTemplate:before {\n  content: \"\\F2E6\"; }\n\n.ms-Icon--FileJAVA:before {\n  content: \"\\F2E8\"; }\n\n.ms-Icon--FileCSS:before {\n  content: \"\\F2EA\"; }\n\n.ms-Icon--FileSass:before {\n  content: \"\\F2EB\"; }\n\n.ms-Icon--FileHTML:before {\n  content: \"\\F2ED\"; }\n\n.ms-Icon--JavaScriptLanguage:before {\n  content: \"\\F2EE\"; }\n\n.ms-Icon--CSharpLanguage:before {\n  content: \"\\F2EF\"; }\n\n.ms-Icon--TypeScriptLanguage:before {\n  content: \"\\F2F7\"; }\n\n.ms-Icon--MarkDownLanguage:before {\n  content: \"\\F2FB\"; }\n\n.ms-Icon--PlugConnected:before {\n  content: \"\\F302\"; }\n\n.ms-Icon--PlugDisconnected:before {\n  content: \"\\F303\"; }\n\n.ms-Icon--UnlockSolid:before {\n  content: \"\\F304\"; }\n\n.ms-Icon--Variable:before {\n  content: \"\\F305\"; }\n\n.ms-Icon--FileBug:before {\n  content: \"\\F30D\"; }\n\n.ms-Icon--FileCode:before {\n  content: \"\\F30E\"; }\n\n.ms-Icon--FileImage:before {\n  content: \"\\F311\"; }\n\n.ms-Icon--AutoFillTemplate:before {\n  content: \"\\F313\"; }\n\n.ms-Icon--WorkItem:before {\n  content: \"\\F314\"; }\n\n.ms-Icon--FullHistory:before {\n  content: \"\\F31C\"; }\n\n.ms-Icon--TripleColumnEdit:before {\n  content: \"\\F323\"; }\n\n.ms-Icon--AlertSolid:before {\n  content: \"\\F331\"; }\n\n.ms-Icon--MegaphoneSolid:before {\n  content: \"\\F332\"; }\n\n.ms-Icon--TaskSolid:before {\n  content: \"\\F333\"; }\n\n.ms-Icon--CrownSolid:before {\n  content: \"\\F336\"; }\n\n.ms-Icon--Trophy2Solid:before {\n  content: \"\\F337\"; }\n\n.ms-Icon--QuickNoteSolid:before {\n  content: \"\\F338\"; }\n\n.ms-Icon--ConstructionConeSolid:before {\n  content: \"\\F339\"; }\n\n.ms-Icon--PageListSolid:before {\n  content: \"\\F33A\"; }\n\n.ms-Icon--StarburstSolid:before {\n  content: \"\\F33C\"; }\n\n.ms-Icon--ReadingModeSolid:before {\n  content: \"\\F33D\"; }\n\n.ms-Icon--ShieldSolid:before {\n  content: \"\\F340\"; }\n\n.ms-Icon--GiftBoxSolid:before {\n  content: \"\\F341\"; }\n\n.ms-Icon--RibbonSolid:before {\n  content: \"\\F345\"; }\n\n.ms-Icon--FinancialSolid:before {\n  content: \"\\F346\"; }\n\n.ms-Icon--HeadsetSolid:before {\n  content: \"\\F348\"; }\n\n.ms-Icon--PermissionsSolid:before {\n  content: \"\\F349\"; }\n\n.ms-Icon--ParkingSolid:before {\n  content: \"\\F34A\"; }\n\n.ms-Icon--DiamondSolid:before {\n  content: \"\\F34C\"; }\n\n.ms-Icon--AsteriskSolid:before {\n  content: \"\\F34D\"; }\n\n.ms-Icon--OfflineStorageSolid:before {\n  content: \"\\F34E\"; }\n\n.ms-Icon--BankSolid:before {\n  content: \"\\F34F\"; }\n\n.ms-Icon--DecisionSolid:before {\n  content: \"\\F350\"; }\n\n.ms-Icon--ParachuteSolid:before {\n  content: \"\\F352\"; }\n\n.ms-Icon--FiltersSolid:before {\n  content: \"\\F353\"; }\n\n.ms-Icon--ColorSolid:before {\n  content: \"\\F354\"; }\n\n.ms-Icon--ReviewSolid:before {\n  content: \"\\F355\"; }\n\n.ms-Icon--ReviewRequestSolid:before {\n  content: \"\\F356\"; }\n\n.ms-Icon--ReviewResponseSolid:before {\n  content: \"\\F358\"; }\n\n.ms-Icon--FeedbackRequestSolid:before {\n  content: \"\\F359\"; }\n\n.ms-Icon--FeedbackResponseSolid:before {\n  content: \"\\F35B\"; }\n\n.ms-Icon--NavigateExternalInline:before {\n  content: \"\\F35F\"; }\n\n.ms-Icon--PlanView:before {\n  content: \"\\F360\"; }\n\n.ms-Icon--EngineeringGroup:before {\n  content: \"\\F362\"; }\n\n.ms-Icon--ProjectCollection:before {\n  content: \"\\F363\"; }\n\n.ms-Icon--ChevronUnfold10:before {\n  content: \"\\F369\"; }\n\n.ms-Icon--ChevronFold10:before {\n  content: \"\\F36A\"; }\n\n.ms-Icon--VSTSLogo:before {\n  content: \"\\F381\"; }\n\n.ms-Icon--TestBeaker:before {\n  content: \"\\F3A5\"; }\n\n.ms-Icon--TestBeakerSolid:before {\n  content: \"\\F3A6\"; }\n\n.ms-Icon--TestAutoSolid:before {\n  content: \"\\F3A8\"; }\n\n.ms-Icon--TestPlan:before {\n  content: \"\\F3AB\"; }\n\n.ms-Icon--TestStep:before {\n  content: \"\\F3AC\"; }\n\n.ms-Icon--TestParameter:before {\n  content: \"\\F3AD\"; }\n\n.ms-Icon--TestSuite:before {\n  content: \"\\F3AE\"; }\n\n.ms-Icon--TestCase:before {\n  content: \"\\F3AF\"; }\n\n.ms-Icon--Sprint:before {\n  content: \"\\F3B0\"; }\n\n.ms-Icon--TriggerApproval:before {\n  content: \"\\F3B2\"; }\n\n.ms-Icon--Rocket:before {\n  content: \"\\F3B3\"; }\n\n.ms-Icon--AzureKeyVault:before {\n  content: \"\\F3B4\"; }\n\n.ms-Icon--LikeSolid:before {\n  content: \"\\F3BF\"; }\n\n.ms-Icon--CRMCustomerInsightsApp:before {\n  content: \"\\F3C8\"; }\n\n.ms-Icon--FilterSolid:before {\n  content: \"\\F412\"; }\n\n.ms-Icon--Inbox:before {\n  content: \"\\F41C\"; }\n\n.ms-Icon--NotExecuted:before {\n  content: \"\\F440\"; }\n\n.ms-Icon--NotImpactedSolid:before {\n  content: \"\\F441\"; }\n\n.ms-Icon--BacklogBoard:before {\n  content: \"\\F444\"; }\n\n.ms-Icon--IssueSolid:before {\n  content: \"\\F448\"; }\n\n.ms-Icon--DefectSolid:before {\n  content: \"\\F449\"; }\n\n.ms-Icon--LadybugSolid:before {\n  content: \"\\F44A\"; }\n\n.ms-Icon--NugetLogo:before {\n  content: \"\\F44C\"; }\n\n.ms-Icon--TFVCLogo:before {\n  content: \"\\F44D\"; }\n\n.ms-Icon--ProjectLogo32:before {\n  content: \"\\F47E\"; }\n\n.ms-Icon--WaffleOffice365:before {\n  content: \"\\F4E0\"; }\n\n.ms-Icon--FontColorA:before {\n  content: \"\\F4EC\"; }\n\n.ms-Icon--FontColorSwatch:before {\n  content: \"\\F4ED\"; }\n\n.ms-Icon--SemiboldWeight:before {\n  content: \"\\F4F0\"; }\n\n.ms-Icon--ChartSeries:before {\n  content: \"\\F513\"; }\n\n.ms-Icon--AlignJustify:before {\n  content: \"\\F51E\"; }\n\n.ms-Icon--BlockedSolid:before {\n  content: \"\\F531\"; }\n\n.ms-Icon--DownloadDocument:before {\n  content: \"\\F549\"; }\n\n.ms-Icon--WaitlistConfirm:before {\n  content: \"\\F550\"; }\n\n.ms-Icon--LaptopSecure:before {\n  content: \"\\F552\"; }\n\n.ms-Icon--EntryView:before {\n  content: \"\\F554\"; }\n\n.ms-Icon--AccountManagement:before {\n  content: \"\\F55C\"; }\n\n.ms-Icon--ExploreData:before {\n  content: \"\\F5B6\"; }\n\n.ms-Icon--BitbucketLogo32:before {\n  content: \"\\F5D2\"; }\n\n.ms-Icon--GradleLogo32:before {\n  content: \"\\F5D4\"; }\n\n.ms-Icon--PasteAsCode:before {\n  content: \"\\F5D6\"; }\n\n.ms-Icon--FileYML:before {\n  content: \"\\F5DA\"; }\n\n.ms-Icon--ClipboardSolid:before {\n  content: \"\\F5DC\"; }\n\n.ms-Icon--AnalyticsView:before {\n  content: \"\\F5F1\"; }\n\n.ms-Icon--Trending12:before {\n  content: \"\\F62D\"; }\n\n.ms-Icon--CircleShapeSolid:before {\n  content: \"\\F63C\"; }\n\n.ms-Icon--GitLogo:before {\n  content: \"\\F65D\"; }\n\n.ms-Icon--GitHubLogo:before {\n  content: \"\\F65E\"; }\n\n.ms-Icon--ApacheMavenLogo:before {\n  content: \"\\F65F\"; }\n\n.ms-Icon--NPMLogo:before {\n  content: \"\\F660\"; }\n\n.ms-Icon--GitFork:before {\n  content: \"\\F661\"; }\n\n.ms-Icon--SVNLogo:before {\n  content: \"\\F662\"; }\n\n.ms-Icon--JenkinsLogo:before {\n  content: \"\\F663\"; }\n\n.ms-Icon--ExternalGit:before {\n  content: \"\\F665\"; }\n\n.ms-Icon--QuadColumn:before {\n  content: \"\\F66F\"; }\n\n.ms-Icon--DictionaryRemove:before {\n  content: \"\\F69A\"; }\n\n.ms-Icon--UserRemove:before {\n  content: \"\\F69B\"; }\n\n.ms-Icon--OpenInNewTab:before {\n  content: \"\\F6AB\"; }\n\n.ms-Icon--VerifiedBrandSolid:before {\n  content: \"\\F6AD\"; }\n\n.ms-Icon--AuthenticatorApp:before {\n  content: \"\\F6B1\"; }\n\n.ms-Icon--BacklogList:before {\n  content: \"\\F6BF\"; }\n\n.ms-Icon--ButtonControl:before {\n  content: \"\\F6C0\"; }\n\n.ms-Icon--UserGauge:before {\n  content: \"\\F6ED\"; }\n\n.ms-Icon--PeopleSettings:before {\n  content: \"\\F72C\"; }\n\n.ms-Icon--Blocked2Solid:before {\n  content: \"\\F737\"; }\n\n.ms-Icon--BulletedListText:before {\n  content: \"\\F792\"; }\n\n.ms-Icon--BulletedListBullet:before {\n  content: \"\\F793\"; }\n\n.ms-Icon--NumberedListText:before {\n  content: \"\\F796\"; }\n\n.ms-Icon--NumberedListNumber:before {\n  content: \"\\F797\"; }\n\n.ms-Icon--RemoveLinkChain:before {\n  content: \"\\F79A\"; }\n\n.ms-Icon--RemoveLinkX:before {\n  content: \"\\F79B\"; }\n\n.ms-Icon--FabricTextHighlight:before {\n  content: \"\\F79C\"; }\n\n.ms-Icon--ClearFormattingA:before {\n  content: \"\\F79D\"; }\n\n.ms-Icon--ClearFormattingEraser:before {\n  content: \"\\F79E\"; }\n\n.ms-Icon--Photo2Fill:before {\n  content: \"\\F79F\"; }\n\n.ms-Icon--IncreaseIndentText:before {\n  content: \"\\F7A0\"; }\n\n.ms-Icon--IncreaseIndentArrow:before {\n  content: \"\\F7A1\"; }\n\n.ms-Icon--DecreaseIndentText:before {\n  content: \"\\F7A2\"; }\n\n.ms-Icon--DecreaseIndentArrow:before {\n  content: \"\\F7A3\"; }\n\n.ms-Icon--CheckListText:before {\n  content: \"\\F7A8\"; }\n\n.ms-Icon--CheckListCheck:before {\n  content: \"\\F7A9\"; }\n\n.ms-Icon--NumberSymbol:before {\n  content: \"\\F7AC\"; }\n\n.ms-Icon--VerifiedBrand:before {\n  content: \"\\F7BD\"; }\n\n.ms-Icon--ReleaseGate:before {\n  content: \"\\F7BE\"; }\n\n.ms-Icon--ReleaseGateCheck:before {\n  content: \"\\F7BF\"; }\n\n.ms-Icon--ReleaseGateError:before {\n  content: \"\\F7C0\"; }\n\n.ms-Icon--FabricTextHighlightComposite:before {\n  content: \"\\F7DA\"; }\n\n.ms-Icon--SkypeCircleSlash:before {\n  content: \"\\F825\"; }\n\n.ms-Icon--PythonLogoBlue:before {\n  content: \"\\F84D\"; }\n\n.ms-Icon--PythonLogoYellow:before {\n  content: \"\\F84E\"; }\n\n.ms-Icon--RustLanguageLogo:before {\n  content: \"\\F84F\"; }\n\n.ms-Icon--RubyGemsLogo:before {\n  content: \"\\F850\"; }\n\n.ms-Icon--AddReaction:before {\n  content: \"\\F85D\"; }\n\n.ms-Icon--DecreaseIndentLegacy:before {\n  content: \"\\E290\"; }\n\n.ms-Icon--IncreaseIndentLegacy:before {\n  content: \"\\E291\"; }\n\n.ms-Icon--SurveyQuestions:before {\n  content: \"\\F01B\"; }\n\n.ms-Icon--BranchCompare:before {\n  content: \"\\F294\"; }\n\n.ms-Icon--DiffInline:before {\n  content: \"\\F309\"; }\n\n.ms-Icon--DiffSideBySide:before {\n  content: \"\\F30A\"; }\n\n.ms-Icon--ImageDiff:before {\n  content: \"\\F30B\"; }\n\n.ms-Icon--GitGraph:before {\n  content: \"\\F2CA\"; }\n\n.ms-Icon--WordDocument:before {\n  content: \"\\EF71\"; }\n\n.ms-Icon--PowerPointDocument:before {\n  content: \"\\EF72\"; }\n\n.ms-Icon--PowerShell:before {\n  content: \"\\F1FD\"; }\n\n.ms-Icon--FilePDB:before {\n  content: \"\\F2E5\"; }\n\n.ms-Icon--FileSQL:before {\n  content: \"\\F2E7\"; }\n\n.ms-Icon--FileASPX:before {\n  content: \"\\F2E9\"; }\n\n.ms-Icon--FileSass:before {\n  content: \"\\F2EB\"; }\n\n.ms-Icon--FileLess:before {\n  content: \"\\F2EC\"; }\n\n.ms-Icon--CSharpLanguage:before {\n  content: \"\\F2EF\"; }\n\n.ms-Icon--VisualBasicLanguage:before {\n  content: \"\\F2F1\"; }\n\n.ms-Icon--CPlusPlusLanguage:before {\n  content: \"\\F2F3\"; }\n\n.ms-Icon--FSharpLanguage:before {\n  content: \"\\F2F5\"; }\n\n.ms-Icon--PythonLanguage:before {\n  content: \"\\F2F8\"; }\n\n.ms-Icon--CoffeeScript:before {\n  content: \"\\F2FA\"; }\n\n.ms-Icon--RowsChild:before {\n  content: \"\\F29C\"; }\n\n.ms-Icon--SemanticZoom:before {\n  content: \"\\E833\"; }\n\n.ms-Icon--FileTypeSolution:before {\n  content: \"\\F387\"; }\n\n.ms-Icon--FileYML:before {\n  content: \"\\F5DA\"; }\n\n.ms-Icon--Camera:before {\n  content: \"\\E722\"; }\n\n.ms-Icon--GripperResize:before {\n  content: \"\\E788\"; }\n\n.ms-Icon--UngroupList:before {\n  content: \"\\E61C\"; }\n\n.ms-Icon--GripperDotsVertical:before {\n  content: \"\\F772\"; }\n\n.ms-Icon--BugWarning:before {\n  content: \"\\E357\"; }\n\n.ms-Icon--DockRight:before {\n  content: \"\\E90D\"; }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Link/Link.css":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".bolt-link {\n  border-radius: 2px;\n  color: rgba(0, 90, 158, 1);\n  color: var(--communication-foreground,rgba(0, 90, 158, 1));\n  cursor: pointer;\n  outline: transparent;\n  text-decoration: none;\n  transition: color 80ms cubic-bezier(0.165, 0.84, 0.44, 1), background 80ms linear; }\n  .bolt-link:hover {\n    color: rgba( 0, 69, 120 ,  1 );\n    color: rgba( var(--palette-primary-shade-30,0, 69, 120) ,  1 ); }\n  .bolt-focus-visible .bolt-link:focus {\n    animation: ms-focus-shadow-with-border-pulse 4s ease-in-out infinite;\n    box-shadow: 0 0 0 3px rgba(0, 120, 212, 0.23), 0 0 0 1px rgba(0, 120, 212, 1);\n    box-shadow: 0 0 0 3px var(--focus-pulse-max-color,rgba(0, 120, 212, 0.23)), 0 0 0 1px var(--focus-border-color,rgba(0, 120, 212, 1)); }\n    @media (forced-colors: active) {\n      .bolt-focus-visible .bolt-link:focus {\n        animation: none; } }\n  .bolt-link.subtle {\n    border-radius: 4px;\n    color: inherit;\n    padding: 3px 6px; }\n    .bolt-link.subtle:hover {\n      color: rgba(0, 90, 158, 1);\n      color: var(--communication-foreground,rgba(0, 90, 158, 1));\n      background-color: rgba(0, 0, 0, 0.06);\n      background-color: var(--palette-black-alpha-6,rgba(0, 0, 0, 0.06)); }\n  .bolt-link.disabled {\n    cursor: default; }\n  .bolt-link.underline {\n    text-decoration: underline; }\n\n.bolt-focus-visible .bolt-link.subtle:focus {\n  background-color: rgba(0, 0, 0, 0.06);\n  background-color: var(--palette-black-alpha-6,rgba(0, 0, 0, 0.06));\n  color: rgba(0, 90, 158, 1);\n  color: var(--communication-foreground,rgba(0, 90, 158, 1));\n  outline: none; }\n\n@media (forced-colors: active) {\n  .bolt-focus-visible .bolt-link:focus {\n    outline: 1px solid highlight !important; } }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/List/List.css":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".bolt-list {\n  border-spacing: 0 0;\n  color: rgba(0, 0, 0, .9);\n  color: var(--text-primary-color,rgba(0, 0, 0, .9));\n  cursor: default;\n  display: table;\n  table-layout: fixed;\n  user-select: none;\n  -ms-user-select: none;\n  -moz-user-select: none;\n  -webkit-user-select: none;\n  /* IE11: Limit the width of the list to prevent it from growing out of control */ }\n  @media screen and (min-width: 0\\0) {\n    .bolt-list {\n      max-width: 100vw; } }\n\n.bolt-list.bolt-list {\n  border-collapse: separate; }\n\n.bolt-fixed-height-list-row {\n  width: 100%; }\n\n.bolt-list-row {\n  color: inherit;\n  display: table-row;\n  outline: none;\n  text-decoration: none;\n  transition: background 80ms linear; }\n  .bolt-list-row:hover {\n    background-color: rgba(0, 0, 0, .02);\n    background-color: var(--component-grid-row-hover-color,rgba(0, 0, 0, .02)); }\n    .bolt-list-row:hover .bolt-list-cell-content-reveal {\n      visibility: visible; }\n    @media (forced-colors: active) {\n      .bolt-list-row:hover {\n        background: Highlight;\n        forced-color-adjust: none; }\n        .bolt-list-row:hover td {\n          forced-color-adjust: auto; } }\n  .bolt-list-row.focused .bolt-list-cell-content-reveal {\n    visibility: visible; }\n  .bolt-list-row.selected {\n    background-color: rgba(222, 236, 249, 1);\n    background-color: var(--component-grid-selected-row-color,rgba(222, 236, 249, 1));\n    outline: none; }\n    @media (forced-colors: active) {\n      .bolt-list-row.selected {\n        background: Highlight;\n        forced-color-adjust: none; }\n        .bolt-list-row.selected td {\n          forced-color-adjust: auto; } }\n    @media (forced-colors: active) {\n      .bolt-list-row.selected .bolt-button.bolt-focus-treatment:focus,\n      .bolt-list-row.selected .bolt-checkbox.bolt-focus-treatment:focus .bolt-checkmark {\n        border-color: Background; } }\n    .bolt-list-row.selected .bolt-list-cell:first-child {\n      border-left: 2px solid rgba(0, 120, 212, 1);\n      border-left: 2px solid var(--component-grid-focus-border-color,rgba(0, 120, 212, 1)); }\n  .bolt-list-row:hover.selected {\n    background-color: rgba(222, 236, 249, 1);\n    background-color: var(--component-grid-action-selected-cell-hover-color,rgba(222, 236, 249, 1)); }\n    @media (forced-colors: active) {\n      .bolt-list-row:hover.selected {\n        background-color: Highlight; } }\n  .bolt-list-row.single-click-activation {\n    cursor: pointer; }\n\n.bolt-list-row-no-hover:hover {\n  background-color: initial; }\n\n.bolt-list-row-header:hover,\n.bolt-list-row-loading:hover {\n  background-color: initial;\n  cursor: default; }\n\n.bolt-list-cell {\n  border-top: 1px solid transparent;\n  border-bottom: 1px solid transparent;\n  color: inherit;\n  display: table-cell;\n  overflow: hidden;\n  padding: 0;\n  position: relative;\n  text-align: left;\n  text-decoration: none;\n  white-space: nowrap; }\n  .bolt-list-cell:first-child {\n    border-left: 2px solid transparent; }\n  .bolt-list-cell:last-child {\n    border-right: 1px solid transparent; }\n\n.bolt-list-cell-content-reveal {\n  visibility: hidden; }\n\n.bolt-list-cell-spacer {\n  padding: 0; }\n\n.bolt-list-cell-text {\n  overflow: hidden; }\n\n.bolt-focus-visible .bolt-list-row:focus .bolt-list-cell {\n  border-color: rgba(0, 120, 212, 1);\n  border-color: var(--component-grid-focus-border-color,rgba(0, 120, 212, 1)); }\n\n@media (forced-colors: active) {\n  .bolt-focus-visible .bolt-list-row:focus .bolt-list-cell {\n    background-color: highlight; } }\n\n@media (forced-colors: active) {\n  .bolt-focus-visible .bolt-list-row:focus {\n    forced-color-adjust: none;\n    border-color: highlight; } }\n\n@media screen and (-ms-high-contrast: black-on-white) {\n  .bolt-focus-visible .bolt-list-row:focus {\n    outline: 3px double highlight;\n    outline-offset: 1px; } }\n\n@media (forced-colors: active) {\n  .bolt-focus-visible .bolt-list-row:focus {\n    forced-color-adjust: none; }\n    .bolt-focus-visible .bolt-list-row:focus a {\n      forced-color-adjust: auto; }\n    .bolt-focus-visible .bolt-list-row:focus > td > * {\n      forced-color-adjust: auto; } }\n\n.bolt-list-row-marked .bolt-list-cell:first-child {\n  border-left:  2px solid;\n  border-left-color: rgba( 43, 136, 216 ,  1 );\n  border-left-color: rgba( var(--palette-primary-tint-10,43, 136, 216) ,  1 ); }\n\n.bolt-list-overlay-container {\n  width: 100%; }\n\n.bolt-list-overlay {\n  pointer-events: none;\n  width: 100%; }\n\n.bolt-list-drag-source-item {\n  background-color: rgba(255, 255, 255, 0.40);\n  background-color: var(--component-grid-drag-source-color,rgba(255, 255, 255, 0.40)); }\n\n.bolt-drag-image-portal {\n  z-index: 100; }\n\n.bolt-drag-image {\n  background-color: rgba(255, 255, 255, 1);\n  background-color: var(--callout-background-color,rgba(255, 255, 255, 1));\n  height: 40px;\n  width: 320px;\n  padding: 0px 8px; }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/List/ListDropIndicator.css":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".bolt-list-drop-indicator-circle {\n  background-color: rgba( 43, 136, 216 ,  1 );\n  background-color: rgba( var(--palette-primary-tint-10,43, 136, 216) ,  1 );\n  border-radius: 50%;\n  height: 9px;\n  width: 9px; }\n  .bolt-list-drop-indicator-circle.top {\n    top: -4px; }\n  .bolt-list-drop-indicator-circle.bottom {\n    bottom: -4px; }\n\n.bolt-list-drop-indicator-line {\n  background-color: rgba( 199, 224, 244 ,  1 );\n  background-color: rgba( var(--palette-primary-tint-20,199, 224, 244) ,  1 );\n  height: 3px;\n  right: 0px; }\n  .bolt-list-drop-indicator-line.top {\n    top: -1px; }\n  .bolt-list-drop-indicator-line.bottom {\n    bottom: -1px; }\n  .bolt-list-drop-indicator-line.left {\n    height: 100%;\n    width: 3px; }\n  .bolt-list-drop-indicator-line.right {\n    height: 100%;\n    width: 3px; }\n\n.bolt-list-tree-drop-target {\n  border: 1px solid rgba(0, 120, 212, 1);\n  border: 1px solid var(--component-grid-focus-border-color,rgba(0, 120, 212, 1)); }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Menu/Menu.css":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".bolt-contextual-menu {\n  border-radius: 4px;\n  max-width: 320px;\n  overflow-x: hidden;\n  overflow-y: auto; }\n  @media (forced-colors: active) {\n    .bolt-contextual-menu {\n      border: 1px solid; } }\n\n@media screen and (max-width: 600px) {\n  .bolt-contextual-submenu {\n    min-width: 200px; } }\n\n.overflow .bolt-contextual-menu {\n  overflow-y: scroll; }\n\n.bolt-menu {\n  border-collapse: separate;\n  color: rgba(0, 0, 0, .9);\n  color: var(--text-primary-color,rgba(0, 0, 0, .9));\n  display: table;\n  table-layout: auto;\n  font-size: 0.875rem; }\n\n.bolt-menuitem-row {\n  background-color: transparent;\n  border-radius: 3px;\n  color: inherit;\n  display: table-row;\n  outline: none;\n  overflow: hidden;\n  text-decoration: none;\n  white-space: nowrap; }\n  @media (forced-colors: active) {\n    .bolt-menuitem-row {\n      border: 1px solid transparent; } }\n  .bolt-menuitem-row.focused {\n    background-color: transparent;\n    outline: none; }\n    @media (forced-colors: active) {\n      .bolt-menuitem-row.focused {\n        border-color: windowtext; } }\n  .bolt-menuitem-row:hover, .bolt-menuitem-row.expanded {\n    background-color: rgba(0, 0, 0, 0.04);\n    background-color: var(--palette-black-alpha-4,rgba(0, 0, 0, 0.04)); }\n  @media (forced-colors: active) {\n    .bolt-menuitem-row.expanded {\n      border-color: windowtext; }\n    .bolt-menuitem-row:hover {\n      background-color: highlight; } }\n  .bolt-menuitem-row.disabled {\n    color: rgba(0, 0, 0, .38);\n    color: var(--text-disabled-color,rgba(0, 0, 0, .38)); }\n    @media (forced-colors: active) {\n      .bolt-menuitem-row.disabled {\n        color: grayText; } }\n    .bolt-menuitem-row.disabled:hover {\n      background-color: transparent; }\n\n.bolt-focus-visible .bolt-menuitem-row.focused {\n  animation: focus-shadow-pulse-inset 4s ease-in-out infinite;\n  background-color: rgba(0, 0, 0, 0.04);\n  background-color: var(--palette-black-alpha-4,rgba(0, 0, 0, 0.04));\n  outline: none; }\n\na.bolt-menuitem-row:not(.ms-Button),\na.bolt-menuitem-row:not(.ms-Button):visited,\na.bolt-menuitem-row:not(.ms-Button):hover {\n  color: rgba(0, 0, 0, .9);\n  color: var(--text-primary-color,rgba(0, 0, 0, .9));\n  text-decoration: none; }\n  @media (forced-colors: active) {\n    a.bolt-menuitem-row:not(.ms-Button),\n    a.bolt-menuitem-row:not(.ms-Button):visited,\n    a.bolt-menuitem-row:not(.ms-Button):hover {\n      color: windowtext; } }\n\n@media (forced-colors: active) {\n  a.bolt-menuitem-row:not(.ms-Button):hover,\n  a.bolt-menuitem-row:not(.ms-Button):focus {\n    color: highlighttext; } }\n\n@media (forced-colors: active) {\n  a.bolt-menuitem-row .bolt-list-cell {\n    border-color: transparent; } }\n\n@media (forced-colors: active) {\n  a.bolt-menuitem-row:hover .bolt-list-cell {\n    border-color: highlight; } }\n\n@media (forced-colors: active) {\n  .bolt-focus-visible a.bolt-menuitem-row:focus .bolt-list-cell {\n    border-color: highlight; } }\n\n.bolt-menuitem-header {\n  font-weight: 600; }\n\n.bolt-menuitem-divider:hover,\n.bolt-menuitem-header:hover {\n  background-color: transparent; }\n  @media (forced-colors: active) {\n    .bolt-menuitem-divider:hover,\n    .bolt-menuitem-header:hover {\n      border: 1px solid transparent; } }\n\n.bolt-menuitem-cell {\n  padding: 0;\n  vertical-align: middle; }\n  .bolt-menuitem-cell:first-child .bolt-menuitem-cell-content {\n    padding-right: 0px; }\n  .bolt-menuitem-cell:last-child .bolt-menuitem-cell-content {\n    padding-left: 0px; }\n\n.bolt-menuitem-cell-content {\n  justify-content: center;\n  padding: 6px; }\n\n.bolt-menuitem-cell-text {\n  justify-content: flex-start;\n  max-width: 225px;\n  min-width: 180px; }\n\n.bolt-menuitem-cell-secondary {\n  color: rgba(0, 0, 0, .55);\n  color: var(--text-secondary-color,rgba(0, 0, 0, .55)); }\n\n.bolt-menuitem-divider-content {\n  background-color: rgba(0, 0, 0, 0.20);\n  background-color: var(--palette-black-alpha-20,rgba(0, 0, 0, 0.20));\n  height: 1px;\n  margin: 6px 6px;\n  padding: 0px; }\n\n.bolt-menu-spacer {\n  padding: 4px; }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Menu/MenuButton.css":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "/**\r\n * Dropdown button styles\r\n */\n.bolt-dropdown-button {\n  display: inline-flex; }\n\n.bolt-dropdown-button .icon-right {\n  font-size: 0.75rem;\n  padding-left: 10px; }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Panel/Panel.css":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".bolt-panel-callout-content {\n  margin: 16px;\n  border-radius: 6px;\n  overflow: hidden;\n  transition-property: transform, opacity;\n  transition: transform 200ms cubic-bezier(0.165, 0.84, 0.44, 1), opacity 100ms cubic-bezier(0.215, 0.61, 0.355, 1);\n  /* &.in {\r\n        @include in();\r\n    }\r\n\r\n    &.out {\r\n        @include out();\r\n    } */ }\n  @media (forced-colors: active) {\n    .bolt-panel-callout-content {\n      border: solid 1px; } }\n  .bolt-panel-callout-content.bolt-callout-shadow {\n    box-shadow: 0px 25.6px 57.6px rgba(0, 0, 0, .22), 0px 4.8px 14.4px rgba(0, 0, 0, .18);\n    box-shadow: 0px 25.6px 57.6px var(--panel-shadow-color,rgba(0, 0, 0, .22)), 0px 4.8px 14.4px var(--panel-shadow-secondary-color,rgba(0, 0, 0, .18)); }\n  .bolt-panel-callout-content.bolt-panel-fullscreen {\n    margin: 0px;\n    max-height: none;\n    max-width: none;\n    height: auto;\n    width: auto;\n    border-radius: 0px; }\n\n.bolt-panel-description {\n  margin-right: 36px;\n  color: rgba(0, 0, 0, .55);\n  color: var(--text-secondary-color,rgba(0, 0, 0, .55)); }\n\n.bolt-panel-footer {\n  min-height: 64px;\n  overflow: hidden;\n  padding-bottom: 16px;\n  padding-top: 16px; }\n\n.bolt-panel-footer-buttons {\n  justify-content: flex-end;\n  font-size: 0.875rem; }\n\n.bolt-panel-content {\n  position: relative;\n  min-height: 64px; }\n\n.bolt-panel-separator {\n  height: 1px;\n  background-color: rgba( 244, 244, 244 ,  1 );\n  background-color: rgba( var(--palette-neutral-4,244, 244, 244) ,  1 ); }\n\n.bolt-panel-overlay {\n  background-color: rgba(255, 255, 255, 1);\n  background-color: var(--callout-background-color,rgba(255, 255, 255, 1));\n  opacity: 0.7; }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/PillGroup/PillGroup.css":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".bolt-pill-group {\n  overflow: hidden; }\n  .bolt-pill-group.overflow-wrap > .bolt-pill-group-inner {\n    flex-wrap: wrap; }\n    .bolt-pill-group.overflow-wrap > .bolt-pill-group-inner .bolt-pill {\n      margin-bottom: 8px; }\n  .bolt-pill-group.overflow-fade {\n    mask-image: linear-gradient(to left, rgba(0, 0, 0, 0), rgba( 0, 0, 0 ,  1 ) 30px);\n    mask-image: linear-gradient(to left, rgba(0, 0, 0, 0), rgba( var(--palette-neutral-100,0, 0, 0) ,  1 ) 30px);\n    -webkit-mask-image: -webkit-linear-gradient(right, rgba(0, 0, 0, 0), rgba( 0, 0, 0 ,  1 ) 30px);\n    -webkit-mask-image: -webkit-linear-gradient(right, rgba(0, 0, 0, 0), rgba( var(--palette-neutral-100,0, 0, 0) ,  1 ) 30px); }\n\n.bolt-pill-group-inner > :not(:last-child) {\n  margin-right: 8px; }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Pill/Pill.css":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "/* \r\n    We're using absolute height and negative margins in this file\r\n    this is because borders make a lot of this logic weird, and the spec calls for overlap of borders\r\n    between what are logically parent and child elements\r\n    \r\n    eg. in Outlined pills, the button focus circle should exactly overlap the pill's outline\r\n\r\n    Using negative margin means we need to do less padding management of the container based on\r\n    what elements it happens to contain, and elements can just intrude on the left-right padding of the parent\r\n    */\n.bolt-pill {\n  border-radius: 120px;\n  border: 1px solid transparent;\n  white-space: nowrap; }\n  .bolt-pill.clickable {\n    cursor: pointer; }\n  .bolt-pill.count .bolt-pill-content {\n    font-weight: 600; }\n  .bolt-pill .bolt-pill-content {\n    margin: 0px 0.5rem;\n    padding: 2px 0; }\n  .bolt-pill .bolt-pill-icon {\n    margin-left: 0.25rem;\n    margin-right: 0.375rem; }\n  .bolt-pill.compact.has-filled-visual .bolt-pill-content, .bolt-pill.compact.has-icon .bolt-pill-content, .bolt-pill.regular.has-filled-visual .bolt-pill-content, .bolt-pill.regular.has-icon .bolt-pill-content, .bolt-pill.large.has-filled-visual .bolt-pill-content, .bolt-pill.large.has-icon .bolt-pill-content {\n    margin-left: 0; }\n  .bolt-pill.compact.has-remove-button .bolt-pill-content, .bolt-pill.regular.has-remove-button .bolt-pill-content, .bolt-pill.large.has-remove-button .bolt-pill-content {\n    margin-right: 0.375rem; }\n  .bolt-pill.compact {\n    font-size: 0.6875rem; }\n  .bolt-pill.regular {\n    font-size: 0.75rem; }\n    .bolt-pill.regular .bolt-pill-filled-visual {\n      width: 1.25rem; }\n  .bolt-pill.large {\n    font-size: 0.875rem; }\n    .bolt-pill.large .bolt-pill-filled-visual {\n      width: 1.5rem; }\n  .bolt-pill.standard {\n    background-color: rgba(0, 0, 0, 0.06);\n    background-color: var(--palette-black-alpha-6,rgba(0, 0, 0, 0.06)); }\n    .bolt-pill.standard.clickable.hover {\n      background-color: rgba(0, 0, 0, 0.10);\n      background-color: var(--palette-black-alpha-10,rgba(0, 0, 0, 0.10)); }\n  .bolt-pill.outlined {\n    background-color: transparent;\n    border-color: rgba(0, 0, 0, 0.20);\n    border-color: var(--palette-black-alpha-20,rgba(0, 0, 0, 0.20)); }\n    .bolt-pill.outlined.clickable.hover {\n      background-color: rgba(0, 0, 0, 0.06);\n      background-color: var(--palette-black-alpha-6,rgba(0, 0, 0, 0.06)); }\n    .bolt-pill.outlined .bolt-pill-button {\n      border: 1px solid transparent; }\n  .bolt-pill.colored.dark {\n    color: white; }\n  .bolt-pill.colored.light {\n    color: black; }\n\n.bolt-focus-visible .bolt-pill:focus {\n  border-color: rgba(0, 120, 212, 1);\n  border-color: var(--communication-background,rgba(0, 120, 212, 1));\n  animation: ms-focus-shadow-pulse 4s ease-in-out infinite;\n  box-shadow: 0 0 0 3px rgba(0, 120, 212, 0.23);\n  box-shadow: 0 0 0 3px var(--focus-pulse-max-color,rgba(0, 120, 212, 0.23));\n  outline: none; }\n  @media (forced-colors: active) {\n    .bolt-focus-visible .bolt-pill:focus {\n      animation: none; } }\n  @media (forced-colors: active) {\n    .bolt-focus-visible .bolt-pill:focus {\n      forced-color-adjust: none;\n      border-color: highlight; } }\n  @media screen and (-ms-high-contrast: black-on-white) {\n    .bolt-focus-visible .bolt-pill:focus {\n      outline: 1px solid highlight;\n      outline-offset: 1px; } }\n  @media (forced-colors: active) {\n    .bolt-focus-visible .bolt-pill:focus {\n      background: transparent !important;\n      color: windowtext; } }\n\n.bolt-pill-icon {\n  padding: 2px; }\n\n.bolt-pill-filled-visual {\n  overflow: hidden;\n  border-radius: 50%;\n  margin-right: 4px; }\n\nbutton.bolt-pill-button.bolt-button.icon-only {\n  border-radius: 50%;\n  color: inherit;\n  margin-left: auto;\n  padding: 2px; }\n  button.bolt-pill-button.bolt-button.icon-only:hover {\n    background-color: rgba(0, 0, 0, 0.06);\n    background-color: var(--palette-black-alpha-6,rgba(0, 0, 0, 0.06)); }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Portal/Portal.css":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".bolt-portal-host {\n  position: fixed;\n  /* 1 million used because OF used it and the product has built around this number */\n  z-index: 1000000; }\n\n.bolt-portal {\n  overflow: hidden;\n  pointer-events: none;\n  z-index: 10; }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Surface/Surface.css":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".bolt-condensed-horizontal-spacing {\n  padding-left: 16px;\n  padding-right: 16px; }\n\n.bolt-default-horizontal-spacing {\n  padding-left: 20px;\n  padding-right: 20px; }\n\n.bolt-relaxed-horizontal-spacing {\n  padding-left: 32px;\n  padding-right: 32px; }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Tabs/Tabs.css":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "/**\r\n * Generalized focus treatment for components \r\n */\n.focus-treatment:focus {\n  outline: none; }\n\n.bolt-focus-visible .bolt-tab.focus-treatment:focus, .bolt-focus-visible .bolt-tab.focus-treatment.focused {\n  border-radius: 3px;\n  animation: ms-focus-shadow-with-border-pulse 4s ease-in-out infinite;\n  box-shadow: 0 0 0 3px rgba(0, 120, 212, 0.23), 0 0 0 1px rgba(0, 120, 212, 1);\n  box-shadow: 0 0 0 3px var(--focus-pulse-max-color,rgba(0, 120, 212, 0.23)), 0 0 0 1px var(--focus-border-color,rgba(0, 120, 212, 1)); }\n  @media (forced-colors: active) {\n    .bolt-focus-visible .bolt-tab.focus-treatment:focus, .bolt-focus-visible .bolt-tab.focus-treatment.focused {\n      animation: none; } }\n  @media (forced-colors: active) {\n    .bolt-focus-visible .bolt-tab.focus-treatment:focus, .bolt-focus-visible .bolt-tab.focus-treatment.focused {\n      border: 1px solid Highlight;\n      forced-color-adjust: none;\n      color: windowtext; }\n      .bolt-focus-visible .bolt-tab.focus-treatment:focus > *, .bolt-focus-visible .bolt-tab.focus-treatment.focused > * {\n        forced-color-adjust: auto; } }\n\n.bolt-tab {\n  color: inherit; }\n\n.bolt-tabbar .vss-FilterBar {\n  margin-top: 0px;\n  margin-bottom: 0px;\n  margin-left: 8px;\n  height: 32px; }\n  .bolt-tabbar .vss-FilterBar .vss-FilterBar--list {\n    align-items: center; }\n    .bolt-tabbar .vss-FilterBar .vss-FilterBar--list .vss-FilterBar--item.vss-FilterBar--item-keyword-container {\n      margin-right: 0px; }\n    .bolt-tabbar .vss-FilterBar .vss-FilterBar--list .vss-FilterBar--right-items .vss-FilterBar--action {\n      display: none; }\n\n.bolt-tabbar.sticky {\n  position: sticky;\n  background-color: rgba(255, 255, 255, 1);\n  background-color: var(--background-color,rgba(255, 255, 255, 1));\n  z-index: 2;\n  top: 0px; }\n\n.bolt-tabbar-grey.sticky {\n  background-color: rgba( 248, 248, 248 ,  1 );\n  background-color: rgba( var(--palette-neutral-2,248, 248, 248) ,  1 ); }\n\n.bolt-tabbar-on-callout.sticky {\n  background-color: rgba(255, 255, 255, 1);\n  background-color: var(--callout-background-color,rgba(255, 255, 255, 1)); }\n\n@supports (-ms-ime-align: auto) {\n  .bolt-tabbar.sticky.sticky {\n    position: relative; } }\n\n@media screen and (max-width: 600px) {\n  .bolt-tabbar-tabs {\n    overflow-x: auto; } }\n\n.bolt-tabbar-tabs.compact .bolt-tab {\n  height: 2rem;\n  text-decoration: none;\n  cursor: pointer;\n  background-color: transparent;\n  color: rgba(0, 0, 0, .9);\n  color: var(--text-primary-color,rgba(0, 0, 0, .9));\n  display: inline-block;\n  margin-right: 0px;\n  padding: 0 8px;\n  text-align: center;\n  position: relative;\n  border: 0;\n  overflow: visible; }\n  .bolt-tabbar-tabs.compact .bolt-tab .bolt-tab-text {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis; }\n  .bolt-tabbar-tabs.compact .bolt-tab .bolt-tab-inner-container {\n    height: 100%;\n    display: flex;\n    align-items: center; }\n  .bolt-tabbar-tabs.compact .bolt-tab .bolt-tab-badge {\n    margin-left: 4px;\n    max-width: 80px;\n    cursor: pointer; }\n    .bolt-tabbar-tabs.compact .bolt-tab .bolt-tab-badge .bolt-pill-focusable {\n      overflow: hidden; }\n  .bolt-tabbar-tabs.compact .bolt-tab:last-child {\n    margin-right: 0; }\n  @media (forced-colors: active) {\n    .bolt-tabbar-tabs.compact .bolt-tab {\n      border: 1px solid transparent; } }\n  .bolt-tabbar-tabs.compact .bolt-tab:hover {\n    color: inherit; }\n    @media (forced-colors: active) {\n      .bolt-tabbar-tabs.compact .bolt-tab:hover {\n        border-color: Highlight; } }\n  .bolt-tabbar-tabs.compact .bolt-tab .bolt-tab-text::before {\n    content: attr(data-content);\n    display: block;\n    font-weight: normal;\n    height: 0px;\n    visibility: hidden; }\n  .bolt-tabbar-tabs.compact .bolt-tab .bolt-tab-text::after {\n    content: attr(data-content);\n    display: block;\n    font-weight: 600;\n    height: 0px;\n    visibility: hidden; }\n  .bolt-tabbar-tabs.compact .bolt-tab .bolt-tab-icon + .bolt-tab-text {\n    margin-left: 4px; }\n  .bolt-tabbar-tabs.compact .bolt-tab.selected .bolt-tab-inner-container {\n    font-weight: 600;\n    padding-top: 2px;\n    border-bottom: 2px solid rgba(0, 120, 212, 1);\n    border-bottom: 2px solid var(--communication-background,rgba(0, 120, 212, 1)); }\n\n.bolt-tabbar-tabs.tall .bolt-tab {\n  height: 3rem;\n  text-decoration: none;\n  cursor: pointer;\n  background-color: transparent;\n  color: rgba(0, 0, 0, .9);\n  color: var(--text-primary-color,rgba(0, 0, 0, .9));\n  display: inline-block;\n  margin-right: 0px;\n  padding: 0 8px;\n  text-align: center;\n  position: relative;\n  border: 0;\n  overflow: visible; }\n  .bolt-tabbar-tabs.tall .bolt-tab .bolt-tab-text {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis; }\n  .bolt-tabbar-tabs.tall .bolt-tab .bolt-tab-inner-container {\n    height: 100%;\n    display: flex;\n    align-items: center; }\n  .bolt-tabbar-tabs.tall .bolt-tab .bolt-tab-badge {\n    margin-left: 4px;\n    max-width: 80px;\n    cursor: pointer; }\n    .bolt-tabbar-tabs.tall .bolt-tab .bolt-tab-badge .bolt-pill-focusable {\n      overflow: hidden; }\n  .bolt-tabbar-tabs.tall .bolt-tab:last-child {\n    margin-right: 0; }\n  @media (forced-colors: active) {\n    .bolt-tabbar-tabs.tall .bolt-tab {\n      border: 1px solid transparent; } }\n  .bolt-tabbar-tabs.tall .bolt-tab:hover {\n    color: inherit; }\n    @media (forced-colors: active) {\n      .bolt-tabbar-tabs.tall .bolt-tab:hover {\n        border-color: Highlight; } }\n  .bolt-tabbar-tabs.tall .bolt-tab .bolt-tab-text::before {\n    content: attr(data-content);\n    display: block;\n    font-weight: normal;\n    height: 0px;\n    visibility: hidden; }\n  .bolt-tabbar-tabs.tall .bolt-tab .bolt-tab-text::after {\n    content: attr(data-content);\n    display: block;\n    font-weight: 600;\n    height: 0px;\n    visibility: hidden; }\n  .bolt-tabbar-tabs.tall .bolt-tab .bolt-tab-icon + .bolt-tab-text {\n    margin-left: 4px; }\n  .bolt-tabbar-tabs.tall .bolt-tab.selected .bolt-tab-inner-container {\n    font-weight: 600;\n    padding-top: 2px;\n    border-bottom: 2px solid rgba(0, 120, 212, 1);\n    border-bottom: 2px solid var(--communication-background,rgba(0, 120, 212, 1)); }\n\n.bolt-tabbar-tabs.large-link .bolt-tab {\n  height: 2.5rem;\n  text-decoration: none;\n  cursor: pointer;\n  background-color: transparent;\n  color: rgba(0, 0, 0, .9);\n  color: var(--text-primary-color,rgba(0, 0, 0, .9));\n  display: inline-block;\n  margin-right: 0px;\n  padding: 0 8px;\n  text-align: center;\n  position: relative;\n  border: 0;\n  overflow: visible; }\n  .bolt-tabbar-tabs.large-link .bolt-tab .bolt-tab-text {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis; }\n  .bolt-tabbar-tabs.large-link .bolt-tab .bolt-tab-inner-container {\n    height: 100%;\n    display: flex;\n    align-items: center; }\n  .bolt-tabbar-tabs.large-link .bolt-tab .bolt-tab-badge {\n    margin-left: 4px;\n    max-width: 80px;\n    cursor: pointer; }\n    .bolt-tabbar-tabs.large-link .bolt-tab .bolt-tab-badge .bolt-pill-focusable {\n      overflow: hidden; }\n  .bolt-tabbar-tabs.large-link .bolt-tab:last-child {\n    margin-right: 0; }\n  @media (forced-colors: active) {\n    .bolt-tabbar-tabs.large-link .bolt-tab {\n      border: 1px solid transparent; } }\n  .bolt-tabbar-tabs.large-link .bolt-tab:hover {\n    color: inherit; }\n    @media (forced-colors: active) {\n      .bolt-tabbar-tabs.large-link .bolt-tab:hover {\n        border-color: Highlight; } }\n  .bolt-tabbar-tabs.large-link .bolt-tab .bolt-tab-text::before {\n    content: attr(data-content);\n    display: block;\n    font-weight: normal;\n    height: 0px;\n    visibility: hidden; }\n  .bolt-tabbar-tabs.large-link .bolt-tab .bolt-tab-text::after {\n    content: attr(data-content);\n    display: block;\n    font-weight: 600;\n    height: 0px;\n    visibility: hidden; }\n  .bolt-tabbar-tabs.large-link .bolt-tab .bolt-tab-icon + .bolt-tab-text {\n    margin-left: 4px; }\n  .bolt-tabbar-tabs.large-link .bolt-tab.selected .bolt-tab-inner-container {\n    font-weight: 600;\n    padding-top: 2px;\n    border-bottom: 2px solid rgba(0, 120, 212, 1);\n    border-bottom: 2px solid var(--communication-background,rgba(0, 120, 212, 1)); }\n\n.bolt-tablist {\n  border-right: 1px solid rgba(0, 0, 0, 0.20);\n  border-right: 1px solid var(--palette-black-alpha-20,rgba(0, 0, 0, 0.20));\n  overflow: auto; }\n\n.bolt-tablist-tabs .bolt-tab {\n  height: 32px;\n  text-decoration: none;\n  cursor: pointer;\n  background-color: transparent;\n  color: rgba(0, 0, 0, .9);\n  color: var(--text-primary-color,rgba(0, 0, 0, .9));\n  display: inline-block;\n  padding-left: 32px; }\n  .bolt-tablist-tabs .bolt-tab .bolt-tab-text {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis; }\n  .bolt-tablist-tabs .bolt-tab .bolt-tab-inner-container {\n    height: 100%;\n    display: flex;\n    align-items: center; }\n  .bolt-tablist-tabs .bolt-tab .bolt-tab-badge {\n    margin-left: 4px;\n    max-width: 80px;\n    cursor: pointer; }\n    .bolt-tablist-tabs .bolt-tab .bolt-tab-badge .bolt-pill-focusable {\n      overflow: hidden; }\n  .bolt-tablist-tabs .bolt-tab.selected {\n    background-color: rgba( 234, 234, 234 ,  1 );\n    background-color: rgba( var(--palette-neutral-8,234, 234, 234) ,  1 ); }\n    @media (forced-colors: active) {\n      .bolt-tablist-tabs .bolt-tab.selected {\n        background: highlight;\n        forced-color-adjust: none; }\n        .bolt-tablist-tabs .bolt-tab.selected .bolt-tab-text {\n          color: windowtext;\n          background: window; } }\n\n.bolt-tablist-tabs a.bolt-tab {\n  color: inherit; }\n\n.bolt-tablist-heading {\n  align-items: center;\n  height: 32px;\n  margin-top: 16px;\n  padding-left: 32px; }\n\n.bolt-tablist-title {\n  height: 48px;\n  align-items: center;\n  display: flex;\n  padding-left: 32px; }\n\n.bolt-tablist-subtitle {\n  padding-left: 32px; }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/TooltipEx/Tooltip.css":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".bolt-tooltip {\n  max-width: 320px;\n  animation: tooltip-fade-in 300ms ease-in; }\n  .bolt-tooltip .bolt-callout-content {\n    background-color: transparent; }\n\n.bolt-tooltip-content {\n  background-color: rgba( 51, 51, 51 ,  0.95 );\n  background-color: rgba( var(--palette-neutral-80,51, 51, 51) ,  0.95 );\n  border-radius: 2px;\n  color: rgba( 255, 255, 255 ,  1 );\n  color: rgba( var(--palette-neutral-0,255, 255, 255) ,  1 );\n  padding: 8px 12px;\n  text-align: left;\n  /* @NOTE: List break-all first and break-word second, IE11/Firefox dont support break-word, they will fallback to break-all */\n  word-break: break-all;\n  word-break: break-word; }\n\n.bolt-tooltip-fade-out {\n  animation: tooltip-fade-out 300ms ease-in; }\n  .bolt-tooltip-fade-out.bolt-callout {\n    pointer-events: none; }\n\n@keyframes tooltip-fade-in {\n  from {\n    opacity: 0; }\n  to {\n    opacity: 1; } }\n\n@keyframes tooltip-fade-out {\n  from {\n    opacity: 1; }\n  to {\n    opacity: 0; } }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Core/core.css":
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "/**\r\n * User-agent style overrides required for the components to function correctly.\r\n */\n* {\n  box-sizing: inherit; }\n\nbody {\n  box-sizing: border-box; }\n\n/* Layout styles */\n.absolute-fill {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  top: 0; }\n\n.absolute {\n  position: absolute; }\n\n.relative {\n  position: relative; }\n\n.no-events {\n  pointer-events: none; }\n\n.scroll-hidden {\n  overflow: hidden; }\n\n.v-scroll-hidden {\n  overflow-y: hidden; }\n\n.h-scroll-hidden {\n  overflow-x: hidden; }\n\n.scroll-auto {\n  overflow: auto; }\n  @media screen and (max-width: 600px) {\n    .scroll-auto {\n      -webkit-overflow-scrolling: touch; } }\n\n.v-scroll-auto {\n  overflow-y: auto; }\n  @media screen and (max-width: 600px) {\n    .v-scroll-auto {\n      -webkit-overflow-scrolling: touch; } }\n\n.h-scroll-auto {\n  overflow-x: auto; }\n  @media screen and (max-width: 600px) {\n    .h-scroll-auto {\n      -webkit-overflow-scrolling: touch; } }\n\n.full-height {\n  height: 100%; }\n\n.full-size {\n  display: flex;\n  flex-grow: 1;\n  overflow: hidden; }\n\n.full-width {\n  width: 100%; }\n\n/*\r\n * Flex styles - applied to the flexbox (flex container).\r\n */\n.flex-column {\n  display: flex;\n  flex-direction: column; }\n\n.flex-row {\n  display: flex;\n  flex-direction: row; }\n\n.inline-flex-column {\n  display: inline-flex;\n  flex-direction: column; }\n\n.inline-flex-row {\n  display: inline-flex;\n  flex-direction: row; }\n\n.flex-center {\n  align-items: center; }\n\n.flex-end {\n  align-items: flex-end; }\n\n.flex-start {\n  align-items: flex-start; }\n\n.flex-stretch {\n  align-items: stretch; }\n\n.flex-baseline {\n  align-items: baseline; }\n\n.justify-start {\n  justify-content: flex-start; }\n\n.justify-center {\n  justify-content: center; }\n\n.justify-end {\n  justify-content: flex-end; }\n\n.justify-space-between {\n  justify-content: space-between; }\n\n.flex-wrap {\n  flex-wrap: wrap; }\n\n/*\r\n * Flex styles - appled to the flex-items (flexbox children).\r\n */\n.flex-grow {\n  flex-grow: 1; }\n\n.flex-noshrink {\n  flex-shrink: 0; }\n\n.flex-self-center {\n  align-self: center; }\n\n.flex-self-end {\n  align-self: flex-end; }\n\n.flex-self-start {\n  align-self: flex-start; }\n\n.flex-self-stretch {\n  align-self: stretch; }\n\n/*\r\n * FlexBox semantic styles.\r\n */\n.flex-cell {\n  align-items: center;\n  align-self: stretch;\n  display: flex;\n  flex-direction: row;\n  margin: 0;\n  padding: 0;\n  position: relative; }\n\n/* Typography styles */\n.title-l {\n  font-size: 1.75rem;\n  font-weight: bold;\n  letter-spacing: -0.04em; }\n\n.title-m {\n  font-size: 1.3125rem;\n  font-weight: 600;\n  letter-spacing: -0.02em; }\n\n.title-s {\n  font-size: 1.0625rem;\n  font-weight: 600; }\n\n.title-xs {\n  font-size: 0.9375rem;\n  font-weight: 600; }\n\n.body-xl {\n  font-size: 1.0625rem; }\n\n.body-l {\n  font-size: 0.9375rem; }\n\n.body-m {\n  font-size: 0.875rem; }\n\n.body-s {\n  font-size: 0.75rem; }\n\n.body-xs {\n  font-size: 0.6875rem; }\n\n.monospaced-m {\n  font-family: Menlo, Consolas, Courier New, monospace;\n  font-size: 0.8125rem; }\n\n.monospaced-s {\n  font-family: Menlo, Consolas, Courier New, monospace;\n  font-size: 0.75rem; }\n\n.monospaced-xs {\n  font-family: Menlo, Consolas, Courier New, monospace;\n  font-size: 0.6875rem; }\n\n/* Font size styles - these can be used to override typography styles */\n.font-size-xxs {\n  font-size: 0.5625rem; }\n\n.font-size-xs {\n  font-size: 0.625rem; }\n\n.font-size-s {\n  font-size: 0.6875rem; }\n\n.font-size {\n  font-size: 0.75rem; }\n\n.font-size-ms {\n  font-size: 0.8125rem; }\n\n.font-size-m {\n  font-size: 0.875rem; }\n\n.font-size-mm {\n  font-size: 0.9375rem; }\n\n.font-size-ml {\n  font-size: 1rem; }\n\n.font-size-l {\n  font-size: 1.125rem; }\n\n.font-size-ll {\n  font-size: 1.5rem; }\n\n.font-size-lll {\n  font-size: 1.75rem; }\n\n.font-size-xl {\n  font-size: 2.25rem; }\n\n.font-size-xxl {\n  font-size: 2.5rem; }\n\n.font-size-xxxl {\n  font-size: 3.5rem; }\n\n.font-size-xxxxl {\n  font-size: 4.5rem; }\n\n/* Font weight styles - these can be used to override typography styles */\n.font-weight-light {\n  font-weight: 200; }\n\n.font-weight-normal {\n  font-weight: normal; }\n\n.font-weight-semibold {\n  font-weight: 600; }\n\n.font-weight-heavy {\n  font-weight: bold; }\n\n.secondary-text {\n  color: rgba(0, 0, 0, .55);\n  color: var(--text-secondary-color,rgba(0, 0, 0, .55)); }\n  @media (forced-colors: active) {\n    .secondary-text {\n      color: graytext; } }\n\n.monospaced-text {\n  font-family: Menlo, Consolas, Courier New, monospace; }\n\n.error-text {\n  color: rgba(218, 10, 0, 1);\n  color: var(--status-error-text,rgba(218, 10, 0, 1)); }\n\n.error-text-important {\n  color: rgba(218, 10, 0, 1) !important;\n  color: var(--status-error-text,rgba(218, 10, 0, 1)) !important; }\n\n/* Theme-related styles */\n.themed {\n  background-color: rgba(255, 255, 255, 1);\n  background-color: var(--background-color,rgba(255, 255, 255, 1));\n  color: rgba(0, 0, 0, .9);\n  color: var(--text-primary-color,rgba(0, 0, 0, .9)); }\n\n.v-align-middle {\n  vertical-align: middle; }\n\n/* Depth styles */\n.depth-0 {\n  box-shadow: 0 0 0 0 transparent; }\n\n.depth-4 {\n  box-shadow: 0 1.6px 3.6px 0 rgba(0, 0, 0, .132), 0 0.3px 0.9px 0 rgba(0, 0, 0, .108);\n  box-shadow: 0 1.6px 3.6px 0 var(--callout-shadow-color,rgba(0, 0, 0, .132)), 0 0.3px 0.9px 0 var(--callout-shadow-secondary-color,rgba(0, 0, 0, .108)); }\n\n.depth-8 {\n  box-shadow: 0 3.2px 7.2px 0 rgba(0, 0, 0, .132), 0 0.6px 1.8px 0 rgba(0, 0, 0, .108);\n  box-shadow: 0 3.2px 7.2px 0 var(--callout-shadow-color,rgba(0, 0, 0, .132)), 0 0.6px 1.8px 0 var(--callout-shadow-secondary-color,rgba(0, 0, 0, .108)); }\n\n.depth-16 {\n  box-shadow: 0 6.4px 14.4px 0 rgba(0, 0, 0, .132), 0 1.2px 3.6px 0 rgba(0, 0, 0, .108);\n  box-shadow: 0 6.4px 14.4px 0 var(--callout-shadow-color,rgba(0, 0, 0, .132)), 0 1.2px 3.6px 0 var(--callout-shadow-secondary-color,rgba(0, 0, 0, .108)); }\n\n.depth-64 {\n  box-shadow: 0 25.6px 57.6px 0 rgba(0, 0, 0, .132), 0 4.8px 14.4px 0 rgba(0, 0, 0, .108);\n  box-shadow: 0 25.6px 57.6px 0 var(--callout-shadow-color,rgba(0, 0, 0, .132)), 0 4.8px 14.4px 0 var(--callout-shadow-secondary-color,rgba(0, 0, 0, .108)); }\n\n/* Sub layer styles */\n.sub-layer {\n  z-index: 10; }\n\n/* General cursor styles */\n.cursor-default {\n  cursor: default; }\n\n.cursor-pointer {\n  cursor: pointer; }\n\n/* General text styles */\n.text-ellipsis {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap; }\n\n.text-left {\n  text-align: left; }\n\n.text-center {\n  text-align: center; }\n\n.text-right {\n  text-align: right; }\n\n.white-space-nowrap {\n  white-space: nowrap; }\n\n.word-break {\n  word-break: break-all;\n  word-break: break-word; }\n\n.selectable-text {\n  user-select: text;\n  cursor: text; }\n\n/* General link styles */\n.link-icon {\n  padding: 2px 2px; }\n\n.link-text {\n  padding: 0 2px; }\n\n.no-outline {\n  outline: none; }\n\n/* General icon styles */\n.icon-margin {\n  margin-right: 6px; }\n\n.icon-large-margin {\n  margin-right: 12px; }\n\n.contributed-icon-image {\n  background-size: contain; }\n  .contributed-icon-image.non-themed {\n    filter: none;\n    filter: var(--third-party-icon-filter,none); }\n\n/*\r\n    Padding / Margin styles\r\n\r\n    The no/-0 styles have !important because they are intended to remove padding / Margin.\r\n    They shouldn't be added as the default case, only when trying to reset the padding / Margin\r\n    that a different selector with a single level of selectivity has added.\r\n*/\n.shadow-padding {\n  margin: -4px;\n  padding: 4px; }\n\n.margin-0,\n.no-margin {\n  margin: 0px !important; }\n\n.margin-4 {\n  margin: 4px; }\n\n.margin-8 {\n  margin: 8px; }\n\n.margin-16 {\n  margin: 16px; }\n\n.margin-bottom-4 {\n  margin-bottom: 4px; }\n\n.margin-bottom-8 {\n  margin-bottom: 8px; }\n\n.margin-bottom-16 {\n  margin-bottom: 16px; }\n\n.margin-horizontal-0,\n.no-h-margin {\n  margin-left: 0px !important;\n  margin-right: 0px !important; }\n\n.margin-horizontal-4 {\n  margin-left: 4px;\n  margin-right: 4px; }\n\n.margin-horizontal-8 {\n  margin-left: 8px;\n  margin-right: 8px; }\n\n.margin-horizontal-16 {\n  margin-left: 16px;\n  margin-right: 16px; }\n\n.margin-horizontal-20 {\n  margin-left: 20px;\n  margin-right: 20px; }\n\n.margin-left-4 {\n  margin-left: 4px; }\n\n.margin-left-8 {\n  margin-left: 8px; }\n\n.margin-left-16 {\n  margin-left: 16px; }\n\n.margin-right-4 {\n  margin-right: 4px; }\n\n.margin-right-8 {\n  margin-right: 8px; }\n\n.margin-right-16 {\n  margin-right: 16px; }\n\n.margin-top-4 {\n  margin-top: 4px; }\n\n.margin-top-8 {\n  margin-top: 8px; }\n\n.margin-top-16 {\n  margin-top: 16px; }\n\n.margin-vertical-0,\n.no-v-margin {\n  margin-bottom: 0px !important;\n  margin-top: 0px !important; }\n\n.margin-vertical-4 {\n  margin-bottom: 4px;\n  margin-top: 4px; }\n\n.margin-vertical-8 {\n  margin-bottom: 8px;\n  margin-top: 8px; }\n\n.margin-vertical-16 {\n  margin-bottom: 16px;\n  margin-top: 16px; }\n\n.margin-vertical-20 {\n  margin-bottom: 20px;\n  margin-top: 20px; }\n\n.padding-0,\n.no-padding {\n  padding: 0px !important; }\n\n.padding-4 {\n  padding: 4px; }\n\n.padding-8 {\n  padding: 8px; }\n\n.padding-16 {\n  padding: 16px; }\n\n.padding-bottom-0,\n.no-bottom-padding {\n  padding-bottom: 0px !important; }\n\n.padding-bottom-4 {\n  padding-bottom: 4px; }\n\n.padding-bottom-8 {\n  padding-bottom: 8px; }\n\n.padding-bottom-16 {\n  padding-bottom: 16px; }\n\n.padding-horizontal-0,\n.no-h-padding {\n  padding-left: 0px !important;\n  padding-right: 0px !important; }\n\n.padding-horizontal-4 {\n  padding-left: 4px;\n  padding-right: 4px; }\n\n.padding-horizontal-8 {\n  padding-left: 8px;\n  padding-right: 8px; }\n\n.padding-horizontal-16 {\n  padding-left: 16px;\n  padding-right: 16px; }\n\n.padding-horizontal-20 {\n  padding-left: 20px;\n  padding-right: 20px; }\n\n.padding-left-4 {\n  padding-left: 4px; }\n\n.padding-left-8 {\n  padding-left: 8px; }\n\n.padding-left-16 {\n  padding-left: 16px; }\n\n.padding-right-4 {\n  padding-right: 4px; }\n\n.padding-right-8 {\n  padding-right: 8px; }\n\n.padding-right-16 {\n  padding-right: 16px; }\n\n.padding-top-0,\n.no-top-padding {\n  padding-top: 0px !important; }\n\n.padding-top-4 {\n  padding-top: 4px; }\n\n.padding-top-8 {\n  padding-top: 8px; }\n\n.padding-top-16 {\n  padding-top: 16px; }\n\n.padding-vertical-0,\n.no-v-padding {\n  padding-bottom: 0px !important;\n  padding-top: 0px !important; }\n\n.padding-vertical-4 {\n  padding-bottom: 4px;\n  padding-top: 4px; }\n\n.padding-vertical-8 {\n  padding-bottom: 8px;\n  padding-top: 8px; }\n\n.padding-vertical-16 {\n  padding-bottom: 16px;\n  padding-top: 16px; }\n\n.padding-vertical-20 {\n  padding-bottom: 20px;\n  padding-top: 20px; }\n\n/* Rhythm styles */\n.rhythm-horizontal-4 > :not(:first-child) {\n  margin-left: 4px; }\n\n.rhythm-horizontal-8 > :not(:first-child) {\n  margin-left: 8px; }\n\n.rhythm-horizontal-16 > :not(:first-child) {\n  margin-left: 16px; }\n\n.rhythm-vertical-4 > :not(:first-child) {\n  margin-top: 4px; }\n\n.rhythm-vertical-8 > :not(:first-child) {\n  margin-top: 8px; }\n\n.rhythm-vertical-16 > :not(:first-child) {\n  margin-top: 16px; }\n\n.rhythm-vertical-20 > :not(:first-child) {\n  margin-top: 20px; }\n\n.rhythm-vertical-24 > :not(:first-child) {\n  margin-top: 24px; }\n\n.rhythm-vertical-32 > :not(:first-child) {\n  margin-top: 32px; }\n\n/*\r\n    Visibility styles\r\n    NOTE - leave at the end of the file so they will override the general layout styles above.\r\n*/\n.visually-hidden {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px; }\n\n.hidden {\n  display: none; }\n\n.invisible {\n  visibility: hidden; }\n\n.rotate-180 {\n  transform: rotate(180deg); }\n\n.separator-line-top {\n  border-top:  1px solid;\n  border-top-color: rgba( 234, 234, 234 ,  1 );\n  border-top-color: rgba( var(--palette-neutral-8,234, 234, 234) ,  1 ); }\n\n.separator-line-bottom {\n  border-bottom:  1px solid;\n  border-bottom-color: rgba( 234, 234, 234 ,  1 );\n  border-bottom-color: rgba( var(--palette-neutral-8,234, 234, 234) ,  1 ); }\n\n.subtle-border {\n  border:  1px solid;\n  border-color: rgba( 234, 234, 234 ,  1 );\n  border-color: rgba( var(--palette-neutral-8,234, 234, 234) ,  1 ); }\n\n/*\r\n    Custom styles for shimmer effects on elements.\r\n*/\n.shimmer {\n  animation-duration: 4s;\n  animation-timing-function: ease-in-out;\n  animation-direction: normal;\n  animation-iteration-count: infinite;\n  background: linear-gradient(to right, rgba( 244, 244, 244 ,  1 ) 0%, rgba( 234, 234, 234 ,  1 ) 50%, rgba( 244, 244, 244 ,  1 ) 100%) 0px 0px/90% 100% no-repeat rgba( 244, 244, 244 ,  1 );\n  background: linear-gradient(to right, rgba( var(--palette-neutral-4,244, 244, 244) ,  1 ) 0%, rgba( var(--palette-neutral-8,234, 234, 234) ,  1 ) 50%, rgba( var(--palette-neutral-4,244, 244, 244) ,  1 ) 100%) 0px 0px/90% 100% no-repeat rgba( var(--palette-neutral-4,244, 244, 244) ,  1 );\n  transition: opacity 200ms ease 0s; }\n\n@keyframes shimmer-wide {\n  0% {\n    background-position: -500px; }\n  100% {\n    background-position: 500px; } }\n\n@keyframes shimmer-thin {\n  0% {\n    background-position: -200px; }\n  100% {\n    background-position: 200px; } }\n\n.shimmer-line {\n  animation-name: shimmer-wide;\n  border-radius: 0.5em; }\n\n.shimmer-circle-small {\n  animation-name: shimmer-thin;\n  border-radius: 50%;\n  height: 1.3em;\n  margin-right: 4px;\n  width: 1.3em; }\n\n.shimmer-circle-large {\n  animation-name: shimmer-thin;\n  border-radius: 50%;\n  height: 2.3em;\n  margin-right: 4px;\n  width: 2.3em; }\n\n/*\r\n    Custom scrollbar support (only on Chrome)\r\n*/\n.custom-scrollbar {\n  scrollbar-color: rgba(0, 0, 0, 0.20) transparent;\n  scrollbar-color: var(--palette-black-alpha-20,rgba(0, 0, 0, 0.20)) transparent;\n  scrollbar-width: thin; }\n  .custom-scrollbar.scroll-auto-hide {\n    scrollbar-color: transparent transparent; }\n    .custom-scrollbar.scroll-auto-hide:hover {\n      scrollbar-color: rgba(0, 0, 0, 0.20) transparent;\n      scrollbar-color: var(--palette-black-alpha-20,rgba(0, 0, 0, 0.20)) transparent; }\n\n.custom-scrollbar::-webkit-scrollbar {\n  width: 18px;\n  height: 18px; }\n\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  border: 6px solid transparent;\n  background: rgba(0, 0, 0, 0.20);\n  background: var(--palette-black-alpha-20,rgba(0, 0, 0, 0.20));\n  border-radius: 10px;\n  background-clip: padding-box; }\n\n.custom-scrollbar::-webkit-scrollbar-corner {\n  background: transparent; }\n\n.custom-scrollbar::-webkit-scrollbar-thumb:vertical {\n  min-height: 30px; }\n\n.custom-scrollbar::-webkit-scrollbar-thumb:horizontal {\n  min-width: 30px; }\n\n.custom-scrollbar.scroll-auto-hide::-webkit-scrollbar-thumb {\n  background: transparent;\n  background-clip: padding-box; }\n\n.custom-scrollbar.scroll-auto-hide:hover::-webkit-scrollbar-thumb {\n  background: rgba(0, 0, 0, 0.20);\n  background: var(--palette-black-alpha-20,rgba(0, 0, 0, 0.20));\n  background-clip: padding-box; }\n\n.custom-scrollbar::-webkit-scrollbar-thumb:hover {\n  background: rgba(0, 0, 0, 0.30);\n  background: var(--palette-black-alpha-30,rgba(0, 0, 0, 0.30));\n  background-clip: padding-box;\n  border: 4px solid transparent; }\n\n.custom-scrollbar-hidden {\n  -ms-overflow-style: none;\n  scrollbar-width: none; }\n\n.custom-scrollbar-hidden::-webkit-scrollbar {\n  width: 0; }\n\n.grayscale {\n  filter: grayscale(100%); }\n\n.screen-reader-only {\n  user-select: none;\n  position: absolute;\n  height: 1px;\n  width: 1px;\n  clip: rect(1px, 1px, 1px, 1px);\n  clip-path: inset(50%);\n  -webkit-clip-path: inset(50%);\n  overflow: hidden !important;\n  white-space: nowrap;\n  padding: 0 !important;\n  margin: 0 !important; }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/***/ ((module) => {

"use strict";


var stylesInDOM = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };

    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);

  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }

      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };

  return updater;
}

module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();

        stylesInDOM.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/***/ ((module) => {

"use strict";


var memo = {};
/* istanbul ignore next  */

function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }

    memo[target] = styleTarget;
  }

  return memo[target];
}
/* istanbul ignore next  */


function insertBySelector(insert, style) {
  var target = getTarget(insert);

  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }

  target.appendChild(style);
}

module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}

module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;

  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}

module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";

  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }

  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }

  var needLayer = typeof obj.layer !== "undefined";

  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }

  css += obj.css;

  if (needLayer) {
    css += "}";
  }

  if (obj.media) {
    css += "}";
  }

  if (obj.supports) {
    css += "}";
  }

  var sourceMap = obj.sourceMap;

  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  options.styleTagTransform(css, styleElement, options.options);
}

function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }

  styleElement.parentNode.removeChild(styleElement);
}
/* istanbul ignore next  */


function domAPI(options) {
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}

module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }

    styleElement.appendChild(document.createTextNode(css));
  }
}

module.exports = styleTagTransform;

/***/ }),

/***/ "./node_modules/azure-devops-ui/Components/Icon/fonts/AzDevMDL2.woff":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "acb0b44d710a15f95219.woff";

/***/ }),

/***/ "./node_modules/ajv/lib/refs/data.json":
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","$id":"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#","description":"Meta-schema for $data reference (JSON Schema extension proposal)","type":"object","required":["$data"],"properties":{"$data":{"type":"string","anyOf":[{"format":"relative-json-pointer"},{"format":"json-pointer"}]}},"additionalProperties":false}');

/***/ }),

/***/ "./node_modules/ajv/lib/refs/json-schema-draft-07.json":
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","$id":"http://json-schema.org/draft-07/schema#","title":"Core schema meta-schema","definitions":{"schemaArray":{"type":"array","minItems":1,"items":{"$ref":"#"}},"nonNegativeInteger":{"type":"integer","minimum":0},"nonNegativeIntegerDefault0":{"allOf":[{"$ref":"#/definitions/nonNegativeInteger"},{"default":0}]},"simpleTypes":{"enum":["array","boolean","integer","null","number","object","string"]},"stringArray":{"type":"array","items":{"type":"string"},"uniqueItems":true,"default":[]}},"type":["object","boolean"],"properties":{"$id":{"type":"string","format":"uri-reference"},"$schema":{"type":"string","format":"uri"},"$ref":{"type":"string","format":"uri-reference"},"$comment":{"type":"string"},"title":{"type":"string"},"description":{"type":"string"},"default":true,"readOnly":{"type":"boolean","default":false},"examples":{"type":"array","items":true},"multipleOf":{"type":"number","exclusiveMinimum":0},"maximum":{"type":"number"},"exclusiveMaximum":{"type":"number"},"minimum":{"type":"number"},"exclusiveMinimum":{"type":"number"},"maxLength":{"$ref":"#/definitions/nonNegativeInteger"},"minLength":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"pattern":{"type":"string","format":"regex"},"additionalItems":{"$ref":"#"},"items":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/schemaArray"}],"default":true},"maxItems":{"$ref":"#/definitions/nonNegativeInteger"},"minItems":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"uniqueItems":{"type":"boolean","default":false},"contains":{"$ref":"#"},"maxProperties":{"$ref":"#/definitions/nonNegativeInteger"},"minProperties":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"required":{"$ref":"#/definitions/stringArray"},"additionalProperties":{"$ref":"#"},"definitions":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"properties":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"patternProperties":{"type":"object","additionalProperties":{"$ref":"#"},"propertyNames":{"format":"regex"},"default":{}},"dependencies":{"type":"object","additionalProperties":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/stringArray"}]}},"propertyNames":{"$ref":"#"},"const":true,"enum":{"type":"array","items":true,"minItems":1,"uniqueItems":true},"type":{"anyOf":[{"$ref":"#/definitions/simpleTypes"},{"type":"array","items":{"$ref":"#/definitions/simpleTypes"},"minItems":1,"uniqueItems":true}]},"format":{"type":"string"},"contentMediaType":{"type":"string"},"contentEncoding":{"type":"string"},"if":{"$ref":"#"},"then":{"$ref":"#"},"else":{"$ref":"#"},"allOf":{"$ref":"#/definitions/schemaArray"},"anyOf":{"$ref":"#/definitions/schemaArray"},"oneOf":{"$ref":"#/definitions/schemaArray"},"not":{"$ref":"#"}},"default":true}');

/***/ }),

/***/ "../shared/node_modules/ajv/dist/refs/data.json":
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"$id":"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#","description":"Meta-schema for $data reference (JSON AnySchema extension proposal)","type":"object","required":["$data"],"properties":{"$data":{"type":"string","anyOf":[{"format":"relative-json-pointer"},{"format":"json-pointer"}]}},"additionalProperties":false}');

/***/ }),

/***/ "../shared/node_modules/ajv/dist/refs/json-schema-draft-07.json":
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","$id":"http://json-schema.org/draft-07/schema#","title":"Core schema meta-schema","definitions":{"schemaArray":{"type":"array","minItems":1,"items":{"$ref":"#"}},"nonNegativeInteger":{"type":"integer","minimum":0},"nonNegativeIntegerDefault0":{"allOf":[{"$ref":"#/definitions/nonNegativeInteger"},{"default":0}]},"simpleTypes":{"enum":["array","boolean","integer","null","number","object","string"]},"stringArray":{"type":"array","items":{"type":"string"},"uniqueItems":true,"default":[]}},"type":["object","boolean"],"properties":{"$id":{"type":"string","format":"uri-reference"},"$schema":{"type":"string","format":"uri"},"$ref":{"type":"string","format":"uri-reference"},"$comment":{"type":"string"},"title":{"type":"string"},"description":{"type":"string"},"default":true,"readOnly":{"type":"boolean","default":false},"examples":{"type":"array","items":true},"multipleOf":{"type":"number","exclusiveMinimum":0},"maximum":{"type":"number"},"exclusiveMaximum":{"type":"number"},"minimum":{"type":"number"},"exclusiveMinimum":{"type":"number"},"maxLength":{"$ref":"#/definitions/nonNegativeInteger"},"minLength":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"pattern":{"type":"string","format":"regex"},"additionalItems":{"$ref":"#"},"items":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/schemaArray"}],"default":true},"maxItems":{"$ref":"#/definitions/nonNegativeInteger"},"minItems":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"uniqueItems":{"type":"boolean","default":false},"contains":{"$ref":"#"},"maxProperties":{"$ref":"#/definitions/nonNegativeInteger"},"minProperties":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"required":{"$ref":"#/definitions/stringArray"},"additionalProperties":{"$ref":"#"},"definitions":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"properties":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"patternProperties":{"type":"object","additionalProperties":{"$ref":"#"},"propertyNames":{"format":"regex"},"default":{}},"dependencies":{"type":"object","additionalProperties":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/stringArray"}]}},"propertyNames":{"$ref":"#"},"const":true,"enum":{"type":"array","items":true,"minItems":1,"uniqueItems":true},"type":{"anyOf":[{"$ref":"#/definitions/simpleTypes"},{"type":"array","items":{"$ref":"#/definitions/simpleTypes"},"minItems":1,"uniqueItems":true}]},"format":{"type":"string"},"contentMediaType":{"type":"string"},"contentEncoding":{"type":"string"},"if":{"$ref":"#"},"then":{"$ref":"#"},"else":{"$ref":"#"},"allOf":{"$ref":"#/definitions/schemaArray"},"anyOf":{"$ref":"#/definitions/schemaArray"},"oneOf":{"$ref":"#/definitions/schemaArray"},"not":{"$ref":"#"}},"default":true}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			179: 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";

// EXTERNAL MODULE: ./node_modules/front-matter/index.js
var front_matter = __webpack_require__("./node_modules/front-matter/index.js");
var front_matter_default = /*#__PURE__*/__webpack_require__.n(front_matter);
// EXTERNAL MODULE: ../shared/dist/index.js
var dist = __webpack_require__("../shared/dist/index.js");
;// CONCATENATED MODULE: ./src/utils.ts
/*
import axios, { AxiosRequestConfig, AxiosResponse } from "axios";
import adapter from "axios-userscript-adapter";

export function get<T = any, R = AxiosResponse<T>>(
  url: string,
  config?: Exclude<Partial<AxiosRequestConfig>, "adapter">
): Promise<R> {
  return axios.get(url, {
    adapter,
    ...config,
  });
}

export function post<T = any, R = AxiosResponse<T>>(
  url: string,
  data?: any,
  config?: Exclude<Partial<AxiosRequestConfig>, "adapter">
): Promise<R> {
  return axios.post(url, data, {
    adapter,
    ...config,
  });
}
*/
function parseQueryString(search) {
  return (search || "").replace(/^\?/g, "").split("&").reduce((acc, query) => {
    const [key, value] = query.split("=");

    if (key) {
      acc[key] = decodeURIComponent(value);
    }

    return acc;
  }, {});
}
function pagePathFromLocation() {
  const qs = parseQueryString(window.location.search);
  const path = qs["pagePath"];

  if (path) {
    return path; //return path.replace(/ /g, "-"); // DevOps Wiki pages have "-" for spaces
  }
}
;// CONCATENATED MODULE: ./src/WikiEditorListener.ts
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



class WikiEditorInfo {
  static async create(getCompetenceFrameworkSettings, getCompetenceTeamSettings) {
    // get some additional information about the editor
    const info = new WikiEditorInfo();
    info.filepath = pagePathFromLocation();
    info.subjectInfo = (0,dist.markdownPathToSubject)(info.filepath);
    info.settings = await getCompetenceFrameworkSettings();
    info.ctSettings = await getCompetenceTeamSettings(info.subjectInfo.competenceteam ?? "");
    info.schemaInfo = (0,dist.getSchemaInfo)(info.subjectInfo, info.settings, info.ctSettings);
    return info;
  }

}
class WikiEditorObserver {
  /**
   * Create a new instance for the current page that
   * listens for changes in the wiki editor
   */
  constructor(getCompetenceFrameworkSettings, getCompetenceTeamSettings) {
    _defineProperty(this, "$listeners", []);

    this.$getCompetenceFrameworkSettings = getCompetenceFrameworkSettings;
    this.$getCompetenceTeamSettings = getCompetenceTeamSettings;
    this.activate();
  }
  /**
   * Activate the timer interval to check for new textareas
   */


  activate() {
    if (this.$timer) {
      window.clearInterval(this.$timer);
    }

    this.$timer = window.setInterval(() => this.checkWikiEditor(), 1000);
  }
  /**
   * Deactivate the timer )if any is running)
   */


  deactivate() {
    if (this.$timer) {
      window.clearInterval(this.$timer);
      this.$timer = undefined;
    }
  }
  /**
   * Method that is rtegularly executed by the timer - this is only used
   * to identify new textareas in the wiki
   */


  async checkWikiEditor() {
    // try to find the wiki editor that has not been processed
    const editor = document.querySelector(".wiki-editor:not(.ctf-hydrated)");

    if (editor !== null) {
      // mark editor as handled
      editor.classList.add("ctf-hydrated"); // get some additional information about the editor

      const editorInfo = await WikiEditorInfo.create(this.$getCompetenceFrameworkSettings, this.$getCompetenceTeamSettings); // inform all listeners that a new editor has been found

      this.$listeners.forEach(async l => {
        await l.handleNewWikiEditor(editor, editorInfo);
      });
    }
  }

  addListener(listener) {
    this.$listeners.push(listener);
  }

}
// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__("./node_modules/react/index.js");
// EXTERNAL MODULE: ./node_modules/react-dom/index.js
var react_dom = __webpack_require__("./node_modules/react-dom/index.js");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/node_modules/tslib/tslib.es6.js
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */
var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var tslib_es6_assign = function () {
  tslib_es6_assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return tslib_es6_assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}
function __exportStar(m, exports) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
  var m = typeof Symbol === "function" && o[Symbol.iterator],
      i = 0;
  if (m) return m.call(o);
  return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

  return ar;
}
function tslib_es6_spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
}
;
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
      i,
      q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;

  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }

  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }

  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }

  function fulfill(value) {
    resume("next", value);
  }

  function reject(value) {
    resume("throw", value);
  }

  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;

  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
      i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);

  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }

  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }

  return cooked;
}
;
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result.default = mod;
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    default: mod
  };
}
// EXTERNAL MODULE: ./node_modules/es6-promise/auto.js
var auto = __webpack_require__("./node_modules/es6-promise/auto.js");
// EXTERNAL MODULE: ./node_modules/es6-object-assign/auto.js
var es6_object_assign_auto = __webpack_require__("./node_modules/es6-object-assign/auto.js");
// EXTERNAL MODULE: ./node_modules/es6-string-polyfills/polyfill.min.js
var polyfill_min = __webpack_require__("./node_modules/es6-string-polyfills/polyfill.min.js");
// EXTERNAL MODULE: ./node_modules/intersection-observer/intersection-observer.js
var intersection_observer = __webpack_require__("./node_modules/intersection-observer/intersection-observer.js");
// EXTERNAL MODULE: ./node_modules/azure-devops-ui/Core/find.js
var find = __webpack_require__("./node_modules/azure-devops-ui/Core/find.js");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/CommonImports.js






if (!Element.prototype.matches) {
  Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
}

var global = window;

if (typeof global.false === "undefined") {
  global.false = false;
} // Polyfill MAX_SAFE_INTEGER and MIN_SAFE_INTEGER


if (!Number.MAX_SAFE_INTEGER) {
  Number.MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;
}

if (!Number.MIN_SAFE_INTEGER) {
  Number.MIN_SAFE_INTEGER = -(Math.pow(2, 53) - 1);
}
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js
var injectStylesIntoStyleTag = __webpack_require__("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
var injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js
var styleDomAPI = __webpack_require__("./node_modules/style-loader/dist/runtime/styleDomAPI.js");
var styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js
var insertBySelector = __webpack_require__("./node_modules/style-loader/dist/runtime/insertBySelector.js");
var insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js
var setAttributesWithoutAttributes = __webpack_require__("./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
var setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js
var insertStyleElement = __webpack_require__("./node_modules/style-loader/dist/runtime/insertStyleElement.js");
var insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js
var styleTagTransform = __webpack_require__("./node_modules/style-loader/dist/runtime/styleTagTransform.js");
var styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Core/core.css
var core = __webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Core/core.css");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Core/core.css

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (styleTagTransform_default());
options.setAttributes = (setAttributesWithoutAttributes_default());

      options.insert = insertBySelector_default().bind(null, "head");
    
options.domAPI = (styleDomAPI_default());
options.insertStyleElement = (insertStyleElement_default());

var update = injectStylesIntoStyleTag_default()(core/* default */.Z, options);




       /* harmony default export */ const Core_core = (core/* default */.Z && core/* default.locals */.Z.locals ? core/* default.locals */.Z.locals : undefined);

// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Button/Button.css
var Button_Button = __webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Button/Button.css");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Button/Button.css

      
      
      
      
      
      
      
      
      

var Button_options = {};

Button_options.styleTagTransform = (styleTagTransform_default());
Button_options.setAttributes = (setAttributesWithoutAttributes_default());

      Button_options.insert = insertBySelector_default().bind(null, "head");
    
Button_options.domAPI = (styleDomAPI_default());
Button_options.insertStyleElement = (insertStyleElement_default());

var Button_update = injectStylesIntoStyleTag_default()(Button_Button/* default */.Z, Button_options);




       /* harmony default export */ const Components_Button_Button = (Button_Button/* default */.Z && Button_Button/* default.locals */.Z.locals ? Button_Button/* default.locals */.Z.locals : undefined);

// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Button/ExpandableButton.css
var ExpandableButton = __webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Button/ExpandableButton.css");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Button/ExpandableButton.css

      
      
      
      
      
      
      
      
      

var ExpandableButton_options = {};

ExpandableButton_options.styleTagTransform = (styleTagTransform_default());
ExpandableButton_options.setAttributes = (setAttributesWithoutAttributes_default());

      ExpandableButton_options.insert = insertBySelector_default().bind(null, "head");
    
ExpandableButton_options.domAPI = (styleDomAPI_default());
ExpandableButton_options.insertStyleElement = (insertStyleElement_default());

var ExpandableButton_update = injectStylesIntoStyleTag_default()(ExpandableButton/* default */.Z, ExpandableButton_options);




       /* harmony default export */ const Button_ExpandableButton = (ExpandableButton/* default */.Z && ExpandableButton/* default.locals */.Z.locals ? ExpandableButton/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Util.js

/**
 * Set of KeyCodes that are used in the platform.
 */

var KeyCode;

(function (KeyCode) {
  KeyCode[KeyCode["backspace"] = 8] = "backspace";
  KeyCode[KeyCode["tab"] = 9] = "tab";
  KeyCode[KeyCode["enter"] = 13] = "enter";
  KeyCode[KeyCode["shift"] = 16] = "shift";
  KeyCode[KeyCode["ctrl"] = 17] = "ctrl";
  KeyCode[KeyCode["alt"] = 18] = "alt";
  KeyCode[KeyCode["pause"] = 19] = "pause";
  KeyCode[KeyCode["capsLock"] = 20] = "capsLock";
  KeyCode[KeyCode["escape"] = 27] = "escape";
  KeyCode[KeyCode["space"] = 32] = "space";
  KeyCode[KeyCode["pageUp"] = 33] = "pageUp";
  KeyCode[KeyCode["pageDown"] = 34] = "pageDown";
  KeyCode[KeyCode["end"] = 35] = "end";
  KeyCode[KeyCode["home"] = 36] = "home";
  KeyCode[KeyCode["leftArrow"] = 37] = "leftArrow";
  KeyCode[KeyCode["upArrow"] = 38] = "upArrow";
  KeyCode[KeyCode["rightArrow"] = 39] = "rightArrow";
  KeyCode[KeyCode["downArrow"] = 40] = "downArrow";
  KeyCode[KeyCode["delete"] = 46] = "delete";
  KeyCode[KeyCode["b"] = 66] = "b";
  KeyCode[KeyCode["i"] = 73] = "i";
  KeyCode[KeyCode["k"] = 75] = "k";
  KeyCode[KeyCode["q"] = 81] = "q";
  KeyCode[KeyCode["t"] = 84] = "t";
  KeyCode[KeyCode["windowsKey"] = 91] = "windowsKey";
  KeyCode[KeyCode["macCommand"] = 91] = "macCommand";
  KeyCode[KeyCode["F10"] = 121] = "F10";
  KeyCode[KeyCode["numLock"] = 144] = "numLock";
  KeyCode[KeyCode["scrollLock"] = 145] = "scrollLock";
  KeyCode[KeyCode["comma"] = 188] = "comma";
})(KeyCode || (KeyCode = {}));
/**
 * Determines whether or not a keystroke is an arrow key or not.
 */


function isArrowKey(event) {
  return event.which === KeyCode.downArrow || event.which === KeyCode.upArrow || event.which === KeyCode.leftArrow || event.which === KeyCode.rightArrow;
}
/**
 * Type guard function to determine if children are defined as a function
 * @param children (usually from this.props.children)
 */

function isFunctionalChildren(children) {
  return typeof children === "function";
}
/**
 * childCount is used to determine the number of defined renderable children within
 * a standard set of React.Children. This is different than React.Children.length
 * which includes children that are null or undefined.
 */

function childCount(children) {
  var childCount = 0;
  react.Children.forEach(children, function (child) {
    if (child) {
      childCount++;
    }
  });
  return childCount;
}
/**
 * getSafeId is designed to create a string from the input id that is safe for use
 * as the id attribute of a component. The ids appear in the global javscript namespace.
 * This means if you create an element and assign the "id" property to a value
 * the element is accessible by doing window.<id>. This causes problems when the
 * id of the element collides with other global objects. Using a SafeId adds a prefix
 * intended to avoid conflicts.
 *
 * This should be called anytime a DOM elements property is being set that refers to
 * the components id. This should not be called when passing the id as a prop to a
 * component. It is the components responsibility to make the Id safe when attaching
 * it to an element.
 *
 * This includes but is not limited to properties like:
 *  aria-controls, aria-describedby, aria-labelledby, id, htmlFor, ...
 *
 * @param id The root id that is being made "Safe".
 */

function getSafeId(id) {
  if (false) {} // querySelector won't select id's with .'s in them replace them with '-'.


  return id ? "__bolt-" + id.replace(/[^0-9A-Za-z_]/g, "-") : undefined;
}
/**
 * getSafeIdSelector will return the string that can use used to denote the selector
 * for elements that use this id.
 *
 * @param id The root id that is being made "Safe".
 */

function getSafeIdSelector(id) {
  return "#" + getSafeId(id);
}
/**
 * function that does nothing and accepts any set of arguments.
 */

function noop() {}
/**
 * Basic function for building a css classlist string from and array of classes, where
 * one of more of the arguments may be null or undefined.
 *
 * @param classes Array of strings the represents the css class list.
 *
 * @example css("base", "active", x === 42 && "optional") will return "base active optional" if x === 42 or "base active" otherwise
 */

function Util_css() {
  var classes = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    classes[_i] = arguments[_i];
  }

  return classes.filter(function (c) {
    return c;
  }).join(" ").trim();
}
/**
 * Returns the set of parent elements with index 0 the root and the last
 * element is either the direct parent or itself based on includeSelf.
 *
 * @param element The element to get the parent element hierarchy from.
 * @param includeSelf Should the element supplied be included in the parent list.
 * @param rootElement Optional root element to stop processing
 * @param includeRoot Should the root element supplied be included in the parent list.
 */

function getParents(element, includeSelf, rootElement, includeRoot) {
  var parentElements = [];

  if (includeSelf) {
    parentElements.push(element);
  }

  while (element.parentElement && element.parentElement !== rootElement) {
    parentElements.splice(0, 0, element.parentElement);
    element = element.parentElement;
  }

  if (element.parentElement && includeRoot) {
    parentElements.splice(0, 0, element.parentElement);
  }

  return parentElements;
}
/**
 * Determines if the target element of an event (or its ancestry) has a particular node name.
 *
 * @param event The initial element is pulled off of this event.
 * @param nodeNames A list of DOM node names ("A", "INPUT", etc.) to check for the presence
 * @param rootAncestor If provided, build a list of ancestors from the event's element, to this element to check. Otherwise,
 * only check the element from the event.
 */

function eventTargetContainsNode(event, nodeNames, rootAncestor) {
  var targetElement = event.target;
  var ancestors = rootAncestor ? getParents(targetElement, true, rootAncestor, true) : [targetElement];
  return ancestors.some(function (element) {
    return nodeNames.indexOf(element.nodeName) !== -1;
  });
}
/**
 * ElementRelationship is used to define how two elements in the same
 * document are related in position to each other.
 */

var ElementRelationship;

(function (ElementRelationship) {
  ElementRelationship[ElementRelationship["Unrelated"] = 0] = "Unrelated";
  ElementRelationship[ElementRelationship["Before"] = 1] = "Before";
  ElementRelationship[ElementRelationship["After"] = 2] = "After";
  ElementRelationship[ElementRelationship["Child"] = 3] = "Child";
  ElementRelationship[ElementRelationship["Parent"] = 4] = "Parent";
})(ElementRelationship || (ElementRelationship = {}));
/**
 * getRelationship returns the relationship of the two specified elements.
 *
 * @param element1
 * @param element2
 */


function getRelationship(element1, element2) {
  // If the second element is a child of the first element, then element1 occurs before element2.
  if (element1.contains(element2)) {
    return ElementRelationship.Parent;
  } // If the first element is a child of the second element, then element1 occurs after element2.


  if (element2.contains(element1)) {
    return ElementRelationship.Child;
  } // Retrieve the parents of both the elements.


  var parents1 = getParents(element1, true);
  var parents2 = getParents(element2, true);

  for (var elementIndex = 0;; elementIndex++) {
    if (parents1[elementIndex] !== parents2[elementIndex]) {
      var siblings = parents1[elementIndex - 1].children;

      for (var siblingIndex = 0; siblingIndex < siblings.length; siblingIndex++) {
        if (siblings[siblingIndex] === parents1[elementIndex]) {
          return ElementRelationship.Before;
        }

        if (siblings[siblingIndex] === parents2[elementIndex]) {
          return ElementRelationship.After;
        }
      }
    }
  }
}
/**
 * preventDefault is used as a standard delegate to prevent the default behavior
 * for a given event.
 *
 * @param event Synthetic event that should have its default action prevented.
 */

function preventDefault(event) {
  event.preventDefault();
}
/**
 * shimRef is used to acquire a React Ref from a child component. If the child
 * has an existing ref, it will return the existing ref, if not it will
 * create a new one.
 */

function shimRef(child) {
  // @HACK: This uses an internal property on the created element which is the
  //  forwarded ref property of the element. If React ever changes the implementation
  //  removing this property this code will need to be updated.
  // @NOTE: The ref MUST be a React.createRef if the a ref property is specified,
  //  otherwise we will not be able to share the ref.
  var ref = child.ref; // If no ref was created by the element owner we will add one.

  if (!ref) {
    ref = react.createRef();
  } else {
    // @DEBUG: Ensure the ref is a React.createRef by validated the current property
    if (!ref.hasOwnProperty("current")) {
      throw Error("Children of a focus zone MUST use React.createRef to obtain child references");
    } // @DEBUG

  }

  return ref;
}
var focusVisible = false;
/**
 * Determine whether or not focus is currently visible to the user. This generally
 * means the user is using the keyboard to manage focus instead of the mouse.
 */

function getFocusVisible() {
  return focusVisible;
}
/**
 * Make sure the focus treatment is enabled and disabled based on
 * the state of mouse and keyboard usage.
 */

function setFocusVisible(visible) {
  if ((focusVisible = visible) === true) {
    document.body && document.body.classList.add("bolt-focus-visible");
  } else {
    document.body && document.body.classList.remove("bolt-focus-visible");
  }
}
/* Setup the set of non-focus keys, when these are pressed it doesnt start showing focus treatment */

var nonFocusKeys = new Array(255);
nonFocusKeys[KeyCode.alt] = true;
nonFocusKeys[KeyCode.capsLock] = true;
nonFocusKeys[KeyCode.ctrl] = true;
nonFocusKeys[KeyCode.numLock] = true;
nonFocusKeys[KeyCode.pause] = true;
nonFocusKeys[KeyCode.scrollLock] = true;
nonFocusKeys[KeyCode.shift] = true;
nonFocusKeys[KeyCode.windowsKey] = true;
document.addEventListener("keydown", function (event) {
  if (!nonFocusKeys[event.which]) {
    setFocusVisible(true);
  }
}, true);
var mouseCapture; // MouseCaptureFunction is the global mouse handler we use to trap events and forward
// them to the current capture if one exists.

var mouseCaptureFunction = function (event) {
  // Track the position of the mouse as it moves.
  Mouse.position.x = event.clientX;
  Mouse.position.y = event.clientY; // Notify the mouse capture of the mouse movement and mouseup if one is signed up.

  if (mouseCapture && mouseCapture.callback && mouseCapture.button === event.button) {
    mouseCapture.callback(event);

    if (event.type === "mouseup") {
      Mouse.releaseCapture(mouseCapture.callback);
    }
  }
};

var Mouse = {
  position: {
    x: 0,
    y: 0
  },
  releaseCapture: function releaseCapture(callback) {
    if (mouseCapture && mouseCapture.callback === callback) {
      mouseCapture = undefined;
    }
  },
  setCapture: function setCapture(callback, button) {
    if (button === void 0) {
      button = 0;
    } // Before starting a new capture, we will release the current capture.


    if (mouseCapture) {
      Mouse.releaseCapture(mouseCapture.callback);
    } // Update the mouseCapture to the new capture.


    mouseCapture = {
      button: button,
      callback: callback
    };
  }
};
document.addEventListener("mousemove", mouseCaptureFunction);
document.addEventListener("mouseup", mouseCaptureFunction);
document.addEventListener("mousedown", function (event) {
  // Screen readers on scan mode trigger some key strokes as Mouse events.
  // We can easily identify those events because they have no coordinates.
  if (event.button === 0 && event.clientX === 0 && event.clientY === 0 && event.screenX === 0 && event.screenY === 0 && event.pageX === 0 && event.pageY === 0) {
    return;
  }

  setFocusVisible(false);
}, true);
var touchCapture; // touchCaptureFunction is the global touch handler we use to trap events and forward
// them to the current capture if one exists.

var touchCaptureFunction = function (event) {
  var touch = event.changedTouches && event.changedTouches.length ? event.changedTouches[0] : event.touches[0]; // Track the position of the touch as it moves.

  Touch.position.x = touch.clientX;
  Touch.position.y = touch.clientY; // Notify the touch capture of the touch movement and touchend if one is signed up.

  if (touchCapture && touchCapture.callback) {
    touchCapture.callback(event);

    if (event.type === "touchend") {
      Touch.releaseCapture(touchCapture.callback);
    }
  }
};
/**
 * Currently only basic touch support - assumes a single touch
 * throughout the touch operation.
 */


var Touch = {
  position: {
    x: 0,
    y: 0
  },
  releaseCapture: function releaseCapture(callback) {
    if (touchCapture && touchCapture.callback === callback) {
      touchCapture = undefined;
    }
  },
  setCapture: function setCapture(callback) {
    // Before starting a new capture, we will release the current capture.
    if (touchCapture) {
      Touch.releaseCapture(touchCapture.callback);
    } // Update the touchCapture to the new capture.


    touchCapture = {
      callback: callback
    };
  }
};
document.addEventListener("touchmove", touchCaptureFunction);
document.addEventListener("touchend", touchCaptureFunction);
document.addEventListener("touchstart", function () {
  return setFocusVisible(false);
}, true);
var pointerCaptures = []; // PointerCaptureFunction is the global pointer handler we use to trap events and forward
// them to the current capture if one exists.

var pointerCaptureFunction = function (event) {
  // Track the position of the pointer as it moves.
  Pointer.position.x = event.clientX;
  Pointer.position.y = event.clientY; // Notify the pointer capture of the pointer movement and pointerup if one is signed up.

  for (var i = pointerCaptures.length - 1; i >= 0; i--) {
    var pointerCapture = pointerCaptures[i];

    if (pointerCapture && pointerCapture.callback) {
      pointerCapture.callback(event);

      if (event.type === "pointerup") {
        Pointer.releaseCapture(pointerCapture.callback);
      }
    }
  }
};

var Pointer = {
  position: {
    x: 0,
    y: 0
  },
  releaseCapture: function releaseCapture(callback) {
    var pointerCaptureIndex = pointerCaptures.findIndex(function (pointerCapture) {
      return pointerCapture.callback === callback;
    });

    if (pointerCaptureIndex > -1) {
      pointerCaptures.splice(pointerCaptureIndex, 1);
    }
  },
  setCapture: function setCapture(callback) {
    // Update the pointerCapture to the new capture.
    pointerCaptures.push({
      callback: callback
    });
  }
};
document.addEventListener("pointermove", pointerCaptureFunction);
document.addEventListener("pointerup", pointerCaptureFunction);
document.addEventListener("pointerdown", function (event) {
  // Screen readers on scan mode trigger some key strokes as Pointer events.
  // We can easily identify those events because they have no coordinates.
  if (event.button === 0 && event.clientX === 0 && event.clientY === 0 && event.screenX === 0 && event.screenY === 0 && event.pageX === 0 && event.pageY === 0) {
    return;
  }

  setFocusVisible(false);
}, true);
/**
 * Returns the coordinates of a native event. For mouse / touch events, uses the
 * Mouse/Touch helpers. For a keyboard event, will return undefined.
 * @param event
 */

function getPointByEventType(event) {
  if (event.clientX !== undefined) {
    return {
      x: Pointer.position.x,
      y: Pointer.position.y
    };
  } else if (event.changedTouches || event.touches) {
    // If the event has a changedTouches or touches property, it is a touch event.
    return {
      x: Touch.position.x,
      y: Touch.position.y
    };
  } else if (event.clientX !== undefined) {
    // If the event has a clientX, it is not a keyboard event, so treat it as a mouse event.
    return {
      x: Mouse.position.x,
      y: Mouse.position.y
    };
  }

  return undefined;
}
/**
 * Checks two arrays to see they contain equal elements in the same order.
 *
 * @param array1 First array to check.
 * @param array2 Second array to check.
 * @param comparer Optional comparer to check whether array items are equal. If not specified, items are compared using strict equals.
 * @returns {boolean}
 */

function arrayEquals(array1, array2, comparer) {
  if (comparer === void 0) {
    comparer = function (item1, item2) {
      return item1 === item2;
    };
  }

  if (!array1 && !array2) {
    return true;
  }

  if (!array1 || !array2) {
    return false;
  }

  if (array1.length !== array2.length) {
    return false;
  }

  for (var i = 0; i < array1.length; i++) {
    if (!comparer(array1[i], array2[i])) {
      return false;
    }
  }

  return true;
}
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/FocusGroup/FocusGroup.js





var FocusGroupContext = react.createContext({
  onFocus: noop
});

var FocusGroup =
/** @class */
function (_super) {
  __extends(FocusGroup, _super);

  function FocusGroup(props) {
    var _this = _super.call(this, props) || this;

    _this.onFocus = function (focusedElementId) {
      // Only setState if the focusedElement is changing. This prevents us from setting the state
      // when focus keeps getting fired on the same element. Example: Browser keeps losing and
      // getting focus.
      if (_this.state.focusedElementId !== focusedElementId) {
        _this.setState({
          focusedElementId: focusedElementId
        });
      }
    };

    _this.state = {
      defaultElementId: props.defaultElementId,
      focusedElementId: props.defaultElementId
    };
    return _this;
  }

  FocusGroup.getDerivedStateFromProps = function (props, state) {
    if (state.defaultElementId !== props.defaultElementId) {
      return tslib_es6_assign(tslib_es6_assign({}, state), {
        defaultElementId: props.defaultElementId,
        focusedElementId: props.defaultElementId
      });
    }

    return null;
  };

  FocusGroup.prototype.render = function () {
    return react.createElement(FocusGroupContext.Provider, {
      value: {
        focusedElementId: this.state.focusedElementId,
        onFocus: this.onFocus
      }
    }, this.props.children);
  };

  FocusGroup.prototype.focus = function (elementId) {
    var id = getSafeId(elementId || this.state.focusedElementId);

    if (id) {
      var element = document.getElementById(id);

      if (element) {
        element.focus();
      }
    }
  };

  return FocusGroup;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/FocusGroup.js
 // @NOTE: Explicit export list due to typescript compiler bug 18644 where a require is generated for export * when const enum's are present


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/FocusZone/FocusZone.Props.js
/**
 * Which direction focus moves within a FocusZone
 */
var FocusZoneDirection;

(function (FocusZoneDirection) {
  FocusZoneDirection[FocusZoneDirection["Horizontal"] = 1] = "Horizontal";
  FocusZoneDirection[FocusZoneDirection["Vertical"] = 2] = "Vertical";
})(FocusZoneDirection || (FocusZoneDirection = {}));
/**
 * The preprocessKeyStroke method can return one of the following values
 * to modify how the current and parent focus zones treat the keystroke.
 */


var FocusZoneKeyStroke;

(function (FocusZoneKeyStroke) {
  /**
   * Dont alter the keystroke in any way.
   */
  FocusZoneKeyStroke[FocusZoneKeyStroke["IgnoreNone"] = 1] = "IgnoreNone";
  /**
   * All parent focus zones should ignore the keystroke, but it should be
   * processed normally by the current focuszone.
   */

  FocusZoneKeyStroke[FocusZoneKeyStroke["IgnoreParents"] = 2] = "IgnoreParents";
  /**
   * All focuszones that receive the keystroke should ignore it.
   */

  FocusZoneKeyStroke[FocusZoneKeyStroke["IgnoreAll"] = 3] = "IgnoreAll";
})(FocusZoneKeyStroke || (FocusZoneKeyStroke = {}));
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/FocusZone/FocusZone.js






 // The FocusZoneContext carries the identifier for the current FocusZone.

var FocusZoneContext = react.createContext({
  direction: undefined,
  focuszoneId: undefined
}); // As an event propagates through the hierarchy of focus zones it may
// be marked as ignored. This allows a child focus zone to mark an event
// as "pass-through" for all of its parents.

var ignoreEvent = false; // An internal identifier used to created unique focuszoneId's.

var focuszoneId = 1;

var FocusZone =
/** @class */
function (_super) {
  __extends(FocusZone, _super);

  function FocusZone(props) {
    var _this = _super.call(this, props) || this;

    _this.rootElements = [];
    _this.state = {
      focuszoneId: "focuszone-" + focuszoneId++
    };
    return _this;
  }

  FocusZone.prototype.render = function () {
    var _this = this; // We need to shim the KeyDown event on each of the children. This allows us to capture
    // the event and process it for focus changes.


    var content = react.createElement(FocusZoneContext.Consumer, null, function (parentContext) {
      return react.createElement(FocusZoneContext.Provider, {
        value: {
          direction: _this.props.direction,
          focuszoneId: _this.state.focuszoneId
        }
      }, react.Children.map(_this.props.children, function (child, index) {
        if (child === null || typeof child === "string" || typeof child === "number") {
          return child;
        } // All direct children MUST be DOM elements.


        if (typeof child.type !== "string") {
          throw Error("Children of a focus zone MUST be DOM elements");
        } // Save the supplied keydown event handler so we can forward the event to it.


        var existingOnKeyDown = child.props.onKeyDown;
        var existingOnFocus = child.props.onFocus; // Save the component reference for this element, either the one from the original
        // component or the one we added.

        _this.rootElements[index] = shimRef(child);
        return react.cloneElement(child, tslib_es6_assign(tslib_es6_assign({
          key: index
        }, child.props), {
          ref: _this.rootElements[index],
          onFocus: function (event) {
            var _a;

            if (existingOnFocus) {
              existingOnFocus(event);
            }

            var focusCurrent = document.activeElement;

            for (var index_1 = 0; index_1 < _this.rootElements.length; index_1++) {
              var rootElement = (_a = _this.rootElements[index_1]) === null || _a === void 0 ? void 0 : _a.current;

              if (rootElement && (rootElement.contains(focusCurrent) || rootElement === focusCurrent)) {
                _this.lastFocusElement = event.target;
              }
            }
          },
          onKeyDown: function (event) {
            var ignoreKeystroke = FocusZoneKeyStroke.IgnoreNone;

            if (existingOnKeyDown) {
              existingOnKeyDown(event);
            } // Determine whether or not this focuszone wants to preprocess this keystroke
            // and mark the current propagation as ignored.


            if (!ignoreEvent && _this.props.preprocessKeyStroke) {
              ignoreKeystroke = _this.props.preprocessKeyStroke(event);

              if (ignoreKeystroke === FocusZoneKeyStroke.IgnoreAll) {
                ignoreEvent = true;
              }
            }

            if (!ignoreEvent) {
              if (!event.defaultPrevented && !_this.props.disabled) {
                var nodeName = event.target.nodeName;
                var offset = void 0; // Logic to handle input / text area tags

                var inputPosition = void 0;
                var inputLength = void 0;

                if (nodeName === "INPUT" || nodeName === "TEXTAREA") {
                  var input = event.target;

                  try {
                    inputPosition = typeof input.selectionStart === "number" ? input.selectionStart : undefined;
                  } catch (_a) {// Microsoft Edge throws InvalidStateError when calling 'input.selectionStart' on non-supported input element types
                    // according to https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement
                    // Ignore this error
                  }

                  inputLength = input.value.length;
                }

                var allowLeftArrow = inputPosition === undefined || inputPosition === 0 && _this.props.allowArrowOutOfInputs;
                var allowRightArrow = inputPosition === undefined || inputLength === undefined || inputPosition === inputLength && _this.props.allowArrowOutOfInputs;

                switch (event.which) {
                  case KeyCode.upArrow:
                    if (nodeName !== "TEXTAREA") {
                      if (_this.props.direction === FocusZoneDirection.Vertical) {
                        offset = -1;
                      }
                    }

                    break;

                  case KeyCode.downArrow:
                    if (nodeName !== "TEXTAREA") {
                      if (_this.props.direction === FocusZoneDirection.Vertical) {
                        offset = 1;
                      }
                    }

                    break;

                  case KeyCode.rightArrow:
                    if (allowRightArrow) {
                      if (_this.props.direction === FocusZoneDirection.Horizontal) {
                        offset = 1;
                      }
                    }

                    break;

                  case KeyCode.leftArrow:
                    if (allowLeftArrow) {
                      if (_this.props.direction === FocusZoneDirection.Horizontal) {
                        offset = -1;
                      }
                    }

                    break;

                  case KeyCode.tab:
                    if (_this.props.handleTabKey) {
                      offset = event.shiftKey ? -1 : 1;
                    }

                    break;

                  case KeyCode.enter:
                    if (_this.props.activateOnEnter) {
                      event.target.click();
                    }

                }

                if (offset) {
                  if (_this.focusNextElement(event, offset)) {
                    event.preventDefault();
                  }
                }
              }
            }

            if (ignoreKeystroke === FocusZoneKeyStroke.IgnoreParents) {
              ignoreEvent = true;
            } // Perform any supplied event post processing.


            if (!ignoreEvent && _this.props.postprocessKeyStroke) {
              if (_this.props.postprocessKeyStroke(event) === FocusZoneKeyStroke.IgnoreParents) {
                ignoreEvent = true;
              }
            } // Once we reach the root focuszone we need to clear the ignoredEvent.


            if (!parentContext.focuszoneId) {
              ignoreEvent = false;
            }
          }
        }));
      }));
    });

    if (this.props.focusGroupProps) {
      content = react.createElement(FocusGroup, tslib_es6_assign({}, this.props.focusGroupProps), content);
    }

    return content;
  };

  FocusZone.prototype.componentDidMount = function () {
    var focusElement; // If a defaultActiveElement is supplied we will focus it. It is not required to
    // be member of the focus zone, it can be any element.

    if (this.props.focusOnMount) {
      var defaultActiveElement = this.props.defaultActiveElement;
      var focusElements = this.getFocusElements(typeof defaultActiveElement === "function" ? defaultActiveElement() : defaultActiveElement);

      if (focusElements.length > 0) {
        focusElement = focusElements[0];
      }
    }

    if (focusElement) {
      focusElement.focus();
    }
  };

  FocusZone.prototype.focusNextElement = function (event, offset) {
    var focusElements = this.getFocusElements();

    if (focusElements.length > 0) {
      var focusCurrent = document.activeElement;
      var rootElements = this.rootElements; // Determine if an element in the focus zone has focus.

      var focusIndex = focusElements.indexOf(focusCurrent); // Focus may not be on an element in the zone so we need to
      // figure out which one we are between in this case.

      if (focusIndex === -1) {
        var index = 0; // Determine if the element is in a portal or directly within a focuszone root.

        for (index = 0; index < rootElements.length; index++) {
          var elementRef = rootElements[index];

          if (elementRef.current) {
            if (elementRef.current.contains(event.target)) {
              break;
            }
          }
        } // If this is coming from a portal, we will use the element that last had focus.


        if (index === this.rootElements.length && this.lastFocusElement) {
          focusIndex = focusElements.indexOf(this.lastFocusElement);
        } else {
          for (index = 0; index < focusElements.length; index++) {
            var relationship = getRelationship(focusCurrent, focusElements[index]);

            if (relationship === ElementRelationship.Before) {
              focusIndex = index - (offset > 0 ? 1 : 0);
              break;
            } else if (relationship === ElementRelationship.Child) {
              focusIndex = index;
              break;
            } else if (relationship === ElementRelationship.After && index === focusElements.length - 1) {
              focusIndex = focusElements.length;
            }
          }
        }
      } // Move to the next component in the set of focus zone components.


      focusIndex += offset; // If the FocusZone supports circular navigation and we are on the end
      // we will move to the element on the opposite end.

      if (this.props.circularNavigation) {
        if (focusIndex < 0) {
          focusIndex = focusElements.length - 1;
        } else if (focusIndex >= focusElements.length) {
          focusIndex = 0;
        }
      } // If we ended up on a focusable element update the focus.


      if (focusIndex > -1 && focusIndex < focusElements.length) {
        focusElements[focusIndex].focus();
        return true;
      }
    }

    return false;
  };

  FocusZone.prototype.getFocusElements = function (customSelector) {
    var focusElements = [];
    var selector = customSelector; // If a custom selector was supplied we will use it.

    if (!selector) {
      // The default selector will just pick up items tagged with this focuszone id.
      selector = "[data-focuszone~=" + this.state.focuszoneId + "]"; // If we are including the default elements from the DOM we will add the
      // default selector to our list of selectors.

      if (this.props.includeDefaults) {
        selector += ",a[href],button,iframe,input,select,textarea,[tabIndex]";
      }
    } // Filter the elements that matched our query to the elements that are elligible
    // for receiving focus in this focuszone.


    for (var _i = 0, _a = this.rootElements; _i < _a.length; _i++) {
      var rootElement = _a[_i];

      if (rootElement.current) {
        var focusChildren = rootElement.current.querySelectorAll(selector); // Check if the root element matches our selector.

        if (rootElement.current.matches(selector) && this.isFocusElement(rootElement.current, customSelector)) {
          focusElements.push(rootElement.current);
        } // Check all the children of the root that are potential focus elements.


        for (var rootIndex = 0; rootIndex < focusChildren.length; rootIndex++) {
          var element = focusChildren[rootIndex];

          if (this.isFocusElement(element, customSelector)) {
            focusElements.push(element);
          }
        }
      }
    }

    return focusElements;
  };
  /**
   * isFocusElement is used to determine whether or not an element should participate
   * in this focus zone.
   *
   * @param element HTML Element that you are testing as a valid focus element.
   *
   * @param customSelector A custom selector that is used to match elements with
   *  negative tabIndex. These wont match normally unless targetted by the custom
   *  selector.
   */


  FocusZone.prototype.isFocusElement = function (element, customSelector) {
    // Filter out elements that are disabled.
    if (element.hasAttribute("disabled")) {
      return false;
    }

    if (!customSelector) {
      // Filter out elements that are not visible.
      if (!this.props.skipHiddenCheck) {
        var style = window.getComputedStyle(element);

        if (style.visibility === "hidden" || style.display === "none" || !(element.offsetWidth || element.offsetHeight || element.getClientRects().length)) {
          return false;
        }
      } // Filter out elements with negative tabIndex that aren't
      // explicity marked for this focuszone.


      var tabIndex = element.getAttribute("tabindex");

      if (tabIndex && parseInt(tabIndex) < 0) {
        var focuszoneId_1 = element.getAttribute("data-focuszone");

        if (!focuszoneId_1 || focuszoneId_1.indexOf(this.state.focuszoneId) < 0) {
          return false;
        }
      }
    }

    return true;
  };

  return FocusZone;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/FocusZone.js
 // @NOTE: Explicit export list due to typescript compiler bug 18644 where a require is generated for export * when const enum's are present


// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Icon/FabricIcons.css
var FabricIcons = __webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Icon/FabricIcons.css");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Icon/FabricIcons.css

      
      
      
      
      
      
      
      
      

var FabricIcons_options = {};

FabricIcons_options.styleTagTransform = (styleTagTransform_default());
FabricIcons_options.setAttributes = (setAttributesWithoutAttributes_default());

      FabricIcons_options.insert = insertBySelector_default().bind(null, "head");
    
FabricIcons_options.domAPI = (styleDomAPI_default());
FabricIcons_options.insertStyleElement = (insertStyleElement_default());

var FabricIcons_update = injectStylesIntoStyleTag_default()(FabricIcons/* default */.Z, FabricIcons_options);




       /* harmony default export */ const Icon_FabricIcons = (FabricIcons/* default */.Z && FabricIcons/* default.locals */.Z.locals ? FabricIcons/* default.locals */.Z.locals : undefined);

// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/TooltipEx/Tooltip.css
var Tooltip = __webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/TooltipEx/Tooltip.css");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/TooltipEx/Tooltip.css

      
      
      
      
      
      
      
      
      

var Tooltip_options = {};

Tooltip_options.styleTagTransform = (styleTagTransform_default());
Tooltip_options.setAttributes = (setAttributesWithoutAttributes_default());

      Tooltip_options.insert = insertBySelector_default().bind(null, "head");
    
Tooltip_options.domAPI = (styleDomAPI_default());
Tooltip_options.insertStyleElement = (insertStyleElement_default());

var Tooltip_update = injectStylesIntoStyleTag_default()(Tooltip/* default */.Z, Tooltip_options);




       /* harmony default export */ const TooltipEx_Tooltip = (Tooltip/* default */.Z && Tooltip/* default.locals */.Z.locals ? Tooltip/* default.locals */.Z.locals : undefined);

// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Callout/Callout.css
var Callout = __webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Callout/Callout.css");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Callout/Callout.css

      
      
      
      
      
      
      
      
      

var Callout_options = {};

Callout_options.styleTagTransform = (styleTagTransform_default());
Callout_options.setAttributes = (setAttributesWithoutAttributes_default());

      Callout_options.insert = insertBySelector_default().bind(null, "head");
    
Callout_options.domAPI = (styleDomAPI_default());
Callout_options.insertStyleElement = (insertStyleElement_default());

var Callout_update = injectStylesIntoStyleTag_default()(Callout/* default */.Z, Callout_options);




       /* harmony default export */ const Callout_Callout = (Callout/* default */.Z && Callout/* default.locals */.Z.locals ? Callout/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/FocusWithin/FocusWithin.js




var FocusWithinContext = react.createContext({});

var FocusWithin =
/** @class */
function (_super) {
  __extends(FocusWithin, _super);

  function FocusWithin() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.blurTimeout = -1;
    _this.focusCount = 0;
    _this.focus = false;
    /**
     * onBlur method that should be attached to the onBlur handler of the
     * continers root element.
     */

    _this.onBlur = function () {
      // Don't let the focus count go below 0.
      // We have seen cases where we get a blur event, even when we
      // do not have focus. One such example is the Office Fabric TrapZone,
      // which will lose focus, then regain focus and stop propagation on
      // the event.
      _this.focusCount = Math.max(0, _this.focusCount - 1); // Clear any previous timeout if we somehow got a second blur event before
      // ever processing the timeout from the first one.

      if (_this.blurTimeout !== -1) {
        window.clearTimeout(_this.blurTimeout);
      } // We must delay the blur processing for two basic reasons:
      // 1) If focus is transitioning to a child element we will fire a Blur
      //  followed quickly by a Focus even though focus never left the element.
      //  This causes problems for things like menus that close on loss of focus.
      // 2) IE 11 fires the blur before the focus (no other browser does this)
      //  and this causes the same issue above but also causes focusCount
      //  inconsistencies.


      _this.blurTimeout = window.setTimeout(function () {
        _this.blurTimeout = -1;

        if (!_this.focusCount) {
          _this.focus = false; // If we are tracking the focus state we will force a component update.

          if (_this.props.updateStateOnFocusChange) {
            _this.forceUpdate();
          }

          if (_this.props.onBlur) {
            _this.props.onBlur();
          }
        }
      }, 0);
    };
    /**
     * onFocus method that should be attached to the onFocus handler of the
     * continer's root element.
     */


    _this.onFocus = function (event) {
      _this.focusCount++; // If focus is just entering one of the child components and not just moving
      // one child to another we will call the onFocus delegate if supplied.

      if (!_this.focus) {
        _this.focus = true; // If we are tracking the focus state we will force a component update.

        if (_this.props.updateStateOnFocusChange) {
          _this.forceUpdate();
        }

        if (_this.props.onFocus) {
          _this.props.onFocus(event);
        }
      }
    };

    return _this;
  }

  FocusWithin.prototype.render = function () {
    var _this = this;

    return react.createElement(FocusWithinContext.Consumer, null, function (focusWithinContext) {
      var children;
      var newProps = {
        onBlur: _this.onBlur,
        onFocus: _this.onFocus
      }; // Save ou parent focus within for potential communication.

      _this.parentFocusWithin = focusWithinContext.focusWithin;

      if (typeof _this.props.children === "function") {
        var child = _this.props.children; // For functional components we pass the hasFocus attribute as well.

        newProps.hasFocus = _this.focus;
        children = child(newProps);
      } else {
        var child = react.Children.only(_this.props.children);
        children = react.cloneElement(child, tslib_es6_assign(tslib_es6_assign({}, child.props), newProps), child.props.children);
      }

      return react.createElement(FocusWithinContext.Provider, {
        value: {
          focusWithin: _this
        }
      }, children);
    });
  };
  /**
   * componentWillUnmount is used to cleanup the component state.
   *
   * @NOTE: The main thing we need to deal with is when this component is unmounted
   * while it has focus. We need to get this FocusWithin and all of its parents state
   * updated since focus will move directly to the body without a blur event.
   */


  FocusWithin.prototype.componentWillUnmount = function () {
    if (this.blurTimeout !== -1) {
      window.clearTimeout(this.blurTimeout);
      this.blurTimeout = -1;
    }

    if (this.focusCount > 0) {
      this.unmountWithFocus(false);
    }
  };
  /**
   * hasFocus returns true if the focus is contained within the focus component
   * hierarchy. This includes portals, the element may or may not
   * be a direct descendant of the focus component in the DOM structure.
   */


  FocusWithin.prototype.hasFocus = function () {
    return this.focusCount > 0;
  };
  /**
   * When the focusWithin unmounts we need to determine if we currently have focus.
   * If we do, focus will be moved silently to the body. We need to cleanup the
   * focusWithin's that are affected by this silent change.
   */


  FocusWithin.prototype.unmountWithFocus = function (fromParent) {
    if (this.focusCount > 0) {
      this.focusCount--;

      if (this.focusCount > 0) {
        // If we are tracking the focus state we will force a component update.
        if (fromParent) {
          this.focusCount = 0;
          this.focus = false;

          if (this.props.updateStateOnFocusChange) {
            this.forceUpdate();
          }

          if (this.props.onBlur) {
            this.props.onBlur();
          }
        }
      } // Notify the parent focus within that the mounted focus component is unmounting.


      if (this.parentFocusWithin) {
        this.parentFocusWithin.unmountWithFocus(true);
      }
    }
  };

  FocusWithin.defaultProps = {
    updateStateOnFocusChange: true
  };
  return FocusWithin;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/FocusWithin.js
 // @NOTE: Explicit export list due to typescript compiler bug 18644 where a require is generated for export * when const enum's are present


// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Portal/Portal.css
var Portal = __webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Portal/Portal.css");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Portal/Portal.css

      
      
      
      
      
      
      
      
      

var Portal_options = {};

Portal_options.styleTagTransform = (styleTagTransform_default());
Portal_options.setAttributes = (setAttributesWithoutAttributes_default());

      Portal_options.insert = insertBySelector_default().bind(null, "head");
    
Portal_options.domAPI = (styleDomAPI_default());
Portal_options.insertStyleElement = (insertStyleElement_default());

var Portal_update = injectStylesIntoStyleTag_default()(Portal/* default */.Z, Portal_options);




       /* harmony default export */ const Portal_Portal = (Portal/* default */.Z && Portal/* default.locals */.Z.locals ? Portal/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Core/Observable.js


/**
 * An Observable implementation that will track a set of subscribers and supports
 * notifications when the underlying system changes.
 */

var Observable =
/** @class */
function () {
  function Observable() {
    this.observers = {};
    this.subscriberCount = 0;
  }
  /**
   * notify is used to send the event to all subscribers that have signed up for this events
   * action. This means they have subscribed directly to this action, or to all actions.
   * If the caller requested the event be persisted the event will be fired in order to new
   * subscribers as well when they subscribe.
   *
   * @param value - The object that represents the event data.
   *
   * @param action - The action that happened on this observable to produce the event.
   *
   * @param persistEvent - Optional value that determines if all future subscribers will
   *  recieve the event as well.
   */


  Observable.prototype.notify = function (value, action, persistEvent) {
    var executeObserverAction = function (observer, value, action) {
      try {
        observer(value, action);
      } catch (ex) {
        console.warn(ex);

        if (ex && typeof ErrorEvent === "function") {
          window.dispatchEvent(new ErrorEvent("error", {
            error: ex,
            filename: "Observable.ts",
            message: ex.message
          }));
        }
      }
    }; // NOTE: We need to make a copy of the observers since they may change during notification.


    if (this.observers[action]) {
      var observers = this.observers[action].slice();

      for (var observerIndex = 0; observerIndex < observers.length; observerIndex++) {
        executeObserverAction(observers[observerIndex], value, action);
      }
    }

    if (this.observers[""]) {
      var observers = this.observers[""].slice();

      for (var observerIndex = 0; observerIndex < observers.length; observerIndex++) {
        executeObserverAction(observers[observerIndex], value, action);
      }
    } // If the caller wants this event sent to all subscribers, even future ones, track it.


    if (persistEvent) {
      if (!this.events) {
        this.events = [];
      }

      this.events.push({
        action: action,
        value: value
      });
    }
  };

  Observable.prototype.subscribe = function (observer, action) {
    action = action || "";

    if (!this.observers[action]) {
      this.observers[action] = [];
    }

    this.observers[action].push(observer);
    this.subscriberCount++; // Fire the callback for any events that were persisted when they were sent.

    if (this.events) {
      for (var _i = 0, _a = this.events; _i < _a.length; _i++) {
        var event_1 = _a[_i];

        if (!action || event_1.action === action) {
          observer(event_1.value, event_1.action);
        }
      }
    }

    return observer;
  };

  Observable.prototype.unsubscribe = function (observer, action) {
    action = action || "";

    if (this.observers[action]) {
      var observerIndex = this.observers[action].indexOf(observer);

      if (observerIndex >= 0) {
        this.observers[action].splice(observerIndex, 1);
        this.subscriberCount--;
      }
    }
  };

  return Observable;
}();


var ObservableLike;

(function (ObservableLike) {
  /**
   * Check whether the specified object is an observable or not.
   *
   * @param observableLike Object to perform observable check.
   */
  function isObservable(observableLike) {
    return observableLike && typeof observableLike.subscribe === "function";
  }

  ObservableLike.isObservable = isObservable;

  function getValue(observableLike) {
    if (isObservable(observableLike)) {
      return observableLike.value;
    }

    return observableLike;
  }

  ObservableLike.getValue = getValue;
  /**
   * Subscribes to the specified object if it is an observable.
   *
   * @param observableLike Object to subscribe its value change if applicable.
   * @param observer Delegate to be executed when the underlying data changes.
   * @param action Optional argument that allows the consumer to supply a action
   *  with the delegate. If the action is supplied only those actions are delievered,
   *  while all actions are delivered is no action is supplied.
   * @returns observer
   */

  function subscribe(observableLike, observer, action) {
    if (isObservable(observableLike)) {
      return observableLike.subscribe(observer, action);
    }

    return function () {};
  }

  ObservableLike.subscribe = subscribe;
  /**
   * Unsubscribes from the specified object if it is an observable.
   *
   * @param observableLike Object to subscribe its value change if applicable.
   * @param observer Delegate to be executed when the underlying data changes.
   * @param action Optional argument that allows the consumer to supply a action
   *  with the delegate. If the action is supplied only those actions are delievered,
   *  while all actions are delivered is no action is supplied.
   */

  function unsubscribe(observableLike, observer, action) {
    if (isObservable(observableLike)) {
      observableLike.unsubscribe(observer, action);
    }
  }

  ObservableLike.unsubscribe = unsubscribe;
})(ObservableLike || (ObservableLike = {}));

var ObservableValue =
/** @class */
function (_super) {
  __extends(ObservableValue, _super);

  function ObservableValue(value) {
    var _this = _super.call(this) || this;

    _this.v = value;
    return _this;
  }

  Object.defineProperty(ObservableValue.prototype, "value", {
    get: function () {
      return this.v;
    },
    set: function (value) {
      this.v = value;
      this.notify(this.v, "set");
    },
    enumerable: true,
    configurable: true
  });
  return ObservableValue;
}(Observable);


/**
 * An ObservableObject can be used to key a named collection of properties
 * and offer an observable endpoint.
 */

var ObservableObject =
/** @class */
function (_super) {
  __extends(ObservableObject, _super);

  function ObservableObject() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.objects = {};
    return _this;
  }

  ObservableObject.prototype.add = function (objectName, objectDefinition) {
    if (!this.objects.hasOwnProperty(objectName)) {
      this.objects[objectName] = objectDefinition;
      this.notify({
        key: objectName,
        value: objectDefinition
      }, "add");
    }
  };

  ObservableObject.prototype.get = function (objectName) {
    return this.objects[objectName];
  };

  ObservableObject.prototype.set = function (objectName, objectDefinition) {
    if (this.objects.hasOwnProperty(objectName)) {
      this.objects[objectName] = objectDefinition;
      this.notify({
        key: objectName,
        value: objectDefinition
      }, "replace");
    } else {
      this.add(objectName, objectDefinition);
    }
  };

  ObservableObject.prototype.keys = function () {
    return Object.keys(this.objects);
  };

  return ObservableObject;
}(Observable);


/**
 * EventTypes:
 *  change - { changedItems, index }
 *  push - {addedItems, index }
 *  pop - { index, removedItems}
 *  removeAll - {index, removedItems }
 *  splice - { addedItems, index, removedItems }
 */

var ObservableArray =
/** @class */
function (_super) {
  __extends(ObservableArray, _super);

  function ObservableArray(items) {
    if (items === void 0) {
      items = [];
    }

    var _this = _super.call(this) || this;

    _this.internalItems = items || [];
    return _this;
  }

  ObservableArray.prototype.change = function (start) {
    var _a;

    var items = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      items[_i - 1] = arguments[_i];
    }

    (_a = this.internalItems).splice.apply(_a, tslib_es6_spreadArrays([start, items.length], items));

    this.notify({
      index: start,
      changedItems: items
    }, "change");
    return items.length;
  };

  Object.defineProperty(ObservableArray.prototype, "length", {
    get: function () {
      return this.internalItems.length;
    },
    enumerable: true,
    configurable: true
  });

  ObservableArray.prototype.push = function () {
    var _a;

    var items = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      items[_i] = arguments[_i];
    }

    if (items.length) {
      var index = this.internalItems.length;

      (_a = this.internalItems).push.apply(_a, items);

      this.notify({
        addedItems: items,
        index: index
      }, "push");
    }

    return items.length;
  };

  ObservableArray.prototype.pop = function () {
    var item = this.internalItems.pop();

    if (item !== undefined) {
      this.notify({
        index: this.internalItems.length,
        removedItems: [item]
      }, "pop");
    }

    return item;
  };

  ObservableArray.prototype.removeAll = function (filter) {
    var removedItems = [];
    var remainingItems = [];

    for (var _i = 0, _a = this.internalItems; _i < _a.length; _i++) {
      var item = _a[_i];

      if (!filter || filter(item)) {
        removedItems.push(item);
      } else {
        remainingItems.push(item);
      }
    }

    if (removedItems.length > 0) {
      this.internalItems.splice(0, this.internalItems.length);

      for (var _b = 0, remainingItems_1 = remainingItems; _b < remainingItems_1.length; _b++) {
        var item = remainingItems_1[_b];
        this.internalItems.push(item);
      }

      this.notify({
        index: 0,
        removedItems: removedItems
      }, "removeAll");
    }

    return removedItems;
  };

  ObservableArray.prototype.splice = function (start, deleteCount) {
    var _a;

    var itemsToAdd = [];

    for (var _i = 2; _i < arguments.length; _i++) {
      itemsToAdd[_i - 2] = arguments[_i];
    }

    var removedItems = (_a = this.internalItems).splice.apply(_a, tslib_es6_spreadArrays([start, deleteCount], itemsToAdd));

    this.notify({
      addedItems: itemsToAdd,
      index: start,
      removedItems: removedItems
    }, "splice");
    return removedItems;
  };

  Object.defineProperty(ObservableArray.prototype, "value", {
    get: function () {
      return this.internalItems;
    },
    set: function (items) {
      // Preserve the original array, but avoid the "..." arguments issue with splice/push
      var removedItems;

      if (items === this.internalItems) {
        // Special case for someone passing us the same internal array that we are already using
        // We don't need to modify the internalItems. The "removedItems" in the event is
        // not going to be accurate in the case that someone modified this internal array
        // outside of the observable -- we won't know the prior state in that case.
        removedItems = this.internalItems;
      } else {
        // Clear out the existing items
        removedItems = this.internalItems.slice();
        this.internalItems.length = 0; // Add all new items

        if (items.length) {
          for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            this.internalItems.push(item);
          }
        }
      }

      this.notify({
        addedItems: items,
        index: 0,
        removedItems: removedItems
      }, "splice");
    },
    enumerable: true,
    configurable: true
  });
  return ObservableArray;
}(Observable);


/**
 * An Observable Collection takes an arry of arrays or observable arrays
 * and flattens out the items into a single readonly observable array
 * (with all the underlying array values aggregated together).
 *
 * This handles subscribing to any underlying observable arrays and
 * updating the aggregate array as appropriate (and notifying subscribers)
 */

var ObservableCollection =
/** @class */
function (_super) {
  __extends(ObservableCollection, _super);

  function ObservableCollection() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.collections = [];
    _this.items = [];
    return _this;
  }

  Object.defineProperty(ObservableCollection.prototype, "length", {
    get: function () {
      if (!this.subscriberCount) {
        this.recalculateItems();
      }

      return this.items.length;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ObservableCollection.prototype, "value", {
    get: function () {
      if (!this.subscriberCount) {
        this.recalculateItems();
      }

      return this.items;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Adds an additional collection of items to the end of the array
   *
   * @param collection Array of items or an observable array of items
   * @params transformItems Delegate to process each item that is pulled from the given collection
   */

  ObservableCollection.prototype.push = function (collection, transformItems) {
    var collectionEntry;
    var pushedItems;

    if (ObservableLike.isObservable(collection)) {
      var observable = collection;
      var subscriber = this.getSubscriber(this.collections.length, transformItems);
      collectionEntry = {
        observable: observable,
        subscriber: subscriber,
        transformItems: transformItems,
        items: []
      };
      pushedItems = observable.value;

      if (this.subscriberCount) {
        ObservableLike.subscribe(collectionEntry.observable, subscriber);
      }
    } else if (collection.length) {
      pushedItems = collection;
      collectionEntry = {
        items: this.transformItems(pushedItems, transformItems)
      };
    }

    if (collectionEntry) {
      this.collections.push(collectionEntry);

      if (this.subscriberCount && pushedItems.length) {
        var newItems = this.transformItems(pushedItems, transformItems);

        for (var _i = 0, newItems_1 = newItems; _i < newItems_1.length; _i++) {
          var newItem = newItems_1[_i];
          this.items.push(newItem);
        }

        this.notify({
          addedItems: newItems,
          index: this.items.length - newItems.length
        }, "push");
      }
    }
  };

  ObservableCollection.prototype.subscribe = function (observer, action) {
    var subscription = _super.prototype.subscribe.call(this, observer, action);

    if (this.subscriberCount === 1) {
      this.recalculateItems();

      for (var _i = 0, _a = this.collections; _i < _a.length; _i++) {
        var collection = _a[_i];

        if (collection.subscriber) {
          collection.observable.subscribe(collection.subscriber);
        }
      }
    }

    return subscription;
  };

  ObservableCollection.prototype.unsubscribe = function (observer, action) {
    _super.prototype.unsubscribe.call(this, observer, action);

    if (this.subscriberCount === 0) {
      for (var _i = 0, _a = this.collections; _i < _a.length; _i++) {
        var collection = _a[_i];

        if (collection.subscriber) {
          collection.observable.unsubscribe(collection.subscriber);
        }
      }
    }
  };
  /**
   * Recalculate items. This is necessary while we work without subscribers, as we're not listening to changes in observable inner collections.
   * Once the first subscriber joins, items collection will be in sync real-time.
   */


  ObservableCollection.prototype.recalculateItems = function () {
    this.items.length = 0;

    for (var _i = 0, _a = this.collections; _i < _a.length; _i++) {
      var collection = _a[_i];

      if (collection.observable) {
        collection.items = this.transformItems(collection.observable.value, collection.transformItems);
      }

      for (var _b = 0, _c = collection.items; _b < _c.length; _b++) {
        var item = _c[_b];
        this.items.push(item);
      }
    }
  };

  ObservableCollection.prototype.transformItems = function (inputItems, transformInput) {
    var transformedItems;

    if (!inputItems) {
      transformedItems = [];
    } else if (transformInput) {
      transformedItems = [];

      for (var _i = 0, inputItems_1 = inputItems; _i < inputItems_1.length; _i++) {
        var inputItem = inputItems_1[_i];
        var transformedItem = transformInput(inputItem);

        if (transformedItem !== undefined) {
          transformedItems.push(transformedItem);
        }
      }
    } else {
      transformedItems = inputItems;
    }

    return transformedItems;
  };

  ObservableCollection.prototype.getSubscriber = function (collectionIndex, transformInput) {
    var _this = this;

    return function (args) {
      var _a; // Find the index in our aggregate array


      var index = args.index;

      for (var i = 0; i < collectionIndex; i++) {
        index += _this.collections[i].items.length;
      }

      if (args.changedItems) {
        // Handle change event
        var changedItems = _this.transformItems(args.changedItems, transformInput);

        (_a = _this.items).splice.apply(_a, tslib_es6_spreadArrays([index, args.changedItems.length], changedItems));

        _this.notify({
          changedItems: changedItems,
          index: index
        }, "change");
      } else {
        // Handle splice, push, pop events
        var removedItems = _this.transformItems(args.removedItems, transformInput);

        var addedItems = _this.transformItems(args.addedItems, transformInput); // We would normally just call splice here with 3 arguments, but splice takes a "..." argument for added items
        // which passes array elements on the stack and is therefore limited (to 32K/64K on some browsers)
        // Remove the removedItems first


        _this.items.splice(index, removedItems.length); // Slice-off any remaining items past where we want to insert


        var endItems = _this.items.splice(index); // Push the addedItems followed by the endItems that we just removed


        for (var _i = 0, addedItems_1 = addedItems; _i < addedItems_1.length; _i++) {
          var item = addedItems_1[_i];

          _this.items.push(item);
        }

        for (var _b = 0, endItems_1 = endItems; _b < endItems_1.length; _b++) {
          var item = endItems_1[_b];

          _this.items.push(item);
        }

        _this.notify({
          removedItems: removedItems,
          addedItems: addedItems,
          index: index
        }, "splice");
      }
    };
  };

  return ObservableCollection;
}(Observable);



var ReadyableObservableArray =
/** @class */
function (_super) {
  __extends(ReadyableObservableArray, _super);

  function ReadyableObservableArray(items, ready) {
    if (items === void 0) {
      items = [];
    }

    if (ready === void 0) {
      ready = false;
    }

    var _this = _super.call(this, items) || this;

    _this.ready = new ObservableValue(ready);
    return _this;
  }

  return ReadyableObservableArray;
}(ObservableArray);


/**
 * React Hooks extension that allows the consumer to track Observables with a useState like
 * hooks API.
 *
 * @param initialState Initial value for the state, or a function that will resolve the value
 * the when the value is initialized.
 */

function useObservable(initialState) {
  var underlyingState = React.useState(initialState)[0];
  var observable = React.useState(function () {
    return new ObservableValue(underlyingState);
  })[0];

  var updateState = function (updatedState) {
    if (typeof updatedState === "function") {
      observable.value = updatedState(observable.value);
    } else {
      observable.value = updatedState;
    }
  };

  return [observable, updateState];
}
/**
 * React Hooks extension that allows the consmer to track ObservableArrays with a useState like
 * hooks API.
 *
 * @param initialState Initial value for the state, or a function that will resolve the value
 * the when the value is initialized.
 */

function useObservableArray(initialState) {
  var underlyingState = React.useState(initialState)[0];
  var reactState = React.useState(new ObservableArray(underlyingState));

  var updateState = function (updatedState) {
    if (typeof updatedState === "function") {
      reactState[0].value = updatedState(reactState[0].value);
    } else {
      reactState[0].value = updatedState;
    }
  };

  return [reactState[0], updateState];
}
/**
 * React Hooks extension that provides a constant reference to an ObservableValue which will update
 * based on another observable.
 *
 * @remarks
 * The subscription will be safely unsubscribed any time:
 * - The source observable points to a new object
 * - The callback dependencies array changes
 * - The component is unmounted
 *
 * @param sourceObservable
 * @param getDerivedValue
 * @param callbackDependencies
 */

function useDerivedObservable(sourceObservable, getDerivedValue, callbackDependencies) {
  var initialValue = getDerivedValue(sourceObservable.value);

  var _a = useObservable(initialValue),
      observable = _a[0],
      setValue = _a[1];

  var getDerivedValueCallback = React.useCallback(getDerivedValue, callbackDependencies); // Update the observable's value when the source observable changes its value

  useSubscription(sourceObservable, function (newValue) {
    var derivedValue = getDerivedValueCallback(newValue);
    setValue(derivedValue);
  }, callbackDependencies);
  return observable;
}
function useSubscription(sourceObservable, callbackFn, callbackDependencies) {
  if (callbackDependencies === void 0) {
    callbackDependencies = [];
  }

  var isFirstRenderFinished = React.useRef(false);
  var callback = React.useCallback(callbackFn, callbackDependencies); // Call the callback when the source observable points to a new object, but not on the first render with the first observable

  React.useEffect(function () {
    if (!isFirstRenderFinished.current) {
      isFirstRenderFinished.current = true;
      return;
    }

    callback(sourceObservable.value);
  }, [sourceObservable]); // Call the callback when the source observable changes its value

  React.useEffect(function () {
    var doCallback = function () {
      return callback(sourceObservable.value);
    };

    sourceObservable.subscribe(doCallback);
    return function () {
      return sourceObservable.unsubscribe(doCallback);
    };
  }, [sourceObservable, callback]);
}
function useDebouncedSubscription(sourceObservable, debounceMs, callbackFn, callbackDependencies) {
  if (callbackDependencies === void 0) {
    callbackDependencies = [];
  }

  var timeoutRef = React.useRef(null);
  useSubscription(sourceObservable, function (value) {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }

    timeoutRef.current = setTimeout(function () {
      callbackFn(value);
      timeoutRef.current = null;
    }, debounceMs);
  }, __spreadArrays([debounceMs], callbackDependencies));
}
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Utilities/Provider.js
/**
 * Basic ItemProvider that surfaces an array of items through the IItemProvider
 * interface.
 */
var ArrayItemProvider =
/** @class */
function () {
  function ArrayItemProvider(items) {
    this.items = items;
  }

  Object.defineProperty(ArrayItemProvider.prototype, "length", {
    get: function () {
      return this.items.length;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ArrayItemProvider.prototype, "value", {
    get: function () {
      return this.items;
    },
    enumerable: true,
    configurable: true
  });
  return ArrayItemProvider;
}();


/**
 * Helper function to get the value of a set of items that can be an itemProvider or normal array.
 * @param items the items to retrieve the value from.
 */

function getItemsValue(items) {
  return Array.isArray(items) ? items : items.value;
}
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Observer/Observer.js





/**
 * Handles subscription to properties that are IObservableValues, so that components don't have to handle on their own.
 *
 * Usage:
 *
 * <Observer myObservableValue={observableValue}>
 *     <MyComponent myObservableValue='' />
 * </Observer>
 *
 * Your component will get re-rendered with the new value of myObservableValue whenever that value changes.
 * Additionally, any additional props set on the Observer will also get passed down.
 */

var ObserverBase =
/** @class */
function (_super) {
  __extends(ObserverBase, _super);

  function ObserverBase(props) {
    var _this = _super.call(this, props) || this;

    _this.subscriptions = {}; // Initialize the state with the initial value of the observable.

    var state = {
      values: {},
      oldProps: {}
    };

    for (var propName in props) {
      state.values[propName] = getPropValue(props[propName]);
    }

    _this.state = state;
    return _this;
  }

  ObserverBase.getDerivedStateFromProps = function (props, state) {
    var newState = updateSubscriptionsAndState(state.oldProps, props, state);

    if (newState != null) {
      return tslib_es6_assign(tslib_es6_assign({}, newState), {
        oldProps: props
      });
    }

    return {
      oldProps: props
    };
  };

  ObserverBase.prototype.render = function () {
    var newProps = {}; // Copy over any properties from the observable component to the children.

    for (var key in this.state.values) {
      if (key !== "children") {
        newProps[key] = this.state.values[key];
      }
    }

    if (typeof this.props.children === "function") {
      var child = this.props.children;
      return child(newProps);
    } else {
      var child = react.Children.only(this.props.children);
      return react.cloneElement(child, tslib_es6_assign(tslib_es6_assign({}, child.props), newProps), child.props.children);
    }
  };

  ObserverBase.prototype.componentDidMount = function () {
    this.updateSubscriptionsAndStateAfterRender();
  };

  ObserverBase.prototype.componentDidUpdate = function () {
    this.updateSubscriptionsAndStateAfterRender();

    if (this.props.onUpdate) {
      this.props.onUpdate();
    }
  };

  ObserverBase.prototype.componentWillUnmount = function () {
    // Unsubscribe from any of the observable properties.
    for (var propName in this.subscribedProps) {
      this.unsubscribe(propName, this.subscribedProps);
    }
  };

  ObserverBase.prototype.subscribe = function (propName, props) {
    if (propName !== "children") {
      var observableExpression = void 0;
      var observableValue = props[propName];
      var action = void 0; // If this is an observableExpression, we need to subscribe to the value
      // and execute the filter on changes.

      if (observableValue && observableValue.observableValue !== undefined) {
        observableExpression = observableValue;
        observableValue = observableExpression.observableValue;
        action = observableExpression.action;
      }

      if (ObservableLike.isObservable(observableValue)) {
        var delegate = this.onValueChanged.bind(this, propName, observableValue, observableExpression);
        ObservableLike.subscribe(observableValue, delegate, action);
        this.subscriptions[propName] = {
          delegate: delegate,
          action: action
        };
      }
    }
  };

  ObserverBase.prototype.unsubscribe = function (propName, props) {
    if (propName !== "children") {
      var observableValue = getObservableValue(props[propName]);

      if (ObservableLike.isObservable(observableValue)) {
        var subscription = this.subscriptions[propName];
        ObservableLike.unsubscribe(observableValue, subscription.delegate, subscription.action);
        delete this.subscriptions[propName];
      }
    }
  };

  ObserverBase.prototype.updateSubscriptionsAndStateAfterRender = function () {
    var newState = updateSubscriptionsAndState(this.subscribedProps, this.props, this.state, this);

    if (newState != null) {
      this.setState(newState);
    }

    this.subscribedProps = tslib_es6_assign({}, this.props);
  };

  ObserverBase.prototype.onValueChanged = function (propName, observableValue, observableExpression, value, action) {
    var setState = true;

    if (!(propName in this.subscriptions)) {
      return;
    } // If this is an ObservableExpression we will call the filter before setting state.


    if (observableExpression && observableExpression.filter) {
      setState = observableExpression.filter(value, action);
    }

    if (setState) {
      this.setState(function (prevState, props) {
        var _a;

        return {
          values: tslib_es6_assign(tslib_es6_assign({}, prevState.values), (_a = {}, _a[propName] = observableValue.value || value, _a))
        };
      });
    }
  };

  return ObserverBase;
}(react.Component);

function getObservableValue(propValue) {
  if (propValue && propValue.observableValue !== undefined) {
    return propValue.observableValue;
  }

  return propValue;
}

function getPropValue(propValue) {
  return ObservableLike.getValue(getObservableValue(propValue));
}

function updateSubscriptionsAndState(oldProps, newProps, state, component) {
  // We need to unsubscribe from any observable values on old props and
  // subscribe to any observable values on new props.
  // In addition, if any of the values of the observables on the new props
  // differ from the value on the state, then we need to update the state.
  // This is possible if the value of the observable changed while the value
  // was being rendered, but before we had set up the subscription.
  // If we want to unsubscribe/resubscribe, then a component should be passed,
  // since this method is always called statically.
  var newState = tslib_es6_assign({}, state);

  var stateChanged = false;

  if (oldProps) {
    for (var propName in oldProps) {
      var oldValue = getObservableValue(oldProps[propName]);
      var newValue = getObservableValue(newProps[propName]);

      if (oldValue !== newValue) {
        component && component.unsubscribe(propName, oldProps);

        if (newValue === undefined) {
          delete newState.values[propName];
          stateChanged = true;
        }
      }
    }
  }

  for (var propName in newProps) {
    var oldValue = oldProps && getObservableValue(oldProps[propName]);
    var newValue = getObservableValue(newProps[propName]);

    if (oldValue !== newValue) {
      component && component.subscribe(propName, newProps); // Look for changes in the observables between creation and now.

      if (state.values[propName] !== getPropValue(newValue)) {
        newState.values[propName] = getPropValue(newValue);
        stateChanged = true;
      }
    }
  } // If any state updates occurred update the state now.


  if (stateChanged) {
    return newState;
  }

  return null;
}
/**
 * Handles subscription to properties that are IObservableValues, so that components don't have to handle on their own.
 *
 * Usage:
 *
 * <Observer myObservableValue={observableValue}>
 *     {(props: {myObservableValue: string}) =>
 *         <MyComponent myObservableValue={props.myObservableValue} />
 *     }
 * </Observer>
 *
 * Your component will get re-rendered with the new value of myObservableValue whenever that value changes.
 */


var Observer =
/** @class */
function (_super) {
  __extends(Observer, _super);

  function Observer() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  return Observer;
}(ObserverBase);


/**
 * UncheckedObserver is like Observer, except that it performs less (no) typechecking on the child observer function,
 * and allows child React elements.
 *
 * Usage:
 *
 * <Observer myObservableValue={observableValue}>
 *     {(props: {myObservableValue: string}) =>
 *         <MyComponent myObservableValue={props.myObservableValue} />
 *     }
 * </Observer>
 *
 * -or-
 *
 * <Observer myObservableValue={observableValue}>
 *     <MyComponent myObservableValue='' />
 * </Observer>
 *
 * Your component will get re-rendered with the new value of myObservableValue whenever that value changes.
 * Additionally, any additional props set on the Observer will also get passed down.
 */

var UncheckedObserver =
/** @class */
function (_super) {
  __extends(UncheckedObserver, _super);

  function UncheckedObserver() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  return UncheckedObserver;
}(ObserverBase);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Observer/ItemsObserver.js







var ItemsObserver =
/** @class */
function (_super) {
  __extends(ItemsObserver, _super);

  function ItemsObserver() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.onItemsChanged = function (value, action) {
      var _a = _this.props,
          getUnselectableRanges = _a.getUnselectableRanges,
          items = _a.items,
          selection = _a.selection;
      selection.onItemsChanged(value, action);
      selection.unselectableRanges = getUnselectableRanges(getItemsValue(items));
      return false;
    };

    return _this;
  }

  ItemsObserver.prototype.componentDidMount = function () {
    this.props.selection.unselectableRanges = this.props.getUnselectableRanges(getItemsValue(this.props.items));
  };

  ItemsObserver.prototype.render = function () {
    var itemsObservable = {
      observableValue: this.props.items,
      filter: this.onItemsChanged
    };
    return react.createElement(UncheckedObserver, {
      itemsObservable: itemsObservable
    }, this.props.children);
  };

  return ItemsObserver;
}(react.Component);


// EXTERNAL MODULE: ./node_modules/azure-devops-ui/Components/Observer/ItemsObserver.Props.js
var ItemsObserver_Props = __webpack_require__("./node_modules/azure-devops-ui/Components/Observer/ItemsObserver.Props.js");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Observer/ReadyableArrayObserver.js






var ReadyableArrayObserver =
/** @class */
function (_super) {
  __extends(ReadyableArrayObserver, _super);

  function ReadyableArrayObserver() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.loaded = false;

    _this.handleLoaded = function () {
      if (_this.props.data.ready.value && !_this.loaded) {
        _this.props.onReady && _this.props.onReady();
        _this.loaded = true;
      }
    };

    return _this;
  }

  ReadyableArrayObserver.prototype.render = function () {
    var _a = this.props,
        dataComponent = _a.dataComponent,
        loadingComponent = _a.loadingComponent,
        zeroDataComponent = _a.zeroDataComponent;
    return react.createElement(Observer, {
      data: this.props.data,
      onUpdate: this.handleLoaded,
      ready: this.props.data.ready
    }, function (props) {
      if (!props.ready) {
        return loadingComponent ? loadingComponent() : null;
      }

      if (props.data.length) {
        return dataComponent(props.data);
      }

      return zeroDataComponent ? zeroDataComponent() : null;
    });
  };

  ReadyableArrayObserver.prototype.componentDidUpdate = function (prevProps) {
    if (prevProps.data !== this.props.data) {
      this.loaded = false;
      this.handleLoaded();
    }
  };

  ReadyableArrayObserver.prototype.componentDidMount = function () {
    this.handleLoaded();
  };

  return ReadyableArrayObserver;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Observer/SelectionObserver.js






var SelectionObserver =
/** @class */
function (_super) {
  __extends(SelectionObserver, _super);

  function SelectionObserver() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.onSelectionChanged = function (value, action) {
      var shouldUpdate = false;

      if (action === "select" && _this.props.onSelect) {
        shouldUpdate = _this.props.onSelect(value);
      }

      if ((action === "select" || action === "unselect" || action === "set") && _this.props.onSelectionChanged) {
        shouldUpdate = _this.props.onSelectionChanged(_this.props.selection.value, action);
      }

      return shouldUpdate;
    };

    return _this;
  }

  SelectionObserver.prototype.render = function () {
    var selectionObservable = {
      observableValue: this.props.selection,
      filter: this.onSelectionChanged
    };
    return react.createElement(UncheckedObserver, {
      selectionObservable: selectionObservable
    }, this.props.children);
  };

  return SelectionObserver;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Observer.js








;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Portal/Portal.js








/**
 * The Portal component is used to create a React Portal through a well known component.
 * This component allows the platform to control where portals are rooted in the document
 * and ensure these are managed properly.
 */

var Portal_Portal_Portal =
/** @class */
function (_super) {
  __extends(Portal, _super);

  function Portal(props) {
    var _this = _super.call(this, props) || this;

    _this.mounted = new ObservableValue(false); // Determine the element that will host the portal.

    var parentElement = _this.props.portalElement;

    if (!parentElement && _this.props.portalSelector) {
      parentElement = document.querySelector(_this.props.portalSelector);
    }

    if (!parentElement) {
      parentElement = document.querySelector(".bolt-portal-host");

      if (!parentElement) {
        parentElement = document.createElement("div");
        parentElement.className = "bolt-portal-host absolute-fill no-events scroll-hidden";
        document.body.appendChild(parentElement);
      }
    }

    if (_this.props.parentClassName && !parentElement.classList.contains(_this.props.parentClassName)) {
      parentElement.classList.add(_this.props.parentClassName);
    }

    _this.parentElement = parentElement; // Create the hosting element for the portal.

    _this.hostElement = document.createElement("div");
    return _this;
  }

  Portal.prototype.render = function () {
    var _this = this;

    this.hostElement.className = "";
    this.hostElement.classList.add("bolt-portal");
    this.hostElement.classList.add("absolute-fill"); // If custom class's are supplied add them (1 at a time since IE doesnt support multiple args).

    if (this.props.className) {
      var classNames = this.props.className.split(" ");

      for (var _i = 0, classNames_1 = classNames; _i < classNames_1.length; _i++) {
        var className = classNames_1[_i];
        this.hostElement.classList.add(className);
      }
    } // NOTE: We dont render the children until after we have mounted the portal.
    //  If the caller needs to access the document while mounting the content this
    //  will ensure the children of the portal are not mounted until the portal
    //  is attached to the DOM.


    return react_dom.createPortal(react.createElement(Observer, {
      mounted: this.mounted
    }, function (props) {
      return props.mounted ? _this.props.children : null;
    }), this.hostElement);
  };

  Portal.prototype.componentDidMount = function () {
    this.parentElement.appendChild(this.hostElement);
    this.mounted.value = true;
  };

  Portal.prototype.componentWillUnmount = function () {
    this.parentElement.removeChild(this.hostElement);
  };

  return Portal;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Portal.js


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Utilities/Position.js
var LAYOUT_CALCULATION_MAX_TIMES = 5;
var TOOLTIP_OFFSET = 10;
var Location;

(function (Location) {
  Location["start"] = "start";
  Location["center"] = "center";
  Location["end"] = "end";
})(Location || (Location = {}));
/**
 * Calculates the distance between two points
 * @param pointA First point
 * @param pointB Second point
 */


function distance(pointA, pointB) {
  return Math.sqrt(Math.pow(pointA.x - pointB.x, 2) + Math.pow(pointA.y - pointB.y, 2));
}
/**
 * The position method is used to set the location of an absolutely positioned element
 * using the standard positioning properties. The names of these properties conform to
 * the naming patterns used in the Material Popover https://material-ui.com. They
 * are not exact but follow the same pattern.
 *
 * For an example usage, look at the Callout component and how it uses this method to
 * position the element in the page.
 *
 * @param transformElement The element that is being positioned/transformed.
 * @param transformOrigin The origin within the transformed element to align with the
 *  anchor position.
 * @param anchorOffset Offset on the anchorElement that is applied to the computed location
 *  given the element/origin/point.
 * @param anchorElement The element used to anchor the position of the transformed element.
 *  The caller must supply either an anchorElement and anchorOrigin, or anchorPoint.
 * @param anchorOrigin When an anchorElement is supplied the anchorOrigin defines the location
 *  on the anchorElement used for positioning.
 * @param anchorPoint Instead of an anchorElement the caller can use an explicit point
 *  to be used as the basis for the anchorLocation. The anchorOffset will still be applied.
 * @param extraSpaceSize Sets the value of how much the container is larger than the window in all directions.
 */

function position(transformElement, transformOrigin, anchorOffset, anchorElement, anchorOrigin, anchorPoint, extraSpaceSize) {
  if (extraSpaceSize === void 0) {
    extraSpaceSize = 5000;
  } // Translate the anchor location information to a point on the anchor element
  // if a specific point was not supplied.


  if (!anchorPoint) {
    if (anchorElement && anchorOrigin) {
      anchorPoint = pointFromOrigin(anchorOrigin, anchorElement.getBoundingClientRect());
    } else {
      return;
    }
  }

  var xPosition = anchorPoint.x;
  var yPosition = anchorPoint.y;
  var translateXFactor = 0;
  var translateYFactor = 0; // Update the anchorPoint by the anchorOffset if one was supplied.

  if (anchorOffset) {
    xPosition += anchorOffset.horizontal;
    yPosition += anchorOffset.vertical;
  } // Special case Start/Start since we dont need the parent rect.


  if (transformOrigin.horizontal !== Location.start || transformOrigin.vertical !== Location.start) {
    var windowHeight = document.documentElement.clientHeight;
    var windowWidth = document.documentElement.clientWidth; // Compute the effective horizontal position of the element.

    switch (transformOrigin.horizontal) {
      case Location.end:
        xPosition = windowWidth - xPosition;
        break;

      case Location.center:
        translateXFactor = -50;
        break;

      default:
    } // Compute the effective vertical position of the element.


    switch (transformOrigin.vertical) {
      case Location.end:
        yPosition = windowHeight - yPosition;
        break;

      case Location.center:
        translateYFactor = -50;
        break;

      default:
    }
  } // Update the transform elements position (it needs to be absolutely positioned in the window).
  // Void out other styles in case this is a re-call


  if (transformOrigin.horizontal !== Location.end) {
    transformElement.style.left = xPosition + extraSpaceSize + "px";
    transformElement.style.right = "";
  } else {
    transformElement.style.left = "";
    transformElement.style.right = xPosition + extraSpaceSize + "px";
  }

  if (transformOrigin.vertical !== Location.end) {
    transformElement.style.top = yPosition + extraSpaceSize + "px";
    transformElement.style.bottom = "";
  } else {
    transformElement.style.top = "";
    transformElement.style.bottom = yPosition + extraSpaceSize + "px";
  } // Apply centering as necessary


  if (translateXFactor !== 0 || translateYFactor !== 0) {
    transformElement.style.transform = "translate(" + translateXFactor + "%, " + translateYFactor + "%)";
  } else {
    transformElement.style.transform = "";
  }
}
/**
 * updateLayout is used to move an element to the "best" location based on it
 * layout. This will look at all the positioning attributes and move the
 * transformElement to a new location based on its size. This is usually done
 * after an initial call to position. After the element is positioned the
 * caller determines if the transformElement is in the desired location, which
 * generally translates to, is it clipped in the window.
 *
 * This is delayed because when position is called the transformElement is
 * frequently not fully laid out and we need to wait other a force reflow will
 * happen and cause performance issues.
 *
 * @param transformElement The element that is being positioned/transformed.
 * @param transformOrigin The origin within the transformed element to align with the
 *  anchor position.
 * @param anchorOffset Offset on the anchorElement that is applied to the computed location
 *  given the element/origin/point.
 * @param anchorElement The element used to anchor the position of the transformed element.
 *  The caller must supply either an anchorElement and anchorOrigin, or anchorPoint.
 * @param anchorOrigin When an anchorElement is supplie the anchorOrigin defines the location
 *  on the anchorElement used for positioning.
 * @param anchorPoint Instead of an anchorElement the caller can use an explicit point
 *  to be used as the basis for the anchorLocation. The anchorOffset will still be applied.
 * @param extraSpaceSize Sets the value of how much the container is larger than the window in all directions.
 * @param recursionControl Use it to avoid infinite loop and call this function LAYOUT_CALCULATION_MAX_TIMES times at most.
 */

function updateLayout(transformElement, transformOrigin, anchorOffset, anchorElement, anchorOrigin, anchorPoint, extraSpaceSize, recursionControl) {
  if (extraSpaceSize === void 0) {
    extraSpaceSize = 5000;
  }

  if (recursionControl === void 0) {
    recursionControl = 0;
  }

  var windowHeight = document.documentElement.clientHeight;
  var windowWidth = document.documentElement.clientWidth; // Get the current layout for the transformElement to determine the best layout.

  var transformElementRect = transformElement.getBoundingClientRect(); // Determine which edges of the transform element are clipped by the window.

  var clippedBottom = Math.floor(transformElementRect.bottom) > windowHeight;
  var clippedRight = Math.floor(transformElementRect.right) > windowWidth;
  var clippedLeft = Math.floor(transformElementRect.left) < 0;
  var clippedTop = Math.floor(transformElementRect.top) < 0; // If any of the edges are clipped we will update the layout to a better layout if available.

  if (clippedBottom || clippedRight || clippedLeft || clippedTop) {
    // If we are positioned based on a point and and offset we will flip over
    // the clipped edge.
    if (anchorPoint) {
      // Flip vertically top/bottom depending on the clipping edges.
      if (clippedTop !== clippedBottom) {
        if (clippedTop) {
          // Before we flip lets make sure we have at least TOOLTIP_OFFSET more pixels the other direction.
          if (transformElementRect.bottom < windowHeight / 2 - TOOLTIP_OFFSET) {
            if (transformOrigin.vertical === Location.end) {
              transformOrigin.vertical = Location.start;
            }
          }
        } else {
          // Before we flip lets make sure we have at least TOOLTIP_OFFSET more pixels the other direction.
          if (transformElementRect.top > windowHeight / 2 + TOOLTIP_OFFSET) {
            if (transformOrigin.vertical === Location.start) {
              transformOrigin.vertical = Location.end;
            }
          }
        }

        if (anchorOffset) {
          anchorOffset.vertical = -anchorOffset.vertical;
        }
      } // Flip hoizontally left/right depending on the clipping edges.


      if (clippedLeft !== clippedRight) {
        if (clippedLeft) {
          // Before we flip lets make sure we have at least TOOLTIP_OFFSET more pixels the other direction.
          if (transformElementRect.right < windowWidth / 2 - TOOLTIP_OFFSET) {
            if (transformOrigin.horizontal === Location.end) {
              transformOrigin.horizontal = Location.start;
            }
          }
        } else {
          // Before we flip lets make sure we have at least TOOLTIP_OFFSET more pixels the other direction.
          if (transformElementRect.left > windowWidth / 2 + TOOLTIP_OFFSET) {
            if (transformOrigin.horizontal === Location.start) {
              transformOrigin.horizontal = Location.end;
            }
          }
        }

        if (anchorOffset) {
          anchorOffset.horizontal = -anchorOffset.horizontal;
        }
      }
    } // If the element is positioned based on an anchorElement/anchorOrigin
    // we need to look determine if the element can slide along any axis.
    else if (anchorOrigin && anchorElement) {
      // Flip vertically top/bottom depending on the clipping edges.
      if (clippedTop !== clippedBottom) {
        if (clippedTop) {
          // Before we flip lets make sure we have at least TOOLTIP_OFFSET more pixels the other direction.
          if (transformElementRect.bottom < windowHeight / 2 - TOOLTIP_OFFSET) {
            if (transformOrigin.vertical === Location.end && anchorOrigin.vertical === Location.start) {
              transformOrigin.vertical = Location.start;
              anchorOrigin.vertical = Location.end;
            } else if (transformOrigin.vertical === Location.center || transformOrigin.vertical === Location.end && anchorOrigin.vertical === Location.end) {
              transformOrigin.vertical = Location.start;
              anchorOrigin.vertical = Location.start;
            }
          }
        } else {
          // Before we flip lets make sure we have at least TOOLTIP_OFFSET more pixels the other direction.
          if (transformElementRect.top > windowHeight / 2 + TOOLTIP_OFFSET) {
            if (transformOrigin.vertical === Location.start && anchorOrigin.vertical === Location.end) {
              transformOrigin.vertical = Location.end;
              anchorOrigin.vertical = Location.start;
            } else if (transformOrigin.vertical === Location.center || transformOrigin.vertical === Location.start && anchorOrigin.vertical === Location.start) {
              transformOrigin.vertical = Location.end;
              anchorOrigin.vertical = Location.end;
            }
          }
        }

        if (anchorOffset) {
          anchorOffset.vertical = -anchorOffset.vertical;
        }
      }

      if (clippedLeft !== clippedRight) {
        // Flip hoizontally left/right depending on the clipping edges.
        if (clippedLeft) {
          // Before we flip lets make sure we have at least TOOLTIP_OFFSET more pixels the other direction.
          if (transformElementRect.right < windowWidth / 2 - TOOLTIP_OFFSET) {
            if (transformOrigin.horizontal === Location.end && anchorOrigin.horizontal === Location.start) {
              transformOrigin.horizontal = Location.start;
              anchorOrigin.horizontal = Location.end;
            } else if (transformOrigin.horizontal === Location.center || transformOrigin.horizontal === Location.end && anchorOrigin.horizontal === Location.end) {
              transformOrigin.horizontal = Location.start;
              anchorOrigin.horizontal = Location.start;
            }
          }
        } else {
          // Before we flip lets make sure we have at least TOOLTIP_OFFSET more pixels the other direction.
          if (transformElementRect.left > windowWidth / 2 + TOOLTIP_OFFSET) {
            if (transformOrigin.horizontal === Location.start && anchorOrigin.horizontal === Location.end) {
              transformOrigin.horizontal = Location.end;
              anchorOrigin.horizontal = Location.start;
            } else if (transformOrigin.horizontal === Location.center || transformOrigin.horizontal === Location.start && anchorOrigin.horizontal === Location.start) {
              transformOrigin.horizontal = Location.end;
              anchorOrigin.horizontal = Location.end;
            }
          }
        }

        if (anchorOffset) {
          anchorOffset.horizontal = -anchorOffset.horizontal;
        }
      }
    } // Update the position based on the changes made to the location details.


    position(transformElement, transformOrigin, anchorOffset, anchorElement, anchorOrigin, anchorPoint, extraSpaceSize); // If the repositioned element doesnt fit, we will put max-height/max-width to
    // force the entire element into the viewport.

    transformElementRect = transformElement.getBoundingClientRect(); // Determine which edges of the transform element are clipped by the window.

    clippedBottom = Math.floor(transformElementRect.bottom) > windowHeight;
    clippedRight = Math.floor(transformElementRect.right) > windowWidth;
    clippedLeft = Math.floor(transformElementRect.left) < 0;
    clippedTop = Math.floor(transformElementRect.top) < 0; // Since we are clipped compute the updated sizes and position a second time.

    if (clippedTop || clippedBottom || clippedLeft || clippedRight) {
      if (clippedTop || clippedBottom) {
        var maxHeight = transformElementRect.height - (clippedTop ? -transformElementRect.top : 0) - (clippedBottom ? transformElementRect.bottom - windowHeight : 0) - 5;
        transformElement.style.maxHeight = maxHeight + "px";
      }

      if (clippedLeft || clippedRight) {
        var maxWidth = transformElementRect.width - (clippedLeft ? -transformElementRect.left : 0) - (clippedRight ? transformElementRect.right - windowWidth : 0) - 5;
        transformElement.style.maxWidth = maxWidth + "px";
      } // Note the change to the component with the overflow className.


      transformElement.classList.add("overflow");
      position(transformElement, transformOrigin, anchorOffset, anchorElement, anchorOrigin, anchorPoint, extraSpaceSize);

      if (recursionControl < LAYOUT_CALCULATION_MAX_TIMES) {
        // Since we changed width/height of the control, let's check if it's cut-off.
        transformElementRect = transformElement.getBoundingClientRect();
        clippedBottom = Math.floor(transformElementRect.bottom) > windowHeight;
        clippedRight = Math.floor(transformElementRect.right) > windowWidth;
        clippedLeft = Math.floor(transformElementRect.left) < 0;
        clippedTop = Math.floor(transformElementRect.top) < 0; // Go through all the logic one more time if tooltip doesn't fit in.

        if (clippedBottom || clippedRight || clippedLeft || clippedTop) {
          updateLayout(transformElement, transformOrigin, anchorOffset, anchorElement, anchorOrigin, anchorPoint, extraSpaceSize, ++recursionControl);
        }
      }
    }
  }
}

function pointFromOrigin(location, rect) {
  var x;
  var y; // Compute the horizontal position based on the rectangle.

  switch (location.horizontal) {
    case Location.start:
      x = rect.left;
      break;

    case Location.end:
      x = rect.right;
      break;

    default:
      x = rect.left + rect.width / 2;
  } // Compute the vertical position based on the rectangle.


  switch (location.vertical) {
    case Location.start:
      y = rect.top;
      break;

    case Location.end:
      y = rect.bottom;
      break;

    default:
      y = rect.top + rect.height / 2;
  }

  return {
    x: x,
    y: y
  };
}
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Core/TimerManagement.js

/**
 * The TimerManagement class is used to track a set of timers.
 */

var TimerManagement =
/** @class */
function () {
  function TimerManagement(parent) {
    this.disposed = false;
    this.immediateIds = null;
    this.intervals = [];
    this.timeouts = [];
    this.parent = parent || null;
  }
  /**
   * clearAllTimers is used to clear any active timers in the object.
   */


  TimerManagement.prototype.clearAllTimers = function () {
    for (var _i = 0, _a = this.intervals; _i < _a.length; _i++) {
      var intervalId = _a[_i];
      window.clearInterval(intervalId);
    }

    for (var _b = 0, _c = this.timeouts; _b < _c.length; _b++) {
      var timeoutId = _c[_b];
      window.clearTimeout(timeoutId);
    }

    this.intervals.splice(0, this.intervals.length);
    this.timeouts.splice(0, this.timeouts.length);
  };
  /**
   * Clears the immediate.
   * @param id - Id to cancel.
   */


  TimerManagement.prototype.clearImmediate = function (id) {
    if (this.immediateIds && this.immediateIds[id]) {
      window.clearTimeout(id);
      delete this.immediateIds[id];
    }
  };
  /**
   * clearInterval is used to stop the series of callbacks that was setup through setInterval.
   *
   * @param intervalId - The id returned from eh setInterval call that you want stopped.
   */


  TimerManagement.prototype.clearInterval = function (intervalId) {
    window.clearInterval(intervalId);
    this.removeInterval(intervalId);
  };
  /**
   * clearTimeout is used to stop a timeout callback that was setup through setTimeout.
   *
   * @param timeoutId - The id returned from the setTimeout call that you want stopped.
   */


  TimerManagement.prototype.clearTimeout = function (timeoutId) {
    window.clearTimeout(timeoutId);
    this.removeTimeout(timeoutId);
  };
  /**
   * SetImmediate override, which will auto cancel the immediate during dispose.
   * @param callback - Callback to execute.
   * @returns The setTimeout id.
   */


  TimerManagement.prototype.setImmediate = function (callback) {
    var _this = this;

    var immediateId = 0;

    if (!this.disposed) {
      if (!this.immediateIds) {
        this.immediateIds = {};
      }

      var setImmediateCallback = function () {
        // Time to execute the timeout, enqueue it as a foreground task to be executed.
        try {
          // Now delete the record and call the callback.
          if (_this.immediateIds) {
            delete _this.immediateIds[immediateId];
          }

          callback.apply(_this.parent);
        } catch (e) {}
      };

      immediateId = window.setTimeout(setImmediateCallback, 0);
      this.immediateIds[immediateId] = true;
    }

    return immediateId;
  };
  /**
   * setInterval is used to setup a callback that is called on an interval.
   *
   * @param callback - The callback that should be called each interval time period.
   *
   * @param milliseconds - The number of milliseconds between each callback.
   *
   * @param args - Optional variable argument list passed to the callback.
   *
   * @returns - returns a handle to the interval, this can be used to cancel through clearInterval method.
   */


  TimerManagement.prototype.setInterval = function (callback, milliseconds) {
    var args = [];

    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    } // Create the timer, and add a method to track the completion so we can
    // remove our tracked reference.


    var intervalId = window.setInterval.apply(window, tslib_es6_spreadArrays([callback, milliseconds], args));
    this.intervals.push(intervalId);
    return intervalId;
  };
  /**
   * setTimeout is used to setup a onetime callback that is called after the specified timeout.
   *
   * @param callback - The callback that should be called when the time period has elapsed.
   *
   * @param milliseconds - The number of milliseconds before the callback should be called.
   *  Even if a timeout of 0 is used the callback will be executed asynchronouly.
   *
   * @param args - Optional variable argument list passed to the callback.
   *
   * @returns - returns a handle to the timeout, this can be used to cancel through clearTimeout method.
   */


  TimerManagement.prototype.setTimeout = function (callback, milliseconds) {
    var _this = this;

    var args = [];

    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }

    var timeoutId = 0; // Create the timer, and add a method to track the completion so we can
    // remove our tracked reference.

    timeoutId = window.setTimeout.apply(window, tslib_es6_spreadArrays([function () {
      _this.removeTimeout(timeoutId);

      callback.apply(void 0, args);
    }, milliseconds], args));
    this.timeouts.push(timeoutId);
    return timeoutId;
  };

  TimerManagement.prototype.dispose = function () {
    this.disposed = true;
    this.parent = null;
    this.clearAllTimers(); // Clear immediates.

    if (this.immediateIds) {
      for (var id in this.immediateIds) {
        if (this.immediateIds.hasOwnProperty(id)) {
          this.clearImmediate(parseInt(id, 10));
        }
      }
    }

    this.immediateIds = null;
  };
  /**
   * Creates a function that will delay the execution of func until after wait milliseconds have
   * elapsed since the last time it was invoked. Provide an options object to indicate that func
   * should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent calls
   * to the debounced function will return the result of the last func call.
   *
   * Note: If leading and trailing options are true func will be called on the trailing edge of
   * the timeout only if the the debounced function is invoked more than once during the wait
   * timeout.
   *
   * @param func - The function to debounce.
   * @param wait - The number of milliseconds to delay.
   * @param options - The options object.
   * @returns The new debounced function.
   */


  TimerManagement.prototype.debounce = function (func, wait, options) {
    var _this = this;

    if (this.disposed) {
      var noOpFunction = function () {
        /** Do nothing */
      };

      noOpFunction.cancel = function () {
        return;
      };

      noOpFunction.flush = function () {
        return null;
      };

      noOpFunction.pending = function () {
        return false;
      };

      return noOpFunction;
    }

    var waitMS = wait || 0;
    var leading = false;
    var trailing = true;
    var maxWait = null;
    var lastCallTime = 0;
    var lastExecuteTime = new Date().getTime();
    var lastResult;
    var lastArgs;
    var timeoutId = null;

    if (options) {
      leading = options.leading || false;
      trailing = options.trailing || true;
      maxWait = options.maxWait || null;
    }

    var markExecuted = function (time) {
      if (timeoutId) {
        _this.clearTimeout(timeoutId);

        timeoutId = null;
      }

      lastExecuteTime = time;
    };

    var invokeFunction = function (time) {
      markExecuted(time);
      lastResult = func.apply(null, lastArgs);
    };

    var callback = function (userCall) {
      var now = new Date().getTime();
      var executeImmediately = false;

      if (userCall) {
        if (leading && now - lastCallTime >= waitMS) {
          executeImmediately = true;
        }

        lastCallTime = now;
      }

      var delta = now - lastCallTime;
      var waitLength = waitMS - delta;
      var maxWaitDelta = now - lastExecuteTime;
      var maxWaitExpired = false;

      if (maxWait !== null) {
        // maxWait only matters when there is a pending callback
        if (maxWaitDelta >= maxWait && timeoutId) {
          maxWaitExpired = true;
        } else {
          waitLength = Math.min(waitLength, maxWait - maxWaitDelta);
        }
      }

      if (delta >= waitMS || maxWaitExpired || executeImmediately) {
        invokeFunction(now);
      } else if ((timeoutId === null || !userCall) && trailing) {
        timeoutId = _this.setTimeout(callback, waitLength);
      }

      return lastResult;
    };

    var pending = function () {
      return !!timeoutId;
    };

    var cancel = function () {
      if (pending()) {
        // Mark the debounced function as having executed
        markExecuted(new Date().getTime());
      }
    };

    var flush = function () {
      if (pending()) {
        invokeFunction(new Date().getTime());
      }

      return lastResult;
    }; // tslint:disable-next-line:no-any


    var resultFunction = function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      lastArgs = args;
      return callback(true);
    };

    resultFunction.cancel = cancel;
    resultFunction.flush = flush;
    resultFunction.pending = pending;
    return resultFunction;
  };
  /**
   * Creates a function that, when executed, will only call the func function at most once per
   * every wait milliseconds. Provide an options object to indicate that func should be invoked
   * on the leading and/or trailing edge of the wait timeout. Subsequent calls to the throttled
   * function will return the result of the last func call.
   *
   * Note: If leading and trailing options are true func will be called on the trailing edge of
   * the timeout only if the the throttled function is invoked more than once during the wait timeout.
   *
   * @param func - The function to throttle.
   * @param wait - The number of milliseconds to throttle executions to. Defaults to 0.
   * @param options - The options object.
   * @returns The new throttled function.
   */


  TimerManagement.prototype.throttle = function (func, wait, options) {
    var _this = this;

    if (this.disposed) {
      var noOpFunction = function () {
        /** Do nothing */
      };

      noOpFunction.cancel = function () {
        return;
      };

      noOpFunction.flush = function () {
        return null;
      };

      noOpFunction.pending = function () {
        return false;
      };

      return noOpFunction;
    }

    var waitMS = wait || 0;
    var leading = true;
    var trailing = true;
    var lastExecuteTime = 0;
    var lastResult; // tslint:disable-next-line:no-any

    var lastArgs;
    var timeoutId = null;

    if (options && typeof options.leading === "boolean") {
      leading = options.leading;
    }

    if (options && typeof options.trailing === "boolean") {
      trailing = options.trailing;
    }

    var callback = function (userCall) {
      var now = new Date().getTime();
      var delta = now - lastExecuteTime;
      var waitLength = leading ? waitMS - delta : waitMS;

      if (delta >= waitMS && (!userCall || leading)) {
        lastExecuteTime = now;

        if (timeoutId) {
          _this.clearTimeout(timeoutId);

          timeoutId = null;
        }

        lastResult = func.apply(null, lastArgs);
      } else if (timeoutId === null && trailing) {
        timeoutId = _this.setTimeout(callback, waitLength);
      }

      return lastResult;
    }; // tslint:disable-next-line:no-any


    var resultFunction = function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      lastArgs = args;
      return callback(true);
    };

    return resultFunction;
  };

  TimerManagement.prototype.removeInterval = function (intervalId) {
    var index = this.intervals.indexOf(intervalId);

    if (index >= 0) {
      this.intervals.splice(index, 1);
    }
  };

  TimerManagement.prototype.removeTimeout = function (timeoutId) {
    var index = this.timeouts.indexOf(timeoutId);

    if (index >= 0) {
      this.timeouts.splice(index, 1);
    }
  };

  return TimerManagement;
}();


// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Surface/Surface.css
var Surface = __webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Surface/Surface.css");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Surface/Surface.css

      
      
      
      
      
      
      
      
      

var Surface_options = {};

Surface_options.styleTagTransform = (styleTagTransform_default());
Surface_options.setAttributes = (setAttributesWithoutAttributes_default());

      Surface_options.insert = insertBySelector_default().bind(null, "head");
    
Surface_options.domAPI = (styleDomAPI_default());
Surface_options.insertStyleElement = (insertStyleElement_default());

var Surface_update = injectStylesIntoStyleTag_default()(Surface/* default */.Z, Surface_options);




       /* harmony default export */ const Surface_Surface = (Surface/* default */.Z && Surface/* default.locals */.Z.locals ? Surface/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Surface/Surface.Props.js
/**
 * Defines how spacing should be applied to the children of a container.
 */
var Spacing;

(function (Spacing) {
  Spacing[Spacing["condensed"] = 0] = "condensed";
  Spacing[Spacing["default"] = 1] = "default";
  Spacing[Spacing["relaxed"] = 2] = "relaxed";
})(Spacing || (Spacing = {}));

var SurfaceBackground;

(function (SurfaceBackground) {
  SurfaceBackground[SurfaceBackground["normal"] = 0] = "normal";
  SurfaceBackground[SurfaceBackground["neutral"] = 1] = "neutral";
  SurfaceBackground[SurfaceBackground["callout"] = 2] = "callout";
})(SurfaceBackground || (SurfaceBackground = {}));
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Surface/Surface.js





var SurfaceContext = react.createContext({
  background: SurfaceBackground.normal,
  horizontalClassName: undefined,
  spacing: undefined,
  verticalClassName: undefined
});
var Surface_Surface_Surface = function (props) {
  return react.createElement(SurfaceContext.Provider, {
    value: {
      background: props.background,
      horizontalClassName: getHorizontalSpacingClassName(props.spacing),
      spacing: props.spacing
    }
  }, props.children);
};

function getHorizontalSpacingClassName(spacing) {
  if (spacing !== undefined) {
    return horizontalSpacingClassNames[spacing];
  }

  return undefined;
}

var horizontalSpacingClassNames = ["bolt-condensed-horizontal-spacing", "bolt-default-horizontal-spacing", "bolt-relaxed-horizontal-spacing"];
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Surface.js


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Callout/Callout.Props.js
var ContentJustification;

(function (ContentJustification) {
  ContentJustification[ContentJustification["Start"] = 0] = "Start";
  ContentJustification[ContentJustification["Center"] = 1] = "Center";
  ContentJustification[ContentJustification["End"] = 2] = "End";
  ContentJustification[ContentJustification["Stretch"] = 3] = "Stretch";
})(ContentJustification || (ContentJustification = {}));

var ContentLocation;

(function (ContentLocation) {
  ContentLocation[ContentLocation["Start"] = 0] = "Start";
  ContentLocation[ContentLocation["Center"] = 1] = "Center";
  ContentLocation[ContentLocation["End"] = 2] = "End";
})(ContentLocation || (ContentLocation = {}));

var ContentOrientation;

(function (ContentOrientation) {
  ContentOrientation[ContentOrientation["Column"] = 0] = "Column";
  ContentOrientation[ContentOrientation["Row"] = 1] = "Row";
})(ContentOrientation || (ContentOrientation = {}));

var ContentSize;

(function (ContentSize) {
  ContentSize[ContentSize["Small"] = 0] = "Small";
  ContentSize[ContentSize["Medium"] = 1] = "Medium";
  ContentSize[ContentSize["Large"] = 2] = "Large";
  ContentSize[ContentSize["Auto"] = 3] = "Auto";
  ContentSize[ContentSize["ExtraLarge"] = 4] = "ExtraLarge";
})(ContentSize || (ContentSize = {}));
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Callout/Callout.js














var Callout_Callout_Callout =
/** @class */
function (_super) {
  __extends(Callout, _super);

  function Callout() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.calloutContent = react.createRef();
    return _this;
  }

  Callout.prototype.render = function () {
    var portalProps = this.props.portalProps;
    return react.createElement(Portal_Portal_Portal, tslib_es6_assign({}, portalProps, {
      className: Util_css(portalProps && portalProps.className, this.props.anchorElement && "bolt-layout-relative")
    }), react.createElement(CalloutContent, tslib_es6_assign({
      ref: this.calloutContent
    }, this.props)));
  };

  Callout.prototype.componentWillUnmount = function () {
    // We need to let the content handle the WillUnmount before the Portal, this
    // will ensure the the callout can deal with unmounting content that still has
    // focus. Otherwise the root will be detached from the document and focus will
    // have moved to the body.
    if (this.calloutContent.current) {
      this.calloutContent.current.portalWillUnmount();
    }
  };

  Callout.prototype.updateLayout = function () {
    if (this.calloutContent.current) {
      this.calloutContent.current.updateLayout();
    }
  };

  Callout.defaultProps = {
    blurDismiss: false,
    viewportChangeDismiss: true
  };
  return Callout;
}(react.Component);



var CalloutContent =
/** @class */
function (_super) {
  __extends(CalloutContent, _super);

  function CalloutContent(props) {
    var _this = _super.call(this, props) || this;

    _this.calloutElement = react.createRef();
    _this.relayoutTimer = new TimerManagement();
    _this.scrollListen = false;
    _this.scrollEvent = null;
    _this.initialScreenWidth = window.innerWidth;

    _this.onBlur = function () {
      _this.props.onDismiss && _this.props.onDismiss();
    };

    _this.onClick = function (event) {
      // If we click on the light dismiss div we will dismiss it.
      if (_this.props.lightDismiss && !event.defaultPrevented) {
        if (_this.props.onDismiss) {
          _this.props.onDismiss();
        }

        event.preventDefault();
      }
    };

    _this.onKeyDown = function (event) {
      // If we press escape from within the callout this will dismiss it.
      if (_this.props.escDismiss && event.which === KeyCode.escape && !event.defaultPrevented) {
        if (_this.props.onDismiss) {
          _this.props.onDismiss();
        }

        event.preventDefault();
      }
    };

    _this.onResize = function () {
      // Fix for issue where the soft keyboard on android closes callouts.
      if (_this.props.viewportChangeDismiss === true && (_this.initialScreenWidth !== window.innerWidth || !document.activeElement || document.activeElement.tagName !== "INPUT" && document.activeElement.tagName !== "TEXTAREA")) {
        _this.props.onDismiss && _this.props.onDismiss();
      } else if (_this.props.updateLayout) {
        _this.relayoutTimer.clearAllTimers();

        _this.relayoutTimer.setTimeout(function () {
          _this.updateLayout();
        }, 200);
      }
    };

    _this.onScroll = function (event) {
      if (_this.scrollListen) {
        _this.scrollEvent = event.nativeEvent;
      }
    };

    _this.onScrollDocument = function (event) {
      if (_this.scrollListen) {
        if (event === _this.scrollEvent) {
          _this.scrollEvent = null;
        } else {
          if (_this.props.viewportChangeDismiss === true) {
            var anchorElement = _this.props.anchorElement; // If the element containing the anchor is scrolled dismiss the callout.

            if (event.target && anchorElement && event.target.contains(anchorElement)) {
              _this.props.onDismiss && _this.props.onDismiss();
            }
          } else if (_this.props.updateLayout) {
            _this.relayoutTimer.setTimeout(function () {
              _this.updateLayout();
            }, 50);
          }
        }
      }
    }; // Track the element that had focus when we mounted.


    _this.focusElement = document.activeElement;
    _this.contentElement = props.contentRef || react.createRef();
    return _this;
  }

  CalloutContent.prototype.render = function () {
    var _this = this;

    var _a = this.props,
        blurDismiss = _a.blurDismiss,
        contentJustification = _a.contentJustification,
        contentLocation = _a.contentLocation,
        contentOrientation = _a.contentOrientation,
        focuszoneProps = _a.focuszoneProps,
        lightDismiss = _a.lightDismiss,
        modal = _a.modal,
        onAnimationEnd = _a.onAnimationEnd,
        onMouseEnter = _a.onMouseEnter,
        onMouseLeave = _a.onMouseLeave,
        anchorElement = _a.anchorElement;
    var content; // If we have both a FocusWithin and a FocusZone we need to use the functional version
    // of the FocusWithin to allow the FocusZone to contain the content directly.

    if (blurDismiss && focuszoneProps) {
      content = react.createElement(FocusWithin, {
        onBlur: this.onBlur,
        updateStateOnFocusChange: false
      }, function (props) {
        return react.createElement(FocusZone, tslib_es6_assign({}, focuszoneProps), _this.renderContent(props.onFocus, props.onBlur));
      });
    } else {
      content = this.renderContent(); // Add the focus tracker to dismiss the callout if we are dismissing on blur.

      if (blurDismiss) {
        content = react.createElement(FocusWithin, {
          onBlur: this.onBlur,
          updateStateOnFocusChange: false
        }, content);
      } // Add focus zone if focuszoneProperties are specified


      if (focuszoneProps) {
        content = react.createElement(FocusZone, tslib_es6_assign({}, focuszoneProps), content);
      }
    }

    var lightDismissDiv = lightDismiss ? react.createElement("div", {
      className: Util_css("absolute-fill bolt-light-dismiss", modal && "bolt-callout-modal"),
      onClick: this.onClick
    }) : null; // The callout is wrapped in a floating element in the portal.
    // If lightDismiss is enabled we will create an absolute-fill div to capture onClick events.

    return react.createElement(SurfaceContext.Provider, {
      value: {
        background: SurfaceBackground.callout
      }
    }, react.createElement("div", {
      className: "flex-row flex-grow"
    }, react.createElement("div", {
      className: Util_css(this.props.className, "bolt-callout absolute", contentLocation !== undefined && "absolute-fill", contentJustification === ContentJustification.Start && "justify-start", contentJustification === ContentJustification.Center && "justify-center", contentJustification === ContentJustification.End && "justify-end", contentLocation === ContentLocation.Start && "flex-start", contentLocation === ContentLocation.Center && "flex-center", contentLocation === ContentLocation.End && "flex-end", contentOrientation === ContentOrientation.Column && "flex-column", contentOrientation !== ContentOrientation.Column && "flex-row", modal && !lightDismiss && "bolt-callout-modal"),
      id: getSafeId(this.props.id),
      onAnimationEnd: onAnimationEnd,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave,
      onKeyDown: this.onKeyDown,
      ref: this.calloutElement,
      role: this.props.role
    }, !anchorElement && lightDismissDiv, content), !!anchorElement && lightDismissDiv));
  };

  CalloutContent.prototype.componentDidMount = function () {
    this.updateLayout(); // If this is an element relative layout we need to listen for scroll events
    // on the document and dismiss the callout if the scroll event didnt pass
    // through the callout.

    if (this.props.anchorElement) {
      window.addEventListener("resize", this.onResize);
      document.addEventListener("scroll", this.onScrollDocument, true);
      this.scrollListen = true;
    }
  };

  CalloutContent.prototype.componentDidUpdate = function () {
    if (this.props.updateLayout) {
      this.updateLayout();
    }
  };

  CalloutContent.prototype.componentWillUnmount = function () {
    if (this.scrollListen) {
      document.removeEventListener("scroll", this.onScrollDocument, true);
      window.removeEventListener("resize", this.onResize);
    }

    if (this.relayoutTimer) {
      this.relayoutTimer.clearAllTimers();
    }
  };

  CalloutContent.prototype.portalWillUnmount = function () {
    var contentElement = this.contentElement.current;
    var focusElement = this.focusElement; // If the callout has focus when unmounted we need to set focus back to the last element with focus.
    // Need to wait for next tick otherwise focus/blur events are not fired.

    if (focusElement && contentElement && contentElement.contains(document.activeElement)) {
      window.setTimeout(function () {
        // We need to make sure the active element is portal after the timeout.
        // It may have moved through other means before the timeout expires.
        // Set focus to the focusElement if our element contains focus, or if the focus has gone back to the document body
        if (contentElement.contains(document.activeElement) || document.activeElement === document.body || document.activeElement === null) {
          focusElement.focus();
        }
      }, 0);
    }
  };

  CalloutContent.prototype.updateLayout = function () {
    if (this.props.contentLocation === undefined) {
      if (this.calloutElement.current) {
        // Position the element based on the initial layout parameters.
        position(this.calloutElement.current, this.props.calloutOrigin || {
          horizontal: Location.start,
          vertical: Location.start
        }, this.props.anchorOffset, this.props.anchorElement, this.props.anchorOrigin, this.props.anchorPoint, this.props.anchorElement ? 5000 : 0); // Now that the component is placed at the requested location, update
        // the layout if the caller didnt request a fixed layout.

        if (!this.props.fixedLayout) {
          updateLayout(this.calloutElement.current, this.props.calloutOrigin || {
            horizontal: Location.start,
            vertical: Location.start
          }, this.props.anchorOffset, this.props.anchorElement, this.props.anchorOrigin, this.props.anchorPoint, this.props.anchorElement ? 5000 : 0);
        }
      }
    }
  };

  CalloutContent.prototype.renderContent = function (onFocus, onBlur) {
    var _a = this.props,
        contentJustification = _a.contentJustification,
        contentOrientation = _a.contentOrientation,
        contentSize = _a.contentSize,
        height = _a.height,
        width = _a.width;
    return react.createElement("div", {
      "aria-describedby": getSafeId(this.props.ariaDescribedBy),
      "aria-label": this.props.ariaLabel,
      "aria-labelledby": getSafeId(this.props.ariaLabelledBy),
      "aria-modal": this.props.modal,
      className: Util_css(this.props.contentClassName, "bolt-callout-content", this.props.contentShadow && "bolt-callout-shadow", contentJustification === ContentJustification.Stretch && "flex-grow", contentOrientation === ContentOrientation.Column && "flex-column", contentOrientation === ContentOrientation.Row && "flex-row", contentSize === ContentSize.Small && "bolt-callout-small", contentSize === ContentSize.Medium && "bolt-callout-medium", contentSize === ContentSize.Large && "bolt-callout-large", contentSize === ContentSize.ExtraLarge && "bolt-callout-extra-large", contentSize === ContentSize.Auto && "bolt-callout-auto"),
      onBlur: onBlur,
      onFocus: onFocus,
      onScroll: this.onScroll,
      ref: this.contentElement,
      role: this.props.role || "dialog",
      style: {
        height: height,
        width: width
      }
    }, this.props.children);
  };

  return CalloutContent;
}(react.Component);
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Callout.js


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/MouseWithin/MouseWithin.js






var MouseWithin =
/** @class */
function (_super) {
  __extends(MouseWithin, _super);

  function MouseWithin() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.enterTimeout = 0;
    _this.delayTimeout = 0;
    _this.mouse = false;
    /**
     * onMouseEnter method that should be attached to the onMouseEnter handler of the
     * continer's root element.
     */

    _this.onMouseEnter = function (event) {
      // If the mouse is just entering one of the child components and not just moving
      // from one child to another we will call the onMouseEnter delegate if supplied.
      if (!_this.mouse) {
        _this.mouse = true; // Clear any pending leave if we have left and re-entered the component during
        // the leaveTimeout.

        if (_this.delayTimeout) {
          window.clearTimeout(_this.delayTimeout);
          _this.delayTimeout = 0;
        }

        if (_this.props.enterDelay) {
          event.persist(); // persist does not preserve the currentTarget so we do that manually

          var currentTarget_1 = event.currentTarget;
          _this.enterTimeout = window.setTimeout(function () {
            _this.enterTimeout = 0;
            var newCurrentTarget = event.currentTarget;
            event.currentTarget = currentTarget_1;

            _this.mouseEntered(event);

            event.currentTarget = newCurrentTarget;
          }, _this.props.enterDelay);
        } else {
          _this.mouseEntered(event);
        }
      }
    };
    /**
     * onMouseLeave method that should be attached to the onMouseLeave handler of the
     * container's root element.
     */


    _this.onMouseLeave = function (event) {
      if (_this.mouse) {
        _this.mouse = false; // Clear any pending enterTimeout if we didnt stay over the element long enough.

        if (_this.enterTimeout) {
          window.clearTimeout(_this.enterTimeout);
          _this.enterTimeout = 0;
        }

        if (_this.props.leaveDelay) {
          event.persist();
          _this.delayTimeout = window.setTimeout(function () {
            _this.delayTimeout = 0;

            _this.mouseLeft(event);
          }, _this.props.leaveDelay);
        } else {
          _this.mouseLeft(event);
        }
      }
    };

    return _this;
  }

  MouseWithin.prototype.render = function () {
    var newProps = {
      onMouseEnter: this.onMouseEnter,
      onMouseLeave: this.onMouseLeave
    };

    if (isFunctionalChildren(this.props.children)) {
      var child = this.props.children; // For functional components we pass the hasMouse attribute as well.

      newProps.hasMouse = this.mouse;
      return child(newProps);
    } else {
      var child = react.Children.only(this.props.children);
      return react.cloneElement(child, tslib_es6_assign(tslib_es6_assign({}, child.props), newProps), child.props.children);
    }
  };

  MouseWithin.prototype.componentWillUnmount = function () {
    if (this.enterTimeout) {
      window.clearTimeout(this.enterTimeout);
    }

    if (this.delayTimeout) {
      window.clearTimeout(this.delayTimeout);
    }
  };
  /**
   * hasMouse returns true if the mouse is contained within the component
   * hierarchy. This includes portals, the element may or may not
   * be a direct descendant of the component in the DOM structure.
   */


  MouseWithin.prototype.hasMouse = function () {
    return this.mouse;
  };

  MouseWithin.prototype.mouseEntered = function (event) {
    // If we are tracking the mouse state we will force a component update.
    if (this.props.updateStateOnMouseChange) {
      this.forceUpdate();
    }

    if (this.props.onMouseEnter) {
      this.props.onMouseEnter(event);
    }
  };

  MouseWithin.prototype.mouseLeft = function (event) {
    // If we are tracking the mouse state we will force a component update.
    if (this.props.updateStateOnMouseChange) {
      this.forceUpdate();
    }

    if (this.props.onMouseLeave) {
      this.props.onMouseLeave(event);
    }
  };

  MouseWithin.defaultProps = {
    updateStateOnMouseChange: true
  };
  return MouseWithin;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/MouseWithin.js
 // @NOTE: Explicit export list due to typescript compiler bug 18644 where a require is generated for export * when const enum's are present


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/TooltipEx/Tooltip.js










var TooltipStatus;

(function (TooltipStatus) {
  TooltipStatus[TooltipStatus["hidden"] = 0] = "hidden";
  TooltipStatus[TooltipStatus["visible"] = 1] = "visible";
  TooltipStatus[TooltipStatus["fadingout"] = 2] = "fadingout";
})(TooltipStatus || (TooltipStatus = {}));

var tooltipId = 1;

var Tooltip_Tooltip =
/** @class */
function (_super) {
  __extends(Tooltip, _super);

  function Tooltip(props) {
    var _this = _super.call(this, props) || this;

    _this.contentRef = react.createRef();
    _this.tooltipId = "tooltip-" + tooltipId++;
    _this.focus = false;
    _this.mouse = false;

    _this.showTooltip = function (event) {
      var anchorElement = event.currentTarget;

      if (_this.shouldShowTooltip(anchorElement)) {
        // If no anchorOrigin was specified use the Mouse.position when we show the toolip.
        var anchorPoint = void 0;

        if (!_this.props.anchorOrigin) {
          anchorPoint = Mouse.position;
        }

        _this.mouse = true;
        document.addEventListener("keydown", _this.onKeyDown);

        _this.setState({
          anchorElement: anchorElement,
          anchorOffset: {
            horizontal: 8,
            vertical: 8
          },
          anchorOrigin: {
            horizontal: Location.center,
            vertical: Location.end
          },
          anchorPoint: anchorPoint,
          innerText: _this.props.overflowOnly && !_this.props.text ? anchorElement.innerText : undefined,
          tooltipStatus: TooltipStatus.visible,
          tooltipOrigin: {
            horizontal: Location.start,
            vertical: Location.start
          }
        });
      }
    };

    _this.closeTooltip = function () {
      if (!(_this.focus && getFocusVisible()) && _this.state.tooltipStatus === TooltipStatus.visible) {
        _this.mouse = false;
        document.removeEventListener("keydown", _this.onKeyDown);

        _this.setState({
          tooltipStatus: _this.getDismissStatus()
        });
      }
    };

    _this.onKeyDown = function (event) {
      var _a;

      if (event.which === KeyCode.escape && _this.state.tooltipStatus === TooltipStatus.visible) {
        _this.closeTooltip();
      }

      if (event.which === KeyCode.ctrl && _this.state.tooltipStatus === TooltipStatus.visible) {
        var container = _this.contentRef.current;
        var selectionNode = (_a = window.getSelection()) === null || _a === void 0 ? void 0 : _a.anchorNode;
        var hasSelectionInTooltip = container && selectionNode && container.contains(selectionNode); // Ctrl keystroke anywhere will dismiss the callout as per MAS 1.4.13,
        // except if user has selected something inside, in which case we allow Ctrl-C.

        if (!hasSelectionInTooltip) {
          _this.closeTooltip();
        }
      }
    };

    _this.onAnimationEnd = function () {
      if (_this.state.tooltipStatus === TooltipStatus.fadingout) {
        _this.setState({
          tooltipStatus: TooltipStatus.hidden
        });
      }
    };

    _this.getDismissStatus = function () {
      return _this.props.disabled ? TooltipStatus.hidden : TooltipStatus.fadingout;
    };

    _this.shouldShowTooltip = function (anchorElement) {
      if (_this.state.tooltipStatus !== TooltipStatus.hidden) {
        return false;
      } // If the tooltip only appears when the anchorElement overflows its parent then
      // we need to check on mouse enter.


      if (_this.props.overflowOnly && !_this.overflowDetected(anchorElement)) {
        return false;
      } // Dont show the tooltip if there is not content to show.


      if (!(_this.props.text || _this.props.renderContent || anchorElement.innerText && _this.props.overflowOnly)) {
        return false;
      }

      return !_this.props.disabled;
    };

    _this.overflowDetected = props.overflowDetected || overflowDetected;
    _this.state = {
      tooltipStatus: TooltipStatus.hidden
    };
    return _this;
  }

  Tooltip.prototype.render = function () {
    var _this = this;

    return react.createElement(MouseWithin, {
      leaveDelay: 50,
      enterDelay: this.props.delayMs,
      onMouseLeave: this.closeTooltip,
      onMouseEnter: this.showTooltip
    }, function (mouseWithinEvents) {
      var child = react.Children.only(_this.props.children);
      var id = _this.props.id || _this.tooltipId;
      var showTooltip = _this.state.tooltipStatus !== TooltipStatus.hidden && !_this.props.disabled && _this.state.anchorElement; // Save the existing events we will potentially proxy.

      var existingMouseEnter = child.props.onMouseEnter;
      var existingMouseLeave = child.props.onMouseLeave;
      var existingKeyDown = child.props.onKeyDown;
      var existingBlur;
      var existingFocus;

      var onMouseEnter = function (event) {
        if (mouseWithinEvents.onMouseEnter) {
          mouseWithinEvents.onMouseEnter(event);
        }

        if (existingMouseEnter) {
          existingMouseEnter(event);
        }
      };

      var onMouseLeave = function (event) {
        if (mouseWithinEvents.onMouseLeave) {
          mouseWithinEvents.onMouseLeave(event);
        }

        if (existingMouseLeave) {
          existingMouseLeave(event);
        }
      };

      var onKeyDown = function (event) {
        if (event.which === KeyCode.escape && showTooltip) {
          _this.setState({
            tooltipStatus: TooltipStatus.hidden
          });

          event.preventDefault();
        }

        if (existingKeyDown) {
          existingKeyDown(event);
        }
      }; // to not let consumers have to care about an implementation detail, wrap
      // the tooltip id in getSafeId and use that as the aria-describedBy property
      // on the child.


      var ariaDescribedById = _this.props.addAriaDescribedBy && _this.state.tooltipStatus !== TooltipStatus.hidden ? getSafeId(id) : undefined;

      var childProps = tslib_es6_assign(tslib_es6_assign({}, child.props), {
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave,
        onKeyDown: onKeyDown
      });

      if (childProps["aria-describedby"] === undefined) {
        childProps["aria-describedby"] = ariaDescribedById;
      }

      var clonedChild = react.cloneElement(child, childProps, child.props.children); // If this tooltip should become visible when focus is within the component add the focus tracking.

      if (_this.props.showOnFocus && (_this.props.text || _this.props.renderContent || _this.props.overflowOnly)) {
        existingBlur = child.props.onBlur;
        existingFocus = child.props.onFocus;

        var onBlur = function () {
          _this.focus = false;

          if (!_this.mouse) {
            _this.closeTooltip();
          }

          if (existingBlur) {
            existingBlur();
          }
        };

        var onFocus = function (event) {
          var anchorElement = event.currentTarget;

          if (_this.shouldShowTooltip(anchorElement)) {
            _this.focus = true;
            getFocusVisible() && _this.setState({
              anchorElement: event.target,
              anchorOffset: {
                horizontal: 0,
                vertical: 8
              },
              anchorOrigin: {
                horizontal: Location.center,
                vertical: Location.end
              },
              anchorPoint: undefined,
              innerText: _this.props.overflowOnly && !_this.props.text ? anchorElement.innerText : undefined,
              tooltipStatus: TooltipStatus.visible,
              tooltipOrigin: {
                horizontal: Location.center,
                vertical: Location.start
              }
            });
          }

          if (existingFocus) {
            existingFocus(event);
          }
        };

        clonedChild = react.createElement(FocusWithin, {
          onBlur: onBlur,
          onFocus: onFocus,
          updateStateOnFocusChange: false
        }, clonedChild);
      }

      return react.createElement(react.Fragment, null, clonedChild, showTooltip ? react.createElement(Callout_Callout_Callout, {
        anchorElement: _this.state.anchorElement,
        anchorOffset: _this.props.anchorOffset || _this.state.anchorOffset,
        anchorOrigin: _this.props.anchorOrigin || _this.state.anchorOrigin,
        anchorPoint: _this.state.anchorPoint,
        calloutOrigin: _this.props.tooltipOrigin || _this.state.tooltipOrigin,
        className: Util_css(_this.props.className, "bolt-tooltip", _this.state.tooltipStatus === TooltipStatus.fadingout && "bolt-tooltip-fade-out"),
        fixedLayout: _this.props.fixedLayout,
        id: id,
        key: id,
        onAnimationEnd: _this.onAnimationEnd,
        onMouseEnter: mouseWithinEvents.onMouseEnter,
        onMouseLeave: mouseWithinEvents.onMouseLeave,
        portalProps: {
          className: "bolt-tooltip-portal"
        },
        contentRef: _this.contentRef,
        role: "tooltip"
      }, react.createElement("div", {
        className: "bolt-tooltip-content body-m"
      }, _this.props.renderContent && _this.props.renderContent() || _this.props.text || _this.state.innerText)) : null);
    });
  };

  Tooltip.prototype.componentWillUnmount = function () {
    document.removeEventListener("keydown", this.onKeyDown);
  };

  Tooltip.defaultProps = {
    delayMs: 250,
    showOnFocus: true
  };
  return Tooltip;
}(react.Component);



function overflowDetected(anchorElement) {
  return anchorElement.scrollWidth > Math.ceil(anchorElement.offsetWidth);
}
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/TooltipEx.js


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Icon/Icon.js







function Icon_Icon(props) {
  if (props.render) {
    return props.render(props.className);
  }

  var iconWrapperProps = {
    id: getSafeId(props.id),
    onClick: props.onClick,
    onMouseDown: props.onMouseDown,
    onKeyDown: props.onKeyDown,
    role: props.role ? props.role : props.ariaLabel || props.ariaLabelledBy ? "img" : undefined,
    style: props.style,
    tabIndex: props.tabIndex,
    title: props.title
  };
  var iconClassName = Util_css(props.className, "flex-noshrink", props.iconName && "fabric-icon", props.iconName && "ms-Icon--" + props.iconName, props.size);
  var ariaHidden = props.ariaHidden !== undefined ? props.ariaHidden : "true";
  var icon = props.ariaLabel || props.ariaLabelledBy || props.ariaExpanded !== undefined ? react.createElement("span", tslib_es6_assign({
    "aria-expanded": props.ariaExpanded,
    "aria-label": props.ariaLabel,
    "aria-labelledby": getSafeId(props.ariaLabelledBy),
    className: props.wrapperClass
  }, iconWrapperProps), react.createElement("span", {
    "aria-hidden": ariaHidden,
    className: iconClassName
  })) : react.createElement("span", tslib_es6_assign({
    "aria-hidden": ariaHidden,
    className: iconClassName
  }, iconWrapperProps));

  if (props.tooltipProps) {
    icon = react.createElement(Tooltip_Tooltip, tslib_es6_assign({}, props.tooltipProps), icon);
  }

  return icon;
}
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Icon/Icon.Props.js
/**
 * Note the default IconSize when a custom size is not specified matches
 * the standard body-m font or 0.875rem - 14px.
 */
var IconSize;

(function (IconSize) {
  /**
   * Inherit has the icon take on the current text size.
   */
  IconSize["inherit"] = "";
  /**
   * 1.5rem - 24px
   */

  IconSize["large"] = "large";
  /**
   * 1rem - 16px
   */

  IconSize["medium"] = "medium";
  /**
   * 0.75rem - 12px
   */

  IconSize["small"] = "small";
})(IconSize || (IconSize = {}));
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Icon.js


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Utilities/Focus.js


/**
 * getTabIndex takes in a standard set of focus related properties to determine
 * the correct tabIndex for the element.
 */

function getTabIndex(props, focusGroupContext) {
  // Return an explicit tabIndex if one was requested.
  if (props.tabIndex !== undefined) {
    return props.tabIndex;
  } // Make element tabbable if:
  //  The element is not disabled,
  //  The element does not have the excludeTabStop property
  //  Optionally, the component is within a focusGroup and is the focused element


  if (!props.disabled && !props.excludeTabStop && (!focusGroupContext || focusGroupContext.onFocus === noop || focusGroupContext.focusedElementId === props.id)) {
    return 0;
  } // Allow the element to have focus as long as the excludeFocusZone was not supplied.


  if (!props.excludeFocusZone) {
    return -1;
  } // The element is not tabbable and wont have a tabIndex, therefore it can't get focus.


  return undefined;
}
var targetToFocusOnNextRepaint = (/* unused pure expression or super */ null && (undefined));
/**
 * Sets focus on the next frame OR after setTimeout(0)
 * If you pass an IFocusable instead of an HTMLElement it'll use setTimeout instead of window.requestAnimationFrame
 */

function focusAsync(element) {
  // If we've called this method this frame, re-set the element to focus but don't hook up another handler
  if (targetToFocusOnNextRepaint) {
    targetToFocusOnNextRepaint = element;
    return;
  } // If this is the first time we've called this this frame, set an event handler
  // or schedule it async if we can't get the window element


  targetToFocusOnNextRepaint = element;
  var window = getWindow(element);

  if (window) {
    window.requestAnimationFrame(function () {
      if (targetToFocusOnNextRepaint) {
        targetToFocusOnNextRepaint.focus();
      }

      targetToFocusOnNextRepaint = undefined;
    });
  } else {
    setTimeout(function () {
      if (targetToFocusOnNextRepaint) {
        targetToFocusOnNextRepaint.focus();
      }
    });
  }
}
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Button/Button.js













var Button_Button_Button =
/** @class */
function (_super) {
  __extends(Button, _super);

  function Button() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.buttonElement = react.createRef();

    _this.onClick = function (event) {
      if (!_this.props.disabled) {
        var onClick = _this.props.onClick; // @NOTE: Safari doesnt set focus to buttons when they are clicked, we need this
        //  to help manage the focus state for callouts.

        _this.focus();

        if (onClick) {
          onClick(event);
        }
      } else {
        event.preventDefault();
      }
    };

    _this.onFocus = function (event) {
      if (_this.props.onFocus) {
        _this.props.onFocus(event);
      }

      if (_this.props.id) {
        // @NOTE: Due to test issues using React.16.3.2 we MUST validate the onFocus method.
        _this.context.onFocus && _this.context.onFocus(_this.props.id);
      }
    };

    _this.onKeyDown = function (event) {
      if (!event.defaultPrevented && !_this.props.disabled) {
        if (event.which === KeyCode.enter || event.which === KeyCode.space) {
          if (_this.props.onClick) {
            _this.props.onClick(event);
          }

          if (!_this.props.href) {
            event.preventDefault();
          }
        } else if (_this.props.onKeyDown) {
          _this.props.onKeyDown(event);
        }
      }
    };

    _this.onMouseDown = function (event) {
      if (!event.defaultPrevented) {
        if (_this.props.disabled) {
          event.preventDefault();
        }
      }

      var onMouseDown = _this.props.onMouseDown;

      if (onMouseDown) {
        onMouseDown(event);
      }
    };

    _this.onMouseLeave = function (event) {
      if (!_this.props.disabled) {
        var onMouseLeave = _this.props.onMouseLeave;

        if (onMouseLeave) {
          onMouseLeave(event);
        }
      }
    };

    _this.onMouseOver = function (event) {
      if (!_this.props.disabled) {
        var onMouseOver = _this.props.onMouseOver;

        if (onMouseOver) {
          onMouseOver(event);
        }
      }
    };

    return _this;
  }

  Button.prototype.render = function () {
    var _this = this;

    if (false) {} // Determine if the button is an iconOnly button.


    var iconOnly = this.props.iconProps && !this.props.text && childCount(this.props.children) === 0;
    var tooltipProps = this.props.tooltipProps !== undefined ? this.props.tooltipProps : iconOnly && this.props.ariaLabel ? {
      text: this.props.ariaLabel
    } : undefined;
    return react.createElement(FocusZoneContext.Consumer, null, function (zoneContext) {
      var ButtonType = _this.props.href ? "a" : "button"; // @TODO (line-height): remove the body-m from the text once the line-height is applied globally.

      var role = _this.props.role || (_this.props.href ? "link" : "button");
      var button = // @ts-ignore TypeScript no longer works with dynamic intrinsic component types.
      react.createElement(ButtonType, {
        autoFocus: !_this.props.href ? _this.props.autoFocus : undefined,
        "aria-controls": getSafeId(_this.props.ariaControls),
        "aria-describedby": getSafeId(_this.props.ariaDescribedBy),
        "aria-disabled": _this.props.disabled,
        "aria-expanded": _this.props.ariaExpanded,
        "aria-haspopup": _this.props.ariaHasPopup,
        "aria-label": _this.props.ariaLabel,
        "aria-labelledby": _this.props.ariaLabelledBy,
        "aria-setsize": _this.props.ariaSetSize,
        "aria-posinset": _this.props.ariaPosInSet,
        "aria-selected": _this.props.ariaSelected,
        "aria-checked": _this.props.ariaChecked,
        "aria-pressed": _this.props.ariaPressed,
        "aria-roledescription": _this.props.ariaRoleDescription,
        className: Util_css(_this.props.className, "bolt-button", _this.props.href && "bolt-link-button", _this.props.iconProps && "bolt-icon-button", _this.props.danger && "danger", _this.props.disabled ? "disabled" : "enabled", _this.props.primary && "primary", _this.props.subtle && "subtle", iconOnly && "icon-only", "bolt-focus-treatment"),
        "data-focuszone": !_this.props.disabled && !_this.props.excludeFocusZone ? Util_css(_this.props.focusZoneId, zoneContext.focuszoneId) : undefined,
        "data-index": _this.props.dataIndex,
        "data-is-focusable": !_this.props.excludeFocusZone,
        href: !_this.props.disabled ? _this.props.href : undefined,
        id: getSafeId(_this.props.id),
        onBlur: _this.props.onBlur,
        onClick: _this.onClick,
        onMouseLeave: _this.onMouseLeave,
        onMouseOver: _this.onMouseOver,
        onKeyDown: _this.onKeyDown,
        onMouseDown: _this.onMouseDown,
        onFocus: _this.onFocus,
        rel: _this.props.rel,
        role: role,
        style: _this.props.style,
        tabIndex: getTabIndex(_this.props, _this.context),
        target: _this.props.target,
        type: _this.props.type ? _this.props.type : !_this.props.href ? "button" : undefined,
        ref: _this.buttonElement
      }, _this.props.iconProps && Icon_Icon(tslib_es6_assign(tslib_es6_assign({
        size: IconSize.medium
      }, _this.props.iconProps), {
        className: Util_css(_this.props.iconProps.className, "left-icon")
      })), _this.props.text && react.createElement("span", {
        className: "bolt-button-text body-m"
      }, _this.props.text), _this.props.children);

      if (tooltipProps) {
        button = react.createElement(Tooltip_Tooltip, tslib_es6_assign({
          addAriaDescribedBy: true
        }, tooltipProps), button);
      }

      return button;
    });
  };

  Button.prototype.focus = function () {
    if (this.buttonElement.current) {
      this.buttonElement.current.focus();
    }
  };

  Button.contextType = FocusGroupContext;
  return Button;
}(react.Component);


// EXTERNAL MODULE: ./node_modules/azure-devops-ui/Components/Button/Button.Props.js
var Button_Props = __webpack_require__("./node_modules/azure-devops-ui/Components/Button/Button.Props.js");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Core/Util/Accessibility.js
/**
 * Maximum number of messages to have in the containers that announce() uses.
 */
var MaxAnnounceChildren = 1;
/**
 * Maximum number of containers for announce() to have per assertiveness level.
 */

var MaxAnnounceContainers = 10;
/**
 * Default number of milliseconds to wait before announcing the start of an operation.
 */

var DefaultAnnounceDelay = 1000;
/**
 * ID of the container for the announce() containers.
 */

var ParentContainerId = "utils-accessibility-announce";
var nextId = 0;
/**
 * Gets the parent container for all the announce containers.
 */

function getAnnounceContainer() {
  var container = document.getElementById(ParentContainerId);

  if (!container) {
    container = document.createElement("div");
    container.id = ParentContainerId;
    container.classList.add("visually-hidden");
    document.body.appendChild(container);
  }

  return container;
}
/**
 * Causes screen readers to read the given message.
 * @param message
 * @param assertive if true, the screen reader will read the announcement immediately, instead of waiting for "the next graceful opportunity"
 */


function announce(message, assertive, pause) {
  if (assertive === void 0) {
    assertive = false;
  }

  if (pause === void 0) {
    pause = 100;
  }

  if (!message) {
    return;
  }

  var assertiveness = assertive ? "assertive" : "polite";
  var parentContainer = getAnnounceContainer();
  var containerList = parentContainer.getElementsByClassName(assertiveness);
  var container = containerList.length > 0 ? containerList[containerList.length - 1] : null;

  if (!container || container.childElementCount >= MaxAnnounceChildren) {
    container = document.createElement("div");
    container.id = ParentContainerId + nextId++;
    container.setAttribute("aria-live", assertiveness);
    container.classList.add(assertiveness);
    container.setAttribute("aria-relevant", "additions");
    parentContainer.appendChild(container); // getElementsByClassName() returns a live list so the new container is already in this list

    if (containerList.length > MaxAnnounceContainers) {
      // remove old containers
      parentContainer.removeChild(containerList[0]);
    }

    window.setTimeout(function () {
      // live regions get announced on update not create, so wait a bit and then update
      announce(message, assertive);
    }, pause);
  } else {
    var child = document.createElement("p");
    child.textContent = message;
    container.appendChild(child); // toggling the visibility like this seems to help Edge

    container.style.visibility = "hidden";
    container.style.visibility = "visible";
  }
}
/**
 * Class for announcing, through a screen reader, when a single operation begins and ends. Supports
 * a delay before the starting announcement so that quick operations don't trigger announcements.
 *
 * To use, create a ProgressAnnouncer, and call completed()
 */

var ProgressAnnouncer =
/** @class */
function () {
  function ProgressAnnouncer(options) {
    this._startAnnounced = false;
    this._completed = false;
    this._options = options;

    this._start();
  }
  /**
   * Create a ProgressAnnouncer for a promise that will announce promise start and completion/rejection.
   * @param promise
   * @param options
   */


  ProgressAnnouncer.forPromise = function (promise, options) {
    var announcer = new ProgressAnnouncer(options);
    promise.then(function () {
      announcer.announceCompleted();
    }, function () {
      announcer.announceError();
    });
    return announcer;
  };
  /**
   * Call this method when the operation has completed. This will cause the end message to be
   * announced if the start message was announced.
   */


  ProgressAnnouncer.prototype.announceCompleted = function () {
    if (!this._completed) {
      this._completed = true;

      if (this._startAnnounced) {
        announce(this._options.announceEndMessage);
      }
    }
  };
  /**
   * Call this method if the operation completes with an error. This will cause the error message
   * to be announced regardless of whether or not the start message was announced.
   */


  ProgressAnnouncer.prototype.announceError = function () {
    if (!this._completed) {
      this._completed = true;
      announce(this._options.announceErrorMessage);
    }
  };
  /**
   * Call this method to stop any announcements from being made
   */


  ProgressAnnouncer.prototype.cancel = function () {
    this._completed = true;
  };

  ProgressAnnouncer.prototype._start = function () {
    var _this = this; // this._announceDelay = Utils_Core.delay(this, this._options.announceStartDelay !== undefined ? this._options.announceStartDelay : DefaultAnnounceDelay, () => {


    window.setTimeout(function () {
      if (!_this._completed) {
        announce(_this._options.announceStartMessage);
      }

      _this._startAnnounced = true;
    }, this._options.announceStartDelay !== undefined ? this._options.announceStartDelay : DefaultAnnounceDelay);
  };

  return ProgressAnnouncer;
}();


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Resources.Core.js
var AgoHours = "{0}h ago";
var AgoMinutes = "{0}m ago";
var Collapsed = "Collapsed";
var DayAtTimeFormat = "{0} at {1}";
var DaysHoursMinutes = "{0}d {1}h {2}m";
var Expanded = "Expanded";
var FriendlyNumberBillionsFormat = "{0}B+";
var FriendlyNumberMillionsFormat = "{0}M+";
var FriendlyNumberThousandsFormat = "{0}K+";
var HoursMinutesSeconds = "{0}h {1}m {2}s";
var JustNow = "Just now";
var LessThanASecond = "<1s";
var MinutesSeconds = "{0}m {1}s";
var Seconds = "{0}s";
var Today = "Today";
var Yesterday = "Yesterday";
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Expandable/Expandable.js












var Expandable =
/** @class */
function (_super) {
  __extends(Expandable, _super);

  function Expandable() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.state = {
      expanded: false
    };

    _this.collapse = function () {
      if (_this.state.expanded) {
        _this.setState({
          expanded: false
        });

        announce(Collapsed, true);

        if (_this.props.onCollapse) {
          _this.props.onCollapse();
        }
      }
    };

    _this.expand = function () {
      if (!_this.state.expanded) {
        _this.setState({
          expanded: !_this.state.expanded
        });

        announce(Expanded, true);

        if (_this.props.onExpand) {
          _this.props.onExpand();
        }
      }
    };

    _this.onClick = function (event) {
      if (!_this.props.disabled) {
        if (!event.defaultPrevented) {
          if (!_this.state.expanded && !_this.ignoreClick) {
            _this.expand();

            event.preventDefault();
          }
        }
      } else {
        event.preventDefault();
      }
    };

    _this.onKeyDown = function (event) {
      if (!event.defaultPrevented) {
        // If the control key is pressed we want to navigate in a focus zone and not open the menu
        if (event.ctrlKey) {
          return;
        }

        if (!_this.state.expanded && _this.isExpandKey(event)) {
          _this.ignoreClick = false;

          _this.expand();

          event.preventDefault();
        }
      }
    };

    _this.onMouseDown = function () {
      // If the callout is expanded when we click on it, we want to ignore the click
      // and let the blur occur and close the callout.
      _this.ignoreClick = _this.state.expanded;
    };

    return _this;
  }

  Expandable.prototype.render = function () {
    var expanded = this.state.expanded;
    var child = this.props.children;
    return react.createElement(react.Fragment, null, child({
      expanded: expanded,
      onClick: this.onClick,
      onKeyDown: this.onKeyDown,
      onMouseDown: this.onMouseDown
    }), expanded && this.props.renderCallout && this.props.renderCallout());
  };

  Expandable.prototype.isExpandKey = function (event) {
    return Array.isArray(this.props.expandKey) && this.props.expandKey.indexOf(event.which) !== -1 || event.which === this.props.expandKey;
  };

  Expandable.defaultProps = {
    expandKey: KeyCode.downArrow
  };
  return Expandable;
}(react.Component);


var expandableContainerId = 1;
/**
 * ExpandableContainer is a specialized form of Expandable and generally shouldn't be used.
 * It's main goal is to provider mouse enter/leave behavior for collapsing.
 *
 * @NOTE: This component MAY be deprecated in the future, use <Expandable /> instead.
 */

var ExpandableContainer =
/** @class */
function (_super) {
  __extends(ExpandableContainer, _super);

  function ExpandableContainer() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.element = react.createRef();
    _this.expandedOnHover = false;
    _this.expandable = react.createRef();
    _this.expandableId = "expandableContainer-" + expandableContainerId++;

    _this.collapse = function () {
      if (_this.expandable.current) {
        _this.expandable.current.collapse();
      }
    };

    _this.expand = function () {
      if (_this.expandable.current) {
        _this.expandable.current.expand();
      }
    };

    _this.onFocus = function (event) {
      // Only call onFocus for the FocusGroup is the expandable itself is getting focus.
      // Otherwise it is going to a child element and it should manage focus appropriately.
      if (_this.props.id && (!_this.element.current || _this.element.current === event.target)) {
        _this.context.onFocus(_this.props.id);
      }
    };

    _this.onMouseEnter = function () {
      if (_this.props.expandOnHover) {
        _this.expandedOnHover = true;
        setFocusVisible(false);

        _this.expand();
      }
    };

    _this.onMouseLeave = function () {
      if (_this.expandedOnHover) {
        _this.collapse();
      }
    };

    _this.renderCallout = function () {
      return _this.props.renderCallout(_this.expandable.current, _this.expandableId, _this.element.current);
    };

    return _this;
  }

  ExpandableContainer.prototype.render = function () {
    var _this = this;

    return react.createElement(FocusZoneContext.Consumer, null, function (zoneContext) {
      return react.createElement(MouseWithin, {
        enterDelay: _this.props.expandDelay,
        leaveDelay: _this.props.collapseDelay,
        onMouseEnter: _this.onMouseEnter,
        onMouseLeave: _this.onMouseLeave,
        updateStateOnMouseChange: false
      }, function (mouseContext) {
        return react.createElement(Expandable, tslib_es6_assign({}, _this.props, {
          renderCallout: undefined,
          ref: _this.expandable
        }), function (expandableProps) {
          return react.createElement("div", {
            "aria-controls": expandableProps.expanded ? getSafeId(_this.props.expandableId) : undefined,
            "aria-expanded": expandableProps.expanded,
            "aria-haspopup": true,
            "aria-label": _this.props.ariaLabel,
            className: Util_css(_this.props.className, "bolt-expandable-container flex-row flex-center", expandableProps.expanded && "expanded"),
            "data-focuszone": !_this.props.disabled && !_this.props.excludeFocusZone ? zoneContext.focuszoneId : undefined,
            id: getSafeId(_this.props.id),
            onClick: expandableProps.onClick,
            onFocus: _this.onFocus,
            onKeyDown: expandableProps.onKeyDown,
            onMouseDown: expandableProps.onMouseDown,
            onMouseEnter: mouseContext.onMouseEnter,
            onMouseLeave: mouseContext.onMouseLeave,
            role: _this.props.role || "button",
            tabIndex: getTabIndex(_this.props, _this.context),
            ref: _this.element
          }, _this.props.children, expandableProps.expanded && _this.renderCallout());
        });
      });
    });
  };

  ExpandableContainer.contextType = FocusGroupContext;
  ExpandableContainer.defaultProps = {
    collapseDelay: 250,
    expandDelay: 250,
    expandKey: [KeyCode.downArrow, KeyCode.enter]
  };
  return ExpandableContainer;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Expandable.js


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Button/ExpandableButton.js











var buttonId = 1;

var ExpandableButton_ExpandableButton =
/** @class */
function (_super) {
  __extends(ExpandableButton, _super);

  function ExpandableButton(props) {
    var _this = _super.call(this, props) || this;

    _this.buttonElement = react.createRef();
    _this.expandable = react.createRef();

    _this.collapse = function () {
      if (_this.expandable.current) {
        _this.expandable.current.collapse();
      }
    };

    _this.expand = function () {
      if (_this.expandable.current) {
        _this.expandable.current.expand();
      }
    };

    _this.renderCallout = function () {
      return _this.props.renderCallout(_this, _this.dropdownId, _this.props.anchorElement ? _this.props.anchorElement : !_this.props.anchorPoint ? _this.containerElement.current ? _this.containerElement.current : undefined : undefined, _this.props.anchorOffset || {
        horizontal: 0,
        vertical: 0
      }, _this.props.anchorOrigin || {
        horizontal: Location.end,
        vertical: Location.end
      }, _this.props.anchorPoint, _this.props.dropdownOrigin || {
        horizontal: Location.end,
        vertical: Location.start
      });
    };

    _this.dropdownId = props.dropdownId || "dropdown-" + buttonId++;
    _this.containerElement = props.containerRef || react.createRef();
    return _this;
  }

  ExpandableButton.prototype.render = function () {
    var _this = this; // We disable the tooltip when we are expanded. Make sure we dont remove it
    // from the component tree, this causes the button element to get regenerated
    // and focus wont return.


    return react.createElement(Expandable, {
      disabled: this.props.disabled,
      expandKey: this.props.expandKey,
      onCollapse: this.props.onCollapse,
      onExpand: this.props.onExpand,
      renderCallout: this.renderCallout,
      ref: this.expandable
    }, function (expandableProps) {
      var _a, _b;

      return react.createElement("div", {
        className: Util_css(_this.props.className, "bolt-expandable-button inline-flex-row"),
        onMouseDown: expandableProps.onMouseDown,
        onKeyDown: expandableProps.onKeyDown,
        ref: _this.containerElement
      }, react.createElement(Button_Button_Button, tslib_es6_assign({}, _this.props, {
        ariaControls: expandableProps.expanded ? _this.dropdownId : undefined,
        ariaExpanded: expandableProps.expanded,
        ariaHasPopup: true,
        ariaLabel: (_a = _this.props.ariaLabel) !== null && _a !== void 0 ? _a : _this.props.tooltipProps && _this.props.tooltipProps.text ? (_b = _this.props.tooltipProps) === null || _b === void 0 ? void 0 : _b.text : "",
        className: Util_css(!_this.props.text && !_this.props.children && _this.props.iconProps && "icon-only", expandableProps.expanded && "active", _this.props.buttonClassName),
        onClick: function (e) {
          expandableProps.onClick(e);

          if (_this.props.onClick) {
            _this.props.onClick(e);
          }

          e.preventDefault();
        },
        ref: _this.buttonElement,
        tooltipProps: _this.props.tooltipProps ? tslib_es6_assign(tslib_es6_assign({}, _this.props.tooltipProps), {
          disabled: expandableProps.expanded
        }) : undefined
      }), _this.props.children, !_this.props.hideDropdownIcon ? Icon_Icon({
        key: "dropdown-icon",
        className: "icon-right font-weight-normal",
        iconName: "ChevronDownMed",
        size: IconSize.small
      }) : undefined));
    });
  };

  ExpandableButton.prototype.focus = function () {
    if (this.buttonElement.current) {
      this.buttonElement.current.focus();
    }
  };

  ExpandableButton.defaultProps = {
    expandKey: [KeyCode.downArrow, KeyCode.enter]
  };
  return ExpandableButton;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Button.js




// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Panel/Panel.css
var Panel = __webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Panel/Panel.css");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Panel/Panel.css

      
      
      
      
      
      
      
      
      

var Panel_options = {};

Panel_options.styleTagTransform = (styleTagTransform_default());
Panel_options.setAttributes = (setAttributesWithoutAttributes_default());

      Panel_options.insert = insertBySelector_default().bind(null, "head");
    
Panel_options.domAPI = (styleDomAPI_default());
Panel_options.insertStyleElement = (insertStyleElement_default());

var Panel_update = injectStylesIntoStyleTag_default()(Panel/* default */.Z, Panel_options);




       /* harmony default export */ const Panel_Panel = (Panel/* default */.Z && Panel/* default.locals */.Z.locals ? Panel/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Core/Util/Screen.js


var ScreenBreakpoints;

(function (ScreenBreakpoints) {
  /**
   * Smallest breakpoint used to react which usually corresponds to a mobile screen < 600px.
   */
  ScreenBreakpoints[ScreenBreakpoints["xsmall"] = 1] = "xsmall";
  /**
   * Medium breakpoint used to react when the screen size >= 600px and less than
   * the next breakpoint if exists.
   */

  ScreenBreakpoints[ScreenBreakpoints["small"] = 600] = "small";
  /**
   * Medium breakpoint used to react when the screen size >= 1024px and less than
   * the next breakpoint if exists.
   */

  ScreenBreakpoints[ScreenBreakpoints["medium"] = 1024] = "medium";
  /**
   * Large breakpoint used to react when the screen size >= 1366px and less than
   * the next breakpoint if exists.
   */

  ScreenBreakpoints[ScreenBreakpoints["large"] = 1366] = "large";
  /**
   * Largest breakpoint used to react when the screen size >= 1920px and less than
   * the next breakpoint if exists.
   */

  ScreenBreakpoints[ScreenBreakpoints["xlarge"] = 1920] = "xlarge";
})(ScreenBreakpoints || (ScreenBreakpoints = {}));

var ScreenSize;

(function (ScreenSize) {
  ScreenSize[ScreenSize["xsmall"] = 0] = "xsmall";
  ScreenSize[ScreenSize["small"] = 1] = "small";
  ScreenSize[ScreenSize["medium"] = 2] = "medium";
  ScreenSize[ScreenSize["large"] = 3] = "large";
  ScreenSize[ScreenSize["xlarge"] = 4] = "xlarge";
})(ScreenSize || (ScreenSize = {}));

var ScreenContextImp =
/** @class */
function () {
  function ScreenContextImp() {
    var _this = this;

    this.onResize = function () {
      var size = _this.getCurrentSize();

      if (_this.size.value !== size) {
        _this.size.value = size;
      }
    };

    this.size = new ObservableValue(this.getCurrentSize());
    window.addEventListener("resize", this.onResize);
  }

  ScreenContextImp.prototype.getCurrentSize = function () {
    if (window.innerWidth >= ScreenBreakpoints.xlarge) {
      return ScreenSize.xlarge;
    } else if (window.innerWidth >= ScreenBreakpoints.large) {
      return ScreenSize.large;
    } else if (window.innerWidth >= ScreenBreakpoints.medium) {
      return ScreenSize.medium;
    } else if (window.innerWidth >= ScreenBreakpoints.small) {
      return ScreenSize.small;
    } else {
      return ScreenSize.xsmall;
    }
  };

  return ScreenContextImp;
}();

var ScreenContext = react.createContext(new ScreenContextImp());
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Panel/CustomPanel.js












var CustomPanel =
/** @class */
function (_super) {
  __extends(CustomPanel, _super);

  function CustomPanel(props) {
    var _this = _super.call(this, props) || this;

    _this.calloutContentRef = react.createRef();

    _this.defaultActiveElement = function () {
      // We don't ever want the Panel to set focus to the body, so if the defaultActiveElement
      // prop that is provided cannot be found, instead use the panel's default focus element.
      var defaultActiveElement = _this.props.defaultActiveElement;
      var selector = typeof defaultActiveElement === "function" ? defaultActiveElement() : defaultActiveElement;

      if (selector && _this.calloutContentRef.current) {
        var matches = _this.calloutContentRef.current.querySelectorAll(selector);

        if (matches && matches.length) {
          return selector;
        }
      }

      return ".bolt-panel-focus-element";
    }; // TODO: Change to false in M150


    _this.state = {
      isDisplayed: true
    };
    return _this;
  }

  CustomPanel.prototype.render = function () {
    var _this = this;

    var _a = this.props,
        ariaLabel = _a.ariaLabel,
        ariaLabelledBy = _a.ariaLabelledBy,
        blurDismiss = _a.blurDismiss,
        calloutClassName = _a.calloutClassName,
        children = _a.children,
        className = _a.className,
        contentClassName = _a.contentClassName,
        escDismiss = _a.escDismiss,
        id = _a.id,
        lightDismiss = _a.lightDismiss,
        modal = _a.modal,
        onDismiss = _a.onDismiss,
        portalProps = _a.portalProps,
        _b = _a.size,
        size = _b === void 0 ? ContentSize.Medium : _b;
    var isDisplayed = this.state.isDisplayed;
    return react.createElement(Observer, {
      size: this.context.size
    }, function (props) {
      var fullscreen = props.size === ScreenSize.xsmall;
      return react.createElement(Callout_Callout_Callout, {
        ariaLabel: ariaLabel,
        ariaLabelledBy: ariaLabelledBy,
        blurDismiss: blurDismiss,
        className: Util_css("bolt-panel", calloutClassName, isDisplayed === false && "no-events"),
        contentClassName: Util_css(contentClassName, "bolt-panel-callout-content scroll-auto", isDisplayed ? "in" : "out", fullscreen ? "bolt-panel-fullscreen absolute-fill" : "relative"),
        contentJustification: ContentJustification.Stretch,
        contentLocation: ContentLocation.End,
        contentOrientation: ContentOrientation.Column,
        contentRef: _this.calloutContentRef,
        contentShadow: true,
        contentSize: fullscreen ? undefined : size,
        escDismiss: escDismiss,
        id: id,
        focuszoneProps: {
          circularNavigation: true,
          defaultActiveElement: _this.defaultActiveElement,
          focusOnMount: true,
          handleTabKey: true,
          includeDefaults: true,
          postprocessKeyStroke: function (event) {
            // We want to prevent moving outside the panel if there are no focusable elements in the panel.
            event.which === KeyCode.tab && event.preventDefault();
            return FocusZoneKeyStroke.IgnoreParents;
          }
        },
        lightDismiss: lightDismiss && isDisplayed !== false,
        modal: modal && isDisplayed !== false,
        onDismiss: onDismiss,
        portalProps: portalProps
      }, react.createElement(SurfaceContext.Consumer, null, function (surfaceContext) {
        return react.createElement(Surface_Surface_Surface, tslib_es6_assign({}, surfaceContext, {
          spacing: Spacing["default"]
        }), react.createElement("div", {
          className: Util_css(className, "bolt-panel-root flex-column flex-grow scroll-auto")
        }, react.createElement("div", {
          className: "bolt-panel-focus-element no-outline",
          tabIndex: -1
        }), children));
      }));
    });
  }; // TODO: Uncomment in M150

  /* public componentDidMount() {
      setTimeout(() => {
          this.setState({ isDisplayed: true });
      }, 0);
  }
    public componentWillUnmount() {
      if(false) {
          if(this.state.isDisplayed === true) {
              console.error("Panel was unmounted while still displayed; call animateOut first and unmount after the returned promise resolves");
          }
      }
  } */


  CustomPanel.prototype.animateOut = function () {
    return Promise.resolve(); // TODO: Uncomment in M150

    /* return new Promise(resolve => {
        this.setState({ isDisplayed: false });
          setTimeout(() => {
            resolve();
        }, 200);
    }); */
  };

  CustomPanel.defaultProps = {
    escDismiss: true,
    lightDismiss: true,
    modal: true
  };
  CustomPanel.contextType = ScreenContext;
  return CustomPanel;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Panel/PanelContent.js






var PanelContent = function (props) {
  return react.createElement(SurfaceContext.Consumer, null, function (surfaceContext) {
    return react.createElement("div", {
      className: Util_css(props.className, "bolt-panel-content flex-row flex-grow scroll-auto", surfaceContext.horizontalClassName)
    }, props.children);
  });
};
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/ButtonGroup/ButtonGroup.js




var ButtonGroup = function (props) {
  return react.createElement("div", {
    className: Util_css(props.className, "bolt-button-group flex-row rhythm-horizontal-8"),
    role: props.role
  }, props.children);
};
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/ButtonGroup.js


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Panel/PanelFooter.js









var PanelFooter = function (props) {
  var buttonProps = props.buttonProps,
      className = props.className,
      showSeparator = props.showSeparator;
  var footerContent = null;

  if (buttonProps) {
    footerContent = react.createElement(ButtonGroup, {
      className: "bolt-panel-footer-buttons flex-grow"
    }, buttonProps.map(function (buttonProps, index) {
      return react.createElement(Button_Button_Button, tslib_es6_assign({
        key: buttonProps.id || index
      }, buttonProps));
    }));
  } else {
    footerContent = props.children;
  }

  return react.createElement(SurfaceContext.Consumer, null, function (surfaceContext) {
    return react.createElement(react.Fragment, null, showSeparator && react.createElement("div", {
      className: "bolt-panel-separator flex-noshrink"
    }), react.createElement("div", {
      className: Util_css(className, "bolt-panel-footer flex-center", surfaceContext.horizontalClassName)
    }, footerContent));
  });
};
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Panel/Panel.Props.js
var Panel_Props_PanelCloseButtonSize;

(function (PanelCloseButtonSize) {
  PanelCloseButtonSize[PanelCloseButtonSize["small"] = 0] = "small";
  PanelCloseButtonSize[PanelCloseButtonSize["large"] = 1] = "large";
})(Panel_Props_PanelCloseButtonSize || (Panel_Props_PanelCloseButtonSize = {}));
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Resources.Layer.js
var Close = "Close";
var Resize = "Resize";
var SizeFormat = "Height {0}, Width {1}";
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Header/Header.css
var Header = __webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Header/Header.css");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Header/Header.css

      
      
      
      
      
      
      
      
      

var Header_options = {};

Header_options.styleTagTransform = (styleTagTransform_default());
Header_options.setAttributes = (setAttributesWithoutAttributes_default());

      Header_options.insert = insertBySelector_default().bind(null, "head");
    
Header_options.domAPI = (styleDomAPI_default());
Header_options.insertStyleElement = (insertStyleElement_default());

var Header_update = injectStylesIntoStyleTag_default()(Header/* default */.Z, Header_options);




       /* harmony default export */ const Header_Header = (Header/* default */.Z && Header/* default.locals */.Z.locals ? Header/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Header/CustomHeader.js








var CustomHeader =
/** @class */
function (_super) {
  __extends(CustomHeader, _super);

  function CustomHeader() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  CustomHeader.prototype.render = function () {
    var _this = this;

    return react.createElement(SurfaceContext.Consumer, null, function (surfaceContext) {
      return react.createElement(react.Fragment, null, react.createElement("div", {
        className: Util_css(_this.props.className, "bolt-header flex-row flex-noshrink flex-start", surfaceContext.horizontalClassName, surfaceContext.spacing === undefined && "bolt-header-no-spacing-defined", surfaceContext.spacing === Spacing.condensed && "bolt-header-condensed", surfaceContext.spacing === Spacing["default"] && "bolt-header-default", surfaceContext.spacing === Spacing.relaxed && "bolt-header-relaxed")
      }, _this.props.children), _this.props.separator && react.createElement("div", {
        className: "bolt-header-separator flex-noshrink"
      }));
    });
  };

  return CustomHeader;
}(react.Component);


// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Breakpoint/Breakpoint.css
var Breakpoint = __webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Breakpoint/Breakpoint.css");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Breakpoint/Breakpoint.css

      
      
      
      
      
      
      
      
      

var Breakpoint_options = {};

Breakpoint_options.styleTagTransform = (styleTagTransform_default());
Breakpoint_options.setAttributes = (setAttributesWithoutAttributes_default());

      Breakpoint_options.insert = insertBySelector_default().bind(null, "head");
    
Breakpoint_options.domAPI = (styleDomAPI_default());
Breakpoint_options.insertStyleElement = (insertStyleElement_default());

var Breakpoint_update = injectStylesIntoStyleTag_default()(Breakpoint/* default */.Z, Breakpoint_options);




       /* harmony default export */ const Breakpoint_Breakpoint = (Breakpoint/* default */.Z && Breakpoint/* default.locals */.Z.locals ? Breakpoint/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Intersection/Intersection.js




 // We need to monitor fine grained changes, especially when the list
// has horizontal scroll. You dont get 100% visible ever.

var defaultThreshold = [];

for (var index = 0; index <= 100; index++) {
  defaultThreshold.push(index / 100);
}

var IntersectionContextImpl =
/** @class */
function () {
  function IntersectionContextImpl() {
    var _this = this;

    this.callbacks = [];
    this.pending = [];
    this.rootMargin = 0;
    this.root = document.body;

    this.onIntersect = function (entries) {
      if (_this.observer) {
        for (var _i = 0, _a = _this.callbacks; _i < _a.length; _i++) {
          var callback = _a[_i];
          callback(entries, _this.observer);
        }
      }
    };
  }

  IntersectionContextImpl.prototype.connect = function (root, rootMargin, threshold) {
    if (rootMargin === void 0) {
      rootMargin = 0;
    }

    if (threshold === void 0) {
      threshold = defaultThreshold;
    }

    this.observer = new IntersectionObserver(this.onIntersect, {
      root: root,
      rootMargin: rootMargin + "px",
      threshold: threshold
    });
    this.rootMargin = rootMargin;
    this.root = root;

    for (var _i = 0, _a = this.pending; _i < _a.length; _i++) {
      var element = _a[_i];
      this.observer.observe(element);
    }
  };

  IntersectionContextImpl.prototype.disconnect = function () {
    if (this.observer) {
      this.observer.disconnect();
    }
  };

  IntersectionContextImpl.prototype.observe = function (element) {
    if (this.observer) {
      this.observer.observe(element);
    } else {
      this.pending.push(element);
    }
  };

  IntersectionContextImpl.prototype.register = function (callback) {
    this.callbacks.push(callback);
  };

  IntersectionContextImpl.prototype.unobserve = function (element) {
    var elementIndex = this.pending.indexOf(element);

    if (elementIndex >= 0) {
      this.pending.splice(elementIndex, 1);
    }

    if (this.observer) {
      this.observer.unobserve(element);
    }
  };

  IntersectionContextImpl.prototype.unregister = function (callback) {
    var callbackIndex = this.callbacks.indexOf(callback);

    if (callbackIndex >= 0) {
      this.callbacks.splice(callbackIndex, 1);
    }
  };

  return IntersectionContextImpl;
}();

var IntersectionContext = react.createContext(new IntersectionContextImpl());
/**
 * The Intersection is used to observe the changes of visibility in the children
 * of the rootElement. It also will notify the caller when the rootElement is
 * scrolled. It will pass an empty array of entries in the scorlling case.
 */

var Intersection =
/** @class */
function (_super) {
  __extends(Intersection, _super);

  function Intersection() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.state = new IntersectionContextImpl();

    _this.onScroll = function (event) {
      _this.state.onIntersect([]);
    };

    return _this;
  } // Render the provider around a SINGLE child. This is the element that is scrollable.


  Intersection.prototype.render = function () {
    var _this = this;

    var child = react.Children.only(this.props.children); // Ensure we get the ref to the child if a rootElement wasnt supplied.

    if (!this.props.rootElement) {
      this.rootElement = shimRef(child);
    }

    var onScroll;

    if (child.props.onScroll) {
      onScroll = function (event) {
        if (child.props.onScroll) {
          child.props.onScroll(event);
        }

        _this.onScroll(event);
      };
    } else {
      onScroll = this.onScroll;
    }

    return react.createElement(IntersectionContext.Provider, {
      value: this.state
    }, react.cloneElement(child, tslib_es6_assign(tslib_es6_assign({}, child.props), {
      ref: this.rootElement,
      onScroll: onScroll
    }), child.props.children));
  };

  Intersection.prototype.componentDidMount = function () {
    var _a = this.props,
        observationElement = _a.observationElement,
        rootElement = _a.rootElement;
    var connectElement = null;

    if (rootElement) {
      if (typeof rootElement === "string") {
        connectElement = document.querySelector(rootElement);
      } else if (typeof rootElement === "function") {
        connectElement = rootElement();
      } else {
        connectElement = rootElement;
      }

      if (connectElement) {
        connectElement.addEventListener("scroll", this.onScroll);
        this.externalElement = connectElement;
      }
    } else if (this.rootElement) {
      connectElement = this.rootElement.current;
    }

    if (connectElement) {
      this.state.connect(connectElement, this.props.rootMargin, this.props.threshold); // Allow the creator of the intersection to observe intersection events.

      if (this.props.onIntersect) {
        this.state.register(this.props.onIntersect);
      }

      if (observationElement) {
        var observeElement = void 0;

        if (typeof observationElement === "string") {
          observeElement = document.querySelector(observationElement);
        } else if (typeof observationElement === "function") {
          observeElement = observationElement();
        } else {
          observeElement = observationElement;
        }

        if (observeElement) {
          this.state.observe(observeElement);
        }
      }
    }
  };

  Intersection.prototype.componentWillUnmount = function () {
    if (this.externalElement) {
      this.externalElement.removeEventListener("scroll", this.onScroll);
    }

    this.state.disconnect();
  };

  return Intersection;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Intersection.js


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Breakpoint/Breakpoint.js





function Breakpoint_Breakpoint_Breakpoint(props) {
  var observationElement = react.useState(function () {
    return react.createRef();
  })[0];
  var lastBreakpointIndex = -2;

  var observationElementFunction = function () {
    return observationElement.current;
  };

  var observationDelegate = function () {
    var visibleWidth = observationElement.current.parentElement.clientWidth;
    var breakpoints = props.breakpoints,
        onBreakpoint = props.onBreakpoint; // Determine the longest visible breakpoint.

    var breakpointIndex = breakpoints.length - 1;

    for (; breakpointIndex >= 0; breakpointIndex--) {
      if (visibleWidth >= breakpoints[breakpointIndex]) {
        break;
      }
    } // Notify the caller about the change in the breakpoint.


    if (breakpointIndex !== lastBreakpointIndex) {
      lastBreakpointIndex = breakpointIndex;
      onBreakpoint(breakpointIndex, breakpoints[breakpointIndex]);
    }
  }; // Compute the threshold we will use for the notification. This is the percentage
  // visibility of the observation element within the container.
  // NOTE: Due to rounding issues we need to know about all 3 pixels (1 before, at breakpoint, 1 after).


  var breakpoints = props.breakpoints;
  var observationWidth = breakpoints[breakpoints.length - 1] + 1;
  var threshold = [];

  for (var index = 0; index < breakpoints.length; index++) {
    threshold[index * 3] = (breakpoints[index] - 1) / observationWidth;
    threshold[index * 3 + 1] = breakpoints[index] / observationWidth;
    threshold[index * 3 + 2] = (breakpoints[index] + 1) / observationWidth;
  }

  return react.createElement("div", {
    className: "bolt-breakpoint relative"
  }, react.createElement(Intersection, {
    observationElement: observationElementFunction,
    onIntersect: observationDelegate,
    threshold: threshold
  }, react.createElement("div", {
    className: "bolt-breakpoint-container absolute-fill scroll-hidden"
  }, react.createElement("div", {
    className: "bolt-breakpoint-observation absolute",
    ref: observationElement,
    style: {
      width: observationWidth + "px"
    }
  }))));
}
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Breakpoint.js


// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/HeaderCommandBar/HeaderCommandBar.css
var HeaderCommandBar = __webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/HeaderCommandBar/HeaderCommandBar.css");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/HeaderCommandBar/HeaderCommandBar.css

      
      
      
      
      
      
      
      
      

var HeaderCommandBar_options = {};

HeaderCommandBar_options.styleTagTransform = (styleTagTransform_default());
HeaderCommandBar_options.setAttributes = (setAttributesWithoutAttributes_default());

      HeaderCommandBar_options.insert = insertBySelector_default().bind(null, "head");
    
HeaderCommandBar_options.domAPI = (styleDomAPI_default());
HeaderCommandBar_options.insertStyleElement = (insertStyleElement_default());

var HeaderCommandBar_update = injectStylesIntoStyleTag_default()(HeaderCommandBar/* default */.Z, HeaderCommandBar_options);




       /* harmony default export */ const HeaderCommandBar_HeaderCommandBar = (HeaderCommandBar/* default */.Z && HeaderCommandBar/* default.locals */.Z.locals ? HeaderCommandBar/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/HeaderCommandBar/CustomHeaderCommandBar.js








/**
 * Renders children in a FocusZone and ButtonGroup. This should be used directly only
 * if you need to render custom content that does not map to an IHeaderCommandBarItem.
 *
 * This component will always render all of its children - the logic for which items live
 * in the ... button and which items are always shown is only in the HeaderCommandBar. It is assumed
 * that if you are custom rendering the header command bar, that you are responsible for putting
 * the items correctly into the menu button.
 */

var CustomHeaderCommandBar =
/** @class */
function (_super) {
  __extends(CustomHeaderCommandBar, _super);

  function CustomHeaderCommandBar() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  CustomHeaderCommandBar.prototype.render = function () {
    return react.createElement(FocusZone, {
      direction: FocusZoneDirection.Horizontal,
      focusGroupProps: this.props.focusGroupProps
    }, ButtonGroup({
      className: Util_css(this.props.className, "bolt-header-commandbar", this.props.lastItemIsIconButton && "bolt-header-commandbar-no-right-padding"),
      children: this.props.children,
      role: this.props.role
    }));
  };

  return CustomHeaderCommandBar;
}(react.Component);


// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Menu/Menu.css
var Menu = __webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Menu/Menu.css");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Menu/Menu.css

      
      
      
      
      
      
      
      
      

var Menu_options = {};

Menu_options.styleTagTransform = (styleTagTransform_default());
Menu_options.setAttributes = (setAttributesWithoutAttributes_default());

      Menu_options.insert = insertBySelector_default().bind(null, "head");
    
Menu_options.domAPI = (styleDomAPI_default());
Menu_options.insertStyleElement = (insertStyleElement_default());

var Menu_update = injectStylesIntoStyleTag_default()(Menu/* default */.Z, Menu_options);




       /* harmony default export */ const Menu_Menu = (Menu/* default */.Z && Menu/* default.locals */.Z.locals ? Menu/* default.locals */.Z.locals : undefined);

// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Menu/MenuButton.css
var MenuButton = __webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Menu/MenuButton.css");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Menu/MenuButton.css

      
      
      
      
      
      
      
      
      

var MenuButton_options = {};

MenuButton_options.styleTagTransform = (styleTagTransform_default());
MenuButton_options.setAttributes = (setAttributesWithoutAttributes_default());

      MenuButton_options.insert = insertBySelector_default().bind(null, "head");
    
MenuButton_options.domAPI = (styleDomAPI_default());
MenuButton_options.insertStyleElement = (insertStyleElement_default());

var MenuButton_update = injectStylesIntoStyleTag_default()(MenuButton/* default */.Z, MenuButton_options);




       /* harmony default export */ const Menu_MenuButton = (MenuButton/* default */.Z && MenuButton/* default.locals */.Z.locals ? MenuButton/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Menu/ContextMenuBehavior.js





var ContextMenuBehavior =
/** @class */
function () {
  function ContextMenuBehavior(contextMenuHandler) {
    var _this = this;

    this.initialize = function (props, component, eventDispatch) {
      _this.eventDispatch = eventDispatch;

      _this.eventDispatch.addEventListener("contextmenu", _this.onContextMenu);
    };

    this.onContextMenu = function (event) {
      _this.contextMenuHandler(event);
    };

    this.contextMenuHandler = contextMenuHandler;
  }

  ContextMenuBehavior.prototype.componentWillUnmount = function () {
    var _a;

    (_a = this.eventDispatch) === null || _a === void 0 ? void 0 : _a.removeEventListener("contextmenu", this.onContextMenu);
  };

  return ContextMenuBehavior;
}();


// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Checkbox/Checkbox.css
var Checkbox = __webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Checkbox/Checkbox.css");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Checkbox/Checkbox.css

      
      
      
      
      
      
      
      
      

var Checkbox_options = {};

Checkbox_options.styleTagTransform = (styleTagTransform_default());
Checkbox_options.setAttributes = (setAttributesWithoutAttributes_default());

      Checkbox_options.insert = insertBySelector_default().bind(null, "head");
    
Checkbox_options.domAPI = (styleDomAPI_default());
Checkbox_options.insertStyleElement = (insertStyleElement_default());

var Checkbox_update = injectStylesIntoStyleTag_default()(Checkbox/* default */.Z, Checkbox_options);




       /* harmony default export */ const Checkbox_Checkbox = (Checkbox/* default */.Z && Checkbox/* default.locals */.Z.locals ? Checkbox/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Checkbox/Checkbox.js













var checkboxId = 1;

var TriStateCheckbox =
/** @class */
function (_super) {
  __extends(TriStateCheckbox, _super);

  function TriStateCheckbox(props) {
    var _this = _super.call(this, props) || this;

    _this.checkboxElement = react.createRef();
    _this.animationClassName = "";

    _this.onClick = function (event) {
      _this.focus();

      _this.onChange(event);
    };

    _this.onFocus = function () {
      var id = _this.props.id;

      if (id) {
        _this.context.onFocus(id);
      }
    };

    _this.onKeyDown = function (event) {
      if (!event.defaultPrevented && !_this.props.disabled) {
        if (event.which === KeyCode.space) {
          _this.onChange(event);

          event.preventDefault();
        }
      }
    };

    _this.onChange = function (event) {
      if (_this.props.onChange) {
        var checked = ObservableLike.getValue(_this.props.checked); // Unchecked transitions to Checked.
        // Checked transitions to TriState or Unchecked.
        // Indeterminate transitions to Unchecked.

        if (checked === false) {
          checked = true;
        } else if (checked === true) {
          if (_this.props.triState) {
            checked = undefined;
          } else {
            checked = false;
          }
        } else {
          checked = false;
        }

        _this.props.onChange(event, checked);
      }
    };

    _this.labelId = "checkbox-" + checkboxId++ + "-label";
    return _this;
  }

  TriStateCheckbox.prototype.render = function () {
    var _this = this;

    var _a = this.props,
        disabled = _a.disabled,
        label = _a.label,
        labelId = _a.labelId,
        tooltipProps = _a.tooltipProps;
    return react.createElement(FocusZoneContext.Consumer, null, function (zoneContext) {
      return react.createElement(Observer, {
        checked: _this.props.checked
      }, function (props) {
        var checkbox = react.createElement("div", {
          "aria-checked": props.checked === undefined ? "mixed" : props.checked === true ? "true" : "false",
          "aria-describedby": getSafeId(_this.props.ariaDescribedBy),
          "aria-disabled": _this.props.disabled,
          "aria-label": _this.props.ariaLabel,
          "aria-labelledby": !_this.props.ariaLabel ? getSafeId(_this.props.ariaLabelledBy) : undefined,
          className: Util_css(_this.props.className, "bolt-checkbox cursor-pointer", props.checked !== false && "checked", disabled ? "disabled" : "enabled", "bolt-focus-treatment", label && "labelled"),
          "data-focuszone": !disabled && Util_css(_this.props.focuszoneId, !_this.props.excludeFocusZone ? zoneContext.focuszoneId : undefined),
          id: getSafeId(_this.props.id),
          onClick: !disabled ? _this.onClick : undefined,
          onFocus: _this.onFocus,
          onKeyDown: _this.onKeyDown,
          ref: _this.checkboxElement,
          role: _this.props.role || "checkbox",
          tabIndex: getTabIndex(_this.props, _this.context)
        }, react.createElement("div", {
          className: "bolt-checkmark justify-center flex-row flex-noshrink scroll-hidden"
        }, Icon_Icon({
          className: _this.animationClassName,
          iconName: props.checked === undefined ? "SkypeMinus" : "CheckMark",
          size: IconSize.small
        })), label && react.createElement("div", {
          className: "bolt-checkbox-label",
          id: getSafeId(labelId || _this.labelId)
        }, label), _this.props.children);

        if (tooltipProps) {
          checkbox = react.createElement(Tooltip_Tooltip, tslib_es6_assign({
            addAriaDescribedBy: true
          }, tooltipProps), checkbox);
        }

        return checkbox;
      });
    });
  };

  TriStateCheckbox.prototype.componentDidMount = function () {
    this.animationClassName = "animation-ready";
  };

  TriStateCheckbox.prototype.focus = function () {
    if (this.checkboxElement.current) {
      this.checkboxElement.current.focus();
    }
  };

  TriStateCheckbox.contextType = FocusGroupContext;
  return TriStateCheckbox;
}(react.Component);



var Checkbox_Checkbox_Checkbox =
/** @class */
function (_super) {
  __extends(Checkbox, _super);

  function Checkbox() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Checkbox.defaultProps = {
    checked: false
  };
  return Checkbox;
}(TriStateCheckbox);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Checkbox.js


// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/List/List.css
var List = __webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/List/List.css");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/List/List.css

      
      
      
      
      
      
      
      
      

var List_options = {};

List_options.styleTagTransform = (styleTagTransform_default());
List_options.setAttributes = (setAttributesWithoutAttributes_default());

      List_options.insert = insertBySelector_default().bind(null, "head");
    
List_options.domAPI = (styleDomAPI_default());
List_options.insertStyleElement = (insertStyleElement_default());

var List_update = injectStylesIntoStyleTag_default()(List/* default */.Z, List_options);




       /* harmony default export */ const List_List = (List/* default */.Z && List/* default.locals */.Z.locals ? List/* default.locals */.Z.locals : undefined);

// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/List/ListDropIndicator.css
var ListDropIndicator = __webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/List/ListDropIndicator.css");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/List/ListDropIndicator.css

      
      
      
      
      
      
      
      
      

var ListDropIndicator_options = {};

ListDropIndicator_options.styleTagTransform = (styleTagTransform_default());
ListDropIndicator_options.setAttributes = (setAttributesWithoutAttributes_default());

      ListDropIndicator_options.insert = insertBySelector_default().bind(null, "head");
    
ListDropIndicator_options.domAPI = (styleDomAPI_default());
ListDropIndicator_options.insertStyleElement = (insertStyleElement_default());

var ListDropIndicator_update = injectStylesIntoStyleTag_default()(ListDropIndicator/* default */.Z, ListDropIndicator_options);




       /* harmony default export */ const List_ListDropIndicator = (ListDropIndicator/* default */.Z && ListDropIndicator/* default.locals */.Z.locals ? ListDropIndicator/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Utilities/Dispatch.js
var EventDispatch =
/** @class */
function () {
  function EventDispatch() {
    this.listeners = {};
  }

  EventDispatch.prototype.addEventListener = function (eventType, callback) {
    if (!(eventType in this.listeners)) {
      this.listeners[eventType] = [];
    }

    this.listeners[eventType].push(callback);
  };

  EventDispatch.prototype.dispatchEvent = function (event, data, type) {
    var delegates = this.listeners[type || event.type];

    if (delegates) {
      var stack = delegates.slice();

      for (var i = 0, l = stack.length; i < l; i++) {
        stack[i].call(this, event, data);
      }
    }
  };

  EventDispatch.prototype.removeEventListener = function (eventType, callback) {
    if (!(eventType in this.listeners)) {
      return;
    }

    var stack = this.listeners[eventType];

    for (var i = 0, l = stack.length; i < l; i++) {
      if (stack[i] === callback) {
        stack.splice(i, 1);
        return;
      }
    }
  };

  return EventDispatch;
}();


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/List/FixedHeightList.js













/**
 * The FixedHeightList component is used to render a collection of items with a series of rows.
 */

var FixedHeightList =
/** @class */
function (_super) {
  __extends(FixedHeightList, _super);

  function FixedHeightList(props) {
    var _this = _super.call(this, props) || this; // Manage data about pages, including their spacers.


    _this.intersectionElements = {}; // Track the table element used to render the rows.

    _this.bodyElement = react.createRef();
    _this.listElement = react.createRef();
    _this.scrollToIndex = -1;
    _this.scrollToOptions = undefined; // Focus/Selection management members.

    _this.selectOnFocus = true;
    _this.focusIndex = new ObservableValue(-1);
    _this.pivotIndex = -1;

    _this.onBlur = function () {
      _this.focusIndex.value = -1;
    };

    _this.onClick = function (event) {
      _this.onDispatch(event);

      if (!event.defaultPrevented) {
        if (_this.listElement.current) {
          var _a = rowFromEvent(event),
              cellElement = _a.cellElement,
              rowIndex = _a.rowIndex;

          if (!cellElement) {
            var item = ObservableLike.getValue(_this.state.rows[rowIndex]);

            if (rowIndex >= 0 && item) {
              var listRow = {
                data: item,
                index: rowIndex
              }; // Even for singleClickActivation we fire the selection before activation.

              if (_this.props.selectRowOnClick) {
                _this.processSelectionEvent(event, listRow);
              } // For singleClickActivation we want the activation as well.


              if (_this.props.singleClickActivation) {
                _this.rowActivated(event, listRow);
              }
            }
          }
        }
      }
    };

    _this.onDispatch = function (event) {
      _this.state.eventDispatch.dispatchEvent(event);
    };

    _this.onDoubleClick = function (event) {
      _this.onDispatch(event);

      if (!event.defaultPrevented && !_this.props.singleClickActivation) {
        var rowIndex = rowFromEvent(event).rowIndex;
        var item = ObservableLike.getValue(_this.state.rows[rowIndex]);

        if (rowIndex >= 0 && item) {
          _this.rowActivated(event, {
            data: item,
            index: rowIndex
          });
        }
      }
    };

    _this.onFocusBody = function (event) {
      // The first time the list gets focus we need to select initial row if we are performing
      // selection of focus.
      if (_this.selectOnFocus) {
        var selection = _this.props.selection;

        if (!selection || selection.selectOnFocus) {
          var rowIndex = _this.focusIndex.value;

          if (rowIndex >= 0) {
            var item = ObservableLike.getValue(_this.state.rows[rowIndex]);

            if (item) {
              _this.processSelectionEvent(event, {
                data: item,
                index: rowIndex
              });
            }
          }
        }

        _this.selectOnFocus = false;
      }
    };

    _this.onFocusItem = function (rowIndex, event) {
      var focusIndex = _this.focusIndex;

      if (focusIndex.value !== rowIndex) {
        _this.focusRow(rowIndex, 2); // We need to re-render the previously focused row and newly focused row so we will
        // clear the cached values.


        if (focusIndex.value >= 0) {
          delete _this.state.renderedRows[focusIndex.value];
        } else if (_this.props.defaultTabbableRow !== undefined) {
          // If there was a tabble row that was not the focusIndex.value row we need to update this
          // row as well to get it re-rendered without the tabIndex.
          delete _this.state.renderedRows[_this.props.defaultTabbableRow];
        }

        delete _this.state.renderedRows[rowIndex];
        _this.focusIndex.value = rowIndex;
        var item = ObservableLike.getValue(_this.state.rows[rowIndex]);

        if (item) {
          _this.rowFocused(event, {
            data: item,
            index: rowIndex
          });
        }
      }
    };

    _this.onKeyDown = function (event) {
      _this.onDispatch(event);

      if (!event.defaultPrevented) {
        var nodeName = event.target.nodeName;

        if (nodeName === "INPUT" || nodeName === "TEXTAREA") {
          // Don't handle keyboard events when target is an input
          return;
        }

        var focusIndex_1 = _this.focusIndex;
        var item_1 = ObservableLike.getValue(_this.state.rows[focusIndex_1.value]);

        if (item_1) {
          if (event.which === KeyCode.enter) {
            if (focusIndex_1.value >= 0 && !eventTargetContainsNode(event, ["A"])) {
              _this.rowActivated(event, {
                data: item_1,
                index: focusIndex_1.value
              });
            }
          } else if (event.which === KeyCode.space) {
            _this.processSelectionEvent(event, {
              data: item_1,
              index: focusIndex_1.value
            });

            event.preventDefault();
          } else if (event.which === KeyCode.upArrow || event.which === KeyCode.downArrow) {
            var selection = _this.props.selection;

            if (!selection || selection.selectOnFocus && (event.shiftKey || !event.ctrlKey)) {
              event.persist(); // Need to wait for the keyboard event to be processed by the focuszone.

              window.setTimeout(function () {
                if (_this.focusIndex.value != focusIndex_1.value) {
                  _this.processSelectionEvent(event, {
                    data: item_1,
                    index: _this.focusIndex.value
                  });
                }
              }, 0);
            }
          } else if (event.which === KeyCode.pageDown) {
            _this.focusRow(Math.min(focusIndex_1.value + _this.props.pageSize, _this.state.rowCount - 1), 1);

            event.preventDefault();
          } else if (event.which === KeyCode.pageUp) {
            _this.focusRow(Math.max(focusIndex_1.value - _this.props.pageSize, 0), -1);

            event.preventDefault();
          } else if (event.which === KeyCode.home) {
            _this.focusRow(0, 1);

            event.preventDefault();
          } else if (event.which === KeyCode.end) {
            _this.focusRow(_this.state.rowCount - 1, -1);

            event.preventDefault();
          }
        }
      }
    };

    _this.onIntersect = function (entries) {
      var scrollTop = _this.context.root.scrollTop;
      var rowCount = _this.state.rowCount;
      var _a = _this.state,
          firstMaterialized = _a.firstMaterialized,
          lastMaterialized = _a.lastMaterialized;
      var _b = _this.state,
          rowHeight = _b.rowHeight,
          rowProportion = _b.rowProportion; // Don't process an intersection while scroll event is pending.

      if (scrollTop !== _this.state.scrollTop && entries.length) {
        return;
      } // Ignore events if we dont have a our basic elements resolved (this should never happen).


      if (!_this.listElement.current || !_this.bodyElement.current) {
        return;
      } // Determine the location of the intersection within the page. This is the element
      // we are scrolling within.


      var intersectionRect = _this.context.root.getBoundingClientRect();

      var scrollTopRect = Math.max(0, scrollTop + _this.context.root.offsetTop - _this.listElement.current.offsetTop); // Track the first and last row elements for adjusting the range.

      var firstMaterializedUpdated = Math.max(0, Math.min(rowCount - 1, Math.floor(scrollTopRect / (rowHeight * rowProportion))));
      var lastMaterializedUpdated = Math.min(rowCount - 1, firstMaterializedUpdated + Math.ceil(intersectionRect.height / rowHeight));

      if (scrollTopRect + (lastMaterializedUpdated - firstMaterializedUpdated) * rowHeight > _this.state.maxHeight) {
        lastMaterializedUpdated = rowCount - 1;
        firstMaterializedUpdated = Math.max(0, lastMaterializedUpdated - Math.ceil(intersectionRect.height / rowHeight));
      } // Update our state if and only if something has changed.


      if (firstMaterializedUpdated !== firstMaterialized || lastMaterializedUpdated !== lastMaterialized || rowHeight !== _this.state.rowHeight || scrollTop !== _this.state.scrollTop || scrollTopRect !== _this.state.scrollTopRect) {
        //
        // @TODO: We need to unload data for pages that are no longer rendererd.
        // This means not in the viewport or within any other rendered range.
        //
        _this.setState({
          firstMaterialized: firstMaterializedUpdated,
          lastMaterialized: lastMaterializedUpdated,
          rowHeight: rowHeight,
          scrollTop: scrollTop,
          scrollTopRect: scrollTopRect
        });
      }
    };

    _this.onMouseDownBody = function (event) {
      // If the table body gets a mousedown, we will never need to fire the selection event when
      // the list gets focus since the mouse event will cause the selection.
      _this.selectOnFocus = false;
    };

    var rowCount = props.itemProvider.length;
    _this.state = {
      eventDispatch: props.eventDispatch || new EventDispatch(),
      firstMaterialized: 0,
      itemProvider: props.itemProvider,
      lastMaterialized: 0,
      maxHeight: _this.props.maxHeight || 1000000,
      focusRows: {},
      renderedRows: {},
      rowCount: rowCount,
      rowHeight: props.rowHeight || 0,
      rowProportion: props.rowHeight && props.maxHeight ? Math.min(1, props.maxHeight / (props.rowHeight * rowCount)) : 1,
      rows: {},
      scrollTop: 0,
      scrollTopRect: 0
    };
    return _this;
  }

  FixedHeightList.getDerivedStateFromProps = function (props, state) {
    var rowCount = props.itemProvider.length;
    var firstMaterialized = state.firstMaterialized;
    var lastMaterialized = state.lastMaterialized;

    if (rowCount !== state.rowCount) {
      firstMaterialized = Math.max(0, Math.min(state.firstMaterialized, rowCount));
      lastMaterialized = Math.max(firstMaterialized, Math.min(state.lastMaterialized + (state.lastMaterialized === state.rowCount - 1 ? props.pageSize : 0), rowCount - 1));
    } // Ensure out pages and providers are appropriately computed.


    var updatedState = {
      firstMaterialized: firstMaterialized,
      itemProvider: props.itemProvider,
      lastMaterialized: lastMaterialized,
      rowCount: rowCount,
      rowProportion: Math.min(1, state.maxHeight / (state.rowHeight * rowCount))
    }; // If there are changes to the props that affect the cached data, we need it clear it.

    if (props.itemProvider !== state.itemProvider) {
      updatedState.renderedRows = {};
      updatedState.rows = {};
    }

    return updatedState;
  };

  FixedHeightList.prototype.getListRole = function () {
    return this.props.role ? this.props.role : this.props.selection ? "listbox" : "list";
  };

  FixedHeightList.prototype.getItemRole = function () {
    switch (this.getListRole()) {
      case "tree":
      case "group":
        return "treeitem";

      case "list":
        return "listitem";

      case "listbox":
        return "option";

      case "radiogroup":
        return "radio";

      default:
        return null;
    }
  };

  FixedHeightList.prototype.render = function () {
    var _this = this;

    var _a = this.props,
        className = _a.className,
        focuszoneProps = _a.focuszoneProps,
        id = _a.id,
        width = _a.width;
    var _b = this.state,
        firstMaterialized = _b.firstMaterialized,
        lastMaterialized = _b.lastMaterialized,
        maxHeight = _b.maxHeight,
        rowCount = _b.rowCount,
        rowHeight = _b.rowHeight;
    var role = this.getListRole();
    var rows = [];
    var firstFocusRow = Math.max(0, this.focusIndex.value - 3);
    var lastFocusRow = Math.min(rowCount, this.focusIndex.value + 3);
    rows.push(this.renderIntersectionBounds(true)); // Add focus rows around rendered rows.

    if (this.focusIndex.value !== -1 && firstFocusRow < firstMaterialized) {
      for (var rowIndex = firstFocusRow; rowIndex <= Math.min(lastFocusRow, firstMaterialized - 1); rowIndex++) {
        rows.push(this.renderRow(rowIndex, false));
      }
    }

    for (var rowIndex = firstMaterialized; rowIndex <= lastMaterialized; rowIndex++) {
      rows.push(this.renderRow(rowIndex, true));
    }

    if (this.focusIndex.value !== -1 && lastFocusRow > lastMaterialized && lastMaterialized > 0) {
      for (var rowIndex = Math.max(firstFocusRow, lastMaterialized + 1); rowIndex <= lastFocusRow; rowIndex++) {
        rows.push(this.renderRow(rowIndex, false));
      }
    }

    rows.push(this.renderIntersectionBounds(false));
    var height = Math.min(maxHeight, rowHeight * this.state.rowCount);
    var list = react.createElement("div", {
      "aria-label": this.props.ariaLabel,
      className: Util_css(className, "bolt-fixed-height-list relative"),
      id: getSafeId(id),
      onBlur: this.onBlur,
      onClick: this.onClick,
      onDoubleClick: this.onDoubleClick,
      onDragEnd: this.onDispatch,
      onDragEnter: this.onDispatch,
      onDragExit: this.onDispatch,
      onDragOver: this.onDispatch,
      onDragStart: this.onDispatch,
      onDrop: this.onDispatch,
      onKeyUp: this.onDispatch,
      onMouseDown: this.onDispatch,
      onTouchStart: this.onDispatch,
      ref: this.listElement,
      role: role,
      style: {
        width: width,
        height: height
      }
    }, react.createElement("div", {
      className: "relative",
      onFocus: this.onFocusBody,
      onKeyDown: this.onKeyDown,
      onMouseDown: this.onMouseDownBody,
      ref: this.bodyElement,
      style: {
        width: width,
        height: height
      }
    }, rows));
    list = react.createElement(FocusZone, tslib_es6_assign({
      direction: FocusZoneDirection.Vertical,
      skipHiddenCheck: true
    }, focuszoneProps), list);
    return react.createElement(Observer, {
      itemProvider: {
        // Supply an IObservableExpression to elevate the provider change to a state
        // update for the entire component instead of just the observer.
        filter: function (change, action) {
          // Notify the selection about the change to the items.
          if (_this.props.selection) {
            _this.props.selection.onItemsChanged(change, action);
          } // @NOTE: For now we will just wipe out the entire cache, we can do an optimized
          // update to the cache based on the rows that changed.


          var updatedState = {
            renderedRows: {},
            focusRows: {},
            rows: {}
          }; // If their is a well defined rowcount we will update it and the maxPage.

          if (_this.state.rowCount !== -1) {
            var countChange = (change.addedItems ? change.addedItems.length : 0) - (change.removedItems ? change.removedItems.length : 0);

            if (countChange) {
              updatedState.rowCount = _this.state.rowCount + countChange;
              updatedState.firstMaterialized = Math.max(0, Math.min(_this.state.firstMaterialized, updatedState.rowCount - 1));
              updatedState.lastMaterialized = Math.max(updatedState.firstMaterialized, Math.min(_this.state.lastMaterialized + (change.index >= _this.state.firstMaterialized && change.index <= _this.state.lastMaterialized + 1 ? countChange : 0), updatedState.rowCount - 1));
            }
          }

          _this.setState(updatedState);

          return false;
        },
        observableValue: this.props.itemProvider
      }
    }, function () {
      return list;
    });
  };

  FixedHeightList.prototype.componentDidMount = function () {
    this.onIntersect([]);
    this.context.register(this.onIntersect);
  };

  FixedHeightList.prototype.componentDidUpdate = function (prevProps, prevState) {
    var _a = this,
        scrollToIndex = _a.scrollToIndex,
        onScrollComplete = _a.onScrollComplete;

    if (this.state.rowCount !== prevState.rowCount) {
      this.onIntersect([]);
    }

    if (scrollToIndex !== -1 && this.state.rowHeight) {
      var parentElement = this.bodyElement.current;
      var _b = this.state,
          firstMaterialized = _b.firstMaterialized,
          lastMaterialized = _b.lastMaterialized; // If the row is materialized, we will ensure it is in the viewport.

      if (scrollToIndex >= firstMaterialized && scrollToIndex <= lastMaterialized && parentElement) {
        for (var currentIndex = 0; currentIndex < parentElement.children.length; currentIndex++) {
          var childElement = parentElement.children[currentIndex];
          var cellDetails = rowFromElement(childElement);

          if (cellDetails.rowIndex === scrollToIndex) {
            childElement.scrollIntoView(this.scrollToOptions);
            break;
          }
        }
      } // Reset the scroll state before we notify the complete function, it may start a new scroll operation.


      this.onScrollComplete = undefined;
      this.scrollToIndex = -1;
      this.scrollToOptions = undefined; // Notify any pending scrollComplete method that scrolling has completed.

      if (onScrollComplete) {
        onScrollComplete(scrollToIndex);
      }
    }
  };

  FixedHeightList.prototype.componentWillUnmount = function () {
    this.context.unregister(this.onIntersect);
  };

  FixedHeightList.prototype.getFocusIndex = function () {
    return this.focusIndex.value;
  };

  FixedHeightList.prototype.getStats = function () {
    return {
      firstMaterialized: this.state.firstMaterialized,
      lastMaterialized: this.state.lastMaterialized
    };
  };

  FixedHeightList.prototype.scrollIntoView = function (rowIndex, options, onScrollComplete) {
    var pageSize = this.props.pageSize;
    var _a = this.state,
        firstMaterialized = _a.firstMaterialized,
        lastMaterialized = _a.lastMaterialized,
        rowCount = _a.rowCount;

    if (rowIndex >= 0 && rowIndex < this.state.rowCount) {
      var parentElement = this.bodyElement.current; // If the row is materialized, we will ensure it is in the viewport.

      if (rowIndex >= firstMaterialized && rowIndex <= lastMaterialized && parentElement) {
        for (var currentIndex = 0; currentIndex < parentElement.children.length; currentIndex++) {
          var childElement = parentElement.children[currentIndex];
          var cellDetails = rowFromElement(childElement);

          if (cellDetails.rowIndex === rowIndex) {
            childElement.scrollIntoView(options);
            break;
          }
        } // If the caller wants to know when the scroll has completed, notify them.


        if (onScrollComplete) {
          onScrollComplete(rowIndex);
        }
      } else {
        // We only notify the last caller for now, if someone was waiting and another
        // scroll request was made we will send -1 as the rowIndex scrolled into view.
        if (this.onScrollComplete) {
          this.onScrollComplete(-1);
        } // Set the scrollToOptions that will be applied after the next update.


        this.onScrollComplete = onScrollComplete;
        this.scrollToIndex = rowIndex;
        this.scrollToOptions = options; // If we havent computed the rowHeight at this point we need to wait until
        // we know how big rows are to get the row in the right location.

        this.setState({
          firstMaterialized: Math.max(0, rowIndex - Math.floor((lastMaterialized - firstMaterialized) / 2)),
          lastMaterialized: Math.min(rowCount - 1, Math.ceil(rowIndex + (lastMaterialized - firstMaterialized) / 2))
        });
      }
    }
  };

  FixedHeightList.prototype.focusRow = function (rowIndex, direction) {
    var _this = this;

    this.scrollIntoView(rowIndex, {
      block: "nearest"
    }, function (completedIndex) {
      if (completedIndex === rowIndex && _this.bodyElement.current) {
        var rowElement = _this.bodyElement.current.querySelector("[data-row-index='" + completedIndex + "']");

        if (rowElement) {
          // We need to ensure the requested row is focusable, if not we will move in the
          // requested direction to find the first focusable row.
          if (!rowElement.getAttribute("tabindex")) {
            var newIndex = Math.min(_this.state.rowCount - 1, Math.max(0, completedIndex + direction));

            if (newIndex !== completedIndex) {
              _this.focusRow(newIndex, direction);
            } else if (newIndex !== _this.focusIndex.value) {
              _this.focusRow(newIndex, -direction);
            }
          } else {
            // Set focus to the row that scroll to
            rowElement.focus();
          }
        }
      }
    });
  };

  FixedHeightList.prototype.processSelectionEvent = function (event, listRow) {
    var selection = this.props.selection;

    if (!selection || selection.selectable(listRow.index)) {
      var initialState = false;
      var targetState = true;

      if (selection) {
        var index = listRow.index; // If a selection is available use it to track the initial state.

        initialState = selection.selected(index); // Determine the type of change being made to the selection based on key states.

        if (this.pivotIndex >= 0 && event.shiftKey && selection.multiSelect) {
          selection.select(Math.min(this.pivotIndex, index), Math.abs(this.pivotIndex - index) + 1, event.ctrlKey || event.metaKey);
        } else {
          if ((event.ctrlKey || event.metaKey || selection.alwaysMerge) && selection.multiSelect) {
            selection.toggle(index, true);
            targetState = false;
          } else {
            selection.select(index, 1, false);
          }
        } // Save the last selectionIndex that we selected, this will allow
        // us to perform range based selection.


        if (!event.shiftKey) {
          this.pivotIndex = index;
        }
      }

      if (initialState !== targetState) {
        this.rowSelected(event, listRow);
      }
    }
  };

  FixedHeightList.prototype.renderLoadingRow = function (rowIndex, details) {
    return react.createElement("div", {
      className: "bolt-list-row-loading"
    }, react.createElement("div", {
      className: "shimmer shimmer-line",
      style: {
        width: Math.random() * 80 + 20 + "%"
      }
    }, "\u00A0"));
  };

  FixedHeightList.prototype.renderIntersectionBounds = function (top) {
    var _this = this;

    var _a = this.state,
        firstMaterialized = _a.firstMaterialized,
        lastMaterialized = _a.lastMaterialized,
        rowHeight = _a.rowHeight,
        rowProportion = _a.rowProportion;
    var key = top ? "topobserv" : "bottomobserv";
    var rowTop = 0; // If we run out of room move from the bottom up. This can happen with proportionally allocated rows

    if (firstMaterialized * rowHeight * rowProportion + (lastMaterialized - firstMaterialized) * rowHeight > this.state.maxHeight) {
      if (top) {
        rowTop = this.state.maxHeight;
        rowTop -= (lastMaterialized - firstMaterialized) * rowHeight * rowProportion + rowHeight;
        rowTop--;
      } else {
        rowTop = this.state.maxHeight - 1;
      }
    } else {
      if (top) {
        rowTop = firstMaterialized * rowHeight * rowProportion - 1;
      } else {
        rowTop = firstMaterialized * rowHeight * rowProportion + (1 + lastMaterialized - firstMaterialized) * rowHeight + 1;
      }
    }

    return react.createElement("div", {
      "aria-hidden": "true",
      className: "bolt-list-row-spacer invisible absolute",
      key: key,
      ref: function (spacerElement) {
        var existingElement = _this.intersectionElements[key];

        if (spacerElement) {
          if (existingElement !== spacerElement) {
            if (existingElement) {
              _this.context.unobserve(spacerElement);
            }

            _this.context.observe(spacerElement);

            _this.intersectionElements[key] = spacerElement;
          }
        } else if (existingElement) {
          _this.context.unobserve(existingElement);

          delete _this.intersectionElements[key];
        }
      },
      role: "presentation",
      style: {
        top: rowTop + "px",
        height: "1px"
      }
    });
  };

  FixedHeightList.prototype.renderRow = function (rowIndex, isVisible) {
    var _this = this;

    var itemProvider = this.props.itemProvider;
    var _a = this.state,
        focusRows = _a.focusRows,
        renderedRows = _a.renderedRows,
        firstMaterialized = _a.firstMaterialized,
        lastMaterialized = _a.lastMaterialized,
        rowHeight = _a.rowHeight,
        rowProportion = _a.rowProportion,
        rows = _a.rows;
    var role = this.getItemRole();
    var renderedRow = isVisible ? renderedRows[rowIndex] : focusRows[rowIndex]; // We can't use the cache for proportioned rows since the top is different based on what the firstMaterialized value is

    if (!renderedRow || rowProportion !== 1) {
      var item_2 = rows[rowIndex];

      if (!item_2) {
        if (itemProvider.getItem) {
          item_2 = itemProvider.getItem(rowIndex);
        } else {
          item_2 = itemProvider.value[rowIndex];
        }
      } // @TODO: If there are no more rows, we need to handle an itemProvider with -1 length.


      if (!item_2) {
        return null;
      } // Save the current item in the item cache.


      rows[rowIndex] = item_2;
      var selection = this.props.selection;
      var selectionObservable = void 0;

      if (selection) {
        selectionObservable = {
          observableValue: selection,
          filter: function (selectedRanges) {
            for (var _i = 0, selectedRanges_1 = selectedRanges; _i < selectedRanges_1.length; _i++) {
              var selectionRange = selectedRanges_1[_i];

              if (rowIndex >= selectionRange.beginIndex && rowIndex <= selectionRange.endIndex) {
                return true;
              }
            }

            return false;
          }
        };
      }

      var onFocus_1 = function (event) {
        _this.onFocusItem(rowIndex, event);
      }; // Render the row, save it in the cache, and add it to the current page.


      renderedRow = react.createElement(UncheckedObserver, {
        item: item_2,
        key: rowIndex,
        selection: selectionObservable,
        focusIndex: this.focusIndex
      }, function (props) {
        var _a = _this.props,
            renderRow = _a.renderRow,
            renderLoadingRow = _a.renderLoadingRow;
        var _b = _this.state,
            rowHeight = _b.rowHeight,
            rowCount = _b.rowCount;
        var rowItem = ObservableLike.getValue(item_2);
        var itemDetails = {
          ariaBusy: !props.item,
          ariaRowOffset: 1,
          data: rowItem,
          eventDispatch: _this.state.eventDispatch,
          itemProvider: _this.props.itemProvider,
          listProps: _this.props,
          onFocusItem: _this.onFocusItem,
          singleClickActivation: _this.props.onActivate && _this.props.singleClickActivation
        };
        var renderedRow;

        if (props.item) {
          renderedRow = renderRow(rowIndex, props.item, itemDetails);
        } else if (renderLoadingRow) {
          renderedRow = renderLoadingRow(rowIndex, itemDetails);
        } else {
          renderedRow = _this.renderLoadingRow(rowIndex, itemDetails);
        }

        var rowTop = 0;
        var rowHeightSpace = 0;

        if (rowIndex >= firstMaterialized && rowIndex <= lastMaterialized) {
          rowHeightSpace = rowHeight;
        } // If we run out of room move from the bottom up. This can happen with proportionally allocated rows


        if (firstMaterialized * rowHeight * rowProportion + (lastMaterialized - firstMaterialized) * rowHeight > _this.state.maxHeight) {
          rowTop = _this.state.maxHeight;
          rowTop -= (rowCount - lastMaterialized) * rowHeight * rowProportion;
          rowTop -= (lastMaterialized - rowIndex) * rowHeight;
        } else {
          if (rowHeightSpace === 0) {
            rowTop = rowIndex * rowHeight * rowProportion;
          } else {
            rowTop = firstMaterialized * rowHeight * rowProportion;
            rowTop += (rowIndex - firstMaterialized) * rowHeight;
          }
        }

        return react.createElement(FocusWithin, {
          onFocus: onFocus_1
        }, function (focusStatus) {
          return react.createElement(FocusZoneContext.Consumer, null, function (rowContext) {
            return react.createElement(FocusZone, {
              direction: FocusZoneDirection.Horizontal
            }, react.createElement("div", {
              className: Util_css("bolt-fixed-height-list-row scroll-hidden absolute", _this.focusIndex.value === rowIndex && "focused"),
              style: {
                height: rowHeightSpace + "px",
                top: rowTop + "px"
              },
              "data-focuszone": rowContext.focuszoneId,
              "data-row-index": rowIndex,
              tabIndex: rowIndex === 0 ? 0 : -1,
              onBlur: focusStatus.onBlur,
              onFocus: focusStatus.onFocus,
              role: role
            }, renderedRow));
          });
        });
      }); // Save the row in our cache.

      if (isVisible) {
        this.state.renderedRows[rowIndex] = renderedRow;
      } else {
        this.state.focusRows[rowIndex] = renderedRow;
      }
    }

    return renderedRow;
  };

  FixedHeightList.prototype.rowActivated = function (event, listRow) {
    this.state.eventDispatch.dispatchEvent(event, listRow, "activate");

    if (this.props.onActivate) {
      this.props.onActivate(event, listRow);
    }
  };

  FixedHeightList.prototype.rowSelected = function (event, listRow) {
    this.state.eventDispatch.dispatchEvent(event, listRow, "select");

    if (this.props.onSelect) {
      this.props.onSelect(event, listRow);
    }
  };

  FixedHeightList.prototype.rowFocused = function (event, listRow) {
    this.state.eventDispatch.dispatchEvent(event, listRow, "focus");

    if (this.props.onFocus) {
      this.props.onFocus(event, listRow);
    }
  };

  FixedHeightList.contextType = IntersectionContext;
  FixedHeightList.defaultProps = {
    defaultTabbableRow: 0,
    focuszoneProps: {
      direction: FocusZoneDirection.Vertical
    },
    maxHeight: 1000000
  };
  return FixedHeightList;
}(react.Component);



function getAttributeAsNumber(element, attributeName) {
  var attributeValue = element.getAttribute(attributeName);

  if (attributeValue) {
    return parseInt(attributeValue, 10);
  }

  return -1;
}

function rowFromElement(element) {
  var attributeValue;
  var cellIndex = -1;
  var rowIndex = -1;
  var cellElement = null;

  while (element) {
    attributeValue = getAttributeAsNumber(element, "data-row-index");

    if (attributeValue !== -1) {
      rowIndex = attributeValue;
      break;
    } // We have hit the root of the details list, dont look above this.


    if (element.classList.contains("bolt-fixed-height-list")) {
      element = null;
      break;
    }

    element = element.parentElement;
  }

  return {
    cellElement: cellElement,
    cellIndex: cellIndex,
    rowElement: element,
    rowIndex: rowIndex
  };
}
function rowFromEvent(event) {
  return rowFromElement(event.target);
}
// EXTERNAL MODULE: ./node_modules/azure-devops-ui/Components/List/FixedHeightList.Props.js
var FixedHeightList_Props = __webpack_require__("./node_modules/azure-devops-ui/Components/List/FixedHeightList.Props.js");
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Link/Link.css
var Link = __webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Link/Link.css");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Link/Link.css

      
      
      
      
      
      
      
      
      

var Link_options = {};

Link_options.styleTagTransform = (styleTagTransform_default());
Link_options.setAttributes = (setAttributesWithoutAttributes_default());

      Link_options.insert = insertBySelector_default().bind(null, "head");
    
Link_options.domAPI = (styleDomAPI_default());
Link_options.insertStyleElement = (insertStyleElement_default());

var Link_update = injectStylesIntoStyleTag_default()(Link/* default */.Z, Link_options);




       /* harmony default export */ const Link_Link = (Link/* default */.Z && Link/* default.locals */.Z.locals ? Link/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Link/Link.js











var Link_Link_Link =
/** @class */
function (_super) {
  __extends(Link, _super);

  function Link() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.ref = react.createRef();

    _this.onClick = function (event) {
      _this.handleActivation(event);
    };

    _this.onKeyPress = function (event) {
      if (!_this.props.href && event.which === KeyCode.enter) {
        // We only want to handle keyboard interaction if there is no href
        _this.handleActivation(event);
      }
    };

    _this.onFocus = function (event) {
      if (_this.props.onFocus) {
        _this.props.onFocus(event);
      }

      if (_this.props.id) {
        _this.context.onFocus(_this.props.id);
      }
    };

    return _this;
  }

  Link.prototype.render = function () {
    var _this = this;

    return react.createElement(FocusZoneContext.Consumer, null, function (focusZoneContext) {
      var props = _this.props;
      var ariaDescribedBy = props.ariaDescribedBy,
          ariaLabel = props.ariaLabel,
          ariaExpanded = props.ariaExpanded,
          ariaHasPopup = props.ariaHasPopup,
          ariaSelected = props.ariaSelected,
          className = props.className,
          draggable = props.draggable,
          excludeFocusZone = props.excludeFocusZone,
          target = props.target,
          dataIsFocusable = props.dataIsFocusable;
      var rel = props.rel,
          role = props.role;
      var TagType = "a"; // If the link is targetting an external window or tab and no explicit rel
      // attribute was supplied we will set noopener.

      if (target && !rel) {
        rel = "noopener";
      }

      if (!props.href && !props.role) {
        role = "button";
      }

      if (!props.href) {
        TagType = "span";
      }

      var link = react.createElement(TagType, {
        ref: _this.ref,
        "aria-describedby": getSafeId(ariaDescribedBy),
        "aria-expanded": ariaExpanded,
        "aria-haspopup": ariaHasPopup,
        "aria-label": ariaLabel,
        "aria-selected": ariaSelected,
        className: Util_css(className, "bolt-link", props.disabled && "disabled", props.subtle && "subtle", props.underline && "underline"),
        "data-focuszone": !excludeFocusZone && focusZoneContext.focuszoneId,
        "data-is-focusable": dataIsFocusable,
        download: props.download,
        draggable: draggable,
        href: props.href,
        id: getSafeId(props.id),
        onBlur: props.onBlur,
        onClick: _this.onClick,
        onFocus: _this.onFocus,
        onKeyPress: _this.onKeyPress,
        onMouseEnter: props.onMouseEnter,
        onMouseLeave: props.onMouseLeave,
        onMouseOver: props.onMouseOver,
        onTouchEnd: props.onTouchEnd,
        onTouchMove: props.onTouchMove,
        onTouchStart: props.onTouchStart,
        rel: rel,
        role: role,
        tabIndex: getTabIndex(_this.props, _this.context),
        target: target
      }, _this.props.children);

      if (props.tooltipProps) {
        link = react.createElement(Tooltip_Tooltip, tslib_es6_assign({}, props.tooltipProps), link);
      }

      return link;
    });
  };

  Link.prototype.focus = function () {
    this.ref.current && this.ref.current.focus();
  };

  Link.prototype.handleActivation = function (event) {
    if (!event.defaultPrevented) {
      if (this.props.disabled) {
        event.preventDefault();
      } else {
        this.props.onClick && this.props.onClick(event);
      }
    }
  };

  Link.contextType = FocusGroupContext;
  return Link;
}(react.Component);


// EXTERNAL MODULE: ./node_modules/azure-devops-ui/Components/Link/Link.Props.js
var Link_Props = __webpack_require__("./node_modules/azure-devops-ui/Components/Link/Link.Props.js");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Link/Utilities.js

/**
 * Handles an href and target being passed to an anchor, without a rel.
 */

function getDefaultAnchorProps(anchorProps) {
  var modifiedAnchorProps;

  if (anchorProps) {
    var rel = anchorProps.rel;

    if (anchorProps.href && anchorProps.target && !rel) {
      rel = "noopener";
    }

    modifiedAnchorProps = {
      href: anchorProps.href,
      rel: rel,
      target: anchorProps.target
    };
  }

  return modifiedAnchorProps;
}
/**
 * Handles an href and target being passed to a link, without a rel.
 */

function getDefaultLinkProps(linkProps) {
  if (!linkProps) {
    return getDefaultAnchorProps(linkProps);
  }

  return tslib_es6_assign(tslib_es6_assign({}, getDefaultAnchorProps(linkProps)), {
    disabled: linkProps.disabled,
    id: linkProps.id,
    onClick: linkProps.onClick,
    role: linkProps.role
  });
}
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Link.js



;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/List/List.js

















/**
 * The List component is used to render a collection of items with a series of rows.
 */

var List_List_List =
/** @class */
function (_super) {
  __extends(List, _super);

  function List(props) {
    var _this = _super.call(this, props) || this; // Track the table element used to render the rows.


    _this.bodyElement = react.createRef();
    _this.listElement = react.createRef(); // Manage data about pages, including their spacers.

    _this.spacerElements = {};
    _this.scrollToIndex = -1;
    _this.scrollToOptions = undefined; // Focus/Selection management members.

    _this.selectOnFocus = true;
    _this.focusIndex = -1;
    _this.pivotIndex = -1;

    _this.onBlur = function () {
      _this.focusIndex = -1;
    };

    _this.onClick = function (event) {
      _this.onDispatch(event);

      if (!event.defaultPrevented && !(event.altKey && _this.props.selectableText)) {
        if (_this.listElement.current) {
          var _a = cellFromEvent(event),
              cellElement = _a.cellElement,
              rowIndex = _a.rowIndex;

          if (!cellElement || !eventTargetContainsNode(event, ["A"], cellElement)) {
            var item = ObservableLike.getValue(_this.state.rows[rowIndex]);

            if (rowIndex >= 0 && item) {
              var listRow = {
                data: item,
                index: rowIndex
              }; // Even for singleClickActivation we fire the selection before activation.

              if (_this.props.selectRowOnClick) {
                _this.processSelectionEvent(event, listRow);
              } // For singleClickActivation we want the activation as well.


              if (_this.props.singleClickActivation) {
                _this.rowActivated(event, listRow);
              }
            }
          }
        }
      }
    };

    _this.onDispatch = function (event) {
      _this.state.eventDispatch.dispatchEvent(event);
    };

    _this.onDoubleClick = function (event) {
      _this.onDispatch(event);

      if (!event.defaultPrevented && !_this.props.singleClickActivation) {
        var rowIndex = cellFromEvent(event).rowIndex;
        var item = ObservableLike.getValue(_this.state.rows[rowIndex]);

        if (rowIndex >= 0 && item) {
          _this.rowActivated(event, {
            data: item,
            index: rowIndex
          });
        }
      }
    };

    _this.onFocusBody = function (event) {
      // The first time the list gets focus we need to select initial row if we are performing
      // selection of focus.
      if (_this.selectOnFocus) {
        var selection = _this.props.selection;

        if (!selection || selection.selectOnFocus) {
          var rowIndex = _this.focusIndex;

          if (rowIndex >= 0) {
            var item = ObservableLike.getValue(_this.state.rows[rowIndex]);

            if (item) {
              _this.processSelectionEvent(event, {
                data: item,
                index: rowIndex
              });
            }
          }
        }

        _this.selectOnFocus = false;
      }
    };

    _this.onFocusItem = function (rowIndex, event) {
      var focusIndex = _this.focusIndex;

      if (focusIndex !== rowIndex) {
        // We need to re-render the previously focused row and newly focused row so we will
        // clear the cached values.
        if (focusIndex >= 0) {
          delete _this.state.renderedRows[focusIndex];
        } else {
          // If there was a tabble row that was not the focusIndex row we need to update this
          // row as well to get it re-rendered without the tabIndex.
          delete _this.state.renderedRows[_this.getInitialTabbableRow()];
        }

        delete _this.state.renderedRows[rowIndex];
        _this.focusIndex = rowIndex;
        var item = ObservableLike.getValue(_this.state.rows[rowIndex]);

        if (item) {
          _this.rowFocused(event, {
            data: item,
            index: rowIndex
          });
        }
      }
    };

    _this.onKeyDown = function (event) {
      _this.onDispatch(event);

      if (!event.defaultPrevented) {
        var nodeName = event.target.nodeName;

        if (nodeName === "INPUT" || nodeName === "TEXTAREA") {
          // Don't handle keyboard events when target is an input
          return;
        }

        var focusIndex_1 = _this.focusIndex;
        var item = ObservableLike.getValue(_this.state.rows[focusIndex_1]);

        if (item) {
          if (event.which === KeyCode.enter) {
            if (focusIndex_1 >= 0 && !eventTargetContainsNode(event, ["A"])) {
              _this.rowActivated(event, {
                data: item,
                index: focusIndex_1
              });
            }
          } else if (event.which === KeyCode.space) {
            _this.processSelectionEvent(event, {
              data: item,
              index: focusIndex_1
            });

            event.preventDefault();
          } else if (event.which === KeyCode.upArrow || event.which === KeyCode.downArrow) {
            var selection = _this.props.selection;

            if (!selection || selection.selectOnFocus && (event.shiftKey || !event.ctrlKey)) {
              event.persist(); // Need to wait for the keyboard event to be processed by the focuszone.

              window.setTimeout(function () {
                if (_this.focusIndex != focusIndex_1) {
                  var data = ObservableLike.getValue(_this.state.rows[_this.focusIndex]);

                  if (data) {
                    _this.processSelectionEvent(event, {
                      data: data,
                      index: _this.focusIndex
                    });
                  }
                }
              }, 0);
            }
          } else if (event.which === KeyCode.pageDown) {
            var stats = _this.getStats();

            _this.focusRow(Math.min(focusIndex_1 + (stats.lastRendered - stats.firstRendered), _this.state.rowCount - 1), 1);

            event.preventDefault();
          } else if (event.which === KeyCode.pageUp) {
            var stats = _this.getStats();

            _this.focusRow(Math.max(focusIndex_1 - (stats.lastRendered - stats.firstRendered), 0), -1);

            event.preventDefault();
          } else if (event.which === KeyCode.home) {
            _this.focusRow(0, 1);

            event.preventDefault();
          } else if (event.which === KeyCode.end) {
            _this.focusRow(_this.state.rowCount - 1, -1);

            event.preventDefault();
          }
        }
      }
    };

    _this.onIntersect = function (entries) {
      // If virtualization is disabled, we will not attempt to adjust the viewport.
      if (!_this.props.virtualize) {
        return;
      }

      var scrollTop = _this.context.root.scrollTop;
      var _a = _this.state,
          firstRendered = _a.firstRendered,
          firstMaterialized = _a.firstMaterialized,
          lastRendered = _a.lastRendered,
          lastMaterialized = _a.lastMaterialized,
          rowCount = _a.rowCount,
          rowProportion = _a.rowProportion;
      var rowHeight = _this.state.rowHeight; // console.log({ phase: "onIntersect - Start", firstMaterialized, lastMaterialized, rowHeight });
      // Don't process an intersection while scroll event is pending.

      if (scrollTop !== _this.state.scrollTop && entries.length) {
        // console.log("Don't process an intersection while scroll event is pending.");
        return;
      } // Ignore events if we dont have a our basic elements resolved (this should never happen).


      if (!_this.listElement.current || !_this.bodyElement.current) {
        // console.log("Elements not available at this point.");
        return;
      } // We are going to enumerate all the children, if the row is in the viewport
      // we will determine if it should be paged out.


      var rowElements = _this.bodyElement.current.children; // If a rowHeight was specified we will compute one based on the average rowHeight in the
      // first page rendered.

      if (rowHeight === 0) {
        if (rowElements.length > 0) {
          var totalHeight = 0;
          var childCount = 0; // Loop through all children and average the rowHeight's.

          for (var childIndex = 0; childIndex < rowElements.length; childIndex++) {
            var childHeight = _this.bodyElement.current.children[childIndex].getBoundingClientRect().height;

            if (childHeight > 0) {
              totalHeight += childHeight;
              childCount++;
            }
          } // Make sure we have at least one child row that has size.


          if (childCount > 0) {
            rowHeight = totalHeight / childCount;
          }
        }

        if (rowHeight === 0) {
          return;
        } // If we have a pending scrollIntoView we will schedule it now that we have the rowHeight


        if (_this.scrollToIndex !== -1) {
          _this.setState({
            firstMaterialized: Math.max(0, _this.scrollToIndex - _this.state.pageSize),
            lastMaterialized: _this.scrollToIndex + Math.min(_this.props.initialPageCount * _this.state.pageSize, rowCount - 1),
            rowHeight: rowHeight
          });

          return;
        } // console.log({ phase: "onIntersect - Compute RowHeight", rowHeight });

      } // Determine the location of the intersection within the page. This is the element
      // we are scrolling within.


      var intersectionRect = _this.context.root.getBoundingClientRect(); // Track the first and last row elements for adjusting the range.


      var firstMaterializedElement;
      var lastMaterializedElement;
      var firstMaterializedUpdated = firstMaterialized;
      var lastMaterializedUpdated = lastMaterialized;
      var firstRenderedUpdated = lastMaterializedUpdated;
      var lastRenderedUpdated = firstMaterializedUpdated; // Go through the viewport pages and determine if any are out of range and should be
      // paged out. Range is defined as more than 1 page of estimated rows away from the
      // nearest edge. If you dont allow for 1 page of estimated rows it may thrash pages
      // in and out of materialization.

      for (var childIndex = 0; childIndex < rowElements.length; childIndex++) {
        // Determine if this child is in the viewport, ignore rows that are not.
        var rowElement = rowElements[childIndex];
        var rowIndex = List_getAttributeAsNumber(rowElement, "data-row-index");
        var rowRect = rowElement.getBoundingClientRect();

        if (rowIndex >= firstMaterialized && rowIndex <= lastMaterialized) {
          // Make sure to leave some extra room above and below the visible rectangle to handle
          // variable height rows. This helps prevent jittering when paging rows out.
          if (rowRect.bottom < intersectionRect.top - _this.state.pageSize * rowHeight) {
            firstMaterializedUpdated++;
          } else if (rowRect.top > intersectionRect.bottom + _this.state.pageSize * rowHeight) {
            lastMaterializedUpdated--;
          } // We will save the first and last rows for later computations.


          if (rowIndex === firstMaterialized) {
            firstMaterializedElement = rowElement;
          }

          if (rowIndex === lastMaterialized) {
            lastMaterializedElement = rowElement;
          }
        } // If the row is within the intersection rect, update the first and last rendered rows. These might be the focused items


        if (rowIndex > -1 && rowRect.top < intersectionRect.bottom && rowRect.bottom > intersectionRect.top) {
          lastRenderedUpdated = Math.max(lastRenderedUpdated, rowIndex);
          firstRenderedUpdated = Math.min(firstRenderedUpdated, rowIndex);
        }
      } // When we are scaling the size of the list, we want to keep a pageSize worth of elements materiaized but not rendered.
      // This allows users to scroll a few items. If they quickly scroll past the last materialized element or drag the scroll wheel, we recalculate where we should be
      // instead of paging in rows.


      if (rowProportion < 1) {
        if (firstMaterializedUpdated > lastMaterializedUpdated || firstRenderedUpdated === firstMaterializedUpdated || lastRenderedUpdated === lastMaterializedUpdated) {
          if (lastRenderedUpdated >= rowCount - 1) {
            firstMaterializedUpdated = Math.ceil(lastMaterializedUpdated - (intersectionRect.height / rowHeight + _this.state.pageSize));
          } else {
            var offsetTop = scrollTop - (_this.listElement.current.offsetTop - _this.context.root.offsetTop);
            firstMaterializedUpdated = Math.max(0, Math.min(rowCount - 1, Math.floor(offsetTop / (rowProportion * rowHeight))) - _this.state.pageSize);
            lastMaterializedUpdated = Math.min(rowCount - 1, firstMaterializedUpdated + Math.ceil(intersectionRect.height / rowHeight + _this.state.pageSize));
            lastRenderedUpdated = -1;
            firstRenderedUpdated = -1;
          }
        } else {
          firstMaterializedUpdated = Math.min(firstMaterializedUpdated, firstRenderedUpdated - _this.state.pageSize);
          lastMaterializedUpdated = Math.max(lastMaterializedUpdated, lastRenderedUpdated + _this.state.pageSize);
        }
      } // If the row range is inverted (top above bottom) then all rows have been hidden and we should
      // recompute the viewport based on the scrollTop of our intersection and intersection height.
      else if (firstMaterializedUpdated > lastMaterializedUpdated) {
        var offsetTop = scrollTop - (_this.listElement.current.offsetTop - _this.context.root.offsetTop);
        firstMaterializedUpdated = Math.max(0, Math.min(rowCount - 1, Math.floor(offsetTop / rowHeight)) - _this.state.pageSize);
        lastMaterializedUpdated = Math.min(rowCount - 1, firstMaterializedUpdated + Math.ceil(intersectionRect.height / rowHeight + _this.state.pageSize));
        lastRenderedUpdated = -1;
        firstRenderedUpdated = -1;
      } else {
        // If the firstPage didn't move down, we may need more pages above.
        if (firstMaterializedUpdated === firstMaterialized && firstMaterializedElement) {
          var rowRect = firstMaterializedElement.getBoundingClientRect();
          var availableSpace = rowRect.top - intersectionRect.top;

          if (availableSpace > 0) {
            firstMaterializedUpdated -= Math.ceil(availableSpace / rowHeight);
          }
        } // If the lastPage didn't move up, we may need more pages below.


        if (lastMaterializedUpdated === lastMaterialized && lastMaterializedElement) {
          var rowRect = lastMaterializedElement.getBoundingClientRect();
          var availableSpace = intersectionRect.bottom - rowRect.bottom;

          if (availableSpace > 0) {
            lastMaterializedUpdated += Math.ceil(availableSpace / rowHeight);
          }
        }
      } // Make sure our page boundary stays in the available page range.


      firstMaterializedUpdated = Math.max(firstMaterializedUpdated, 0);
      lastMaterializedUpdated = Math.min(lastMaterializedUpdated, rowCount - 1); // console.log({ phase: "onIntersect - End", firstMaterializedUpdated, lastMaterializedUpdated, rowHeight });
      // Update our state if and only if something has changed.

      if (firstMaterializedUpdated !== firstMaterialized || firstRenderedUpdated !== firstRendered || lastMaterializedUpdated !== lastMaterialized || lastRenderedUpdated !== lastRendered || rowHeight !== _this.state.rowHeight || scrollTop !== _this.state.scrollTop) {
        //
        // @TODO: We need to unload data for pages that are no longer rendererd.
        // This means not in the viewport or within any other rendered range.
        //
        // console.log({ phase: "onIntersect - stateChange", firstMaterializedUpdated, firstRenderedUpdated, lastRenderedUpdated, lastMaterializedUpdated, scrollTop });
        _this.setState({
          firstMaterialized: firstMaterializedUpdated,
          firstRendered: firstRenderedUpdated,
          lastMaterialized: lastMaterializedUpdated,
          lastRendered: lastRenderedUpdated,
          rowHeight: rowHeight,
          scrollTop: scrollTop
        });
      }
    };

    _this.onPointerDownBody = function (event) {
      // If the table body gets a mousedown, we will never need to fire the selection event when
      // the list gets focus since the mouse event will cause the selection.
      _this.selectOnFocus = false;
    };

    _this.getInitialTabbableRow = function () {
      var _a = _this.props,
          defaultTabbableRow = _a.defaultTabbableRow,
          itemProvider = _a.itemProvider,
          selection = _a.selection;

      if (defaultTabbableRow) {
        return defaultTabbableRow;
      }

      if (selection) {
        for (var i = 0; i < itemProvider.length; i++) {
          if (selection.selectable(i)) {
            return i;
          }
        }
      }

      return 0;
    };

    _this.getHeight = function (rowIndex) {
      var height = 0;
      var rowHeights = _this.props.rowHeights || [];

      for (var i = 0; i < rowIndex && i < rowHeights.length; i++) {
        height += rowHeights[i];
      }

      return height;
    };

    var rowCount = props.itemProvider.length;
    var pageSize = props.pageSize;
    _this.state = {
      columnCount: 1,
      eventDispatch: props.eventDispatch || new EventDispatch(),
      firstMaterialized: 0,
      firstRendered: 0,
      itemProvider: props.itemProvider,
      lastMaterialized: _this.props.virtualize ? Math.min(props.initialPageCount * pageSize, rowCount - 1) : rowCount - 1,
      lastRendered: _this.props.virtualize ? Math.min(props.initialPageCount * pageSize, rowCount - 1) : rowCount - 1,
      overlays: new ObservableArray(),
      pageSize: pageSize,
      renderedRows: {},
      rowCount: rowCount,
      rowHeight: props.rowHeight || 0,
      rowProportion: props.rowHeight && props.maxHeight ? Math.min(1, props.maxHeight / (props.rowHeight * rowCount)) : 1,
      rows: {},
      scrollTop: 0
    }; // Initialize the supplied behaviors.

    if (props.behaviors) {
      for (var _i = 0, _a = props.behaviors; _i < _a.length; _i++) {
        var behavior = _a[_i];

        if (behavior.initialize) {
          behavior.initialize(props, _this, _this.state.eventDispatch);
        }
      }
    }

    return _this;
  }

  List.getDerivedStateFromProps = function (props, state) {
    var rowCount = props.itemProvider.length;
    var firstMaterialized = state.firstMaterialized;
    var lastMaterialized = state.lastMaterialized;

    if (rowCount !== state.rowCount) {
      firstMaterialized = Math.max(0, Math.min(state.firstMaterialized, rowCount));
      lastMaterialized = props.virtualize ? Math.max(firstMaterialized, Math.min(state.lastMaterialized + (state.lastMaterialized === state.rowCount - 1 ? props.pageSize : 0), rowCount - 1)) : rowCount - 1;
    } // Ensure out pages and providers are appropriately computed.


    var updatedState = {
      firstMaterialized: firstMaterialized,
      itemProvider: props.itemProvider,
      lastMaterialized: lastMaterialized,
      pageSize: props.pageSize,
      rowCount: rowCount,
      rowProportion: Math.min(1, (props.maxHeight || 100000) / (state.rowHeight * (rowCount - (lastMaterialized - firstMaterialized))))
    }; // If there are changes to the props that affect the cached data, we need it clear it.

    if (props.itemProvider !== state.itemProvider || props.columnCount !== state.columnCount) {
      updatedState.columnCount = props.columnCount;
      updatedState.renderedRows = {};
      updatedState.rows = {};
    } // console.log(updatedState);


    return updatedState;
  };

  List.prototype.render = function () {
    var _this = this;

    var _a = this.props,
        ariaRowOffset = _a.ariaRowOffset,
        className = _a.className,
        focuszoneProps = _a.focuszoneProps,
        id = _a.id,
        maxWidth = _a.maxWidth,
        minWidth = _a.minWidth,
        width = _a.width;
    var _b = this.state,
        firstMaterialized = _b.firstMaterialized,
        lastMaterialized = _b.lastMaterialized,
        rowCount = _b.rowCount,
        rowProportion = _b.rowProportion;
    var focusIndex = this.focusIndex;
    var role = this.props.role ? this.props.role : this.props.selection ? "listbox" : "list";
    var useAriaCounts = role === "table" || role === "grid" || role === "treegrid";
    var rows = []; // Number of pages each spacer takes up. There are potentially two spacers above
    // or below the view port. They surround the focus range when the focus range is
    // not within the viewport.

    var topSpacer1 = 0;
    var topSpacer2 = firstMaterialized;
    var bottomSpacer2 = Math.max(0, rowCount - lastMaterialized - 1);
    var bottomSpacer1 = 0;
    var firstFocusRow = Number.MAX_SAFE_INTEGER;
    var lastFocusRow = 0; // Compute the range of focus pages, these will be either before or after the pages
    // in the viewport. We need to ensure we have one row before and one row after the
    // focus row to support arrowing up and down.

    if (focusIndex !== -1) {
      firstFocusRow = Math.max(0, focusIndex - 3);
      lastFocusRow = Math.min(rowCount, focusIndex + 3); // Make sure we dont draw any of the pages that are in the viewport.

      if (firstFocusRow < firstMaterialized) {
        lastFocusRow = Math.min(lastFocusRow, firstMaterialized - 1);
        topSpacer1 = firstFocusRow;
        topSpacer2 = firstMaterialized - lastFocusRow - 1;
      } else if (lastFocusRow > lastMaterialized) {
        firstFocusRow = Math.max(firstFocusRow, lastMaterialized + 1);
        bottomSpacer2 = firstFocusRow - lastMaterialized - 1;
        bottomSpacer1 = Math.max(0, rowCount - lastFocusRow - 1);
      }
    }

    if (rowProportion < 1) {
      // Ensure that the spacers leave room for 1 pageSize above the viewport
      topSpacer2 += Math.min(this.state.pageSize, firstMaterialized);
    } // console.log({ phase: "render", firstMaterialized, lastMaterialized, topSpacer1, topSpacer2, bottomSpacer2, bottomSpacer1 });


    rows.push(this.renderSpacer("st1", topSpacer1)); // If the focus pages are before the viewport render them up to
    // the first page but not including the first page.

    if (firstFocusRow < firstMaterialized) {
      for (var rowIndex = firstFocusRow; rowIndex <= lastFocusRow; rowIndex++) {
        rows.push(this.renderRow(rowIndex));
      }
    }

    rows.push(this.renderSpacer("st2", topSpacer2)); // Go through each of the rendered pages and generate the child component.

    for (var rowIndex = firstMaterialized; rowIndex <= lastMaterialized; rowIndex++) {
      rows.push(this.renderRow(rowIndex));
    }

    rows.push(this.renderSpacer("sb2", bottomSpacer2, true)); // If the focus pages are after the last page in the viewport render
    // them but not including the last page.

    if (lastFocusRow > lastMaterialized) {
      for (var rowIndex = firstFocusRow; rowIndex <= lastFocusRow; rowIndex++) {
        rows.push(this.renderRow(rowIndex));
      }
    }

    rows.push(this.renderSpacer("sb1", bottomSpacer1, true));
    return react.createElement(UncheckedObserver, {
      itemProvider: {
        // Supply an IObservableExpression to elevate the provider change to a state
        // update for the entire component instead of just the observer.
        filter: function (change, action) {
          // Notify the selection about the change to the items.
          if (_this.props.selection) {
            _this.props.selection.onItemsChanged(change, action);
          } // @NOTE: For now we will just wipe out the entire cache, we can do an optimized
          // update to the cache based on the rows that changed.


          var updatedState = {
            renderedRows: {},
            rows: {}
          }; // If the focused row was removed, we will clear the focus index.

          if (change.removedItems && _this.focusIndex >= change.index && change.index + change.removedItems.length >= _this.focusIndex) {
            _this.focusIndex = -1;
          } // If there is a well defined rowcount we will update it and the maxPage.


          if (_this.state.rowCount !== -1) {
            var countChange = (change.addedItems ? change.addedItems.length : 0) - (change.removedItems ? change.removedItems.length : 0);

            if (countChange) {
              updatedState.rowCount = _this.state.rowCount + countChange;
              updatedState.firstMaterialized = Math.max(0, Math.min(_this.state.firstMaterialized, updatedState.rowCount - 1));
              updatedState.lastMaterialized = _this.props.virtualize ? Math.max(updatedState.firstMaterialized, Math.min(_this.state.lastMaterialized + (change.index >= _this.state.firstMaterialized && change.index <= _this.state.lastMaterialized + 1 ? Math.min(_this.state.pageSize, countChange) : 0), updatedState.rowCount - 1)) : updatedState.rowCount - 1;
            }
          } // console.log(updatedState);


          _this.setState(updatedState);

          return false;
        },
        observableValue: this.props.itemProvider
      }
    }, react.createElement(FocusWithin, {
      onBlur: this.onBlur
    }, function (focusStatus) {
      // @TODO: Once we get the line-height: 20px in the body the body-m should be removed from the list.
      var list = react.createElement("table", {
        "aria-colcount": useAriaCounts ? _this.props.ariaColumnCount ? _this.props.ariaColumnCount : _this.props.columnCount : undefined,
        "aria-label": _this.props.ariaLabel,
        "aria-rowcount": useAriaCounts ? _this.state.itemProvider.length + ariaRowOffset : undefined,
        className: Util_css(className, "bolt-list body-m relative", _this.props.showScroll ? undefined : "scroll-hidden"),
        id: getSafeId(id),
        onBlur: focusStatus.onBlur,
        onClick: _this.onClick,
        onContextMenu: _this.onDispatch,
        onDoubleClick: _this.onDoubleClick,
        onDragEnd: _this.onDispatch,
        onDragEnter: _this.onDispatch,
        onDragExit: _this.onDispatch,
        onDragOver: _this.onDispatch,
        onDragStart: _this.onDispatch,
        onDrop: _this.onDispatch,
        onFocus: focusStatus.onFocus,
        onKeyDown: _this.onKeyDown,
        onKeyUp: _this.onDispatch,
        onPointerDown: _this.onDispatch,
        ref: _this.listElement,
        role: role,
        style: {
          maxWidth: maxWidth,
          minWidth: minWidth,
          width: width
        }
      }, _this.props.renderHeader && _this.props.renderHeader(), react.createElement("tbody", {
        className: "relative",
        onFocus: _this.onFocusBody,
        onPointerDown: _this.onPointerDownBody,
        ref: _this.bodyElement,
        role: role === "listbox" || role === "list" || role === "menu" ? "presentation" : undefined
      }, _this.renderOverlay(_this.listElement), rows));

      if (focuszoneProps) {
        list = react.createElement(FocusZone, tslib_es6_assign({}, focuszoneProps, {
          skipHiddenCheck: true
        }), list);
      }

      return list;
    }));
  };

  List.prototype.componentDidMount = function () {
    this.context.register(this.onIntersect);
  };

  List.prototype.componentDidUpdate = function () {
    var _a = this,
        scrollToIndex = _a.scrollToIndex,
        onScrollComplete = _a.onScrollComplete;

    if (scrollToIndex !== -1 && this.state.rowHeight) {
      var parentElement = this.bodyElement.current;
      var _b = this.state,
          firstMaterialized = _b.firstMaterialized,
          lastMaterialized = _b.lastMaterialized; // If the row is materialized, we will ensure it is in the viewport.

      if (scrollToIndex >= firstMaterialized && scrollToIndex <= lastMaterialized && parentElement) {
        for (var currentIndex = 0; currentIndex < parentElement.children.length; currentIndex++) {
          var childElement = parentElement.children[currentIndex];
          var cellDetails = cellFromElement(childElement);

          if (cellDetails.rowIndex === scrollToIndex) {
            childElement.scrollIntoView(this.scrollToOptions);
            break;
          }
        }
      } // Reset the scroll state before we notify the complete function, it may start a new scroll operation.


      this.onScrollComplete = undefined;
      this.scrollToIndex = -1;
      this.scrollToOptions = undefined; // Notify any pending scrollComplete method that scrolling has completed.

      if (onScrollComplete) {
        onScrollComplete(scrollToIndex);
      }
    }
  };

  List.prototype.componentWillUnmount = function () {
    this.context.unregister(this.onIntersect);
  };

  List.prototype.addOverlay = function (id, rowIndex, render, zIndex, columnIndex) {
    if (zIndex === void 0) {
      zIndex = 0;
    }

    var overlays = this.state.overlays;
    var overlayIndex = overlays.value.findIndex(function (overlay) {
      return overlay.id === id;
    });
    var rowOverlay = {
      render: render,
      id: id,
      rowIndex: rowIndex,
      zIndex: zIndex + 1,
      columnIndex: columnIndex
    }; // Update the overlay if it exists for that id, otherwise add it

    if (overlayIndex >= 0) {
      overlays.change(overlayIndex, rowOverlay);
    } else {
      overlays.push(rowOverlay);
    }
  };

  List.prototype.removeOverlay = function (id) {
    var overlays = this.state.overlays;
    var overlayIndex = overlays.value.findIndex(function (overlay) {
      return overlay.id === id;
    }); // Remove the overlay if it exists.

    if (overlayIndex >= 0) {
      overlays.splice(overlayIndex, 1);
    }
  };

  List.prototype.getFocusIndex = function () {
    return this.focusIndex;
  };

  List.prototype.getStats = function () {
    return {
      firstMaterialized: this.state.firstMaterialized,
      firstRendered: this.state.firstRendered,
      lastMaterialized: this.state.lastMaterialized,
      lastRendered: this.state.lastRendered
    };
  };

  List.prototype.scrollIntoView = function (rowIndex, options, onScrollComplete) {
    var _a = this.state,
        firstMaterialized = _a.firstMaterialized,
        lastMaterialized = _a.lastMaterialized,
        pageSize = _a.pageSize,
        rowCount = _a.rowCount,
        rowHeight = _a.rowHeight,
        rowProportion = _a.rowProportion;

    if (rowIndex >= 0 && rowIndex < this.state.rowCount) {
      var parentElement = this.bodyElement.current; // If the row is materialized, we will ensure it is in the viewport.

      if (rowIndex >= firstMaterialized && rowIndex <= lastMaterialized && parentElement) {
        for (var currentIndex = 0; currentIndex < parentElement.children.length; currentIndex++) {
          var childElement = parentElement.children[currentIndex];
          var cellDetails = cellFromElement(childElement);

          if (cellDetails.rowIndex === rowIndex) {
            childElement.scrollIntoView(options);
            break;
          }
        } // If the caller wants to know when the scroll has completed, notify them.


        if (onScrollComplete) {
          onScrollComplete(rowIndex);
        }
      } else {
        // We only notify the last caller for now, if someone was waiting and another
        // scroll request was made we will send -1 as the rowIndex scrolled into view.
        if (this.onScrollComplete) {
          this.onScrollComplete(-1);
        } // Set the scrollToOptions that will be applied after the next update.


        this.onScrollComplete = onScrollComplete;
        this.scrollToIndex = rowIndex;
        this.scrollToOptions = options; // We need to add some padding when we grow proportionally, since the spacers do not fill up enough room if
        // the list starts in the middle of the scrollable region

        var padding = rowProportion < 1 ? pageSize : 0; // If we havent computed the rowHeight at this point we need to wait until
        // we know how big rows are to get the row in the right location.

        if (rowHeight) {
          this.setState({
            firstMaterialized: Math.max(0, rowIndex - padding),
            lastMaterialized: Math.min(rowCount - 1, rowIndex + padding)
          });
        }
      }
    }
  };

  List.prototype.focusRow = function (rowIndex, direction) {
    var _this = this;

    if (direction === void 0) {
      direction = 1;
    }

    return new Promise(function (resolve) {
      _this.scrollIntoView(rowIndex, {
        block: "center"
      }, function (completedIndex) {
        if (completedIndex === rowIndex && _this.bodyElement.current) {
          var rowElement = _this.bodyElement.current.querySelector("[data-row-index='" + completedIndex + "']");

          if (rowElement) {
            // We need to ensure the requested row is focusable, if not we will move in the
            // requested direction to find the first focusable row.
            if (!rowElement.getAttribute("tabindex")) {
              var newIndex = Math.min(_this.state.rowCount - 1, Math.max(0, completedIndex + direction));

              if (newIndex !== completedIndex) {
                _this.focusRow(newIndex, direction);
              } else if (newIndex !== _this.focusIndex) {
                _this.focusRow(newIndex, -direction);
              }
            } else {
              rowElement.focus();
            }
          }
        }

        resolve();
      });
    });
  };

  List.prototype.processSelectionEvent = function (event, listRow) {
    var _a = this.props,
        selection = _a.selection,
        enforceSingleSelect = _a.enforceSingleSelect;

    if (!selection || selection.selectable(listRow.index)) {
      if (selection) {
        var index = listRow.index;
        var multiSelect = enforceSingleSelect ? false : selection.multiSelect; // Determine the type of change being made to the selection based on key states.

        if (this.pivotIndex >= 0 && event.shiftKey && multiSelect) {
          selection.select(Math.min(this.pivotIndex, index), Math.abs(this.pivotIndex - index) + 1, event.ctrlKey || event.metaKey, multiSelect);
        } else {
          var isSpaceBarStroke = event.which === KeyCode.space;

          if ((event.ctrlKey || event.metaKey || selection.alwaysMerge || isSpaceBarStroke) && multiSelect) {
            selection.toggle(index, true, multiSelect);
          } else {
            selection.select(index, 1, false, multiSelect);
          }
        } // Save the last selectionIndex that we selected, this will allow
        // us to perform range based selection.


        if (!event.shiftKey) {
          this.pivotIndex = index;
        }
      }

      this.rowSelected(event, listRow);
    }
  };

  List.prototype.renderLoadingRow = function (rowIndex, details) {
    return react.createElement(ListItem, {
      className: "bolt-list-row-loading",
      details: details,
      index: rowIndex
    }, react.createElement("div", {
      className: "shimmer shimmer-line",
      style: {
        width: Math.random() * 80 + 20 + "%"
      }
    }, "\u00A0"));
  };

  List.prototype.renderOverlay = function (listElementRef) {
    var _this = this;

    var _a = this.state,
        firstMaterialized = _a.firstMaterialized,
        lastMaterialized = _a.lastMaterialized,
        overlays = _a.overlays;
    return react.createElement(Observer, {
      overlays: overlays
    }, function (props) {
      var bodyElement = _this.bodyElement.current;

      if (props.overlays.length > 0 && bodyElement) {
        return react.createElement("div", {
          className: "bolt-list-overlay-container absolute"
        }, props.overlays.map(function (overlay) {
          var _a; // Make sure the row is in the rendered range of rows before starting.
          // Explicitly include column headers at row -1


          if (overlay.rowIndex !== -1 && (overlay.rowIndex < firstMaterialized || overlay.rowIndex > lastMaterialized)) {
            return null;
          } // Find the row for the given rowIndex


          var rowElement = listElementRef.current && listElementRef.current.querySelector("[data-row-index='" + overlay.rowIndex + "']"); // Special case for column overlay

          var columnElement = (_a = listElementRef.current) === null || _a === void 0 ? void 0 : _a.querySelector("[data-column-index='" + overlay.columnIndex + "']"); // We cant render the overlay if the row is paged out since we can't determine
          // the location of the row.

          if (rowElement) {
            return !columnElement ? react.createElement("div", {
              className: "bolt-list-overlay flex-row absolute",
              id: getSafeId(overlay.id),
              key: overlay.id,
              style: {
                height: rowElement.offsetHeight,
                top: rowElement.getBoundingClientRect().top - bodyElement.getBoundingClientRect().top,
                zIndex: overlay.zIndex * 10
              }
            }, overlay.render({
              rowElement: rowElement
            })) : react.createElement("div", {
              className: "bolt-list-overlay flex-row absolute",
              id: getSafeId(overlay.id),
              key: overlay.id,
              style: {
                height: rowElement.offsetHeight,
                width: columnElement.offsetWidth,
                top: rowElement.getBoundingClientRect().top - bodyElement.getBoundingClientRect().top,
                left: columnElement.getBoundingClientRect().left - bodyElement.getBoundingClientRect().left,
                zIndex: overlay.zIndex * 10
              }
            }, overlay.render({
              rowElement: columnElement
            }));
          }

          return null;
        }));
      }

      return null;
    });
  };

  List.prototype.renderRow = function (rowIndex) {
    var _this = this;

    var itemProvider = this.props.itemProvider;
    var _a = this.state,
        renderedRows = _a.renderedRows,
        rows = _a.rows;
    var renderedRow = renderedRows[rowIndex];

    if (!renderedRow) {
      var item_1 = rows[rowIndex];

      if (!item_1) {
        if (itemProvider.getItem) {
          item_1 = itemProvider.getItem(rowIndex);
        } else {
          item_1 = itemProvider.value[rowIndex];
        }
      } // @TODO: If there are no more rows, we need to handle an itemProvider with -1 length.


      if (!item_1) {
        return null;
      } // Save the current item in the item cache.


      rows[rowIndex] = item_1;
      var selection = this.props.selection;
      var selectionObservable = void 0;

      if (selection) {
        selectionObservable = {
          observableValue: selection,
          filter: function (selectedRanges) {
            for (var _i = 0, selectedRanges_1 = selectedRanges; _i < selectedRanges_1.length; _i++) {
              var selectionRange = selectedRanges_1[_i];

              if (rowIndex >= selectionRange.beginIndex && rowIndex <= selectionRange.endIndex) {
                return true;
              }
            }

            return false;
          }
        };
      } // console.log("render row - " + rowIndex);
      // Render the row, save it in the cache, and add it to the current page.


      renderedRow = react.createElement(UncheckedObserver, {
        item: item_1,
        key: rowIndex,
        selection: selectionObservable
      }, function (props) {
        var _a = _this.props,
            selectableText = _a.selectableText,
            renderRow = _a.renderRow,
            renderLoadingRow = _a.renderLoadingRow;
        var focusIndex = _this.focusIndex;
        var tabbableIndex = focusIndex >= 0 ? focusIndex : _this.getInitialTabbableRow();
        var rowItem = ObservableLike.getValue(item_1);
        var itemDetails = {
          selectableText: selectableText,
          ariaBusy: !props.item,
          ariaRowOffset: _this.props.ariaRowOffset + 1,
          data: rowItem,
          eventDispatch: _this.state.eventDispatch,
          excludeTabStop: tabbableIndex !== rowIndex,
          listProps: _this.props,
          onFocusItem: _this.onFocusItem,
          singleClickActivation: _this.props.onActivate && _this.props.singleClickActivation
        };

        if (props.item) {
          return renderRow(rowIndex, props.item, itemDetails);
        } else if (renderLoadingRow) {
          return renderLoadingRow(rowIndex, itemDetails);
        } else {
          return _this.renderLoadingRow(rowIndex, itemDetails);
        }
      }); // Save the row in our cache.

      this.state.renderedRows[rowIndex] = renderedRow;
    }

    return renderedRow;
  };

  List.prototype.renderSpacer = function (key, rowCount, estimateRowHeight) {
    var _this = this;

    var _a;

    var height = !estimateRowHeight && ((_a = this.props.rowHeights) === null || _a === void 0 ? void 0 : _a.length) ? this.getHeight(rowCount) : rowCount * this.state.rowHeight * this.state.rowProportion;
    return react.createElement("tr", {
      "aria-hidden": "true",
      className: "bolt-list-row-spacer invisible",
      key: key,
      ref: function (spacerElement) {
        var existingElement = _this.spacerElements[key];

        if (spacerElement) {
          if (existingElement !== spacerElement) {
            if (existingElement) {
              _this.context.unobserve(spacerElement);
            }

            _this.context.observe(spacerElement);

            _this.spacerElements[key] = spacerElement;
          }
        } else if (existingElement) {
          _this.context.unobserve(existingElement);

          delete _this.spacerElements[key];
        }
      },
      role: "presentation"
    }, react.createElement("td", {
      className: "bolt-list-cell-spacer invisible",
      colSpan: this.props.columnCount,
      style: {
        height: height + "px"
      }
    }));
  };

  List.prototype.rowActivated = function (event, listRow) {
    this.state.eventDispatch.dispatchEvent(event, listRow, "activate");

    if (this.props.onActivate) {
      this.props.onActivate(event, listRow);
    }
  };

  List.prototype.rowSelected = function (event, listRow) {
    this.state.eventDispatch.dispatchEvent(event, listRow, "select");

    if (this.props.onSelect) {
      this.props.onSelect(event, listRow);
    }
  };

  List.prototype.rowFocused = function (event, listRow) {
    this.state.eventDispatch.dispatchEvent(event, listRow, "focus");

    if (this.props.onFocus) {
      this.props.onFocus(event, listRow);
    }
  };

  List.contextType = IntersectionContext;
  List.defaultProps = {
    ariaRowOffset: 0,
    columnCount: 1,
    focuszoneProps: {
      direction: FocusZoneDirection.Vertical
    },
    initialPageCount: 3,
    maxHeight: 100000,
    pageSize: 10,
    singleClickActivation: false,
    selectRowOnClick: true,
    virtualize: true
  };
  return List;
}(react.Component);



var ScrollableList =
/** @class */
function (_super) {
  __extends(ScrollableList, _super);

  function ScrollableList() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.list = react.createRef();
    _this.scrollableElement = react.createRef();
    return _this;
  }

  ScrollableList.prototype.render = function () {
    return react.createElement(Intersection, {
      rootMargin: window.innerHeight / 2
    }, react.createElement("div", {
      ref: this.scrollableElement,
      onScroll: this.props.onScroll,
      className: Util_css(this.props.outerClassName, "flex-grow", "scroll-auto")
    }, react.createElement(List_List_List, tslib_es6_assign({}, this.props, {
      ref: this.list
    }))));
  };

  ScrollableList.prototype.addOverlay = function (id, rowIndex, render, zIndex, columnIndex) {
    if (zIndex === void 0) {
      zIndex = 0;
    }

    if (this.list.current) {
      return this.list.current.addOverlay(id, rowIndex, render, zIndex, columnIndex);
    }
  };

  ScrollableList.prototype.getStats = function () {
    if (this.list.current) {
      return this.list.current.getStats();
    }

    return {
      firstMaterialized: -1,
      firstRendered: -1,
      lastMaterialized: -1,
      lastRendered: -1
    };
  };

  ScrollableList.prototype.removeOverlay = function (id) {
    if (this.list.current) {
      return this.list.current.removeOverlay(id);
    }
  };

  ScrollableList.prototype.focusRow = function (rowIndex, direction) {
    if (direction === void 0) {
      direction = 1;
    }

    if (this.list.current) {
      return this.list.current.focusRow(rowIndex, direction);
    } else {
      return Promise.resolve();
    }
  };

  ScrollableList.prototype.getFocusIndex = function () {
    if (this.list.current) {
      return this.list.current.getFocusIndex();
    }

    return -1;
  };

  ScrollableList.prototype.scrollIntoView = function (rowIndex, scrollToOptions) {
    if (this.list.current) {
      return this.list.current.scrollIntoView(rowIndex, scrollToOptions);
    }
  };

  ScrollableList.prototype.scrollTo = function (scrollTop) {
    if (this.scrollableElement.current) {
      this.scrollableElement.current.scrollTop = scrollTop;
    }
  };

  return ScrollableList;
}(react.Component);



var SimpleList =
/** @class */
function (_super) {
  __extends(SimpleList, _super);

  function SimpleList() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.list = react.createRef();

    _this.renderListItem = function (rowIndex, listCell, details) {
      return renderListItem(rowIndex, details, renderListCell(listCell));
    };

    return _this;
  }

  SimpleList.prototype.render = function () {
    var listProps = {
      selectableText: this.props.selectableText,
      className: this.props.className,
      columnCount: 1,
      eventDispatch: this.props.eventDispatch,
      focuszoneProps: this.props.focuszoneProps,
      id: this.props.id,
      initialPageCount: this.props.initialPageCount,
      itemProvider: this.props.itemProvider,
      maxHeight: this.props.maxHeight,
      onActivate: this.props.onActivate,
      onFocus: this.props.onFocus,
      onSelect: this.props.onSelect,
      pageSize: this.props.pageSize,
      renderRow: this.renderListItem,
      selection: this.props.selection,
      width: this.props.width,
      virtualize: this.props.virtualize
    };

    if (this.props.scrollable) {
      return react.createElement(ScrollableList, tslib_es6_assign({}, listProps, {
        ref: this.list
      }));
    } else {
      return react.createElement(List_List_List, tslib_es6_assign({}, listProps, {
        ref: this.list
      }));
    }
  };

  SimpleList.prototype.addOverlay = function (id, rowIndex, render, zIndex) {
    if (zIndex === void 0) {
      zIndex = 0;
    }

    if (this.list.current) {
      return this.list.current.addOverlay(id, rowIndex, render, zIndex);
    }
  };

  SimpleList.prototype.removeOverlay = function (id) {
    if (this.list.current) {
      return this.list.current.removeOverlay(id);
    }
  };

  SimpleList.prototype.focusRow = function (rowIndex, direction) {
    if (direction === void 0) {
      direction = 1;
    }

    if (this.list.current) {
      return this.list.current.focusRow(rowIndex, direction);
    } else {
      return Promise.resolve();
    }
  };

  SimpleList.prototype.getFocusIndex = function () {
    if (this.list.current) {
      return this.list.current.getFocusIndex();
    }

    return -1;
  };

  SimpleList.prototype.getStats = function () {
    if (this.list.current) {
      return this.list.current.getStats();
    }

    return {
      firstMaterialized: -1,
      firstRendered: -1,
      lastMaterialized: -1,
      lastRendered: -1
    };
  };

  SimpleList.prototype.scrollIntoView = function (rowIndex, scrollToOptions) {
    if (this.list.current) {
      return this.list.current.scrollIntoView(rowIndex, scrollToOptions);
    }
  };

  return SimpleList;
}(react.Component);


function renderListItem(rowIndex, details, children) {
  return react.createElement(ListItem, {
    details: details,
    index: rowIndex
  }, children);
}
function ListItem(props) {
  var onFocus = function (event) {
    props.details.onFocusItem(props.index, event);
  };

  var children = props.children,
      details = props.details,
      index = props.index,
      linkProps = props.linkProps;
  var selectableText = details.selectableText,
      ariaBusy = details.ariaBusy,
      ariaDescribedBy = details.ariaDescribedBy,
      ariaLabel = details.ariaLabel,
      ariaPosInSet = details.ariaPosInSet,
      ariaSetSize = details.ariaSetSize,
      excludeFocusZone = details.excludeFocusZone;
  var _a = details.listProps,
      selection = _a.selection,
      singleClickActivation = _a.singleClickActivation;
  return react.createElement(FocusWithin, {
    onFocus: onFocus
  }, function (focusStatus) {
    return react.createElement(FocusZoneContext.Consumer, null, function (rowContext) {
      var rowProps = {
        "aria-busy": ariaBusy,
        "aria-describedby": ariaDescribedBy,
        "aria-label": ariaLabel,
        "aria-posinset": ariaPosInSet === undefined ? index + 1 : ariaPosInSet === null ? undefined : ariaPosInSet,
        "aria-selected": selection && selection.selected(index),
        "aria-setsize": ariaSetSize === undefined ? props.details.listProps.itemProvider.length : ariaSetSize === null ? undefined : ariaSetSize,
        className: Util_css(props.className, "bolt-list-row", index === 0 && "first-row", linkProps && "bolt-link", selection && selection.selected(index) && "selected", focusStatus.hasFocus && "focused", singleClickActivation && "single-click-activation", selectableText && "selectable-text"),
        "data-focuszone": excludeFocusZone || selection && !selection.selectable(index) ? undefined : rowContext.focuszoneId,
        "data-row-index": index,
        tabIndex: getTabIndex(details),
        onBlur: focusStatus.onBlur,
        onFocus: focusStatus.onFocus,
        role: selection ? "option" : "listitem"
      };
      return react.createElement(FocusZone, {
        direction: FocusZoneDirection.Horizontal
      }, linkProps ? react.createElement("a", tslib_es6_assign({}, getDefaultLinkProps(linkProps), rowProps), react.createElement("div", {
        className: "bolt-list-cell",
        "data-column-index": 0
      }, react.createElement("div", {
        className: "bolt-list-cell-content flex-row"
      }, children))) : react.createElement("tr", tslib_es6_assign({}, rowProps), react.createElement("td", {
        className: "bolt-list-cell",
        "data-column-index": 0
      }, react.createElement("div", {
        className: "bolt-list-cell-content flex-row"
      }, children))));
    });
  });
}
function renderListCell(listCell, showOverflowTooltip) {
  if (showOverflowTooltip === void 0) {
    showOverflowTooltip = true;
  }

  var textClassName = undefined;
  var textContent = react.createElement("span", {
    className: "text-ellipsis body-m"
  }, typeof listCell === "string" || typeof listCell === "number" ? listCell : listCell.textNode ? listCell.textNode : listCell.text);

  if (showOverflowTooltip) {
    textContent = react.createElement(Tooltip_Tooltip, {
      overflowOnly: true
    }, textContent);
  }

  var content = textContent;
  var classNames = Util_css("bolt-list-cell-child flex-row flex-center");

  if (typeof listCell !== "string" && typeof listCell !== "number") {
    textClassName = listCell.textClassName;

    if (listCell.iconProps) {
      content = react.createElement(react.Fragment, null, Icon_Icon(tslib_es6_assign(tslib_es6_assign({}, listCell.iconProps), {
        className: Util_css("icon-margin", listCell.iconProps.className)
      })), textContent);
    }

    if (listCell.href) {
      return react.createElement(Link_Link_Link, {
        className: Util_css(textClassName, classNames, "scroll-hidden"),
        href: listCell.href,
        rel: listCell.hrefRel,
        target: listCell.hrefTarget,
        excludeTabStop: true,
        subtle: true
      }, content);
    }
  }

  return react.createElement("span", {
    className: Util_css(textClassName, classNames, "bolt-list-cell-text")
  }, content);
}

function List_getAttributeAsNumber(element, attributeName) {
  var attributeValue = element.getAttribute(attributeName);

  if (attributeValue) {
    return parseInt(attributeValue, 10);
  }

  return -1;
}

function cellFromElement(element) {
  var attributeValue;
  var cellIndex = -1;
  var rowIndex = -1;
  var cellElement = null;

  while (element) {
    attributeValue = List_getAttributeAsNumber(element, "data-column-index");

    if (attributeValue !== -1) {
      cellIndex = attributeValue;
      cellElement = element;
    }

    attributeValue = List_getAttributeAsNumber(element, "data-row-index");

    if (attributeValue !== -1) {
      rowIndex = attributeValue;
      break;
    } // We have hit the root of the details list, dont look above this.


    if (element.classList.contains("bolt-list")) {
      element = null;
      break;
    }

    element = element.parentElement;
  }

  return {
    cellElement: cellElement,
    cellIndex: cellIndex,
    rowElement: element,
    rowIndex: rowIndex
  };
}
function cellFromEvent(event) {
  return cellFromElement(event.target);
}
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Utilities/DragDrop.js






/**
 * Represents the end result of a drag / drop operation.
 */

var DragDropEffect;

(function (DragDropEffect) {
  /**
   * If the drop where to happen at this point, it would be a no-op.
   */
  DragDropEffect["none"] = "none";
  /**
   * The data should be moved from the drag source to the drop target.
   */

  DragDropEffect["move"] = "move";
  /**
   * The data should be copied from the drag source to the drop target.
   */

  DragDropEffect["copy"] = "copy";
})(DragDropEffect || (DragDropEffect = {}));

var DragDropManager =
/** @class */
function () {
  function DragDropManager() {
    var _this = this;

    this.onEventCaptured = function (event) {
      // Handle the pointerup and pointermove events
      var type = event.type;

      if (type === "pointermove") {
        // For pointermove events, if there is no drag in progress, we need to check to see if the pointer
        // has moved far enough to meet our threshold for triggering a drag/drop operation.
        if (!_this.dragInProgress) {
          if (_this.potentialDragInProgress) {
            var coordinates = getPointByEventType(event);

            if (distance(_this.initialCoordinates, coordinates) > _this.minimumPixelsForDrag) {
              // The position of the pointer is far enough away from our threshold to trigger a drag event.
              // Fire the dragstart event to give the drag source an opportunity to cancel the operation
              dispatchCustomDragEvent("dragstart", _this.dragSourceElement, event, _this.dataTransfer);

              if (_this.dataTransfer.effectAllowed === DragDropEffect.none) {
                _this.potentialDragInProgress = false;

                _this.endDrag();
              } else {
                _this.dragInProgress = true;
              }

              event.preventDefault();
            }
          } // If there isn't the potential for a drag, that means a consumer has already
          // indicated that we should cancel this drag event, so there is no need to continue to
          // check anything about this event.

        } else {
          // If there is a drag in progress, treat this as a dragover event.
          var target = _this.getTargetFromEvent(event);

          if (target) {
            var coordinates = getPointByEventType(event);
            _this.operation.x.value = coordinates.x;
            _this.operation.y.value = coordinates.y;
            dispatchCustomDragEvent("dragover", target, event, _this.dataTransfer);
            event.preventDefault();
          }
        }
      } else if (type === "pointerup") {
        if (_this.dragInProgress) {
          var target = _this.getTargetFromEvent(event); // Always fire the dragend event when we get a pointerup, if there was a drag in progress.


          dispatchCustomDragEvent("dragend", _this.dragSourceElement, event, _this.dataTransfer);

          if (target && _this.dataTransfer.dropEffect !== DragDropEffect.none) {
            // Only fire a drop event if the dropEffect allows it.
            dispatchCustomDragEvent("drop", target, event, _this.dataTransfer);
          }
        }

        _this.endDrag();
      }
    };

    this.onPointerLeave = function (event) {
      // The pointer has left the bounds of the body element, so a drop is not
      // viable at this point.
      _this.dataTransfer.dropEffect = DragDropEffect.none;
    };

    this.onPointerOut = function (event) {
      if (event.target) {
        // The pointer has left an element, so we need to set the dropEffect to none.
        // The dragover event will fire, giving a new drop target the chance to
        // reset the effect.
        _this.dataTransfer.dropEffect = DragDropEffect.none;
        dispatchCustomDragEvent("dragexit", event.target, event, _this.dataTransfer);
      }
    };

    this.onPointerOver = function (event) {
      if (event.target) {
        // The pointer has entered an element, so we need to set the dropEffect to none.
        // The dragover event will fire, giving a new drop target the chance to
        // reset the effect.
        _this.dataTransfer.dropEffect = DragDropEffect.none;
        dispatchCustomDragEvent("dragenter", event.target, event, _this.dataTransfer);
      }
    };
  }

  DragDropManager.prototype.beginDragOperation = function (event, dataTransfer, minimumPixelsForDrag) {
    if (minimumPixelsForDrag === void 0) {
      minimumPixelsForDrag = 4;
    }

    this.operation = undefined; // Something (typically a pointdown on a drag source) has indicated that there is the potential
    // for a drag operation. If there is a drag operation already in progress, do nothing.

    if (!this.dragInProgress) {
      // If there is no drag operation in progress, we should set up the event handlers to detect pointer
      // operations that could lead us to actually start the drag / drop operation.
      if (event.type === "pointerdown") {
        this.startDrag(event, minimumPixelsForDrag, dataTransfer);
        this.initialCoordinates = {
          x: event.clientX,
          y: event.clientY
        };
        Pointer.setCapture(this.onEventCaptured);
        document.body.addEventListener("pointerout", this.onPointerOut, true);
        document.body.addEventListener("pointerover", this.onPointerOver, true);
        document.body.addEventListener("pointerleave", this.onPointerLeave);
        this.operation = {
          x: new ObservableValue(undefined),
          y: new ObservableValue(undefined)
        };
      }
    }

    return this.operation;
  };

  DragDropManager.prototype.endDrag = function () {
    document.body.removeEventListener("pointerout", this.onPointerOut);
    document.body.removeEventListener("pointerover", this.onPointerOver);
    document.body.removeEventListener("pointerleave", this.onPointerLeave);
    this.dragInProgress = false;
  };

  DragDropManager.prototype.getTargetFromEvent = function (event) {
    return event.target;
  };

  DragDropManager.prototype.startDrag = function (event, minimumPixelsForDrag, dataTransfer) {
    this.potentialDragInProgress = true;
    this.dragSourceElement = event.target;
    this.minimumPixelsForDrag = minimumPixelsForDrag;
    this.dataTransfer = dataTransfer;
  };

  return DragDropManager;
}();

var dragDropManager = new DragDropManager();
function beginDragOperation(event, dataTransfer, minimumPixelsForDrag) {
  return dragDropManager.beginDragOperation(event, dataTransfer, minimumPixelsForDrag);
}
function dispatchCustomDragEvent(eventType, target, event, dataTransfer) {
  var customEvent = new CustomEvent(eventType, {
    bubbles: true,
    detail: {
      dataTransfer: dataTransfer,
      nativeEvent: event
    }
  });
  target.dispatchEvent(customEvent);
  return customEvent;
}
var DragImage = function (props) {
  var className = props.className,
      operation = props.operation,
      _a = props.xOffset,
      xOffset = _a === void 0 ? 5 : _a,
      _b = props.yOffset,
      yOffset = _b === void 0 ? 5 : _b;
  return react.createElement(Portal_Portal_Portal, {
    className: "bolt-drag-image-portal"
  }, react.createElement(Observer, {
    x: operation.x,
    y: operation.y
  }, function (observedProps) {
    return observedProps.x !== undefined && observedProps.y !== undefined ? react.createElement("div", {
      className: Util_css(className, "bolt-drag-image depth-16 absolute flex-row flex-center scroll-hidden justify-center"),
      style: {
        left: observedProps.x + xOffset + "px",
        top: observedProps.y + yOffset + "px"
      }
    }, props.children) : null;
  }));
};
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/List/ListDragSourceBehavior.js







/**
 * A behavior that turns a list into the source of a drag and drop operation. Note - this
 * behavior should only be used if your list is intended to _only_ be a drag source. Please use
 * the ListDragDropBehavior instead if the list is also a drop target, as that is the only way
 * to get keyboard drag and drop support within your list.
 */

var ListDragSourceBehavior =
/** @class */
function () {
  function ListDragSourceBehavior(options) {
    var _this = this;

    this.initialize = function (props, dragDroppableUI, eventDispatch) {
      _this.dragDroppableUI = dragDroppableUI;
      _this.eventDispatch = eventDispatch;

      _this.eventDispatch.addEventListener("pointerdown", _this.onPointerDown);

      _this.eventDispatch.addEventListener("dragstart", _this.onDragStart);

      _this.eventDispatch.addEventListener("dragend", _this.onDragEnd);

      _this.itemProvider = props.itemProvider;
    };

    this.onDragEnd = function (event) {
      var index = cellFromEvent(event).rowIndex;

      if (index >= 0 && _this.options.onDragEnd) {
        _this.options.onDragEnd(event);
      }

      _this.dragDroppableUI.removeOverlay("drag-source-item");

      _this.dragImageData = undefined;
    };

    this.onDragStart = function (event) {
      if (event.detail.dataTransfer) {
        var index = cellFromEvent(event).rowIndex;

        if (index >= 0) {
          if (_this.options.onDragStart) {
            _this.options.onDragStart(event);
          }

          if (event.detail.dataTransfer.effectAllowed !== DragDropEffect.none) {
            _this.dragDroppableUI.addOverlay("drag-source-item", index, _this.renderDragSourceItemOverlay);

            if (_this.dragImageData === undefined) {
              _this.dragImageData = {
                image: _this.options.renderDragImage(event)
              };
            }
          }
        }
      } else {
        event.stopPropagation();
        event.preventDefault();
      }
    };

    this.onPointerDown = function (event) {
      if (event.button === 0) {
        _this.beginDrag(event);
      }
    };

    this.renderDragSourceItemOverlay = function (props) {
      return react.createElement(react.Fragment, null, react.createElement("div", {
        className: "bolt-list-drag-source-item flex-grow"
      }), _this.operation && _this.dragImageData && react.createElement(DragImage, {
        operation: _this.operation
      }, _this.dragImageData.image));
    };

    this.setDragImage = function (image, xOffset, yOffset) {
      _this.dragImageData = {
        image: image,
        xOffset: xOffset,
        yOffset: yOffset
      };
    };

    this.options = options;
  }

  ListDragSourceBehavior.prototype.componentDidUpdate = function (props) {
    this.itemProvider = props.itemProvider;
  };

  ListDragSourceBehavior.prototype.componentWillUnmount = function () {
    var _a, _b, _c;

    (_a = this.eventDispatch) === null || _a === void 0 ? void 0 : _a.removeEventListener("pointerdown", this.onPointerDown);
    (_b = this.eventDispatch) === null || _b === void 0 ? void 0 : _b.removeEventListener("dragstart", this.onDragStart);
    (_c = this.eventDispatch) === null || _c === void 0 ? void 0 : _c.removeEventListener("dragend", this.onDragEnd);
  };

  ListDragSourceBehavior.prototype.beginDrag = function (event) {
    var index = cellFromEvent(event).rowIndex;

    if (this.itemProvider && index >= 0) {
      var item = this.itemProvider.value[index];
      this.operation = beginDragOperation(event, {
        data: item,
        dropEffect: DragDropEffect.none,
        secondaryData: {
          index: index,
          sourceId: this.options.id
        },
        setDragImage: this.setDragImage,
        type: this.options.type
      });
    }
  };

  return ListDragSourceBehavior;
}();


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/List/ListDropIndicator.js






function ListDropIndicator_ListDropIndicator(props) {
  var position = props.position,
      xOffset = props.xOffset,
      lineOffset = props.lineOffset;
  var circleLeft = (xOffset || 0) + "px";
  var lineLeft = (lineOffset || 0) + "px";
  var positionClassName = position;
  return react.createElement(react.Fragment, null, react.createElement("div", {
    className: Util_css("bolt-list-drop-indicator-line flex-grow absolute", positionClassName),
    style: {
      left: lineLeft
    }
  }), react.createElement("div", {
    className: Util_css("bolt-list-drop-indicator-circle absolute", positionClassName),
    style: {
      left: circleLeft
    }
  }));
}
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/List/ListDropIndicator.Props.js
/**
 * Represents where within the containing element to draw the drop indicator
 */
var ListDropIndicatorPosition;

(function (ListDropIndicatorPosition) {
  ListDropIndicatorPosition["bottom"] = "bottom";
  ListDropIndicatorPosition["top"] = "top";
  ListDropIndicatorPosition["left"] = "left";
  ListDropIndicatorPosition["right"] = "right";
})(ListDropIndicatorPosition || (ListDropIndicatorPosition = {}));
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/List/ListDropTargetBehavior.js










/**
 * A behavior that turns a list into the target of a drag and drop operation. Note - this
 * behavior should only be used if your list is intended to _only_ be a drop target. Please use
 * the ListDragDropBehavior instead if the list is also a drag source, as that is the only way
 * to get keyboard drag and drop support within your list.
 */

var ListDropTargetBehavior =
/** @class */
function () {
  function ListDropTargetBehavior(options) {
    var _this = this;

    this.initialize = function (props, dragDroppableUI, eventDispatch) {
      _this.dragDroppableUI = dragDroppableUI;
      _this.eventDispatch = eventDispatch;

      _this.eventDispatch.addEventListener("dragenter", _this.onDragEnter);

      _this.eventDispatch.addEventListener("dragexit", _this.onDragExit);

      _this.eventDispatch.addEventListener("dragover", _this.onDragOver);

      _this.eventDispatch.addEventListener("drop", _this.onDrop);

      _this.itemProvider = props.itemProvider;
      _this.indicatorName = _this.options.isTree ? "tree-drop-indicator" : "drop-indicator";
    };

    this.onDragEnter = function (event) {
      if (!_this.handlesType(event)) {
        return;
      }

      if (_this.options.onDragEnter) {
        _this.options.onDragEnter(event);
      } else {
        event.detail.dataTransfer.dropEffect = DragDropEffect.move;
      }
    };

    this.onDragExit = function (event) {
      if (!_this.handlesType(event)) {
        return;
      }

      if (_this.options.onDragExit) {
        _this.options.onDragExit(event);
      }

      _this.dragDroppableUI.removeOverlay(_this.indicatorName);
    };

    this.onDragOver = function (event) {
      if (!_this.handlesType(event)) {
        return;
      }

      var index = _this.calculateIndex(event);

      var dragIndex = event.detail.dataTransfer.secondaryData.index;
      var listId = event.detail.dataTransfer.secondaryData.sourceId;

      if (index >= 0 && (index !== dragIndex || listId !== _this.options.id || _this.options.isTree)) {
        if (_this.options.onDragOver) {
          _this.options.onDragOver(event, {
            index: _this.listIndicatorPosition === ListDropIndicatorPosition.bottom ? index + 1 : index
          });
        } else {
          event.detail.dataTransfer.dropEffect = DragDropEffect.move;
        }
      } else {
        event.detail.dataTransfer.dropEffect = DragDropEffect.none;
      }

      if (event.detail.dataTransfer.dropEffect === DragDropEffect.none) {
        _this.dragDroppableUI.removeOverlay(_this.indicatorName);
      } else {
        _this.dragDroppableUI.addOverlay(_this.indicatorName, index, _this.renderDropIndicator);
      }
    };

    this.onDrop = function (event) {
      if (!_this.handlesType(event)) {
        return;
      }

      var index = _this.calculateIndex(event);

      var dragIndex = event.detail.dataTransfer.secondaryData.index;
      var listId = event.detail.dataTransfer.secondaryData.sourceId;

      if (index >= 0 && (index !== dragIndex || listId !== _this.options.id) && _this.options.onDrop) {
        _this.options.onDrop(event, {
          index: _this.listIndicatorPosition === ListDropIndicatorPosition.bottom ? index + 1 : index
        });
      }

      _this.dragDroppableUI.removeOverlay(_this.indicatorName);
    };

    this.renderDropIndicator = function (props) {
      return _this.options.isTree ? react.createElement("div", {
        className: "bolt-list-tree-drop-target flex-grow"
      }) : react.createElement(ListDropIndicator_ListDropIndicator, {
        position: _this.listIndicatorPosition
      });
    };

    this.options = options;
  }

  ListDropTargetBehavior.prototype.componentDidUpdate = function (props) {
    this.itemProvider = props.itemProvider;
  };

  ListDropTargetBehavior.prototype.componentWillUnmount = function () {
    var _a, _b, _c;

    (_a = this.eventDispatch) === null || _a === void 0 ? void 0 : _a.removeEventListener("dragenter", this.onDragEnter);
    (_b = this.eventDispatch) === null || _b === void 0 ? void 0 : _b.removeEventListener("dragexit", this.onDragExit);
    (_c = this.eventDispatch) === null || _c === void 0 ? void 0 : _c.removeEventListener("dragover", this.onDragOver);
  };

  ListDropTargetBehavior.prototype.calculateIndex = function (event) {
    var cell = cellFromEvent(event);
    var index = cell.rowIndex;

    if (this.options.isTree) {
      return index;
    }

    if (cell.rowElement && event.detail.dataTransfer.secondaryData) {
      var dragIndex = event.detail.dataTransfer.secondaryData.index;
      var listId = event.detail.dataTransfer.secondaryData.sourceId;
      var nativeEvent = event.detail.nativeEvent;
      var rowRect = cell.rowElement.getBoundingClientRect();
      var point = getPointByEventType(nativeEvent);
      var topHalfOfRow = point ? point.y < rowRect.height / 2 + rowRect.top : index < dragIndex;

      if (this.options.id !== listId) {
        this.listIndicatorPosition = ListDropIndicatorPosition.top;

        if (!topHalfOfRow) {
          index++;
        }

        if (index >= this.itemProvider.length) {
          this.listIndicatorPosition = ListDropIndicatorPosition.bottom;
          index--;
        }
      } else {
        if (index < dragIndex) {
          this.listIndicatorPosition = ListDropIndicatorPosition.top;

          if (!topHalfOfRow) {
            index++;
          }
        } else if (index > dragIndex) {
          this.listIndicatorPosition = ListDropIndicatorPosition.bottom;

          if (topHalfOfRow) {
            index--;
          }
        } // No-op if index === dragIndex

      }
    }

    return index;
  };

  ListDropTargetBehavior.prototype.handlesType = function (event) {
    var _a;

    var type = ((_a = event.detail.dataTransfer) === null || _a === void 0 ? void 0 : _a.type) || "";
    return this.options.allowedTypes.indexOf(type) !== -1;
  };

  return ListDropTargetBehavior;
}();


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/List/ListDragDropBehavior.js









/**
 * A behavior that combines the ListDragSourceBehavior and ListDropTargetBehavior. If your list
 * is only meant to be a drag source, or only meant to be a drop target, then use those two
 * behaviors individually.
 * In addition to combining the two behaviors for convenience, this single behavior also enhances
 * the list with keyboard drag and drop support.
 */

var ListDragDropBehavior =
/** @class */
function () {
  function ListDragDropBehavior(options) {
    var _this = this;

    this.initialize = function (props, dragDroppableUI, eventDispatch) {
      _this.eventDispatch = eventDispatch;
      _this.itemProvider = props.itemProvider;

      _this.eventDispatch.addEventListener("keydown", _this.onKeyDown);

      _this.dragBehavior.initialize(props, dragDroppableUI, eventDispatch);

      _this.dropBehavior.initialize(props, dragDroppableUI, eventDispatch);
    };

    this.onDragRowKeyDown = function (event) {
      if (event.which === KeyCode.escape) {
        _this.endDrag(event);
      } else if (event.which === KeyCode.space) {
        _this.endDrag(event, true);
      } else if (event.which === KeyCode.downArrow) {
        _this.focusIndex = Math.min(_this.focusIndex + 1, _this.itemProvider.length);

        _this.fireRowDragEvents(event);
      } else if (event.which === KeyCode.upArrow) {
        _this.focusIndex = Math.max(_this.focusIndex - 1, 0);

        _this.fireRowDragEvents(event);
      } // We don't want the list itself to have a chance to handle these events, while
      // we are in the middle of a drag operation.


      event.preventDefault();
    };

    this.onKeyDown = function (event) {
      if (!event.defaultPrevented && event.which === KeyCode.space && event.target.tagName !== "INPUT") {
        // The user has hit spacebar on the row, so we should start the drag/drop operation.
        var index = cellFromEvent(event).rowIndex;
        _this.focusIndex = index;
        var item = _this.itemProvider.value[index];
        _this.dataTransfer = {
          data: item,
          dropEffect: DragDropEffect.none,
          secondaryData: {
            index: index,
            sourceId: _this.options.id
          },
          setDragImage: noop,
          type: _this.options.type
        }; // Give the consumer a chance to cancel the drag/drop operation

        dispatchCustomDragEvent("dragstart", event.target, event.nativeEvent, _this.dataTransfer);

        if (_this.dataTransfer.effectAllowed !== DragDropEffect.none) {
          // As long as the operation was not cancelled, save off the
          // row element that is being dragged and add a keydown listener.
          // This listener will get called before the event dispatch for the list
          // itself and allows us to have a way to no change focus as the user
          // arrows up and down.
          _this.dragItemRowElement = event.target;

          _this.dragItemRowElement.addEventListener("keydown", _this.onDragRowKeyDown);
        }
      }
    };

    this.options = options;
    this.dragBehavior = new ListDragSourceBehavior(options);
    this.dropBehavior = new ListDropTargetBehavior(options);
  }

  ListDragDropBehavior.prototype.componentDidUpdate = function (props) {
    this.itemProvider = props.itemProvider;
    this.dragBehavior.componentDidUpdate(props);
    this.dropBehavior.componentDidUpdate(props);
  };

  ListDragDropBehavior.prototype.componentWillUnmount = function () {
    var _a;

    (_a = this.eventDispatch) === null || _a === void 0 ? void 0 : _a.removeEventListener("keydown", this.onKeyDown);

    if (this.dragItemRowElement) {
      this.dragItemRowElement.removeEventListener("keydown", this.onDragRowKeyDown);
    }

    this.dragBehavior.componentWillUnmount();
    this.dropBehavior.componentWillUnmount();
  };

  ListDragDropBehavior.prototype.dispatchEventAtIndex = function (eventType, target, event, index) {
    // To maintain consistency with mouse-based drag and drop, we want a way to have the row itself fire
    // the drag events. Since the row element isn't actually associated with the keyboard event that we get,
    // because the drag row itself is still the source of all of these events, we need a way to find that
    // row. We do this by first finding the list of our drag row, and then finding the row with the correct
    // index within that list.
    var listElement = target;

    while (listElement) {
      // We have hit the root of the list, dont look above this.
      if (listElement.classList.contains("bolt-list")) {
        break;
      }

      listElement = listElement.parentElement;
    }

    if (listElement) {
      var rowTarget = listElement.querySelector("[data-row-index='" + index + "']");

      if (rowTarget) {
        dispatchCustomDragEvent(eventType, rowTarget, event, this.dataTransfer);
      }
    }
  };

  ListDragDropBehavior.prototype.endDrag = function (event, drop) {
    if (drop === void 0) {
      drop = false;
    }

    dispatchCustomDragEvent("dragend", event.target, event, this.dataTransfer);

    if (drop) {
      this.dispatchEventAtIndex("drop", event.target, event, this.focusIndex);
    } else {
      this.dispatchEventAtIndex("dragexit", event.target, event, this.focusIndex);
    }

    if (this.dragItemRowElement) {
      this.dragItemRowElement.removeEventListener("keydown", this.onDragRowKeyDown);
      this.dragItemRowElement = undefined;
    }
  };

  ListDragDropBehavior.prototype.fireRowDragEvents = function (event) {
    this.dispatchEventAtIndex("dragenter", event.target, event, this.focusIndex);
    this.dispatchEventAtIndex("dragover", event.target, event, this.focusIndex);
  };

  return ListDragDropBehavior;
}();


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/List/ListDragImage.js








var ListDragImage = function (props) {
  return React.createElement(React.Fragment, null, props.iconProps && React.createElement(Icon, __assign({}, props.iconProps, {
    className: css(props.iconProps.className, "flex-noshrink icon-margin")
  })), React.createElement("span", {
    className: "text-ellipsis"
  }, props.text));
};
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Utilities/Selection.js



var Selection =
/** @class */
function (_super) {
  __extends(Selection, _super);

  function Selection(options) {
    var _this = _super.call(this, []) || this;

    _this.selectedRanges = [];
    _this.lockCount = 0;
    _this.unselectableRangesValue = [];
    _this.selectedCount = 0;
    _this.unselectableCount = 0;

    _this.onItemsChanged = function (change, action) {
      var index = change.index;
      var removedUnselectableRange, unselectedRange;

      if (action === "change") {
        return;
      } // Unselect any items that were removed from the underlying item collection.


      if (change.removedItems && change.removedItems.length) {
        removedUnselectableRange = _this.removeUnselectableInternal(index, change.removedItems.length);
        unselectedRange = _this.unselectInternal(index, change.removedItems.length);
      } // Offset any selection by the items added.


      if (change.addedItems || change.removedItems) {
        var adjustCount = (change.addedItems ? change.addedItems.length : 0) - (change.removedItems ? change.removedItems.length : 0);
        var adjustedSelectionRanges = adjustRanges(index, adjustCount, _this.selectedRanges);
        var adjustedUnselectableRanges = adjustRanges(index, adjustCount, _this.unselectableRanges);

        if (adjustedSelectionRanges.length) {
          _this.notify(adjustedSelectionRanges, "set");
        }

        if (adjustedUnselectableRanges.length) {
          _this.notify(adjustedUnselectableRanges, "setUnselectable");
        }
      }

      if (removedUnselectableRange) {
        _this.notify([removedUnselectableRange], "removeUnselectable");
      }

      if (unselectedRange) {
        _this.notify([unselectedRange], "unselect");
      }
    };

    if (typeof options === "boolean" || options === undefined) {
      _this.multiSelect = !!options || false;
    } else {
      _this.alwaysMerge = !!options.alwaysMerge;
      _this.multiSelect = !!options.multiSelect;
      _this.unselectableRanges = options.unselectableRanges || [];
      _this.value = options.selectedRanges || [];
    }

    return _this;
  }

  Object.defineProperty(Selection.prototype, "value", {
    get: function () {
      return this.selectedRanges;
    },
    set: function (ranges) {
      var _this = this;

      this.selectedCount = 0;
      this.selectedRanges = ranges.map(function (range) {
        _this.selectedCount += range.endIndex - range.beginIndex + 1;
        return {
          beginIndex: range.beginIndex,
          endIndex: range.endIndex
        };
      });
      this.notify(ranges, "set");
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Selection.prototype, "unselectableRanges", {
    get: function () {
      return this.unselectableRangesValue;
    },
    set: function (ranges) {
      var _this = this;

      this.unselectableCount = 0;
      this.unselectableRangesValue = ranges.map(function (range) {
        _this.unselectableCount += range.endIndex - range.beginIndex + 1;
        return {
          beginIndex: range.beginIndex,
          endIndex: range.endIndex
        };
      });
      this.notify(ranges, "setUnselectable");
    },
    enumerable: true,
    configurable: true
  });

  Selection.prototype.clear = function () {
    var selectedRanges = this.clearSelectedRanges();

    if (selectedRanges) {
      // Go through and notify any observers of the change.
      this.notify(selectedRanges, "unselect");
    }
  };

  Selection.prototype.clearUnselectable = function () {
    var unselectableRanges = tslib_es6_spreadArrays(this.unselectableRangesValue);

    this.unselectableRanges = [];
    this.unselectableCount = 0;
    this.notify(unselectableRanges, "removeUnselectable");
  };

  Selection.prototype.selectable = function (index) {
    return !indexWithinRanges(index, this.unselectableRanges);
  };

  Selection.prototype.selected = function (index) {
    return indexWithinRanges(index, this.selectedRanges);
  };

  Selection.prototype.addUnselectable = function (index, count) {
    var updatedRanges = false;
    var beginIndex = index;
    var endIndex = index + (count || 1) - 1; // If no count is specified we will add a single item.

    count = count || 1;

    for (; count > 0; count--) {
      if (!this.selectable(index)) {
        index++;
        continue;
      }

      var rangeIndex = 0;
      var updatedRange = void 0; // Determine if there is a range we can add this unselectable item to.

      for (; rangeIndex < this.unselectableRanges.length; rangeIndex++) {
        var unselectableRange = this.unselectableRanges[rangeIndex]; // Check if this unselectable item occurs before this unselectableRange.

        if (index < unselectableRange.beginIndex) {
          if (index === unselectableRange.beginIndex - 1) {
            updatedRange = unselectableRange;
            updatedRange.beginIndex--;
          }

          break;
        } // If this index is directly after this range we will extend it.
        else if (index === unselectableRange.endIndex + 1) {
          // If there is a gap of 1 number we will merge the two ranges.
          if (rangeIndex < this.unselectableRanges.length - 1 && index === this.unselectableRanges[rangeIndex + 1].beginIndex - 1) {
            updatedRange = unselectableRange;
            updatedRange.endIndex = this.unselectableRanges[rangeIndex + 1].endIndex; // Remove the second range since it is merged into the previous range.

            this.unselectableRanges.splice(rangeIndex + 1, 1);
          } else {
            updatedRange = unselectableRange;
            updatedRange.endIndex++;
          }

          break;
        }
      } // If there was no range to merge with, add a new one.


      if (!updatedRange) {
        updatedRange = {
          beginIndex: index,
          endIndex: index
        };
        this.unselectableRanges.splice(rangeIndex, 0, updatedRange);
      }

      updatedRanges = true;
      this.unselectableCount++;
      index++;
    } // Notify observers of the added item.


    if (updatedRanges) {
      this.notify([{
        beginIndex: beginIndex,
        endIndex: endIndex
      }], "addUnselectable");
    }
  };

  Selection.prototype.removeUnselectable = function (index, count) {
    var removedRange = this.removeUnselectableInternal(index, count);

    if (removedRange) {
      this.notify([removedRange], "removeUnselectable");
    }
  };

  Selection.prototype.select = function (index, count, merge, multiSelect) {
    if (merge === void 0) {
      merge = this.alwaysMerge;
    }

    if (multiSelect === void 0) {
      multiSelect = this.multiSelect;
    }

    if (!this.lockCount) {
      var beginIndex = index;
      var endIndex = beginIndex + (count || 1) - 1;
      var updatedRanges = false;
      var unselectedRanges = void 0;

      if (!multiSelect) {
        if (!this.selected(index) && this.selectable(index)) {
          unselectedRanges = this.clearSelectedRanges();
          var updatedRange = {
            beginIndex: index,
            endIndex: index
          };
          this.selectedRanges.push(updatedRange);
          this.selectedCount++;
          updatedRanges = true;
        }
      } else {
        if (!merge) {
          unselectedRanges = this.clearSelectedRanges();
        } // If no count is specified we will use a single item selection.


        count = count || 1; // @TODO: Implement a more optimal multi-count selection

        for (; count > 0; count--) {
          if (this.selected(index) || !this.selectable(index)) {
            index++;
            continue;
          }

          var rangeIndex = 0;
          var updatedRange = void 0; // Determine if there is a range we can add this selection to.

          for (; rangeIndex < this.selectedRanges.length; rangeIndex++) {
            var selectionRange = this.selectedRanges[rangeIndex]; // Check if this selection occurs before this selectionRange.

            if (index < selectionRange.beginIndex) {
              if (index === selectionRange.beginIndex - 1) {
                updatedRange = selectionRange;
                updatedRange.beginIndex--;
              }

              break;
            } // If this index is directly after this range we will extend it.
            else if (index === selectionRange.endIndex + 1) {
              // If there is a gap of 1 number we will merge the two ranges.
              if (rangeIndex < this.selectedRanges.length - 1 && index === this.selectedRanges[rangeIndex + 1].beginIndex - 1) {
                updatedRange = selectionRange;
                updatedRange.endIndex = this.selectedRanges[rangeIndex + 1].endIndex; // Remove the second range since it is merged into the previous range.

                this.selectedRanges.splice(rangeIndex + 1, 1);
              } else {
                updatedRange = selectionRange;
                updatedRange.endIndex++;
              }

              break;
            }
          } // If there was no range to merge with, add a new one.


          if (!updatedRange) {
            updatedRange = {
              beginIndex: index,
              endIndex: index
            };
            this.selectedRanges.splice(rangeIndex, 0, updatedRange);
          }

          this.selectedCount++;
          index++;
          updatedRanges = true;
        }
      }

      if (unselectedRanges) {
        this.notify(unselectedRanges, "unselect");
      } // Notify observers of the added selection.


      if (updatedRanges) {
        this.notify([{
          beginIndex: beginIndex,
          endIndex: endIndex
        }], "select");
      }
    }
  };

  Selection.prototype.toggle = function (index, merge, multiSelect) {
    if (merge === void 0) {
      merge = this.alwaysMerge;
    }

    if (multiSelect === void 0) {
      multiSelect = this.multiSelect;
    }

    if (this.selected(index)) {
      this.unselect(index);
    } else {
      this.select(index, 1, merge, multiSelect);
    }
  };

  Selection.prototype.unselect = function (index, count) {
    var unselectedRange = this.unselectInternal(index, count);

    if (unselectedRange) {
      this.notify([unselectedRange], "unselect");
    }
  };

  Selection.prototype.lock = function () {
    this.lockCount++;
  };

  Selection.prototype.unlock = function () {
    this.lockCount--;
  };

  Selection.prototype.removeUnselectableInternal = function (index, count) {
    var beginIndex = index;
    var endIndex = beginIndex + (count || 1) - 1;
    var updatedRanges = false; // If no count is specified we will use a single item selection.

    count = count || 1; // @TODO: Implement a more optimal multi-count selection

    for (; count > 0; count--) {
      if (this.selectable(index)) {
        index++;
        continue;
      } // Determine the range we are unselecting the item from.


      for (var rangeIndex = 0; rangeIndex < this.unselectableRanges.length; rangeIndex++) {
        var unselectableRange = this.unselectableRanges[rangeIndex]; // If this index if before this range move on to the next one.

        if (index < unselectableRange.beginIndex) {
          continue;
        } // Determine whether or not this index falls into this range.


        if (index >= unselectableRange.beginIndex && index <= unselectableRange.endIndex) {
          // If the index is on the start or end of the range, we will just shrink it.
          // Otherwise we will have to split it.
          if (index === unselectableRange.beginIndex) {
            unselectableRange.beginIndex++;
          } else if (index === unselectableRange.endIndex) {
            unselectableRange.endIndex--;
          } else {
            this.unselectableRanges.splice(rangeIndex + 1, 0, {
              beginIndex: index + 1,
              endIndex: unselectableRange.endIndex
            });
            unselectableRange.endIndex = index - 1;
          } // Shrinking may have created an empty range, we need to remove it.


          if (unselectableRange.beginIndex > unselectableRange.endIndex) {
            this.unselectableRanges.splice(rangeIndex, 1);
          }

          this.unselectableCount--;
          updatedRanges = true;
          break;
        }
      }

      index++;
    }

    if (updatedRanges) {
      return {
        beginIndex: beginIndex,
        endIndex: endIndex
      };
    }
  };

  Selection.prototype.unselectInternal = function (index, count) {
    var updatedRanges = false;
    var beginIndex = index;
    var endIndex = beginIndex + (count || 1) - 1;

    if (!this.lockCount) {
      // If no count is specified we will use a single item selection.
      count = count || 1; // @TODO: Implement a more optimal multi-count selection

      for (; count > 0; count--) {
        if (!this.selected(index)) {
          index++;
          continue;
        } // Determine the range we are unselecting the item from.


        for (var rangeIndex = 0; rangeIndex < this.selectedRanges.length; rangeIndex++) {
          var selectionRange = this.selectedRanges[rangeIndex]; // If this index if before this range move on to the next one.

          if (index < selectionRange.beginIndex) {
            continue;
          } // Determine whether or not this index falls into this range.


          if (index >= selectionRange.beginIndex && index <= selectionRange.endIndex) {
            // If the index is on the start or end of the range, we will just shrink it.
            // Otherwise we will have to split it.
            if (index === selectionRange.beginIndex) {
              selectionRange.beginIndex++;
            } else if (index === selectionRange.endIndex) {
              selectionRange.endIndex--;
            } else {
              this.selectedRanges.splice(rangeIndex + 1, 0, {
                beginIndex: index + 1,
                endIndex: selectionRange.endIndex
              });
              selectionRange.endIndex = index - 1;
            } // Shrinking may have created an empty range, we need to remove it.


            if (selectionRange.beginIndex > selectionRange.endIndex) {
              this.selectedRanges.splice(rangeIndex, 1);
            }

            this.selectedCount--;
            updatedRanges = true;
            break;
          }
        }

        index++;
      }
    }

    if (updatedRanges) {
      return {
        beginIndex: beginIndex,
        endIndex: endIndex
      };
    }
  };

  Selection.prototype.clearSelectedRanges = function () {
    if (!this.lockCount && this.selectedRanges.length > 0) {
      // Save the current selection ranges for notification.
      var selectedRanges = tslib_es6_spreadArrays(this.selectedRanges); // Reset the selection to an empty selection.


      this.selectedRanges = [];
      this.selectedCount = 0;
      return selectedRanges;
    }
  };

  return Selection;
}(ObservableValue);


function indexWithinRanges(index, ranges) {
  if (ranges) {
    for (var _i = 0, ranges_1 = ranges; _i < ranges_1.length; _i++) {
      var range = ranges_1[_i];

      if (index >= range.beginIndex && index <= range.endIndex) {
        return true;
      }
    }
  }

  return false;
}

function adjustRanges(index, adjustCount, ranges) {
  var adjustedRanges = [];

  for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {
    var range = ranges[rangeIndex]; // If the added items are before the range shift it down.

    if (index <= range.beginIndex) {
      // If this adjustment will create a continuous range with the previous range
      // we merge the ranges.
      if (rangeIndex > 0 && range.beginIndex + adjustCount === ranges[rangeIndex - 1].endIndex + 1) {
        ranges[rangeIndex - 1].endIndex = range.endIndex + adjustCount;
        ranges.splice(rangeIndex--, 1);
        adjustedRanges.push(ranges[rangeIndex]);
      } else {
        range.beginIndex += adjustCount;
        range.endIndex += adjustCount;
        adjustedRanges.push(range);
      }
    } else if (index > range.beginIndex && index <= range.endIndex) {
      // Create the new split selection range.
      var splitRange = {
        beginIndex: index + adjustCount,
        endIndex: range.endIndex + adjustCount
      };
      ranges.splice(++rangeIndex, 0, splitRange);
      adjustedRanges.push(splitRange); // If the added items are in the middle of range we need to split the range.

      range.endIndex = index - 1;
      adjustedRanges.push(range);
    }
  }

  return adjustedRanges;
}
/**
 * return an array describing the difference of two sets of selection ranges.  Postive values in the array are indices in second
 * that are not in first.  Negative values in the array are indices that are in first that are not in second.
 * @param firstRanges the first set of values to use in the comparison.
 * @param secondRanges the second set of values to use in the comparison.
 */


function compareSelectionRanges(firstRanges, secondRanges) {
  var difference = [];

  for (var rangeIndex = 0; rangeIndex < firstRanges.length; rangeIndex++) {
    var range = firstRanges[rangeIndex];

    for (var selectionIndex = range.beginIndex; selectionIndex <= range.endIndex; selectionIndex++) {
      if (!indexWithinRanges(selectionIndex, secondRanges)) {
        difference.push(selectionIndex * -1);
      }
    }
  }

  for (var rangeIndex = 0; rangeIndex < secondRanges.length; rangeIndex++) {
    var range = secondRanges[rangeIndex];

    for (var selectionIndex = range.beginIndex; selectionIndex <= range.endIndex; selectionIndex++) {
      if (!indexWithinRanges(selectionIndex, firstRanges)) {
        difference.push(selectionIndex);
      }
    }
  }

  return difference;
}
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/List/ListSelection.js



var ListSelection =
/** @class */
function (_super) {
  __extends(ListSelection, _super);

  function ListSelection(options) {
    var _this = _super.call(this, typeof options === "boolean" || options === undefined ? options : {
      alwaysMerge: options.alwaysMerge,
      multiSelect: options.multiSelect,
      unselectableRanges: options.unselectableRanges,
      selectedRanges: options.selectedRanges
    }) || this;

    _this.selectOnFocus = true;

    if (typeof options !== "boolean" && options !== undefined) {
      _this.selectOnFocus = options.selectOnFocus === undefined ? true : options.selectOnFocus;
    }

    return _this;
  }

  return ListSelection;
}(Selection);



var FilteredListSelection =
/** @class */
function (_super) {
  __extends(FilteredListSelection, _super);

  function FilteredListSelection(selection) {
    var _this = _super.call(this, {
      alwaysMerge: selection.alwaysMerge,
      multiSelect: selection.multiSelect,
      unselectableRanges: selection.unselectableRanges,
      selectedRanges: selection.value,
      selectOnFocus: selection.selectOnFocus
    }) || this;

    _this.filteredIndexMap = [];

    _this.updateFilteredSelection = function (filteredIndexMap, multiSelect) {
      if (multiSelect === void 0) {
        multiSelect = _this.selection.multiSelect;
      }

      if (filteredIndexMap.length === 0) {
        _this.value = tslib_es6_spreadArrays(_this.selection.value);
        _this.unselectableRanges = tslib_es6_spreadArrays(_this.selection.unselectableRanges);
      } else {
        var newSelection_1 = new Selection(multiSelect);
        filteredIndexMap.map(function (mappedIndex, index) {
          if (_this.selection.selected(mappedIndex)) {
            newSelection_1.select(index, 1, true, multiSelect);
          }

          if (!_this.selection.selectable(mappedIndex)) {
            newSelection_1.addUnselectable(index);
          }
        });
        _this.value = tslib_es6_spreadArrays(newSelection_1.value);
        _this.unselectableRanges = tslib_es6_spreadArrays(newSelection_1.unselectableRanges);
      }

      _this.filteredIndexMap = filteredIndexMap;
    };

    _this.selectionChanged = function (value, action) {
      switch (action) {
        case "addUnselectable":
          for (var rangeIndex = 0; rangeIndex < value.length; rangeIndex++) {
            for (var unselectableIndex = value[rangeIndex].beginIndex; unselectableIndex <= value[rangeIndex].endIndex; unselectableIndex++) {
              var index = _this.filteredIndexMap.length > 0 ? _this.filteredIndexMap.indexOf(unselectableIndex) : unselectableIndex;

              if (_this.selectable(index)) {
                _this.addUnselectable(index, 1);
              }
            }
          }

          break;

        case "removeUnselectable":
          for (var rangeIndex = 0; rangeIndex < value.length; rangeIndex++) {
            for (var unselectableIndex = value[rangeIndex].beginIndex; unselectableIndex <= value[rangeIndex].endIndex; unselectableIndex++) {
              var index = _this.filteredIndexMap.length > 0 ? _this.filteredIndexMap.indexOf(unselectableIndex) : unselectableIndex;

              if (!_this.selectable(index)) {
                _this.removeUnselectable(index, 1);
              }
            }
          }

          break;

        case "setUnselectable":
        case "set":
          _this.updateFilteredSelection(_this.filteredIndexMap);

          break;

        case "select":
          for (var rangeIndex = 0; rangeIndex < value.length; rangeIndex++) {
            for (var selectionIndex = value[rangeIndex].beginIndex; selectionIndex <= value[rangeIndex].endIndex; selectionIndex++) {
              var index = _this.filteredIndexMap.length > 0 ? _this.filteredIndexMap.indexOf(selectionIndex) : selectionIndex;

              if (index > -1 && !_this.selected(index)) {
                _this.select(index, 1, true);
              }
            }
          }

          break;

        case "unselect":
          for (var rangeIndex = 0; rangeIndex < value.length; rangeIndex++) {
            for (var selectionIndex = value[rangeIndex].beginIndex; selectionIndex <= value[rangeIndex].endIndex; selectionIndex++) {
              var index = _this.filteredIndexMap.length > 0 ? _this.filteredIndexMap.indexOf(selectionIndex) : selectionIndex;

              if (_this.selected(index)) {
                _this.unselect(index, 1);
              }
            }
          }

          break;
      }
    };

    _this.selection = selection;
    return _this;
  }

  FilteredListSelection.prototype.select = function (index, count, merge, multiSelect) {
    _super.prototype.select.call(this, index, count, merge, multiSelect);

    if (this.filteredIndexMap.length > 0) {
      if (!merge) {
        this.clear();
      }

      count = count || 1;

      for (var i = 0; i < count; i++) {
        this.selection.select(this.filteredIndexMap[index + i], 1, true, multiSelect);
      }
    } else {
      this.selection.select(index, count, merge, multiSelect);
    }
  };

  FilteredListSelection.prototype.unselect = function (index, count) {
    _super.prototype.unselect.call(this, index, count);

    if (this.filteredIndexMap.length > 0) {
      count = count || 1;

      for (var i = 0; i < count; i++) {
        this.selection.unselect(this.filteredIndexMap[index + i], 1);
      }
    } else {
      this.selection.unselect(index, count);
    }
  };

  FilteredListSelection.prototype.clear = function () {
    _super.prototype.clear.call(this);

    if (this.filteredIndexMap.length > 0) {
      for (var i = 0; i < this.filteredIndexMap.length; i++) {
        this.selection.unselect(this.filteredIndexMap[i]);
      }
    } else {
      this.selection.clear();
    }
  };

  return FilteredListSelection;
}(ListSelection);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/List.js









;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Menu/Menu.Props.js
/**
 * Standard menu item types that are rendered through the menu.
 */
var MenuItemType;

(function (MenuItemType) {
  /**
   * This uses the standard five column menu item.
   */
  MenuItemType[MenuItemType["Normal"] = 0] = "Normal";
  /**
   * This will render a divider line between the previous and next item.
   * A divider will only appear if the previous and next item are non-dividers.
   * Consecutive dividers will be merged to a single divider.
   */

  MenuItemType[MenuItemType["Divider"] = 1] = "Divider";
  /**
   * A special menu item that shows a header styled menu item in the PrimaryText column.
   */

  MenuItemType[MenuItemType["Header"] = 2] = "Header";
})(MenuItemType || (MenuItemType = {}));
/**
 * Indicates what type of menu cell is being rendered. A menu is represented by
 * five columns. If any menu item in the menu uses the column the column will be
 * shown in all items. If no menu item uses the column, the column will not be
 * visible.
 */


var MenuCell;

(function (MenuCell) {
  /**
   * The state column is used to represent the state of the menu item. This is
   * usually either a read-only or read-write checkbox.
   */
  MenuCell[MenuCell["State"] = 0] = "State";
  /**
   * This is an Icon prefix used to represent the menu item.
   */

  MenuCell[MenuCell["Icon"] = 1] = "Icon";
  /**
   * Primary text that describes the menu item. Often this will be the only
   * column that has a value.
   */

  MenuCell[MenuCell["PrimaryText"] = 2] = "PrimaryText";
  /**
   * Secondary text is a column that is generally used to represent things
   * like hot-keys/accelerators.
   */

  MenuCell[MenuCell["SecondaryText"] = 3] = "SecondaryText";
  /**
   * Action column is used to give the user a way to represent a secondary
   * way to interact with the menu. This may be things like the submenu icon
   * or some other ui the user can independantly interact with.
   */

  MenuCell[MenuCell["Action"] = 4] = "Action";
})(MenuCell || (MenuCell = {}));
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Menu/Menu.js




















/**
 * Arrange the items into groups and put separators between them and headings above them as needed.
 *
 * @param items Menu items with optional order and groupKey properties
 * @param groupInfo Optional list of menu groups
 */

function groupMenuItems(items, groupInfo) {
  var groupMap = {};
  var maxGroupRank = 0;
  var ungroupedItems = [];
  var groups = groupInfo || []; // gather known groups

  if (groups.length > 0) {
    maxGroupRank = groups.reduce(function (max, g) {
      return g.rank || 0 > max ? g.rank : max;
    }, 0) || 0;

    for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {
      var g = groups_1[_i];
      groupMap[g.key] = {
        key: g.key,
        rank: g.rank === undefined ? ++maxGroupRank : g.rank,
        items: []
      };
    }
  } // put all menu items in groups


  for (var _a = 0, items_1 = items; _a < items_1.length; _a++) {
    var i = items_1[_a];

    if (i.groupKey) {
      if (groupMap[i.groupKey]) {
        groupMap[i.groupKey].items.push(i);
      } else {
        groupMap[i.groupKey] = {
          key: i.groupKey,
          rank: ++maxGroupRank,
          items: [i]
        };
      }
    } else {
      ungroupedItems.push(i);
    }
  } // sort the groups


  var groupList = Object.keys(groupMap).map(function (n) {
    return groupMap[n];
  });
  groupList.sort(function (a, b) {
    return (a.rank || Number.MAX_VALUE) - (b.rank || Number.MAX_VALUE);
  }); // add ungrouped items to end of group list

  groupList.push({
    key: "ungrouped",
    rank: ++maxGroupRank,
    items: ungroupedItems
  }); // remove dividers from the beginning and end of each group

  groupList.forEach(function (g) {
    var array = g.items;

    while (array.length > 0 && array[0].itemType === MenuItemType.Divider) {
      array.shift();
    }

    while (array.length > 0 && array[array.length - 1].itemType === MenuItemType.Divider) {
      array.pop();
    }
  }); // merge the groups into the final array

  items = [];
  var first = true;

  for (var _b = 0, groupList_1 = groupList; _b < groupList_1.length; _b++) {
    var g = groupList_1[_b];

    if (g.items.length === 0) {
      continue;
    } // add the separator or header for the top of the group


    if (!first) {
      items.push({
        id: "divider_" + g.key,
        itemType: MenuItemType.Divider
      });
    }

    if (first) {
      first = false;
    }

    items = items.concat(g.items);
  }

  return items;
}

var MenuItemProvider =
/** @class */
function (_super) {
  __extends(MenuItemProvider, _super);

  function MenuItemProvider(menuItems, menuGroups) {
    var _this = _super.call(this, menuItems) || this;

    _this.positions = [];
    var derivedItems = []; // Process the set of menu items.

    if (menuItems) {
      var shouldGroupMenuItems = false;
      var shouldSortMenuItems = false;
      var lastItemType = MenuItemType.Divider;
      var dividerItem = void 0;

      for (var _i = 0, menuItems_1 = menuItems; _i < menuItems_1.length; _i++) {
        var menuItem = menuItems_1[_i]; // Exclude hidden items

        if (menuItem.hidden) {
          continue;
        } // Don't allow multiple dividers to render next to each other.


        if (menuItem.itemType === MenuItemType.Divider) {
          if (menuItem.itemType === lastItemType) {
            continue;
          }

          dividerItem = menuItem;
        } else {
          if (dividerItem) {
            derivedItems.push(dividerItem);
            dividerItem = undefined;
          }

          derivedItems.push(menuItem);
        }

        lastItemType = menuItem.itemType || MenuItemType.Normal; // If the item is ranked or grouped we need to sort and group them.

        shouldGroupMenuItems = !!menuItem.groupKey || shouldGroupMenuItems;
        shouldSortMenuItems = menuItem.rank >= 0 || shouldSortMenuItems;
      }

      if (shouldSortMenuItems) {
        derivedItems.sort(function (a, b) {
          var aRank = a.rank || Number.MAX_VALUE;
          var bRank = b.rank || Number.MAX_VALUE;
          return aRank - bRank;
        });
      }

      if (shouldGroupMenuItems) {
        derivedItems = groupMenuItems(derivedItems, menuGroups);
      }
    } // Update the items to be the derived items.


    _this.items = derivedItems;
    return _this;
  } // Custom getCount to support excluding the decorative items from the count.


  MenuItemProvider.prototype.getCount = function () {
    if (this.count === undefined) {
      this.count = 0;

      for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
        var menuItem = _a[_i];

        if (menuItem.itemType === MenuItemType.Divider || menuItem.itemType === MenuItemType.Header) {
          this.positions.push(-1);
        } else {
          this.positions.push(++this.count);
        }
      }
    }

    return this.count;
  };

  MenuItemProvider.prototype.getItem = function (index) {
    return this.items[index];
  };

  MenuItemProvider.prototype.getPosition = function (index) {
    if (!this.positions.length) {
      this.getCount();
    }

    return this.positions[index];
  };

  return MenuItemProvider;
}(ArrayItemProvider);

var Menu_Menu_Menu =
/** @class */
function (_super) {
  __extends(Menu, _super);

  function Menu(props) {
    var _this = _super.call(this, props) || this;

    _this.containerElement = react.createRef();

    _this.expandItem = function (menuItem, expanded) {
      if (!menuItem && _this.state.expandedIndex.value !== -1) {
        menuItem = _this.itemProvider.getItem(_this.state.expandedIndex.value);
      }

      if (menuItem && menuItem.subMenuProps) {
        for (var index = 0; index < _this.itemProvider.length; index++) {
          if (menuItem === _this.itemProvider.getItem(index)) {
            if (expanded) {
              _this.state.expandedIndex.value = index;
            } else {
              _this.state.expandedIndex.value = -1;
            }

            break;
          }
        }
      }
    };

    _this.focus = function () {
      if (_this.containerElement.current) {
        _this.containerElement.current.focus();
      }
    };

    _this.getParent = function () {
      return _this.props.parentMenu;
    };

    _this.onActivate = function (menuItem, event) {
      if (_this.props.onActivate) {
        _this.props.onActivate(menuItem, event);
      }
    };

    _this.renderMenuItem = function (index, menuItem, details) {
      var onFocusItem = details.onFocusItem;
      var menuItemDetails = {
        expandedIndex: _this.state.expandedIndex,
        menu: _this,
        menuProps: _this.props,
        onActivate: _this.onActivate,
        onFocusItem: onFocusItem,
        position: _this.itemProvider.getPosition(index),
        setSize: _this.itemProvider.getCount()
      };

      if (menuItem.renderMenuItem) {
        return menuItem.renderMenuItem(index, menuItem, menuItemDetails);
      }

      var key = menuItem.id;

      switch (menuItem.itemType) {
        case MenuItemType.Divider:
          return MenuDivider(index, menuItem);

        case MenuItemType.Header:
          return MenuHeader(index, menuItem);

        default:
          return react.createElement(MenuItem, {
            key: key,
            index: index,
            menuItem: menuItem,
            details: menuItemDetails
          });
      }
    };

    _this.state = {
      expandedIndex: new ObservableValue(-1)
    };
    return _this;
  }

  Menu.prototype.render = function () {
    var _this = this;

    return react.createElement(Observer, {
      items: this.props.items
    }, function (props) {
      _this.itemProvider = new MenuItemProvider(props.items, _this.props.groups);
      return _this.renderList();
    });
  };

  Menu.prototype.renderList = function () {
    return react.createElement("div", {
      className: "bolt-menu-container no-outline",
      ref: this.containerElement,
      tabIndex: -1
    }, this.itemProvider.length > 0 && react.createElement(react.Fragment, null, react.createElement("div", {
      className: "bolt-menu-spacer",
      onMouseDown: preventDefault
    }), react.createElement(List_List_List, {
      ariaLabel: this.props.ariaLabel,
      className: Util_css(this.props.className, "bolt-menu"),
      columnCount: 7,
      focuszoneProps: null,
      id: this.props.id,
      itemProvider: this.itemProvider,
      renderRow: this.renderMenuItem,
      role: "menu",
      virtualize: false
    }), react.createElement("div", {
      className: "bolt-menu-spacer",
      onMouseDown: preventDefault
    })));
  };

  return Menu;
}(react.Component);


function MenuDivider(index, menuItem) {
  return react.createElement("tr", {
    "aria-hidden": "true",
    className: Util_css(menuItem.className, "bolt-menuitem-row bolt-list-row bolt-menuitem-divider"),
    key: menuItem.id || "divider-" + index,
    onMouseDown: preventDefault
  }, react.createElement("td", {
    className: "bolt-menuitem-cell bolt-list-cell"
  }), react.createElement("td", {
    className: "bolt-menuitem-cell bolt-list-cell bolt-menuitem-divider-column",
    colSpan: 5
  }, react.createElement("div", {
    className: "bolt-menuitem-divider-content"
  })), react.createElement("td", {
    className: "bolt-menuitem-cell bolt-list-cell"
  }));
}
function MenuHeader(index, menuItem) {
  return react.createElement("tr", {
    "aria-level": 1,
    className: Util_css(menuItem.className, "bolt-menuitem-row bolt-list-row bolt-menuitem-header"),
    key: menuItem.id || "header-" + index,
    onMouseDown: preventDefault,
    role: "heading"
  }, react.createElement("td", {
    className: "bolt-menuitem-cell bolt-list-cell"
  }), react.createElement("td", {
    className: "bolt-menuitem-cell bolt-list-cell",
    colSpan: 3
  }, react.createElement("div", {
    className: "bolt-menuitem-cell-content bolt-menuitem-cell-text"
  }, menuItem.text)), react.createElement("td", {
    className: "bolt-menuitem-cell bolt-list-cell",
    colSpan: 3
  }));
}

var MenuItem =
/** @class */
function (_super) {
  __extends(MenuItem, _super);

  function MenuItem() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.localKeyStroke = false;
    _this.expanded = false;
    _this.element = react.createRef();

    _this.handleClick = function (event) {
      var menuItem = _this.props.menuItem;

      if (menuItem.disabled) {
        event.preventDefault();
      } else if (!_this.expanded) {
        var ownerResponse = void 0; // If the menu owner supplied a handler, we will get feedback from them before doing
        // default processing on the menu item.

        if (menuItem.onActivate) {
          ownerResponse = menuItem.onActivate(menuItem, event);
        } // If the owner specifically returned true, we will not perform any defaults.


        if (!ownerResponse) {
          if (!menuItem.href) {
            event.preventDefault();
          } // For menus with sub-menus we will expand it on activation. For other menu items
          // they are executed.


          if (menuItem.subMenuProps) {
            _this.props.details.menu.expandItem(menuItem, true);
          } else if (menuItem.href) {
            _this.props.details.onActivate(menuItem, event);
          } else if (menuItem.checked === undefined || menuItem.readonly) {
            _this.props.details.onActivate(menuItem, event);
          }
        }
      }
    }; // If the click handler doesn't return false explicitly close dismiss the menu.


    _this.onClick = function (event) {
      if (!event.defaultPrevented) {
        _this.handleClick(event);
      }
    };

    _this.onDismissSubMenu = function (dismissAll) {
      if (!dismissAll && _this.element.current) {
        _this.props.details.menu.expandItem(_this.props.menuItem, false);
      }
    };

    _this.onExpandedChange = function (expandedIndex) {
      return _this.expanded && expandedIndex !== _this.props.index || !_this.expanded && expandedIndex === _this.props.index;
    };

    _this.onFocus = function (event) {
      if (_this.element.current === document.activeElement) {
        _this.props.details.onFocusItem(_this.props.index, event);
      }
    }; // Handle the keydown to expand the menu.


    _this.onKeyDown = function (event) {
      _this.localKeyStroke = true;

      if (!event.defaultPrevented) {
        var menuItem = _this.props.menuItem;

        if (event.which === KeyCode.tab || event.which === KeyCode.space) {
          event.preventDefault();
        } else if (event.which === KeyCode.rightArrow && menuItem.subMenuProps) {
          event.preventDefault();

          _this.props.details.menu.expandItem(menuItem, true);
        }
      }
    }; // Translate the space and enter keys into onClick event for a menuItem.


    _this.onKeyUp = function (event) {
      // If we get focus while a key is down we will get the keyup. We dont want
      // to process this key, it needs to originate from us.
      if (!_this.localKeyStroke) {
        return;
      }

      if (!event.defaultPrevented) {
        if (event.which === KeyCode.enter || event.which === KeyCode.space) {
          _this.handleClick(event);
        }
      }
    };

    _this.onMouseDown = function (event) {
      if (!event.defaultPrevented) {
        var menuItem = _this.props.menuItem;

        if (menuItem.disabled || _this.props.details.expandedIndex.value === _this.props.index) {
          event.preventDefault();
        }
      }
    }; // If you hover over a menu with a submenu we will open it after a short delay
    // or stop the closing timeout.


    _this.onMouseEnter = function () {
      if (!_this.props.menuItem.disabled) {
        _this.props.details.menu.expandItem(_this.props.menuItem, true);

        setFocusVisible(false);
      }
    }; // If you leave the menu item and sub-menu we will close the menu after a short delay
    // or stop the open timeout.


    _this.onMouseLeave = function () {
      _this.onDismissSubMenu(false);
    };

    return _this;
  }

  MenuItem.prototype.render = function () {
    var _this = this;

    var _a = this.props,
        index = _a.index,
        menuItem = _a.menuItem,
        details = _a.details;
    var menu = details.menu,
        position = details.position,
        setSize = details.setSize;
    var ariaLabel = menuItem.ariaLabel,
        checked = menuItem.checked,
        className = menuItem.className,
        disabled = menuItem.disabled,
        href = menuItem.href,
        iconProps = menuItem.iconProps,
        readonly = menuItem.readonly,
        secondaryText = menuItem.secondaryText,
        subMenuProps = menuItem.subMenuProps,
        target = menuItem.target;
    var id = menuItem.id,
        rel = menuItem.rel,
        text = menuItem.text; // If this is a link menu item we will use an anchor otherwise a plain div.

    var CellType = href ? "div" : "td";
    var RowType = href ? "a" : "tr"; // If the menu item is a link is targetting an external window or tab and no explicit rel
    // attribute was supplied we will set noopener.

    if (href && target && !rel) {
      rel = "noopener";
    }

    return react.createElement(Observer, {
      checked: checked,
      expandedIndex: {
        observableValue: this.props.details.expandedIndex,
        filter: this.onExpandedChange
      }
    }, function (props) {
      _this.expanded = props.expandedIndex === index;
      return react.createElement(MouseWithin, {
        enterDelay: 250,
        leaveDelay: 250,
        onMouseEnter: _this.onMouseEnter,
        onMouseLeave: _this.onMouseLeave
      }, function (mouseWithinEvents) {
        return react.createElement(FocusZoneContext.Consumer, null, function (rowContext) {
          return react.createElement(FocusWithin, {
            onFocus: _this.onFocus
          }, function (focusStatus) {
            return react.createElement(FocusZone, {
              direction: FocusZoneDirection.Horizontal
            }, react.createElement(RowType, {
              "aria-label": ariaLabel,
              "aria-checked": props.checked === true || undefined,
              "aria-controls": _this.expanded && subMenuProps ? getSafeId(subMenuProps.id) : undefined,
              "aria-disabled": disabled ? "true" : undefined,
              "aria-expanded": subMenuProps ? _this.expanded : undefined,
              "aria-haspopup": subMenuProps ? true : undefined,
              "aria-posinset": position,
              "aria-setsize": setSize,
              className: Util_css(className, "bolt-menuitem-row bolt-list-row bolt-menuitem-row-normal cursor-pointer", disabled && "disabled", _this.expanded && "expanded", focusStatus.hasFocus && "focused"),
              "data-focuszone": disabled ? undefined : rowContext.focuszoneId,
              href: href,
              id: getSafeId(id),
              role: props.checked !== undefined ? "menuitemcheckbox" : "menuitem",
              onBlur: focusStatus.onBlur,
              onClick: _this.onClick,
              onFocus: focusStatus.onFocus,
              onKeyDown: _this.onKeyDown,
              onKeyUp: _this.onKeyUp,
              onMouseDown: _this.onMouseDown,
              onMouseEnter: mouseWithinEvents.onMouseEnter,
              onMouseLeave: mouseWithinEvents.onMouseLeave,
              ref: _this.element,
              rel: rel,
              tabIndex: disabled ? undefined : -1,
              target: target
            }, react.createElement(CellType, {
              className: "bolt-menuitem-cell bolt-list-cell"
            }, react.createElement("div", {
              className: "bolt-menuitem-cell-content flex-row"
            })), react.createElement(CellType, {
              className: "bolt-menuitem-cell bolt-list-cell"
            }, props.checked !== undefined && (menuItem.renderMenuCell && menuItem.renderMenuCell(MenuCell.State, menuItem, details) || react.createElement("div", {
              className: "bolt-menuitem-cell-content bolt-menuitem-cell-state flex-row"
            }, readonly === true ? Icon_Icon({
              className: Util_css(!props.checked && "invisible"),
              iconName: "CheckMark"
            }) : react.createElement(Checkbox_Checkbox_Checkbox, {
              checked: props.checked,
              disabled: disabled,
              excludeFocusZone: true,
              excludeTabStop: true,
              onChange: _this.onClick
            })))), react.createElement(CellType, {
              className: "bolt-menuitem-cell bolt-list-cell"
            }, menuItem.renderMenuCell && menuItem.renderMenuCell(MenuCell.Icon, menuItem, details) || iconProps && react.createElement("div", {
              className: "bolt-menuitem-cell-content bolt-menuitem-cell-icon flex-row"
            }, Icon_Icon(iconProps))), react.createElement(CellType, {
              className: "bolt-menuitem-cell bolt-list-cell"
            }, menuItem.renderMenuCell && menuItem.renderMenuCell(MenuCell.PrimaryText, menuItem, details) || react.createElement("div", {
              id: getSafeId(id + "-text"),
              className: "bolt-menuitem-cell-content bolt-menuitem-cell-text flex-row"
            }, text ? react.createElement(Tooltip_Tooltip, {
              overflowOnly: true,
              text: text
            }, react.createElement("div", {
              className: "text-ellipsis"
            }, text)) : react.createElement("div", null, "\u00A0"))), react.createElement(CellType, {
              className: "bolt-menuitem-cell bolt-list-cell"
            }, menuItem.renderMenuCell && menuItem.renderMenuCell(MenuCell.SecondaryText, menuItem, details) || secondaryText && react.createElement("div", {
              className: "bolt-menuitem-cell-content bolt-menuitem-cell-secondary flex-row"
            }, secondaryText)), react.createElement(CellType, {
              className: "bolt-menuitem-cell bolt-list-cell"
            }, menuItem.renderMenuCell && menuItem.renderMenuCell(MenuCell.Action, menuItem, details) || subMenuProps && react.createElement("div", {
              className: "bolt-menuitem-cell-content bolt-menuitem-cell-submenu flex-row"
            }, Icon_Icon({
              iconName: "ChevronRightMed",
              size: IconSize.small
            }), _this.expanded && _this.element.current && react.createElement(ContextualMenu, {
              anchorElement: _this.element.current,
              anchorOffset: {
                horizontal: 0,
                vertical: -8
              },
              anchorOrigin: {
                horizontal: Location.end,
                vertical: Location.start
              },
              subMenu: true,
              menuOrigin: {
                horizontal: Location.start,
                vertical: Location.start
              },
              menuProps: subMenuProps,
              onActivate: _this.props.details.onActivate,
              onDismiss: _this.onDismissSubMenu,
              parentMenu: menu
            }))), react.createElement(CellType, {
              className: "bolt-menuitem-cell bolt-list-cell"
            }, react.createElement("div", {
              className: "bolt-menuitem-cell-content flex-row"
            }))));
          });
        });
      });
    });
  };

  return MenuItem;
}(react.Component);



var ContextualMenu =
/** @class */
function (_super) {
  __extends(ContextualMenu, _super);

  function ContextualMenu() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.calloutRef = react.createRef();

    _this.onDismiss = function () {
      if (_this.props.onDismiss) {
        _this.props.onDismiss(false);
      }
    };

    _this.onKeyDown = function (event) {
      if (!event.defaultPrevented) {
        if (event.which === KeyCode.escape || event.which === KeyCode.tab || event.which === KeyCode.leftArrow && _this.props.subMenu) {
          event.preventDefault();

          if (_this.props.onDismiss) {
            _this.props.onDismiss(false);
          }
        }
      }
    };

    _this.onActivate = function (menuItem, event) {
      if (_this.props.menuProps.onActivate) {
        _this.props.menuProps.onActivate(menuItem, event);
      }

      if (_this.props.onActivate) {
        _this.props.onActivate(menuItem, event);
      }

      if (_this.props.onDismiss) {
        _this.props.onDismiss(true);
      }
    };

    _this.preprocessKeyStroke = function (event) {
      if (isArrowKey(event)) {
        return FocusZoneKeyStroke.IgnoreParents;
      }

      return FocusZoneKeyStroke.IgnoreNone;
    };

    return _this;
  }

  ContextualMenu.prototype.render = function () {
    var _this = this;

    var defaultActiveElement = ".bolt-menu-container"; // Determine which element should be the first to get focus.
    // Headers may be the first row and they wont take focus.

    var items = ObservableLike.getValue(this.props.menuProps.items); // Need slice() because order of elements matters in ObservableCollection

    if (this.props.menuProps.items instanceof ObservableCollection) {
      items = items.slice();
    }

    var sortedItems = items.sort(function (a, b) {
      return (a.rank || Number.MAX_VALUE) - (b.rank || Number.MAX_VALUE);
    });

    for (var menuIndex = 0; menuIndex < sortedItems.length; menuIndex++) {
      if (sortedItems[menuIndex].itemType === MenuItemType.Normal || sortedItems[menuIndex].itemType === undefined) {
        var menuItemId = sortedItems[menuIndex].id;

        if (!menuItemId || sortedItems[menuIndex].disabled) {
          continue;
        }

        defaultActiveElement = getSafeIdSelector(menuItemId);
        break;
      }
    }

    return react.createElement(Observer, {
      menuItems: {
        observableValue: this.props.menuProps.items,
        filter: function () {
          var _a;

          (_a = _this.calloutRef.current) === null || _a === void 0 ? void 0 : _a.updateLayout();
          return false;
        }
      }
    }, function () {
      return react.createElement(Callout_Callout_Callout, {
        ref: _this.calloutRef,
        anchorElement: _this.props.anchorElement,
        anchorOffset: _this.props.anchorOffset,
        anchorOrigin: _this.props.anchorOrigin,
        anchorPoint: _this.props.anchorPoint,
        blurDismiss: true,
        calloutOrigin: _this.props.menuOrigin,
        className: _this.props.className,
        contentClassName: Util_css("bolt-contextual-menu flex-column custom-scrollbar depth-8", _this.props.subMenu && "bolt-contextual-submenu"),
        contentShadow: true,
        onDismiss: _this.onDismiss,
        fixedLayout: _this.props.fixedLayout,
        focuszoneProps: {
          defaultActiveElement: defaultActiveElement,
          direction: FocusZoneDirection.Vertical,
          focusOnMount: true,
          preprocessKeyStroke: _this.preprocessKeyStroke
        },
        id: _this.props.menuProps.id + "-callout",
        portalProps: {
          className: "bolt-menu-portal"
        }
      }, react.createElement("div", {
        className: "bolt-contextualmenu-container",
        onKeyDown: _this.onKeyDown
      }, react.createElement(Menu_Menu_Menu, tslib_es6_assign({}, _this.props.menuProps, {
        onActivate: _this.onActivate,
        parentMenu: _this.props.parentMenu
      }))));
    });
  };

  return ContextualMenu;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Menu/MenuButton.js








var MenuButton_buttonId = 1;

var MenuButton_MenuButton =
/** @class */
function (_super) {
  __extends(MenuButton, _super);

  function MenuButton(props) {
    var _this = _super.call(this, props) || this;

    _this.dropdownButton = react.createRef();

    _this.expand = function () {
      if (_this.dropdownButton.current) {
        _this.dropdownButton.current.expand();
      }
    };

    _this.collapse = function () {
      if (_this.dropdownButton.current) {
        _this.dropdownButton.current.collapse();
      }
    };

    _this.renderMenu = function (dropdown, dropdownId, anchorElement, anchorOffset, anchorOrigin, anchorPoint, dropdownOrigin) {
      var contextualMenuProps = typeof _this.props.contextualMenuProps === "function" ? _this.props.contextualMenuProps() : _this.props.contextualMenuProps;
      return react.createElement(ContextualMenu, {
        anchorElement: anchorElement,
        anchorOffset: contextualMenuProps.anchorOffset || anchorOffset,
        anchorOrigin: contextualMenuProps.anchorOrigin || anchorOrigin,
        anchorPoint: contextualMenuProps.anchorPoint || anchorPoint,
        fixedLayout: contextualMenuProps.fixedLayout,
        menuOrigin: contextualMenuProps.menuOrigin || dropdownOrigin,
        menuProps: contextualMenuProps.menuProps,
        className: contextualMenuProps.className,
        onActivate: function (menuItem, event) {
          if (contextualMenuProps.onActivate) {
            contextualMenuProps.onActivate(menuItem, event);
          }

          dropdown.collapse();
        },
        onDismiss: dropdown.collapse
      });
    };

    _this.state = {
      id: _this.props.id || "menu-button-" + MenuButton_buttonId++
    };
    return _this;
  }

  MenuButton.prototype.render = function () {
    var _a = this.props,
        contextualMenuProps = _a.contextualMenuProps,
        hideDropdownIcon = _a.hideDropdownIcon;
    return react.createElement(ExpandableButton_ExpandableButton, tslib_es6_assign({}, tslib_es6_assign(tslib_es6_assign({}, this.props), {
      menuProps: undefined
    }), {
      hideDropdownIcon: hideDropdownIcon,
      id: this.state.id,
      ref: this.dropdownButton,
      renderCallout: this.renderMenu
    }), this.props.children);
  };

  MenuButton.prototype.focus = function () {
    if (this.dropdownButton.current) {
      this.dropdownButton.current.focus();
    }
  };

  return MenuButton;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Resources.Widgets.js
var AllRowsSelectedMessage = "All rows got selected";
var AllRowsUnselectedMessage = "All rows got unselected";
var ClickableRowAnnouncement = "Row {0}. Clickable";
var ClickableRowAnnouncementWithSize = "Row {0} of {1}. Clickable";
var ColumnSizerLabel = "{0} column sizer";
var ColumnSortedAscendingAnnouncement = "Column sorted ascending";
var ColumnSortedDescendingAnnouncement = "Column sorted descending";
var EmptyColumnHeaderLabel = "Blank";
var Resources_Widgets_ListItem = "listitem";
var MoreActions = "More actions";
var MoreTooltip = "More options";
var NoMoreActions = "No actions";
var RemovePillLabel = "Remove {0}";
var RowAnnouncement = "Row {0}";
var RowAnnouncementWithSize = "Row {0} of {1}";
var SelectAllRowsLabel = "Select all rows";
var SelectionColumnLabel = "Selection column";
var SelectRowLabel = "Select row with checkbox";
var SizerLabel = "Current value {0}, minimum value {1}, maximum value {2}";
var SizerValueChanged = "New size value {0}";
var Started = "Started {0}";
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Menu/MoreButton.js









var MoreButton =
/** @class */
function (_super) {
  __extends(MoreButton, _super);

  function MoreButton() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.menuButton = react.createRef();

    _this.expand = function () {
      if (_this.menuButton.current) {
        _this.menuButton.current.expand();
      }
    };

    _this.collapse = function () {
      if (_this.menuButton.current) {
        _this.menuButton.current.collapse();
      }
    };

    return _this;
  }

  MoreButton.prototype.render = function () {
    return react.createElement(MenuButton_MenuButton, tslib_es6_assign({
      ariaLabel: MoreActions,
      hideDropdownIcon: true,
      iconProps: {
        iconName: "MoreVertical"
      },
      ref: this.menuButton,
      subtle: true,
      tooltipProps: {
        text: MoreActions
      }
    }, this.props));
  };

  MoreButton.prototype.focus = function () {
    if (this.menuButton.current) {
      this.menuButton.current.focus();
    }
  };

  return MoreButton;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Menu.js






;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/ResponsiveLayout/ResponsiveLayout.Props.js
/**
 * The response layout can be used to adjust the children based on either a horizonal or
 * vertical layout but not both at the same time.
 */
var ResponsiveOrientation;

(function (ResponsiveOrientation) {
  /**
   * Components are measured by width and adjusted based on the the width of the parent
   * element.
   */
  ResponsiveOrientation[ResponsiveOrientation["Horizontal"] = 0] = "Horizontal";
  /**
   * Components are measure by height and adjusted based on the height of the parent
   * element.
   */

  ResponsiveOrientation[ResponsiveOrientation["Vertical"] = 1] = "Vertical";
})(ResponsiveOrientation || (ResponsiveOrientation = {}));
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/ResponsiveLayout/ResponsiveLayout.js






/**
 * The ResponsiveLayout component is used to create a container that responds to
 * its size. Children of the layout container element will be shown or hidden
 * based on the amount of space available. The client creates the ResponsiveLayout
 * around the element that should be managed.
 *
 * The children of the layout container MUST map one element per child. This allows
 * the ResponsiveLayout to map visibility of the component to its relative DOM
 * element. The child MAY be a component and is not required to be a direct DOM
 * element. The child component MUST result in one root DOM element.
 */

var ResponsiveLayout =
/** @class */
function (_super) {
  __extends(ResponsiveLayout, _super);

  function ResponsiveLayout() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    /**
     * Details about each of the children in the responsive layout.
     */


    _this.childDetails = [];
    /**
     * All components within the responsiveLayout MUST specific a unique key. The
     * key should follow the same rules as a standard React key. If the component
     * fundamentally changes the key should change along with it.
     */

    _this.childKeys = [];
    /**
     * ref to the container element used by the responsive layout. The direct children
     * are the elements that are responsive.
     */

    _this.containerRef = react.createRef();
    /**
     * Number of hidden components in the layout.
     */

    _this.hiddenCount = 0;
    /**
     * Timeout used to notify callers about changes to the visible elements.
     */

    _this.layoutTimeout = 0;

    _this.updateLayout = function () {
      var componentElement = _this.containerRef.current;

      if (componentElement && componentElement.children.length) {
        var hiddenCount = _this.hiddenCount;
        var componentClientRect = componentElement.getBoundingClientRect();
        var renderedSize = 0;
        var ignoredSize = 0;
        var initialPass = false; // If we dont have the child details computed, or the children have changed we need
        // to populate the child details.s
        // @NOTE: We need to be able to detect changes to children without the length changing.

        if (!_this.childDetails || componentElement.children.length !== _this.childDetails.length) {
          _this.childDetails = [];
          initialPass = true;
        } // We need to go through and compute the sizes of the child components.


        for (var componentIndex = 0; componentIndex < componentElement.children.length; componentIndex++) {
          var clientRect = componentElement.children[componentIndex].getBoundingClientRect(); // If this is the initial pass we will create new adjust entries for this components
          // otherwise we will just update the current state.

          if (initialPass) {
            _this.childDetails.push({
              appliedSize: 0,
              clientRect: clientRect
            });
          } else {
            _this.childDetails[componentIndex].clientRect = clientRect;
          } // Track ignored component sizes independently, this will help with rounding issues.


          if (_this.props.ignoredChildren && _this.props.ignoredChildren.indexOf(componentIndex) >= 0) {
            ignoredSize += _this.props.orientation === ResponsiveOrientation.Vertical ? clientRect.height : clientRect.width;
          }
        } // The renderedSize is equal to the size from the end of the last component to the
        // start of the first component minus any ignored space.


        if (_this.props.orientation === ResponsiveOrientation.Vertical) {
          renderedSize = Math.floor(_this.childDetails[_this.childDetails.length - 1].clientRect.bottom - _this.childDetails[0].clientRect.top);
        } else {
          renderedSize = Math.floor(_this.childDetails[_this.childDetails.length - 1].clientRect.right - _this.childDetails[0].clientRect.left);
        }

        renderedSize -= Math.floor(ignoredSize); // If there is not enough space we will try to adjust items smaller first.

        var componentClientSize = Math.floor(_this.props.orientation === ResponsiveOrientation.Vertical ? componentClientRect.height : componentClientRect.width);

        if (componentClientSize <= renderedSize) {
          var availableSpace = componentClientSize - renderedSize;

          while (availableSpace < 0 && _this.hiddenCount < _this.props.responsiveChildren.length) {
            var childIndex = _this.props.responsiveChildren[_this.hiddenCount];
            var childDetail = _this.childDetails[childIndex]; // Determine how much space we will recoupe from this component.

            var appliedSize = _this.props.orientation === ResponsiveOrientation.Vertical ? childDetail.clientRect.height : childDetail.clientRect.width; // Apply the next adjustment to the child components.

            availableSpace += appliedSize; // Mark the child hidden and track how space we recouped from component.

            childDetail.hidden = true;
            childDetail.appliedSize = appliedSize; // Move on to the next component if we need more space.

            _this.hiddenCount++; // console.log("Adjust (shrink), applied " + appliedSize + " from child " + childIndex);
          }
        } // If we have availableSpace and there are adjusted items we should see if we can give
        // some back to items.
        else if (componentClientSize > renderedSize) {
          var availableSpace = componentClientSize - renderedSize;

          while (_this.hiddenCount > 0) {
            var childIndex = _this.props.responsiveChildren[_this.hiddenCount - 1];
            var childDetail = _this.childDetails[childIndex]; // Check if there is enough space for this component.  Use a buffer to prevent flickering.

            var buffer = 8;

            if (_this.childDetails[childIndex].appliedSize + buffer >= availableSpace) {
              break;
            } // Apply the next adjustment to the child components.


            availableSpace -= childDetail.appliedSize;
            childDetail.hidden = false; // Now that this component is visible we will decrement its count.

            _this.hiddenCount--; // console.log("Adjust (grow), applied " + childDetail.appliedSize + " from child " + childIndex);
          }
        } // If adjustments were applied we need to notify the owner on the change and re-layout.


        if (hiddenCount != _this.hiddenCount) {
          _this.layoutTimeout = window.setTimeout(function () {
            _this.layoutTimeout = 0;

            if (_this.props.onLayoutChange) {
              _this.props.onLayoutChange(_this.hiddenCount);
            } // Force updates to the components and we will see if we have gained enough space.


            _this.forceUpdate();
          }, 0);
        }
      }
    };

    return _this;
  }

  ResponsiveLayout.prototype.render = function () {
    var _this = this;

    var childKeys = [];
    var container = react.Children.only(this.props.children); // Get the to the container for us to use during sizing calculations.

    this.containerRef = shimRef(container); // Clone the container and insert the placeholders for hidden children.

    var children = react.cloneElement(container, tslib_es6_assign(tslib_es6_assign({}, container.props), {
      ref: this.containerRef
    }), react.Children.map(container.props.children, function (child, index) {
      if (false) {} // ALL children MUST have unique keys.


      if (!child.key) {
        console.warn("All children MUST have a unique key");
        child.key = index;
      }

      childKeys[index] = child.key; // If the component has been hidden by an layout, we will render a placeholder, that takes 0 size.

      if (_this.childDetails && _this.childDetails[index] && _this.childDetails[index].hidden) {
        return react.createElement("div", {
          key: "PH" + index,
          className: "responsive-placeholder"
        });
      }

      return child;
    })); // If the children have changed we will reset the layout and start over.

    if (this.childKeys) {
      if (this.childKeys.length !== childKeys.length) {
        this.resetLayout();
      } else {
        for (var keyIndex = 0; keyIndex < childKeys.length; keyIndex++) {
          if (this.childKeys[keyIndex] !== childKeys[keyIndex]) {
            this.resetLayout();
            break;
          }
        }
      }
    }

    this.childKeys = childKeys;
    return children;
  };

  ResponsiveLayout.prototype.componentDidMount = function () {
    window.addEventListener("resize", this.updateLayout);
    this.updateLayout();
  };

  ResponsiveLayout.prototype.componentDidUpdate = function () {
    this.updateLayout();
  };

  ResponsiveLayout.prototype.componentWillUnmount = function () {
    if (this.layoutTimeout) {
      window.clearTimeout(this.layoutTimeout);
      this.layoutTimeout = 0;
    }

    window.removeEventListener("resize", this.updateLayout);
  };

  ResponsiveLayout.prototype.resetLayout = function () {
    this.childDetails = undefined;
    this.hiddenCount = 0;
  };

  return ResponsiveLayout;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/ResponsiveLayout.js


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/ResizeGroup/ResizeGroup.js






var ResizeGroupContext = react.createContext({});

var ResizeGroup =
/** @class */
function (_super) {
  __extends(ResizeGroup, _super);

  function ResizeGroup(props) {
    var _this = _super.call(this, props) || this;

    _this.onLayoutChange = function (hiddenCount) {
      _this.state.hiddenCount.value = hiddenCount;

      if (_this.props.responsiveLayoutProps.onLayoutChange) {
        _this.props.responsiveLayoutProps.onLayoutChange(hiddenCount);
      }

      ResizeGroup.updateOverflowItems(_this.props, _this.state);
    };

    var extraItems = _this.props.extraItems || [];
    _this.state = {
      hiddenCount: new ObservableValue(0),
      overflowItems: new ObservableArray(tslib_es6_spreadArrays(extraItems)),
      editedItems: []
    };
    return _this;
  }

  ResizeGroup.getDerivedStateFromProps = function (nextProps, prevState) {
    ResizeGroup.updateOverflowItems(nextProps, prevState);
    return prevState;
  };

  ResizeGroup.prototype.render = function () {
    return react.createElement(ResizeGroupContext.Provider, {
      value: {
        overflowItems: this.state.overflowItems
      }
    }, react.createElement(ResponsiveLayout, tslib_es6_assign({}, this.props.responsiveLayoutProps, {
      onLayoutChange: this.onLayoutChange
    }), this.props.children));
  };

  ResizeGroup.updateOverflowItems = function (props, state) {
    var extraItems = props.extraItems || [];
    state.overflowItems.value = tslib_es6_spreadArrays(extraItems, props.overflowMenuItems.slice(0, state.hiddenCount.value));

    if (props.useAriaLabelForOverflow) {
      // clear out previously edited menu items text values
      state.editedItems.forEach(function (item) {
        return item.text = "";
      });
      state.editedItems = [];
      state.overflowItems.value.forEach(function (item) {
        if (!item.text && item.ariaLabel) {
          item.text = item.ariaLabel;
          state.editedItems.push(item);
        }
      });
    }
  };

  return ResizeGroup;
}(react.Component);


// EXTERNAL MODULE: ./node_modules/azure-devops-ui/Components/ResizeGroup/ResizeGroup.Props.js
var ResizeGroup_Props = __webpack_require__("./node_modules/azure-devops-ui/Components/ResizeGroup/ResizeGroup.Props.js");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/ResizeGroup/OverflowButton.js








var OverflowButton =
/** @class */
function (_super) {
  __extends(OverflowButton, _super);

  function OverflowButton() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.moreButton = react.createRef();
    return _this;
  }

  OverflowButton.prototype.render = function () {
    var _this = this;

    return react.createElement(ResizeGroupContext.Consumer, null, function (resizeGroupContext) {
      return react.createElement(Observer, {
        menuItems: resizeGroupContext.overflowItems
      }, function (props) {
        return props.menuItems && props.menuItems.length > 0 ? react.createElement(MoreButton, tslib_es6_assign({
          contextualMenuProps: {
            menuProps: {
              id: "overflow-menu",
              items: props.menuItems
            }
          },
          ref: _this.moreButton
        }, _this.props)) : react.createElement("div", null);
      });
    });
  };

  OverflowButton.prototype.focus = function () {
    if (this.moreButton.current) {
      this.moreButton.current.focus();
    }
  };

  return OverflowButton;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/ResizeGroup.js
 // @NOTE: Explicit export list due to typescript compiler bug 18644 where a require is generated for export * when const enum's are present



;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Utilities/Filter.js



var FilterOperatorType;

(function (FilterOperatorType) {
  /**
   * The filter's value should be treated as having the AND operator
   * e.g. If the value is ['a', 'c', 'd'] any item which does not contain
   * 'a' AND 'c' AND 'd' should not be included
   */
  FilterOperatorType["and"] = "and";
  /**
   * The filter's value should be treated as having the OR operator
   * e.g. If the value is ['a', 'c', 'd'] any item which contains
   * 'a' OR 'c' OR 'd' should be included
   */

  FilterOperatorType["or"] = "or";
})(FilterOperatorType || (FilterOperatorType = {}));

var FILTER_CHANGE_EVENT = "filter-changed";
var FILTER_APPLIED_EVENT = "filter-applied";
var FILTER_RESET_EVENT = "reset-filters";
/**
 * Store for a set of filter values
 *
 * Events:
 *
 *  FILTER_CHANGE_EVENT: IFilterState
 *  Fired whenever a filter value changes. The event object contains the changed items.
 *  When using explicit apply-mode, this event is fired when the filter is changed (i.e. by user action)
 *  but not yet applied.
 *
 *  FILTER_APPLIED_EVENT: IFilterState
 *  Fired when new filter changes have been applied. The event object contains the changed items.
 *  When not using explicit apply-mode, this event is fired on every state change
 */

var Filter =
/** @class */
function () {
  /**
   * Create a new Filter store
   * @param options Options for the filter store
   */
  function Filter(options, observable) {
    if (options === void 0) {
      options = {};
    }

    this.observable = observable || new Observable();
    this.applyMode = !!options.useApplyMode;
    this.defaultState = tslib_es6_assign({}, options.defaultState);
    this.currentState = tslib_es6_assign({}, this.defaultState);
    this.customValueComparers = tslib_es6_assign({}, options.customValueComparers);

    if (this.applyMode) {
      this.appliedState = tslib_es6_assign({}, this.currentState);
    } else {
      this.appliedState = this.currentState;
    }
  }

  Filter.prototype.subscribe = function (observer, action) {
    return this.observable.subscribe(observer, action);
  };

  Filter.prototype.unsubscribe = function (observer, action) {
    this.observable.unsubscribe(observer, action);
  };
  /**
   * Gets a dictionary containing the current values of all filter items
   */


  Filter.prototype.getState = function () {
    return tslib_es6_assign({}, this.currentState);
  };
  /**
   * Gets a dictionary containing the applied values of all filter items.
   * When useApplyMode is false, this always matches the value returned by getState.
   */


  Filter.prototype.getAppliedState = function () {
    return tslib_es6_assign({}, this.appliedState);
  };
  /**
   * Gets a dictionary containing the default values of all filter items
   */


  Filter.prototype.getDefaultState = function () {
    return this.defaultState;
  };
  /**
   * Update what the filter considers as its default state
   * @param defaultState The new default state
   */


  Filter.prototype.setDefaultState = function (defaultState) {
    this.defaultState = defaultState;
  };
  /**
   * Sets the current values of all filter items
   * @param state Dictionary of all current filter item values
   * @param supressChangeEvent If true, don't invoke the onFilterChanged callback at this time
   */


  Filter.prototype.setState = function (state, supressChangeEvent) {
    if (supressChangeEvent === void 0) {
      supressChangeEvent = false;
    }

    var prevState = this.currentState;
    this.currentState = tslib_es6_assign({}, state);

    if (!this.applyMode) {
      this.appliedState = this.currentState;
    }

    if (!supressChangeEvent) {
      var changedState = tslib_es6_assign({}, state);

      for (var key in prevState) {
        // Add current filters that are cleared by the new state
        // (i.e. these changed from "something" to "nothing")
        if (!state.hasOwnProperty(key)) {
          changedState[key] = null;
        }
      }

      this._triggerStateChange(changedState);
    }
  };
  /**
   * Gets the value of the specified filter item
   * @param key Filter item key
   */


  Filter.prototype.getFilterItemState = function (key) {
    return this.currentState[key];
  };
  /**
   * Gets the applied value of the specified filter item. When applyMode is false,
   * this is equivalent to getFilterItemState.
   * @param key Filter item key
   */


  Filter.prototype.getAppliedFilterItemState = function (key) {
    return this.appliedState[key];
  };
  /**
   * Gets the value property for the filter item with the given key.
   * @param key The filter item's key
   */


  Filter.prototype.getFilterItemValue = function (key) {
    var item = this.currentState[key];

    if (item) {
      return item.value;
    } else {
      return undefined;
    }
  };
  /**
   * Sets the value of the specified filter item
   * @param key Filter item key
   * @param value Filter value
   */


  Filter.prototype.setFilterItemState = function (key, value) {
    this.currentState[key] = value;
    var changeEvent = {};
    changeEvent[key] = value;

    this._triggerStateChange(changeEvent);
  };
  /**
   * Resets the filter values to their default state
   * @param suppressChangeEvent If true, don't invoke the onFilterChanged callback at this time
   */


  Filter.prototype.reset = function (suppressChangeEvent) {
    if (suppressChangeEvent === void 0) {
      suppressChangeEvent = false;
    }

    this.setState(this.defaultState, suppressChangeEvent);

    if (!suppressChangeEvent) {
      this._raiseEventAndCallListeners(FILTER_RESET_EVENT, {});
    }
  };

  Filter.prototype.resetFilterItemState = function (key) {
    var value = this.defaultState[key];
    this.setFilterItemState(key, value);
  };

  Filter.prototype.applyChanges = function () {
    this.appliedState = tslib_es6_assign({}, this.currentState);

    this._raiseEventAndCallListeners(FILTER_APPLIED_EVENT, this.appliedState);
  };

  Filter.prototype.usesApplyMode = function () {
    return this.applyMode;
  };

  Filter.prototype.hasChangesToApply = function () {
    return !this.statesAreEqual(this.appliedState, this.currentState);
  };

  Filter.prototype.hasChangesToReset = function () {
    return !this.statesAreEqual(this.defaultState, this.currentState);
  };

  Filter.prototype.statesAreEqual = function (state1, state2) {
    return this._checkStateEquality(state1, state2) && this._checkStateEquality(state2, state1);
  };

  Filter.prototype.filterItemStatesAreEqual = function (item, state1, state2) {
    return this._checkFilterItemStateEquality(item, state1, state2);
  };

  Filter.prototype._triggerStateChange = function (changedState) {
    this._raiseEventAndCallListeners(FILTER_CHANGE_EVENT, changedState);

    if (!this.applyMode) {
      this._raiseEventAndCallListeners(FILTER_APPLIED_EVENT, changedState);
    }
  };

  Filter.prototype._raiseEventAndCallListeners = function (eventName, changedState) {
    this.observable.notify(changedState, eventName);
  };

  Filter.prototype._checkStateEquality = function (state1, state2) {
    for (var item in state1) {
      var filterItemStateEqual = this._checkFilterItemStateEquality(item, state1[item], state2[item]);

      if (!filterItemStateEqual) {
        return false;
      }
    }

    return true;
  };

  Filter.prototype._checkFilterItemStateEquality = function (item, item1State, item2State) {
    var item1Value = item1State && item1State.value;
    var item2Value = item2State && item2State.value;

    if (Array.isArray(item1Value)) {
      if (Array.isArray(item2Value)) {
        if (item1Value.length !== item2Value.length) {
          return false;
        }

        for (var index = 0; index < item1Value.length; index++) {
          if (!this._checkValueEquality(item, item1Value[index], item2Value[index])) {
            return false;
          }
        }
      } else {
        if (item1Value.length !== 0 || !!item2Value) {
          return false;
        }
      }
    } else if (!this._checkValueEquality(item, item1Value, item2Value)) {
      return false;
    } else if (Array.isArray(item2Value)) {
      if (item2Value.length !== 0) {
        return false;
      }
    }

    return true;
  };

  Filter.prototype._checkValueEquality = function (key, item1, item2) {
    if (this.customValueComparers[key]) {
      return this.customValueComparers[key](item1, item2);
    }

    if (item1 && item1 !== item2) {
      return false;
    } else if (!!item1 !== !!item2) {
      return false;
    }

    return true;
  };

  return Filter;
}();


var FilterContext = react.createContext({
  filter: null,
  filterToggled: null
});
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Resources.Page.js
var Back = "Back";
var EnterFullScreen = "Enter full-screen mode";
var ExitFullScreen = "Exit full-screen mode";
var Resources_Page_Filter = "Filter";
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/HeaderCommandBar/Items.js




function getFilterItem(onActivate, hasChanges, important) {
  if (important === void 0) {
    important = true;
  }

  return {
    ariaLabel: Resources_Page_Filter,
    iconProps: {
      iconName: hasChanges ? "FilterSolid" : "Filter"
    },
    id: "filter",
    important: important,
    onActivate: onActivate,
    subtle: true,
    tooltipProps: {
      text: Resources_Page_Filter
    }
  };
}
function getFullScreenItem(onActivate, fullscreen, important) {
  if (important === void 0) {
    important = true;
  }

  return {
    ariaLabel: fullscreen ? Resources.ExitFullScreen : Resources.EnterFullScreen,
    iconProps: {
      iconName: fullscreen ? "BackToWindow" : "FullScreen"
    },
    id: "fullscreen",
    important: important,
    onActivate: onActivate,
    subtle: true
  };
}
function toggleFullScreen(newFullScreenState) {
  if (newFullScreenState) {
    document.body && document.body.classList.add("full-screen-mode");
  } else {
    document.body && document.body.classList.remove("full-screen-mode");
  }
}
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/HeaderCommandBar/HeaderCommandBar.js













var headerCommandBarId = 1;

var HeaderCommandBar_HeaderCommandBar_HeaderCommandBar =
/** @class */
function (_super) {
  __extends(HeaderCommandBar, _super);

  function HeaderCommandBar(props) {
    var _this = _super.call(this, props) || this;

    _this.overflowButtonRef = react.createRef();
    _this.buttonRefs = {};
    _this.moreButtonId = props.moreButtonId || "header-command-bar-menu-button" + headerCommandBarId++;
    return _this;
  }

  HeaderCommandBar.prototype.render = function () {
    var _this = this;

    var _a;

    var items = this.props.items;
    var sortedItems = items.sort(function (a, b) {
      var _a, _b;

      var aRank = (_a = a.rank) !== null && _a !== void 0 ? _a : Number.MAX_VALUE;
      var bRank = (_b = b.rank) !== null && _b !== void 0 ? _b : Number.MAX_VALUE;
      return aRank > bRank ? 1 : aRank < bRank ? -1 : 0;
    });
    var defaultElementId = "";
    this.buttonRefs = {};
    var buttonItems = [];
    var overflowItems = [];
    var extraItems = [];
    var responsiveChildren = []; // Anything with important: true will be rendered as a button
    // Anything with important: false will be rendered in overflow
    // If buttonCount is supplied, that many buttons will be rendered into
    // a resizeGroup, and the rest will be overflow.  By default, buttonCount is 3.

    var buttonCount = (_a = this.props.buttonCount) !== null && _a !== void 0 ? _a : 3;
    var isMenuBar = !items.length || items[0].role !== "button";
    sortedItems.forEach(function (value, index) {
      var id = value.id;

      if (value.itemType === MenuItemType.Divider) {
        if (value.important) {
          buttonItems.push(react.createElement("div", {
            className: "bolt-header-command-item-separator",
            key: id
          }));
        } else {
          extraItems.push(value);
        }
      } else {
        var buttonProps = {
          ariaChecked: ObservableLike.getValue(value.checked),
          ariaLabel: value.ariaLabel,
          ariaRoleDescription: value.href ? "link" : "button",
          ariaControls: value.ariaControls,
          ariaDescribedBy: value.ariaDescribedBy,
          ariaExpanded: value.ariaExpanded,
          ariaHasPopup: value.ariaHasPopup,
          ariaSetSize: value.ariaSetSize,
          ariaPosInSet: value.ariaPosInSet,
          ariaSelected: value.ariaSelected,
          ariaPressed: value.ariaPressed,
          className: Util_css(value.className, "bolt-header-command-item-button"),
          disabled: value.disabled,
          href: value.href,
          iconProps: value.iconProps,
          id: id,
          primary: value.isPrimary,
          role: value.role || "menuitem",
          subtle: value.subtle,
          target: value.target,
          text: value.text,
          tooltipProps: value.tooltipProps
        };

        if (value.important === false || value.important === undefined && buttonCount === 0) {
          extraItems.push(value);
          return;
        } else {
          if (value.important === undefined) {
            responsiveChildren.push(index);
            overflowItems.push(value);
          }

          buttonCount--;
        }

        var TagName = Button_Button_Button;
        var ref = react.createRef();
        _this.buttonRefs[id] = ref;

        if (value.subMenuProps) {
          buttonProps.contextualMenuProps = {
            menuProps: value.subMenuProps
          };
          buttonProps.hideDropdownIcon = value.hideDropdownIcon;
          TagName = MenuButton_MenuButton;
        } else {
          buttonProps.onClick = function (e) {
            return value.onActivate && value.onActivate(value, e);
          };
        }

        if (!defaultElementId && !value.disabled) {
          defaultElementId = id;
        }

        if (value.renderButton) {
          buttonItems.push(value.renderButton(buttonProps));
        } else {
          buttonItems.push(react.createElement(TagName, tslib_es6_assign({}, buttonProps, {
            key: id,
            ref: ref
          })));
        }
      }
    });
    buttonItems.push(react.createElement(OverflowButton, {
      className: Util_css(this.props.overflowClassName, "bolt-header-command-item-button"),
      id: this.moreButtonId,
      key: this.moreButtonId,
      role: "menuitem",
      ref: this.overflowButtonRef
    }));
    this.buttonRefs[this.moreButtonId] = this.overflowButtonRef; // We will use a role of "menubar", unless the first item has a role of button.
    // This will be the case the close button in Panel Headers.

    if (items.length > 0) {
      return react.createElement(CustomHeaderCommandBar, {
        className: this.props.className,
        focusGroupProps: {
          defaultElementId: defaultElementId || this.moreButtonId
        },
        role: isMenuBar ? "menubar" : undefined
      }, react.createElement(ResizeGroup, {
        responsiveLayoutProps: {
          responsiveChildren: responsiveChildren.reverse()
        },
        overflowMenuItems: overflowItems.reverse(),
        extraItems: extraItems,
        useAriaLabelForOverflow: this.props.useAriaLabelForOverflow
      }, react.createElement("div", {
        className: Util_css(this.props.className, "flex-row flex-center flex-grow scroll-hidden rhythm-horizontal-8")
      }, buttonItems)));
    }

    return null;
  };

  HeaderCommandBar.prototype.focus = function (options) {
    var ref = this.buttonRefs[options.commandBarItemId];

    if (ref && ref.current) {
      ref.current.focus();
    }
  };

  return HeaderCommandBar;
}(react.Component);



var HeaderCommandBarWithFilter =
/** @class */
function (_super) {
  __extends(HeaderCommandBarWithFilter, _super);

  function HeaderCommandBarWithFilter(props) {
    var _this = _super.call(this, props) || this;

    _this.headerCommandBarRef = react.createRef();

    _this.onFilterClicked = function () {
      _this.props.filterToggled.value = !_this.props.filterToggled.value;
    };

    _this.onFilterChanged = function () {
      var hasChanges = _this.props.filter.hasChangesToReset();

      if (hasChanges !== _this.state.filterHasChanges) {
        _this.setState({
          filterHasChanges: hasChanges
        });
      }
    };

    _this.state = {
      filterHasChanges: _this.props.filter.hasChangesToReset()
    };
    return _this;
  }

  HeaderCommandBarWithFilter.prototype.componentDidMount = function () {
    this.props.filter.subscribe(this.onFilterChanged, FILTER_CHANGE_EVENT);
  };

  HeaderCommandBarWithFilter.prototype.componentWillUnmount = function () {
    this.props.filter.unsubscribe(this.onFilterChanged, FILTER_CHANGE_EVENT);
  };

  HeaderCommandBarWithFilter.prototype.render = function () {
    var items = this.props.items ? tslib_es6_spreadArrays(this.props.items) : [];
    items.push(getFilterItem(this.onFilterClicked, this.state.filterHasChanges));
    return react.createElement(HeaderCommandBar_HeaderCommandBar_HeaderCommandBar, tslib_es6_assign({}, this.props, {
      items: items,
      ref: this.headerCommandBarRef
    }));
  };

  HeaderCommandBarWithFilter.prototype.focus = function (options) {
    if (this.headerCommandBarRef.current) {
      this.headerCommandBarRef.current.focus(options);
    }
  };

  return HeaderCommandBarWithFilter;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/HeaderCommandBar.js




;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Tabs/Tabs.Props.js
var TabSize;

(function (TabSize) {
  /**
   * 32px tall with 14px text
   */
  TabSize["Compact"] = "compact";
  /**
   * 48px tall with 14px text
   */

  TabSize["Tall"] = "tall";
  /**
   * 40px tall with 17px text
   */

  TabSize["LargeLink"] = "large-link";
})(TabSize || (TabSize = {}));
/**
 * Defines the orientation of the child FocusZone and the flex orientation
 * of the list
 */


var Orientation;

(function (Orientation) {
  Orientation[Orientation["Horizontal"] = 0] = "Horizontal";
  Orientation[Orientation["Vertical"] = 1] = "Vertical";
})(Orientation || (Orientation = {}));
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Tabs/Tabs.css
var Tabs = __webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Tabs/Tabs.css");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Tabs/Tabs.css

      
      
      
      
      
      
      
      
      

var Tabs_options = {};

Tabs_options.styleTagTransform = (styleTagTransform_default());
Tabs_options.setAttributes = (setAttributesWithoutAttributes_default());

      Tabs_options.insert = insertBySelector_default().bind(null, "head");
    
Tabs_options.domAPI = (styleDomAPI_default());
Tabs_options.insertStyleElement = (insertStyleElement_default());

var Tabs_update = injectStylesIntoStyleTag_default()(Tabs/* default */.Z, Tabs_options);




       /* harmony default export */ const Tabs_Tabs = (Tabs/* default */.Z && Tabs/* default.locals */.Z.locals ? Tabs/* default.locals */.Z.locals : undefined);

// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Pill/Pill.css
var Pill = __webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/Pill/Pill.css");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Pill/Pill.css

      
      
      
      
      
      
      
      
      

var Pill_options = {};

Pill_options.styleTagTransform = (styleTagTransform_default());
Pill_options.setAttributes = (setAttributesWithoutAttributes_default());

      Pill_options.insert = insertBySelector_default().bind(null, "head");
    
Pill_options.domAPI = (styleDomAPI_default());
Pill_options.insertStyleElement = (insertStyleElement_default());

var Pill_update = injectStylesIntoStyleTag_default()(Pill/* default */.Z, Pill_options);




       /* harmony default export */ const Pill_Pill = (Pill/* default */.Z && Pill/* default.locals */.Z.locals ? Pill/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Core/Util/String.js
function prepareForComparison(value, upperCase) {
  return value ? upperCase ? value.toLocaleUpperCase() : value : "";
}

function comparer(a, b, ignoreCase) {
  // Optimization: if the strings are equal no need to convert and perform a locale compare.
  if (a === b) {
    return 0;
  }

  return prepareForComparison(a, ignoreCase).localeCompare(prepareForComparison(b, ignoreCase));
}
/**
 * String comparer (to use for sorting) which is case-sensitive
 *
 * @param a First string to compare
 * @param b Second string to compare
 */


function localeComparer(a, b) {
  return comparer(a, b, false);
}
/**
 * String comparer (to use for sorting) which is case-insensitive
 *
 * @param a First string to compare
 * @param b Second string to compare
 */

function localeIgnoreCaseComparer(a, b) {
  return comparer(a, b, true);
}
/**
 * Compares 2 strings for equality.
 *
 * @param a First string to compare
 * @param b Second string to compare
 * @param ignoreCase If true, do a case-insensitive comparison.
 */

function equals(a, b, ignoreCase) {
  if (ignoreCase) {
    return localeIgnoreCaseComparer(a, b) === 0;
  } else {
    return localeComparer(a, b) === 0;
  }
}
/**
 * Checks whether the given string starts with the specified prefix.
 *
 * @param str String to check
 * @param prefix Substring that the {str} argument must start with in order to return true
 * @param ignoreCase If true, do a case insensitive comparison
 */

function startsWith(str, prefix, ignoreCase) {
  var comparer = ignoreCase ? localeIgnoreCaseComparer : localeComparer;
  return comparer(prefix, str.substr(0, prefix.length)) === 0;
}
/**
 * Checks whether the given string ends with the specified suffix.
 *
 * @param str String to check
 * @param suffix Substring that the {str} argument must end with in order to return true
 * @param ignoreCase If true, do a case insensitive comparison
 */

function endsWith(str, suffix, ignoreCase) {
  var comparer = ignoreCase ? localeIgnoreCaseComparer : localeComparer;
  return comparer(suffix, str.substr(str.length - suffix.length, suffix.length)) === 0;
}
/**
 * Performs a case-insensitive contains operation
 *
 * @param str String to check if it contains {subStr}
 * @param subStr The string that the {str} argument must contain in order to return true
 */

function caseInsensitiveContains(str, subStr) {
  return str.toLocaleLowerCase().indexOf(subStr.toLocaleLowerCase()) !== -1;
}
/**
 * Generate a string using a format string and arguments.
 *
 * @param format Format string
 * @param args Arguments to use as replacements
 */

function format(format) {
  var args = [];

  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }

  return _stringFormat(false, format, args);
}
/**
 * Generate a string using a format string and arguments, using locale-aware argument replacements.
 *
 * @param format Format string
 * @param args Arguments to use as replacements
 */

function localeFormat(format) {
  var args = [];

  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }

  return _stringFormat(true, format, args);
}

function _stringFormat(useLocale, format, args) {
  var result = "";

  for (var i = 0;;) {
    var open_1 = format.indexOf("{", i);
    var close_1 = format.indexOf("}", i);

    if (open_1 < 0 && close_1 < 0) {
      result += format.slice(i);
      break;
    }

    if (close_1 > 0 && (close_1 < open_1 || open_1 < 0)) {
      if (format.charAt(close_1 + 1) !== "}") {
        throw new Error("The format string contains an unmatched opening or closing brace.");
      }

      result += format.slice(i, close_1 + 1);
      i = close_1 + 2;
      continue;
    }

    result += format.slice(i, open_1);
    i = open_1 + 1;

    if (format.charAt(i) === "{") {
      result += "{";
      i++;
      continue;
    }

    if (close_1 < 0) {
      throw new Error("The format string contains an unmatched opening or closing brace.");
    }

    var brace = format.substring(i, close_1);
    var colonIndex = brace.indexOf(":");
    var argNumber = parseInt(colonIndex < 0 ? brace : brace.substring(0, colonIndex), 10);

    if (isNaN(argNumber)) {
      throw new Error("The format string is invalid.");
    }

    var argFormat = colonIndex < 0 ? "" : brace.substring(colonIndex + 1);
    var arg = args[argNumber];

    if (typeof arg === "undefined" || arg === null) {
      arg = "";
    }

    if (arg.toFormattedString) {
      result += arg.toFormattedString(argFormat);
    } else if (arg instanceof Date) {
      result += dateToString(arg, useLocale);
    } else if (arg.format) {
      result += arg.format(argFormat);
    } else {
      result += arg.toString();
    }

    i = close_1 + 1;
  }

  return result;
}

var localeFormatters = "Intl" in window ? {
  date: new Intl.DateTimeFormat(),
  dateTime: new Intl.DateTimeFormat(undefined, {
    year: "numeric",
    month: "numeric",
    day: "numeric",
    hour: "numeric",
    minute: "numeric",
    second: "numeric"
  })
} : {};
/**
 * Converts a date to a string, optionally using the locale formatter
 *
 * @param value date to convert to a string
 * @param useLocale use the locale formatter when converting to a string
 */

function dateToString(value, useLocale) {
  var localeKey = typeof useLocale === "string" ? useLocale : "dateTime";

  if (useLocale) {
    var formatter = localeFormatters[localeKey];

    if (!formatter) {
      if (false) {} else {
        formatter = localeFormatters["dateTime"];
      }
    }

    return formatter.format(value);
  } else {
    return value.toString();
  }
}
/**
 * String representation of the empty guid
 */

var EmptyGuidString = "00000000-0000-0000-0000-000000000000";
/**
 * Is the given string in the format of a GUID
 *
 * @param str String to check
 */

function isGuid(str) {
  return /^\{?([\dA-F]{8})-?([\dA-F]{4})-?([\dA-F]{4})-?([\dA-F]{4})-?([\dA-F]{12})\}?$/i.test(str);
}
/**
 * Returns a GUID such as xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx.
 * @return New GUID.(UUID version 4 = xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx)
 * @notes Disclaimer: This implementation uses non-cryptographic random number generator so absolute uniqueness is not guarantee.
 */

function newGuid() {
  // c.f. rfc4122 (UUID version 4 = xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx)
  // "Set the two most significant bits (bits 6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively"
  var clockSequenceHi = (128 + Math.floor(Math.random() * 64)).toString(16);
  return oct(8) + "-" + oct(4) + "-4" + oct(3) + "-" + clockSequenceHi + oct(2) + "-" + oct(12);
}
var controlChars = /[\u0000-\u0008\u000B\u000C\u000E-\u001F\u007F-\u009F]/;
function containsControlChars(str) {
  return controlChars.test(str);
}
var surrogateChars = /(^[\uD800-\uDFFF]$)|[^\uD800-\uDBFF](?=[\uDC00-\uDFFF])|[\uD800-\uDBFF](?![\uDC00-\uDFFF])/;
function containsMismatchedSurrogateChars(str) {
  return surrogateChars.test(str);
}
/**
 * Generated non-zero octet sequences for use with GUID generation.
 *
 * @param length Length required.
 * @return Non-Zero hex sequences.
 */

function oct(length) {
  var result = "";

  for (var i = 0; i < length; i++) {
    result += Math.floor(Math.random() * 0x10).toString(16);
  }

  return result;
}
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Utilities/Color.js
function darken(color, darkenFactor) {
  var darkenMultiplier = 1 - darkenFactor;
  return {
    red: color.red * darkenMultiplier,
    green: color.green * darkenMultiplier,
    blue: color.blue * darkenMultiplier
  };
}
function getColorString(color) {
  return "rgb(" + color.red + ", " + color.green + ", " + color.blue + ")";
}
function isDark(color) {
  var luminance = color.red * 0.299 + color.green * 0.587 + color.blue * 0.114;
  return luminance <= 128;
}
function rgbToHex(color) {
  return ("#" + rgbValueToString(color.red) + rgbValueToString(color.green) + rgbValueToString(color.blue)).toUpperCase();
}
/**
 * Convert a hex color to numeric r g b value
 * @param color Color in format #aabbcc
 */

function hexToRgb(color) {
  if (color.length !== 7 || color[0] !== "#") {
    throw new Error("Expected color in format #AABBCC");
  }

  return {
    red: parseInt(color.substr(1, 2), 16),
    green: parseInt(color.substr(3, 2), 16),
    blue: parseInt(color.substr(5, 2), 16)
  };
}
function generateRandomColor() {
  var blue = Math.floor(Math.random() * 256);
  var green = Math.floor(Math.random() * 256);
  var red = Math.floor(Math.random() * 256);
  return {
    red: red,
    blue: blue,
    green: green
  };
}
function generateRandomColorHex() {
  return rgbToHex(generateRandomColor());
}
function parseColor(hexString) {
  if (!hexString) {
    return undefined;
  }

  var color = undefined;

  if (hexString.length === 7) {
    try {
      color = hexToRgb(hexString);
    } catch (ex) {
      console.log(ex); // swallow the exception
    }
  }

  return color;
}
var hexRegex = (/* unused pure expression or super */ null && (new RegExp("^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$")));
function testForHexString(hexString) {
  return hexString.match(hexRegex);
}

function rgbValueToString(colorCoord) {
  var hexColor = colorCoord.toString(16);

  if (hexColor.length === 1) {
    hexColor = "0" + hexColor;
  }

  return hexColor;
}
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Pill/Pill.Props.js
var PillSize;

(function (PillSize) {
  PillSize[PillSize["compact"] = 0] = "compact";
  PillSize[PillSize["regular"] = 1] = "regular";
  PillSize[PillSize["large"] = 2] = "large";
})(PillSize || (PillSize = {}));

var PillVariant;

(function (PillVariant) {
  PillVariant[PillVariant["standard"] = 0] = "standard";
  PillVariant[PillVariant["outlined"] = 1] = "outlined";
  PillVariant[PillVariant["colored"] = 2] = "colored";
})(PillVariant || (PillVariant = {}));
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Pill/Pill.js















var Pill_Pill_Pill =
/** @class */
function (_super) {
  __extends(Pill, _super);

  function Pill(props) {
    var _this = _super.call(this, props) || this;

    _this.getChildText = function () {
      var text = "";
      react.Children.map(_this.props.children, function (child) {
        if (typeof child === "string") {
          text += child;
        }
      });
      return text;
    };

    _this.onKeyDown = function (event) {
      var keyCode = event.which;

      if (keyCode === KeyCode.enter) {
        _this.props.onClick && _this.props.onClick();
      }
    };

    _this.onMouseEnter = function (event) {
      _this.props.onMouseEnter && _this.props.onMouseEnter(event);

      _this.setState({
        isHoveringPrimaryElement: true
      });
    };
    /**
     * onMouseLeaveButton fires first; if it leaves the container too
     * onMouseLeave will setState again, which will prevent weird behavior
     */


    _this.onMouseLeave = function (event) {
      _this.props.onMouseLeave && _this.props.onMouseLeave(event);

      _this.setState({
        isHoveringPrimaryElement: false
      });
    };

    _this.onMouseLeaveButton = function () {
      _this.setState({
        isHoveringPrimaryElement: true
      });
    };

    _this.onMouseOverButton = function () {
      _this.setState({
        isHoveringPrimaryElement: false
      });
    };

    _this.state = {
      isHoveringPrimaryElement: false
    };
    return _this;
  }

  Pill.getColorStyle = function (color, isHoveringPrimaryElement, onClick) {
    if (!color) {
      return undefined;
    }

    var renderColor = onClick && isHoveringPrimaryElement ? darken(color, 0.06) : color;
    return {
      backgroundColor: getColorString(renderColor)
    };
  };

  Pill.getSizeClass = function (size) {
    switch (size) {
      case PillSize.compact:
        return "compact";

      case PillSize.large:
        return "large";

      case PillSize.regular:
      default:
        return "regular";
    }
  };

  Pill.getVariantClass = function (variant, color) {
    switch (variant) {
      case PillVariant.outlined:
        return "outlined";

      case PillVariant.colored:
        if (color) {
          return Util_css("colored", isDark(color) ? "dark" : "light");
        } else {
          return "standard";
        }

      case PillVariant.standard:
      default:
        return "standard";
    }
  };

  Pill.getDerivedStateFromProps = function (props, state) {
    if (false) { var unsupportedFields, color, iconProps, onRenderFilledVisual, _a, size, variant; }

    return state;
  };

  Pill.prototype.render = function () {
    var _this = this;

    var _a = this.props,
        ariaHidden = _a.ariaHidden,
        contentClassName = _a.contentClassName,
        className = _a.className,
        color = _a.color,
        _b = _a.containsCount,
        containsCount = _b === void 0 ? false : _b,
        iconProps = _a.iconProps,
        id = _a.id,
        onClick = _a.onClick,
        onBlur = _a.onBlur,
        onFocus = _a.onFocus,
        onRemoveClick = _a.onRemoveClick,
        onRenderFilledVisual = _a.onRenderFilledVisual,
        _c = _a.size,
        size = _c === void 0 ? PillSize.regular : _c,
        _d = _a.variant,
        variant = _d === void 0 ? PillVariant.standard : _d;
    var isHoveringPrimaryElement = this.state.isHoveringPrimaryElement;
    var ariaLabel = this.props.ariaLabel || this.getChildText();
    return react.createElement(FocusZoneContext.Consumer, null, function (zoneContext) {
      return react.createElement("div", {
        className: Util_css(className, "bolt-pill flex-row flex-center", Pill.getVariantClass(variant, color), Pill.getSizeClass(size), containsCount && "count", isHoveringPrimaryElement && "hover", onClick && "clickable", onRenderFilledVisual && "has-filled-visual", iconProps && !onRenderFilledVisual && "has-icon", onRemoveClick && "has-remove-button"),
        id: getSafeId(id),
        onClick: onClick,
        onBlur: onBlur,
        onMouseEnter: _this.onMouseEnter,
        onMouseLeave: _this.onMouseLeave,
        style: Pill.getColorStyle(color, isHoveringPrimaryElement, onClick)
      }, onRenderFilledVisual && react.createElement("div", {
        className: "bolt-pill-filled-visual flex-noshrink"
      }, onRenderFilledVisual()), iconProps && !onRenderFilledVisual && react.createElement(Icon_Icon, tslib_es6_assign({}, iconProps, {
        className: Util_css(iconProps.className, "bolt-pill-icon")
      })), react.createElement("div", {
        "aria-label": ariaLabel,
        "aria-hidden": ariaHidden,
        className: Util_css(contentClassName, "bolt-pill-content text-ellipsis"),
        "data-focuszone": !_this.props.excludeFocusZone ? zoneContext.focuszoneId : undefined,
        onFocus: onFocus,
        onKeyDown: _this.onKeyDown,
        role: onClick ? "button" : "presentation",
        tabIndex: onClick || onFocus ? getTabIndex(_this.props) : undefined
      }, _this.props.children), onRemoveClick && react.createElement(Button_Button_Button, {
        ariaLabel: format(RemovePillLabel, ariaLabel),
        className: "bolt-pill-button",
        iconProps: {
          iconName: "Cancel",
          size: IconSize.inherit
        },
        onClick: onRemoveClick,
        onMouseLeave: _this.onMouseLeaveButton,
        onMouseOver: _this.onMouseOverButton,
        subtle: true,
        tooltipProps: {
          text: format(RemovePillLabel, ariaLabel)
        }
      }));
    });
  };

  return Pill;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Pill.js


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Tabs/TabBadge.js








var TabBadge = function (props) {
  var children = props.children,
      className = props.className,
      _a = props.containsCount,
      containsCount = _a === void 0 ? true : _a,
      tooltipProps = props.tooltipProps;
  var badge = react.createElement(Pill_Pill_Pill, {
    className: Util_css(className, "bolt-tab-badge"),
    containsCount: containsCount,
    size: PillSize.compact,
    contentClassName: "text-ellipsis",
    excludeFocusZone: true,
    excludeTabStop: true
  }, children);

  if (tooltipProps) {
    badge = react.createElement(Tooltip_Tooltip, tslib_es6_assign({}, tooltipProps), badge);
  }

  return badge;
};
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Utilities/FriendlyNumber.js


/**
 * Gets a friendly display value like "15K+" for a given numerical
 * value like 15217.
 *
 * @param value The numerical value to convert to a friendlier text string
 */

function getFriendlyDisplayValue(value) {
  var displayValue = "";
  var negative = false;

  if (isNaN(value)) {
    return "";
  }

  if (value < 0) {
    negative = true;
    value = -value;
  }

  value = Math.floor(value);

  if (value < 1000) {
    displayValue = value.toString();
  } else if (value < 1000000) {
    displayValue = format(FriendlyNumberThousandsFormat, Math.floor(value / 1000));
  } else if (value < 1000000000) {
    displayValue = format(FriendlyNumberMillionsFormat, Math.floor(value / 1000000));
  } else {
    displayValue = format(FriendlyNumberBillionsFormat, Math.floor(value / 1000000000));
  }

  return (negative && value > 0 ? "-" : "") + displayValue;
}
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Tabs/Tab.js













/**
 * Presentational component that represents a single tab.
 */

var Tab =
/** @class */
function (_super) {
  __extends(Tab, _super);

  function Tab() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.onClick = function (event) {
      var url = _this.props.url;
      var updatePivot = true; // If ctrl-click is pressed, and there is a URL specified for this item, then
      // don't handle the click here, allowing the browser to perform a navigation
      // (i.e. open in a new tab/window)

      if (event.ctrlKey) {
        if (url) {
          updatePivot = false;
        }
      }

      if (updatePivot) {
        event.preventDefault();

        _this.updateSelectedItem(event);
      }
    };

    _this.onKeyDown = function (event) {
      if (!event.defaultPrevented) {
        if (event.which === KeyCode.space || event.which === KeyCode.enter) {
          event.preventDefault();

          _this.updateSelectedItem(event);
        }
      }
    };

    return _this;
  }

  Tab.prototype.render = function () {
    var _this = this;

    var _a = this.props,
        ariaLabel = _a.ariaLabel,
        index = _a.index,
        setSize = _a.setSize,
        iconProps = _a.iconProps,
        id = _a.id,
        isSelected = _a.isSelected,
        renderBadge = _a.renderBadge,
        url = _a.url;
    var TagName = url ? "a" : "div";
    return react.createElement(Observer, {
      name: this.props.name,
      badgeCount: this.props.badgeCount
    }, function (props) {
      var name = props.name;
      return react.createElement(FocusGroupContext.Consumer, null, function (focusGroupContext) {
        return react.createElement(FocusZoneContext.Consumer, null, function (zoneContext) {
          var badge = renderBadge ? renderBadge() : _this.renderBadge(props.badgeCount);
          var icon = iconProps !== undefined && Icon_Icon(tslib_es6_assign({
            className: "bolt-tab-icon"
          }, iconProps));
          var text = name && react.createElement("span", {
            className: "bolt-tab-text",
            "data-content": name
          }, name);
          var tooltipProps = icon && !name && ariaLabel ? {
            text: ariaLabel,
            overflowOnly: false
          } : {
            text: name,
            overflowDetected: Tab_overflowDetected,
            overflowOnly: true
          };
          return react.createElement(Tooltip_Tooltip, tslib_es6_assign({}, tooltipProps), react.createElement(TagName, {
            "aria-label": ariaLabel,
            "aria-posinset": index !== undefined ? index + 1 : undefined,
            "aria-selected": isSelected,
            "aria-setsize": setSize,
            className: Util_css(_this.props.className, "bolt-tab focus-treatment flex-noshrink", isSelected && "selected"),
            "data-focuszone": zoneContext.focuszoneId,
            href: url,
            id: getSafeId("tab-" + id),
            key: id,
            onClick: _this.onClick,
            onKeyDown: _this.onKeyDown,
            role: "tab",
            tabIndex: focusGroupContext.focusedElementId === "tab-" + id ? 0 : -1
          }, react.createElement("span", {
            className: "bolt-tab-inner-container"
          }, icon, text, badge)));
        });
      });
    });
  };

  Tab.prototype.renderBadge = function (badgeCount) {
    var badgeDisplayValue = badgeCount !== undefined ? getFriendlyDisplayValue(badgeCount) : undefined;
    var badgeTooltip = undefined;

    if (badgeCount && badgeDisplayValue !== badgeCount.toString()) {
      badgeTooltip = badgeCount.toString();
    }

    var badge = null;

    if (badgeDisplayValue) {
      var tooltipProps = badgeTooltip ? {
        text: badgeTooltip
      } : undefined;
      badge = react.createElement(TabBadge, {
        tooltipProps: tooltipProps
      }, badgeDisplayValue);
    }

    return badge;
  };
  /**
   * Updates the state with the new selected pivot.
   */


  Tab.prototype.updateSelectedItem = function (ev) {
    var onClick = this.props.onClick;

    if (ev && this.props.onBeforeTabChange && !this.props.onBeforeTabChange(ev, this.props.id, this.props.url)) {
      ev.preventDefault();
      return;
    } // Update notifiers


    if (onClick) {
      onClick(this.props.id);
    }
  };

  return Tab;
}(react.Component);



function Tab_overflowDetected(anchorElement) {
  var overflowElement = anchorElement.querySelector(".bolt-tab-text");

  if (overflowElement) {
    return overflowElement && overflowElement.scrollWidth > Math.ceil(overflowElement.offsetWidth);
  }

  return false;
}
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Tabs/TabProviderContext.js






var TabProviderContext = react.createContext({
  selectedId: undefined,
  tabs: [],
  commandBarItems: [],
  renderContent: undefined,
  renderFilterBar: undefined
});

var TabProvider =
/** @class */
function (_super) {
  __extends(TabProvider, _super);

  function TabProvider() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TabProvider.prototype.render = function () {
    var _this = this;

    return react.createElement(Observer, {
      selectedTabId: this.props.selectedTabId,
      tabs: this.props.providers
    }, function (props) {
      var selectedTabId = props.selectedTabId;
      var selectedTab = undefined;

      var tabs = tslib_es6_spreadArrays(props.tabs.sort(function (a, b) {
        return (a.order || 100) - (b.order || 100);
      }));

      tabs.forEach(function (tab) {
        if (tab.id === selectedTabId) {
          selectedTab = tab;
        }
      });

      if (selectedTab === undefined) {
        selectedTab = {
          id: selectedTabId,
          name: undefined,
          render: undefined
        };
      }

      return react.createElement(TabProviderContext.Provider, {
        value: {
          selectedId: selectedTab.id,
          tabs: tabs,
          commandBarItems: selectedTab.commandBarItems,
          renderContent: selectedTab.render,
          renderFilterBar: selectedTab.renderFilterBar
        }
      }, _this.props.children);
    });
  };

  return TabProvider;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Tabs/Tabs.js










/**
 * Renders all children as focusable, selectable elements and indicates whether or not they are
 * currently selected.
 */

var Tabs_Tabs_Tabs =
/** @class */
function (_super) {
  __extends(Tabs, _super);

  function Tabs(props) {
    var _this = _super.call(this, props) || this;

    _this.onTabClick = function (newTabId) {
      var onSelectedTabChanged = _this.props.onSelectedTabChanged;

      if (onSelectedTabChanged) {
        onSelectedTabChanged(newTabId);
      }
    };

    _this.onSelectedTabIdChanged = function () {
      _this.forceUpdate();
    };

    if (ObservableLike.isObservable(props.selectedTabId)) {
      props.selectedTabId.subscribe(_this.onSelectedTabIdChanged);
    }

    return _this;
  }

  Tabs.prototype.componentWillUnmount = function () {
    if (ObservableLike.isObservable(this.props.selectedTabId)) {
      this.props.selectedTabId.unsubscribe(this.onSelectedTabIdChanged);
    }
  };

  Tabs.prototype.render = function () {
    var _this = this;

    var _a = this.props,
        _b = _a.tabSize,
        tabSize = _b === void 0 ? TabSize.Tall : _b,
        _c = _a.orientation,
        orientation = _c === void 0 ? Orientation.Horizontal : _c;
    var selectedTabId = this.props.selectedTabId && ObservableLike.getValue(this.props.selectedTabId);
    var childrenCount = 0;
    var childIndex = 0;
    var idToIndex = {};
    var defaultId;
    react.Children.map(this.props.children, function (child) {
      if (child && child.type === Tab) {
        idToIndex[child.props.id] = childIndex++;
        childrenCount++;

        if (!defaultId && child.props.id) {
          defaultId = "tab-" + child.props.id;
        }
      }
    });
    var children = react.Children.map(this.props.children, function (child) {
      if (child && typeof child.type !== "string") {
        // We don't want to pass along the following props, unless the
        // child is a React component that will presumably know what
        // to do with them.
        var isSelected = (child.props.id && child.props.id.toLocaleLowerCase()) === (selectedTabId && selectedTabId.toLocaleLowerCase());
        var onClick = _this.onTabClick;
        return react.cloneElement(child, tslib_es6_assign(tslib_es6_assign({}, child.props), {
          isSelected: isSelected,
          onClick: onClick,
          index: idToIndex[child.props.id],
          setSize: childrenCount
        }));
      }

      return child;
    });
    var orientationClass = orientation === Orientation.Vertical ? "flex-column" : "flex-row";
    var focusZoneDirection = orientation === Orientation.Vertical ? FocusZoneDirection.Vertical : FocusZoneDirection.Horizontal;
    return react.createElement(FocusZone, {
      direction: focusZoneDirection,
      focusGroupProps: {
        defaultElementId: defaultId
      }
    }, react.createElement("div", {
      "aria-label": this.props.ariaLabel,
      className: Util_css(this.props.className, "bolt-tabs", orientationClass, tabSize),
      role: "tablist"
    }, children));
  };

  return Tabs;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Tabs/TabBar.js













/**
 * Renders tabs (provided as children or through a tab provider context) as well as addtional
 * content such as in-line filters, view options, etc.
 *
 * Tabs provided directly as children will always be place before contributed tabs.
 */

var TabBar =
/** @class */
function (_super) {
  __extends(TabBar, _super);

  function TabBar() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.renderAdditionalContent = function (renderFilterBar) {
      if (renderFilterBar) {
        return renderFilterBar(true);
      }

      return _this.props.renderAdditionalContent && _this.props.renderAdditionalContent();
    };

    _this.createTab = function (tab) {
      return react.createElement(Tab, {
        ariaLabel: tab.ariaLabel,
        badgeCount: tab.badgeCount,
        className: tab.className,
        key: tab.id,
        iconProps: tab.iconProps,
        id: tab.id,
        name: tab.name,
        onBeforeTabChange: tab.onBeforeTabChange,
        url: tab.url && ObservableLike.getValue(tab.url),
        renderBadge: tab.renderBadge
      });
    };

    return _this;
  }

  TabBar.prototype.render = function () {
    var _this = this;

    return react.createElement(Observer, {
      size: this.context.size
    }, function (props) {
      // If the screen is really small (mobile) then we don't let tabbar grow and let its container
      // to scroll in overflow case. Instead, we enable horizontal scrolling for tabs only.
      var smallScreen = props.size === ScreenSize.xsmall;
      return react.createElement(SurfaceContext.Consumer, null, function (surfaceContext) {
        return react.createElement(TabProviderContext.Consumer, null, function (tabProviderContext) {
          var selectedTabId = _this.props.selectedTabId || tabProviderContext.selectedId;
          return react.createElement("div", {
            className: Util_css(_this.props.className, "bolt-tabbar flex-row flex-center flex-noshrink", !_this.props.disableSticky && props.size >= ScreenSize.small && "sticky", surfaceContext.background === SurfaceBackground.neutral && "bolt-tabbar-grey", surfaceContext.background === SurfaceBackground.callout && "bolt-tabbar-on-callout")
          }, react.createElement(Tabs_Tabs_Tabs, tslib_es6_assign({
            selectedTabId: selectedTabId
          }, _this.props, {
            className: Util_css(_this.props.tabsClassName, "bolt-tabbar-tabs flex-grow", !smallScreen && "flex-noshrink", smallScreen && "flex-wrap")
          }), _this.props.children, tabProviderContext.tabs.map(_this.createTab)), _this.renderAdditionalContent(tabProviderContext.renderFilterBar));
        });
      });
    });
  };

  TabBar.contextType = ScreenContext;
  return TabBar;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Tabs/TabGroupProviderContext.js






var TabGroupProviderContext = react.createContext({
  groups: []
});

var TabGroupProvider =
/** @class */
function (_super) {
  __extends(TabGroupProvider, _super);

  function TabGroupProvider() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TabGroupProvider.prototype.render = function () {
    var _this = this;

    return react.createElement(Observer, {
      groups: this.props.providers
    }, function (props) {
      var groups = props.groups.sort(function (a, b) {
        return (a.order || 100) - (b.order || 100);
      });
      return react.createElement(TabGroupProviderContext.Provider, {
        value: {
          groups: groups
        }
      }, _this.props.children);
    });
  };

  return TabGroupProvider;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Tabs/TabList.js













var TabList =
/** @class */
function (_super) {
  __extends(TabList, _super);

  function TabList(props) {
    var _this = _super.call(this, props) || this;

    _this.generateGroupMap = function (groups) {
      if (!groups) {
        return {};
      }

      var map = {};
      groups.forEach(function (group) {
        map[group.id] = group;
      });
      return map;
    };

    _this.processChildren = function (groups) {
      var childGroups = {};
      react.Children.forEach(_this.props.children, function (child) {
        if (child) {
          var groupId = child.props.groupId || "";

          if (!childGroups[groupId]) {
            childGroups[groupId] = {
              items: [child],
              groupProps: groups[groupId] || {
                id: "",
                name: "",
                order: -1
              }
            };
          } else {
            childGroups[groupId].items.push(child);
          }
        }
      });
      return childGroups;
    };

    _this.processContributions = function (tabs, baseGroups, childGroups) {
      tabs.forEach(function (tab) {
        var mappedTab = _this.createRow(tab);

        var groupId = tab.groupId || "";

        if (!childGroups[groupId]) {
          childGroups[groupId] = {
            items: [mappedTab],
            groupProps: baseGroups[groupId] || {
              id: "",
              name: "",
              order: -1
            }
          };
        } else {
          childGroups[groupId].items.push(mappedTab);
        }
      });
      return childGroups;
    };

    _this.processGroups = function (groups) {
      var elements = []; // Flattening to allow for sort

      var flatMappedGroups = [];

      for (var groupId in groups) {
        flatMappedGroups.push(groups[groupId]);
      }

      flatMappedGroups.sort(function (a, b) {
        return (a.groupProps.order || 1000) - (b.groupProps.order || 1000);
      }).forEach(function (group) {
        group.groupProps.name && elements.push(react.createElement("div", {
          key: group.groupProps.name,
          className: "bolt-tablist-heading title-xs flex-noshrink"
        }, group.groupProps.name));
        elements.push.apply(elements, group.items);
      });
      return elements;
    };

    _this.createRow = function (tab) {
      return react.createElement(Tab, {
        key: tab.id,
        id: tab.id,
        name: tab.name,
        url: tab.url && ObservableLike.getValue(tab.url),
        onBeforeTabChange: tab.onBeforeTabChange,
        iconProps: tab.iconProps
      });
    };

    _this.renderTitle = function (header) {
      return react.createElement("div", {
        className: "bolt-tablist-title title-m flex-noshrink"
      }, header);
    };

    _this.renderSubTitle = function (header) {
      return react.createElement("div", {
        className: "bolt-tablist-subtitle secondary-text flex-noshrink text-ellipsis"
      }, header);
    };

    _this.onSelectedTabIdChanged = function () {
      _this.forceUpdate();
    };

    return _this;
  }

  TabList.prototype.render = function () {
    var _this = this;

    return react.createElement(TabGroupProviderContext.Consumer, null, function (provider) {
      var _a = _this.props,
          className = _a.className,
          tabGroups = _a.tabGroups;
      var mergedGroups = tabGroups ? tabGroups.concat(provider.groups) : provider.groups;

      var groupMap = _this.generateGroupMap(mergedGroups);

      return react.createElement(TabProviderContext.Consumer, null, function (provider) {
        var selectedTabId = _this.props.selectedTabId || provider.selectedId;

        var tabGroups = _this.processContributions(provider.tabs, groupMap, _this.processChildren(groupMap));

        var trueChildren = _this.processGroups(tabGroups);

        return react.createElement("div", {
          className: Util_css(className, "bolt-tablist flex-column")
        }, _this.props.listTitle && _this.renderTitle(_this.props.listTitle), _this.props.listSubTitle && _this.renderSubTitle(_this.props.listSubTitle), react.createElement(Tabs_Tabs_Tabs, tslib_es6_assign({
          ariaLabel: _this.props.listTitle,
          selectedTabId: selectedTabId
        }, _this.props, {
          className: "bolt-tablist-tabs",
          orientation: Orientation.Vertical
        }), trueChildren));
      });
    });
  };

  return TabList;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Tabs/TabContent.js







/**
 * Hooks into tab provider context to render the tab's provided content, as well
 * as optionally the a filter bar if it is to be rendered outside of the TabBar.
 */

var TabContent =
/** @class */
function (_super) {
  __extends(TabContent, _super);

  function TabContent() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TabContent.prototype.render = function () {
    var _this = this;

    return react.createElement(TabProviderContext.Consumer, null, function (tabProviderContext) {
      var content;

      if (tabProviderContext.renderContent) {
        var filterBar = tabProviderContext.renderFilterBar && tabProviderContext.renderFilterBar(false);
        content = react.createElement(react.Fragment, null, filterBar, tabProviderContext.renderContent());
      } else {
        content = react.createElement(react.Fragment, null, _this.props.children);
      }

      return react.createElement(TabProvider, {
        providers: new ObservableArray([]),
        selectedTabId: tabProviderContext.selectedId || ""
      }, content);
    });
  };

  return TabContent;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Tabs.js









;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Utilities/ScreenSize.js



var ScreenSizeObserver = function (props) {
  return react.createElement(ScreenContext.Consumer, null, function (screen) {
    return react.createElement(Observer, {
      screenSize: screen.size
    }, props.children);
  });
};
/**
 * Conditionally renders children based on screen size.
 */

var ScreenSizeConditional = function (props) {
  return React.createElement(ScreenSizeObserver, null, function (screenSizeProps) {
    return props.condition(screenSizeProps.screenSize) && props.children;
  });
};
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Header/HeaderBackButton.js











function HeaderBackButton(props) {
  var buttonProps = props.buttonProps;
  return react.createElement(ScreenSizeObserver, null, function (screenSizeProps) {
    var smallScreen = screenSizeProps.screenSize === ScreenSize.xsmall;
    return react.createElement(Button_Button_Button, tslib_es6_assign({
      ariaLabel: Back,
      iconProps: {
        iconName: "Back",
        size: smallScreen ? IconSize.small : undefined
      },
      subtle: true
    }, buttonProps, {
      text: smallScreen ? buttonProps.text ? buttonProps.text : Back : undefined,
      className: Util_css(buttonProps.className, "bolt-header-back-button justify-end")
    }));
  });
}
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Header/HeaderDescription.js







var HeaderDescription =
/** @class */
function (_super) {
  __extends(HeaderDescription, _super);

  function HeaderDescription() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  HeaderDescription.prototype.render = function () {
    return react.createElement("div", {
      className: Util_css(this.props.className, "bolt-header-description body-m secondary-text"),
      id: getSafeId(this.props.id)
    }, this.props.children);
  };

  return HeaderDescription;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Header/Header.Props.js
var TitleSize;

(function (TitleSize) {
  TitleSize[TitleSize["Medium"] = 0] = "Medium";
  TitleSize[TitleSize["Large"] = 1] = "Large";
  TitleSize[TitleSize["Small"] = 2] = "Small";
})(TitleSize || (TitleSize = {}));
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Header/HeaderIcon.js









var HeaderIcon =
/** @class */
function (_super) {
  __extends(HeaderIcon, _super);

  function HeaderIcon() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  HeaderIcon.prototype.render = function () {
    var titleSizeClass = undefined;

    switch (this.props.titleSize) {
      case TitleSize.Large:
        titleSizeClass = "l";
        break;

      case TitleSize.Small:
        titleSizeClass = "s";
        break;

      case TitleSize.Medium:
      default:
        titleSizeClass = "m";
    }

    return react.createElement("div", {
      className: Util_css(this.props.className, "bolt-header-icon", titleSizeClass)
    }, Icon_Icon(this.props.iconProps));
  };

  return HeaderIcon;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Header/HeaderTitle.js







function HeaderTitle(props) {
  var _a = props.ariaLevel,
      ariaLevel = _a === void 0 ? 1 : _a,
      id = props.id;
  var titleSizeClass = undefined;

  switch (props.titleSize) {
    case TitleSize.Large:
      titleSizeClass = "title-m l";
      break;

    case TitleSize.Small:
      titleSizeClass = "title-xs s";
      break;

    case TitleSize.Medium:
    default:
      titleSizeClass = "body-xl m";
  }

  return react.createElement(Tooltip_Tooltip, {
    overflowOnly: true
  }, react.createElement("div", {
    "aria-level": ariaLevel,
    className: Util_css(props.className, "bolt-header-title", titleSizeClass),
    id: getSafeId(id),
    role: "heading"
  }, props.children));
}
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Header/HeaderTitleArea.js







var HeaderTitleArea =
/** @class */
function (_super) {
  __extends(HeaderTitleArea, _super);

  function HeaderTitleArea() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  HeaderTitleArea.prototype.render = function () {
    return react.createElement("div", {
      className: Util_css(this.props.className, "bolt-header-title-area flex-column flex-grow scroll-hidden")
    }, this.props.children);
  };

  return HeaderTitleArea;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Header/HeaderTitleRow.js







var HeaderTitleRow =
/** @class */
function (_super) {
  __extends(HeaderTitleRow, _super);

  function HeaderTitleRow() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  HeaderTitleRow.prototype.render = function () {
    return react.createElement("div", {
      className: Util_css(this.props.className, "bolt-header-title-row flex-row flex-baseline")
    }, this.props.children);
  };

  return HeaderTitleRow;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Header/Header.js



















var Header_Header_Header =
/** @class */
function (_super) {
  __extends(Header, _super);

  function Header(props) {
    var _this = _super.call(this, props) || this;

    _this.breakpointIndex = 0;
    _this.headerCommandBarRef = react.createRef();

    _this.onBreakPoint = function (index, breakpoint) {
      _this.breakpointIndex = index; // This is making sure that command bar items are made visible after getting notified
      // for the exact breakpoint. Otherwise, there is flickering from default to current breakpoint.
      // If there are no breakpoints specified, actions are rendered at first place.

      _this.commandBarClassName.value = Util_css(_this.props.commandBarClassName, "flex-self-start");
    };

    _this.commandBarClassName = new ObservableValue(Util_css(props.commandBarClassName, "flex-self-start", !!props.headerBreakpoints && "invisible"));
    return _this;
  }

  Header.prototype.render = function () {
    var _this = this;

    return react.createElement(TabProviderContext.Consumer, null, function (tabProviderContext) {
      var _a = _this.props,
          backButtonProps = _a.backButtonProps,
          buttonCount = _a.buttonCount,
          className = _a.className,
          contentClassName = _a.contentClassName,
          commandBarMoreButtonId = _a.commandBarMoreButtonId,
          description = _a.description,
          descriptionClassName = _a.descriptionClassName,
          descriptionId = _a.descriptionId,
          headerBreakpoints = _a.headerBreakpoints,
          title = _a.title,
          titleAriaLevel = _a.titleAriaLevel,
          titleClassName = _a.titleClassName,
          titleIconProps = _a.titleIconProps,
          titleId = _a.titleId,
          titleSize = _a.titleSize,
          useAriaLabelForOverflow = _a.useAriaLabelForOverflow;
      var commandBarItems = _this.props.commandBarItems || tabProviderContext.commandBarItems;
      var commandBarComponent = undefined;

      if (commandBarItems) {
        commandBarComponent = react.createElement(Observer, {
          items: commandBarItems,
          className: _this.commandBarClassName
        }, function (props) {
          return react.createElement(HeaderCommandBar_HeaderCommandBar_HeaderCommandBar, {
            buttonCount: buttonCount,
            className: props.className,
            items: _this.getUpdatedCommandBarItems(props.items),
            moreButtonId: commandBarMoreButtonId,
            ref: _this.headerCommandBarRef,
            useAriaLabelForOverflow: useAriaLabelForOverflow
          });
        });
      }

      return react.createElement(react.Fragment, null, headerBreakpoints && react.createElement(Breakpoint_Breakpoint_Breakpoint, {
        breakpoints: headerBreakpoints.map(function (hbp) {
          return hbp.breakpoint;
        }),
        onBreakpoint: _this.onBreakPoint
      }), react.createElement(CustomHeader, {
        className: Util_css(className, commandBarItems && commandBarItems.length > 0 && "bolt-header-with-commandbar", backButtonProps && "bolt-header-with-back-button"),
        separator: _this.props.separator
      }, backButtonProps && react.createElement(HeaderBackButton, {
        buttonProps: backButtonProps
      }), react.createElement("div", {
        className: Util_css(contentClassName, "bolt-header-content-area flex-row flex-grow flex-self-stretch")
      }, titleIconProps && react.createElement(HeaderIcon, {
        iconProps: titleIconProps,
        titleSize: titleSize
      }), react.createElement(HeaderTitleArea, null, react.createElement(HeaderTitleRow, null, title && react.createElement(HeaderTitle, {
        ariaLevel: titleAriaLevel,
        className: titleClassName,
        id: titleId,
        titleSize: titleSize
      }, title)), description && react.createElement(HeaderDescription, {
        className: descriptionClassName,
        id: descriptionId
      }, description), _this.props.children), commandBarComponent)));
    });
  };

  Header.prototype.focus = function (options) {
    if (this.headerCommandBarRef.current) {
      this.headerCommandBarRef.current.focus(options);
    }
  };

  Header.prototype.getUpdatedCommandBarItems = function (sourceCommandBarItems) {
    var headerBreakpoints = this.props.headerBreakpoints;
    var breakpoint = headerBreakpoints ? headerBreakpoints[Math.max(0, this.breakpointIndex)] : null;

    if (breakpoint) {
      var _a = breakpoint.commandBarItems,
          commandBarItems = _a === void 0 ? [] : _a; // Update if there are actions changing their look for this breakpoint

      if (commandBarItems.length > 0) {
        // Convert actions to a map to access later quickly
        var commandBarItemsMap_1 = {};
        commandBarItems.forEach(function (item) {
          return commandBarItemsMap_1[item.id] = item;
        });
        var targetCommandBarItems = [];

        for (var _i = 0, sourceCommandBarItems_1 = sourceCommandBarItems; _i < sourceCommandBarItems_1.length; _i++) {
          var commandBarItem = sourceCommandBarItems_1[_i];
          var changedItem = commandBarItemsMap_1[commandBarItem.id];

          if (changedItem) {
            // Update command bar item with the specified properties
            targetCommandBarItems.push(tslib_es6_assign(tslib_es6_assign({}, commandBarItem), changedItem));
          } else {
            // If there is no change requested, use the same item
            targetCommandBarItems.push(tslib_es6_assign({}, commandBarItem));
          }
        }

        return targetCommandBarItems;
      }
    }

    return sourceCommandBarItems;
  };

  return Header;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Header.js









;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Panel/PanelHeader.js








var closeButtonId = 1;
var PanelHeader = function (props) {
  var backButtonProps = props.backButtonProps,
      description = props.description,
      onDismiss = props.onDismiss,
      closeButtonSize = props.closeButtonSize,
      showCloseButton = props.showCloseButton,
      showSeparator = props.showSeparator,
      _a = props.titleProps,
      titleProps = _a === void 0 ? {} : _a;

  if (props.children) {
    return react.createElement(react.Fragment, null, react.createElement("div", {
      className: Util_css(props.className, "bolt-panel-header flex-noshrink flex-column scroll-hidden")
    }, props.children), showSeparator && react.createElement("div", {
      className: "bolt-panel-separator flex-noshrink"
    }));
  }

  var commandBarItems = [];

  if (showCloseButton !== false) {
    commandBarItems.push({
      ariaLabel: Close,
      iconProps: {
        iconName: closeButtonSize === Panel_Props_PanelCloseButtonSize.small ? "Cancel" : "Clear"
      },
      id: "close-button-" + closeButtonId++,
      role: "button",
      onActivate: onDismiss,
      subtle: true
    });
  }

  return react.createElement(Header_Header_Header, {
    backButtonProps: backButtonProps,
    className: Util_css(props.className, "bolt-panel-header"),
    commandBarItems: commandBarItems,
    description: description,
    separator: showSeparator,
    title: titleProps.text,
    titleClassName: titleProps.className,
    titleId: titleProps.id,
    titleSize: titleProps.size === undefined ? TitleSize.Large : titleProps.size,
    titleIconProps: titleProps.iconProps
  });
};
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Panel/PanelOverlay.js




var PanelOverlay = function (props) {
  return react.createElement(react.Fragment, null, react.createElement("div", {
    className: "absolute-fill bolt-panel-overlay sub-layer"
  }), react.createElement("div", {
    className: "absolute-fill flex-column flex-center justify-center sub-layer"
  }, props.overlayContent));
};
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Panel/Panel.js










var panelId = 1;

var Panel_Panel_Panel =
/** @class */
function (_super) {
  __extends(Panel, _super);

  function Panel() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.customPanelRef = react.createRef();
    _this.panelId = "panel-" + panelId++;
    return _this;
  }

  Panel.prototype.render = function () {
    var props = this.props;
    var backButtonProps = props.backButtonProps,
        description = props.description,
        footerButtonProps = props.footerButtonProps,
        onDismiss = props.onDismiss,
        overlayContent = props.overlayContent,
        showSeparator = props.showSeparator,
        _a = props.titleProps,
        titleProps = _a === void 0 ? {} : _a;
    var id = props.id || this.panelId;
    var titleId = titleProps.id ? titleProps.id : titleProps.text ? id + "-title" : undefined;
    return react.createElement(CustomPanel, tslib_es6_assign({
      ariaLabelledBy: titleId
    }, props, {
      id: id,
      lightDismiss: overlayContent ? false : props.lightDismiss,
      ref: this.customPanelRef
    }), react.createElement(PanelHeader, {
      backButtonProps: backButtonProps,
      description: description,
      onDismiss: onDismiss,
      showSeparator: showSeparator,
      titleProps: tslib_es6_assign({
        id: titleId
      }, titleProps)
    }), react.createElement(PanelContent, {
      className: props.contentClassName
    }, props.children), footerButtonProps && react.createElement(PanelFooter, {
      showSeparator: showSeparator,
      buttonProps: footerButtonProps
    }), overlayContent && react.createElement(PanelOverlay, {
      overlayContent: overlayContent
    }));
  };

  Panel.prototype.animateOut = function () {
    return this.customPanelRef.current ? this.customPanelRef.current.animateOut() : Promise.resolve();
  };

  return Panel;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/Panel/PanelCloseButton.js








var PanelCloseButton = function (props) {
  return React.createElement(Button, {
    className: css(props.className, "close-button"),
    ariaLabel: Resources.Close,
    iconProps: {
      iconName: props.size === PanelCloseButtonSize.small ? "Cancel" : "Clear"
    },
    onClick: props.onDismiss,
    subtle: true,
    tooltipProps: {
      showOnFocus: true,
      text: Resources.Close
    }
  });
};
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Panel.js








// EXTERNAL MODULE: ./node_modules/lodash/pick.js
var pick = __webpack_require__("./node_modules/lodash/pick.js");
var pick_default = /*#__PURE__*/__webpack_require__.n(pick);
// EXTERNAL MODULE: ./node_modules/lodash/get.js
var get = __webpack_require__("./node_modules/lodash/get.js");
var get_default = /*#__PURE__*/__webpack_require__.n(get);
// EXTERNAL MODULE: ./node_modules/lodash/isEmpty.js
var isEmpty = __webpack_require__("./node_modules/lodash/isEmpty.js");
var isEmpty_default = /*#__PURE__*/__webpack_require__.n(isEmpty);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/ErrorList.js

function ErrorList(props) {
  var errors = props.errors;
  return react.createElement("div", {
    className: "panel panel-danger errors"
  }, react.createElement("div", {
    className: "panel-heading"
  }, react.createElement("h3", {
    className: "panel-title"
  }, "Errors")), react.createElement("ul", {
    className: "list-group"
  }, errors.map(function (error, i) {
    return react.createElement("li", {
      key: i,
      className: "list-group-item text-danger"
    }, error.stack);
  })));
}
// EXTERNAL MODULE: ./node_modules/react-is/index.js
var react_is = __webpack_require__("./node_modules/react-is/index.js");
// EXTERNAL MODULE: ./node_modules/json-schema-merge-allof/src/index.js
var src = __webpack_require__("./node_modules/json-schema-merge-allof/src/index.js");
var src_default = /*#__PURE__*/__webpack_require__.n(src);
// EXTERNAL MODULE: ./node_modules/core-js-pure/features/array/fill.js
var fill = __webpack_require__("./node_modules/core-js-pure/features/array/fill.js");
var fill_default = /*#__PURE__*/__webpack_require__.n(fill);
// EXTERNAL MODULE: ./node_modules/lodash/union.js
var union = __webpack_require__("./node_modules/lodash/union.js");
var union_default = /*#__PURE__*/__webpack_require__.n(union);
// EXTERNAL MODULE: ./node_modules/jsonpointer/jsonpointer.js
var jsonpointer = __webpack_require__("./node_modules/jsonpointer/jsonpointer.js");
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/IconButton.js
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}


function IconButton(props) {
  var _props$type = props.type,
      type = _props$type === void 0 ? "default" : _props$type,
      icon = props.icon,
      className = props.className,
      otherProps = _objectWithoutProperties(props, ["type", "icon", "className"]);

  return react.createElement("button", _extends({
    type: "button",
    className: "btn btn-".concat(type, " ").concat(className)
  }, otherProps), react.createElement("i", {
    className: "glyphicon glyphicon-".concat(icon)
  }));
}
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/AddButton.js


function AddButton(_ref) {
  var className = _ref.className,
      onClick = _ref.onClick,
      disabled = _ref.disabled;
  return react.createElement("div", {
    className: "row"
  }, react.createElement("p", {
    className: "col-xs-3 col-xs-offset-9 text-right ".concat(className)
  }, react.createElement(IconButton, {
    type: "info",
    icon: "plus",
    className: "btn-add col-xs-12",
    "aria-label": "Add",
    tabIndex: "0",
    onClick: onClick,
    disabled: disabled
  })));
}
// EXTERNAL MODULE: ./node_modules/core-js-pure/es/array/includes.js
var includes = __webpack_require__("./node_modules/core-js-pure/es/array/includes.js");
var includes_default = /*#__PURE__*/__webpack_require__.n(includes);
// EXTERNAL MODULE: ./node_modules/prop-types/index.js
var prop_types = __webpack_require__("./node_modules/prop-types/index.js");
var prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/types.js

var registry = prop_types_default().shape({
  ArrayFieldTemplate: (prop_types_default()).elementType,
  FieldTemplate: (prop_types_default()).elementType,
  ObjectFieldTemplate: (prop_types_default()).elementType,
  definitions: (prop_types_default()).object.isRequired,
  rootSchema: (prop_types_default()).object,
  fields: prop_types_default().objectOf((prop_types_default()).elementType).isRequired,
  formContext: (prop_types_default()).object.isRequired,
  widgets: prop_types_default().objectOf(prop_types_default().oneOfType([(prop_types_default()).func, (prop_types_default()).object])).isRequired
});
var fieldProps = {
  autofocus: (prop_types_default()).bool,
  disabled: (prop_types_default()).bool,
  errorSchema: (prop_types_default()).object,
  formData: (prop_types_default()).any,
  idSchema: (prop_types_default()).object,
  onBlur: (prop_types_default()).func,
  onChange: (prop_types_default()).func.isRequired,
  onFocus: (prop_types_default()).func,
  rawErrors: prop_types_default().arrayOf((prop_types_default()).string),
  readonly: (prop_types_default()).bool,
  registry: registry.isRequired,
  required: (prop_types_default()).bool,
  schema: (prop_types_default()).object.isRequired,
  uiSchema: prop_types_default().shape({
    "ui:options": prop_types_default().shape({
      addable: (prop_types_default()).bool,
      orderable: (prop_types_default()).bool,
      removable: (prop_types_default()).bool
    })
  })
};
;// CONCATENATED MODULE: ./node_modules/nanoid/index.browser.js


let random = bytes => crypto.getRandomValues(new Uint8Array(bytes));

let customRandom = (alphabet, defaultSize, getRandom) => {
  let mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;
  let step = -~(1.6 * mask * defaultSize / alphabet.length);
  return (size = defaultSize) => {
    let id = '';

    while (true) {
      let bytes = getRandom(step);
      let j = step;

      while (j--) {
        id += alphabet[bytes[j] & mask] || '';
        if (id.length === size) return id;
      }
    }
  };
};

let customAlphabet = (alphabet, size = 21) => customRandom(alphabet, size, random);

let nanoid = (size = 21) => {
  let id = '';
  let bytes = crypto.getRandomValues(new Uint8Array(size));

  while (size--) {
    let byte = bytes[size] & 63;

    if (byte < 36) {
      id += byte.toString(36);
    } else if (byte < 62) {
      id += (byte - 26).toString(36).toUpperCase();
    } else if (byte < 63) {
      id += '_';
    } else {
      id += '-';
    }
  }

  return id;
};


;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/fields/ArrayField.js
function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function ArrayField_objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = ArrayField_objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function ArrayField_objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      ArrayField_defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function ArrayField_defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}









function ArrayFieldTitle(_ref) {
  var TitleField = _ref.TitleField,
      idSchema = _ref.idSchema,
      title = _ref.title,
      required = _ref.required;

  if (!title) {
    return null;
  }

  var id = "".concat(idSchema.$id, "__title");
  return react.createElement(TitleField, {
    id: id,
    title: title,
    required: required
  });
}

function ArrayFieldDescription(_ref2) {
  var DescriptionField = _ref2.DescriptionField,
      idSchema = _ref2.idSchema,
      description = _ref2.description;

  if (!description) {
    return null;
  }

  var id = "".concat(idSchema.$id, "__description");
  return react.createElement(DescriptionField, {
    id: id,
    description: description
  });
} // Used in the two templates


function DefaultArrayItem(props) {
  var btnStyle = {
    flex: 1,
    paddingLeft: 6,
    paddingRight: 6,
    fontWeight: "bold"
  };
  return react.createElement("div", {
    key: props.key,
    className: props.className
  }, react.createElement("div", {
    className: props.hasToolbar ? "col-xs-9" : "col-xs-12"
  }, props.children), props.hasToolbar && react.createElement("div", {
    className: "col-xs-3 array-item-toolbox"
  }, react.createElement("div", {
    className: "btn-group",
    style: {
      display: "flex",
      justifyContent: "space-around"
    }
  }, (props.hasMoveUp || props.hasMoveDown) && react.createElement(IconButton, {
    icon: "arrow-up",
    "aria-label": "Move up",
    className: "array-item-move-up",
    tabIndex: "-1",
    style: btnStyle,
    disabled: props.disabled || props.readonly || !props.hasMoveUp,
    onClick: props.onReorderClick(props.index, props.index - 1)
  }), (props.hasMoveUp || props.hasMoveDown) && react.createElement(IconButton, {
    icon: "arrow-down",
    className: "array-item-move-down",
    "aria-label": "Move down",
    tabIndex: "-1",
    style: btnStyle,
    disabled: props.disabled || props.readonly || !props.hasMoveDown,
    onClick: props.onReorderClick(props.index, props.index + 1)
  }), props.hasRemove && react.createElement(IconButton, {
    type: "danger",
    icon: "remove",
    "aria-label": "Remove",
    className: "array-item-remove",
    tabIndex: "-1",
    style: btnStyle,
    disabled: props.disabled || props.readonly,
    onClick: props.onDropIndexClick(props.index)
  }))));
}

function DefaultFixedArrayFieldTemplate(props) {
  return react.createElement("fieldset", {
    className: props.className,
    id: props.idSchema.$id
  }, react.createElement(ArrayFieldTitle, {
    key: "array-field-title-".concat(props.idSchema.$id),
    TitleField: props.TitleField,
    idSchema: props.idSchema,
    title: props.uiSchema["ui:title"] || props.title,
    required: props.required
  }), (props.uiSchema["ui:description"] || props.schema.description) && react.createElement("div", {
    className: "field-description",
    key: "field-description-".concat(props.idSchema.$id)
  }, props.uiSchema["ui:description"] || props.schema.description), react.createElement("div", {
    className: "row array-item-list",
    key: "array-item-list-".concat(props.idSchema.$id)
  }, props.items && props.items.map(DefaultArrayItem)), props.canAdd && react.createElement(AddButton, {
    className: "array-item-add",
    onClick: props.onAddClick,
    disabled: props.disabled || props.readonly
  }));
}

function DefaultNormalArrayFieldTemplate(props) {
  return react.createElement("fieldset", {
    className: props.className,
    id: props.idSchema.$id
  }, react.createElement(ArrayFieldTitle, {
    key: "array-field-title-".concat(props.idSchema.$id),
    TitleField: props.TitleField,
    idSchema: props.idSchema,
    title: props.uiSchema["ui:title"] || props.title,
    required: props.required
  }), (props.uiSchema["ui:description"] || props.schema.description) && react.createElement(ArrayFieldDescription, {
    key: "array-field-description-".concat(props.idSchema.$id),
    DescriptionField: props.DescriptionField,
    idSchema: props.idSchema,
    description: props.uiSchema["ui:description"] || props.schema.description
  }), react.createElement("div", {
    className: "row array-item-list",
    key: "array-item-list-".concat(props.idSchema.$id)
  }, props.items && props.items.map(function (p) {
    return DefaultArrayItem(p);
  })), props.canAdd && react.createElement(AddButton, {
    className: "array-item-add",
    onClick: props.onAddClick,
    disabled: props.disabled || props.readonly
  }));
}

function generateRowId() {
  return nanoid();
}

function generateKeyedFormData(formData) {
  return !Array.isArray(formData) ? [] : formData.map(function (item) {
    return {
      key: generateRowId(),
      item: item
    };
  });
}

function keyedToPlainFormData(keyedFormData) {
  return keyedFormData.map(function (keyedItem) {
    return keyedItem.item;
  });
}

var ArrayField = /*#__PURE__*/function (_Component) {
  _inherits(ArrayField, _Component);

  function ArrayField(props) {
    var _this;

    _classCallCheck(this, ArrayField);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ArrayField).call(this, props));

    ArrayField_defineProperty(_assertThisInitialized(_this), "_getNewFormDataRow", function () {
      var _this$props = _this.props,
          schema = _this$props.schema,
          _this$props$registry = _this$props.registry,
          registry = _this$props$registry === void 0 ? getDefaultRegistry() : _this$props$registry;
      var rootSchema = registry.rootSchema;
      var itemSchema = schema.items;

      if (isFixedItems(schema) && allowAdditionalItems(schema)) {
        itemSchema = schema.additionalItems;
      }

      return getDefaultFormState(itemSchema, undefined, rootSchema);
    });

    ArrayField_defineProperty(_assertThisInitialized(_this), "onAddClick", function (event) {
      if (event) {
        event.preventDefault();
      }

      var onChange = _this.props.onChange;
      var newKeyedFormDataRow = {
        key: generateRowId(),
        item: _this._getNewFormDataRow()
      };
      var newKeyedFormData = [].concat(_toConsumableArray(_this.state.keyedFormData), [newKeyedFormDataRow]);

      _this.setState({
        keyedFormData: newKeyedFormData,
        updatedKeyedFormData: true
      }, function () {
        return onChange(keyedToPlainFormData(newKeyedFormData));
      });
    });

    ArrayField_defineProperty(_assertThisInitialized(_this), "onAddIndexClick", function (index) {
      return function (event) {
        if (event) {
          event.preventDefault();
        }

        var onChange = _this.props.onChange;
        var newKeyedFormDataRow = {
          key: generateRowId(),
          item: _this._getNewFormDataRow()
        };

        var newKeyedFormData = _toConsumableArray(_this.state.keyedFormData);

        newKeyedFormData.splice(index, 0, newKeyedFormDataRow);

        _this.setState({
          keyedFormData: newKeyedFormData,
          updatedKeyedFormData: true
        }, function () {
          return onChange(keyedToPlainFormData(newKeyedFormData));
        });
      };
    });

    ArrayField_defineProperty(_assertThisInitialized(_this), "onDropIndexClick", function (index) {
      return function (event) {
        if (event) {
          event.preventDefault();
        }

        var onChange = _this.props.onChange;
        var keyedFormData = _this.state.keyedFormData; // refs #195: revalidate to ensure properly reindexing errors

        var newErrorSchema;

        if (_this.props.errorSchema) {
          newErrorSchema = {};
          var errorSchema = _this.props.errorSchema;

          for (var i in errorSchema) {
            i = parseInt(i);

            if (i < index) {
              newErrorSchema[i] = errorSchema[i];
            } else if (i > index) {
              newErrorSchema[i - 1] = errorSchema[i];
            }
          }
        }

        var newKeyedFormData = keyedFormData.filter(function (_, i) {
          return i !== index;
        });

        _this.setState({
          keyedFormData: newKeyedFormData,
          updatedKeyedFormData: true
        }, function () {
          return onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema);
        });
      };
    });

    ArrayField_defineProperty(_assertThisInitialized(_this), "onReorderClick", function (index, newIndex) {
      return function (event) {
        if (event) {
          event.preventDefault();
          event.target.blur();
        }

        var onChange = _this.props.onChange;
        var newErrorSchema;

        if (_this.props.errorSchema) {
          newErrorSchema = {};
          var errorSchema = _this.props.errorSchema;

          for (var i in errorSchema) {
            if (i == index) {
              newErrorSchema[newIndex] = errorSchema[index];
            } else if (i == newIndex) {
              newErrorSchema[index] = errorSchema[newIndex];
            } else {
              newErrorSchema[i] = errorSchema[i];
            }
          }
        }

        var keyedFormData = _this.state.keyedFormData;

        function reOrderArray() {
          // Copy item
          var _newKeyedFormData = keyedFormData.slice(); // Moves item from index to newIndex


          _newKeyedFormData.splice(index, 1);

          _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);

          return _newKeyedFormData;
        }

        var newKeyedFormData = reOrderArray();

        _this.setState({
          keyedFormData: newKeyedFormData
        }, function () {
          return onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema);
        });
      };
    });

    ArrayField_defineProperty(_assertThisInitialized(_this), "onChangeForIndex", function (index) {
      return function (value, errorSchema) {
        var _this$props2 = _this.props,
            formData = _this$props2.formData,
            onChange = _this$props2.onChange;
        var newFormData = formData.map(function (item, i) {
          // We need to treat undefined items as nulls to have validation.
          // See https://github.com/tdegrunt/jsonschema/issues/206
          var jsonValue = typeof value === "undefined" ? null : value;
          return index === i ? jsonValue : item;
        });
        onChange(newFormData, errorSchema && _this.props.errorSchema && _objectSpread({}, _this.props.errorSchema, ArrayField_defineProperty({}, index, errorSchema)));
      };
    });

    ArrayField_defineProperty(_assertThisInitialized(_this), "onSelectChange", function (value) {
      _this.props.onChange(value);
    });

    var _formData = props.formData;

    var _keyedFormData = generateKeyedFormData(_formData);

    _this.state = {
      keyedFormData: _keyedFormData,
      updatedKeyedFormData: false
    };
    return _this;
  }

  _createClass(ArrayField, [{
    key: "isItemRequired",
    value: function isItemRequired(itemSchema) {
      if (Array.isArray(itemSchema.type)) {
        // While we don't yet support composite/nullable jsonschema types, it's
        // future-proof to check for requirement against these.
        return !includes_default()(itemSchema.type, "null");
      } // All non-null array item types are inherently required by design


      return itemSchema.type !== "null";
    }
  }, {
    key: "canAddItem",
    value: function canAddItem(formItems) {
      var _this$props3 = this.props,
          schema = _this$props3.schema,
          uiSchema = _this$props3.uiSchema;

      var _getUiOptions = getUiOptions(uiSchema),
          addable = _getUiOptions.addable;

      if (addable !== false) {
        // if ui:options.addable was not explicitly set to false, we can add
        // another item if we have not exceeded maxItems yet
        if (schema.maxItems !== undefined) {
          addable = formItems.length < schema.maxItems;
        } else {
          addable = true;
        }
      }

      return addable;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          schema = _this$props4.schema,
          uiSchema = _this$props4.uiSchema,
          idSchema = _this$props4.idSchema,
          _this$props4$registry = _this$props4.registry,
          registry = _this$props4$registry === void 0 ? getDefaultRegistry() : _this$props4$registry;
      var rootSchema = registry.rootSchema;

      if (!schema.hasOwnProperty("items")) {
        var fields = registry.fields;
        var UnsupportedField = fields.UnsupportedField;
        return react.createElement(UnsupportedField, {
          schema: schema,
          idSchema: idSchema,
          reason: "Missing items definition"
        });
      }

      if (isMultiSelect(schema, rootSchema)) {
        // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.
        return this.renderMultiSelect();
      }

      if (isCustomWidget(uiSchema)) {
        return this.renderCustomWidget();
      }

      if (isFixedItems(schema)) {
        return this.renderFixedArray();
      }

      if (isFilesArray(schema, uiSchema, rootSchema)) {
        return this.renderFiles();
      }

      return this.renderNormalArray();
    }
  }, {
    key: "renderNormalArray",
    value: function renderNormalArray() {
      var _this2 = this;

      var _this$props5 = this.props,
          schema = _this$props5.schema,
          uiSchema = _this$props5.uiSchema,
          errorSchema = _this$props5.errorSchema,
          idSchema = _this$props5.idSchema,
          name = _this$props5.name,
          required = _this$props5.required,
          disabled = _this$props5.disabled,
          readonly = _this$props5.readonly,
          hideError = _this$props5.hideError,
          autofocus = _this$props5.autofocus,
          _this$props5$registry = _this$props5.registry,
          registry = _this$props5$registry === void 0 ? getDefaultRegistry() : _this$props5$registry,
          onBlur = _this$props5.onBlur,
          onFocus = _this$props5.onFocus,
          idPrefix = _this$props5.idPrefix,
          idSeparator = _this$props5.idSeparator,
          rawErrors = _this$props5.rawErrors;
      var title = schema.title === undefined ? name : schema.title;
      var ArrayFieldTemplate = registry.ArrayFieldTemplate,
          rootSchema = registry.rootSchema,
          fields = registry.fields,
          formContext = registry.formContext;
      var TitleField = fields.TitleField,
          DescriptionField = fields.DescriptionField;
      var itemsSchema = retrieveSchema(schema.items, rootSchema);
      var formData = keyedToPlainFormData(this.state.keyedFormData);
      var arrayProps = {
        canAdd: this.canAddItem(formData),
        items: this.state.keyedFormData.map(function (keyedItem, index) {
          var key = keyedItem.key,
              item = keyedItem.item;
          var itemSchema = retrieveSchema(schema.items, rootSchema, item);
          var itemErrorSchema = errorSchema ? errorSchema[index] : undefined;
          var itemIdPrefix = idSchema.$id + "_" + index;
          var itemIdSchema = toIdSchema(itemSchema, itemIdPrefix, rootSchema, item, idPrefix, idSeparator);
          return _this2.renderArrayFieldItem({
            key: key,
            index: index,
            canMoveUp: index > 0,
            canMoveDown: index < formData.length - 1,
            itemSchema: itemSchema,
            itemIdSchema: itemIdSchema,
            itemErrorSchema: itemErrorSchema,
            itemData: item,
            itemUiSchema: uiSchema.items,
            autofocus: autofocus && index === 0,
            onBlur: onBlur,
            onFocus: onFocus
          });
        }),
        className: "field field-array field-array-of-".concat(itemsSchema.type),
        DescriptionField: DescriptionField,
        disabled: disabled,
        idSchema: idSchema,
        uiSchema: uiSchema,
        onAddClick: this.onAddClick,
        readonly: readonly,
        hideError: hideError,
        required: required,
        schema: schema,
        title: title,
        TitleField: TitleField,
        formContext: formContext,
        formData: formData,
        rawErrors: rawErrors,
        registry: registry
      }; // Check if a custom render function was passed in

      var Component = uiSchema["ui:ArrayFieldTemplate"] || ArrayFieldTemplate || DefaultNormalArrayFieldTemplate;
      return react.createElement(Component, arrayProps);
    }
  }, {
    key: "renderCustomWidget",
    value: function renderCustomWidget() {
      var _this$props6 = this.props,
          schema = _this$props6.schema,
          idSchema = _this$props6.idSchema,
          uiSchema = _this$props6.uiSchema,
          disabled = _this$props6.disabled,
          readonly = _this$props6.readonly,
          hideError = _this$props6.hideError,
          required = _this$props6.required,
          placeholder = _this$props6.placeholder,
          autofocus = _this$props6.autofocus,
          onBlur = _this$props6.onBlur,
          onFocus = _this$props6.onFocus,
          items = _this$props6.formData,
          _this$props6$registry = _this$props6.registry,
          registry = _this$props6$registry === void 0 ? getDefaultRegistry() : _this$props6$registry,
          rawErrors = _this$props6.rawErrors,
          name = _this$props6.name;
      var widgets = registry.widgets,
          formContext = registry.formContext;
      var title = schema.title || name;

      var _getUiOptions2 = _objectSpread({}, getUiOptions(uiSchema)),
          widget = _getUiOptions2.widget,
          options = ArrayField_objectWithoutProperties(_getUiOptions2, ["widget"]);

      var Widget = getWidget(schema, widget, widgets);
      return react.createElement(Widget, {
        id: idSchema && idSchema.$id,
        multiple: true,
        onChange: this.onSelectChange,
        onBlur: onBlur,
        onFocus: onFocus,
        options: options,
        schema: schema,
        registry: registry,
        value: items,
        disabled: disabled,
        readonly: readonly,
        hideError: hideError,
        required: required,
        label: title,
        placeholder: placeholder,
        formContext: formContext,
        autofocus: autofocus,
        rawErrors: rawErrors
      });
    }
  }, {
    key: "renderMultiSelect",
    value: function renderMultiSelect() {
      var _this$props7 = this.props,
          schema = _this$props7.schema,
          idSchema = _this$props7.idSchema,
          uiSchema = _this$props7.uiSchema,
          formData = _this$props7.formData,
          disabled = _this$props7.disabled,
          readonly = _this$props7.readonly,
          required = _this$props7.required,
          placeholder = _this$props7.placeholder,
          autofocus = _this$props7.autofocus,
          onBlur = _this$props7.onBlur,
          onFocus = _this$props7.onFocus,
          _this$props7$registry = _this$props7.registry,
          registry = _this$props7$registry === void 0 ? getDefaultRegistry() : _this$props7$registry,
          rawErrors = _this$props7.rawErrors,
          name = _this$props7.name;
      var items = this.props.formData;
      var widgets = registry.widgets,
          rootSchema = registry.rootSchema,
          formContext = registry.formContext;
      var itemsSchema = retrieveSchema(schema.items, rootSchema, formData);
      var title = schema.title || name;
      var enumOptions = optionsList(itemsSchema);

      var _getUiOptions$enumOpt = _objectSpread({}, getUiOptions(uiSchema), {
        enumOptions: enumOptions
      }),
          _getUiOptions$enumOpt2 = _getUiOptions$enumOpt.widget,
          widget = _getUiOptions$enumOpt2 === void 0 ? "select" : _getUiOptions$enumOpt2,
          options = ArrayField_objectWithoutProperties(_getUiOptions$enumOpt, ["widget"]);

      var Widget = getWidget(schema, widget, widgets);
      return react.createElement(Widget, {
        id: idSchema && idSchema.$id,
        multiple: true,
        onChange: this.onSelectChange,
        onBlur: onBlur,
        onFocus: onFocus,
        options: options,
        schema: schema,
        registry: registry,
        value: items,
        disabled: disabled,
        readonly: readonly,
        required: required,
        label: title,
        placeholder: placeholder,
        formContext: formContext,
        autofocus: autofocus,
        rawErrors: rawErrors
      });
    }
  }, {
    key: "renderFiles",
    value: function renderFiles() {
      var _this$props8 = this.props,
          schema = _this$props8.schema,
          uiSchema = _this$props8.uiSchema,
          idSchema = _this$props8.idSchema,
          name = _this$props8.name,
          disabled = _this$props8.disabled,
          readonly = _this$props8.readonly,
          autofocus = _this$props8.autofocus,
          onBlur = _this$props8.onBlur,
          onFocus = _this$props8.onFocus,
          _this$props8$registry = _this$props8.registry,
          registry = _this$props8$registry === void 0 ? getDefaultRegistry() : _this$props8$registry,
          rawErrors = _this$props8.rawErrors;
      var title = schema.title || name;
      var items = this.props.formData;
      var widgets = registry.widgets,
          formContext = registry.formContext;

      var _getUiOptions3 = getUiOptions(uiSchema),
          _getUiOptions3$widget = _getUiOptions3.widget,
          widget = _getUiOptions3$widget === void 0 ? "files" : _getUiOptions3$widget,
          options = ArrayField_objectWithoutProperties(_getUiOptions3, ["widget"]);

      var Widget = getWidget(schema, widget, widgets);
      return react.createElement(Widget, {
        options: options,
        id: idSchema && idSchema.$id,
        multiple: true,
        onChange: this.onSelectChange,
        onBlur: onBlur,
        onFocus: onFocus,
        schema: schema,
        title: title,
        value: items,
        disabled: disabled,
        readonly: readonly,
        formContext: formContext,
        autofocus: autofocus,
        rawErrors: rawErrors
      });
    }
  }, {
    key: "renderFixedArray",
    value: function renderFixedArray() {
      var _this3 = this;

      var _this$props9 = this.props,
          schema = _this$props9.schema,
          uiSchema = _this$props9.uiSchema,
          formData = _this$props9.formData,
          errorSchema = _this$props9.errorSchema,
          idPrefix = _this$props9.idPrefix,
          idSeparator = _this$props9.idSeparator,
          idSchema = _this$props9.idSchema,
          name = _this$props9.name,
          required = _this$props9.required,
          disabled = _this$props9.disabled,
          readonly = _this$props9.readonly,
          autofocus = _this$props9.autofocus,
          _this$props9$registry = _this$props9.registry,
          registry = _this$props9$registry === void 0 ? getDefaultRegistry() : _this$props9$registry,
          onBlur = _this$props9.onBlur,
          onFocus = _this$props9.onFocus,
          rawErrors = _this$props9.rawErrors;
      var title = schema.title || name;
      var items = this.props.formData;
      var ArrayFieldTemplate = registry.ArrayFieldTemplate,
          rootSchema = registry.rootSchema,
          fields = registry.fields,
          formContext = registry.formContext;
      var TitleField = fields.TitleField;
      var itemSchemas = schema.items.map(function (item, index) {
        return retrieveSchema(item, rootSchema, formData[index]);
      });
      var additionalSchema = allowAdditionalItems(schema) ? retrieveSchema(schema.additionalItems, rootSchema, formData) : null;

      if (!items || items.length < itemSchemas.length) {
        // to make sure at least all fixed items are generated
        items = items || [];
        items = items.concat(new Array(itemSchemas.length - items.length));
      } // These are the props passed into the render function


      var arrayProps = {
        canAdd: this.canAddItem(items) && additionalSchema,
        className: "field field-array field-array-fixed-items",
        disabled: disabled,
        idSchema: idSchema,
        formData: formData,
        items: this.state.keyedFormData.map(function (keyedItem, index) {
          var key = keyedItem.key,
              item = keyedItem.item;
          var additional = index >= itemSchemas.length;
          var itemSchema = additional ? retrieveSchema(schema.additionalItems, rootSchema, item) : itemSchemas[index];
          var itemIdPrefix = idSchema.$id + "_" + index;
          var itemIdSchema = toIdSchema(itemSchema, itemIdPrefix, rootSchema, item, idPrefix, idSeparator);
          var itemUiSchema = additional ? uiSchema.additionalItems || {} : Array.isArray(uiSchema.items) ? uiSchema.items[index] : uiSchema.items || {};
          var itemErrorSchema = errorSchema ? errorSchema[index] : undefined;
          return _this3.renderArrayFieldItem({
            key: key,
            index: index,
            canRemove: additional,
            canMoveUp: index >= itemSchemas.length + 1,
            canMoveDown: additional && index < items.length - 1,
            itemSchema: itemSchema,
            itemData: item,
            itemUiSchema: itemUiSchema,
            itemIdSchema: itemIdSchema,
            itemErrorSchema: itemErrorSchema,
            autofocus: autofocus && index === 0,
            onBlur: onBlur,
            onFocus: onFocus
          });
        }),
        onAddClick: this.onAddClick,
        readonly: readonly,
        required: required,
        schema: schema,
        uiSchema: uiSchema,
        title: title,
        TitleField: TitleField,
        formContext: formContext,
        rawErrors: rawErrors
      }; // Check if a custom template template was passed in

      var Template = uiSchema["ui:ArrayFieldTemplate"] || ArrayFieldTemplate || DefaultFixedArrayFieldTemplate;
      return react.createElement(Template, arrayProps);
    }
  }, {
    key: "renderArrayFieldItem",
    value: function renderArrayFieldItem(props) {
      var key = props.key,
          index = props.index,
          _props$canRemove = props.canRemove,
          canRemove = _props$canRemove === void 0 ? true : _props$canRemove,
          _props$canMoveUp = props.canMoveUp,
          canMoveUp = _props$canMoveUp === void 0 ? true : _props$canMoveUp,
          _props$canMoveDown = props.canMoveDown,
          canMoveDown = _props$canMoveDown === void 0 ? true : _props$canMoveDown,
          itemSchema = props.itemSchema,
          itemData = props.itemData,
          itemUiSchema = props.itemUiSchema,
          itemIdSchema = props.itemIdSchema,
          itemErrorSchema = props.itemErrorSchema,
          autofocus = props.autofocus,
          onBlur = props.onBlur,
          onFocus = props.onFocus,
          rawErrors = props.rawErrors;
      var _this$props10 = this.props,
          disabled = _this$props10.disabled,
          readonly = _this$props10.readonly,
          uiSchema = _this$props10.uiSchema,
          _this$props10$registr = _this$props10.registry,
          registry = _this$props10$registr === void 0 ? getDefaultRegistry() : _this$props10$registr;
      var SchemaField = registry.fields.SchemaField;

      var _orderable$removable$ = _objectSpread({
        orderable: true,
        removable: true
      }, uiSchema["ui:options"]),
          orderable = _orderable$removable$.orderable,
          removable = _orderable$removable$.removable;

      var has = {
        moveUp: orderable && canMoveUp,
        moveDown: orderable && canMoveDown,
        remove: removable && canRemove
      };
      has.toolbar = Object.keys(has).some(function (key) {
        return has[key];
      });
      return {
        children: react.createElement(SchemaField, {
          index: index,
          schema: itemSchema,
          uiSchema: itemUiSchema,
          formData: itemData,
          errorSchema: itemErrorSchema,
          idPrefix: this.props.idPrefix,
          idSeparator: this.props.idSeparator,
          idSchema: itemIdSchema,
          required: this.isItemRequired(itemSchema),
          onChange: this.onChangeForIndex(index),
          onBlur: onBlur,
          onFocus: onFocus,
          registry: this.props.registry,
          disabled: this.props.disabled,
          readonly: this.props.readonly,
          hideError: this.props.hideError,
          autofocus: autofocus,
          rawErrors: rawErrors
        }),
        className: "array-item",
        disabled: disabled,
        hasToolbar: has.toolbar,
        hasMoveUp: has.moveUp,
        hasMoveDown: has.moveDown,
        hasRemove: has.remove,
        index: index,
        key: key,
        onAddIndexClick: this.onAddIndexClick,
        onDropIndexClick: this.onDropIndexClick,
        onReorderClick: this.onReorderClick,
        readonly: readonly
      };
    }
  }, {
    key: "itemTitle",
    get: function get() {
      var schema = this.props.schema;
      return schema.items.title || schema.items.description || "Item";
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      // Don't call getDerivedStateFromProps if keyed formdata was just updated.
      if (prevState.updatedKeyedFormData) {
        return {
          updatedKeyedFormData: false
        };
      }

      var nextFormData = nextProps.formData || [];
      var previousKeyedFormData = prevState.keyedFormData || [];
      var newKeyedFormData = nextFormData.length === previousKeyedFormData.length ? previousKeyedFormData.map(function (previousKeyedFormDatum, index) {
        return {
          key: previousKeyedFormDatum.key,
          item: nextFormData[index]
        };
      }) : generateKeyedFormData(nextFormData);
      return {
        keyedFormData: newKeyedFormData
      };
    }
  }]);

  return ArrayField;
}(react.Component);

ArrayField_defineProperty(ArrayField, "defaultProps", {
  uiSchema: {},
  formData: [],
  idSchema: {},
  required: false,
  disabled: false,
  readonly: false,
  autofocus: false
});

if (false) {}

/* harmony default export */ const fields_ArrayField = (ArrayField);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/fields/BooleanField.js
function BooleanField_objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      BooleanField_defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function BooleanField_defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function BooleanField_objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = BooleanField_objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function BooleanField_objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}





function BooleanField(props) {
  var schema = props.schema,
      name = props.name,
      uiSchema = props.uiSchema,
      idSchema = props.idSchema,
      formData = props.formData,
      _props$registry = props.registry,
      registry = _props$registry === void 0 ? getDefaultRegistry() : _props$registry,
      required = props.required,
      disabled = props.disabled,
      readonly = props.readonly,
      autofocus = props.autofocus,
      onChange = props.onChange,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      rawErrors = props.rawErrors;
  var title = schema.title;
  var widgets = registry.widgets,
      formContext = registry.formContext,
      fields = registry.fields;

  var _getUiOptions = getUiOptions(uiSchema),
      _getUiOptions$widget = _getUiOptions.widget,
      widget = _getUiOptions$widget === void 0 ? "checkbox" : _getUiOptions$widget,
      options = BooleanField_objectWithoutProperties(_getUiOptions, ["widget"]);

  var Widget = getWidget(schema, widget, widgets);
  var enumOptions;

  if (Array.isArray(schema.oneOf)) {
    enumOptions = optionsList({
      oneOf: schema.oneOf.map(function (option) {
        return BooleanField_objectSpread({}, option, {
          title: option.title || (option["const"] === true ? "Yes" : "No")
        });
      })
    });
  } else {
    enumOptions = optionsList({
      "enum": schema["enum"] || [true, false],
      enumNames: schema.enumNames || (schema["enum"] && schema["enum"][0] === false ? ["No", "Yes"] : ["Yes", "No"])
    });
  }

  return react.createElement(Widget, {
    options: BooleanField_objectSpread({}, options, {
      enumOptions: enumOptions
    }),
    schema: schema,
    uiSchema: uiSchema,
    id: idSchema && idSchema.$id,
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur,
    label: title === undefined ? name : title,
    value: formData,
    required: required,
    disabled: disabled,
    readonly: readonly,
    registry: registry,
    formContext: formContext,
    autofocus: autofocus,
    rawErrors: rawErrors,
    DescriptionField: fields.DescriptionField
  });
}

if (false) {}

BooleanField.defaultProps = {
  uiSchema: {},
  disabled: false,
  readonly: false,
  autofocus: false
};
/* harmony default export */ const fields_BooleanField = (BooleanField);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/fields/DescriptionField.js



function DescriptionField(props) {
  var id = props.id,
      description = props.description;

  if (!description) {
    return null;
  }

  if (typeof description === "string") {
    return react.createElement("p", {
      id: id,
      className: "field-description"
    }, description);
  } else {
    return react.createElement("div", {
      id: id,
      className: "field-description"
    }, description);
  }
}

if (false) {}

/* harmony default export */ const fields_DescriptionField = (DescriptionField);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/fields/MultiSchemaField.js
function MultiSchemaField_typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    MultiSchemaField_typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    MultiSchemaField_typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return MultiSchemaField_typeof(obj);
}

function MultiSchemaField_extends() {
  MultiSchemaField_extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return MultiSchemaField_extends.apply(this, arguments);
}

function MultiSchemaField_objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = MultiSchemaField_objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function MultiSchemaField_objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function MultiSchemaField_classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function MultiSchemaField_defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function MultiSchemaField_createClass(Constructor, protoProps, staticProps) {
  if (protoProps) MultiSchemaField_defineProperties(Constructor.prototype, protoProps);
  if (staticProps) MultiSchemaField_defineProperties(Constructor, staticProps);
  return Constructor;
}

function MultiSchemaField_possibleConstructorReturn(self, call) {
  if (call && (MultiSchemaField_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return MultiSchemaField_assertThisInitialized(self);
}

function MultiSchemaField_getPrototypeOf(o) {
  MultiSchemaField_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return MultiSchemaField_getPrototypeOf(o);
}

function MultiSchemaField_assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function MultiSchemaField_inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) MultiSchemaField_setPrototypeOf(subClass, superClass);
}

function MultiSchemaField_setPrototypeOf(o, p) {
  MultiSchemaField_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return MultiSchemaField_setPrototypeOf(o, p);
}

function MultiSchemaField_defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}






var AnyOfField = /*#__PURE__*/function (_Component) {
  MultiSchemaField_inherits(AnyOfField, _Component);

  function AnyOfField(props) {
    var _this;

    MultiSchemaField_classCallCheck(this, AnyOfField);

    _this = MultiSchemaField_possibleConstructorReturn(this, MultiSchemaField_getPrototypeOf(AnyOfField).call(this, props));

    MultiSchemaField_defineProperty(MultiSchemaField_assertThisInitialized(_this), "onOptionChange", function (option) {
      var selectedOption = parseInt(option, 10);
      var _this$props = _this.props,
          formData = _this$props.formData,
          onChange = _this$props.onChange,
          options = _this$props.options,
          registry = _this$props.registry;
      var rootSchema = registry.rootSchema;
      var newOption = retrieveSchema(options[selectedOption], rootSchema, formData); // If the new option is of type object and the current data is an object,
      // discard properties added using the old option.

      var newFormData = undefined;

      if (guessType(formData) === "object" && (newOption.type === "object" || newOption.properties)) {
        newFormData = Object.assign({}, formData);
        var optionsToDiscard = options.slice();
        optionsToDiscard.splice(selectedOption, 1); // Discard any data added using other options

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = optionsToDiscard[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _option = _step.value;

            if (_option.properties) {
              for (var key in _option.properties) {
                if (newFormData.hasOwnProperty(key)) {
                  delete newFormData[key];
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      } // Call getDefaultFormState to make sure defaults are populated on change.


      onChange(getDefaultFormState(options[selectedOption], newFormData, rootSchema));

      _this.setState({
        selectedOption: parseInt(option, 10)
      });
    });

    var _this$props2 = _this.props,
        _formData = _this$props2.formData,
        _options = _this$props2.options;
    _this.state = {
      selectedOption: _this.getMatchingOption(_formData, _options)
    };
    return _this;
  }

  MultiSchemaField_createClass(AnyOfField, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (!deepEquals(this.props.formData, prevProps.formData) && this.props.idSchema.$id === prevProps.idSchema.$id) {
        var matchingOption = this.getMatchingOption(this.props.formData, this.props.options);

        if (!prevState || matchingOption === this.state.selectedOption) {
          return;
        }

        this.setState({
          selectedOption: matchingOption
        });
      }
    }
  }, {
    key: "getMatchingOption",
    value: function getMatchingOption(formData, options) {
      var rootSchema = this.props.registry.rootSchema;

      var option = utils_getMatchingOption(formData, options, rootSchema);

      if (option !== 0) {
        return option;
      } // If the form data matches none of the options, use the currently selected
      // option, assuming it's available; otherwise use the first option


      return this && this.state ? this.state.selectedOption : 0;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          baseType = _this$props3.baseType,
          disabled = _this$props3.disabled,
          readonly = _this$props3.readonly,
          hideError = _this$props3.hideError,
          errorSchema = _this$props3.errorSchema,
          formData = _this$props3.formData,
          idPrefix = _this$props3.idPrefix,
          idSeparator = _this$props3.idSeparator,
          idSchema = _this$props3.idSchema,
          onBlur = _this$props3.onBlur,
          onChange = _this$props3.onChange,
          onFocus = _this$props3.onFocus,
          options = _this$props3.options,
          registry = _this$props3.registry,
          uiSchema = _this$props3.uiSchema,
          schema = _this$props3.schema;
      var _SchemaField = registry.fields.SchemaField;
      var widgets = registry.widgets;
      var selectedOption = this.state.selectedOption;

      var _getUiOptions = getUiOptions(uiSchema),
          _getUiOptions$widget = _getUiOptions.widget,
          widget = _getUiOptions$widget === void 0 ? "select" : _getUiOptions$widget,
          uiOptions = MultiSchemaField_objectWithoutProperties(_getUiOptions, ["widget"]);

      var Widget = getWidget({
        type: "number"
      }, widget, widgets);
      var option = options[selectedOption] || null;
      var optionSchema;

      if (option) {
        // If the subschema doesn't declare a type, infer the type from the
        // parent schema
        optionSchema = option.type ? option : Object.assign({}, option, {
          type: baseType
        });
      }

      var enumOptions = options.map(function (option, index) {
        return {
          label: option.title || "Option ".concat(index + 1),
          value: index
        };
      });
      return react.createElement("div", {
        className: "panel panel-default panel-body"
      }, react.createElement("div", {
        className: "form-group"
      }, react.createElement(Widget, MultiSchemaField_extends({
        id: "".concat(idSchema.$id).concat(schema.oneOf ? "__oneof_select" : "__anyof_select"),
        schema: {
          type: "number",
          "default": 0
        },
        onChange: this.onOptionChange,
        onBlur: onBlur,
        onFocus: onFocus,
        value: selectedOption,
        options: {
          enumOptions: enumOptions
        }
      }, uiOptions))), option !== null && react.createElement(_SchemaField, {
        schema: optionSchema,
        uiSchema: uiSchema,
        errorSchema: errorSchema,
        idSchema: idSchema,
        idPrefix: idPrefix,
        idSeparator: idSeparator,
        formData: formData,
        onChange: onChange,
        onBlur: onBlur,
        onFocus: onFocus,
        registry: registry,
        disabled: disabled,
        readonly: readonly,
        hideError: hideError
      }));
    }
  }]);

  return AnyOfField;
}(react.Component);

AnyOfField.defaultProps = {
  disabled: false,
  readonly: false,
  hideError: false,
  errorSchema: {},
  idSchema: {},
  uiSchema: {}
};

if (false) {}

/* harmony default export */ const MultiSchemaField = (AnyOfField);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/fields/NumberField.js
function NumberField_typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    NumberField_typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    NumberField_typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return NumberField_typeof(obj);
}

function NumberField_extends() {
  NumberField_extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return NumberField_extends.apply(this, arguments);
}

function NumberField_objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = NumberField_objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function NumberField_objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function NumberField_classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function NumberField_defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function NumberField_createClass(Constructor, protoProps, staticProps) {
  if (protoProps) NumberField_defineProperties(Constructor.prototype, protoProps);
  if (staticProps) NumberField_defineProperties(Constructor, staticProps);
  return Constructor;
}

function NumberField_possibleConstructorReturn(self, call) {
  if (call && (NumberField_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return NumberField_assertThisInitialized(self);
}

function NumberField_getPrototypeOf(o) {
  NumberField_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return NumberField_getPrototypeOf(o);
}

function NumberField_assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function NumberField_inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) NumberField_setPrototypeOf(subClass, superClass);
}

function NumberField_setPrototypeOf(o, p) {
  NumberField_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return NumberField_setPrototypeOf(o, p);
}

function NumberField_defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}



 // Matches a string that ends in a . character, optionally followed by a sequence of
// digits followed by any number of 0 characters up until the end of the line.
// Ensuring that there is at least one prefixed character is important so that
// you don't incorrectly match against "0".

var trailingCharMatcherWithPrefix = /\.([0-9]*0)*$/; // This is used for trimming the trailing 0 and . characters without affecting
// the rest of the string. Its possible to use one RegEx with groups for this
// functionality, but it is fairly complex compared to simply defining two
// different matchers.

var trailingCharMatcher = /[0.]0*$/;
/**
 * The NumberField class has some special handling for dealing with trailing
 * decimal points and/or zeroes. This logic is designed to allow trailing values
 * to be visible in the input element, but not be represented in the
 * corresponding form data.
 *
 * The algorithm is as follows:
 *
 * 1. When the input value changes the value is cached in the component state
 *
 * 2. The value is then normalized, removing trailing decimal points and zeros,
 *    then passed to the "onChange" callback
 *
 * 3. When the component is rendered, the formData value is checked against the
 *    value cached in the state. If it matches the cached value, the cached
 *    value is passed to the input instead of the formData value
 */

var NumberField = /*#__PURE__*/function (_React$Component) {
  NumberField_inherits(NumberField, _React$Component);

  function NumberField(props) {
    var _this;

    NumberField_classCallCheck(this, NumberField);

    _this = NumberField_possibleConstructorReturn(this, NumberField_getPrototypeOf(NumberField).call(this, props));

    NumberField_defineProperty(NumberField_assertThisInitialized(_this), "handleChange", function (value) {
      // Cache the original value in component state
      _this.setState({
        lastValue: value
      }); // Normalize decimals that don't start with a zero character in advance so
      // that the rest of the normalization logic is simpler


      if ("".concat(value).charAt(0) === ".") {
        value = "0".concat(value);
      } // Check that the value is a string (this can happen if the widget used is a
      // <select>, due to an enum declaration etc) then, if the value ends in a
      // trailing decimal point or multiple zeroes, strip the trailing values


      var processed = typeof value === "string" && value.match(trailingCharMatcherWithPrefix) ? asNumber(value.replace(trailingCharMatcher, "")) : asNumber(value);

      _this.props.onChange(processed);
    });

    _this.state = {
      lastValue: props.value
    };
    return _this;
  }

  NumberField_createClass(NumberField, [{
    key: "render",
    value: function render() {
      var StringField = this.props.registry.fields.StringField;

      var _this$props = this.props,
          formData = _this$props.formData,
          props = NumberField_objectWithoutProperties(_this$props, ["formData"]);

      var lastValue = this.state.lastValue;
      var value = formData;

      if (typeof lastValue === "string" && typeof value === "number") {
        // Construct a regular expression that checks for a string that consists
        // of the formData value suffixed with zero or one '.' characters and zero
        // or more '0' characters
        var re = new RegExp("".concat(value).replace(".", "\\.") + "\\.?0*$"); // If the cached "lastValue" is a match, use that instead of the formData
        // value to prevent the input value from changing in the UI

        if (lastValue.match(re)) {
          value = lastValue;
        }
      }

      return react.createElement(StringField, NumberField_extends({}, props, {
        formData: value,
        onChange: this.handleChange
      }));
    }
  }]);

  return NumberField;
}(react.Component);

if (false) {}

NumberField.defaultProps = {
  uiSchema: {}
};
/* harmony default export */ const fields_NumberField = (NumberField);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/fields/ObjectField.js
function ObjectField_typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    ObjectField_typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    ObjectField_typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return ObjectField_typeof(obj);
}

function ObjectField_extends() {
  ObjectField_extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return ObjectField_extends.apply(this, arguments);
}

function ObjectField_toConsumableArray(arr) {
  return ObjectField_arrayWithoutHoles(arr) || ObjectField_iterableToArray(arr) || ObjectField_nonIterableSpread();
}

function ObjectField_nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function ObjectField_iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function ObjectField_arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

function ObjectField_objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      ObjectField_defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function ObjectField_classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function ObjectField_defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function ObjectField_createClass(Constructor, protoProps, staticProps) {
  if (protoProps) ObjectField_defineProperties(Constructor.prototype, protoProps);
  if (staticProps) ObjectField_defineProperties(Constructor, staticProps);
  return Constructor;
}

function ObjectField_possibleConstructorReturn(self, call) {
  if (call && (ObjectField_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return ObjectField_assertThisInitialized(self);
}

function ObjectField_getPrototypeOf(o) {
  ObjectField_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return ObjectField_getPrototypeOf(o);
}

function ObjectField_assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function ObjectField_inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) ObjectField_setPrototypeOf(subClass, superClass);
}

function ObjectField_setPrototypeOf(o, p) {
  ObjectField_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return ObjectField_setPrototypeOf(o, p);
}

function ObjectField_defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}






function DefaultObjectFieldTemplate(props) {
  var TitleField = props.TitleField,
      DescriptionField = props.DescriptionField;
  return react.createElement("fieldset", {
    id: props.idSchema.$id
  }, (props.uiSchema["ui:title"] || props.title) && react.createElement(TitleField, {
    id: "".concat(props.idSchema.$id, "__title"),
    title: props.title || props.uiSchema["ui:title"],
    required: props.required,
    formContext: props.formContext
  }), props.description && react.createElement(DescriptionField, {
    id: "".concat(props.idSchema.$id, "__description"),
    description: props.description,
    formContext: props.formContext
  }), props.properties.map(function (prop) {
    return prop.content;
  }), canExpand(props.schema, props.uiSchema, props.formData) && react.createElement(AddButton, {
    className: "object-property-expand",
    onClick: props.onAddClick(props.schema),
    disabled: props.disabled || props.readonly
  }));
}

var ObjectField = /*#__PURE__*/function (_Component) {
  ObjectField_inherits(ObjectField, _Component);

  function ObjectField() {
    var _getPrototypeOf2;

    var _this;

    ObjectField_classCallCheck(this, ObjectField);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = ObjectField_possibleConstructorReturn(this, (_getPrototypeOf2 = ObjectField_getPrototypeOf(ObjectField)).call.apply(_getPrototypeOf2, [this].concat(args)));

    ObjectField_defineProperty(ObjectField_assertThisInitialized(_this), "state", {
      wasPropertyKeyModified: false,
      additionalProperties: {}
    });

    ObjectField_defineProperty(ObjectField_assertThisInitialized(_this), "onPropertyChange", function (name) {
      var addedByAdditionalProperties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return function (value, errorSchema) {
        if (value === undefined && addedByAdditionalProperties) {
          // Don't set value = undefined for fields added by
          // additionalProperties. Doing so removes them from the
          // formData, which causes them to completely disappear
          // (including the input field for the property name). Unlike
          // fields which are "mandated" by the schema, these fields can
          // be set to undefined by clicking a "delete field" button, so
          // set empty values to the empty string.
          value = "";
        }

        var newFormData = ObjectField_objectSpread({}, _this.props.formData, ObjectField_defineProperty({}, name, value));

        _this.props.onChange(newFormData, errorSchema && _this.props.errorSchema && ObjectField_objectSpread({}, _this.props.errorSchema, ObjectField_defineProperty({}, name, errorSchema)));
      };
    });

    ObjectField_defineProperty(ObjectField_assertThisInitialized(_this), "onDropPropertyClick", function (key) {
      return function (event) {
        event.preventDefault();
        var _this$props = _this.props,
            onChange = _this$props.onChange,
            formData = _this$props.formData;

        var copiedFormData = ObjectField_objectSpread({}, formData);

        delete copiedFormData[key];
        onChange(copiedFormData);
      };
    });

    ObjectField_defineProperty(ObjectField_assertThisInitialized(_this), "getAvailableKey", function (preferredKey, formData) {
      var index = 0;
      var newKey = preferredKey;

      while (formData.hasOwnProperty(newKey)) {
        newKey = "".concat(preferredKey, "-").concat(++index);
      }

      return newKey;
    });

    ObjectField_defineProperty(ObjectField_assertThisInitialized(_this), "onKeyChange", function (oldValue) {
      return function (value, errorSchema) {
        if (oldValue === value) {
          return;
        }

        value = _this.getAvailableKey(value, _this.props.formData);

        var newFormData = ObjectField_objectSpread({}, _this.props.formData);

        var newKeys = ObjectField_defineProperty({}, oldValue, value);

        var keyValues = Object.keys(newFormData).map(function (key) {
          var newKey = newKeys[key] || key;
          return ObjectField_defineProperty({}, newKey, newFormData[key]);
        });
        var renamedObj = Object.assign.apply(Object, [{}].concat(ObjectField_toConsumableArray(keyValues)));

        _this.setState({
          wasPropertyKeyModified: true
        });

        _this.props.onChange(renamedObj, errorSchema && _this.props.errorSchema && ObjectField_objectSpread({}, _this.props.errorSchema, ObjectField_defineProperty({}, value, errorSchema)));
      };
    });

    ObjectField_defineProperty(ObjectField_assertThisInitialized(_this), "handleAddClick", function (schema) {
      return function () {
        var type = schema.additionalProperties.type;

        var newFormData = ObjectField_objectSpread({}, _this.props.formData);

        if (schema.additionalProperties.hasOwnProperty("$ref")) {
          var _this$props$registry = _this.props.registry,
              registry = _this$props$registry === void 0 ? getDefaultRegistry() : _this$props$registry;
          var refSchema = retrieveSchema({
            $ref: schema.additionalProperties["$ref"]
          }, registry.rootSchema, _this.props.formData);
          type = refSchema.type;
        }

        newFormData[_this.getAvailableKey("newKey", newFormData)] = _this.getDefaultValue(type);

        _this.props.onChange(newFormData);
      };
    });

    return _this;
  }

  ObjectField_createClass(ObjectField, [{
    key: "isRequired",
    value: function isRequired(name) {
      var schema = this.props.schema;
      return Array.isArray(schema.required) && schema.required.indexOf(name) !== -1;
    }
  }, {
    key: "getDefaultValue",
    value: function getDefaultValue(type) {
      switch (type) {
        case "string":
          return "New Value";

        case "array":
          return [];

        case "boolean":
          return false;

        case "null":
          return null;

        case "number":
          return 0;

        case "object":
          return {};

        default:
          // We don't have a datatype for some reason (perhaps additionalProperties was true)
          return "New Value";
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          uiSchema = _this$props2.uiSchema,
          formData = _this$props2.formData,
          errorSchema = _this$props2.errorSchema,
          idSchema = _this$props2.idSchema,
          name = _this$props2.name,
          required = _this$props2.required,
          disabled = _this$props2.disabled,
          readonly = _this$props2.readonly,
          hideError = _this$props2.hideError,
          idPrefix = _this$props2.idPrefix,
          idSeparator = _this$props2.idSeparator,
          onBlur = _this$props2.onBlur,
          onFocus = _this$props2.onFocus,
          _this$props2$registry = _this$props2.registry,
          registry = _this$props2$registry === void 0 ? getDefaultRegistry() : _this$props2$registry;
      var rootSchema = registry.rootSchema,
          fields = registry.fields,
          formContext = registry.formContext;
      var SchemaField = fields.SchemaField,
          TitleField = fields.TitleField,
          DescriptionField = fields.DescriptionField;
      var schema = retrieveSchema(this.props.schema, rootSchema, formData);
      var title = schema.title === undefined ? name : schema.title;
      var description = uiSchema["ui:description"] || schema.description;
      var orderedProperties;

      try {
        var properties = Object.keys(schema.properties || {});
        orderedProperties = orderProperties(properties, uiSchema["ui:order"]);
      } catch (err) {
        return react.createElement("div", null, react.createElement("p", {
          className: "config-error",
          style: {
            color: "red"
          }
        }, "Invalid ", name || "root", " object field configuration:", react.createElement("em", null, err.message), "."), react.createElement("pre", null, JSON.stringify(schema)));
      }

      var Template = uiSchema["ui:ObjectFieldTemplate"] || registry.ObjectFieldTemplate || DefaultObjectFieldTemplate;
      var templateProps = {
        title: uiSchema["ui:title"] || title,
        description: description,
        TitleField: TitleField,
        DescriptionField: DescriptionField,
        properties: orderedProperties.map(function (name) {
          var addedByAdditionalProperties = schema.properties[name].hasOwnProperty(ADDITIONAL_PROPERTY_FLAG);
          var fieldUiSchema = addedByAdditionalProperties ? uiSchema.additionalProperties : uiSchema[name];
          var hidden = fieldUiSchema && fieldUiSchema["ui:widget"] === "hidden";
          return {
            content: react.createElement(SchemaField, {
              key: name,
              name: name,
              required: _this2.isRequired(name),
              schema: schema.properties[name],
              uiSchema: fieldUiSchema,
              errorSchema: errorSchema[name],
              idSchema: idSchema[name],
              idPrefix: idPrefix,
              idSeparator: idSeparator,
              formData: (formData || {})[name],
              wasPropertyKeyModified: _this2.state.wasPropertyKeyModified,
              onKeyChange: _this2.onKeyChange(name),
              onChange: _this2.onPropertyChange(name, addedByAdditionalProperties),
              onBlur: onBlur,
              onFocus: onFocus,
              registry: registry,
              disabled: disabled,
              readonly: readonly,
              hideError: hideError,
              onDropPropertyClick: _this2.onDropPropertyClick
            }),
            name: name,
            readonly: readonly,
            disabled: disabled,
            required: required,
            hidden: hidden
          };
        }),
        readonly: readonly,
        disabled: disabled,
        required: required,
        idSchema: idSchema,
        uiSchema: uiSchema,
        schema: schema,
        formData: formData,
        formContext: formContext,
        registry: registry
      };
      return react.createElement(Template, ObjectField_extends({}, templateProps, {
        onAddClick: this.handleAddClick
      }));
    }
  }]);

  return ObjectField;
}(react.Component);

ObjectField_defineProperty(ObjectField, "defaultProps", {
  uiSchema: {},
  formData: {},
  errorSchema: {},
  idSchema: {},
  required: false,
  disabled: false,
  readonly: false
});

if (false) {}

/* harmony default export */ const fields_ObjectField = (ObjectField);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/fields/SchemaField.js
function SchemaField_typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    SchemaField_typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    SchemaField_typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return SchemaField_typeof(obj);
}

function SchemaField_classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function SchemaField_defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function SchemaField_createClass(Constructor, protoProps, staticProps) {
  if (protoProps) SchemaField_defineProperties(Constructor.prototype, protoProps);
  if (staticProps) SchemaField_defineProperties(Constructor, staticProps);
  return Constructor;
}

function SchemaField_possibleConstructorReturn(self, call) {
  if (call && (SchemaField_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return SchemaField_assertThisInitialized(self);
}

function SchemaField_assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function SchemaField_getPrototypeOf(o) {
  SchemaField_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return SchemaField_getPrototypeOf(o);
}

function SchemaField_inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) SchemaField_setPrototypeOf(subClass, superClass);
}

function SchemaField_setPrototypeOf(o, p) {
  SchemaField_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return SchemaField_setPrototypeOf(o, p);
}

function SchemaField_extends() {
  SchemaField_extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return SchemaField_extends.apply(this, arguments);
}

function SchemaField_objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      SchemaField_defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function SchemaField_defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function SchemaField_objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = SchemaField_objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function SchemaField_objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}






var REQUIRED_FIELD_SYMBOL = "*";
var COMPONENT_TYPES = {
  array: "ArrayField",
  "boolean": "BooleanField",
  integer: "NumberField",
  number: "NumberField",
  object: "ObjectField",
  string: "StringField",
  "null": "NullField"
};

function getFieldComponent(schema, uiSchema, idSchema, fields) {
  var field = uiSchema["ui:field"];

  if (typeof field === "function") {
    return field;
  }

  if (typeof field === "string" && field in fields) {
    return fields[field];
  }

  var componentName = COMPONENT_TYPES[getSchemaType(schema)]; // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't
  // render a field and let the MultiSchemaField component handle the form display

  if (!componentName && (schema.anyOf || schema.oneOf)) {
    return function () {
      return null;
    };
  }

  return componentName in fields ? fields[componentName] : function () {
    var UnsupportedField = fields.UnsupportedField;
    return react.createElement(UnsupportedField, {
      schema: schema,
      idSchema: idSchema,
      reason: "Unknown field type ".concat(schema.type)
    });
  };
}

function Label(props) {
  var label = props.label,
      required = props.required,
      id = props.id;

  if (!label) {
    return null;
  }

  return react.createElement("label", {
    className: "control-label",
    htmlFor: id
  }, label, required && react.createElement("span", {
    className: "required"
  }, REQUIRED_FIELD_SYMBOL));
}

function LabelInput(props) {
  var id = props.id,
      label = props.label,
      onChange = props.onChange;
  return react.createElement("input", {
    className: "form-control",
    type: "text",
    id: id,
    onBlur: function onBlur(event) {
      return onChange(event.target.value);
    },
    defaultValue: label
  });
}

function Help(props) {
  var id = props.id,
      help = props.help;

  if (!help) {
    return null;
  }

  if (typeof help === "string") {
    return react.createElement("p", {
      id: id,
      className: "help-block"
    }, help);
  }

  return react.createElement("div", {
    id: id,
    className: "help-block"
  }, help);
}

function SchemaField_ErrorList(props) {
  var _props$errors = props.errors,
      errors = _props$errors === void 0 ? [] : _props$errors;

  if (errors.length === 0) {
    return null;
  }

  return react.createElement("div", null, react.createElement("ul", {
    className: "error-detail bs-callout bs-callout-info"
  }, errors.filter(function (elem) {
    return !!elem;
  }).map(function (error, index) {
    return react.createElement("li", {
      className: "text-danger",
      key: index
    }, error);
  })));
}

function DefaultTemplate(props) {
  var id = props.id,
      label = props.label,
      children = props.children,
      errors = props.errors,
      help = props.help,
      description = props.description,
      hidden = props.hidden,
      required = props.required,
      displayLabel = props.displayLabel;

  if (hidden) {
    return react.createElement("div", {
      className: "hidden"
    }, children);
  }

  return react.createElement(WrapIfAdditional, props, displayLabel && react.createElement(Label, {
    label: label,
    required: required,
    id: id
  }), displayLabel && description ? description : null, children, errors, help);
}

if (false) {}

DefaultTemplate.defaultProps = {
  hidden: false,
  readonly: false,
  required: false,
  displayLabel: true
};

function WrapIfAdditional(props) {
  var id = props.id,
      classNames = props.classNames,
      disabled = props.disabled,
      label = props.label,
      onKeyChange = props.onKeyChange,
      onDropPropertyClick = props.onDropPropertyClick,
      readonly = props.readonly,
      required = props.required,
      schema = props.schema;
  var keyLabel = "".concat(label, " Key"); // i18n ?

  var additional = schema.hasOwnProperty(ADDITIONAL_PROPERTY_FLAG);

  if (!additional) {
    return react.createElement("div", {
      className: classNames
    }, props.children);
  }

  return react.createElement("div", {
    className: classNames
  }, react.createElement("div", {
    className: "row"
  }, react.createElement("div", {
    className: "col-xs-5 form-additional"
  }, react.createElement("div", {
    className: "form-group"
  }, react.createElement(Label, {
    label: keyLabel,
    required: required,
    id: "".concat(id, "-key")
  }), react.createElement(LabelInput, {
    label: label,
    required: required,
    id: "".concat(id, "-key"),
    onChange: onKeyChange
  }))), react.createElement("div", {
    className: "form-additional form-group col-xs-5"
  }, props.children), react.createElement("div", {
    className: "col-xs-2"
  }, react.createElement(IconButton, {
    type: "danger",
    icon: "remove",
    className: "array-item-remove btn-block",
    tabIndex: "-1",
    style: {
      border: "0"
    },
    disabled: disabled || readonly,
    onClick: onDropPropertyClick(label)
  }))));
}

function SchemaFieldRender(props) {
  var uiSchema = props.uiSchema,
      formData = props.formData,
      errorSchema = props.errorSchema,
      idPrefix = props.idPrefix,
      idSeparator = props.idSeparator,
      name = props.name,
      onChange = props.onChange,
      onKeyChange = props.onKeyChange,
      onDropPropertyClick = props.onDropPropertyClick,
      required = props.required,
      _props$registry = props.registry,
      registry = _props$registry === void 0 ? getDefaultRegistry() : _props$registry,
      _props$wasPropertyKey = props.wasPropertyKeyModified,
      wasPropertyKeyModified = _props$wasPropertyKey === void 0 ? false : _props$wasPropertyKey;
  var rootSchema = registry.rootSchema,
      fields = registry.fields,
      formContext = registry.formContext;
  var FieldTemplate = uiSchema["ui:FieldTemplate"] || registry.FieldTemplate || DefaultTemplate;
  var idSchema = props.idSchema;
  var schema = retrieveSchema(props.schema, rootSchema, formData);
  idSchema = mergeObjects(toIdSchema(schema, null, rootSchema, formData, idPrefix, idSeparator), idSchema);
  var FieldComponent = getFieldComponent(schema, uiSchema, idSchema, fields);
  var DescriptionField = fields.DescriptionField;
  var disabled = Boolean(props.disabled || uiSchema["ui:disabled"]);
  var readonly = Boolean(props.readonly || uiSchema["ui:readonly"] || props.schema.readOnly || schema.readOnly);
  var uiSchemaHideError = uiSchema["ui:hideError"]; // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children

  var hideError = uiSchemaHideError === undefined ? props.hideError : Boolean(uiSchemaHideError);
  var autofocus = Boolean(props.autofocus || uiSchema["ui:autofocus"]);

  if (Object.keys(schema).length === 0) {
    return null;
  }

  var displayLabel = getDisplayLabel(schema, uiSchema, rootSchema);

  var __errors = errorSchema.__errors,
      fieldErrorSchema = SchemaField_objectWithoutProperties(errorSchema, ["__errors"]); // See #439: uiSchema: Don't pass consumed class names to child components


  var field = react.createElement(FieldComponent, SchemaField_extends({}, props, {
    idSchema: idSchema,
    schema: schema,
    uiSchema: SchemaField_objectSpread({}, uiSchema, {
      classNames: undefined
    }),
    disabled: disabled,
    readonly: readonly,
    hideError: hideError,
    autofocus: autofocus,
    errorSchema: fieldErrorSchema,
    formContext: formContext,
    rawErrors: __errors
  }));
  var id = idSchema.$id; // If this schema has a title defined, but the user has set a new key/label, retain their input.

  var label;

  if (wasPropertyKeyModified) {
    label = name;
  } else {
    label = uiSchema["ui:title"] || props.schema.title || schema.title || name;
  }

  var description = uiSchema["ui:description"] || props.schema.description || schema.description;
  var errors = __errors;
  var help = uiSchema["ui:help"];
  var hidden = uiSchema["ui:widget"] === "hidden";
  var classNames = ["form-group", "field", "field-".concat(schema.type)];

  if (!hideError && errors && errors.length > 0) {
    classNames.push("field-error has-error has-danger");
  }

  classNames.push(uiSchema.classNames);
  classNames = classNames.join(" ").trim();
  var fieldProps = {
    description: react.createElement(DescriptionField, {
      id: id + "__description",
      description: description,
      formContext: formContext
    }),
    rawDescription: description,
    help: react.createElement(Help, {
      id: id + "__help",
      help: help
    }),
    rawHelp: typeof help === "string" ? help : undefined,
    errors: hideError ? undefined : react.createElement(SchemaField_ErrorList, {
      errors: errors
    }),
    rawErrors: hideError ? undefined : errors,
    id: id,
    label: label,
    hidden: hidden,
    onChange: onChange,
    onKeyChange: onKeyChange,
    onDropPropertyClick: onDropPropertyClick,
    required: required,
    disabled: disabled,
    readonly: readonly,
    hideError: hideError,
    displayLabel: displayLabel,
    classNames: classNames,
    formContext: formContext,
    formData: formData,
    fields: fields,
    schema: schema,
    uiSchema: uiSchema,
    registry: registry
  };
  var _AnyOfField = registry.fields.AnyOfField;
  var _OneOfField = registry.fields.OneOfField;
  return react.createElement(FieldTemplate, fieldProps, react.createElement(react.Fragment, null, field, schema.anyOf && !isSelect(schema) && react.createElement(_AnyOfField, {
    disabled: disabled,
    readonly: readonly,
    hideError: hideError,
    errorSchema: errorSchema,
    formData: formData,
    idPrefix: idPrefix,
    idSchema: idSchema,
    idSeparator: idSeparator,
    onBlur: props.onBlur,
    onChange: props.onChange,
    onFocus: props.onFocus,
    options: schema.anyOf.map(function (_schema) {
      return retrieveSchema(_schema, rootSchema, formData);
    }),
    baseType: schema.type,
    registry: registry,
    schema: schema,
    uiSchema: uiSchema
  }), schema.oneOf && !isSelect(schema) && react.createElement(_OneOfField, {
    disabled: disabled,
    readonly: readonly,
    hideError: hideError,
    errorSchema: errorSchema,
    formData: formData,
    idPrefix: idPrefix,
    idSchema: idSchema,
    idSeparator: idSeparator,
    onBlur: props.onBlur,
    onChange: props.onChange,
    onFocus: props.onFocus,
    options: schema.oneOf.map(function (_schema) {
      return retrieveSchema(_schema, rootSchema, formData);
    }),
    baseType: schema.type,
    registry: registry,
    schema: schema,
    uiSchema: uiSchema
  })));
}

var SchemaField = /*#__PURE__*/function (_React$Component) {
  SchemaField_inherits(SchemaField, _React$Component);

  function SchemaField() {
    SchemaField_classCallCheck(this, SchemaField);

    return SchemaField_possibleConstructorReturn(this, SchemaField_getPrototypeOf(SchemaField).apply(this, arguments));
  }

  SchemaField_createClass(SchemaField, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return !deepEquals(this.props, nextProps);
    }
  }, {
    key: "render",
    value: function render() {
      return SchemaFieldRender(this.props);
    }
  }]);

  return SchemaField;
}(react.Component);

SchemaField.defaultProps = {
  uiSchema: {},
  errorSchema: {},
  idSchema: {},
  disabled: false,
  readonly: false,
  autofocus: false,
  hideError: false
};

if (false) {}

/* harmony default export */ const fields_SchemaField = (SchemaField);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/fields/StringField.js
function StringField_objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      StringField_defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function StringField_defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function StringField_objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = StringField_objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function StringField_objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}





function StringField(props) {
  var schema = props.schema,
      name = props.name,
      uiSchema = props.uiSchema,
      idSchema = props.idSchema,
      formData = props.formData,
      required = props.required,
      disabled = props.disabled,
      readonly = props.readonly,
      autofocus = props.autofocus,
      onChange = props.onChange,
      onBlur = props.onBlur,
      onFocus = props.onFocus,
      _props$registry = props.registry,
      registry = _props$registry === void 0 ? getDefaultRegistry() : _props$registry,
      rawErrors = props.rawErrors;
  var title = schema.title,
      format = schema.format;
  var widgets = registry.widgets,
      formContext = registry.formContext;
  var enumOptions = isSelect(schema) && optionsList(schema);
  var defaultWidget = enumOptions ? "select" : "text";

  if (format && hasWidget(schema, format, widgets)) {
    defaultWidget = format;
  }

  var _getUiOptions = getUiOptions(uiSchema),
      _getUiOptions$widget = _getUiOptions.widget,
      widget = _getUiOptions$widget === void 0 ? defaultWidget : _getUiOptions$widget,
      _getUiOptions$placeho = _getUiOptions.placeholder,
      placeholder = _getUiOptions$placeho === void 0 ? "" : _getUiOptions$placeho,
      options = StringField_objectWithoutProperties(_getUiOptions, ["widget", "placeholder"]);

  var Widget = getWidget(schema, widget, widgets);
  return react.createElement(Widget, {
    options: StringField_objectSpread({}, options, {
      enumOptions: enumOptions
    }),
    schema: schema,
    uiSchema: uiSchema,
    id: idSchema && idSchema.$id,
    label: title === undefined ? name : title,
    value: formData,
    onChange: onChange,
    onBlur: onBlur,
    onFocus: onFocus,
    required: required,
    disabled: disabled,
    readonly: readonly,
    formContext: formContext,
    autofocus: autofocus,
    registry: registry,
    placeholder: placeholder,
    rawErrors: rawErrors
  });
}

if (false) {}

StringField.defaultProps = {
  uiSchema: {},
  disabled: false,
  readonly: false,
  autofocus: false
};
/* harmony default export */ const fields_StringField = (StringField);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/fields/TitleField.js


var TitleField_REQUIRED_FIELD_SYMBOL = "*";

function TitleField(props) {
  var id = props.id,
      title = props.title,
      required = props.required;
  return react.createElement("legend", {
    id: id
  }, title, required && react.createElement("span", {
    className: "required"
  }, TitleField_REQUIRED_FIELD_SYMBOL));
}

if (false) {}

/* harmony default export */ const fields_TitleField = (TitleField);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/fields/NullField.js
function NullField_typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    NullField_typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    NullField_typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return NullField_typeof(obj);
}

function NullField_classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function NullField_defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function NullField_createClass(Constructor, protoProps, staticProps) {
  if (protoProps) NullField_defineProperties(Constructor.prototype, protoProps);
  if (staticProps) NullField_defineProperties(Constructor, staticProps);
  return Constructor;
}

function NullField_possibleConstructorReturn(self, call) {
  if (call && (NullField_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return NullField_assertThisInitialized(self);
}

function NullField_assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function NullField_getPrototypeOf(o) {
  NullField_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return NullField_getPrototypeOf(o);
}

function NullField_inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) NullField_setPrototypeOf(subClass, superClass);
}

function NullField_setPrototypeOf(o, p) {
  NullField_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return NullField_setPrototypeOf(o, p);
}




var NullField = /*#__PURE__*/function (_Component) {
  NullField_inherits(NullField, _Component);

  function NullField() {
    NullField_classCallCheck(this, NullField);

    return NullField_possibleConstructorReturn(this, NullField_getPrototypeOf(NullField).apply(this, arguments));
  }

  NullField_createClass(NullField, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.formData === undefined) {
        this.props.onChange(null);
      }
    }
  }, {
    key: "render",
    value: function render() {
      return null;
    }
  }]);

  return NullField;
}(react.Component);

if (false) {}

/* harmony default export */ const fields_NullField = (NullField);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/fields/UnsupportedField.js



function UnsupportedField(_ref) {
  var schema = _ref.schema,
      idSchema = _ref.idSchema,
      reason = _ref.reason;
  return react.createElement("div", {
    className: "unsupported-field"
  }, react.createElement("p", null, "Unsupported field schema", idSchema && idSchema.$id && react.createElement("span", null, " for", " field ", react.createElement("code", null, idSchema.$id)), reason && react.createElement("em", null, ": ", reason), "."), schema && react.createElement("pre", null, JSON.stringify(schema, null, 2)));
}

if (false) {}

/* harmony default export */ const fields_UnsupportedField = (UnsupportedField);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/fields/index.js











/* harmony default export */ const fields = ({
  AnyOfField: MultiSchemaField,
  ArrayField: fields_ArrayField,
  BooleanField: fields_BooleanField,
  DescriptionField: fields_DescriptionField,
  NumberField: fields_NumberField,
  ObjectField: fields_ObjectField,
  OneOfField: MultiSchemaField,
  SchemaField: fields_SchemaField,
  StringField: fields_StringField,
  TitleField: fields_TitleField,
  NullField: fields_NullField,
  UnsupportedField: fields_UnsupportedField
});
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/widgets/AltDateWidget.js
function AltDateWidget_typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    AltDateWidget_typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    AltDateWidget_typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return AltDateWidget_typeof(obj);
}

function AltDateWidget_extends() {
  AltDateWidget_extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return AltDateWidget_extends.apply(this, arguments);
}

function AltDateWidget_classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function AltDateWidget_defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function AltDateWidget_createClass(Constructor, protoProps, staticProps) {
  if (protoProps) AltDateWidget_defineProperties(Constructor.prototype, protoProps);
  if (staticProps) AltDateWidget_defineProperties(Constructor, staticProps);
  return Constructor;
}

function AltDateWidget_possibleConstructorReturn(self, call) {
  if (call && (AltDateWidget_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return AltDateWidget_assertThisInitialized(self);
}

function AltDateWidget_getPrototypeOf(o) {
  AltDateWidget_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return AltDateWidget_getPrototypeOf(o);
}

function AltDateWidget_assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function AltDateWidget_inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) AltDateWidget_setPrototypeOf(subClass, superClass);
}

function AltDateWidget_setPrototypeOf(o, p) {
  AltDateWidget_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return AltDateWidget_setPrototypeOf(o, p);
}

function AltDateWidget_defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}





function rangeOptions(start, stop) {
  var options = [];

  for (var i = start; i <= stop; i++) {
    options.push({
      value: i,
      label: pad(i, 2)
    });
  }

  return options;
}

function readyForChange(state) {
  return Object.keys(state).every(function (key) {
    return state[key] !== -1;
  });
}

function DateElement(props) {
  var type = props.type,
      range = props.range,
      value = props.value,
      select = props.select,
      rootId = props.rootId,
      disabled = props.disabled,
      readonly = props.readonly,
      autofocus = props.autofocus,
      registry = props.registry,
      onBlur = props.onBlur;
  var id = rootId + "_" + type;
  var SelectWidget = registry.widgets.SelectWidget;
  return react.createElement(SelectWidget, {
    schema: {
      type: "integer"
    },
    id: id,
    className: "form-control",
    options: {
      enumOptions: rangeOptions(range[0], range[1])
    },
    placeholder: type,
    value: value,
    disabled: disabled,
    readonly: readonly,
    autofocus: autofocus,
    onChange: function onChange(value) {
      return select(type, value);
    },
    onBlur: onBlur
  });
}

var AltDateWidget = /*#__PURE__*/function (_Component) {
  AltDateWidget_inherits(AltDateWidget, _Component);

  function AltDateWidget(props) {
    var _this;

    AltDateWidget_classCallCheck(this, AltDateWidget);

    _this = AltDateWidget_possibleConstructorReturn(this, AltDateWidget_getPrototypeOf(AltDateWidget).call(this, props));

    AltDateWidget_defineProperty(AltDateWidget_assertThisInitialized(_this), "onChange", function (property, value) {
      _this.setState(AltDateWidget_defineProperty({}, property, typeof value === "undefined" ? -1 : value), function () {
        // Only propagate to parent state if we have a complete date{time}
        if (readyForChange(_this.state)) {
          _this.props.onChange(toDateString(_this.state, _this.props.time));
        }
      });
    });

    AltDateWidget_defineProperty(AltDateWidget_assertThisInitialized(_this), "setNow", function (event) {
      event.preventDefault();
      var _this$props = _this.props,
          time = _this$props.time,
          disabled = _this$props.disabled,
          readonly = _this$props.readonly,
          onChange = _this$props.onChange;

      if (disabled || readonly) {
        return;
      }

      var nowDateObj = parseDateString(new Date().toJSON(), time);

      _this.setState(nowDateObj, function () {
        return onChange(toDateString(_this.state, time));
      });
    });

    AltDateWidget_defineProperty(AltDateWidget_assertThisInitialized(_this), "clear", function (event) {
      event.preventDefault();
      var _this$props2 = _this.props,
          time = _this$props2.time,
          disabled = _this$props2.disabled,
          readonly = _this$props2.readonly,
          onChange = _this$props2.onChange;

      if (disabled || readonly) {
        return;
      }

      _this.setState(parseDateString("", time), function () {
        return onChange(undefined);
      });
    });

    _this.state = parseDateString(props.value, props.time);
    return _this;
  }

  AltDateWidget_createClass(AltDateWidget, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (prevProps.value && prevProps.value !== parseDateString(this.props.value, this.props.time)) {
        this.setState(parseDateString(this.props.value, this.props.time));
      }
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return shouldRender(this, nextProps, nextState);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props3 = this.props,
          id = _this$props3.id,
          disabled = _this$props3.disabled,
          readonly = _this$props3.readonly,
          autofocus = _this$props3.autofocus,
          registry = _this$props3.registry,
          onBlur = _this$props3.onBlur,
          options = _this$props3.options;
      return react.createElement("ul", {
        className: "list-inline"
      }, this.dateElementProps.map(function (elemProps, i) {
        return react.createElement("li", {
          key: i
        }, react.createElement(DateElement, AltDateWidget_extends({
          rootId: id,
          select: _this2.onChange
        }, elemProps, {
          disabled: disabled,
          readonly: readonly,
          registry: registry,
          onBlur: onBlur,
          autofocus: autofocus && i === 0
        })));
      }), (options.hideNowButton !== "undefined" ? !options.hideNowButton : true) && react.createElement("li", null, react.createElement("a", {
        href: "#",
        className: "btn btn-info btn-now",
        onClick: this.setNow
      }, "Now")), (options.hideClearButton !== "undefined" ? !options.hideClearButton : true) && react.createElement("li", null, react.createElement("a", {
        href: "#",
        className: "btn btn-warning btn-clear",
        onClick: this.clear
      }, "Clear")));
    }
  }, {
    key: "dateElementProps",
    get: function get() {
      var _this$props4 = this.props,
          time = _this$props4.time,
          options = _this$props4.options;
      var _this$state = this.state,
          year = _this$state.year,
          month = _this$state.month,
          day = _this$state.day,
          hour = _this$state.hour,
          minute = _this$state.minute,
          second = _this$state.second;
      var data = [{
        type: "year",
        range: options.yearsRange,
        value: year
      }, {
        type: "month",
        range: [1, 12],
        value: month
      }, {
        type: "day",
        range: [1, 31],
        value: day
      }];

      if (time) {
        data.push({
          type: "hour",
          range: [0, 23],
          value: hour
        }, {
          type: "minute",
          range: [0, 59],
          value: minute
        }, {
          type: "second",
          range: [0, 59],
          value: second
        });
      }

      return data;
    }
  }]);

  return AltDateWidget;
}(react.Component);

AltDateWidget_defineProperty(AltDateWidget, "defaultProps", {
  time: false,
  disabled: false,
  readonly: false,
  autofocus: false,
  options: {
    yearsRange: [1900, new Date().getFullYear() + 2]
  }
});

if (false) {}

/* harmony default export */ const widgets_AltDateWidget = (AltDateWidget);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/widgets/AltDateTimeWidget.js
function AltDateTimeWidget_objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      AltDateTimeWidget_defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function AltDateTimeWidget_defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function AltDateTimeWidget_extends() {
  AltDateTimeWidget_extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return AltDateTimeWidget_extends.apply(this, arguments);
}





function AltDateTimeWidget(props) {
  var AltDateWidget = props.registry.widgets.AltDateWidget;
  return react.createElement(AltDateWidget, AltDateTimeWidget_extends({
    time: true
  }, props));
}

if (false) {}

AltDateTimeWidget.defaultProps = AltDateTimeWidget_objectSpread({}, widgets_AltDateWidget.defaultProps, {
  time: true
});
/* harmony default export */ const widgets_AltDateTimeWidget = (AltDateTimeWidget);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/widgets/BaseInput.js
function BaseInput_toConsumableArray(arr) {
  return BaseInput_arrayWithoutHoles(arr) || BaseInput_iterableToArray(arr) || BaseInput_nonIterableSpread();
}

function BaseInput_nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function BaseInput_iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function BaseInput_arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

function BaseInput_extends() {
  BaseInput_extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return BaseInput_extends.apply(this, arguments);
}

function BaseInput_objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = BaseInput_objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function BaseInput_objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}




function BaseInput(props) {
  // Note: since React 15.2.0 we can't forward unknown element attributes, so we
  // exclude the "options" and "schema" ones here.
  if (!props.id) {
    console.log("No id for", props);
    throw new Error("no id for props ".concat(JSON.stringify(props)));
  }

  var value = props.value,
      readonly = props.readonly,
      disabled = props.disabled,
      autofocus = props.autofocus,
      onBlur = props.onBlur,
      onFocus = props.onFocus,
      options = props.options,
      schema = props.schema,
      uiSchema = props.uiSchema,
      formContext = props.formContext,
      registry = props.registry,
      rawErrors = props.rawErrors,
      inputProps = BaseInput_objectWithoutProperties(props, ["value", "readonly", "disabled", "autofocus", "onBlur", "onFocus", "options", "schema", "uiSchema", "formContext", "registry", "rawErrors"]); // If options.inputType is set use that as the input type


  if (options.inputType) {
    inputProps.type = options.inputType;
  } else if (!inputProps.type) {
    // If the schema is of type number or integer, set the input type to number
    if (schema.type === "number") {
      inputProps.type = "number"; // Setting step to 'any' fixes a bug in Safari where decimals are not
      // allowed in number inputs

      inputProps.step = "any";
    } else if (schema.type === "integer") {
      inputProps.type = "number"; // Since this is integer, you always want to step up or down in multiples
      // of 1

      inputProps.step = "1";
    } else {
      inputProps.type = "text";
    }
  }

  if (options.autocomplete) {
    inputProps.autoComplete = options.autocomplete;
  } // If multipleOf is defined, use this as the step value. This mainly improves
  // the experience for keyboard users (who can use the up/down KB arrows).


  if (schema.multipleOf) {
    inputProps.step = schema.multipleOf;
  }

  if (typeof schema.minimum !== "undefined") {
    inputProps.min = schema.minimum;
  }

  if (typeof schema.maximum !== "undefined") {
    inputProps.max = schema.maximum;
  }

  var _onChange = function _onChange(_ref) {
    var value = _ref.target.value;
    return props.onChange(value === "" ? options.emptyValue : value);
  };

  return [react.createElement("input", BaseInput_extends({
    key: inputProps.id,
    className: "form-control",
    readOnly: readonly,
    disabled: disabled,
    autoFocus: autofocus,
    value: value == null ? "" : value
  }, inputProps, {
    list: schema.examples ? "examples_".concat(inputProps.id) : null,
    onChange: _onChange,
    onBlur: onBlur && function (event) {
      return onBlur(inputProps.id, event.target.value);
    },
    onFocus: onFocus && function (event) {
      return onFocus(inputProps.id, event.target.value);
    }
  })), schema.examples ? react.createElement("datalist", {
    key: "datalist_".concat(inputProps.id),
    id: "examples_".concat(inputProps.id)
  }, BaseInput_toConsumableArray(new Set(schema.examples.concat(schema["default"] ? [schema["default"]] : []))).map(function (example) {
    return react.createElement("option", {
      key: example,
      value: example
    });
  })) : null];
}

BaseInput.defaultProps = {
  required: false,
  disabled: false,
  readonly: false,
  autofocus: false
};

if (false) {}

/* harmony default export */ const widgets_BaseInput = (BaseInput);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/widgets/CheckboxWidget.js




function CheckboxWidget(props) {
  var schema = props.schema,
      id = props.id,
      value = props.value,
      disabled = props.disabled,
      readonly = props.readonly,
      label = props.label,
      autofocus = props.autofocus,
      onBlur = props.onBlur,
      onFocus = props.onFocus,
      _onChange = props.onChange,
      DescriptionField = props.DescriptionField; // Because an unchecked checkbox will cause html5 validation to fail, only add
  // the "required" attribute if the field value must be "true", due to the
  // "const" or "enum" keywords

  var required = schemaRequiresTrueValue(schema);
  return react.createElement("div", {
    className: "checkbox ".concat(disabled || readonly ? "disabled" : "")
  }, schema.description && react.createElement(DescriptionField, {
    description: schema.description
  }), react.createElement("label", null, react.createElement("input", {
    type: "checkbox",
    id: id,
    checked: typeof value === "undefined" ? false : value,
    required: required,
    disabled: disabled || readonly,
    autoFocus: autofocus,
    onChange: function onChange(event) {
      return _onChange(event.target.checked);
    },
    onBlur: onBlur && function (event) {
      return onBlur(id, event.target.checked);
    },
    onFocus: onFocus && function (event) {
      return onFocus(id, event.target.checked);
    }
  }), react.createElement("span", null, label)));
}

CheckboxWidget.defaultProps = {
  autofocus: false
};

if (false) {}

/* harmony default export */ const widgets_CheckboxWidget = (CheckboxWidget);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/widgets/CheckboxesWidget.js



function selectValue(value, selected, all) {
  var at = all.indexOf(value);
  var updated = selected.slice(0, at).concat(value, selected.slice(at)); // As inserting values at predefined index positions doesn't work with empty
  // arrays, we need to reorder the updated selection to match the initial order

  return updated.sort(function (a, b) {
    return all.indexOf(a) > all.indexOf(b);
  });
}

function deselectValue(value, selected) {
  return selected.filter(function (v) {
    return v !== value;
  });
}

function CheckboxesWidget(props) {
  var id = props.id,
      disabled = props.disabled,
      options = props.options,
      value = props.value,
      autofocus = props.autofocus,
      readonly = props.readonly,
      _onChange = props.onChange;
  var enumOptions = options.enumOptions,
      enumDisabled = options.enumDisabled,
      inline = options.inline;
  return react.createElement("div", {
    className: "checkboxes",
    id: id
  }, enumOptions.map(function (option, index) {
    var checked = value.indexOf(option.value) !== -1;
    var itemDisabled = enumDisabled && enumDisabled.indexOf(option.value) != -1;
    var disabledCls = disabled || itemDisabled || readonly ? "disabled" : "";
    var checkbox = react.createElement("span", null, react.createElement("input", {
      type: "checkbox",
      id: "".concat(id, "_").concat(index),
      checked: checked,
      disabled: disabled || itemDisabled || readonly,
      autoFocus: autofocus && index === 0,
      onChange: function onChange(event) {
        var all = enumOptions.map(function (_ref) {
          var value = _ref.value;
          return value;
        });

        if (event.target.checked) {
          _onChange(selectValue(option.value, value, all));
        } else {
          _onChange(deselectValue(option.value, value));
        }
      }
    }), react.createElement("span", null, option.label));
    return inline ? react.createElement("label", {
      key: index,
      className: "checkbox-inline ".concat(disabledCls)
    }, checkbox) : react.createElement("div", {
      key: index,
      className: "checkbox ".concat(disabledCls)
    }, react.createElement("label", null, checkbox));
  }));
}

CheckboxesWidget.defaultProps = {
  autofocus: false,
  options: {
    inline: false
  }
};

if (false) {}

/* harmony default export */ const widgets_CheckboxesWidget = (CheckboxesWidget);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/widgets/ColorWidget.js
function ColorWidget_extends() {
  ColorWidget_extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return ColorWidget_extends.apply(this, arguments);
}




function ColorWidget(props) {
  var disabled = props.disabled,
      readonly = props.readonly,
      BaseInput = props.registry.widgets.BaseInput;
  return react.createElement(BaseInput, ColorWidget_extends({
    type: "color"
  }, props, {
    disabled: disabled || readonly
  }));
}

if (false) {}

/* harmony default export */ const widgets_ColorWidget = (ColorWidget);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/widgets/DateWidget.js
function DateWidget_extends() {
  DateWidget_extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return DateWidget_extends.apply(this, arguments);
}




function DateWidget(props) {
  var _onChange = props.onChange,
      BaseInput = props.registry.widgets.BaseInput;
  return react.createElement(BaseInput, DateWidget_extends({
    type: "date"
  }, props, {
    onChange: function onChange(value) {
      return _onChange(value || undefined);
    }
  }));
}

if (false) {}

/* harmony default export */ const widgets_DateWidget = (DateWidget);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/widgets/DateTimeWidget.js
function DateTimeWidget_extends() {
  DateTimeWidget_extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return DateTimeWidget_extends.apply(this, arguments);
}





function DateTimeWidget(props) {
  var value = props.value,
      _onChange = props.onChange,
      BaseInput = props.registry.widgets.BaseInput;
  return react.createElement(BaseInput, DateTimeWidget_extends({
    type: "datetime-local"
  }, props, {
    value: utcToLocal(value),
    onChange: function onChange(value) {
      return _onChange(localToUTC(value));
    }
  }));
}

if (false) {}

/* harmony default export */ const widgets_DateTimeWidget = (DateTimeWidget);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/widgets/EmailWidget.js
function EmailWidget_extends() {
  EmailWidget_extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return EmailWidget_extends.apply(this, arguments);
}




function EmailWidget(props) {
  var BaseInput = props.registry.widgets.BaseInput;
  return react.createElement(BaseInput, EmailWidget_extends({
    type: "email"
  }, props));
}

if (false) {}

/* harmony default export */ const widgets_EmailWidget = (EmailWidget);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/widgets/FileWidget.js
function FileWidget_typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    FileWidget_typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    FileWidget_typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return FileWidget_typeof(obj);
}

function FileWidget_classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function FileWidget_defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function FileWidget_createClass(Constructor, protoProps, staticProps) {
  if (protoProps) FileWidget_defineProperties(Constructor.prototype, protoProps);
  if (staticProps) FileWidget_defineProperties(Constructor, staticProps);
  return Constructor;
}

function FileWidget_possibleConstructorReturn(self, call) {
  if (call && (FileWidget_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return FileWidget_assertThisInitialized(self);
}

function FileWidget_getPrototypeOf(o) {
  FileWidget_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return FileWidget_getPrototypeOf(o);
}

function FileWidget_assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function FileWidget_inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) FileWidget_setPrototypeOf(subClass, superClass);
}

function FileWidget_setPrototypeOf(o, p) {
  FileWidget_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return FileWidget_setPrototypeOf(o, p);
}

function FileWidget_defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}





function addNameToDataURL(dataURL, name) {
  return dataURL.replace(";base64", ";name=".concat(encodeURIComponent(name), ";base64"));
}

function processFile(file) {
  var name = file.name,
      size = file.size,
      type = file.type;
  return new Promise(function (resolve, reject) {
    var reader = new window.FileReader();
    reader.onerror = reject;

    reader.onload = function (event) {
      resolve({
        dataURL: addNameToDataURL(event.target.result, name),
        name: name,
        size: size,
        type: type
      });
    };

    reader.readAsDataURL(file);
  });
}

function processFiles(files) {
  return Promise.all([].map.call(files, processFile));
}

function FilesInfo(props) {
  var filesInfo = props.filesInfo;

  if (filesInfo.length === 0) {
    return null;
  }

  return react.createElement("ul", {
    className: "file-info"
  }, filesInfo.map(function (fileInfo, key) {
    var name = fileInfo.name,
        size = fileInfo.size,
        type = fileInfo.type;
    return react.createElement("li", {
      key: key
    }, react.createElement("strong", null, name), " (", type, ", ", size, " bytes)");
  }));
}

function extractFileInfo(dataURLs) {
  return dataURLs.filter(function (dataURL) {
    return typeof dataURL !== "undefined";
  }).map(function (dataURL) {
    var _dataURItoBlob = dataURItoBlob(dataURL),
        blob = _dataURItoBlob.blob,
        name = _dataURItoBlob.name;

    return {
      name: name,
      size: blob.size,
      type: blob.type
    };
  });
}

var FileWidget = /*#__PURE__*/function (_Component) {
  FileWidget_inherits(FileWidget, _Component);

  function FileWidget(props) {
    var _this;

    FileWidget_classCallCheck(this, FileWidget);

    _this = FileWidget_possibleConstructorReturn(this, FileWidget_getPrototypeOf(FileWidget).call(this, props));

    FileWidget_defineProperty(FileWidget_assertThisInitialized(_this), "onChange", function (event) {
      var _this$props = _this.props,
          multiple = _this$props.multiple,
          onChange = _this$props.onChange;
      processFiles(event.target.files).then(function (filesInfo) {
        var state = {
          values: filesInfo.map(function (fileInfo) {
            return fileInfo.dataURL;
          }),
          filesInfo: filesInfo
        };

        _this.setState(state, function () {
          if (multiple) {
            onChange(state.values);
          } else {
            onChange(state.values[0]);
          }
        });
      });
    });

    var value = props.value;
    var values = Array.isArray(value) ? value : [value];
    _this.state = {
      values: values,
      filesInfo: extractFileInfo(values)
    };
    return _this;
  }

  FileWidget_createClass(FileWidget, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return shouldRender(this, nextProps, nextState);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          multiple = _this$props2.multiple,
          id = _this$props2.id,
          readonly = _this$props2.readonly,
          disabled = _this$props2.disabled,
          autofocus = _this$props2.autofocus,
          options = _this$props2.options;
      var filesInfo = this.state.filesInfo;
      return react.createElement("div", null, react.createElement("p", null, react.createElement("input", {
        ref: function ref(_ref) {
          return _this2.inputRef = _ref;
        },
        id: id,
        type: "file",
        disabled: readonly || disabled,
        onChange: this.onChange,
        defaultValue: "",
        autoFocus: autofocus,
        multiple: multiple,
        accept: options.accept
      })), react.createElement(FilesInfo, {
        filesInfo: filesInfo
      }));
    }
  }]);

  return FileWidget;
}(react.Component);

FileWidget.defaultProps = {
  autofocus: false
};

if (false) {}

/* harmony default export */ const widgets_FileWidget = (FileWidget);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/widgets/HiddenWidget.js



function HiddenWidget(_ref) {
  var id = _ref.id,
      value = _ref.value;
  return react.createElement("input", {
    type: "hidden",
    id: id,
    value: typeof value === "undefined" ? "" : value
  });
}

if (false) {}

/* harmony default export */ const widgets_HiddenWidget = (HiddenWidget);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/widgets/PasswordWidget.js
function PasswordWidget_extends() {
  PasswordWidget_extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return PasswordWidget_extends.apply(this, arguments);
}




function PasswordWidget(props) {
  var BaseInput = props.registry.widgets.BaseInput;
  return react.createElement(BaseInput, PasswordWidget_extends({
    type: "password"
  }, props));
}

if (false) {}

/* harmony default export */ const widgets_PasswordWidget = (PasswordWidget);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/widgets/RadioWidget.js



function RadioWidget(props) {
  var options = props.options,
      value = props.value,
      required = props.required,
      disabled = props.disabled,
      readonly = props.readonly,
      autofocus = props.autofocus,
      onBlur = props.onBlur,
      onFocus = props.onFocus,
      _onChange = props.onChange,
      id = props.id; // Generating a unique field name to identify this set of radio buttons

  var name = Math.random().toString();
  var enumOptions = options.enumOptions,
      enumDisabled = options.enumDisabled,
      inline = options.inline; // checked={checked} has been moved above name={name}, As mentioned in #349;
  // this is a temporary fix for radio button rendering bug in React, facebook/react#7630.

  return react.createElement("div", {
    className: "field-radio-group",
    id: id
  }, enumOptions.map(function (option, i) {
    var checked = option.value === value;
    var itemDisabled = enumDisabled && enumDisabled.indexOf(option.value) != -1;
    var disabledCls = disabled || itemDisabled || readonly ? "disabled" : "";
    var radio = react.createElement("span", null, react.createElement("input", {
      type: "radio",
      checked: checked,
      name: name,
      required: required,
      value: option.value,
      disabled: disabled || itemDisabled || readonly,
      autoFocus: autofocus && i === 0,
      onChange: function onChange(_) {
        return _onChange(option.value);
      },
      onBlur: onBlur && function (event) {
        return onBlur(id, event.target.value);
      },
      onFocus: onFocus && function (event) {
        return onFocus(id, event.target.value);
      }
    }), react.createElement("span", null, option.label));
    return inline ? react.createElement("label", {
      key: i,
      className: "radio-inline ".concat(disabledCls)
    }, radio) : react.createElement("div", {
      key: i,
      className: "radio ".concat(disabledCls)
    }, react.createElement("label", null, radio));
  }));
}

RadioWidget.defaultProps = {
  autofocus: false
};

if (false) {}

/* harmony default export */ const widgets_RadioWidget = (RadioWidget);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/widgets/RangeWidget.js
function RangeWidget_extends() {
  RangeWidget_extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return RangeWidget_extends.apply(this, arguments);
}





function RangeWidget(props) {
  var schema = props.schema,
      value = props.value,
      BaseInput = props.registry.widgets.BaseInput;
  return react.createElement("div", {
    className: "field-range-wrapper"
  }, react.createElement(BaseInput, RangeWidget_extends({
    type: "range"
  }, props, rangeSpec(schema))), react.createElement("span", {
    className: "range-view"
  }, value));
}

if (false) {}

/* harmony default export */ const widgets_RangeWidget = (RangeWidget);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/widgets/SelectWidget.js



var nums = new Set(["number", "integer"]);
/**
 * This is a silly limitation in the DOM where option change event values are
 * always retrieved as strings.
 */

function processValue(schema, value) {
  // "enum" is a reserved word, so only "type" and "items" can be destructured
  var type = schema.type,
      items = schema.items;

  if (value === "") {
    return undefined;
  } else if (type === "array" && items && nums.has(items.type)) {
    return value.map(asNumber);
  } else if (type === "boolean") {
    return value === "true";
  } else if (type === "number") {
    return asNumber(value);
  } // If type is undefined, but an enum is present, try and infer the type from
  // the enum values


  if (schema["enum"]) {
    if (schema["enum"].every(function (x) {
      return guessType(x) === "number";
    })) {
      return asNumber(value);
    } else if (schema["enum"].every(function (x) {
      return guessType(x) === "boolean";
    })) {
      return value === "true";
    }
  }

  return value;
}

function getValue(event, multiple) {
  if (multiple) {
    return [].slice.call(event.target.options).filter(function (o) {
      return o.selected;
    }).map(function (o) {
      return o.value;
    });
  } else {
    return event.target.value;
  }
}

function SelectWidget(props) {
  var schema = props.schema,
      id = props.id,
      options = props.options,
      value = props.value,
      required = props.required,
      disabled = props.disabled,
      readonly = props.readonly,
      multiple = props.multiple,
      autofocus = props.autofocus,
      _onChange = props.onChange,
      onBlur = props.onBlur,
      onFocus = props.onFocus,
      placeholder = props.placeholder;
  var enumOptions = options.enumOptions,
      enumDisabled = options.enumDisabled;
  var emptyValue = multiple ? [] : "";
  return react.createElement("select", {
    id: id,
    multiple: multiple,
    className: "form-control",
    value: typeof value === "undefined" ? emptyValue : value,
    required: required,
    disabled: disabled || readonly,
    autoFocus: autofocus,
    onBlur: onBlur && function (event) {
      var newValue = getValue(event, multiple);
      onBlur(id, processValue(schema, newValue));
    },
    onFocus: onFocus && function (event) {
      var newValue = getValue(event, multiple);
      onFocus(id, processValue(schema, newValue));
    },
    onChange: function onChange(event) {
      var newValue = getValue(event, multiple);

      _onChange(processValue(schema, newValue));
    }
  }, !multiple && schema["default"] === undefined && react.createElement("option", {
    value: ""
  }, placeholder), enumOptions.map(function (_ref, i) {
    var value = _ref.value,
        label = _ref.label;
    var disabled = enumDisabled && enumDisabled.indexOf(value) != -1;
    return react.createElement("option", {
      key: i,
      value: value,
      disabled: disabled
    }, label);
  }));
}

SelectWidget.defaultProps = {
  autofocus: false
};

if (false) {}

/* harmony default export */ const widgets_SelectWidget = (SelectWidget);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/widgets/TextareaWidget.js



function TextareaWidget(props) {
  var id = props.id,
      options = props.options,
      placeholder = props.placeholder,
      value = props.value,
      required = props.required,
      disabled = props.disabled,
      readonly = props.readonly,
      autofocus = props.autofocus,
      onChange = props.onChange,
      onBlur = props.onBlur,
      onFocus = props.onFocus;

  var _onChange = function _onChange(_ref) {
    var value = _ref.target.value;
    return onChange(value === "" ? options.emptyValue : value);
  };

  return react.createElement("textarea", {
    id: id,
    className: "form-control",
    value: value ? value : "",
    placeholder: placeholder,
    required: required,
    disabled: disabled,
    readOnly: readonly,
    autoFocus: autofocus,
    rows: options.rows,
    onBlur: onBlur && function (event) {
      return onBlur(id, event.target.value);
    },
    onFocus: onFocus && function (event) {
      return onFocus(id, event.target.value);
    },
    onChange: _onChange
  });
}

TextareaWidget.defaultProps = {
  autofocus: false,
  options: {}
};

if (false) {}

/* harmony default export */ const widgets_TextareaWidget = (TextareaWidget);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/widgets/TextWidget.js



function TextWidget(props) {
  var BaseInput = props.registry.widgets.BaseInput;
  return react.createElement(BaseInput, props);
}

if (false) {}

/* harmony default export */ const widgets_TextWidget = (TextWidget);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/widgets/URLWidget.js
function URLWidget_extends() {
  URLWidget_extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return URLWidget_extends.apply(this, arguments);
}




function URLWidget(props) {
  var BaseInput = props.registry.widgets.BaseInput;
  return react.createElement(BaseInput, URLWidget_extends({
    type: "url"
  }, props));
}

if (false) {}

/* harmony default export */ const widgets_URLWidget = (URLWidget);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/widgets/UpDownWidget.js
function UpDownWidget_extends() {
  UpDownWidget_extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return UpDownWidget_extends.apply(this, arguments);
}





function UpDownWidget(props) {
  var BaseInput = props.registry.widgets.BaseInput;
  return react.createElement(BaseInput, UpDownWidget_extends({
    type: "number"
  }, props, rangeSpec(props.schema)));
}

if (false) {}

/* harmony default export */ const widgets_UpDownWidget = (UpDownWidget);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/widgets/index.js



















/* harmony default export */ const widgets = ({
  BaseInput: widgets_BaseInput,
  PasswordWidget: widgets_PasswordWidget,
  RadioWidget: widgets_RadioWidget,
  UpDownWidget: widgets_UpDownWidget,
  RangeWidget: widgets_RangeWidget,
  SelectWidget: widgets_SelectWidget,
  TextWidget: widgets_TextWidget,
  DateWidget: widgets_DateWidget,
  DateTimeWidget: widgets_DateTimeWidget,
  AltDateWidget: widgets_AltDateWidget,
  AltDateTimeWidget: widgets_AltDateTimeWidget,
  EmailWidget: widgets_EmailWidget,
  URLWidget: widgets_URLWidget,
  TextareaWidget: widgets_TextareaWidget,
  HiddenWidget: widgets_HiddenWidget,
  ColorWidget: widgets_ColorWidget,
  FileWidget: widgets_FileWidget,
  CheckboxWidget: widgets_CheckboxWidget,
  CheckboxesWidget: widgets_CheckboxesWidget
});
// EXTERNAL MODULE: ./node_modules/lodash/toPath.js
var toPath = __webpack_require__("./node_modules/lodash/toPath.js");
var toPath_default = /*#__PURE__*/__webpack_require__.n(toPath);
// EXTERNAL MODULE: ./node_modules/ajv/lib/ajv.js
var lib_ajv = __webpack_require__("./node_modules/ajv/lib/ajv.js");
var ajv_default = /*#__PURE__*/__webpack_require__.n(lib_ajv);
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/validate.js
function validate_toConsumableArray(arr) {
  return validate_arrayWithoutHoles(arr) || validate_iterableToArray(arr) || validate_nonIterableSpread();
}

function validate_nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function validate_iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function validate_arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

function validate_objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      validate_defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function validate_defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}



var ajv = createAjvInstance();

var formerCustomFormats = null;
var formerMetaSchema = null;
var ROOT_SCHEMA_PREFIX = "__rjsf_rootSchema";


function createAjvInstance() {
  var ajv = new (ajv_default())({
    errorDataPath: "property",
    allErrors: true,
    multipleOfPrecision: 8,
    schemaId: "auto",
    unknownFormats: "ignore"
  }); // add custom formats

  ajv.addFormat("data-url", /^data:([a-z]+\/[a-z0-9-+.]+)?;(?:name=(.*);)?base64,(.*)$/);
  ajv.addFormat("color", /^(#?([0-9A-Fa-f]{3}){1,2}\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\(\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*\))|(rgb\(\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*\)))$/);
  return ajv;
}

function toErrorSchema(errors) {
  // Transforms a ajv validation errors list:
  // [
  //   {property: ".level1.level2[2].level3", message: "err a"},
  //   {property: ".level1.level2[2].level3", message: "err b"},
  //   {property: ".level1.level2[4].level3", message: "err b"},
  // ]
  // Into an error tree:
  // {
  //   level1: {
  //     level2: {
  //       2: {level3: {errors: ["err a", "err b"]}},
  //       4: {level3: {errors: ["err b"]}},
  //     }
  //   }
  // };
  if (!errors.length) {
    return {};
  }

  return errors.reduce(function (errorSchema, error) {
    var property = error.property,
        message = error.message;
    var path = toPath_default()(property);
    var parent = errorSchema; // If the property is at the root (.level1) then toPath creates
    // an empty array element at the first index. Remove it.

    if (path.length > 0 && path[0] === "") {
      path.splice(0, 1);
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = path.slice(0)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var segment = _step.value;

        if (!(segment in parent)) {
          parent[segment] = {};
        }

        parent = parent[segment];
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (Array.isArray(parent.__errors)) {
      // We store the list of errors for this node in a property named __errors
      // to avoid name collision with a possible sub schema field named
      // "errors" (see `validate.createErrorHandler`).
      parent.__errors = parent.__errors.concat(message);
    } else {
      if (message) {
        parent.__errors = [message];
      }
    }

    return errorSchema;
  }, {});
}

function toErrorList(errorSchema) {
  var fieldName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "root"; // XXX: We should transform fieldName as a full field path string.

  var errorList = [];

  if ("__errors" in errorSchema) {
    errorList = errorList.concat(errorSchema.__errors.map(function (stack) {
      return {
        stack: "".concat(fieldName, ": ").concat(stack)
      };
    }));
  }

  return Object.keys(errorSchema).reduce(function (acc, key) {
    if (key !== "__errors") {
      acc = acc.concat(toErrorList(errorSchema[key], key));
    }

    return acc;
  }, errorList);
}

function createErrorHandler(formData) {
  var handler = {
    // We store the list of errors for this node in a property named __errors
    // to avoid name collision with a possible sub schema field named
    // "errors" (see `utils.toErrorSchema`).
    __errors: [],
    addError: function addError(message) {
      this.__errors.push(message);
    }
  };

  if (isObject(formData)) {
    return Object.keys(formData).reduce(function (acc, key) {
      return validate_objectSpread({}, acc, validate_defineProperty({}, key, createErrorHandler(formData[key])));
    }, handler);
  }

  if (Array.isArray(formData)) {
    return formData.reduce(function (acc, value, key) {
      return validate_objectSpread({}, acc, validate_defineProperty({}, key, createErrorHandler(value)));
    }, handler);
  }

  return handler;
}

function unwrapErrorHandler(errorHandler) {
  return Object.keys(errorHandler).reduce(function (acc, key) {
    if (key === "addError") {
      return acc;
    } else if (key === "__errors") {
      return validate_objectSpread({}, acc, validate_defineProperty({}, key, errorHandler[key]));
    }

    return validate_objectSpread({}, acc, validate_defineProperty({}, key, unwrapErrorHandler(errorHandler[key])));
  }, {});
}
/**
 * Transforming the error output from ajv to format used by jsonschema.
 * At some point, components should be updated to support ajv.
 */


function transformAjvErrors() {
  var errors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  if (errors === null) {
    return [];
  }

  return errors.map(function (e) {
    var dataPath = e.dataPath,
        keyword = e.keyword,
        message = e.message,
        params = e.params,
        schemaPath = e.schemaPath;
    var property = "".concat(dataPath); // put data in expected format

    return {
      name: keyword,
      property: property,
      message: message,
      params: params,
      // specific to ajv
      stack: "".concat(property, " ").concat(message).trim(),
      schemaPath: schemaPath
    };
  });
}
/**
 * This function processes the formData with a user `validate` contributed
 * function, which receives the form data and an `errorHandler` object that
 * will be used to add custom validation errors for each field.
 */


function validateFormData(formData, schema, customValidate, transformErrors) {
  var additionalMetaSchemas = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
  var customFormats = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {}; // Include form data with undefined values, which is required for validation.

  var rootSchema = schema;
  formData = getDefaultFormState(schema, formData, rootSchema, true);
  var newMetaSchemas = !deepEquals(formerMetaSchema, additionalMetaSchemas);
  var newFormats = !deepEquals(formerCustomFormats, customFormats);

  if (newMetaSchemas || newFormats) {
    ajv = createAjvInstance();
  } // add more schemas to validate against


  if (additionalMetaSchemas && newMetaSchemas && Array.isArray(additionalMetaSchemas)) {
    ajv.addMetaSchema(additionalMetaSchemas);
    formerMetaSchema = additionalMetaSchemas;
  } // add more custom formats to validate against


  if (customFormats && newFormats && isObject(customFormats)) {
    Object.keys(customFormats).forEach(function (formatName) {
      ajv.addFormat(formatName, customFormats[formatName]);
    });
    formerCustomFormats = customFormats;
  }

  var validationError = null;

  try {
    ajv.validate(schema, formData);
  } catch (err) {
    validationError = err;
  }

  var errors = transformAjvErrors(ajv.errors); // Clear errors to prevent persistent errors, see #1104

  ajv.errors = null;
  var noProperMetaSchema = validationError && validationError.message && typeof validationError.message === "string" && validationError.message.includes("no schema with key or ref ");

  if (noProperMetaSchema) {
    errors = [].concat(validate_toConsumableArray(errors), [{
      stack: validationError.message
    }]);
  }

  if (typeof transformErrors === "function") {
    errors = transformErrors(errors);
  }

  var errorSchema = toErrorSchema(errors);

  if (noProperMetaSchema) {
    errorSchema = validate_objectSpread({}, errorSchema, {
      $schema: {
        __errors: [validationError.message]
      }
    });
  }

  if (typeof customValidate !== "function") {
    return {
      errors: errors,
      errorSchema: errorSchema
    };
  }

  var errorHandler = customValidate(formData, createErrorHandler(formData));
  var userErrorSchema = unwrapErrorHandler(errorHandler);
  var newErrorSchema = mergeObjects(errorSchema, userErrorSchema, true); // XXX: The errors list produced is not fully compliant with the format
  // exposed by the jsonschema lib, which contains full field paths and other
  // properties.

  var newErrors = toErrorList(newErrorSchema);
  return {
    errors: newErrors,
    errorSchema: newErrorSchema
  };
}
/**
 * Recursively prefixes all $ref's in a schema with `ROOT_SCHEMA_PREFIX`
 * This is used in isValid to make references to the rootSchema
 */

function withIdRefPrefix(schemaNode) {
  var obj = schemaNode;

  if (schemaNode.constructor === Object) {
    obj = validate_objectSpread({}, schemaNode);

    for (var key in obj) {
      var value = obj[key];

      if (key === "$ref" && typeof value === "string" && value.startsWith("#")) {
        obj[key] = ROOT_SCHEMA_PREFIX + value;
      } else {
        obj[key] = withIdRefPrefix(value);
      }
    }
  } else if (Array.isArray(schemaNode)) {
    obj = validate_toConsumableArray(schemaNode);

    for (var i = 0; i < obj.length; i++) {
      obj[i] = withIdRefPrefix(obj[i]);
    }
  }

  return obj;
}
/**
 * Validates data against a schema, returning true if the data is valid, or
 * false otherwise. If the schema is invalid, then this function will return
 * false.
 */

function isValid(schema, data, rootSchema) {
  try {
    // add the rootSchema ROOT_SCHEMA_PREFIX as id.
    // then rewrite the schema ref's to point to the rootSchema
    // this accounts for the case where schema have references to models
    // that lives in the rootSchema but not in the schema in question.
    return ajv.addSchema(rootSchema, ROOT_SCHEMA_PREFIX).validate(withIdRefPrefix(schema), data);
  } catch (e) {
    return false;
  } finally {
    // make sure we remove the rootSchema from the global ajv instance
    ajv.removeSchema(ROOT_SCHEMA_PREFIX);
  }
}
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/utils.js
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");

  return utils_typeof(key) === "symbol" ? key : String(key);
}

function _toPrimitive(input, hint) {
  if (utils_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];

  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (utils_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }

  return (hint === "string" ? String : Number)(input);
}

function utils_toConsumableArray(arr) {
  return utils_arrayWithoutHoles(arr) || utils_iterableToArray(arr) || utils_nonIterableSpread();
}

function utils_nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function utils_iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function utils_arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

function utils_typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    utils_typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    utils_typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return utils_typeof(obj);
}

function utils_extends() {
  utils_extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return utils_extends.apply(this, arguments);
}

function utils_objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      utils_defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function utils_defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function utils_objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = utils_objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function utils_objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}










var ADDITIONAL_PROPERTY_FLAG = "__additional_property";
var widgetMap = {
  "boolean": {
    checkbox: "CheckboxWidget",
    radio: "RadioWidget",
    select: "SelectWidget",
    hidden: "HiddenWidget"
  },
  string: {
    text: "TextWidget",
    password: "PasswordWidget",
    email: "EmailWidget",
    hostname: "TextWidget",
    ipv4: "TextWidget",
    ipv6: "TextWidget",
    uri: "URLWidget",
    "data-url": "FileWidget",
    radio: "RadioWidget",
    select: "SelectWidget",
    textarea: "TextareaWidget",
    hidden: "HiddenWidget",
    date: "DateWidget",
    datetime: "DateTimeWidget",
    "date-time": "DateTimeWidget",
    "alt-date": "AltDateWidget",
    "alt-datetime": "AltDateTimeWidget",
    color: "ColorWidget",
    file: "FileWidget"
  },
  number: {
    text: "TextWidget",
    select: "SelectWidget",
    updown: "UpDownWidget",
    range: "RangeWidget",
    radio: "RadioWidget",
    hidden: "HiddenWidget"
  },
  integer: {
    text: "TextWidget",
    select: "SelectWidget",
    updown: "UpDownWidget",
    range: "RangeWidget",
    radio: "RadioWidget",
    hidden: "HiddenWidget"
  },
  array: {
    select: "SelectWidget",
    checkboxes: "CheckboxesWidget",
    files: "FileWidget",
    hidden: "HiddenWidget"
  }
};
function canExpand(schema, uiSchema, formData) {
  if (!schema.additionalProperties) {
    return false;
  }

  var _getUiOptions = getUiOptions(uiSchema),
      expandable = _getUiOptions.expandable;

  if (expandable === false) {
    return expandable;
  } // if ui:options.expandable was not explicitly set to false, we can add
  // another property if we have not exceeded maxProperties yet


  if (schema.maxProperties !== undefined) {
    return Object.keys(formData).length < schema.maxProperties;
  }

  return true;
}
function getDefaultRegistry() {
  return {
    fields: fields,
    widgets: widgets,
    definitions: {},
    rootSchema: {},
    formContext: {}
  };
}
/* Gets the type of a given schema. */

function getSchemaType(schema) {
  var type = schema.type;

  if (!type && schema["const"]) {
    return guessType(schema["const"]);
  }

  if (!type && schema["enum"]) {
    return "string";
  }

  if (!type && (schema.properties || schema.additionalProperties)) {
    return "object";
  }

  if (type instanceof Array && type.length === 2 && type.includes("null")) {
    return type.find(function (type) {
      return type !== "null";
    });
  }

  return type;
}
function getWidget(schema, widget) {
  var registeredWidgets = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var type = getSchemaType(schema);

  function mergeOptions(Widget) {
    // cache return value as property of widget for proper react reconciliation
    if (!Widget.MergedWidget) {
      var defaultOptions = Widget.defaultProps && Widget.defaultProps.options || {};

      Widget.MergedWidget = function (_ref) {
        var _ref$options = _ref.options,
            options = _ref$options === void 0 ? {} : _ref$options,
            props = utils_objectWithoutProperties(_ref, ["options"]);

        return react.createElement(Widget, utils_extends({
          options: utils_objectSpread({}, defaultOptions, options)
        }, props));
      };
    }

    return Widget.MergedWidget;
  }

  if (typeof widget === "function" || react_is.isForwardRef(react.createElement(widget)) || react_is.isMemo(widget)) {
    return mergeOptions(widget);
  }

  if (typeof widget !== "string") {
    throw new Error("Unsupported widget definition: ".concat(utils_typeof(widget)));
  }

  if (registeredWidgets.hasOwnProperty(widget)) {
    var registeredWidget = registeredWidgets[widget];
    return getWidget(schema, registeredWidget, registeredWidgets);
  }

  if (!widgetMap.hasOwnProperty(type)) {
    throw new Error("No widget for type \"".concat(type, "\""));
  }

  if (widgetMap[type].hasOwnProperty(widget)) {
    var _registeredWidget = registeredWidgets[widgetMap[type][widget]];
    return getWidget(schema, _registeredWidget, registeredWidgets);
  }

  throw new Error("No widget \"".concat(widget, "\" for type \"").concat(type, "\""));
}
function hasWidget(schema, widget) {
  var registeredWidgets = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  try {
    getWidget(schema, widget, registeredWidgets);
    return true;
  } catch (e) {
    if (e.message && (e.message.startsWith("No widget") || e.message.startsWith("Unsupported widget"))) {
      return false;
    }

    throw e;
  }
}

function computeDefaults(_schema, parentDefaults, rootSchema) {
  var rawFormData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var includeUndefinedValues = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  var schema = isObject(_schema) ? _schema : {};
  var formData = isObject(rawFormData) ? rawFormData : {}; // Compute the defaults recursively: give highest priority to deepest nodes.

  var defaults = parentDefaults;

  if (isObject(defaults) && isObject(schema["default"])) {
    // For object defaults, only override parent defaults that are defined in
    // schema.default.
    defaults = mergeObjects(defaults, schema["default"]);
  } else if ("default" in schema) {
    // Use schema defaults for this node.
    defaults = schema["default"];
  } else if ("$ref" in schema) {
    // Use referenced schema defaults for this node.
    var refSchema = findSchemaDefinition(schema.$ref, rootSchema);
    return computeDefaults(refSchema, defaults, rootSchema, formData, includeUndefinedValues);
  } else if ("dependencies" in schema) {
    var resolvedSchema = resolveDependencies(schema, rootSchema, formData);
    return computeDefaults(resolvedSchema, defaults, rootSchema, formData, includeUndefinedValues);
  } else if (isFixedItems(schema)) {
    defaults = schema.items.map(function (itemSchema, idx) {
      return computeDefaults(itemSchema, Array.isArray(parentDefaults) ? parentDefaults[idx] : undefined, rootSchema, formData, includeUndefinedValues);
    });
  } else if ("oneOf" in schema) {
    schema = schema.oneOf[utils_getMatchingOption(undefined, schema.oneOf, rootSchema)];
  } else if ("anyOf" in schema) {
    schema = schema.anyOf[utils_getMatchingOption(undefined, schema.anyOf, rootSchema)];
  } // Not defaults defined for this node, fallback to generic typed ones.


  if (typeof defaults === "undefined") {
    defaults = schema["default"];
  }

  switch (getSchemaType(schema)) {
    // We need to recur for object schema inner default values.
    case "object":
      return Object.keys(schema.properties || {}).reduce(function (acc, key) {
        // Compute the defaults for this node, with the parent defaults we might
        // have from a previous run: defaults[key].
        var computedDefault = computeDefaults(schema.properties[key], (defaults || {})[key], rootSchema, (formData || {})[key], includeUndefinedValues);

        if (includeUndefinedValues || computedDefault !== undefined) {
          acc[key] = computedDefault;
        }

        return acc;
      }, {});

    case "array":
      // Inject defaults into existing array defaults
      if (Array.isArray(defaults)) {
        defaults = defaults.map(function (item, idx) {
          return computeDefaults(schema.items[idx] || schema.additionalItems || {}, item, rootSchema);
        });
      } // Deeply inject defaults into already existing form data


      if (Array.isArray(rawFormData)) {
        defaults = rawFormData.map(function (item, idx) {
          return computeDefaults(schema.items, (defaults || {})[idx], rootSchema, item);
        });
      }

      if (schema.minItems) {
        if (!isMultiSelect(schema, rootSchema)) {
          var defaultsLength = defaults ? defaults.length : 0;

          if (schema.minItems > defaultsLength) {
            var defaultEntries = defaults || []; // populate the array with the defaults

            var fillerSchema = Array.isArray(schema.items) ? schema.additionalItems : schema.items;
            var fillerEntries = fill_default()(new Array(schema.minItems - defaultsLength), computeDefaults(fillerSchema, fillerSchema.defaults, rootSchema)); // then fill up the rest with either the item default or empty, up to minItems

            return defaultEntries.concat(fillerEntries);
          }
        } else {
          return defaults ? defaults : [];
        }
      }

  }

  return defaults;
}

function getDefaultFormState(_schema, formData) {
  var rootSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var includeUndefinedValues = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

  if (!isObject(_schema)) {
    throw new Error("Invalid schema: " + _schema);
  }

  var schema = retrieveSchema(_schema, rootSchema, formData);
  var defaults = computeDefaults(schema, _schema["default"], rootSchema, formData, includeUndefinedValues);

  if (typeof formData === "undefined") {
    // No form data? Use schema defaults.
    return defaults;
  }

  if (isObject(formData) || Array.isArray(formData)) {
    return mergeDefaultsWithFormData(defaults, formData);
  }

  if (formData === 0 || formData === false || formData === "") {
    return formData;
  }

  return formData || defaults;
}
/**
 * When merging defaults and form data, we want to merge in this specific way:
 * - objects are deeply merged
 * - arrays are merged in such a way that:
 *   - when the array is set in form data, only array entries set in form data
 *     are deeply merged; additional entries from the defaults are ignored
 *   - when the array is not set in form data, the default is copied over
 * - scalars are overwritten/set by form data
 */

function mergeDefaultsWithFormData(defaults, formData) {
  if (Array.isArray(formData)) {
    if (!Array.isArray(defaults)) {
      defaults = [];
    }

    return formData.map(function (value, idx) {
      if (defaults[idx]) {
        return mergeDefaultsWithFormData(defaults[idx], value);
      }

      return value;
    });
  } else if (isObject(formData)) {
    var acc = Object.assign({}, defaults); // Prevent mutation of source object.

    return Object.keys(formData).reduce(function (acc, key) {
      acc[key] = mergeDefaultsWithFormData(defaults ? defaults[key] : {}, formData[key]);
      return acc;
    }, acc);
  } else {
    return formData;
  }
}
function getUiOptions(uiSchema) {
  // get all passed options from ui:widget, ui:options, and ui:<optionName>
  return Object.keys(uiSchema).filter(function (key) {
    return key.indexOf("ui:") === 0;
  }).reduce(function (options, key) {
    var value = uiSchema[key];

    if (key === "ui:widget" && isObject(value)) {
      console.warn("Setting options via ui:widget object is deprecated, use ui:options instead");
      return utils_objectSpread({}, options, value.options || {}, {
        widget: value.component
      });
    }

    if (key === "ui:options" && isObject(value)) {
      return utils_objectSpread({}, options, value);
    }

    return utils_objectSpread({}, options, utils_defineProperty({}, key.substring(3), value));
  }, {});
}
function getDisplayLabel(schema, uiSchema, rootSchema) {
  var uiOptions = getUiOptions(uiSchema);
  var _uiOptions$label = uiOptions.label,
      displayLabel = _uiOptions$label === void 0 ? true : _uiOptions$label;
  var schemaType = getSchemaType(schema);

  if (schemaType === "array") {
    displayLabel = isMultiSelect(schema, rootSchema) || isFilesArray(schema, uiSchema, rootSchema) || isCustomWidget(uiSchema);
  }

  if (schemaType === "object") {
    displayLabel = false;
  }

  if (schemaType === "boolean" && !uiSchema["ui:widget"]) {
    displayLabel = false;
  }

  if (uiSchema["ui:field"]) {
    displayLabel = false;
  }

  return displayLabel;
}
function isObject(thing) {
  if (typeof File !== "undefined" && thing instanceof File) {
    return false;
  }

  return utils_typeof(thing) === "object" && thing !== null && !Array.isArray(thing);
}
function mergeObjects(obj1, obj2) {
  var concatArrays = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false; // Recursively merge deeply nested objects.

  var acc = Object.assign({}, obj1); // Prevent mutation of source object.

  return Object.keys(obj2).reduce(function (acc, key) {
    var left = obj1 ? obj1[key] : {},
        right = obj2[key];

    if (obj1 && obj1.hasOwnProperty(key) && isObject(right)) {
      acc[key] = mergeObjects(left, right, concatArrays);
    } else if (concatArrays && Array.isArray(left) && Array.isArray(right)) {
      acc[key] = left.concat(right);
    } else {
      acc[key] = right;
    }

    return acc;
  }, acc);
}
function asNumber(value) {
  if (value === "") {
    return undefined;
  }

  if (value === null) {
    return null;
  }

  if (/\.$/.test(value)) {
    // "3." can't really be considered a number even if it parses in js. The
    // user is most likely entering a float.
    return value;
  }

  if (/\.0$/.test(value)) {
    // we need to return this as a string here, to allow for input like 3.07
    return value;
  }

  var n = Number(value);
  var valid = typeof n === "number" && !Number.isNaN(n);

  if (/\.\d*0$/.test(value)) {
    // It's a number, that's cool - but we need it as a string so it doesn't screw
    // with the user when entering dollar amounts or other values (such as those with
    // specific precision or number of significant digits)
    return value;
  }

  return valid ? n : value;
}
function orderProperties(properties, order) {
  if (!Array.isArray(order)) {
    return properties;
  }

  var arrayToHash = function arrayToHash(arr) {
    return arr.reduce(function (prev, curr) {
      prev[curr] = true;
      return prev;
    }, {});
  };

  var errorPropList = function errorPropList(arr) {
    return arr.length > 1 ? "properties '".concat(arr.join("', '"), "'") : "property '".concat(arr[0], "'");
  };

  var propertyHash = arrayToHash(properties);
  var orderFiltered = order.filter(function (prop) {
    return prop === "*" || propertyHash[prop];
  });
  var orderHash = arrayToHash(orderFiltered);
  var rest = properties.filter(function (prop) {
    return !orderHash[prop];
  });
  var restIndex = orderFiltered.indexOf("*");

  if (restIndex === -1) {
    if (rest.length) {
      throw new Error("uiSchema order list does not contain ".concat(errorPropList(rest)));
    }

    return orderFiltered;
  }

  if (restIndex !== orderFiltered.lastIndexOf("*")) {
    throw new Error("uiSchema order list contains more than one wildcard item");
  }

  var complete = utils_toConsumableArray(orderFiltered);

  complete.splice.apply(complete, [restIndex, 1].concat(utils_toConsumableArray(rest)));
  return complete;
}
/**
 * This function checks if the given schema matches a single
 * constant value.
 */

function isConstant(schema) {
  return Array.isArray(schema["enum"]) && schema["enum"].length === 1 || schema.hasOwnProperty("const");
}
function toConstant(schema) {
  if (Array.isArray(schema["enum"]) && schema["enum"].length === 1) {
    return schema["enum"][0];
  } else if (schema.hasOwnProperty("const")) {
    return schema["const"];
  } else {
    throw new Error("schema cannot be inferred as a constant");
  }
}
function isSelect(_schema) {
  var rootSchema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var schema = retrieveSchema(_schema, rootSchema);
  var altSchemas = schema.oneOf || schema.anyOf;

  if (Array.isArray(schema["enum"])) {
    return true;
  } else if (Array.isArray(altSchemas)) {
    return altSchemas.every(function (altSchemas) {
      return isConstant(altSchemas);
    });
  }

  return false;
}
function isMultiSelect(schema) {
  var rootSchema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (!schema.uniqueItems || !schema.items) {
    return false;
  }

  return isSelect(schema.items, rootSchema);
}
function isFilesArray(schema, uiSchema) {
  var rootSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (uiSchema["ui:widget"] === "files") {
    return true;
  } else if (schema.items) {
    var itemsSchema = retrieveSchema(schema.items, rootSchema);
    return itemsSchema.type === "string" && itemsSchema.format === "data-url";
  }

  return false;
}
function isFixedItems(schema) {
  return Array.isArray(schema.items) && schema.items.length > 0 && schema.items.every(function (item) {
    return isObject(item);
  });
}
function isCustomWidget(uiSchema) {
  return (// TODO: Remove the `&& uiSchema["ui:widget"] !== "hidden"` once we support hidden widgets for arrays.
    // https://react-jsonschema-form.readthedocs.io/en/latest/usage/widgets/#hidden-widgets
    "widget" in getUiOptions(uiSchema) && getUiOptions(uiSchema)["widget"] !== "hidden"
  );
}
function allowAdditionalItems(schema) {
  if (schema.additionalItems === true) {
    console.warn("additionalItems=true is currently not supported");
  }

  return isObject(schema.additionalItems);
}
function optionsList(schema) {
  if (schema["enum"]) {
    return schema["enum"].map(function (value, i) {
      var label = schema.enumNames && schema.enumNames[i] || String(value);
      return {
        label: label,
        value: value
      };
    });
  } else {
    var altSchemas = schema.oneOf || schema.anyOf;
    return altSchemas.map(function (schema) {
      var value = toConstant(schema);
      var label = schema.title || String(value);
      return {
        schema: schema,
        label: label,
        value: value
      };
    });
  }
}
function findSchemaDefinition($ref) {
  var rootSchema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var origRef = $ref;

  if ($ref.startsWith("#")) {
    // Decode URI fragment representation.
    $ref = decodeURIComponent($ref.substring(1));
  } else {
    throw new Error("Could not find a definition for ".concat(origRef, "."));
  }

  var current = jsonpointer.get(rootSchema, $ref);

  if (current === undefined) {
    throw new Error("Could not find a definition for ".concat(origRef, "."));
  }

  if (current.hasOwnProperty("$ref")) {
    return findSchemaDefinition(current.$ref, rootSchema);
  }

  return current;
} // In the case where we have to implicitly create a schema, it is useful to know what type to use
//  based on the data we are defining

var guessType = function guessType(value) {
  if (Array.isArray(value)) {
    return "array";
  } else if (typeof value === "string") {
    return "string";
  } else if (value == null) {
    return "null";
  } else if (typeof value === "boolean") {
    return "boolean";
  } else if (!isNaN(value)) {
    return "number";
  } else if (utils_typeof(value) === "object") {
    return "object";
  } // Default to string if we can't figure it out


  return "string";
}; // This function will create new "properties" items for each key in our formData

function stubExistingAdditionalProperties(schema) {
  var rootSchema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var formData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}; // Clone the schema so we don't ruin the consumer's original

  schema = utils_objectSpread({}, schema, {
    properties: utils_objectSpread({}, schema.properties)
  }); // make sure formData is an object

  formData = isObject(formData) ? formData : {};
  Object.keys(formData).forEach(function (key) {
    if (schema.properties.hasOwnProperty(key)) {
      // No need to stub, our schema already has the property
      return;
    }

    var additionalProperties;

    if (schema.additionalProperties.hasOwnProperty("$ref")) {
      additionalProperties = retrieveSchema({
        $ref: schema.additionalProperties["$ref"]
      }, rootSchema, formData);
    } else if (schema.additionalProperties.hasOwnProperty("type")) {
      additionalProperties = utils_objectSpread({}, schema.additionalProperties);
    } else {
      additionalProperties = {
        type: guessType(formData[key])
      };
    } // The type of our new key should match the additionalProperties value;


    schema.properties[key] = additionalProperties; // Set our additional property flag so we know it was dynamically added

    schema.properties[key][ADDITIONAL_PROPERTY_FLAG] = true;
  });
  return schema;
}
/**
 * Resolves a conditional block (if/else/then) by removing the condition and merging the appropriate conditional branch with the rest of the schema
 */

var resolveCondition = function resolveCondition(schema, rootSchema, formData) {
  var expression = schema["if"],
      then = schema.then,
      otherwise = schema["else"],
      resolvedSchemaLessConditional = utils_objectWithoutProperties(schema, ["if", "then", "else"]);

  var conditionalSchema = isValid(expression, formData, rootSchema) ? then : otherwise;

  if (conditionalSchema) {
    return retrieveSchema(mergeSchemas(resolvedSchemaLessConditional, retrieveSchema(conditionalSchema, rootSchema, formData)), rootSchema, formData);
  } else {
    return retrieveSchema(resolvedSchemaLessConditional, rootSchema, formData);
  }
};
/**
 * Resolves references and dependencies within a schema and its 'allOf' children.
 *
 * Called internally by retrieveSchema.
 */


function resolveSchema(schema) {
  var rootSchema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var formData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (schema.hasOwnProperty("$ref")) {
    return resolveReference(schema, rootSchema, formData);
  } else if (schema.hasOwnProperty("dependencies")) {
    var resolvedSchema = resolveDependencies(schema, rootSchema, formData);
    return retrieveSchema(resolvedSchema, rootSchema, formData);
  } else if (schema.hasOwnProperty("allOf")) {
    return utils_objectSpread({}, schema, {
      allOf: schema.allOf.map(function (allOfSubschema) {
        return retrieveSchema(allOfSubschema, rootSchema, formData);
      })
    });
  } else {
    // No $ref or dependencies attribute found, returning the original schema.
    return schema;
  }
}

function resolveReference(schema, rootSchema, formData) {
  // Retrieve the referenced schema definition.
  var $refSchema = findSchemaDefinition(schema.$ref, rootSchema); // Drop the $ref property of the source schema.

  var $ref = schema.$ref,
      localSchema = utils_objectWithoutProperties(schema, ["$ref"]); // Update referenced schema definition with local schema properties.


  return retrieveSchema(utils_objectSpread({}, $refSchema, localSchema), rootSchema, formData);
}

function retrieveSchema(schema) {
  var rootSchema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var formData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (!isObject(schema)) {
    return {};
  }

  var resolvedSchema = resolveSchema(schema, rootSchema, formData);

  if (schema.hasOwnProperty("if")) {
    return resolveCondition(schema, rootSchema, formData);
  }

  if ("allOf" in schema) {
    try {
      resolvedSchema = src_default()(utils_objectSpread({}, resolvedSchema, {
        allOf: resolvedSchema.allOf
      }));
    } catch (e) {
      console.warn("could not merge subschemas in allOf:\n" + e);

      var _resolvedSchema = resolvedSchema,
          allOf = _resolvedSchema.allOf,
          resolvedSchemaWithoutAllOf = utils_objectWithoutProperties(_resolvedSchema, ["allOf"]);

      return resolvedSchemaWithoutAllOf;
    }
  }

  var hasAdditionalProperties = resolvedSchema.hasOwnProperty("additionalProperties") && resolvedSchema.additionalProperties !== false;

  if (hasAdditionalProperties) {
    return stubExistingAdditionalProperties(resolvedSchema, rootSchema, formData);
  }

  return resolvedSchema;
}

function resolveDependencies(schema, rootSchema, formData) {
  // Drop the dependencies from the source schema.
  var _schema$dependencies = schema.dependencies,
      dependencies = _schema$dependencies === void 0 ? {} : _schema$dependencies,
      resolvedSchema = utils_objectWithoutProperties(schema, ["dependencies"]);

  if ("oneOf" in resolvedSchema) {
    resolvedSchema = resolvedSchema.oneOf[utils_getMatchingOption(formData, resolvedSchema.oneOf, rootSchema)];
  } else if ("anyOf" in resolvedSchema) {
    resolvedSchema = resolvedSchema.anyOf[utils_getMatchingOption(formData, resolvedSchema.anyOf, rootSchema)];
  }

  return processDependencies(dependencies, resolvedSchema, rootSchema, formData);
}

function processDependencies(dependencies, resolvedSchema, rootSchema, formData) {
  // Process dependencies updating the local schema properties as appropriate.
  for (var dependencyKey in dependencies) {
    // Skip this dependency if its trigger property is not present.
    if (formData[dependencyKey] === undefined) {
      continue;
    } // Skip this dependency if it is not included in the schema (such as when dependencyKey is itself a hidden dependency.)


    if (resolvedSchema.properties && !(dependencyKey in resolvedSchema.properties)) {
      continue;
    }

    var dependencyValue = dependencies[dependencyKey],
        remainingDependencies = utils_objectWithoutProperties(dependencies, [dependencyKey].map(_toPropertyKey));

    if (Array.isArray(dependencyValue)) {
      resolvedSchema = withDependentProperties(resolvedSchema, dependencyValue);
    } else if (isObject(dependencyValue)) {
      resolvedSchema = withDependentSchema(resolvedSchema, rootSchema, formData, dependencyKey, dependencyValue);
    }

    return processDependencies(remainingDependencies, resolvedSchema, rootSchema, formData);
  }

  return resolvedSchema;
}

function withDependentProperties(schema, additionallyRequired) {
  if (!additionallyRequired) {
    return schema;
  }

  var required = Array.isArray(schema.required) ? Array.from(new Set([].concat(utils_toConsumableArray(schema.required), utils_toConsumableArray(additionallyRequired)))) : additionallyRequired;
  return utils_objectSpread({}, schema, {
    required: required
  });
}

function withDependentSchema(schema, rootSchema, formData, dependencyKey, dependencyValue) {
  var _retrieveSchema = retrieveSchema(dependencyValue, rootSchema, formData),
      oneOf = _retrieveSchema.oneOf,
      dependentSchema = utils_objectWithoutProperties(_retrieveSchema, ["oneOf"]);

  schema = mergeSchemas(schema, dependentSchema); // Since it does not contain oneOf, we return the original schema.

  if (oneOf === undefined) {
    return schema;
  } else if (!Array.isArray(oneOf)) {
    throw new Error("invalid: it is some ".concat(utils_typeof(oneOf), " instead of an array"));
  } // Resolve $refs inside oneOf.


  var resolvedOneOf = oneOf.map(function (subschema) {
    return subschema.hasOwnProperty("$ref") ? resolveReference(subschema, rootSchema, formData) : subschema;
  });
  return withExactlyOneSubschema(schema, rootSchema, formData, dependencyKey, resolvedOneOf);
}

function withExactlyOneSubschema(schema, rootSchema, formData, dependencyKey, oneOf) {
  var validSubschemas = oneOf.filter(function (subschema) {
    if (!subschema.properties) {
      return false;
    }

    var conditionPropertySchema = subschema.properties[dependencyKey];

    if (conditionPropertySchema) {
      var conditionSchema = {
        type: "object",
        properties: utils_defineProperty({}, dependencyKey, conditionPropertySchema)
      };

      var _validateFormData = validateFormData(formData, conditionSchema),
          errors = _validateFormData.errors;

      return errors.length === 0;
    }
  });

  if (validSubschemas.length !== 1) {
    console.warn("ignoring oneOf in dependencies because there isn't exactly one subschema that is valid");
    return schema;
  }

  var subschema = validSubschemas[0];

  var _subschema$properties = subschema.properties,
      conditionPropertySchema = _subschema$properties[dependencyKey],
      dependentSubschema = utils_objectWithoutProperties(_subschema$properties, [dependencyKey].map(_toPropertyKey));

  var dependentSchema = utils_objectSpread({}, subschema, {
    properties: dependentSubschema
  });

  return mergeSchemas(schema, retrieveSchema(dependentSchema, rootSchema, formData));
} // Recursively merge deeply nested schemas.
// The difference between mergeSchemas and mergeObjects
// is that mergeSchemas only concats arrays for
// values under the "required" keyword, and when it does,
// it doesn't include duplicate values.


function mergeSchemas(obj1, obj2) {
  var acc = Object.assign({}, obj1); // Prevent mutation of source object.

  return Object.keys(obj2).reduce(function (acc, key) {
    var left = obj1 ? obj1[key] : {},
        right = obj2[key];

    if (obj1 && obj1.hasOwnProperty(key) && isObject(right)) {
      acc[key] = mergeSchemas(left, right);
    } else if (obj1 && obj2 && (getSchemaType(obj1) === "object" || getSchemaType(obj2) === "object") && key === "required" && Array.isArray(left) && Array.isArray(right)) {
      // Don't include duplicate values when merging
      // "required" fields.
      acc[key] = union_default()(left, right);
    } else {
      acc[key] = right;
    }

    return acc;
  }, acc);
}

function isArguments(object) {
  return Object.prototype.toString.call(object) === "[object Arguments]";
}

function deepEquals(a, b) {
  var ca = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var cb = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : []; // Partially extracted from node-deeper and adapted to exclude comparison
  // checks for functions.
  // https://github.com/othiym23/node-deeper

  if (a === b) {
    return true;
  } else if (typeof a === "function" || typeof b === "function") {
    // Assume all functions are equivalent
    // see https://github.com/rjsf-team/react-jsonschema-form/issues/255
    return true;
  } else if (utils_typeof(a) !== "object" || utils_typeof(b) !== "object") {
    return false;
  } else if (a === null || b === null) {
    return false;
  } else if (a instanceof Date && b instanceof Date) {
    return a.getTime() === b.getTime();
  } else if (a instanceof RegExp && b instanceof RegExp) {
    return a.source === b.source && a.global === b.global && a.multiline === b.multiline && a.lastIndex === b.lastIndex && a.ignoreCase === b.ignoreCase;
  } else if (isArguments(a) || isArguments(b)) {
    if (!(isArguments(a) && isArguments(b))) {
      return false;
    }

    var slice = Array.prototype.slice;
    return deepEquals(slice.call(a), slice.call(b), ca, cb);
  } else {
    if (a.constructor !== b.constructor) {
      return false;
    }

    var ka = Object.keys(a);
    var kb = Object.keys(b); // don't bother with stack acrobatics if there's nothing there

    if (ka.length === 0 && kb.length === 0) {
      return true;
    }

    if (ka.length !== kb.length) {
      return false;
    }

    var cal = ca.length;

    while (cal--) {
      if (ca[cal] === a) {
        return cb[cal] === b;
      }
    }

    ca.push(a);
    cb.push(b);
    ka.sort();
    kb.sort();

    for (var j = ka.length - 1; j >= 0; j--) {
      if (ka[j] !== kb[j]) {
        return false;
      }
    }

    var _key;

    for (var k = ka.length - 1; k >= 0; k--) {
      _key = ka[k];

      if (!deepEquals(a[_key], b[_key], ca, cb)) {
        return false;
      }
    }

    ca.pop();
    cb.pop();
    return true;
  }
}
function shouldRender(comp, nextProps, nextState) {
  var props = comp.props,
      state = comp.state;
  return !deepEquals(props, nextProps) || !deepEquals(state, nextState);
}
function toIdSchema(schema, id, rootSchema) {
  var formData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var idPrefix = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "root";
  var idSeparator = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "_";
  var idSchema = {
    $id: id || idPrefix
  };

  if ("$ref" in schema || "dependencies" in schema || "allOf" in schema) {
    var _schema = retrieveSchema(schema, rootSchema, formData);

    return toIdSchema(_schema, id, rootSchema, formData, idPrefix, idSeparator);
  }

  if ("items" in schema && !schema.items.$ref) {
    return toIdSchema(schema.items, id, rootSchema, formData, idPrefix, idSeparator);
  }

  if (schema.type !== "object") {
    return idSchema;
  }

  for (var name in schema.properties || {}) {
    var field = schema.properties[name];
    var fieldId = idSchema.$id + idSeparator + name;
    idSchema[name] = toIdSchema(isObject(field) ? field : {}, fieldId, rootSchema, // It's possible that formData is not an object -- this can happen if an
    // array item has just been added, but not populated with data yet
    (formData || {})[name], idPrefix, idSeparator);
  }

  return idSchema;
}
function toPathSchema(schema) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
  var rootSchema = arguments.length > 2 ? arguments[2] : undefined;
  var formData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var pathSchema = {
    $name: name.replace(/^\./, "")
  };

  if ("$ref" in schema || "dependencies" in schema || "allOf" in schema) {
    var _schema = retrieveSchema(schema, rootSchema, formData);

    return toPathSchema(_schema, name, rootSchema, formData);
  }

  if (schema.hasOwnProperty("additionalProperties")) {
    pathSchema.__rjsf_additionalProperties = true;
  }

  if (schema.hasOwnProperty("items") && Array.isArray(formData)) {
    formData.forEach(function (element, i) {
      pathSchema[i] = toPathSchema(schema.items, "".concat(name, ".").concat(i), rootSchema, element);
    });
  } else if (schema.hasOwnProperty("properties")) {
    for (var property in schema.properties) {
      pathSchema[property] = toPathSchema(schema.properties[property], "".concat(name, ".").concat(property), rootSchema, // It's possible that formData is not an object -- this can happen if an
      // array item has just been added, but not populated with data yet
      (formData || {})[property]);
    }
  }

  return pathSchema;
}
function parseDateString(dateString) {
  var includeTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if (!dateString) {
    return {
      year: -1,
      month: -1,
      day: -1,
      hour: includeTime ? -1 : 0,
      minute: includeTime ? -1 : 0,
      second: includeTime ? -1 : 0
    };
  }

  var date = new Date(dateString);

  if (Number.isNaN(date.getTime())) {
    throw new Error("Unable to parse date " + dateString);
  }

  return {
    year: date.getUTCFullYear(),
    month: date.getUTCMonth() + 1,
    // oh you, javascript.
    day: date.getUTCDate(),
    hour: includeTime ? date.getUTCHours() : 0,
    minute: includeTime ? date.getUTCMinutes() : 0,
    second: includeTime ? date.getUTCSeconds() : 0
  };
}
function toDateString(_ref2) {
  var year = _ref2.year,
      month = _ref2.month,
      day = _ref2.day,
      _ref2$hour = _ref2.hour,
      hour = _ref2$hour === void 0 ? 0 : _ref2$hour,
      _ref2$minute = _ref2.minute,
      minute = _ref2$minute === void 0 ? 0 : _ref2$minute,
      _ref2$second = _ref2.second,
      second = _ref2$second === void 0 ? 0 : _ref2$second;
  var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var utcTime = Date.UTC(year, month - 1, day, hour, minute, second);
  var datetime = new Date(utcTime).toJSON();
  return time ? datetime : datetime.slice(0, 10);
}
function utcToLocal(jsonDate) {
  if (!jsonDate) {
    return "";
  } // required format of `"yyyy-MM-ddThh:mm" followed by optional ":ss" or ":ss.SSS"
  // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type%3Ddatetime-local)
  // > should be a _valid local date and time string_ (not GMT)
  // Note - date constructor passed local ISO-8601 does not correctly
  // change time to UTC in node pre-8


  var date = new Date(jsonDate);
  var yyyy = pad(date.getFullYear(), 4);
  var MM = pad(date.getMonth() + 1, 2);
  var dd = pad(date.getDate(), 2);
  var hh = pad(date.getHours(), 2);
  var mm = pad(date.getMinutes(), 2);
  var ss = pad(date.getSeconds(), 2);
  var SSS = pad(date.getMilliseconds(), 3);
  return "".concat(yyyy, "-").concat(MM, "-").concat(dd, "T").concat(hh, ":").concat(mm, ":").concat(ss, ".").concat(SSS);
}
function localToUTC(dateString) {
  if (dateString) {
    return new Date(dateString).toJSON();
  }
}
function pad(num, size) {
  var s = String(num);

  while (s.length < size) {
    s = "0" + s;
  }

  return s;
}
function dataURItoBlob(dataURI) {
  // Split metadata from data
  var splitted = dataURI.split(","); // Split params

  var params = splitted[0].split(";"); // Get mime-type from params

  var type = params[0].replace("data:", ""); // Filter the name property from params

  var properties = params.filter(function (param) {
    return param.split("=")[0] === "name";
  }); // Look for the name and use unknown if no name property.

  var name;

  if (properties.length !== 1) {
    name = "unknown";
  } else {
    // Because we filtered out the other property,
    // we only have the name case here.
    name = properties[0].split("=")[1];
  } // Built the Uint8Array Blob parameter from the base64 string.


  var binary = atob(splitted[1]);
  var array = [];

  for (var _i = 0; _i < binary.length; _i++) {
    array.push(binary.charCodeAt(_i));
  } // Create the blob object


  var blob = new window.Blob([new Uint8Array(array)], {
    type: type
  });
  return {
    blob: blob,
    name: name
  };
}
function rangeSpec(schema) {
  var spec = {};

  if (schema.multipleOf) {
    spec.step = schema.multipleOf;
  }

  if (schema.minimum || schema.minimum === 0) {
    spec.min = schema.minimum;
  }

  if (schema.maximum || schema.maximum === 0) {
    spec.max = schema.maximum;
  }

  return spec;
}
function utils_getMatchingOption(formData, options, rootSchema) {
  // For performance, skip validating subschemas if formData is undefined. We just
  // want to get the first option in that case.
  if (formData === undefined) {
    return 0;
  }

  for (var _i2 = 0; _i2 < options.length; _i2++) {
    var option = options[_i2]; // If the schema describes an object then we need to add slightly more
    // strict matching to the schema, because unless the schema uses the
    // "requires" keyword, an object will match the schema as long as it
    // doesn't have matching keys with a conflicting type. To do this we use an
    // "anyOf" with an array of requires. This augmentation expresses that the
    // schema should match if any of the keys in the schema are present on the
    // object and pass validation.

    if (option.properties) {
      // Create an "anyOf" schema that requires at least one of the keys in the
      // "properties" object
      var requiresAnyOf = {
        anyOf: Object.keys(option.properties).map(function (key) {
          return {
            required: [key]
          };
        })
      };
      var augmentedSchema = void 0; // If the "anyOf" keyword already exists, wrap the augmentation in an "allOf"

      if (option.anyOf) {
        // Create a shallow clone of the option
        var shallowClone = utils_extends({}, option);

        if (!shallowClone.allOf) {
          shallowClone.allOf = [];
        } else {
          // If "allOf" already exists, shallow clone the array
          shallowClone.allOf = shallowClone.allOf.slice();
        }

        shallowClone.allOf.push(requiresAnyOf);
        augmentedSchema = shallowClone;
      } else {
        augmentedSchema = Object.assign({}, option, requiresAnyOf);
      } // Remove the "required" field as it's likely that not all fields have
      // been filled in yet, which will mean that the schema is not valid


      delete augmentedSchema.required;

      if (isValid(augmentedSchema, formData, rootSchema)) {
        return _i2;
      }
    } else if (isValid(option, formData, rootSchema)) {
      return _i2;
    }
  }

  return 0;
} // Check to see if a schema specifies that a value must be true

function schemaRequiresTrueValue(schema) {
  // Check if const is a truthy value
  if (schema["const"]) {
    return true;
  } // Check if an enum has a single value of true


  if (schema["enum"] && schema["enum"].length === 1 && schema["enum"][0] === true) {
    return true;
  } // If anyOf has a single value, evaluate the subschema


  if (schema.anyOf && schema.anyOf.length === 1) {
    return schemaRequiresTrueValue(schema.anyOf[0]);
  } // If oneOf has a single value, evaluate the subschema


  if (schema.oneOf && schema.oneOf.length === 1) {
    return schemaRequiresTrueValue(schema.oneOf[0]);
  } // Evaluate each subschema in allOf, to see if one of them requires a true
  // value


  if (schema.allOf) {
    return schema.allOf.some(schemaRequiresTrueValue);
  }

  return false;
}
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/components/Form.js
function Form_objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      Form_defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function Form_typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    Form_typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    Form_typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return Form_typeof(obj);
}

function Form_classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function Form_defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function Form_createClass(Constructor, protoProps, staticProps) {
  if (protoProps) Form_defineProperties(Constructor.prototype, protoProps);
  if (staticProps) Form_defineProperties(Constructor, staticProps);
  return Constructor;
}

function Form_possibleConstructorReturn(self, call) {
  if (call && (Form_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return Form_assertThisInitialized(self);
}

function Form_getPrototypeOf(o) {
  Form_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return Form_getPrototypeOf(o);
}

function Form_assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function Form_inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Form_setPrototypeOf(subClass, superClass);
}

function Form_setPrototypeOf(o, p) {
  Form_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return Form_setPrototypeOf(o, p);
}

function Form_defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}











var Form = /*#__PURE__*/function (_Component) {
  Form_inherits(Form, _Component);

  function Form(props) {
    var _this;

    Form_classCallCheck(this, Form);

    _this = Form_possibleConstructorReturn(this, Form_getPrototypeOf(Form).call(this, props));

    Form_defineProperty(Form_assertThisInitialized(_this), "getUsedFormData", function (formData, fields) {
      //for the case of a single input form
      if (fields.length === 0 && Form_typeof(formData) !== "object") {
        return formData;
      }

      var data = pick_default()(formData, fields);

      if (Array.isArray(formData)) {
        return Object.keys(data).map(function (key) {
          return data[key];
        });
      }

      return data;
    });

    Form_defineProperty(Form_assertThisInitialized(_this), "getFieldNames", function (pathSchema, formData) {
      var getAllPaths = function getAllPaths(_obj) {
        var acc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var paths = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [""];
        Object.keys(_obj).forEach(function (key) {
          if (Form_typeof(_obj[key]) === "object") {
            var newPaths = paths.map(function (path) {
              return "".concat(path, ".").concat(key);
            }); // If an object is marked with additionalProperties, all its keys are valid

            if (_obj[key].__rjsf_additionalProperties && _obj[key].$name !== "") {
              acc.push(_obj[key].$name);
            } else {
              getAllPaths(_obj[key], acc, newPaths);
            }
          } else if (key === "$name" && _obj[key] !== "") {
            paths.forEach(function (path) {
              path = path.replace(/^\./, "");

              var formValue = get_default()(formData, path); // adds path to fieldNames if it points to a value
              // or an empty object/array


              if (Form_typeof(formValue) !== "object" || isEmpty_default()(formValue)) {
                acc.push(path);
              }
            });
          }
        });
        return acc;
      };

      return getAllPaths(pathSchema);
    });

    Form_defineProperty(Form_assertThisInitialized(_this), "onChange", function (formData, newErrorSchema) {
      if (isObject(formData) || Array.isArray(formData)) {
        var newState = _this.getStateFromProps(_this.props, formData);

        formData = newState.formData;
      }

      var mustValidate = !_this.props.noValidate && _this.props.liveValidate;
      var state = {
        formData: formData
      };
      var newFormData = formData;

      if (_this.props.omitExtraData === true && _this.props.liveOmit === true) {
        var retrievedSchema = retrieveSchema(_this.state.schema, _this.state.schema, formData);
        var pathSchema = toPathSchema(retrievedSchema, "", _this.state.schema, formData);

        var fieldNames = _this.getFieldNames(pathSchema, formData);

        newFormData = _this.getUsedFormData(formData, fieldNames);
        state = {
          formData: newFormData
        };
      }

      if (mustValidate) {
        var schemaValidation = _this.validate(newFormData);

        var errors = schemaValidation.errors;
        var errorSchema = schemaValidation.errorSchema;
        var schemaValidationErrors = errors;
        var schemaValidationErrorSchema = errorSchema;

        if (_this.props.extraErrors) {
          errorSchema = mergeObjects(errorSchema, _this.props.extraErrors, !!"concat arrays");
          errors = toErrorList(errorSchema);
        }

        state = {
          formData: newFormData,
          errors: errors,
          errorSchema: errorSchema,
          schemaValidationErrors: schemaValidationErrors,
          schemaValidationErrorSchema: schemaValidationErrorSchema
        };
      } else if (!_this.props.noValidate && newErrorSchema) {
        var _errorSchema = _this.props.extraErrors ? mergeObjects(newErrorSchema, _this.props.extraErrors, !!"concat arrays") : newErrorSchema;

        state = {
          formData: newFormData,
          errorSchema: _errorSchema,
          errors: toErrorList(_errorSchema)
        };
      }

      _this.setState(state, function () {
        return _this.props.onChange && _this.props.onChange(_this.state);
      });
    });

    Form_defineProperty(Form_assertThisInitialized(_this), "onBlur", function () {
      if (_this.props.onBlur) {
        var _this$props;

        (_this$props = _this.props).onBlur.apply(_this$props, arguments);
      }
    });

    Form_defineProperty(Form_assertThisInitialized(_this), "onFocus", function () {
      if (_this.props.onFocus) {
        var _this$props2;

        (_this$props2 = _this.props).onFocus.apply(_this$props2, arguments);
      }
    });

    Form_defineProperty(Form_assertThisInitialized(_this), "onSubmit", function (event) {
      event.preventDefault();

      if (event.target !== event.currentTarget) {
        return;
      }

      event.persist();
      var newFormData = _this.state.formData;

      if (_this.props.omitExtraData === true) {
        var retrievedSchema = retrieveSchema(_this.state.schema, _this.state.schema, newFormData);
        var pathSchema = toPathSchema(retrievedSchema, "", _this.state.schema, newFormData);

        var fieldNames = _this.getFieldNames(pathSchema, newFormData);

        newFormData = _this.getUsedFormData(newFormData, fieldNames);
      }

      if (!_this.props.noValidate) {
        var schemaValidation = _this.validate(newFormData);

        var _errors = schemaValidation.errors;
        var _errorSchema2 = schemaValidation.errorSchema;
        var schemaValidationErrors = _errors;
        var schemaValidationErrorSchema = _errorSchema2;

        if (Object.keys(_errors).length > 0) {
          if (_this.props.extraErrors) {
            _errorSchema2 = mergeObjects(_errorSchema2, _this.props.extraErrors, !!"concat arrays");
            _errors = toErrorList(_errorSchema2);
          }

          _this.setState({
            errors: _errors,
            errorSchema: _errorSchema2,
            schemaValidationErrors: schemaValidationErrors,
            schemaValidationErrorSchema: schemaValidationErrorSchema
          }, function () {
            if (_this.props.onError) {
              _this.props.onError(_errors);
            } else {
              console.error("Form validation failed", _errors);
            }
          });

          return;
        }
      } // There are no errors generated through schema validation.
      // Check for user provided errors and update state accordingly.


      var errorSchema;
      var errors;

      if (_this.props.extraErrors) {
        errorSchema = _this.props.extraErrors;
        errors = toErrorList(errorSchema);
      } else {
        errorSchema = {};
        errors = [];
      }

      _this.setState({
        formData: newFormData,
        errors: errors,
        errorSchema: errorSchema,
        schemaValidationErrors: [],
        schemaValidationErrorSchema: {}
      }, function () {
        if (_this.props.onSubmit) {
          _this.props.onSubmit(Form_objectSpread({}, _this.state, {
            formData: newFormData,
            status: "submitted"
          }), event);
        }
      });
    });

    _this.state = _this.getStateFromProps(props, props.formData);

    if (_this.props.onChange && !deepEquals(_this.state.formData, _this.props.formData)) {
      _this.props.onChange(_this.state);
    }

    _this.formElement = null;
    return _this;
  }

  Form_createClass(Form, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var nextState = this.getStateFromProps(nextProps, nextProps.formData);

      if (!deepEquals(nextState.formData, nextProps.formData) && !deepEquals(nextState.formData, this.state.formData) && this.props.onChange) {
        this.props.onChange(nextState);
      }

      this.setState(nextState);
    }
  }, {
    key: "getStateFromProps",
    value: function getStateFromProps(props, inputFormData) {
      var state = this.state || {};
      var schema = "schema" in props ? props.schema : this.props.schema;
      var uiSchema = "uiSchema" in props ? props.uiSchema : this.props.uiSchema;
      var edit = typeof inputFormData !== "undefined";
      var liveValidate = "liveValidate" in props ? props.liveValidate : this.props.liveValidate;
      var mustValidate = edit && !props.noValidate && liveValidate;
      var rootSchema = schema;
      var formData = getDefaultFormState(schema, inputFormData, rootSchema);
      var retrievedSchema = retrieveSchema(schema, rootSchema, formData);
      var customFormats = props.customFormats;
      var additionalMetaSchemas = props.additionalMetaSchemas;

      var getCurrentErrors = function getCurrentErrors() {
        if (props.noValidate) {
          return {
            errors: [],
            errorSchema: {}
          };
        } else if (!props.liveValidate) {
          return {
            errors: state.schemaValidationErrors || [],
            errorSchema: state.schemaValidationErrorSchema || {}
          };
        }

        return {
          errors: state.errors || [],
          errorSchema: state.errorSchema || {}
        };
      };

      var errors, errorSchema, schemaValidationErrors, schemaValidationErrorSchema;

      if (mustValidate) {
        var schemaValidation = this.validate(formData, schema, additionalMetaSchemas, customFormats);
        errors = schemaValidation.errors;
        errorSchema = schemaValidation.errorSchema;
        schemaValidationErrors = errors;
        schemaValidationErrorSchema = errorSchema;
      } else {
        var currentErrors = getCurrentErrors();
        errors = currentErrors.errors;
        errorSchema = currentErrors.errorSchema;
        schemaValidationErrors = state.schemaValidationErrors;
        schemaValidationErrorSchema = state.schemaValidationErrorSchema;
      }

      if (props.extraErrors) {
        errorSchema = mergeObjects(errorSchema, props.extraErrors, !!"concat arrays");
        errors = toErrorList(errorSchema);
      }

      var idSchema = toIdSchema(retrievedSchema, uiSchema["ui:rootFieldId"], rootSchema, formData, props.idPrefix, props.idSeparator);
      var nextState = {
        schema: schema,
        uiSchema: uiSchema,
        idSchema: idSchema,
        formData: formData,
        edit: edit,
        errors: errors,
        errorSchema: errorSchema,
        additionalMetaSchemas: additionalMetaSchemas
      };

      if (schemaValidationErrors) {
        nextState.schemaValidationErrors = schemaValidationErrors;
        nextState.schemaValidationErrorSchema = schemaValidationErrorSchema;
      }

      return nextState;
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return shouldRender(this, nextProps, nextState);
    }
  }, {
    key: "validate",
    value: function validate(formData) {
      var schema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props.schema;
      var additionalMetaSchemas = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.props.additionalMetaSchemas;
      var customFormats = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.props.customFormats;
      var _this$props3 = this.props,
          validate = _this$props3.validate,
          transformErrors = _this$props3.transformErrors;

      var _this$getRegistry = this.getRegistry(),
          rootSchema = _this$getRegistry.rootSchema;

      var resolvedSchema = retrieveSchema(schema, rootSchema, formData);
      return validateFormData(formData, resolvedSchema, validate, transformErrors, additionalMetaSchemas, customFormats);
    }
  }, {
    key: "renderErrors",
    value: function renderErrors() {
      var _this$state = this.state,
          errors = _this$state.errors,
          errorSchema = _this$state.errorSchema,
          schema = _this$state.schema,
          uiSchema = _this$state.uiSchema;
      var _this$props4 = this.props,
          ErrorList = _this$props4.ErrorList,
          showErrorList = _this$props4.showErrorList,
          formContext = _this$props4.formContext;

      if (errors.length && showErrorList != false) {
        return react.createElement(ErrorList, {
          errors: errors,
          errorSchema: errorSchema,
          schema: schema,
          uiSchema: uiSchema,
          formContext: formContext
        });
      }

      return null;
    }
  }, {
    key: "getRegistry",
    value: function getRegistry() {
      // For BC, accept passed SchemaField and TitleField props and pass them to
      // the "fields" registry one.
      var _getDefaultRegistry = getDefaultRegistry(),
          fields = _getDefaultRegistry.fields,
          widgets = _getDefaultRegistry.widgets;

      return {
        fields: Form_objectSpread({}, fields, this.props.fields),
        widgets: Form_objectSpread({}, widgets, this.props.widgets),
        ArrayFieldTemplate: this.props.ArrayFieldTemplate,
        ObjectFieldTemplate: this.props.ObjectFieldTemplate,
        FieldTemplate: this.props.FieldTemplate,
        definitions: this.props.schema.definitions || {},
        rootSchema: this.props.schema,
        formContext: this.props.formContext || {}
      };
    }
  }, {
    key: "submit",
    value: function submit() {
      if (this.formElement) {
        this.formElement.dispatchEvent(new CustomEvent("submit", {
          cancelable: true
        }));
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props5 = this.props,
          children = _this$props5.children,
          id = _this$props5.id,
          idPrefix = _this$props5.idPrefix,
          idSeparator = _this$props5.idSeparator,
          className = _this$props5.className,
          tagName = _this$props5.tagName,
          name = _this$props5.name,
          method = _this$props5.method,
          target = _this$props5.target,
          action = _this$props5.action,
          deprecatedAutocomplete = _this$props5.autocomplete,
          currentAutoComplete = _this$props5.autoComplete,
          enctype = _this$props5.enctype,
          acceptcharset = _this$props5.acceptcharset,
          noHtml5Validate = _this$props5.noHtml5Validate,
          disabled = _this$props5.disabled,
          readonly = _this$props5.readonly,
          formContext = _this$props5.formContext,
          _internalFormWrapper = _this$props5._internalFormWrapper;
      var _this$state2 = this.state,
          schema = _this$state2.schema,
          uiSchema = _this$state2.uiSchema,
          formData = _this$state2.formData,
          errorSchema = _this$state2.errorSchema,
          idSchema = _this$state2.idSchema;
      var registry = this.getRegistry();
      var _SchemaField = registry.fields.SchemaField; // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the
      // PropTypes.elementType to use for the inner tag so we'll need to pass `tagName` along if it is provided.
      // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme

      var as = _internalFormWrapper ? tagName : undefined;
      var FormTag = _internalFormWrapper || tagName || "form";

      if (deprecatedAutocomplete) {
        console.warn("Using autocomplete property of Form is deprecated, use autoComplete instead.");
      }

      var autoComplete = currentAutoComplete ? currentAutoComplete : deprecatedAutocomplete;
      return react.createElement(FormTag, {
        className: className ? className : "rjsf",
        id: id,
        name: name,
        method: method,
        target: target,
        action: action,
        autoComplete: autoComplete,
        encType: enctype,
        acceptCharset: acceptcharset,
        noValidate: noHtml5Validate,
        onSubmit: this.onSubmit,
        as: as,
        ref: function ref(form) {
          _this2.formElement = form;
        }
      }, this.renderErrors(), react.createElement(_SchemaField, {
        schema: schema,
        uiSchema: uiSchema,
        errorSchema: errorSchema,
        idSchema: idSchema,
        idPrefix: idPrefix,
        idSeparator: idSeparator,
        formContext: formContext,
        formData: formData,
        onChange: this.onChange,
        onBlur: this.onBlur,
        onFocus: this.onFocus,
        registry: registry,
        disabled: disabled,
        readonly: readonly
      }), children ? children : react.createElement("div", null, react.createElement("button", {
        type: "submit",
        className: "btn btn-info"
      }, "Submit")));
    }
  }]);

  return Form;
}(react.Component);

Form_defineProperty(Form, "defaultProps", {
  uiSchema: {},
  noValidate: false,
  liveValidate: false,
  disabled: false,
  readonly: false,
  noHtml5Validate: false,
  ErrorList: ErrorList,
  omitExtraData: false
});



if (false) {}
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/withTheme.js
function withTheme_extends() {
  withTheme_extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return withTheme_extends.apply(this, arguments);
}

function withTheme_objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      withTheme_defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function withTheme_defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function withTheme_objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = withTheme_objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function withTheme_objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}





function withTheme(themeProps) {
  return (0,react.forwardRef)(function (_ref, ref) {
    var fields = _ref.fields,
        widgets = _ref.widgets,
        directProps = withTheme_objectWithoutProperties(_ref, ["fields", "widgets"]);

    fields = withTheme_objectSpread({}, themeProps.fields, fields);
    widgets = withTheme_objectSpread({}, themeProps.widgets, widgets);
    return react.createElement(es, withTheme_extends({}, themeProps, directProps, {
      fields: fields,
      widgets: widgets,
      ref: ref
    }));
  });
}

withTheme.propTypes = {
  widgets: (prop_types_default()).object,
  fields: (prop_types_default()).object
};
/* harmony default export */ const es_withTheme = ((/* unused pure expression or super */ null && (withTheme)));
;// CONCATENATED MODULE: ./node_modules/@rjsf/core/dist/es/index.js




/* harmony default export */ const es = (Form);
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/suggest/bootstrap3.less
var bootstrap3 = __webpack_require__("./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/suggest/bootstrap3.less");
;// CONCATENATED MODULE: ./src/suggest/bootstrap3.less

      
      
      
      
      
      
      
      
      

var bootstrap3_options = {};

bootstrap3_options.styleTagTransform = (styleTagTransform_default());
bootstrap3_options.setAttributes = (setAttributesWithoutAttributes_default());

      bootstrap3_options.insert = insertBySelector_default().bind(null, "head");
    
bootstrap3_options.domAPI = (styleDomAPI_default());
bootstrap3_options.insertStyleElement = (insertStyleElement_default());

var bootstrap3_update = injectStylesIntoStyleTag_default()(bootstrap3/* default */.Z, bootstrap3_options);




       /* harmony default export */ const suggest_bootstrap3 = (bootstrap3/* default */.Z && bootstrap3/* default.locals */.Z.locals ? bootstrap3/* default.locals */.Z.locals : undefined);

// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/suggest/metadataEditor.less
var metadataEditor = __webpack_require__("./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/suggest/metadataEditor.less");
;// CONCATENATED MODULE: ./src/suggest/metadataEditor.less

      
      
      
      
      
      
      
      
      

var metadataEditor_options = {};

metadataEditor_options.styleTagTransform = (styleTagTransform_default());
metadataEditor_options.setAttributes = (setAttributesWithoutAttributes_default());

      metadataEditor_options.insert = insertBySelector_default().bind(null, "head");
    
metadataEditor_options.domAPI = (styleDomAPI_default());
metadataEditor_options.insertStyleElement = (insertStyleElement_default());

var metadataEditor_update = injectStylesIntoStyleTag_default()(metadataEditor/* default */.Z, metadataEditor_options);




       /* harmony default export */ const suggest_metadataEditor = (metadataEditor/* default */.Z && metadataEditor/* default.locals */.Z.locals ? metadataEditor/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./src/suggest/metadataEditor.tsx







 //import "semantic-ui-css/semantic.min.css";

/**
 * Component that displays the metadata editor button and triggers the editor when clicked
 *
 * @returns MetadataEditorButton React component
 */
const MetadataEditorButton = props => {
  const [metadataEditorId, setMetadataEditorId] = (0,react.useState)(0);
  const [isOpen, setIsOpen] = (0,react.useState)(false);
  const [settings, setSettings] = (0,react.useState)();
  const [ctSettings, setCtSettings] = (0,react.useState)();
  const [context, setContext] = (0,react.useState)();

  const handleButton = async () => {
    // identify the context of the editor
    const context = await getContext(); // open up the metadata editor - this is the React component!
    //openEditor(context);

    setMetadataEditorId(metadataEditorId + 1);
    setContext(context);
    setIsOpen(true);
  };

  const getContext = async () => {
    // get content from wiki editor
    const context = {};
    const area = document.querySelector(".wiki-editor textarea");

    if (area) {
      const markdownValue = area.value;
      const content = (0,dist.frontMatter)(markdownValue); // get metadata from wiki editor

      const filepath = pagePathFromLocation();
      const subjectInfo = (0,dist.markdownPathToSubject)(filepath);
      context.area = area;
      context.content = content;
    }

    return context;
  };

  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Button_Button_Button, {
    iconProps: {
      iconName: "Edit"
    },
    onClick: () => handleButton()
  }), isOpen && /*#__PURE__*/react.createElement(MetadataEditor, {
    key: metadataEditorId,
    editorInfo: props.editorInfo,
    context: context
  })); // return <></>;
};
/**
 * Component that displays the metadata editor in a DevOps panel on the right
 *
 * @returns MetadataEditor React component
 */

const MetadataEditor = props => {
  const [isOpen, setOpen] = (0,react.useState)(true);
  const [title, setTitle] = (0,react.useState)("Metadata editor");
  /**
   * Hide the panel
   */

  const hidePanel = () => {
    setOpen(false);
  };
  /**
   * Save the content from the metadata editor back to markdown
   */


  const handleSave = type => {
    const template = props.editorInfo.schemaInfo.uiSchema["ui:order"].reduce((acc, curr) => (acc[curr] = "", acc), {});
    const data = (0,dist.obj2yaml)(Object.assign(template, type.formData));
    const newyaml = "---\n" + data + "---\n" + props.context.content.body;
    props.context.area.value = newyaml;
    hidePanel();
  };

  const metadata = props.context.content.attributes;

  if (!props.editorInfo.schemaInfo) {
    alert("Sorry, not supported yet.");
    return /*#__PURE__*/react.createElement(react.Fragment, null);
  }

  return isOpen && /*#__PURE__*/react.createElement(Panel_Panel_Panel, {
    modal: true,
    size: 4,
    onDismiss: () => hidePanel(),
    titleProps: {
      text: title + " - " + props.editorInfo.subjectInfo.subject
    }
  }, /*#__PURE__*/react.createElement(es, {
    noHtml5Validate: true,
    schema: props.editorInfo.schemaInfo.jsonSchema,
    uiSchema: props.editorInfo.schemaInfo.uiSchema,
    formData: metadata,
    onSubmit: type => handleSave(type)
  }, /*#__PURE__*/react.createElement("div", {
    className: "btn-group"
  }, /*#__PURE__*/react.createElement(Button_Button_Button, {
    text: "Save",
    primary: true,
    type: "submit"
  }), /*#__PURE__*/react.createElement(Button_Button_Button, {
    text: "Cancel",
    onClick: () => hidePanel()
  }))), /*#__PURE__*/react.createElement("br", null));
};
;// CONCATENATED MODULE: ./src/suggest/suggest.tsx



class Suggest {
  /**
   * Create a new suggest instance for the current page and
   * activate the functionality
   */
  constructor(getCompetenceFrameworkSettings, getCompetenceTeamSettings) {
    this.$getCompetenceFrameworkSettings = getCompetenceFrameworkSettings;
    this.$getCompetenceTeamSettings = getCompetenceTeamSettings;
  }
  /**
   * Initialization for a new wiki editor
   */


  async handleNewWikiEditor(editor, editorInfo) {
    this.$editorInfo = editorInfo;

    if (editorInfo.schemaInfo) {
      // add button to menu bar
      const controls = editor.querySelectorAll(".ms-CommandBarItem");

      if (controls.length > 0) {
        const before = controls[controls.length - 1];
        this.addMetadataEditor(before);
      }
    }
  }
  /**
   * Adds a button for the metadata editor to the wiki editor
   *
   * @param before the HTML element, where the edit button should be inserted before
   * @param title the title of the button
   */


  addMetadataEditor(before) {
    // create a HTML element to host the React Button
    const buttonWrapper = document.createElement("div");
    buttonWrapper.className = "metadata-editor-btn-wrapper";
    before.parentElement.insertBefore(buttonWrapper, before); // render the button

    react_dom.render( /*#__PURE__*/react.createElement(MetadataEditorButton, {
      editorInfo: this.$editorInfo,
      getCompetenceFrameworkSettings: this.$getCompetenceFrameworkSettings,
      getCompetenceTeamSettings: this.$getCompetenceTeamSettings
    }), buttonWrapper);
  }

}
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/PillGroup/PillGroup.css
var PillGroup = __webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/azure-devops-ui/Components/PillGroup/PillGroup.css");
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/PillGroup/PillGroup.css

      
      
      
      
      
      
      
      
      

var PillGroup_options = {};

PillGroup_options.styleTagTransform = (styleTagTransform_default());
PillGroup_options.setAttributes = (setAttributesWithoutAttributes_default());

      PillGroup_options.insert = insertBySelector_default().bind(null, "head");
    
PillGroup_options.domAPI = (styleDomAPI_default());
PillGroup_options.insertStyleElement = (insertStyleElement_default());

var PillGroup_update = injectStylesIntoStyleTag_default()(PillGroup/* default */.Z, PillGroup_options);




       /* harmony default export */ const PillGroup_PillGroup = (PillGroup/* default */.Z && PillGroup/* default.locals */.Z.locals ? PillGroup/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/PillGroup/PillGroup.Props.js
var PillGroupOverflow;

(function (PillGroupOverflow) {
  PillGroupOverflow[PillGroupOverflow["clip"] = 0] = "clip";
  PillGroupOverflow[PillGroupOverflow["wrap"] = 1] = "wrap";
  PillGroupOverflow[PillGroupOverflow["fade"] = 2] = "fade";
})(PillGroupOverflow || (PillGroupOverflow = {}));
;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/Components/PillGroup/PillGroup.js










var PillGroup_PillGroup_PillGroup =
/** @class */
function (_super) {
  __extends(PillGroup, _super);

  function PillGroup(props) {
    var _this = _super.call(this, props) || this;

    _this.observing = false;

    _this.onClick = function (event) {
      _this.setState({
        overflow: _this.state.overflow === _this.props.overflow ? PillGroupOverflow.wrap : _this.props.overflow
      });

      event === null || event === void 0 ? void 0 : event.preventDefault();
    };

    _this.observeElement = function (element) {
      if (element && _this.intersectionContext && !_this.observing) {
        _this.intersectionContext.observe(element);

        _this.observing = true;
      }
    };

    _this.onIntersect = function (entries) {
      _this.setState({
        // Only want the effect if the right side is cut off
        overflowing: Math.round(entries[0].rootBounds.right) < Math.round(entries[0].boundingClientRect.right)
      });
    };

    _this.state = {
      overflowing: false,
      overflow: _this.props.overflow
    };
    return _this;
  }

  PillGroup.prototype.render = function () {
    var _this = this;

    var _a = this.props,
        onMouseEnter = _a.onMouseEnter,
        onMouseLeave = _a.onMouseLeave;
    var overflow = this.state.overflow;
    var contents, extend;
    extend = react.createElement(Pill_Pill_Pill, {
      excludeTabStop: true,
      onClick: this.onClick,
      size: PillSize.compact
    }, "..."); // If we have fade enabled put the intersection observer and the overflow element in place.

    if (overflow === PillGroupOverflow.fade) {
      contents = react.createElement(IntersectionContext.Consumer, null, function (intersectionContext) {
        _this.intersectionContext = intersectionContext;
        return react.createElement("div", {
          className: "bolt-pill-overflow flex-row"
        }, react.createElement("div", {
          className: "bolt-pill-group-inner flex-row"
        }, _this.state.overflowing && extend, _this.props.children), react.createElement("div", {
          className: "bolt-pill-observe",
          ref: function (element) {
            return _this.observeElement(element);
          }
        }));
      });
    } else {
      contents = react.createElement("div", {
        className: "bolt-pill-group-inner flex-row"
      }, this.state.overflowing && extend, this.props.children);
    } // Wrap the pill group in the outer shell.


    contents = react.createElement("div", {
      className: Util_css(this.props.className, "bolt-pill-group flex-row", overflow === PillGroupOverflow.wrap ? "overflow-wrap" : overflow === PillGroupOverflow.fade ? this.state.overflowing && "overflow-fade" : undefined),
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave
    }, contents); // If we have fade enabled wrap the PillGroup in the intersection.

    if (overflow === PillGroupOverflow.fade) {
      contents = react.createElement(Intersection, null, contents);
    }

    return contents;
  };

  PillGroup.prototype.componentDidMount = function () {
    if (this.intersectionContext) {
      this.intersectionContext.register(this.onIntersect);
    }
  };

  PillGroup.prototype.componentWillUnmount = function () {
    if (this.intersectionContext) {
      this.intersectionContext.unregister(this.onIntersect);
    }
  };

  return PillGroup;
}(react.Component);


;// CONCATENATED MODULE: ./node_modules/azure-devops-ui/PillGroup.js


// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/validator/validator.less
var validator = __webpack_require__("./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/validator/validator.less");
;// CONCATENATED MODULE: ./src/validator/validator.less

      
      
      
      
      
      
      
      
      

var validator_options = {};

validator_options.styleTagTransform = (styleTagTransform_default());
validator_options.setAttributes = (setAttributesWithoutAttributes_default());

      validator_options.insert = insertBySelector_default().bind(null, "head");
    
validator_options.domAPI = (styleDomAPI_default());
validator_options.insertStyleElement = (insertStyleElement_default());

var validator_update = injectStylesIntoStyleTag_default()(validator/* default */.Z, validator_options);




       /* harmony default export */ const validator_validator = (validator/* default */.Z && validator/* default.locals */.Z.locals ? validator/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./src/validator/validator.tsx






class Validator {
  constructor(getCompetenceFrameworkSettings, getCompetenceTeamSettings) {
    this.$getCompetenceFrameworkSettings = getCompetenceFrameworkSettings;
    this.$getCompetenceTeamSettings = getCompetenceTeamSettings;
  }
  /**
   * Initialization for a new wiki editor
   */


  async handleNewWikiEditor(editor, editorInfo) {
    if (editorInfo.schemaInfo) {
      const info = await this.check(editor);

      if (info) {
        // add button to menu bar
        const controls = editor.querySelectorAll(".ms-CommandBarItem");

        if (controls.length > 0) {
          const before = controls[controls.length - 1];
          this.addValidatorUI(editor, before, info);
        }
      }
    }
  }

  addValidatorUI(editor, before, info) {
    // create a HTML element to host the React Button
    const buttonWrapper = document.createElement("div");
    buttonWrapper.className = "validator-btn-wrapper";
    before.parentElement.insertBefore(buttonWrapper, before); // render the button

    react_dom.render( /*#__PURE__*/react.createElement(ValidatorUI, {
      editor: editor,
      info: info,
      getCompetenceFrameworkSettings: this.$getCompetenceFrameworkSettings,
      getCompetenceTeamSettings: this.$getCompetenceTeamSettings
    }), buttonWrapper);
  }
  /**
   * Parse Query String
   * @param {string} search
   * @returns {Object.<string, string>}
   */


  parseQueryString(search) {
    return (search || "").replace(/^\?/g, "").split("&").reduce((acc, query) => {
      const [key, value] = query.split("=");

      if (key) {
        acc[key] = decodeURIComponent(value);
      }

      return acc;
    }, {});
  }

  isWikiEdit(search) {
    // https://dev.azure.com/MacawCompetenceTeams/Custom%20Application%20Development/_wiki/wikis/Competence%20Framework/2553/?wikiVersion=GBmain&_a=edit&pagePath=/Competence%20Teams/Custom%20Application%20Development/topics/hardskills/React%20Query
    if (search && search.indexOf("wikiVersion") > -1 && search.indexOf("_a=edit") > -1) {
      return true;
    } else {
      return false;
    }
  }

  getPagePath(search) {
    const qs = this.parseQueryString(search);
    const path = qs["pagePath"];

    if (path) {
      return path; //return path.replace(/ /g, "-"); // DevOps Wiki pages have "-" for spaces
    }
  }

  async check(editor) {
    const search = window.location.search;

    if (this.isWikiEdit(search)) {
      const markdownPath = this.getPagePath(search);

      if (markdownPath != null) {
        const textarea = editor.querySelector("textarea");

        if (textarea != null) {
          return {
            found: true,
            textarea,
            markdownPath
          };
        }
      }
    }

    return null;
  }

}

const ValidatorUI = props => {
  const [errors, setErrors] = (0,react.useState)([]);
  const colorOK = {
    red: 194,
    green: 252,
    blue: 173
  };
  const colorError = {
    red: 252,
    green: 194,
    blue: 173
  };
  const pillColor = errors.length > 0 ? colorError : colorOK;
  const pillText = errors.length > 0 ? errors.length > 1 ? `${errors.length} errors` : `${errors.length} error` : "OK";

  const handleInput = async () => {
    console.log("check");
    const text = props.info.textarea.value;
    const validationErrors = await (0,dist.validatePageFrontmatter)(props.info.markdownPath, text, props.getCompetenceFrameworkSettings, props.getCompetenceTeamSettings);
    setErrors(validationErrors); //ensureValidationErrorsDiv(validationErrors);
  };

  const handleClick = () => {
    let errorsText = "Your frontmatter has no errors!";

    if (errors.length > 0) {
      errorsText = "Validation errors:\n";
      errorsText += errors.map(validationError => "- " + validationError.message).join("\n");
    }

    errorsText += "\n\n";
    window.alert(errorsText);
  }; // add listener to textarea


  (0,react.useEffect)(() => {
    props.info.textarea.addEventListener("input", handleInput);
    return () => {
      props.info.textarea.removeEventListener("input", handleInput);
    };
  }, []); // Create a pill in the button bar

  return /*#__PURE__*/react.createElement(PillGroup_PillGroup_PillGroup, {
    className: "flex-row"
  }, /*#__PURE__*/react.createElement(Pill_Pill_Pill, {
    size: PillSize.compact,
    variant: PillVariant.outlined,
    color: pillColor,
    onClick: handleClick
  }, pillText));
};
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/style/main.less
var main = __webpack_require__("./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/style/main.less");
;// CONCATENATED MODULE: ./src/style/main.less

      
      
      
      
      
      
      
      
      

var main_options = {};

main_options.styleTagTransform = (styleTagTransform_default());
main_options.setAttributes = (setAttributesWithoutAttributes_default());

      main_options.insert = insertBySelector_default().bind(null, "head");
    
main_options.domAPI = (styleDomAPI_default());
main_options.insertStyleElement = (insertStyleElement_default());

var main_update = injectStylesIntoStyleTag_default()(main/* default */.Z, main_options);




       /* harmony default export */ const style_main = (main/* default */.Z && main/* default.locals */.Z.locals ? main/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./src/index.ts






async function getWikiPage(pagePath) {
  // GET https://dev.azure.com/{organization}/{project}/_apis/wiki/wikis/{wikiIdentifier}/pages?path=/SamplePage973&includeContent=True&api-version=6.0
  // https://dev.azure.com/MacawCompetenceTeams/Custom%20Application%20Development/_apis/wiki/wikis/Competence%20Framework/pages?path=/settings&includeContent=True&api-version=6.0
  // todo: read path from correct competence team settings
  const pageApiUrl = `https://dev.azure.com/MacawCompetenceTeams/Custom%20Application%20Development/_apis/wiki/wikis/Competence%20Framework/pages?path=${pagePath}&includeContent=True&api-version=6.0`;

  try {
    const response = await fetch(pageApiUrl);
    const json = await response.json();
    return json.content;
  } catch (error) {
    console.log(`Failed to get Wiki page on URL ${pageApiUrl}`);
    return null;
  }
}

async function getWikiPageFrontmatter(pagePath) {
  try {
    const content = await getWikiPage(pagePath);

    if (content !== null) {
      const page = front_matter_default()(content);
      return page.attributes;
    }
  } catch (error) {
    console.log(`Failed to get Wiki page ${pagePath}`);
    console.error(error);
    return null;
  }
}

async function src_main() {
  const competenceFrameworkSettings = await getWikiPageFrontmatter("/settings");

  if (competenceFrameworkSettings != null) {
    const getCompetenceFrameworkSettings = async () => competenceFrameworkSettings;

    const getCompetenceTeamSettings = async competenceTeam => await getWikiPageFrontmatter(`/Competence%20Teams/${competenceTeam}/settings`);

    const wikiEditor = new WikiEditorObserver(getCompetenceFrameworkSettings, getCompetenceTeamSettings);
    wikiEditor.addListener(new Suggest(getCompetenceFrameworkSettings, getCompetenceTeamSettings));
    wikiEditor.addListener(new Validator(getCompetenceFrameworkSettings, getCompetenceTeamSettings));
  }
}

src_main().catch(e => {
  console.log(e);
});
})();

/******/ })()
;